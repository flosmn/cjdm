<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="testFindPartyWithSearchParameters" short-description="Test findparty service on certain search parameters" login-required="false">
        <!-- Precondition:
             1. Go to Party Manager
             2. Enter search options (In this particular case, partyId and roleTypeId are being passed)
             3. Click Lookup Party
        -->
        <!-- Process tested by test case:
             1. This test the process for find party on basis of given search parameters
        -->
        <!-- Post condition:
             1. Selected party and information should be displayed in search result
        -->
        <set field="searchParams.partyId" value="DemoCustomer"/>
        <set field="searchParams.roleTypeId" value="CUSTOMER"/>
        <map-to-map map="searchParams" to-map="serviceCtx"/>
        <call-service service-name="findParty" in-map-name="serviceCtx">
            <results-to-map map-name="partyList"/>
        </call-service>

        <find-by-primary-key entity-name="PartyRoleDetailAndPartyDetail" map="searchParams" value-field="partyRoleDetailAndPartyDetail"/>
        <if-not-empty field="partyRoleDetailAndPartyDetail">
            <assert><not><if-empty field="partyList"/></not></assert>
        <else>
            <assert><if-empty field="partyList"/></assert>
        </else>
        </if-not-empty>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testFindPartyWithNoSearchParameters" short-description="Test findparty service when no search parameters are passed" login-required="false">
        <!-- Precondition:
             1. Go to Party Manager
             2. Click on Show all records
        -->
        <!-- Process tested by test case:
             1. This test the process for find party if no search parameters are passed
        -->
        <!-- Post condition:
             1. All existing parties should be displayed in search result.
        -->
        <set field="serviceCtx.lookupFlag" value="Y"/>
        <call-service service-name="findParty" in-map-name="serviceCtx">
            <result-to-field result-name="partyList"/>
        </call-service>
        <!-- At least one party will always exists in the system in any case -->
        <assert><not><if-empty field="partyList"/></not></assert>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testUpdatePartyEmailAddress" short-description="Test updatePartyEmailAddress service" login-required="false">
        <!-- Precondition:
             1. Go to Party Manager
             2. Click on Lookup Party
             3. Select one party (DemoCustomer in this case)
             4. Update email address
        -->
        <!-- Process tested by test case:
             1. This test the process of update email address
        -->
        <!-- Post condition:
             1. If email address is changed, a new record is created in ContactMech entity else there is no change.
        -->
        <set field="partyId" value="DemoCustomer"/>
        <set field="contactMechTypeId" value="EMAIL_ADDRESS"/>
        <call-class-method method-name="findPartyLatestContactMech" class-name="org.ofbiz.party.party.PartyWorker" ret-field="partyAndContactMech">
            <field field="partyId" type="java.lang.String"/>
            <field field="contactMechTypeId" type="java.lang.String"/>
            <field field="delegator" type="org.ofbiz.entity.GenericDelegator"/>
        </call-class-method>
        <!-- first try with just updating without changing the email address -->
        <set field="serviceCtx.partyId" from-field="partyId"/>
        <set field="serviceCtx.emailAddress" from-field="partyAndContactMech.infoString"/>
        <set field="serviceCtx.contactMechId" from-field="partyAndContactMech.contactMechId"/>
        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>

        <call-service service-name="updatePartyEmailAddress" in-map-name="serviceCtx">
            <result-to-field result-name="contactMechId"/>
        </call-service>
        <log level="info" message="====== contactMechId [${contactMechId}] ======"/>
        <entity-one entity-name="ContactMech" value-field="contactMech"/>
        <assert>
            <not><if-empty field="contactMech"/></not>
            <if-compare-field field="contactMechId" to-field="serviceCtx.contactMechId" operator="equals"/>
            <if-compare-field field="contactMech.infoString" to-field="serviceCtx.emailAddress" operator="equals"/>
        </assert>
        <check-errors/>

        <clear-field field="contactMech"/>
        <!-- now update with changing the email address, a new record will be created in ContactMech entity this time -->
        <set field="serviceCtx.emailAddress" value="ofbiz-test@yahoo.com"/>
        <call-service service-name="updatePartyEmailAddress" in-map-name="serviceCtx">
            <result-to-field result-name="contactMechId" field="newContactMechId"/>
        </call-service>
        <log level="info" message="====== New contactMechId [${newContactMechId}] for email address is created for party [${partyId}] ======"/>
        <entity-one entity-name="ContactMech" value-field="contactMech">
            <field-map field-name="contactMechId" from-field="newContactMechId"/>
        </entity-one>
        <assert>
            <not><if-empty field="contactMech"/></not>
            <if-compare-field field="newContactMechId" to-field="serviceCtx.contactMechId" operator="not-equals"/>
            <if-compare-field field="contactMech.infoString" to-field="serviceCtx.emailAddress" operator="equals"/>
        </assert>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testUpdatePartyTelecomNumber" short-description="Test updatePartyTelecomNumber service" login-required="false">
        <!-- Precondition:
             1. Go to the Party Manager
             2. Click on Lookup Party
             3. Select any party (DemoCustomer in this case)
             4. update telecom number fields
        -->
        <!-- Process tested by test case:
             1. This test the process of update telecom number.
        -->
        <!-- Post condition:
             1. If telecom number is changed then a new record is created in ContactMech and TelecomNumber entity else no change.
        -->
        <set field="partyId" value="DemoCustomer"/>
        <call-class-method method-name="findPartyLatestTelecomNumber" class-name="org.ofbiz.party.party.PartyWorker" ret-field="telecomNumber">
            <field field="partyId" type="java.lang.String"/>
            <field field="delegator" type="org.ofbiz.entity.GenericDelegator"/>
        </call-class-method>
        <!-- first try with just updating without changing the telecom number -->
        <set-service-fields service-name="updatePartyTelecomNumber" map="telecomNumber" to-map="serviceCtx"/>
        <set field="serviceCtx.partyId" from-field="partyId"/>

        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>

        <call-service service-name="updatePartyTelecomNumber" in-map-name="serviceCtx">
           <result-to-field result-name="contactMechId"/>
        </call-service>
        <log level="info" message="====== contactMechId [${contactMechId}] ======"/>
        <entity-one entity-name="ContactMech" value-field="contactMech"/>
        <assert>
            <not><if-empty field="contactMech"/></not>
            <if-compare-field field="contactMechId" to-field="serviceCtx.contactMechId" operator="equals"/>
        </assert>
        <clear-field field="telecomNumber"/>
        <get-related-one  value-field="contactMech" relation-name="TelecomNumber" to-value-field="telecomNumber"/>
        <assert>
            <not><if-empty field="telecomNumber"/></not>
            <if-compare-field field="telecomNumber.areaCode" to-field="serviceCtx.areaCode" operator="equals"/>
            <if-compare-field field="telecomNumber.contactNumber" to-field="serviceCtx.contactNumber" operator="equals"/>
        </assert>
        <check-errors/>

        <clear-field field="contactMech"/>
        <clear-field field="telecomNumber"/>

        <!-- try now with changing the telecom number, a new record will be created in ContactMech, TelecomNumber entity this time -->
        <set field="serviceCtx.contactNumber" value="555-5555"/>
        <call-service service-name="updatePartyTelecomNumber" in-map-name="serviceCtx">
           <result-to-field result-name="contactMechId" field="newContactMechId"/>
        </call-service>
        <log level="info" message="====== New contactMechId [${newContactMechId}] for TelecomNumber is created for party [${partyId}] ======"/>
        <entity-one entity-name="ContactMech" value-field="contactMech">
            <field-map field-name="contactMechId" from-field="newContactMechId"/>
        </entity-one>
        <assert>
            <not><if-empty field="contactMech"/></not>
            <if-compare-field field="newContactMechId" to-field="serviceCtx.contactMechId" operator="not-equals"/>
        </assert>
        <get-related-one  value-field="contactMech" relation-name="TelecomNumber" to-value-field="telecomNumber"/>
        <assert>
            <not><if-empty field="telecomNumber"/></not>
            <if-compare-field field="telecomNumber.contactNumber" to-field="serviceCtx.contactNumber" operator="equals"/>
        </assert>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testUpdatePartyPostalAddress" short-description="Test updatePartyPostalAddress service" login-required="false">
        <!-- Precondition:
             1. Go to the Party Manager
             2. Click on Lookup Party
             3. Select any party (DemoCustomer in this case)
             4. Edit address fields, click Save
        -->
        <!-- Process tested by test case:
             1. This test the process of update postal address
        -->
        <!-- Post condition:
             1. If postal address is changed then a new record is created in ContactMech and PostalAddress entity else no change.
        -->
        <set field="partyId" value="DemoCustomer"/>
        <call-class-method method-name="findPartyLatestPostalAddress" class-name="org.ofbiz.party.party.PartyWorker" ret-field="postalAddress">
            <field field="partyId" type="java.lang.String"/>
            <field field="delegator" type="org.ofbiz.entity.GenericDelegator"/>
        </call-class-method>
        <!-- first try with just updating without changing the postal address -->
        <set-service-fields service-name="updatePartyPostalAddress" map="postalAddress" to-map="serviceCtx"/>
        <set field="serviceCtx.partyId" from-field="partyId"/>

        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>

        <call-service service-name="updatePartyPostalAddress" in-map-name="serviceCtx">
            <result-to-field result-name="contactMechId"/>
        </call-service>
        <log level="info" message="====== contactMechId [${contactMechId}] ======"/>
        <entity-one entity-name="ContactMech" value-field="contactMech"/>
        <assert>
            <not><if-empty field="contactMech"/></not>
            <if-compare-field field="contactMechId" to-field="serviceCtx.contactMechId" operator="equals"/>
        </assert>
        <clear-field field="postalAddress"/>
        <get-related-one  value-field="contactMech" relation-name="PostalAddress" to-value-field="postalAddress"/>
        <assert>
            <not><if-empty field="postalAddress"/></not>
            <if-compare-field field="postalAddress.address1" to-field="serviceCtx.address1" operator="equals"/>
            <if-compare-field field="postalAddress.stateProvinceGeoId" to-field="serviceCtx.stateProvinceGeoId" operator="equals"/>
            <if-compare-field field="postalAddress.postalCode" to-field="serviceCtx.postalCode" operator="equals"/>
        </assert>
        <check-errors/>

        <clear-field field="contactMech"/>
        <clear-field field="postalAddress"/>

        <!-- try now with changing the postal address fields, a new record will be created in ContactMech, PostalAddress entity this time -->
        <set field="serviceCtx.stateProvinceGeoId" value="VA"/>
        <set field="serviceCtx.postalCode" value="20147"/>
        <call-service service-name="updatePartyPostalAddress" in-map-name="serviceCtx">
           <result-to-field result-name="contactMechId" field="newContactMechId"/>
        </call-service>
        <log level="info" message="====== New contactMechId [${newContactMechId}] for PostalAddress is created for party [${partyId}] ======"/>
        <entity-one entity-name="ContactMech" value-field="contactMech">
            <field-map field-name="contactMechId" from-field="newContactMechId"/>
        </entity-one>
        <assert>
            <not><if-empty field="contactMech"/></not>
            <if-compare-field field="newContactMechId" to-field="serviceCtx.contactMechId" operator="not-equals"/>
        </assert>
        <get-related-one  value-field="contactMech" relation-name="PostalAddress" to-value-field="postalAddress"/>
        <assert>
            <not><if-empty field="postalAddress"/></not>
            <if-compare-field field="postalAddress.stateProvinceGeoId" to-field="serviceCtx.stateProvinceGeoId" operator="equals"/>
            <if-compare-field field="postalAddress.postalCode" to-field="serviceCtx.postalCode" operator="equals"/>
        </assert>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testUpdatePartyCreditCard" short-description="Test updateCreditCard service" login-required="false">
        <!-- Precondition:
             1. Go to the Party Manager
             2. Click on Lookup Party
             3. Select any Party (DemoCustomer in this case)
             4. Edit Payment Method, click Save
        -->
        <!-- Process tested by test case:
             1. This test the process of update credit card
        -->
        <!-- Post condition:
             1. If credit card information is changed than a new PaymentMethod, CreditCard record is created else no change.
        -->
        <set field="serviceCtx.partyId" value="DemoCustomer"/>
        <find-by-and entity-name="PaymentMethodAndCreditCard" map="serviceCtx" list="paymentMethodAndCreditCards"/>
        <filter-list-by-date list="paymentMethodAndCreditCards"/>
        <first-from-list list="paymentMethodAndCreditCards" entry="paymentMethodAndCreditCard"/>
        <!-- first try with just updating without changing the credit card information -->
        <set-service-fields service-name="updateCreditCard" map="paymentMethodAndCreditCard" to-map="serviceCtx"/>

        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>

        <call-service service-name="updateCreditCard" in-map-name="serviceCtx">
            <result-to-field result-name="paymentMethodId"/>
            <result-to-field result-name="oldPaymentMethodId"/>
        </call-service>
        <log level="info" message="====== paymentMethodId [${paymentMethodId}] ======"/>
        <clear-field field="paymentMethodAndCreditCard"/>
        <entity-one entity-name="PaymentMethodAndCreditCard" value-field="paymentMethodAndCreditCard"/>
        <assert>
            <not><if-empty field="paymentMethodAndCreditCard"/></not>
            <if-compare-field field="paymentMethodId" to-field="oldPaymentMethodId" operator="equals"/>
            <if-compare-field field="paymentMethodAndCreditCard.cardType" to-field="serviceCtx.cardType" operator="equals"/>
            <if-compare-field field="paymentMethodAndCreditCard.cardNumber" to-field="serviceCtx.cardNumber" operator="equals"/>
        </assert>
        <check-errors/>

        <clear-field field="paymentMethodAndCreditCard"/>
        <clear-field field="paymentMethodId"/>
        <clear-field field="oldPaymentMethodId"/>

        <!-- try now with few changes (cardType, cardNumber in this case), a new record will be created in PaymentMethod, CreditCard entity -->
        <set field="serviceCtx.cardType" value="MasterCard"/>
        <set field="serviceCtx.cardNumber" value="5500000000000004"/>
        <call-service service-name="updateCreditCard" in-map-name="serviceCtx">
            <result-to-field result-name="paymentMethodId"/>
            <result-to-field result-name="oldPaymentMethodId"/>
        </call-service>
        <log level="info" message="====== New paymentMethodId [${paymentMethodId}] created for party [${serviceCtx.partyId}] ======"/>
        <entity-one entity-name="PaymentMethodAndCreditCard" value-field="paymentMethodAndCreditCard"/>
        <assert>
            <not><if-empty field="paymentMethodAndCreditCard"/></not>
            <if-compare-field field="paymentMethodId" to-field="oldPaymentMethodId" operator="not-equals"/>
            <if-compare-field field="paymentMethodAndCreditCard.cardType" to-field="serviceCtx.cardType" operator="equals"/>
            <if-compare-field field="paymentMethodAndCreditCard.cardNumber" to-field="serviceCtx.cardNumber" operator="equals"/>
        </assert>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testUpdateUserPassword" short-description="Test updatePassword service" login-required="false">
        <!-- Precondition:
             1. Go to the Party Manager
             2. Click on Lookup Party
             3. Select any party (DemoCustomer in this case)
             4. Edit User Login
        -->
        <!-- Process tested by test case:
             1. This test the process of update password
        -->
        <!-- Post condition:
             1. Old password should be replaced by new password successfully
        -->
        <set field="partyId" value="DemoCustomer"/>
        <set field="userLoginId" value="DemoCustomer"/>
        <call-class-method method-name="findPartyLatestUserLogin" class-name="org.ofbiz.party.party.PartyWorker" ret-field="partyUserLogin">
            <field field="partyId" type="java.lang.String"/>
            <field field="delegator" type="org.ofbiz.entity.GenericDelegator"/>
        </call-class-method>
        <set-service-fields service-name="updatePassword" map="partyUserLogin" to-map="serviceCtx"/>
        <!-- old details: userLoginId = DemoCustomer, password = ofbiz -->
        <set field="serviceCtx.newPassword" value="ofbiz-demo"/>
        <set field="serviceCtx.newPasswordVerify" value="ofbiz-demo"/>

        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>

        <call-service service-name="updatePassword" in-map-name="serviceCtx">
            <result-to-field result-name="updatedUserLogin"/>
        </call-service>

        <entity-one entity-name="PartyAndUserLogin" value-field="partyAndUserLogin">
            <field-map field-name="userLoginId" from-field="partyUserLogin.userLoginId"/>
            <field-map field-name="partyId" from-field="partyId"/>
        </entity-one>
        <!-- get the encrypted password -->
        <call-class-method method-name="getHashType" class-name="org.ofbiz.common.login.LoginServices" ret-field="hashType"/>
        <call-class-method method-name="getDigestHash" class-name="org.ofbiz.base.crypto.HashCrypt" ret-field="newPasswordHash">
            <field field="serviceCtx.newPassword" type="java.lang.String"/>
            <field field="hashType" type="java.lang.String"/>
        </call-class-method>
        <assert>
            <not><if-empty field="partyAndUserLogin"/></not>
            <if-compare-field field="partyAndUserLogin.currentPassword" to-field="newPasswordHash" operator="equals"/>
            <if-compare-field field="partyAndUserLogin.userLoginId" to-field="userLoginId" operator="equals"/>
        </assert>
        <check-errors/>
     </simple-method>
    <simple-method method-name="testAddRole" short-description="test to add a new role to a party" login-required="false">
        <log level="info" message="====================Add a new role to a party test case=========================================="/>
        <set field="addRoleMap.partyId" value="DemoCustomer"/>
        <set field="addRoleMap.roleTypeId" value="SUPPLIER"/>
        <entity-one entity-name="UserLogin" value-field="addRoleMap.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="createPartyRole" in-map-name="addRoleMap"/>
        <check-errors/>
    </simple-method>
    <simple-method method-name="testCreateNewCommEvent" short-description="test to create a new communication event" login-required="false">
        <log level="info" message="====================Create a new communication event test case=========================================="/>
        <set field="createNewCommEventMap.communicationEventTypeId" value="EMAIL_COMMUNICATION"/>
        <set field="createNewCommEventMap.statusId" value="COM_ENTERED"/>
        <set field="createNewCommEventMap.partyIdFrom" value="DemoCustomer"/>
        <set field="createNewCommEventMap.contactMechTypeId" value="EMAIL_ADDRESS"/>
        <entity-one entity-name="UserLogin" value-field="createNewCommEventMap.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="createCommunicationEvent" in-map-name="createNewCommEventMap">
            <result-to-field result-name="communicationEventId" field="commEventMap.communicationEventId"/>
        </call-service>
        <call-simple-method method-name="testUpdateCommEvent"/>
        <entity-one entity-name="CommunicationEvent" value-field="communicationEvent">
            <field-map field-name="communicationEventId" from-field="commEventMap.communicationEventId"/>
        </entity-one>
        <assert>
            <not><if-empty field="communicationEvent"/></not>
            <if-compare-field field="communicationEvent.communicationEventId" to-field="commEventMap.communicationEventId" operator="equals"/>
            <if-compare-field field="communicationEvent.communicationEventTypeId" to-field="updateCommEventMap.communicationEventTypeId" operator="equals"/>
            <if-compare-field field="communicationEvent.statusId" to-field="updateCommEventMap.statusId" operator="equals"/>
            <if-compare-field field="communicationEvent.partyIdFrom" to-field="updateCommEventMap.partyIdFrom" operator="equals"/>
            <if-compare-field field="communicationEvent.contactMechTypeId" to-field="updateCommEventMap.contactMechTypeId" operator="equals"/>
        </assert>
        <check-errors/>
    </simple-method>
    <simple-method method-name="testUpdateCommEvent" short-description="test to update communication event" login-required="false">
        <log level="info" message="====================Update communication event test case=========================================="/>
        <set field="updateCommEventMap.communicationEventId" from-field="commEventMap.communicationEventId"/>
        <set field="updateCommEventMap.communicationEventTypeId" value="AUTO_EMAIL_COMM"/>
        <set field="updateCommEventMap.statusId" value="COM_COMPLETE"/>
        <set field="updateCommEventMap.partyIdFrom" value="admin"/>
        <set field="updateCommEventMap.contactMechTypeId" value="ELECTRONIC_ADDRESS"/>
        <entity-one entity-name="UserLogin" value-field="updateCommEventMap.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="updateCommunicationEvent" in-map-name="updateCommEventMap"/>
        <check-errors/>
    </simple-method>
    <simple-method method-name="testCreateNewRequest" short-description="create a new request" login-required="false">
        <log level="info" message="====================Create a new request test case=========================================="/>
        <set field="createNewRequestMap.custRequestTypeId" value="RF_PROPOSAL"/>
        <set field="createNewRequestMap.statusId" value="CRQ_SUBMITTED"/>
        <set field="createNewRequestMap.priority" value="1L" type="Long"/>
        <set field="createNewRequestMap.fromPartyId" value="DemoCustomer"/>
        <entity-one entity-name="UserLogin" value-field="createNewRequestMap.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="createCustRequest" in-map-name="createNewRequestMap">
          <result-to-field result-name="custRequestId" field="requestMap.custRequestId"/>
        </call-service>
        <call-simple-method method-name="testUpdateRequest"/>
        <entity-one entity-name="CustRequest" value-field="custRequest">
            <field-map field-name="custRequestId" from-field="requestMap.custRequestId"/>
        </entity-one>
        <assert>
            <not><if-empty field="custRequest"/></not>
            <if-compare-field field="custRequest.custRequestId" to-field="requestMap.custRequestId" operator="equals"/>
            <if-compare-field field="custRequest.custRequestTypeId" to-field="updateRequestMap.custRequestTypeId" operator="equals"/>
            <if-compare-field field="custRequest.statusId" to-field="updateRequestMap.statusId" operator="equals"/>
            <if-compare-field field="custRequest.priority" to-field="updateRequestMap.priority" operator="equals"/>
            <if-compare-field field="custRequest.fromPartyId" to-field="updateRequestMap.fromPartyId" operator="equals"/>
        </assert>
        <check-errors/>
    </simple-method>
    <simple-method method-name="testUpdateRequest" short-description="update a request" login-required="false">
        <log level="info" message="====================Update a request test case=========================================="/>
        <set field="updateRequestMap.custRequestId" from-field="requestMap.custRequestId"/>
        <set field="updateRequestMap.custRequestTypeId" value="RF_INFO"/>
        <set field="updateRequestMap.statusId" value="CRQ_ACCEPTED"/>
        <set field="updateRequestMap.priority" value="2L" type="Long"/>
        <set field="updateRequestMap.fromPartyId" value="admin"/>
        <entity-one entity-name="UserLogin" value-field="updateRequestMap.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="updateCustRequest" in-map-name="updateRequestMap"/>
        <check-errors/>
    </simple-method>
</simple-methods>
