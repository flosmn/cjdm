<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">


    <simple-method method-name="createCommunicationEventWithPermission" short-description="Create a CommunicationEvent with permission check">
        <set field="parameters.permission" value="true"/>
        <call-simple-method method-name="createCommunicationEvent"/>
    </simple-method>

    <simple-method method-name="createCommunicationEventWithoutPermission" short-description="Create a CommunicationEvent without permission check">
        <set field="parameters.permission" value="false"/>
        <call-simple-method method-name="createCommunicationEvent"/>
    </simple-method>

    <simple-method method-name="createCommunicationEvent" short-description="Create a CommunicationEvent with or w/o permission check">
        <!-- check for forward only if created by a user and not incoming email by system-->
        <if-compare field="parameters.userLogin.userLoginId" value="system" operator="not-equals">
            <if-not-empty field="parameters.origCommEventId">
                <entity-one entity-name="CommunicationEvent" value-field="newEntity">
                    <field-map field-name="communicationEventId" from-field="parameters.origCommEventId"/>
                </entity-one>
                <clear-field field="newEntity.communicationEventId"/>
                <clear-field field="newEntity.messageId"/>
                <clear-field field="newEntity.partyIdTo"/>
                <set field="newEntity.partyIdFrom" from-field="parameters.partyIdFrom"/>
                <set field="newEntity.subject" value="Forw: ${newEntity.subject}"/>
            </if-not-empty>
        </if-compare>
        <if-empty field="newEntity">
            <make-value value-field="newEntity" entity-name="CommunicationEvent"/>
        </if-empty>
        
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        
        <if-empty field="parameters.communicationEventId">
            <sequenced-id sequence-name="CommunicationEvent" field="newEntity.communicationEventId"/>
            <else>
                <set field="newEntity.communicationEventId" from-field="parameters.communicationEventId"/>
            </else>
        </if-empty>
        <field-to-result field="newEntity.communicationEventId" result-name="communicationEventId"/>

        <!-- check for reply -->
        <if-compare field="parameters.userLogin.userLoginId" value="system" operator="not-equals"><!-- not apply on incoming emails -->
            <if-not-empty field="parameters.parentCommEventId">
                <entity-one entity-name="CommunicationEvent" value-field="parentCommEvent">
                    <field-map field-name="communicationEventId" from-field="parameters.parentCommEventId"/>
                </entity-one>
                <entity-one entity-name="PartyNameView" value-field="partyNameView">
                    <field-map field-name="partyId" from-field="parentCommEvent.partyIdFrom"/>
                </entity-one>
                <set field="newEntity.communicationEventTypeId" from-field="parentCommEvent.communicationEventTypeId"/>
                <if-compare field="newEntity.communicationEventTypeId" value="AUTO_EMAIL_COMM" operator="equals">
                    <set field="newEntity.communicationEventTypeId" value="EMAIL_COMMUNICATION"/>
                </if-compare>
                <set field="newEntity.partyIdFrom" from-field="parameters.partyIdFrom" default-value="parameters.userLogin.partyId"/>
                <set field="newEntity.partyIdTo" from-field="parentCommEvent.partyIdFrom"/>
                
                <set field="newEntity.subject" value="RE: ${parentCommEvent.subject}"/>
                
                <set field="newEntity.content" value="${groovy:
                    def localContent = parentCommEvent.content;
                    if (!localContent) return(&quot;&quot;);
                    
                    resultLine = &quot;\n\n\n&quot; 
                    + (partyNameView.firstName!=null?partyNameView.firstName:&quot;&quot;) 
                    + &quot; &quot; 
                    + (partyNameView.middleName!=null?partyNameView.middleName+&quot; &quot;:&quot;&quot;) 
                    + &quot; &quot; 
                    + (partyNameView.lastName!=null?partyNameView.lastName:&quot;&quot;) 
                    + (partyNameView.groupName!=null?partyNameView.groupName:&quot;&quot;) 
                    + &quot; wrote:&quot;;
                    resultLine += &quot;\n -------------------------------------------------------------------- &quot;;
                    resultLine += &quot;\n&gt; &quot; + localContent.substring(0, localContent.indexOf(&quot;\n&quot;,0) == -1 ? localContent.length() : localContent.indexOf(&quot;\n&quot;,0));
                    startChar = localContent.indexOf(&quot;\n&quot;,0);
                    while(startChar != -1 &amp;&amp; (startChar = localContent.indexOf(&quot;\n&quot;,startChar) + 1) != 0)
                    resultLine += &quot;\n&gt; &quot; + localContent.substring(startChar, localContent.indexOf(&quot;\n&quot;,startChar)==-1 ? localContent.length() : localContent.indexOf(&quot;\n&quot;,startChar));
                    return(resultLine);
                    }"/>
                
                <!-- set rolestatus from original email to completed -->
                <entity-and list="roles" entity-name="CommunicationEventRole">
                    <field-map field-name="communicationEventId" from-field="parentCommEvent.communicationEventId"/>
                    <field-map field-name="partyId" from-field="parentCommEvent.partyIdTo"/>
                </entity-and>
                <if-not-empty field="roles">
                    <first-from-list list="roles" entry="role"/>
                    <set-service-fields service-name="setCommunicationEventRoleStatus" map="role" to-map="newStat"/>
                    <set field="newStat.statusId" value="COM_ROLE_COMPLETED"/>
                    <call-service service-name="setCommunicationEventRoleStatus" in-map-name="newStat"/>
                </if-not-empty>
            </if-not-empty>
        </if-compare>
        
        <if-empty field="newEntity.statusId">
            <set value="COM_ENTERED" field="newEntity.statusId"/>
        </if-empty>

        <if-compare field="newEntity.communicationEventTypeId" value="EMAIL_COMMUNICATION" operator="equals">
            <!-- if only contactMechIdFrom and no partyIdFrom is provided for creation email address find the related party -->
            <if-empty field="newEntity.partyIdFrom">
                <if-not-empty field="newEntity.contactMechIdFrom">
                    <entity-and entity-name="PartyAndContactMech" list="partyContactMechs" filter-by-date="true">
                        <field-map field-name="contactMechId" from-field="newEntity.contactMechIdFrom"/>
                        <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
                    </entity-and>
                    <first-from-list entry="partyContactMech" list="partyContactMechs"/>
                    <set field="newEntity.partyIdFrom" from-field="partyContactMech.partyId"/>
                </if-not-empty>
            </if-empty>
            
            <!-- if partyIdFrom provided but no contactMechIdFrom get emailAddress -->
            <if-not-empty field="newEntity.partyIdFrom">
                <if-empty field="newEntity.contactMechIdFrom">
                    <set field="getEmail.partyId" from-field="newEntity.partyIdFrom"/>
                    <call-service service-name="getPartyEmail" in-map-name="getEmail">
                        <result-to-field result-name="contactMechId" field="newEntity.contactMechIdFrom"/>
                    </call-service>
                </if-empty>
            </if-not-empty>
            
            <!-- if only contactMechIdTo and no partyIdTo is provided for creation email address find the related party -->
            <if-empty field="newEntity.partyIdTo">
                <if-not-empty field="newEntity.contactMechIdTo">
                    <entity-and entity-name="PartyAndContactMech" list="partyContactMechs" filter-by-date="true">
                        <field-map field-name="contactMechId" from-field="newEntity.contactMechIdTo"/>
                        <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
                    </entity-and>
                    <first-from-list entry="partyContactMech" list="partyContactMechs"/>
                    <set field="newEntity.partyIdTo" from-field="partyContactMech.partyId"/>
                </if-not-empty>
            </if-empty>
            
            <!-- if partyId provided but no contactMechIdTo get emailAddress -->
            <if-not-empty field="newEntity.partyIdTo">
                <if-empty field="newEntity.contactMechIdTo">
                    <set field="getEmail.partyId" from-field="newEntity.partyIdTo"/>
                    <call-service service-name="getPartyEmail" in-map-name="getEmail">
                        <result-to-field result-name="contactMechId" field="newEntity.contactMechIdTo"/>
                    </call-service>
                </if-empty>
            </if-not-empty>
        </if-compare>
        
        <now-timestamp field="newEntity.entryDate"/>
        <create-value value-field="newEntity"/>

        <if-not-empty field="parameters.productId">
            <make-value value-field="eventProduct" entity-name="CommunicationEventProduct"/>
            <set from-field="parameters.productId" field="eventProduct.productId"/>
            <set from-field="newEntity.communicationEventId" field="eventProduct.communicationEventId"/>
            <create-value value-field="eventProduct"/>
        </if-not-empty>
        <if-not-empty field="parameters.orderId">
            <make-value value-field="eventOrder" entity-name="CommunicationEventOrder"/>
            <set from-field="parameters.orderId" field="eventOrder.orderId"/>
            <set from-field="newEntity.communicationEventId" field="eventOrder.communicationEventId"/>
            <create-value value-field="eventOrder"/>
        </if-not-empty>
        <if-not-empty field="parameters.custReqId">
            <make-value value-field="eventRequest" entity-name="CustRequestCommEvent"/>
            <set from-field="parameters.custReqId" field="eventRequest.custReqId"/>
            <set from-field="newEntity.communicationEventId" field="eventRequest.communicationEventId"/>
            <create-value value-field="eventRequest"/>
        </if-not-empty>

        <!-- partyIdTo role-->
        <if-not-empty field="newEntity.partyIdTo">
            <set field="commRole.communicationEventId" from-field="newEntity.communicationEventId"/>
            <set field="commRole.partyId" from-field="newEntity.partyIdTo"/>
            <set field="commRole.roleTypeId" value="ADDRESSEE"/>
            <set field="commRole.contactMechId" from-field="newEntity.contactMechIdTo"/>
            <call-service service-name="createCommunicationEventRoleWithoutPermission" in-map-name="commRole"/>
        </if-not-empty>

        <!-- partyIdFrom role-->
        <if-not-empty field="newEntity.partyIdFrom">
            <set field="commRole.communicationEventId" from-field="newEntity.communicationEventId"/>
            <set field="commRole.partyId" from-field="newEntity.partyIdFrom"/>
            <set field="commRole.roleTypeId" value="ORIGINATOR"/>
            <set field="commRole.contactMechId" from-field="newEntity.contactMechIdFrom"/>
            <set field="commRole.statusId" value="COM_ROLE_COMPLETED"/>
            <call-service service-name="createCommunicationEventRoleWithoutPermission" in-map-name="commRole"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="updateCommunicationEvent"
        short-description="Update a CommunicationEvent">
        <entity-one entity-name="CommunicationEvent" value-field="event"/>
        <log level="always" message="====Udating communication event: ${communicationEvent.communicationEventId} with subject: ${communicationEvent.subject}"></log>
        <if-compare-field to-field="parameters.statusId" operator="not-equals" field="event.statusId">
            <call-simple-method method-name="setCommunicationEventStatus"/>
        </if-compare-field>
        <!-- get partyId from email address if required -->
        <if-empty field="parameters.partyIdTo">
            <if-not-empty field="parameters.contactMechIdTo">
                <entity-and entity-name="PartyAndContactMech" list="partyContactMechs" filter-by-date="true">
                    <field-map field-name="contactMechId" from-field="parameters.contactMechIdTo"/>
                    <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
                </entity-and>
                <first-from-list entry="partyContactMech" list="partyContactMechs"/>
                <set field="parameters.partyIdTo" from-field="partyContactMech.partyId"/>
            </if-not-empty>
        </if-empty>
        <!-- if the from-party changed, change also the roles -->
        <if>
            <condition>
                <and>
                    <not><if-empty field="parameters.partyIdFrom"/></not>
                    <if-compare-field field="parameters.partyIdFrom" operator="not-equals" to-field="event.partyIdFrom"/>
                </and>
            </condition>
            <then>
                <!-- updating partyId from old: -->
                <if-not-empty field="event.partyIdFrom">
                    <entity-one entity-name="CommunicationEventRole" value-field="roleFrom">
                        <field-map field-name="communicationEventId" from-field="event.communicationEventId"/>
                        <field-map field-name="partyId" from-field="event.partyIdFrom"/>
                        <field-map field-name="roleTypeId" value="ORIGINATOR"/>
                    </entity-one>
                    <if-not-empty field="roleFrom">
                        <remove-value value-field="roleFrom"/>
                    </if-not-empty>
                </if-not-empty>
                <!-- add new role -->
                <set field="newRoleFrom.partyId" from-field="parameters.partyIdFrom"/>
                <call-service service-name="getPartyEmail" in-map-name="newRoleFrom">
                    <result-to-field result-name="contactMechId" field="newRoleFrom.contactMechId"/>
                </call-service>
                <set field="newRoleFrom.communicationEventId" from-field="event.communicationEventId"/>
                <set field="newRoleFrom.roleTypeId" value="ORIGINATOR"/>
                <call-service service-name="createCommunicationEventRole" in-map-name="newRoleFrom"/>
                <set field="parameters.contactMechIdFrom" from-field="newRoleFrom.contactMechId"/>
            </then>
        </if>
        <!-- if the to-party changed, change also the roles -->
        <if>
            <condition>
                <and>
                    <not><if-empty field="parameters.partyIdTo"/></not>
                    <if-compare-field field="parameters.partyIdTo" operator="not-equals" to-field="event.partyIdTo"/>
                </and>
            </condition>
            <then>
                <!-- check if role exist then delete old role -->
                <if-not-empty field="event.partyIdTo">
                    <entity-one entity-name="CommunicationEventRole" value-field="roleTo">
                        <field-map field-name="communicationEventId" from-field="event.communicationEventId"/>
                        <field-map field-name="partyId" from-field="event.partyIdTo"/>
                        <field-map field-name="roleTypeId" value="ADDRESSEE"/>
                    </entity-one>
                    <if-not-empty field="roleTo">
                        <remove-value value-field="roleTo"/>
                    </if-not-empty>
                </if-not-empty>
                <!-- add new role -->
                <set field="newRoleTo.partyId" from-field="parameters.partyIdTo"/>
                <call-service service-name="getPartyEmail" in-map-name="newRoleTo">
                    <result-to-field result-name="contactMechId" field="newRoleTo.contactMechId"/>
                </call-service>
                <set field="newRoleTo.communicationEventId" from-field="event.communicationEventId"/>
                <set field="newRoleTo.roleTypeId" value="ADDRESSEE"/>
                <call-service service-name="createCommunicationEventRole" in-map-name="newRoleTo"/>
                <set field="parameters.contactMechIdTo" from-field="newRoleTo.contactMechId"/>
            </then>
        </if>
        <set-nonpk-fields map="parameters" value-field="event"/>
        <store-value value-field="event"/>
    </simple-method>

    <simple-method method-name="deleteCommunicationEvent" short-description="Delete a CommunicationEvent">
        <entity-one entity-name="CommunicationEvent" value-field="event"/>
        <!-- remove related links to content -->
        <get-related value-field="event" relation-name="CommEventContentAssoc" list="contentAssocs"/>
        <if-not-empty field="contentAssocs">
            <iterate entry="contentAssoc" list="contentAssocs">
                <remove-value value-field="contentAssoc"/>
                <!-- delete content and dataresource too if requested -->
                <if-compare field="parameters.delContentDataResource" value="Y" operator="equals">
                    <get-related value-field="contentAssoc" relation-name="FromContent" list="contents"/>
                    <if-not-empty field="contents">
                        <iterate entry="content" list="contents">
                            <remove-related value-field="content" relation-name="ContentRole"/>
                            <remove-value value-field="content"/>
                            <get-related-one value-field="content" relation-name="DataResource" to-value-field="dataResource"/>
                            <if-not-empty field="dataResource">
                                <get-related-one value-field="dataResource" relation-name="ImageDataResource" to-value-field="imageDataResource"/>
                                <if-not-empty field="imageDataResource">
                                    <remove-value value-field="imageDataResource"/>
                                </if-not-empty>
                                <get-related-one value-field="dataResource" relation-name="ElectronicText" to-value-field="electronicText"/>
                                <if-not-empty field="electronicText">
                                    <remove-value value-field="electronicText"/>
                                </if-not-empty>
                                <remove-related value-field="dataResource" relation-name="DataResourceRole"/>
                                <remove-value value-field="dataResource"/>
                            </if-not-empty>
                        </iterate>
                    </if-not-empty>
                </if-compare>
            </iterate>
        </if-not-empty>
        <!-- delete the roles when exist and the event itself -->
        <remove-related value-field="event" relation-name="CommunicationEventRole"/>
        <remove-value value-field="event"/>
    </simple-method>
    <simple-method method-name="deleteCommunicationEventWorkEffort" short-description="delete commEvent and workEffort">

        <entity-one entity-name="CommunicationEvent" value-field="event"/>
        <!-- remove related workeffort when this is the only communicationevent connected to it -->
        <get-related value-field="event" relation-name="CommunicationEventWorkEff" list="workEffortComs"/>
        <if-not-empty field="workEffortComs">
            <iterate entry="workEffortCom" list="workEffortComs">
                <remove-value value-field="workEffortCom"/>
                <get-related-one value-field="workEffortCom" relation-name="WorkEffort" to-value-field="workEffort"/>
                <get-related value-field="workEffort" relation-name="CommunicationEventWorkEff" list="otherComs"/>
                <if-empty field="otherComs">
                    <log level="info" message="remove workeffort ${workEffort.workEffortId} and related parties and status"/>
                    <remove-related value-field="workEffort" relation-name="WorkEffortPartyAssignment"/>
                    <remove-related value-field="workEffort" relation-name="WorkEffortPartyAssignment"/>
                    <remove-related value-field="workEffort" relation-name="WorkEffortStatus"/>
                    <remove-related value-field="workEffort" relation-name="WorkEffortKeyword"/>
                    <remove-value value-field="workEffort"/>
                </if-empty>
            </iterate>
        </if-not-empty>
        <!-- delete the event itself -->
        <call-service service-name="deleteCommunicationEvent" in-map-name="parameters"/>
    </simple-method>
    <!-- since these ancillary operations on communication event cause them to be updated,
        they will all use the CME_UPDATE permission -->
    <simple-method method-name="createCommunicationEventPurpose" short-description="Create a CommunicationEventPurpose">

        <make-value value-field="newEntity" entity-name="CommunicationEventPurpose"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="removeCommunicationEventPurpose" short-description="Remove a CommunicationEventPurpose">
        <entity-one entity-name="CommunicationEventPurpose" value-field="eventPurpose"/>
        <remove-value value-field="eventPurpose"/>
    </simple-method>
    <simple-method method-name="createCommunicationEventRole"
        short-description="Create a CommunicationEventRole">
        <!-- check if role already exist, then ignore -->
        <entity-one entity-name="CommunicationEventRole" value-field="communicationEventRole"/>
        <if-empty field="communicationEventRole">
            <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
            <set-service-fields service-name="createPartyRole" map="parameters" to-map="partyRole"/>
            <set field="partyRole.userLogin" from-field="sysUserLogin"/>
            <call-service service-name="createPartyRole" in-map-name="partyRole" include-user-login="false"/>

            <make-value value-field="newEntity" entity-name="CommunicationEventRole"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <if-empty field="newEntity.statusId">
                <set field="newEntity.statusId" value="COM_ROLE_CREATED"/>
            </if-empty>
            <create-value value-field="newEntity"/>
        </if-empty>
    </simple-method>
    <simple-method method-name="updateCommunicationEventRole" short-description="Create a CommunicationEventRole">
        <entity-one value-field="eventRole" entity-name="CommunicationEventRole"/>
        <if-not-empty field="eventRole">
            <set-nonpk-fields map="parameters" value-field="eventRole"/>
            <store-value value-field="eventRole"/>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="removeCommunicationEventRole" short-description="Remove a CommunicationEventRole">
        <entity-one entity-name="CommunicationEventRole" value-field="eventRole"/>
        <if-not-empty field="eventRole">
            <remove-value value-field="eventRole"/>
            <if-compare field="parameters.deleteCommEventIfLast" operator="equals" value="Y">
                <entity-and list="roles" entity-name="CommunicationEventRole">
                    <field-map field-name="communicationEventId" from-field="eventRole.communicationEventId"/>
                </entity-and>
                <if-empty field="roles">
                    <set-service-fields service-name="deleteCommunicationEvent" map="parameters" to-map="inMapDel"/>
                    <call-service service-name="deleteCommunicationEvent" in-map-name="inMapDel"/>
                </if-empty>
            </if-compare>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="markEventRead" short-description="Marks a Communication Event as Read">
        <if-empty field="parameters.communicationEventId">
            <set from-field="parameters.messageId" field="parameters.communicationEventId"/>
        </if-empty>
        <entity-one entity-name="CommunicationEvent" value-field="event"/>

        <if>
            <condition>
                <or>
                    <if-compare-field field="event.partyIdTo" to-field="userLogin.partyId" operator="equals"/>
                    <if-has-permission permission="PARTYMGR" action="_CME_UPDATE"/>
                </or>
            </condition>
            <then>
                <if>
                    <condition>
                        <or>
                            <if-compare field="event.statusId" operator="equals" value="COM_ENTERED"/>
                            <if-compare field="event.statusId" operator="equals" value="COM_PENDING"/>
                        </or>
                    </condition>
                    <then>
                        <set value="COM_READ" field="event.statusId"/>
                        <store-value value-field="event"/>
                    </then>
                </if>
            </then>
        </if>
    </simple-method>

    <simple-method method-name="sendEmailDated"
        short-description="Checks for email communication events with the status COM_IN_PROGRESS and a startdate which is expired, then send the email">
        <now-timestamp field="nowDate"/>
        <entity-condition entity-name="CommunicationEvent" list="communicationEvents">
            <condition-list combine="and">
                <condition-list combine="or">
                    <condition-expr field-name="communicationEventTypeId" operator="equals" value="EMAIL_COMMUNICATION"/>
                    <condition-expr field-name="communicationEventTypeId" operator="equals" value="AUTO_EMAIL_COMM"/>
                </condition-list>
                <condition-expr field-name="statusId" operator="equals" value="COM_IN_PROGRESS"/>
                <condition-list combine="or">
                    <condition-expr field-name="datetimeStarted" operator="less" from-field="nowDate"/>
                    <condition-expr field-name="datetimeStarted" operator="equals" from-field="nullField"/>
                </condition-list>
            </condition-list>
        </entity-condition>
        <iterate entry="communicationEvent" list="communicationEvents">
            <set-service-fields service-name="sendCommEventAsEmail" map="communicationEvent" to-map="inMap"/>
            <call-service service-name="sendCommEventAsEmail" in-map-name="inMap" require-new-transaction="true" break-on-error="false"/>
        </iterate>
    </simple-method>

    <simple-method method-name="allocateMsgToParty" short-description="Allocate an emailaddress to an existing/new party, update the communication event accordingly">

        <entity-one entity-name="CommunicationEvent" value-field="communicationEvent"/>
        <if-empty field="communicationEvent">
            <add-error><fail-message message="Communication Event ID: ${parameters.commnicationEventId} not found"/></add-error>
        </if-empty>

        <if-empty field="parameters.partyId">
            <if-empty field="parameters.emailAddress">
                <add-error><fail-message message="Email address is required"/></add-error>
            </if-empty>

            <if-empty field="parameters.lastName">
                <add-error><fail-message message="Please enter a lastName"/></add-error>
            </if-empty>

            <if-empty field="parameters.firstName">
                <add-error><fail-message message="Please enter a firstName"/></add-error>
                <check-errors/>
            </if-empty>
        </if-empty>

        <check-errors/>

        <!-- create partyId if not provided -->
        <if-empty field="parameters.partyId">
            <set-service-fields service-name="createPerson" map="parameters" to-map="newParty"/>
            <call-service service-name="createPerson" in-map-name="newParty">
                <result-to-field result-name="partyId" field="parameters.partyId"/>
            </call-service>
        </if-empty>

        <!-- allocate email to the party -->
        <if-not-empty field="parameters.emailAddress">
            <entity-one entity-name="Party" value-field="party"/>
            <if-empty field="party">
                <add-error>
                     <fail-message message="Party ID: ${parameters.partyId} not found"/>
                </add-error>
                <check-errors />
            </if-empty>
            <set field="newEmail.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            <set field="newEmail.partyId" from-field="parameters.partyId"/>
            <set field="newEmail.emailAddress" from-field="parameters.emailAddress"/>
            <call-service service-name="createPartyEmailAddress"
                in-map-name="newEmail">
                <result-to-field result-name="contactMechId" field="inCom.contactMechIdFrom"/>
            </call-service>
        </if-not-empty>

        <!-- update the communication event -->
        <set field="inCom.communicationEventId" from-field="parameters.communicationEventId"/>
        <set field="inCom.partyIdFrom" from-field="parameters.partyId"/>
        <set field="inCom.statusId" value="COM_ENTERED"/>
        <call-service service-name="updateCommunicationEvent" in-map-name="inCom"/>

        <field-to-request field="parameters.communicationEventId" request-name="communicationEventId"/>
        <entity-one entity-name="PartyNameView" value-field="nameView"/>
        <set field="_event_message_" value="Email addres: ${parameters.emailAddress} allocated to party: ${nameView.groupName}${nameView.firstName} ${nameView.middleName} ${nameView.lastName}[${parameters.partyId}]"/>
    </simple-method>

    <simple-method method-name="createCustRequestCommEvent" short-description="Create CustRequestCommEvent" >
        <make-value value-field="newEntity" entity-name="CustRequestCommEvent"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="setCommunicationEventStatus" short-description="Set The Communication Event Status">
        <entity-one entity-name="CommunicationEvent" value-field="communicationEvent"/>
        <field-to-result field="communicationEvent.statusId" result-name="oldStatusId"/>
        <if-compare-field field="communicationEvent.statusId" to-field="parameters.statusId" operator="not-equals">
            <entity-one entity-name="StatusValidChange" value-field="statusChange">
                <field-map field-name="statusId" from-field="communicationEvent.statusId"/>
                <field-map field-name="statusIdTo" from-field="parameters.statusId"/>
            </entity-one>
            <if-empty field="statusChange">
                <add-error><fail-message message="Status is not a valid change"/></add-error>
                <log level="error" message="Cannot change from ${communicationEvent.statusId} to ${parameters.statusId}"/>
                <check-errors/>
                <else>
                    <set field="communicationEvent.statusId" from-field="parameters.statusId"/>
                    <store-value value-field="communicationEvent"/>
                </else>
            </if-empty>
        </if-compare-field>
    </simple-method>
    <simple-method method-name="setCommunicationEventRoleStatus" short-description="Set The Communication Event Status for a specific role">
        <entity-one entity-name="CommunicationEventRole" value-field="communicationEventRole"/>
        <field-to-result field="communicationEventRole.statusId" result-name="oldStatusId"/>
        <if-compare-field field="communicationEventRole.statusId" to-field="parameters.statusId" operator="not-equals">
            <entity-one entity-name="StatusValidChange" value-field="statusChange">
                <field-map field-name="statusId" from-field="communicationEventRole.statusId"/>
                <field-map field-name="statusIdTo" from-field="parameters.statusId"/>
            </entity-one>
            <if-empty field="statusChange">
                <add-error><fail-message message="Status is not a valid change"/></add-error>
                <log level="error" message="Cannot change from ${communicationEventRole.statusId} to ${parameters.statusId}"/>
                <check-errors/>
                <else>
                    <set field="communicationEventRole.statusId" from-field="parameters.statusId"/>
                    <store-value value-field="communicationEventRole"/>
                </else>
            </if-empty>
        </if-compare-field>
    </simple-method>
</simple-methods>
