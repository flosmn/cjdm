<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <!-- CostComponent services -->
    <simple-method method-name="createCostComponent" short-description="Create a CostComponent">
        <make-value value-field="newEntity" entity-name="CostComponent"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <sequenced-id sequence-name="CostComponent" field="newEntity.costComponentId"/>
        <field-to-result field="newEntity.costComponentId" result-name="costComponentId"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>
        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateCostComponent" short-description="Update a CostComponent">
        <entity-one entity-name="CostComponent" value-field="costComponent"/>
        <set-nonpk-fields map="parameters" value-field="costComponent"/>
        <store-value value-field="costComponent"/>
    </simple-method>
    <simple-method method-name="deleteCostComponent" short-description="Delete a CostComponent">
        <entity-one entity-name="CostComponent" value-field="costComponent"/>
        <remove-value value-field="costComponent"/>
    </simple-method>
    <simple-method method-name="cancelCostComponents" short-description="Cancels CostComponents">
        <set from-field="parameters.costComponentId" field="costsAndMap.costComponentId"/>
        <set from-field="parameters.productId" field="costsAndMap.productId"/>
        <set from-field="parameters.costUomId" field="costsAndMap.costUomId"/>
        <set from-field="parameters.costComponentTypeId" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="existingCosts"/>
        <filter-list-by-date list="existingCosts"/>
        <iterate list="existingCosts" entry="existingCost">
            <now-timestamp field="existingCost.thruDate"/>
            <store-value value-field="existingCost"/>
        </iterate>
    </simple-method>
    <simple-method method-name="recreateCostComponent" short-description="Create a CostComponent and cancel the existing ones">
        <!-- The existing costs of the same type are expired -->
        <set from-field="parameters.productId" field="costsAndMap.productId"/>
        <set from-field="parameters.costUomId" field="costsAndMap.costUomId"/>
        <set from-field="parameters.costComponentTypeId" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="existingCosts"/>
        <filter-list-by-date list="existingCosts"/>
        <iterate list="existingCosts" entry="existingCost">
            <now-timestamp field="existingCost.thruDate"/>
            <store-value value-field="existingCost"/>
        </iterate>
        <!-- The new cost is created -->
        <make-value value-field="newEntity" entity-name="CostComponent"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <sequenced-id sequence-name="CostComponent" field="newEntity.costComponentId"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>
        <create-value value-field="newEntity"/>
        <field-to-result field="newEntity.costComponentId" result-name="costComponentId"/>
    </simple-method>

    <!-- Services to get the product and tasks costs -->
    <simple-method method-name="getProductCost" short-description="Gets the product's costs (from CostComponent or ProductPrice)">
        <set from-field="parameters.productId" field="costsAndMap.productId"/>
        <set from-field="parameters.currencyUomId" field="costsAndMap.costUomId"/>
        <!-- Route costs -->
        <set value="${parameters.costComponentTypePrefix}_ROUTE_COST" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="routeCosts"/>
        <filter-list-by-date list="routeCosts"/>
        <first-from-list list="routeCosts" entry="routeCost"/>
        <!-- Labor costs -->
        <set value="${parameters.costComponentTypePrefix}_LABOR_COST" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="laborCosts"/>
        <filter-list-by-date list="laborCosts"/>
        <first-from-list list="laborCosts" entry="laborCost"/>
        <!-- Materials costs -->
        <set value="${parameters.costComponentTypePrefix}_MAT_COST" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="materialsCosts"/>
        <filter-list-by-date list="materialsCosts"/>
        <first-from-list list="materialsCosts" entry="materialsCost"/>
        <!-- Other costs -->
        <set value="${parameters.costComponentTypePrefix}_OTHER_COST" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map="costsAndMap" list="otherCosts"/>
        <filter-list-by-date list="otherCosts"/>
        <first-from-list list="otherCosts" entry="otherCost"/>

        <set field="productCost" value="0" type="BigDecimal"/>
        <calculate field="productCost" decimal-scale="6">
            <calcop field="laborCost.cost" operator="add">
                <calcop field="materialsCost.cost" operator="get"/>
                <calcop field="routeCost.cost" operator="get"/>
                <calcop field="otherCost.cost" operator="get"/>
            </calcop>
        </calculate>
        <!-- if the cost is zero, and the product is a variant, get the cost of the virtual -->
        <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
            <entity-one entity-name="Product" value-field="product"/>
            <set from-field="product.productId" field="assocAndMap.productIdTo"/>
            <set value="PRODUCT_VARIANT" field="assocAndMap.productAssocTypeId"/>
            <find-by-and entity-name="ProductAssoc" map="assocAndMap" list="virtualAssocs"/>
            <filter-list-by-date list="virtualAssocs"/>
            <first-from-list list="virtualAssocs" entry="virtualAssoc"/>
            <if-not-empty field="virtualAssoc">
                <set from-field="virtualAssoc.productId" field="inputMap.productId"/>
                <set from-field="parameters.currencyUomId" field="inputMap.currencyUomId"/>
                <set from-field="parameters.costComponentTypePrefix" field="inputMap.costComponentTypePrefix"/>
                <call-service service-name="getProductCost" in-map-name="inputMap">
                    <result-to-field result-name="productCost"/>
                </call-service>
            </if-not-empty>
        </if-compare>
        <!-- if the cost is zero, get the purchase cost from the SupplierProduct -->
        <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
            <set field="orderByList[]" value="+supplierPrefOrderId"/>
            <set field="orderByList[]" value="+lastPrice"/>
            <clear-field field="costsAndMap"/>
            <set from-field="parameters.productId" field="costsAndMap.productId"/>
            <set from-field="parameters.currencyUomId" field="costsAndMap.currencyUomId"/>
            <find-by-and entity-name="SupplierProduct" map="costsAndMap" list="priceCosts" order-by-list="orderByList"/>
            <filter-list-by-date list="priceCosts" from-field-name="availableFromDate" thru-field-name="availableThruDate"/>
            <first-from-list list="priceCosts" entry="priceCost"/>
            <if-not-empty field="priceCost.lastPrice">
                <set from-field="priceCost.lastPrice" field="productCost"/>
            </if-not-empty>
            <!-- if the cost is zero, get the purchase cost from the SupplierProduct
                 in a different currency and try to convert
            -->
            <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
                <clear-field field="costsAndMap"/>
                <set from-field="parameters.productId" field="costsAndMap.productId"/>
                <set from-field="parameters.productPriceTypeId" field="costsAndMap.productPriceTypeId"/>
                <find-by-and entity-name="SupplierProduct" map="costsAndMap" list="priceCosts" order-by-list="orderByList"/>
                <filter-list-by-date list="priceCosts" from-field-name="availableFromDate" thru-field-name="availableThruDate"/>
                <first-from-list list="priceCosts" entry="priceCost"/>
                <if-not-empty field="priceCost.lastPrice">
                    <!-- we try to convert the lastPrice to the desired currency -->
                    <clear-field field="inputMap"/>
                    <set from-field="priceCost.lastPrice" field="inputMap.originalValue"/>
                    <set from-field="priceCost.currencyUomId" field="inputMap.uomId"/>
                    <set from-field="parameters.currencyUomId" field="inputMap.uomIdTo"/>
                    <call-service service-name="convertUom" in-map-name="inputMap">
                        <result-to-field result-name="convertedValue" field="productCost"/>
                    </call-service>
                </if-not-empty>
            </if-compare>
        </if-compare>
        <!--
        <if-compare field="productCost" operator="equals" value="0" type="BigDecimal">
            <clear-field field="costsAndMap"/>
            <set from-field="parameters.productId" field="costsAndMap.productId"/>
            <set from-field="parameters.currencyUomId" field="costsAndMap.currencyUomId"/>
            <set from-field="parameters.productPriceTypeId" field="costsAndMap.productPriceTypeId"/>
            <find-by-and entity-name="ProductPrice" map="costsAndMap" list="priceCosts"/>
            <filter-list-by-date list="priceCosts"/>
            <first-from-list list="priceCosts" entry="priceCost"/>
            <if-not-empty field="priceCost.price">
                <set from-field="priceCost.price" field="productCost"/>
            </if-not-empty>
        </if-compare>
        -->
        <field-to-result field="productCost"/>
    </simple-method>
    <simple-method method-name="getTaskCost" short-description="Gets the production run task's costs">
        <!-- First of all, the estimated task time is computed -->
        <set-service-fields service-name="getEstimatedTaskTime" map="parameters" to-map="inputMap"/>
        <set from-field="parameters.workEffortId" field="inputMap.taskId"/>
        <call-service service-name="getEstimatedTaskTime" in-map-name="inputMap">
            <result-to-field result-name="estimatedTaskTime"/>
            <result-to-field result-name="setupTime"/>
        </call-service>

        <calculate field="estimatedTaskTime" decimal-scale="6">
            <calcop field="estimatedTaskTime" operator="subtract">
                <calcop field="setupTime" operator="get"/>
            </calcop>
        </calculate>

        <entity-one entity-name="WorkEffort" value-field="task"/>
        <if-not-empty field="task">
            <get-related-one value-field="task" relation-name="FixedAsset" to-value-field="fixedAsset"/>
            <set from-field="parameters.currencyUomId" field="costsAndMap.amountUomId"/>
            <set value="SETUP_COST" field="costsAndMap.fixedAssetStdCostTypeId"/>
            <get-related value-field="fixedAsset" relation-name="FixedAssetStdCost" map="costsAndMap" list="setupCosts"/>
            <filter-list-by-date list="setupCosts"/>
            <!--<filter-list-by-and list-name="costs" map-name="costsAndMap"/>-->
            <first-from-list list="setupCosts" entry="setupCost"/>
            <set value="USAGE_COST" field="costsAndMap.fixedAssetStdCostTypeId"/>
            <get-related value-field="fixedAsset" relation-name="FixedAssetStdCost" map="costsAndMap" list="usageCosts"/>
            <filter-list-by-date list="usageCosts"/>
            <first-from-list list="usageCosts" entry="usageCost"/>
        </if-not-empty>
        <calculate field="taskCost" decimal-scale="6">
            <calcop operator="add">
                <calcop field="estimatedTaskTime" operator="multiply">
                    <calcop field="usageCost.amount" operator="get"/>
                </calcop>
                <calcop field="setupTime" operator="multiply">
                    <calcop field="setupCost.amount" operator="get"/>
                </calcop>
            </calcop>
        </calculate>

        <!-- Time is converted from milliseconds to hours -->
        <calculate field="taskCost" decimal-scale="6">
            <calcop field="taskCost" operator="divide">
                <number value="3600000"/>
            </calcop>
        </calculate>

        <field-to-result field="taskCost"/>
    </simple-method>

    <!-- services to automatically generate cost information -->
    <simple-method method-name="calculateAllProductsCosts" short-description="Calculates estimated costs for all the products">
        <!--filter-by-date="true"-->
        <entity-condition entity-name="Product" list="products">
            <select-field field-name="productId"/>
            <order-by field-name="-billOfMaterialLevel"/>
        </entity-condition>
        <set from-field="parameters.currencyUomId" field="inMap.currencyUomId"/>
        <set from-field="parameters.costComponentTypePrefix" field="inMap.costComponentTypePrefix"/>
        <iterate list="products" entry="product">
            <set from-field="product.productId" field="inMap.productId"/>
            <call-service service-name="calculateProductCosts" in-map-name="inMap"/>
        </iterate>
    </simple-method>
    <simple-method method-name="calculateProductCosts" short-description="Calculates the product's cost">
        <!-- the existing costs are expired -->
        <!--
        <set from-field="parameters.productId" field="cancelMap.productId"/>
        <set from-field="parameters.currencyUomId" field="cancelMap.costUomId"/>
        <call-service service-name="cancelCostComponents" in-map-name="cancelMap"/>
        -->
        <!-- calculate the total materials' cost -->
        <set from-field="parameters.productId" field="callSvcMap.productId"/>
        <call-service service-name="getManufacturingComponents" in-map-name="callSvcMap">
            <result-to-field result-name="componentsMap"/>
        </call-service>
        <if-not-empty field="componentsMap">
            <iterate entry="componentMap" list="componentsMap">
                <clear-field field="inputMap"/>
                <set field="product" from-field="componentMap.product"/>
                <set field="inputMap.productId" from-field="product.productId"/>
                <set field="inputMap.currencyUomId" from-field="parameters.currencyUomId"/>
                <set field="inputMap.costComponentTypePrefix" from-field="parameters.costComponentTypePrefix"/>
                <call-service service-name="getProductCost" in-map-name="inputMap">
                    <result-to-field result-name="productCost"/>
                </call-service>
                <calculate field="totalProductsCost" decimal-scale="6">
                    <calcop field="totalProductsCost" operator="add">
                        <calcop field="componentMap.quantity" operator="multiply">
                            <calcop field="productCost" operator="get"/>
                        </calcop>
                    </calcop>
                </calculate>
            </iterate>
            <else>
                <clear-field field="inputMap"/>
                <set field="inputMap.productId" from-field="parameters.productId"/>
                <set field="inputMap.currencyUomId" from-field="parameters.currencyUomId"/>
                <set field="inputMap.costComponentTypePrefix" from-field="parameters.costComponentTypePrefix"/>
                <call-service service-name="getProductCost" in-map-name="inputMap">
                    <result-to-field result-name="productCost"/>
                </call-service>
                <calculate field="totalProductsCost" decimal-scale="6">
                    <calcop field="productCost" operator="get"/>
                </calculate>
            </else>
        </if-not-empty>
        <!-- calculate the total tasks' cost -->
        <set field="callSvcMap.ignoreDefaultRouting" value="Y"/>
        <call-service service-name="getProductRouting" in-map-name="callSvcMap">
            <result-to-field result-name="tasks"/>
            <result-to-field result-name="routing"/>
        </call-service>
        <iterate entry="task" list="tasks">
            <clear-field field="callSvcMap"/>
            <set from-field="task.workEffortIdTo" field="callSvcMap.workEffortId"/>
            <set from-field="parameters.currencyUomId" field="callSvcMap.currencyUomId"/>
            <set from-field="parameters.productId" field="callSvcMap.productId"/>
            <set from-field="routing.workEffortId" field="callSvcMap.routingId"/>
            <call-service service-name="getTaskCost" in-map-name="callSvcMap">
                <result-to-field result-name="taskCost" field="taskCost"/>
            </call-service>
            <calculate field="totalTaskCost" decimal-scale="6">
                <calcop field="totalTaskCost" operator="add">
                    <calcop field="taskCost" operator="get"/>
                </calcop>
            </calculate>
        </iterate>

        <calculate field="totalCost" decimal-scale="6">
            <calcop field="totalTaskCost" operator="add">
                <calcop field="totalProductsCost" operator="get"/>
            </calcop>
        </calculate>

        <!-- The CostComponent records are created. -->
        <if-not-empty field="totalTaskCost">
            <if-compare field="totalTaskCost" operator="greater" value="0" type="BigDecimal">
                <clear-field field="callSvcMap"/>
                <set value="${parameters.costComponentTypePrefix}_ROUTE_COST" field="callSvcMap.costComponentTypeId"/>
                <set from-field="parameters.productId" field="callSvcMap.productId"/>
                <set from-field="parameters.currencyUomId" field="callSvcMap.costUomId"/>
                <set from-field="totalTaskCost" field="callSvcMap.cost"/>
                <call-service service-name="recreateCostComponent" in-map-name="callSvcMap"/>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="totalProductsCost">
            <if-compare field="totalProductsCost" operator="greater" value="0" type="BigDecimal">
                <clear-field field="callSvcMap"/>
                <set value="${parameters.costComponentTypePrefix}_MAT_COST" field="callSvcMap.costComponentTypeId"/>
                <set from-field="parameters.productId" field="callSvcMap.productId"/>
                <set from-field="parameters.currencyUomId" field="callSvcMap.costUomId"/>
                <set from-field="totalProductsCost" field="callSvcMap.cost"/>
                <call-service service-name="recreateCostComponent" in-map-name="callSvcMap"/>
            </if-compare>
        </if-not-empty>

        <field-to-result field="totalCost"/>
    </simple-method>
    <simple-method method-name="calculateProductAverageCost" short-description="Calculate inventory average cost for a product">
        <entity-condition entity-name="InventoryItem" list="inventoryItems">
            <condition-list>
                <condition-expr field-name="productId" from-field="parameters.productId"/>
                <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore-if-empty="true"/>
                <condition-expr field-name="ownerPartyId" from-field="parameters.ownerPartyId" ignore-if-empty="true"/>
                <condition-expr field-name="unitCost" operator="not-equals" from-field="nullField"/>
            </condition-list>
            <select-field field-name="quantityOnHandTotal"/>
            <select-field field-name="unitCost"/>
            <select-field field-name="currencyUomId"/>
        </entity-condition>
        <set field="totalQuantityOnHand" type="BigDecimal" value="0"/>
        <set field="totalInventoryCost" type="BigDecimal" value="0"/>
        <set field="absValOfTotalQOH" type="BigDecimal" value="0"/>
        <set field="absValOfTotalInvCost" type="BigDecimal" value="0"/>
        <set field="differentCurrencies" type="Boolean" value="false"/>
        <iterate list="inventoryItems" entry="inventoryItem">
            <calculate field="totalQuantityOnHand">
                <calcop operator="add" >
                    <calcop operator="get" field="totalQuantityOnHand"/>
                    <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                </calcop>
            </calculate>

            <if-empty field="currencyUomId">
                <set field="currencyUomId" from-field="inventoryItem.currencyUomId"/>
            </if-empty>
            <if-compare field="differentCurrencies" operator="equals" value="false" type="Boolean">
                <if-compare-field field="inventoryItem.currencyUomId" operator="equals" to-field="currencyUomId">
                    <calculate field="totalInventoryCost" type="BigDecimal">
                        <calcop operator="add">
                            <calcop operator="get" field="totalInventoryCost"/>
                            <calcop operator="multiply">
                                <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                                <calcop operator="get" field="inventoryItem.unitCost"/>
                            </calcop>
                        </calcop>
                    </calculate>

                    <!-- calculation of absolute values of QOH and total inventory cost -->
                    <if-compare field="inventoryItem.quantityOnHandTotal" operator="less" value="0">
                        <calculate field="absValOfTotalQOH">
                            <calcop operator="add">
                                <calcop operator="get" field="absValOfTotalQOH"/>
                                <calcop operator="negative" field="inventoryItem.quantityOnHandTotal"/>
                            </calcop>
                        </calculate>
                        <calculate field="absValOfTotalInvCost" type="BigDecimal">
                            <calcop operator="add">
                                <calcop operator="get" field="absValOfTotalInvCost"/>
                                <calcop operator="multiply">
                                    <calcop operator="negative" field="inventoryItem.quantityOnHandTotal"/>
                                    <calcop operator="get" field="inventoryItem.unitCost"/>
                                </calcop>
                            </calcop>
                        </calculate>
                        <else>
                        <calculate field="absValOfTotalQOH">
                            <calcop operator="add" >
                                <calcop operator="get" field="absValOfTotalQOH"/>
                                <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                            </calcop>
                        </calculate>
                        <calculate field="absValOfTotalInvCost" type="BigDecimal">
                            <calcop operator="add">
                                <calcop operator="get" field="absValOfTotalInvCost"/>
                                <calcop operator="multiply">
                                    <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                                    <calcop operator="get" field="inventoryItem.unitCost"/>
                                </calcop>
                            </calcop>
                        </calculate>
                        </else>
                    </if-compare>
                <else>
                    <set field="differentCurrencies" type="Boolean" value="true"/>
                </else>
                </if-compare-field>
            </if-compare>
        </iterate>

        <if-compare field="absValOfTotalQOH" operator="not-equals" value="0" type="BigDecimal">
            <calculate field="productAverageCost" type="BigDecimal">
                <calcop operator="divide">
                    <calcop operator="get" field="absValOfTotalInvCost"/>
                    <calcop operator="get" field="absValOfTotalQOH"/>
                </calcop>
            </calculate>
        <else>
            <set field="productAverageCost" type="BigDecimal" value="0"/>
        </else>
        </if-compare>
        <field-to-result field="totalQuantityOnHand"/>
        <if-compare field="differentCurrencies" operator="equals" value="false" type="Boolean">
            <field-to-result field="totalInventoryCost"/>
            <field-to-result field="productAverageCost"/>
            <field-to-result field="currencyUomId"/>
        </if-compare>
    </simple-method>
</simple-methods>
