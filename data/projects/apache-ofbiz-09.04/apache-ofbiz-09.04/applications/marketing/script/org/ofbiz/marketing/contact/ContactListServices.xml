<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <!-- ContactList methods -->
    <simple-method method-name="createContactList" short-description="Create an ContactList">
        <check-permission permission="MARKETING" action="_CREATE"><fail-message message="Security Error: to run createContactList you must have the MARKETING_CREATE or MARKETING_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value entity-name="ContactList" value-field="newEntity"/>
        <if-empty field="parameters.contactListId">
            <sequenced-id sequence-name="ContactList" field="newEntity.contactListId"/>
            <else>
                <set field="newEntity.contactListId" from-field="parameters.contactListId"/>
            </else>
        </if-empty>
        <field-to-result field="newEntity.contactListId" result-name="contactListId"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateContactList" short-description="Update an ContactList">
        <check-permission permission="MARKETING" action="_UPDATE"><fail-message message="Security Error: to run updateContactList you must have the MARKETING_UPDATE or MARKETING_ADMIN permission"/></check-permission>
        <check-errors/>

        <entity-one entity-name="ContactList" value-field="lookedUpValue" auto-field-map="true"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="removeContactList" short-description="Delete an ContactList">
        <check-permission permission="MARKETING" action="_DELETE"><fail-message message="Security Error: to run deleteContactList you must have the MARKETING_DELETE or MARKETING_ADMIN permission"/></check-permission>
        <check-errors/>

        <entity-one entity-name="ContactList" value-field="lookedUpValue" auto-field-map="true"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- ContactListParty methods -->
    <simple-method method-name="inlineCheckContactListMechType" short-description="inlineCheckContactListMechType">
        <!-- check the preferredContactMechId, make sure it is the right type -->
        <if-not-empty field="parameters.preferredContactMechId">
            <entity-one entity-name="ContactMech" value-field="preferredContactMech" auto-field-map="false">
                <field-map field-name="contactMechId" from-field="parameters.preferredContactMechId"/>
            </entity-one>
            <if-compare-field field="preferredContactMech.contactMechTypeId" to-field="contactList.contactMechTypeId" operator="not-equals">
                <entity-one entity-name="ContactMechType" value-field="preferredContactMechType" auto-field-map="false">
                    <field-map field-name="contactMechTypeId" from-field="preferredContactMech.contactMechTypeId"/>
                </entity-one>
                <entity-one entity-name="ContactMechType" value-field="listContactMechType" auto-field-map="false">
                    <field-map field-name="contactMechTypeId" from-field="contactList.contactMechTypeId"/>
                </entity-one>
                <add-error><fail-message message="The preferred contact mechanism [${preferredContactMechType.description}] was not of the right type for the list [${listContactMechType.description}]."/></add-error>
            </if-compare-field>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="inlineCheckContactListStatusParameter" short-description="inlineCheckContactListMechType">
        <!-- if this is not an email contact list and the status is pending, just set the status to accepted -->
        <if>
            <condition>
                <and>
                    <if-compare field="contactList.contactMechTypeId" operator="not-equals" value="EMAIL_ADDRESS"/>
                    <if-compare field="parameters.statusId" operator="equals" value="CLPT_PENDING"/>
                </and>
            </condition>
            <then>
                <set field="parameters.statusId" value="CLPT_ACCEPTED"/>
            </then>
        </if>
    </simple-method>
    <simple-method method-name="createContactListParty" short-description="Add Party To ContactList">
        <!-- allow if userLogin.partyId = parameters.partyId or has permission -->
        <if>
            <condition>
                <and>
                    <if-compare-field field="userLogin.partyId" to-field="parameters.partyId" operator="not-equals"/>
                    <not><if-has-permission permission="MARKETING" action="_CREATE"/></not>
                </and>
            </condition>
            <then><add-error><fail-message message="Security Error: to run createContactListParty you must run it for yourself or have the MARKETING_CREATE or MARKETING_ADMIN permissions."/></add-error></then>
        </if>

        <entity-one entity-name="ContactList" value-field="contactList"/>
        <call-simple-method method-name="inlineCheckContactListMechType"/>
        <call-simple-method method-name="inlineCheckContactListStatusParameter"/>

        <!-- okay, now check for all errors -->
        <check-errors/>


        <make-value entity-name="ContactListParty" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <if-empty field="newEntity.fromDate"><now-timestamp field="newEntity.fromDate"/></if-empty>

        <create-value value-field="newEntity"/>

        <set-service-fields service-name="createContactListPartyStatus" map="newEntity" to-map="createContactListPartyStatusMap"/>
        <call-service service-name="createContactListPartyStatus" in-map-name="createContactListPartyStatusMap"/>
    </simple-method>
    <simple-method method-name="updateContactListParty" short-description="Update Add Party To ContactList">
        <!-- allow if userLogin.partyId = parameters.partyId or has permission -->
        <if>
            <condition>
                <and>
                    <if-compare-field field="userLogin.partyId" to-field="parameters.partyId" operator="not-equals"/>
                    <not><if-has-permission permission="MARKETING" action="_UPDATE"/></not>
                </and>
            </condition>
            <then><add-error><fail-message message="Security Error: to run updateContactListParty you must run it for yourself or have the MARKETING_UPDATE or MARKETING_ADMIN permissions."/></add-error></then>
        </if>
        <check-errors/>

        <entity-one entity-name="ContactList" value-field="contactList"/>
        <call-simple-method method-name="inlineCheckContactListMechType"/>
        <call-simple-method method-name="inlineCheckContactListStatusParameter"/>

        <entity-one entity-name="ContactListParty" value-field="lookedUpValue"/>
        <if-not-empty field="parameters.statusId">
            <if-compare-field field="parameters.statusId" to-field="lookedUpValue.statusId" operator="not-equals">
                <!-- NOTE: must be parameters as this will have the new statusId, and it will have additional attributes like optInVerifyCode -->
                <set-service-fields service-name="createContactListPartyStatus" map="parameters" to-map="createContactListPartyStatusMap"/>
                <call-service service-name="createContactListPartyStatus" in-map-name="createContactListPartyStatusMap"/>
            </if-compare-field>
        </if-not-empty>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="updatePartyEmailContactListParty" short-description="Update ContactList Party Contact Mech">
        <set field="lookupMap.preferredContactMechId" from-field="parameters.oldContactMechId"/>
        <find-by-and entity-name="ContactListParty" map="lookupMap" list="ContactListParties"/>
        <iterate entry="contactlistparty" list="ContactListParties">
        <set field="contactlistparty.preferredContactMechId" from-field="parameters.contactMechId"/>
        <log level="info" message="Replacing preferredContactMechId: ${parameters.oldContactMechId} of the ContactList: ${contactlistparty.contactListId} with new preferredContactMechId: ${parameters.contactMechId}"/>
        <store-value value-field="contactlistparty"/>
        </iterate>
    </simple-method>
    <simple-method method-name="deleteContactListParty" short-description="Remove Party from ContactList">
        <check-permission permission="MARKETING" action="_DELETE"><fail-message message="Security Error: to run deleteContactListParty you must have the MARKETING_DELETE or MARKETING_ADMIN permission"/></check-permission>
        <check-errors/>

        <entity-one entity-name="ContactListParty" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="createContactListPartyStatus" short-description="Create ContactListParty Status">
        <!-- allow if userLogin.partyId = parameters.partyId or has permission -->
        <if>
            <condition>
                <and>
                    <if-compare-field field="userLogin.partyId" to-field="parameters.partyId" operator="not-equals"/>
                    <not><if-has-permission permission="MARKETING" action="_CREATE"/></not>
                    <not><if-has-permission permission="MARKETING" action="_UPDATE"/></not>
                </and>
            </condition>
            <then><add-error><fail-message message="Security Error: to run createContactListPartyStatus you must run it for yourself or have the MARKETING_CREATE or MARKETING_UPDATE or MARKETING_ADMIN permissions."/></add-error></then>
        </if>
        <check-errors/>

        <make-value entity-name="ContactListPartyStatus" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <now-timestamp field="newEntity.statusDate"/>
        <set from-field="userLogin.userLoginId" field="newEntity.setByUserLoginId"/>

        <!-- if statusId is CLPT_PENDING, set optInVerifyCode; else if statusId is CLPT_ACCEPTED, make sure optInVerifyCode is the same as the last CLPT_PENDING -->
        <if>
            <condition><if-compare field="newEntity.statusId" operator="equals" value="CLPT_PENDING"/></condition>
            <then>
                <call-bsh><![CDATA[newEntity.set("optInVerifyCode", Long.toString(Math.round(9999999999L * Math.random())))]]></call-bsh>
            </then>
        <else-if>
            <condition><if-compare field="newEntity.statusId" operator="equals" value="CLPT_ACCEPTED"/></condition>
            <then>
                <!-- look up the last ContactListPartyStatus with statusId=CLPT_PENDING -->
                <entity-condition entity-name="ContactListPartyStatus" list="lastContactListPartyStatusList">
                    <condition-list combine="and">
                        <condition-expr field-name="contactListId" from-field="parameters.contactListId"/>
                        <condition-expr field-name="partyId" from-field="parameters.partyId"/>
                        <condition-expr field-name="fromDate" from-field="parameters.fromDate"/>
                        <condition-expr field-name="statusId" value="CLPT_PENDING"/>
                    </condition-list>
                    <order-by field-name="-statusDate"/>
                </entity-condition>
                <first-from-list entry="lastContactListPartyStatus" list="lastContactListPartyStatusList"/>

                <!-- only require an optInVerifyCode if there was one in place -->
                <if-not-empty field="lastContactListPartyStatus.optInVerifyCode">
                    <if-not-empty field="parameters.optInVerifyCode">
                        <if-compare-field field="lastContactListPartyStatus.optInVerifyCode" to-field="parameters.optInVerifyCode" operator="not-equals">
                            <add-error><fail-message message="The Opt-in Verify Code specified [${parameters.optInVerifyCode}] was not correct. Please check the code you were sent."/></add-error>
                        </if-compare-field>
                    <else>
                        <add-error><fail-message message="No Opt-in Verify Code specified, but one is required."/></add-error>
                    </else>
                    </if-not-empty>
                </if-not-empty>
                <check-errors/>
            </then>
        </else-if>
        </if>

        <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="sendContactListPartyVerifyEmail" short-description="Send ContactListParty Verify Email">
        <!-- allow if userLogin.partyId = parameters.partyId or has permission -->
        <if>
            <condition>
                <and>
                    <if-compare-field field="userLogin.partyId" to-field="parameters.partyId" operator="not-equals"/>
                    <not><if-has-permission permission="MARKETING" action="_VIEW"/></not>
                </and>
            </condition>
            <then><add-error><fail-message message="Security Error: to run sendContactListPartyVerifyEmail you must run it for yourself or have the MARKETING_VIEW or MARKETING_ADMIN permissions."/></add-error></then>
        </if>
        <check-errors/>

        <entity-one entity-name="ContactList" value-field="contactList"/>
        <entity-one entity-name="ContactListParty" value-field="contactListParty"/>
        <get-related-one value-field="contactListParty" relation-name="PreferredContactMech" to-value-field="preferredContactMech"/>

        <if>
            <condition>
                <and>
                    <not><if-empty field="contactList.verifyEmailFrom"></if-empty></not>
                    <not><if-empty field="contactList.verifyEmailSubject"></if-empty></not>
                    <not><if-empty field="contactList.verifyEmailScreen"></if-empty></not>
                    <not><if-empty field="contactList.verifyEmailWebSiteId"></if-empty></not>
                </and>
            </condition>
            <then>
                <!-- get the latest pending status -->
                <!-- look up the last ContactListPartyStatus with statusId=CLPT_PENDING -->
                <entity-condition entity-name="ContactListPartyStatus" list="lastContactListPartyStatusList">
                    <condition-list combine="and">
                        <condition-expr field-name="contactListId" from-field="parameters.contactListId"/>
                        <condition-expr field-name="partyId" from-field="parameters.partyId"/>
                        <condition-expr field-name="fromDate" from-field="parameters.fromDate"/>
                        <condition-expr field-name="statusId" value="CLPT_PENDING"/>
                    </condition-list>
                    <order-by field-name="-statusDate"/>
                </entity-condition>
                <first-from-list entry="contactListPartyStatus" list="lastContactListPartyStatusList"/>

                <!-- TODO: if preferredContactMech.contactMechTypeId != EMAIL_ADDRESS, return an error -->
                <!-- TODO: if preferredContactMech is empty, should we try to find the ContactMech we want based on the Party? -->

                <!-- TODO: this could really use some more work to be more flexible, or easier to maintain, like perhaps a general EmailSendSettings entity or something -->
                <set from-field="preferredContactMech.infoString" field="sendMailFromScreenMap.sendTo"/>
                <set from-field="contactList.verifyEmailFrom" field="sendMailFromScreenMap.sendFrom"/>
                <set from-field="contactList.verifyEmailSubject" field="sendMailFromScreenMap.subject"/>
                <set from-field="contactList.verifyEmailScreen" field="sendMailFromScreenMap.bodyScreenUri"/>
                <set from-field="contactList.verifyEmailWebSiteId" field="sendMailFromScreenMap.webSiteId"/>
                <set value="text/html" field="sendMailFromScreenMap.contentType"/>

                <set from-field="contactList" field="sendMailFromScreenMap.bodyParameters.contactList"/>
                <set from-field="contactListParty" field="sendMailFromScreenMap.bodyParameters.contactListParty"/>
                <set from-field="contactListPartyStatus" field="sendMailFromScreenMap.bodyParameters.contactListPartyStatus"/>

                <call-service service-name="sendMailFromScreen" in-map-name="sendMailFromScreenMap"/>
            </then>
            <else>
                <log level="warning" message="WARNING: Not sending subscription verify email because verifyEmail* settings are missing on the ContactList record: ${contactList}"/>
            </else>
        </if>
    </simple-method>
</simple-methods>
