<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <!-- Test case for Accounting Transaction on Purchase -->
    <simple-method method-name="testAcctgTransOnPoReceipts" short-description="Test case for Accounting Transaction on Receipts of Purchase Order." login-required="false">
        <!-- Precondition : shipment is created from supplier and order items are issued  -->
        <!-- create a purchase order using following:
             Supplier : DemoSupplier
             Item     : WG-1111
             Quantity : 10 -->

        <!-- Post condition : Credit in account 214000 - UNINVOICED ITEM RECEIPT amount = grand total of order.
                              Debit in account 140000- INVENTORY amount = grand total of order.  -->

        <!-- set few variables so that they can be changed easily to test with different values -->
        <set field="orderId" value="DEMO10091"/>
        <set field="productId" value="WG-1111"/>
        <set field="orderItemSeqId" value="00001"/>
        <set field="shipmentId" value="9999"/>

        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>
        <set field="serviceCtx.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM"/>
        <set field="serviceCtx.productId" from-field="productId"/>
        <set field="serviceCtx.facilityId" value="WebStoreWarehouse"/>
        <set field="serviceCtx.quantityAccepted" value="10" type="BigDecimal"/>
        <set field="serviceCtx.quantityRejected" value="0" type="BigDecimal"/>
        <set field="serviceCtx.shipmentId" from-field="shipmentId"/>
        <set field="serviceCtx.orderId" from-field="orderId"/>
        <set field="serviceCtx.orderItemSeqId" from-field="orderItemSeqId"/>

        <call-service service-name="receiveInventoryProduct" in-map-name="serviceCtx"/>
        <entity-condition  entity-name="AcctgTransEntry" list="acctgTransEntries">
            <condition-expr field-name="productId" from-field="productId"/>
        </entity-condition>
        <assert><not><if-empty field="acctgTransEntries"/></not></assert>
        <iterate list="acctgTransEntries" entry="acctgTransEntry">
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                <assert>
                    <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="UNINVOICED_SHIP_RCPT"/>
                    <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="214000"/>
                </assert>
            <else>
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                    <assert>
                        <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="INVENTORY_ACCOUNT"/>
                        <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="140000"/>
                    </assert>
                </if-compare>
            </else>
            </if-compare>
        </iterate>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testAcctgTransOnEditPoInvoice" short-description="Test case for Purchase Invoices: editing, adding taxes and shipping charges and posting to GL" login-required="false">
        <!-- Precondition: To the Purchase Invoice created add taxes and two different shipping charges
            1. for taxes: set "Invoice Item Type" = "Invoice Sales Tax" and "Unit Price" = 10$
            2. for the first shipping charge: set "Invoice Item Type" = "Invoice Shipping And Handling" and "Unit Price" = 5$
            3. for the second shipping charge: set "Invoice Item Type" = "Invoice Shipping And Handling", set "Override Gl Account Id" = "516100" and "Unit Price" = 5$
        -->
        <!-- Post condition: When status is set to ready, an accounting transaction is automatically posted to the GL:
            * Credit; in account 210000 - "ACCOUNTS PAYABLE"; amount: 290$
            * Debit; in account 214000 - "UNINVOICED ITEM RECEIPTS"; amount: 270$
            * Debit; in account 516100 - "PURCHASE ORDER ADJUSTMENTS"; amount: 10$
            * Debit; in account 510000 - "FREIGHT IN"; amount: 5$
            * Debit; in account 516100 - "PURCHASE ORDER ADJUSTMENTS"; amount: 5$
        -->

        <set field="invoiceId" value="10000"/>
        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>
        <set field="serviceCtx.statusId" value="INVOICE_READY"/>
        <set field="serviceCtx.invoiceId" from-field="invoiceId"/>
        <call-service service-name="setInvoiceStatus" in-map-name="serviceCtx"/>
        <entity-one entity-name="Invoice" value-field="invoice">
            <field-map field-name="invoiceId" from-field="invoiceId"/>
        </entity-one>
        <get-related value-field="invoice" relation-name="AcctgTrans" list="acctgTransList"/>
        <first-from-list list="acctgTransList" entry="acctgTrans"/>
        <get-related value-field="acctgTrans" relation-name="AcctgTransEntry" list="acctgTransEntries"/>

        <set field="debitTotal" type="BigDecimal" value="0.0"/>
        <set field="creditTotal" type="BigDecimal" value="0.0"/>

        <assert><not><if-empty field="acctgTransEntries"/></not></assert>
        <iterate list="acctgTransEntries" entry="acctgTransEntry">
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                <assert>
                    <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="ACCOUNTS_PAYABLE"/>
                    <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="210000"/>
                </assert>
                <calculate field="creditTotal">
                    <calcop operator="add" field="acctgTransEntry.origAmount"/>
                </calculate>
            <else>
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                    <calculate field="debitTotal">
                        <calcop operator="add" field="acctgTransEntry.origAmount"/>
                    </calculate>
                </if-compare>
            </else>
            </if-compare>
        </iterate>
        <assert>
            <if-compare field="debitTotal" operator="equals" value="creditTotal"/>
        </assert>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testAcctgTransOnPaymentSentToSupplier" short-description="Test case for Payment sent to supplier for purchase invoice." login-required="false">
        <!--
            Precondition: New payment is created for: supplierId = "DemoSupplier", "Payment Type ID" = "Vendor Payment" and
                          a proper "Payment Method Type" (e.g. "Electronic Funds Transfer"), amount = $290

            Post condition: On payment's status is sent: a double-entry accounting transaction is automatically posted to the GL:
                * Credit; in account 111100 - "GENERAL CHECKING ACCOUNT"; amount: 290$; however this depends on the "Payment method type" selected;
                * Debit; in account 210000 - "ACCOUNTS PAYABLE"; amount: 290$
         -->

        <set field="paymentId" value="9000"/>
        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>
        <set field="serviceCtx.paymentId" from-field="paymentId"/>
        <set field="serviceCtx.statusId" value="PMNT_SENT"/>

        <call-service service-name="setPaymentStatus" in-map-name="serviceCtx"/>
        <entity-one entity-name="Payment" value-field="payment">
            <field-map field-name="paymentId" from-field="paymentId"/>
        </entity-one>
        <get-related value-field="payment" relation-name="AcctgTrans" list="acctgTransList"/>
        <first-from-list list="acctgTransList" entry="acctgTrans"/>
        <get-related value-field="acctgTrans" relation-name="AcctgTransEntry" list="acctgTransEntries"/>

        <set field="debitTotal" type="BigDecimal" value="0.0"/>
        <set field="creditTotal" type="BigDecimal" value="0.0"/>

        <assert><not><if-empty field="acctgTransEntries"/></not></assert>
        <iterate list="acctgTransEntries" entry="acctgTransEntry">
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
            <!--<assert>
                    <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="GENERAL_CHECKING_ACCOUNT"/>
                    <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="111100"/>
                </assert>-->
                <set field="creditTotal" from-field="acctgTransEntry.origAmount"/>
            <else>
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                    <assert>
                        <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="ACCOUNTS_PAYABLE"/>
                        <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="210000"/>
                    </assert>
                    <set field="debitTotal" from-field="acctgTransEntry.origAmount"/>
                </if-compare>
            </else>
            </if-compare>
        </iterate>
        <assert>
            <if-compare field="debitTotal" operator="equals" value="${creditTotal}"/>
        </assert>
        <check-errors/>
    </simple-method>

    <!-- Test case for Accounting Transaction on Sales -->
    <simple-method method-name="testAcctgTransForSalesOrderShipments" short-description="Creation and Shipments of sales order" login-required="false">
        <!-- Precondition :
             1. create a sales order
             2. from the order view screen, approve the order
             3. from the order view screen, create a shipment to the customer (click on "New Shipment For Ship Group" and then click on the "Update" button in the next screen)
        -->
        <!-- Following process is tested by test case:
             1. issue (assign) the order items to the shipment: select the "Order Items" tab and then click on "Issue All"; this action will generate and post to the GL the accounting transaction for the items taken from the warehouse and ready to be shipped
        -->
        <!-- Post condition: all order items will be issued and it will generate and post to the GL the accounting transaction for the items taken from the warehouse and ready to be shipped
              * Credit; in account:140000 - Account Type:"INVENTORY_ACCOUNT"
              * Debit; in account:500000 - Account Type:"COGS_ACCOUNT"
        -->

        <set field="shipmentId" value="9998"/>
        <set field="orderId" value="DEMO10090"/>
        <set field="shipGroupSeqId" value="00001"/>
        <set field="orderItemSeqId" value="00001"/>
        <set field="inventoryItemId" value="9001"/>
        <set field="quantity" value="1" type="BigDecimal"/>
        <set field="productId" value="GZ-2644"/>

        <entity-one entity-name="UserLogin" value-field="userLogin" auto-field-map="false">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>
        <set field="serviceCtx.shipmentId" from-field="shipmentId"/>
        <set field="serviceCtx.orderId" from-field="orderId"/>
        <set field="serviceCtx.shipGroupSeqId" from-field="shipGroupSeqId"/>
        <set field="serviceCtx.orderItemSeqId" from-field="orderItemSeqId"/>
        <set field="serviceCtx.inventoryItemId" from-field="inventoryItemId"/>
        <set field="serviceCtx.quantity" from-field="quantity"/>
        <call-service service-name="issueOrderItemShipGrpInvResToShipment" in-map-name="serviceCtx"/>

        <entity-condition entity-name="AcctgTransEntry" list="acctgTransEntryList">
            <condition-expr field-name="productId" operator="equals" from-field="productId"/>
        </entity-condition>

        <assert><not><if-empty field="acctgTransEntryList"/></not></assert>
        <iterate list="acctgTransEntryList" entry="acctgTransEntry">
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                <assert>
                    <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="INVENTORY_ACCOUNT"/>
                    <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="140000"/>
                </assert>
            <else>
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                    <assert>
                        <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="COGS_ACCOUNT"/>
                        <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="500000"/>
                    </assert>
                </if-compare>
            </else>
            </if-compare>
        </iterate>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testAcctgTransOnSalesInvoice" short-description="Test case for Accounting Transaction for sales invoice" login-required="false">
        <!-- Precondition:
            1. Create a sales order
            2. From the order view screen, approve the order
            3. From the order view screen, create a shipment to the customer (click on "New Shipment For Ship Group" and then click on the "Update" button in the next screen)
            4. Issue the order items to the shipment: select the "Order Items" tab and then click on "Issue All."
            5. From the shipment detail screen of the shipment created in the previous step (there is a link to it from the order detail screen), set the status of the shipment to "pack"(Click on "Edit" and then from statusId drop down select statusId = "Pack" and then click update); this action will generate a sales invoice
        -->
        <!-- Following process is tested by test case:
             1. Go to the invoice detail screen (there is a link to the invoice from the order detail screen) and click on the "set status to ready"; this action will generate and post to the GL the accounting transaction for the sales invoice
        -->
        <!-- Post condition: "Set status to ready"; This action will generate and post to the GL the accounting transaction for the sales invoice
              * Credit; in account=400000 - Account Type="SALES_ACCOUNT"
              * Debit; in  account=120000 - Account Type="ACCOUNTS_RECEIVABLE"
        -->

        <set field="invoiceId" value="CI1"/>

        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>
        <set field="serviceCtx.invoiceId" from-field="invoiceId"/>
        <set field="serviceCtx.statusId" value="INVOICE_READY"/>
        <call-service service-name="setInvoiceStatus" in-map-name="serviceCtx"/>

        <entity-one entity-name="Invoice" value-field="invoice">
            <field-map field-name="invoiceId" from-field="invoiceId"/>
        </entity-one>
        <get-related value-field="invoice" relation-name="AcctgTrans" list="acctgTransList"/>
        <first-from-list list="acctgTransList" entry="acctgTrans"/>
        <get-related value-field="acctgTrans" relation-name="AcctgTransEntry" list="acctgTransEntries"/>

        <assert><not><if-empty field="acctgTransEntries"/></not></assert>
        <iterate entry="acctgTransEntry" list="acctgTransEntries">
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
            <!--<assert>
                    <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="SALES_ACCOUNT"/>
                    <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="400000"/>
                </assert>-->
            <else>
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                    <assert>
                        <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="ACCOUNTS_RECEIVABLE"/>
                        <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="120000"/>
                    </assert>
                </if-compare>
            </else>
            </if-compare>
        </iterate>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testAcctgTransOnPaymentReceivedFromCustomer" short-description="Test case on Payment Received from customer for Sales Invoice" login-required="false">
        <!-- Precondition :-
            1. Click on the Payment top menu in the Accounting application, then click on the "Create New Payment" link.
            2. In the "New incoming payment" box, set the customer id in the "From Party ID" field; then set "Payment Type ID" = "Customer Payment" and a proper "Payment Method Type" (e.g. "Electronic Funds Transfer"); then set the "amount" and submit the form
        -->
        <!-- Following process is tested by test case:
             1. From the payment detail screen, when you are ready to post the payment to the GL, click on the "Status to Received" link
        -->
        <!-- Post condition: "Status to Received", Received Payments. When you are ready to post the payment to the GL this action will generate and post to the GL the accounting transaction for the items taken from the warehouse and ready to be shipped:
              * Credit; in glAccountId=120000 - glAccountTypeId="ACCOUNTS_RECEIVABLE"
              * Debit; in glAccountId=112000 - glAccountTypeId="UNDEPOSITED_RECEIPTS"
        -->

        <set field="paymentId" value="10000"/>
        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="serviceCtx.userLogin" from-field="userLogin"/>
        <set field="serviceCtx.paymentId" from-field="paymentId"/>
        <set field="serviceCtx.statusId" value="PMNT_RECEIVED"/>
        <call-service service-name="setPaymentStatus" in-map-name="serviceCtx"/>

        <entity-one entity-name="Payment" value-field="payment">
            <field-map field-name="paymentId" from-field="paymentId"/>
        </entity-one>
        <get-related value-field="payment" relation-name="AcctgTrans" list="acctgTransList"/>
        <first-from-list list="acctgTransList" entry="acctgTrans"/>
        <get-related value-field="acctgTrans" relation-name="AcctgTransEntry" list="acctgTransEntries"/>
        <set field="debitTotal" type="BigDecimal" value="0.0"/>
        <set field="creditTotal" type="BigDecimal" value="0.0"/>

        <assert><not><if-empty field="acctgTransEntries"/></not></assert>
        <iterate entry="acctgTransEntry" list="acctgTransEntries">
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
            <!--<assert>
                    <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="ACCOUNTS_RECEIVABLE"/>
                    <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="120000"/>
                </assert>-->
                <calculate field="creditTotal">
                    <calcop operator="add" field="acctgTransEntry.origAmount"/>
                </calculate>
            </if-compare>
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
            <!--<assert>
                    <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="UNDEPOSITED_RECEIPTS"/>
                    <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="112000"/>
                </assert>-->
                <calculate field="debitTotal">
                    <calcop operator="add" field="acctgTransEntry.origAmount"/>
                </calculate>
            </if-compare>
        </iterate>
        <assert>
            <if-compare field="debitTotal" operator="equals" value="creditTotal"/>
        </assert>
        <check-errors/>
    </simple-method>

    <!-- Test case for Accounting Transaction on Manufacturing -->
    <simple-method method-name="testAcctgTransOnMaterialIssuance" short-description="Production run test case for material issuance from the warehouse" login-required="false">
        <!-- Precondition: Inventory is received for following products:
                 productId = MAT_A_COST, quantity = 4, facilityId = Web Store Warehouse
                 productId = MAT_B_COST, quantity = 6, facilityId = Web Store Warehouse
             then new production run is created and then started for following product
                 productId = PROD_COST, quantity = 2, facilityId = Web Store Warehouse

            Post condition:- In entity "AcctgTransEntry" at least two entries will be created for MAT_A_COST
                 * Credit; in account 141000 - "RAW MATERIALS INVENTORY"; amount: 36$
                 * Debit; in account 142000 - "WORK IN PROGRESS INVENTORY"; amount: 36$
            similarly for product MAT_B_COST
                 * Credit; in account 141000 - "RAW MATERIALS INVENTORY"; amount: 42$
                 * Debit; in account 142000 - "WORK IN PROGRESS INVENTORY"; amount: 42$ -->

        <set field="workEffortId" value="10001"/>
        <set field="serviceCtx.workEffortId" from-field="workEffortId"/>
        <entity-one entity-name="UserLogin" value-field="serviceCtx.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="issueProductionRunTask" in-map-name="serviceCtx"/>

        <entity-condition entity-name="WorkEffortAndInventoryAssign" list="workEffortAndInventoryAssigns">
            <condition-list combine="and">
                <condition-expr field-name="workEffortId" from-field="workEffortId"/>
                <condition-list combine="or">
                    <condition-expr field-name="productId" operator="equals" value="MAT_A_COST"/>
                    <condition-expr field-name="productId" operator="equals" value="MAT_B_COST"/>
                </condition-list>
            </condition-list>
        </entity-condition>
        <assert><not><if-empty field="workEffortAndInventoryAssigns"/></not></assert>

        <set field="totalIssuedQty_MAT_A_COST" value="0.0" type="BigDecimal"/>
        <set field="totalIssuedQty_MAT_B_COST" value="0.0" type="BigDecimal"/>
        <iterate list="workEffortAndInventoryAssigns" entry="workEffortAndInventoryAssign">
            <if-compare field="workEffortAndInventoryAssign.productId" operator="equals" value="MAT_A_COST">
                <calculate field="totalIssuedQty_MAT_A_COST">
                    <calcop operator="add">
                        <calcop operator="get" field="workEffortAndInventoryAssign.quantity"/>
                        <calcop operator="get" field="totalIssuedQty_MAT_A_COST"/>
                    </calcop>
                </calculate>
            <else>
                <if-compare field="workEffortAndInventoryAssign.productId" operator="equals" value="MAT_B_COST">
                    <calculate field="totalIssuedQty_MAT_B_COST">
                        <calcop operator="add">
                            <calcop operator="get" field="workEffortAndInventoryAssign.quantity"/>
                            <calcop operator="get" field="totalIssuedQty_MAT_B_COST"/>
                        </calcop>
                    </calculate>
                </if-compare>
            </else>
            </if-compare>
        </iterate>
        <assert>
            <if-compare field="totalIssuedQty_MAT_A_COST" operator="equals" value="4.0" type="BigDecimal"/>
            <if-compare field="totalIssuedQty_MAT_B_COST" operator="equals" value="6.0" type="BigDecimal"/>
        </assert>
        <entity-and entity-name="AcctgTrans" list="acctgTransList">
            <field-map field-name="acctgTransTypeId" value="INVENTORY"/>
        </entity-and>
        <assert><not><if-empty field="acctgTransList"/></not></assert>

        <iterate list="acctgTransList" entry="acctgTrans">
            <get-related list="acctgTransEntryList" relation-name="AcctgTransEntry" value-field="acctgTrans"/>
            <assert><not><if-empty field="acctgTransEntryList"/></not></assert>
            <iterate list="acctgTransEntryList" entry="acctgTransEntry">
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                    <assert>
                        <or>
                            <if-compare field="acctgTransEntry.productId" operator="equals" value="MAT_A_COST"/>
                            <if-compare field="acctgTransEntry.productId" operator="equals" value="MAT_B_COST"/>
                        </or>
                        <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="RAWMAT_INVENTORY"/>
                        <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="141000"/>
                    </assert>
                <else>
                    <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                        <assert>
                            <if-compare field="acctgTransEntry.productId" operator="equals" value="PROD_COST"/>
                            <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="WIP_INVENTORY"/>
                            <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="142000"/>
                        </assert>
                    </if-compare>
                </else>
                </if-compare>
            </iterate>
        </iterate>
        <check-errors/>
    </simple-method>

    <simple-method method-name="testAcctgTransForActualManufacturingCost" short-description="Production run test case for actual manufacturing costs" login-required="false">
        <!-- Precondition: Inventory is received for the following products:
                (1) productId = MAT_A_COST, quantity = 4, facilityId = Web Store Warehouse
                (2) productId = MAT_B_COST, quantity = 6, facilityId = Web Store Warehouse
             then new production run is created, issued components for following product
                (1) productId = PROD_COST,  quantity = 2, facilityId = Web Store Warehouse
             Post condition: In entity "AcctgTransEntry" two entries will be created:
                    * Credit: in account 600000 - "EXPENSE"; amount: 250$
                    * Debit: in account 142000 - "WORK IN PROGRESS INVENTORY", amount: 250$  -->

        <set field="productionRunId" value="10000"/>
        <set field="workEffortId" value="10001"/>
        <set field="serviceCtx.productionRunId" from-field="productionRunId"/>
        <set field="serviceCtx.workEffortId" from-field="workEffortId"/>
        <entity-one entity-name="UserLogin" value-field="serviceCtx.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="changeProductionRunTaskStatus" in-map-name="serviceCtx"/>

        <entity-one entity-name="WorkEffort" value-field="workEffort">
            <field-map field-name="workEffortId" from-field="workEffortId"/>
        </entity-one>
        <get-related value-field="workEffort" relation-name="AcctgTrans" list="acctgTransList"/>
        <assert><not><if-empty field="acctgTransList"></if-empty></not></assert>
        <iterate list="acctgTransList" entry="acctgTrans">
            <get-related value-field="acctgTrans" relation-name="AcctgTransEntry" list="acctgTransEntryList"/>
            <iterate list="acctgTransEntryList" entry="acctgTransEntry">
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                    <assert>
                        <if-compare field="acctgTransEntry.productId" operator="equals" value="PROD_COST"/>
                        <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="OPERATING_EXPENSE"/>
                        <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="600000"/>
                    </assert>
                <else>
                    <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                        <assert>
                            <if-compare field="acctgTransEntry.productId" operator="equals" value="PROD_COST"/>
                            <if-compare field="acctgTransEntry.glAccountTypeId" operator="equals" value="WIP_INVENTORY"/>
                            <if-compare field="acctgTransEntry.glAccountId" operator="equals" value="142000"/>
                        </assert>
                    </if-compare>
                </else>
                </if-compare>
            </iterate>
        </iterate>
        <check-errors/>
    </simple-method>

    <simple-method  method-name="testAcctgTransOnAddFinishedProductsIntoWarehouse" short-description="Production run test case on add finished product into warehouse" login-required="false">
        <!-- Precondition: Inventory is received for following products:
                 productId = MAT_A_COST, quantity = 4, facilityId = Web Store Warehouse
                 productId = MAT_B_COST, quantity = 6, facilityId = Web Store Warehouse
             then new production run is created and started for following product:
                 productId = PROD_COST, quantity = 2, facilityId = Web Store Warehouse
             then issue components and complete the product issuance and at last put 2 quantities into "Stock in" field
             Post condition: In entity "AcctgTransEntry" two entries will be created:
                * Debit, in account 140000 - "INVENTORY"; amount: 328$
                * Credit, in account 142000 - "WORK IN PROGRESS INVENTORY", amount: 328$ (36$ + 42$ + 250$) -->

        <set field="workEffortId" value="10000"/>
        <set field="serviceCtx.workEffortId" from-field="workEffortId"/>
        <entity-one entity-name="UserLogin" value-field="serviceCtx.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="productionRunProduce" in-map-name="serviceCtx"/>

        <!-- For credit entry -->
        <entity-and entity-name="AcctgTransEntry" list="acctgTransEntryList">
            <field-map field-name="productId" value="PROD_COST"/>
            <field-map field-name="glAccountTypeId" value="WIP_INVENTORY"/>
            <field-map field-name="glAccountId" value="142000"/>
            <order-by field-name="-createdStamp"/>
        </entity-and>
        <first-from-list list="acctgTransEntryList" entry="acctgTransEntry"/>
        <assert>
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C"/>
            <if-compare field="acctgTransEntry.origAmount" operator="equals" value="328" type="BigDecimal"/>
        </assert>

        <!-- For debit entry -->
        <entity-and entity-name="AcctgTransEntry" list="acctgTransEntryList">
            <field-map field-name="productId" value="PROD_COST"/>
            <field-map field-name="glAccountTypeId" value="INVENTORY_ACCOUNT"/>
            <field-map field-name="glAccountId" value="140000"/>
            <order-by field-name="-createdStamp"/>
        </entity-and>
        <first-from-list list="acctgTransEntryList" entry="acctgTransEntry"/>
        <assert>
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D"/>
            <if-compare field="acctgTransEntry.origAmount" operator="equals" value="328" type="BigDecimal"/>
        </assert>
        <check-errors/>
    </simple-method>
</simple-methods>
