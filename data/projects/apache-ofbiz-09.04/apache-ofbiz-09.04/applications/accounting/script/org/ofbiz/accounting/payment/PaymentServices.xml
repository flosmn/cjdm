<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="createPayment" short-description="Create a Payment">
        <if>
            <condition>
                <and>
                    <not><if-has-permission permission="PAY_INFO" action="_CREATE"/></not>
                    <not><if-compare-field field="userLogin.partyId" to-field="parameters.partyIdFrom" operator="equals"/></not>
                    <not><if-compare-field field="userLogin.partyId" to-field="parameters.partyIdTo" operator="equals"/></not>
                </and>
            </condition>
            <then>
                <add-error><fail-property resource="AccountingUiLabels" property="AccountingCreatePaymentPermissionError"/></add-error>
            </then>
        </if>
        <check-errors/>

        <make-value entity-name="Payment" value-field="payment"/>
        <if-empty field="parameters.paymentId">
            <sequenced-id sequence-name="Payment" field="payment.paymentId"/>
            <else>
                <set field="payment.paymentId" from-field="parameters.paymentId"/>
            </else>
        </if-empty>
        <field-to-result field="payment.paymentId" result-name="paymentId"/>

        <if-not-empty field="parameters.paymentMethodId">
            <entity-one entity-name="PaymentMethod" value-field="paymentMethod">
                <field-map field-name="paymentMethodId" from-field="parameters.paymentMethodId"/>
            </entity-one>
            <log level="info" message="Replacing passed payment method type [${parameters.paymentMethodTypeId}] with payment method type [${paymentMethod.paymentMethodTypeId}] for payment method [${parameters.paymentMethodId}]"/>
            <set field="parameters.paymentMethodTypeId" from-field="paymentMethod.paymentMethodTypeId"/>
        </if-not-empty>
        <if-empty field="parameters.paymentMethodTypeId">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingPaymentMethodIdPaymentMethodTypeIdNullError"/>
            </add-error>
        </if-empty>

        <set-nonpk-fields map="parameters" value-field="payment"/>
        <if-empty field="payment.effectiveDate">
            <now-timestamp field="payment.effectiveDate"/>
        </if-empty>
        <create-value value-field="payment"/>
    </simple-method>
    <simple-method method-name="updatePayment" short-description="Update a Payment">
        <make-value entity-name="Payment" value-field="lookupPayment"/>
        <set-pk-fields value-field="lookupPayment" map="parameters"/>

        <find-by-primary-key entity-name="Payment" map="lookupPayment" value-field="payment"/>
        <if>
            <condition>
                <and>
                    <not><if-has-permission permission="PAY_INFO" action="_UPDATE"/></not>
                    <not><if-compare-field field="userLogin.partyId" to-field="payment.partyIdFrom" operator="equals"/></not>
                    <not><if-compare-field field="userLogin.partyId" to-field="payment.partyIdTo" operator="equals"/></not>
                </and>
            </condition>
            <then>
                <add-error><fail-property resource="AccountingUiLabels" property="AccountingUpdatePaymentPermissionError"/></add-error>
            </then>
        </if>
        <check-errors/>

        <if-compare field="payment.statusId" value="PMNT_NOT_PAID" operator="not-equals">
            <!-- check if only status change -->
            <make-value value-field="newPayment" entity-name="Payment"/>
            <make-value value-field="oldPayment" entity-name="Payment"/>
            <set-nonpk-fields value-field="newPayment" map="payment"/>
            <set-nonpk-fields value-field="oldPayment" map="payment"/>
            <set-nonpk-fields value-field="newPayment" map="parameters"/>
            <set field="newPayment.statusId" from-field="oldPayment.statusId"/>
            <if-compare-field field="oldPayment" to-field="newPayment" operator="not-equals">
                <log level="always" message="=========Old: ${oldPayment} ============New: ${newPayment}"></log>
                <add-error>
                    <fail-property resource="AccountingUiLabels" property="AccountingPSUpdateNotAllowedBecauseOfStatus"/>
                </add-error>
            </if-compare-field>
        </if-compare>
        <check-errors/>

        <set field="statusIdSave" from-field="payment.statusId"/>    <!-- do not allow status change here -->
        <set-nonpk-fields map="parameters" value-field="payment"/>
        <set field="payment.statusId" from-field="statusIdSave"/>    <!-- do not allow status change here -->

        <if-empty field="payment.effectiveDate">
            <now-timestamp field="payment.effectiveDate"/>
        </if-empty>
        <if-not-empty field="payment.paymentMethodId">
            <entity-one entity-name="PaymentMethod" value-field="paymentMethod">
                <field-map field-name="paymentMethodId" from-field="payment.paymentMethodId"/>
            </entity-one>
            <if-compare-field field="payment.paymentMethodTypeId" to-field="paymentMethod.paymentMethodTypeId" operator="not-equals">
                <log level="info" message="Replacing passed payment method type [${payment.paymentMethodTypeId}] with payment method type [${paymentMethod.paymentMethodTypeId}] for payment method [${payment.paymentMethodId}]"/>
            </if-compare-field>
            <set field="payment.paymentMethodTypeId" from-field="paymentMethod.paymentMethodTypeId"/>
        </if-not-empty>
        <store-value value-field="payment"/>

        <if-not-empty field="parameters.statusId">
            <if-compare-field field="parameters.statusId" to-field="statusIdSave" operator="not-equals">
                <set-service-fields service-name="setPaymentStatus" map="parameters" to-map="param"/>
                <call-service service-name="setPaymentStatus" in-map-name="param"/>
                <check-errors/>
            </if-compare-field>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="createPaymentApplication" short-description="Create a Payment Application">
        <if-empty field="parameters.invoiceId">
            <if-empty field="parameters.billingAccountId">
                <if-empty field="parameters.taxAuthGeoId">
                    <if-empty field="parameters.overrideGlAccountId">
                      <add-error><fail-property resource="AccountingUiLabels" property="AccountingPaymentApplicationParameterMissing"/></add-error>
                      <check-errors/>
                    </if-empty>
                </if-empty>
            </if-empty>
        </if-empty>

        <make-value entity-name="PaymentApplication" value-field="paymentAppl"/>
        <set-nonpk-fields map="parameters" value-field="paymentAppl"/>

        <!-- get the invoice and do some further validation against it -->
        <if-not-empty field="parameters.invoiceId">
            <entity-one entity-name="Invoice" value-field="invoice"/>

            <!-- get the amount that has not been applied yet for the invoice (outstanding amount) -->
            <set field="notApplied" value="${bsh:org.ofbiz.accounting.invoice.InvoiceWorker.getInvoiceNotApplied(invoice)}" type="BigDecimal"/>

            <!-- if the amount to apply goes over the outstanding amount, then use the notApplied amount and log a warning -->
            <if-compare-field field="paymentAppl.amountApplied" to-field="notApplied" operator="greater" type="BigDecimal">
                <log level="warning" message="Create Payment Application: Amount to apply [${paymentAppl.amountApplied}] is greater than the outstanding amount [${notApplied}] of the invoice [${invoice.invoiceId}]. Creating Payment Application for outstanding amount [${notApplied}] instead."/>
                <set field="paymentAppl.amountApplied" from-field="notApplied"/>
            </if-compare-field>

            <if-not-empty field="invoice.billingAccountId">
                <set field="paymentAppl.billingAccountId" from-field="invoice.billingAccountId"/>
            </if-not-empty>
        </if-not-empty>

        <sequenced-id sequence-name="PaymentApplication" field="paymentAppl.paymentApplicationId"/>
        <field-to-result field="paymentAppl.paymentApplicationId" result-name="paymentApplicationId"/>

        <create-value value-field="paymentAppl"/>
    </simple-method>

    <simple-method method-name="setPaymentStatus" short-description="Set The Payment Status">
        <check-permission permission="ACCOUNTING" action="_UPDATE">
            <alt-permission permission="ACCOUNTING_ROLE" action="_UPDATE"/>
            <fail-property resource="AccountingUiLabels" property="AccountingPermissionError"/>
        </check-permission>

        <entity-one entity-name="Payment" value-field="payment"/>
        <field-to-result field="payment.statusId" result-name="oldStatusId"/>

        <if-compare-field field="payment.statusId" to-field="parameters.statusId" operator="not-equals">
            <entity-one entity-name="StatusValidChange" value-field="statusChange" auto-field-map="false">
                <field-map field-name="statusId" from-field="payment.statusId"/>
                <field-map field-name="statusIdTo" from-field="parameters.statusId"/>
            </entity-one>
            <if-empty field="statusChange">
                <add-error><fail-property resource="AccountingUiLabels" property="AccountingPSInvalidStatusChange"/></add-error>
                <log level="error" message="Cannot change from ${payment.statusId} to ${parameters.statusId}"/>
                <check-errors/>
                <else>

                    <!-- check if the payment fully applied when set to confirmed-->
                    <if-compare field="parameters.statusId" operator="equals" value="PMNT_CONFIRMED">
                        <set field="notYetApplied" value="${bsh:org.ofbiz.accounting.payment.PaymentWorker.getPaymentNotApplied(payment)}"/>
                        <if-compare field="notYetApplied" operator="greater" value="0.00" type="BigDecimal">
                            <add-error><fail-property resource="AccountingUiLabels" property="AccountingPSNotConfirmedNotFullyApplied"/></add-error>
                            <log level="error" message="Cannot change from ${payment.statusId} to ${parameters.statusId}, payment not fully applied: ${notYetapplied}"/>
                            <check-errors/>
                        </if-compare>
                    </if-compare>

                    <if-compare field="parameters.statusId" operator="equals" value="PMNT_CANCELLED">
                        <!-- if new status is cancelled delete existing payment applications. -->
                        <get-related value-field="payment" relation-name="PaymentApplication" list="paymentApplications"/>
                        <iterate list="paymentApplications" entry="paymentApplication">
                            <set field="removePaymentApplicationMap.paymentApplicationId" from-field="paymentApplication.paymentApplicationId"/>
                            <call-service service-name="removePaymentApplication" in-map-name="removePaymentApplicationMap"/>
                        </iterate>
                        <!-- if new status is cancelled and the payment is associated to an OrderPaymentPreference, update the status of that record too. -->
                        <get-related-one value-field="payment" relation-name="OrderPaymentPreference" to-value-field="orderPaymentPreference"/>
                        <if-not-empty field="orderPaymentPreference">
                            <set field="updateOrderPaymentPreferenceMap.orderPaymentPreferenceId" from-field="orderPaymentPreference.orderPaymentPreferenceId"/>
                            <set field="updateOrderPaymentPreferenceMap.cancelThis" value="true"/>
                            <call-service service-name="updateOrderPaymentPreference" in-map-name="updateOrderPaymentPreferenceMap"/>
                        </if-not-empty>
                    </if-compare>

                    <!-- everything ok so now change the status field -->
                    <set from-field="parameters.statusId" field="payment.statusId"/>
                    <store-value value-field="payment"/>

                </else>
            </if-empty>
        </if-compare-field>
    </simple-method>

    <simple-method method-name="quickSendPayment" short-description="Update a Payment then set it to status PMNT_SENT">
        <call-service service-name="updatePayment" in-map-name="parameters"/>
        <set field="param.paymentId" from-field="parameters.paymentId"/>
        <set field="param.statusId" value="PMNT_SENT"/>
        <call-service service-name="setPaymentStatus" in-map-name="param"/>
    </simple-method>

    <simple-method method-name="createPaymentAndApplication" short-description="Create a payment and a payment application for the full amount">
        <set-service-fields service-name="createPayment" map="parameters" to-map="createPaymentInMap"/>
        <call-service service-name="createPayment" in-map-name="createPaymentInMap">
            <result-to-field field="paymentId" result-name="paymentId"/>
        </call-service>
        <check-errors/>
        <set-service-fields service-name="createPaymentApplication" map="parameters" to-map="createPaymentAppInMap"/>
        <set field="createPaymentAppInMap.paymentId" from-field="paymentId"/>
        <set field="createPaymentAppInMap.amountApplied" from-field="parameters.amount"/>
        <call-service service-name="createPaymentApplication" in-map-name="createPaymentAppInMap">
            <result-to-field field="paymentApplicationId" result-name="paymentApplicationId"/>
        </call-service>
        <check-errors/>
        <field-to-result field="paymentId" result-name="paymentId"/>
        <field-to-result field="paymentApplicationId" result-name="paymentApplicationId"/>
    </simple-method>

    <simple-method method-name="getInvoicePaymentInfoList" short-description="Create a list with information on payment due dates and amounts for the invoice">
        <if-empty field="parameters.invoice">
            <entity-one entity-name="Invoice" value-field="invoice"/>
        <else>
            <set field="invoice" from-field="parameters.invoice"/>
        </else>
        </if-empty>
        <call-class-method class-name="org.ofbiz.accounting.invoice.InvoiceWorker" method-name="getInvoiceTotal" ret-field="invoiceTotalAmount">
            <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <call-class-method class-name="org.ofbiz.accounting.invoice.InvoiceWorker" method-name="getInvoiceApplied" ret-field="invoiceTotalAmountPaid">
            <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <get-related relation-name="InvoiceTerm" value-field="invoice" list="invoiceTerms"/>
        <set field="remainingAppliedAmount" from-field="invoiceTotalAmountPaid" type="BigDecimal"/>
        <set field="computedTotalAmount" value="0.0" type="BigDecimal"/>
        <iterate list="invoiceTerms" entry="invoiceTerm">
            <get-related-one relation-name="TermType" value-field="invoiceTerm" to-value-field="termType" use-cache="true"/>
            <if-compare field="termType.parentTypeId" operator="equals" value="FIN_PAYMENT_TERM">
                <clear-field field="invoicePaymentInfo"/>
                <set field="invoicePaymentInfo.invoiceId" from-field="invoice.invoiceId"/>
                <set field="invoicePaymentInfo.invoiceTermId" from-field="invoiceTerm.invoiceTermId"/>
                <set field="invoicePaymentInfo.termTypeId" from-field="invoiceTerm.termTypeId"/>
                <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayEnd" ret-field="invoicePaymentInfo.dueDate">
                    <field field="invoice.invoiceDate" type="Timestamp"/>
                    <field field="invoiceTerm.termDays" type="Long"/>
                </call-class-method>
                <calculate field="invoiceTermAmount" type="BigDecimal">
                    <calcop field="invoiceTotalAmount" operator="multiply">
                        <calcop field="invoiceTerm.termValue" operator="get"/>
                    </calcop>
                </calculate>
                <calculate field="invoiceTermAmount" type="BigDecimal">
                    <calcop field="invoiceTermAmount" operator="divide">
                        <number value="100"/>
                    </calcop>
                </calculate>
                <set field="invoicePaymentInfo.amount" from-field="invoiceTermAmount"/>
                <calculate field="computedTotalAmount" type="BigDecimal">
                    <calcop field="computedTotalAmount" operator="add">
                        <calcop field="invoicePaymentInfo.amount" operator="get"/>
                    </calcop>
                </calculate>
                <if-compare-field field="remainingAppliedAmount" to-field="invoiceTermAmount" operator="greater-equals" type="BigDecimal">
                    <set field="invoicePaymentInfo.paidAmount" from-field="invoiceTermAmount" type="BigDecimal"/>
                    <calculate field="remainingAppliedAmount" type="BigDecimal">
                        <calcop field="remainingAppliedAmount" operator="subtract">
                            <calcop field="invoiceTermAmount" operator="get"/>
                        </calcop>
                    </calculate>
                <else>
                    <set field="invoicePaymentInfo.paidAmount" from-field="remainingAppliedAmount" type="BigDecimal"/>
                    <set field="remainingAppliedAmount" value="0.0" type="BigDecimal"/>
                </else>
                </if-compare-field>
                <calculate field="invoicePaymentInfo.outstandingAmount" type="BigDecimal">
                    <calcop field="invoicePaymentInfo.amount" operator="subtract">
                        <calcop field="invoicePaymentInfo.paidAmount" operator="get"/>
                    </calcop>
                </calculate>
                <set field="invoicePaymentInfoList[]" from-field="invoicePaymentInfo"/>
            </if-compare>
        </iterate>
        <if>
            <condition>
                <or>
                    <if-compare field="remainingAppliedAmount" operator="greater" value="0.0" type="BigDecimal"/>
                    <if-compare field="invoiceTotalAmount" operator="less-equals" value="0.0" type="BigDecimal"/>
                    <if-compare-field field="computedTotalAmount" to-field="invoiceTotalAmount" operator="less" type="BigDecimal"/>
                </or>
            </condition>
            <then>
                <clear-field field="invoicePaymentInfo"/>
                <set field="andMap.termTypeId" value="FIN_PAYMENT_TERM"/>
                <filter-list-by-and list="invoiceTerms" map="andMap"/>
                <first-from-list list="invoiceTerms" entry="invoiceTerm"/>
                <if-not-empty field="invoiceTerm">
                    <set field="invoicePaymentInfo.termTypeId" from-field="invoiceTerm.termTypeId"/>
                    <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayEnd" ret-field="invoicePaymentInfo.dueDate">
                        <field field="invoice.invoiceDate" type="Timestamp"/>
                        <field field="invoiceTerm.termDays" type="Long"/>
                    </call-class-method>
                <else>
                    <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayEnd" ret-field="invoicePaymentInfo.dueDate">
                        <field field="invoice.invoiceDate" type="Timestamp"/>
                    </call-class-method>
                </else>
                </if-not-empty>
                <set field="invoicePaymentInfo.invoiceId" from-field="invoice.invoiceId"/>
                <calculate field="invoicePaymentInfo.amount" type="BigDecimal">
                    <calcop field="invoiceTotalAmount" operator="subtract">
                        <calcop field="computedTotalAmount" operator="get"/>
                    </calcop>
                </calculate>
                <set field="invoicePaymentInfo.paidAmount" from-field="remainingAppliedAmount" type="BigDecimal"/>
                <calculate field="invoicePaymentInfo.outstandingAmount" type="BigDecimal">
                    <calcop field="invoicePaymentInfo.amount" operator="subtract">
                        <calcop field="invoicePaymentInfo.paidAmount" operator="get"/>
                    </calcop>
                </calculate>
                <set field="invoicePaymentInfoList[]" from-field="invoicePaymentInfo"/>
            </then>
        </if>
        <field-to-result field="invoicePaymentInfoList" result-name="invoicePaymentInfoList"/>
    </simple-method>

    <simple-method method-name="getInvoicePaymentInfoListByDueDateOffset" short-description="Select a list with information on payment due dates and amounts for invoices.">
        <now-timestamp field="nowTimestamp"/>
        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayEnd" ret-field="asOfDate">
            <field field="nowTimestamp" type="Timestamp"/>
            <field field="parameters.daysOffset" type="Long"/>
        </call-class-method>
        <entity-condition entity-name="Invoice" list="invoices">
            <condition-list combine="and">
                <condition-expr field-name="invoiceTypeId" operator="equals" from-field="parameters.invoiceTypeId"/>
                <condition-expr field-name="partyId" operator="equals" from-field="parameters.partyId" ignore-if-empty="true"/>
                <condition-expr field-name="partyIdFrom" operator="equals" from-field="parameters.partyIdFrom" ignore-if-empty="true"/>
                <condition-expr field-name="statusId" operator="not-equals" value="INVOICE_CANCELLED"/>
                <condition-expr field-name="statusId" operator="not-equals" value="INVOICE_PAID"/>
            </condition-list>
            <order-by field-name="invoiceDate"/>
        </entity-condition>
        <iterate list="invoices" entry="invoice">
            <clear-field field="getInvoicePaymentInfoListInMap"/>
            <set field="getInvoicePaymentInfoListInMap.invoice" from-field="invoice"/>
            <call-service service-name="getInvoicePaymentInfoList" in-map-name="getInvoicePaymentInfoListInMap">
                <result-to-field field="invoicePaymentInfoList" result-name="invoicePaymentInfoList"/>
            </call-service>
            <iterate list="invoicePaymentInfoList" entry="invoicePaymentInfo">
                <if>
                    <condition>
                        <and>
                            <if-compare field="invoicePaymentInfo.outstandingAmount" operator="greater" value="0.0" type="BigDecimal"/>
                            <if-compare-field field="invoicePaymentInfo.dueDate" to-field="asOfDate" operator="less" type="Timestamp"/>
                        </and>
                    </condition>
                    <then>
                        <set field="selectedInvoicePaymentInfoList[]" from-field="invoicePaymentInfo"/>
                    </then>
                </if>
            </iterate>
        </iterate>
        <field-to-result field="selectedInvoicePaymentInfoList" result-name="invoicePaymentInfoList"/>
    </simple-method>

</simple-methods>
