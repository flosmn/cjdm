package org.ogre4j.eclipse.meshviewer;

import java.util.Vector;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.ogre4j.IStringVectorPtr;
import org.ogre4j.MeshManager;
import org.ogre4j.ResourceGroupManager;
import org.ogre4j.Root;
import org.ogre4j.StringVectorPtr;
import org.ogre4j.eclipse.OgrePlugin;

public class OgreResourceForm extends Composite {

	private Table table = null;
	private Button addButton = null;
	private Button removeButton = null;
	private Button clearButton = null;
	private Button parseCfgButton = null;
	
	public Vector<String> resourceLocations=new Vector<String>();  //  @jve:decl-index=0:
	private Button addZipButton = null;

	public OgreResourceForm(Composite parent, int style) {
		super(parent, style);
		initialize(); // autogenerated by VisualEditor
		initialize2(); // manual additions (separate function to prevent VisualEditor getting messed up)
		updateResourceTable();
	}

	private void initialize() {
		GridData gridData11 = new GridData();
		gridData11.horizontalSpan = 4;
		gridData11.horizontalAlignment = GridData.FILL;
		gridData11.verticalAlignment = GridData.BEGINNING;
		gridData11.grabExcessHorizontalSpace = false;
		GridData gridData4 = new GridData();
		gridData4.horizontalAlignment = GridData.FILL;
		gridData4.horizontalSpan = 4;
		gridData4.verticalAlignment = GridData.BEGINNING;
		GridData gridData3 = new GridData();
		gridData3.horizontalAlignment = GridData.FILL;
		gridData3.horizontalSpan = 4;
		gridData3.verticalSpan = 2;
		gridData3.verticalAlignment = GridData.END;
		GridData gridData2 = new GridData();
		gridData2.horizontalAlignment = GridData.FILL;
		gridData2.horizontalSpan = 4;
		gridData2.verticalAlignment = GridData.BEGINNING;
		GridData gridData1 = new GridData();
		gridData1.grabExcessHorizontalSpace = false;
		gridData1.verticalAlignment = GridData.BEGINNING;
		gridData1.horizontalSpan = 4;
		gridData1.horizontalAlignment = GridData.FILL;
		GridData gridData = new GridData();
		gridData.verticalSpan = 6;
		gridData.grabExcessVerticalSpace = true;
		gridData.horizontalAlignment = GridData.FILL;
		gridData.verticalAlignment = GridData.FILL;
		gridData.grabExcessHorizontalSpace = true;
		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 5;
		table = new Table(this, SWT.NONE);
		table.setHeaderVisible(true);
		table.setLayoutData(gridData);
		table.setLinesVisible(true);
		addButton = new Button(this, SWT.NONE);
		addButton.setText("Add Path");
		addButton.setLayoutData(gridData1);
		addZipButton = new Button(this, SWT.NONE);
		addZipButton.setText("Add *.zip");
		addZipButton.setLayoutData(gridData11);
		removeButton = new Button(this, SWT.NONE);
		removeButton.setText("Remove");
		removeButton.setLayoutData(gridData2);
		parseCfgButton = new Button(this, SWT.NONE);
		parseCfgButton.setText("resources.cfg");
		parseCfgButton.setLayoutData(gridData4);
		clearButton = new Button(this, SWT.NONE);
		clearButton.setText("Clear");
		clearButton.setLayoutData(gridData3);
		this.setLayout(gridLayout);
		setSize(new Point(417, 151));
	}

	public void initialize2() {
		
		TableColumn aTableColumn = new TableColumn(table, SWT.LEFT);
		aTableColumn.setText("Res. Location");

		TableColumn bTableColumn = new TableColumn(table, SWT.LEFT);
		bTableColumn.setText("Res. Group");

		TableColumn cTableColumn = new TableColumn(table, SWT.LEFT);
		cTableColumn.setText("...");

		aTableColumn.setWidth(125);
		bTableColumn.setWidth(125);
		cTableColumn.setWidth(50);

		// add-button event
		addButton.addSelectionListener(new SelectionListener() {

			private void processSelection() {
				
				DirectoryDialog dd = new DirectoryDialog(getShell(), SWT.OPEN);
				dd.setText("Add Resource Location");
				dd.setMessage("Please choose the new resource directory...");
				dd.setFilterPath(System.getProperty("user.dir")); // point to current working directory
				String strDir = dd.open();
				if (strDir != null)
				{
					// add to ogre
					ResourceGroupManager.getSingleton().clearResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					OgrePlugin.getDefault().addResourceLocation(strDir, OgrePlugin.RESOURCE_LOCATION_TYPE_FILE_SYSTEM, ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					OgrePlugin.getDefault().initializeResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					
					// cause update of ogre and the render-window
					MeshManager.getSingleton().reloadAll(true);
					Root.getSingleton().renderOneFrame();
					
					// add to resourceLocations (for this class' table)
					resourceLocations.add(strDir);
					updateResourceTable();
				}
			}

			public void widgetSelected(SelectionEvent event) {
				processSelection();
			}

			public void widgetDefaultSelected(SelectionEvent event) {
				processSelection();
			}
		});
		
		// add-zip-button event
		addZipButton.addSelectionListener(new SelectionListener() {

			private void processSelection() {
				
				FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
				fd.setFilterExtensions(new String[] {"*.zip"});
				fd.setText("Add Resource Location (*.zip)");
				fd.setFilterPath(System.getProperty("user.dir")); // point to current working directory
				String strFile = fd.open();
				if (strFile != null)
				{
					// add to ogre
					ResourceGroupManager.getSingleton().clearResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					OgrePlugin.getDefault().addResourceLocation(strFile, OgrePlugin.RESOURCE_LOCATION_TYPE_ZIP, ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					OgrePlugin.getDefault().initializeResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					
					// cause update of ogre and the render-window
					MeshManager.getSingleton().reloadAll(true);
					Root.getSingleton().renderOneFrame();
					
					// add to resourceLocations (for this class' table)
					resourceLocations.add(strFile);
					updateResourceTable();
				}
			}

			public void widgetSelected(SelectionEvent event) {
				processSelection();
			}

			public void widgetDefaultSelected(SelectionEvent event) {
				processSelection();
			}
		});
		
		// remove-button event
		removeButton.addSelectionListener(new SelectionListener() {

			private void processSelection() {
				
				if (table.getSelection()[0] != null)
				{
					// remove from ogre
					OgrePlugin.getDefault().removeResourceLocation(table.getSelection()[0].getText(0), ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					ResourceGroupManager.getSingleton().clearResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
					OgrePlugin.getDefault().initializeResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());

					// cause update of ogre and the render-window
					MeshManager.getSingleton().reloadAll(true);
					Root.getSingleton().renderOneFrame();
					
					// remove from resourceLocations (for this class' table)
					resourceLocations.remove(table.getSelectionIndex());
					updateResourceTable();
				}
			}

			public void widgetSelected(SelectionEvent event) {
				processSelection();
			}

			public void widgetDefaultSelected(SelectionEvent event) {
				processSelection();
			}
		});

		// clear-button event
		clearButton.addSelectionListener(new SelectionListener() {

			private void processSelection() {
				
				// clear ogre's resource group
				OgrePlugin.getDefault().destroyResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
				ResourceGroupManager.getSingleton().createResourceGroup(ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME());
				
				// cause update of ogre and the render-window
				MeshManager.getSingleton().reloadAll(true);
				Root.getSingleton().renderOneFrame();
				
				// clear resourceLocations (for this class' table)
				resourceLocations.clear();
				updateResourceTable();
			}

			public void widgetSelected(SelectionEvent event) {
				processSelection();
			}

			public void widgetDefaultSelected(SelectionEvent event) {
				processSelection();
			}
		});
		
		// resource.cfg-button event
		parseCfgButton.addSelectionListener(new SelectionListener() {

			private void processSelection() {
				
				FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
				fd.setFilterExtensions(new String[] {"*.cfg"});
				fd.setText("Parse CFG File");
				fd.setFilterPath(System.getProperty("user.dir")); // point to current working directory
				String strFile = fd.open();
				if (strFile != null)
				{
					//TODO: Load cfg file, etc.
					
					updateResourceTable();
				}
			}

			public void widgetSelected(SelectionEvent event) {
				processSelection();
			}

			public void widgetDefaultSelected(SelectionEvent event) {
				processSelection();
			}
		});
	}
	
	/**
	 * Syncs the table content to OGRE's resource locations
	 * 
	 * */
	public void updateResourceTable() {
		
		String resourceGroupName=ResourceGroupManager.getDEFAULT_RESOURCE_GROUP_NAME();
		
		IStringVectorPtr resourceNames = new StringVectorPtr();
		ResourceGroupManager.getSingleton().listResourceNames(resourceNames, resourceGroupName, false);
		
		//TODO: manually delete TableItem objects? memory leak?
		table.removeAll();
        table.clearAll();

        /*
        // generate list by asking ogre
		int i;
		int n=resourceNames.get().size();
		for(i=0; i<n; i++)
		{
			TableItem newItem = new TableItem(table, SWT.NONE);
			newItem.setText(new String[] {resourceNames.get().at(i).get(), resourceGroupName, "?"} );
		}
		*/
        
        // generate list from resourceLocations 
		int i;
		int n=resourceLocations.size();
		for(i=0; i<n; i++)
		{
			TableItem newItem = new TableItem(table, SWT.NONE);
			newItem.setText(new String[] {
					resourceLocations.get(i),
					resourceGroupName,
					"..."} );
		}
		
		table.update();
	}

}  //  @jve:decl-index=0:visual-constraint="165,37"
