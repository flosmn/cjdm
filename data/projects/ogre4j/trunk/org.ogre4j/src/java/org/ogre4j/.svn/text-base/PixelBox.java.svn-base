/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class PixelBox extends org.xbig.base.NativeObject implements org.ogre4j.IPixelBox {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PixelBox(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PixelBox(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PixelBox(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PixelBox() {
         super( new org.xbig.base.InstancePointer(__createPixelBox()), false);
    }

    private native static long __createPixelBox();

    /** 
    Constructor providing extents in the form of a  object. This constructor assumes the pixel data is laid out consecutively in memory. (this means row after row, slice after slice, with no space in between) **/
    public PixelBox(org.ogre4j.IBox extents, org.ogre4j.PixelFormat pixelFormat, VoidPointer pixelData) {
         super( new org.xbig.base.InstancePointer(__createPixelBox__BoxRPixelFormatvvp( extents.getInstancePointer().pointer,  pixelFormat.getValue(),  pixelData.object.pointer)), false);
    }

    private native static long __createPixelBox__BoxRPixelFormatvvp(long extents, int pixelFormat, long pixelData);

    /** 
    Constructor providing width, height and depth. This constructor assumes the pixel data is laid out consecutively in memory. (this means row after row, slice after slice, with no space in between) **/
    public PixelBox(int width, int height, int depth, org.ogre4j.PixelFormat pixelFormat, VoidPointer pixelData) {
         super( new org.xbig.base.InstancePointer(__createPixelBox__ivivivPixelFormatvvp( width,  height,  depth,  pixelFormat.getValue(),  pixelData.object.pointer)), false);
    }

    private native static long __createPixelBox__ivivivPixelFormatvvp(int width, int height, int depth, int pixelFormat, long pixelData);

    /** 
    Set the rowPitch and slicePitch so that the buffer is laid out consecutive in memory. **/
    public void setConsecutive() {
        _setConsecutive(this.object.pointer);
    }

    private native void _setConsecutive(long _pointer_);

    /** 
    Get the number of elements between one past the rightmost pixel of one row and the leftmost pixel of the next row. (IE this is zero if rows are consecutive). **/
    public int getRowSkip() {
         return _getRowSkip_const(this.object.pointer);
    }

    private native int _getRowSkip_const(long _pointer_);

    /** 
    Get the number of elements between one past the right bottom pixel of one slice and the left top pixel of the next slice. (IE this is zero if slices are consecutive). **/
    public int getSliceSkip() {
         return _getSliceSkip_const(this.object.pointer);
    }

    private native int _getSliceSkip_const(long _pointer_);

    /** 
    Return whether this buffer is laid out consecutive in memory (ie the pitches are equal to the dimensions) **/
    public boolean isConsecutive() {
         return _isConsecutive_const(this.object.pointer);
    }

    private native boolean _isConsecutive_const(long _pointer_);

    /** 
    Return the size (in bytes) this image would take if it was laid out consecutive in memory **/
    public int getConsecutiveSize() {
         return _getConsecutiveSize_const(this.object.pointer);
    }

    private native int _getConsecutiveSize_const(long _pointer_);

    /** 
    Return a subvolume of this . **/
    public void getSubVolume(org.ogre4j.IPixelBox returnValue, org.ogre4j.IBox def) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getSubVolume__BoxR_const(this.object.pointer, def.getInstancePointer().pointer)), false);
    }

    private native long _getSubVolume__BoxR_const(long _pointer_, long def);

    /** **/
    public boolean contains(org.ogre4j.IBox def) {
         return _contains__BoxR_const(this.object.pointer, def.getInstancePointer().pointer);
    }

    private native boolean _contains__BoxR_const(long _pointer_, long def);

    /** **/
    public int getWidth() {
         return _getWidth_const(this.object.pointer);
    }

    private native int _getWidth_const(long _pointer_);

    /** **/
    public int getHeight() {
         return _getHeight_const(this.object.pointer);
    }

    private native int _getHeight_const(long _pointer_);

    /** **/
    public int getDepth() {
         return _getDepth_const(this.object.pointer);
    }

    private native int _getDepth_const(long _pointer_);

    /** **/
    public VoidPointer getdata() {
         return new VoidPointer(new InstancePointer(_getdata(this.object.pointer)));
    }

    private native long _getdata(long _pointer_);

    /** **/
    public void setdata(VoidPointer _jni_value_) {
        _setdata(this.object.pointer, _jni_value_.object.pointer);
    }

    private native void _setdata(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.PixelFormat getformat() {
         return org.ogre4j.PixelFormat.toEnum(_getformat(this.object.pointer));
    }

    private native int _getformat(long _pointer_);

    /** **/
    public void setformat(org.ogre4j.PixelFormat _jni_value_) {
        _setformat(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setformat(long _pointer_, int _jni_value_);

    /** **/
    public int getrowPitch() {
         return _getrowPitch(this.object.pointer);
    }

    private native int _getrowPitch(long _pointer_);

    /** **/
    public void setrowPitch(int _jni_value_) {
        _setrowPitch(this.object.pointer, _jni_value_);
    }

    private native void _setrowPitch(long _pointer_, int _jni_value_);

    /** **/
    public int getslicePitch() {
         return _getslicePitch(this.object.pointer);
    }

    private native int _getslicePitch(long _pointer_);

    /** **/
    public void setslicePitch(int _jni_value_) {
        _setslicePitch(this.object.pointer, _jni_value_);
    }

    private native void _setslicePitch(long _pointer_, int _jni_value_);

    /** **/
    public int getleft() {
         return _getleft(this.object.pointer);
    }

    private native int _getleft(long _pointer_);

    /** **/
    public void setleft(int _jni_value_) {
        _setleft(this.object.pointer, _jni_value_);
    }

    private native void _setleft(long _pointer_, int _jni_value_);

    /** **/
    public int gettop() {
         return _gettop(this.object.pointer);
    }

    private native int _gettop(long _pointer_);

    /** **/
    public void settop(int _jni_value_) {
        _settop(this.object.pointer, _jni_value_);
    }

    private native void _settop(long _pointer_, int _jni_value_);

    /** **/
    public int getright() {
         return _getright(this.object.pointer);
    }

    private native int _getright(long _pointer_);

    /** **/
    public void setright(int _jni_value_) {
        _setright(this.object.pointer, _jni_value_);
    }

    private native void _setright(long _pointer_, int _jni_value_);

    /** **/
    public int getbottom() {
         return _getbottom(this.object.pointer);
    }

    private native int _getbottom(long _pointer_);

    /** **/
    public void setbottom(int _jni_value_) {
        _setbottom(this.object.pointer, _jni_value_);
    }

    private native void _setbottom(long _pointer_, int _jni_value_);

    /** **/
    public int getfront() {
         return _getfront(this.object.pointer);
    }

    private native int _getfront(long _pointer_);

    /** **/
    public void setfront(int _jni_value_) {
        _setfront(this.object.pointer, _jni_value_);
    }

    private native void _setfront(long _pointer_, int _jni_value_);

    /** **/
    public int getback() {
         return _getback(this.object.pointer);
    }

    private native int _getback(long _pointer_);

    /** **/
    public void setback(int _jni_value_) {
        _setback(this.object.pointer, _jni_value_);
    }

    private native void _setback(long _pointer_, int _jni_value_);

}
