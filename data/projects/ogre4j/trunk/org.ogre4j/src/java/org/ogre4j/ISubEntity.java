/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ISubEntity extends INativeObject, org.ogre4j.IRenderable, org.ogre4j.ISceneObjAllocatedObject {

    /** 
    Gets the name of the  in use by this instance. **/
    public String getMaterialName();

    /** 
    Sets the name of the  to be used. **/
    public void setMaterialName(String name);

    /** 
    Tells this  whether to be visible or not. **/
    public void setVisible(boolean visible);

    /** 
    Returns whether or not this  is supposed to be visible. **/
    public boolean isVisible();

    /** 
    Accessor method to read mesh data. **/
    public org.ogre4j.ISubMesh getSubMesh();

    /** 
    Accessor to get parent **/
    public org.ogre4j.IEntity getParent();

    /** 
    Overridden - see . **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** 
    Overridden - see . **/
    public org.ogre4j.ITechnique getTechnique();

    /** 
    Overridden - see . **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op);

    /** 
    Overridden - see . **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** 
    Overridden - see . **/
    public int getNumWorldTransforms();

    /** 
    Overridden, see **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam);

    /** 
    **/
    public org.ogre4j.ILightList getLights();

    /** 
    **/
    public boolean getCastsShadows();

    /** 
    Advanced method to get the temporarily blended vertex information for entities which are software skinned. **/
    public org.ogre4j.IVertexData _getSkelAnimVertexData();

    /** 
    Advanced method to get the temporarily blended software morph vertex information **/
    public org.ogre4j.IVertexData _getSoftwareVertexAnimVertexData();

    /** 
    Advanced method to get the hardware morph vertex information **/
    public org.ogre4j.IVertexData _getHardwareVertexAnimVertexData();

    /** 
    Advanced method to get the temp buffer information for software skeletal animation. **/
    public org.ogre4j.ITempBlendedBufferInfo _getSkelAnimTempBufferInfo();

    /** 
    Advanced method to get the temp buffer information for software morph animation. **/
    public org.ogre4j.ITempBlendedBufferInfo _getVertexAnimTempBufferInfo();

    /** **/
    public org.ogre4j.IVertexData getVertexDataForBinding();

    /** 
    Mark all vertex data as so far unanimated. **/
    public void _markBuffersUnusedForAnimation();

    /** 
    Mark all vertex data as animated. **/
    public void _markBuffersUsedForAnimation();

    /** 
    Are buffers already marked as vertex animated? **/
    public boolean _getBuffersMarkedForAnimation();

    /** 
    Internal method to copy original vertex data to the morph structures should there be no active animation in use. **/
    public void _restoreBuffersForUnusedAnimation(boolean hardwareAnimation);

    /** 
    Overridden from  to provide some custom behaviour. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params);

    /** 
    Invalidate the camera distance cache **/
    public void _invalidateCameraCache();

}
