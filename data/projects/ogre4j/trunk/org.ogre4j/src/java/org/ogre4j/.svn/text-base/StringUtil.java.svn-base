/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class StringUtil extends org.xbig.base.NativeObject implements org.ogre4j.IStringUtil {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public StringUtil(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected StringUtil(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public StringUtil(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Removes any whitespace characters, be it standard space or TABs and so on. **/
    public static void trim(StringPointer str, boolean left, boolean right) {
        _trim__Stringrbvbv( str.object.pointer,  left,  right);
    }

    private native static void _trim__Stringrbvbv(long str, boolean left, boolean right);

    /** 
    Returns a StringVector that contains all the substrings delimited by the characters in the passed  argument. **/
    public static void split(org.std.Ivector< String > returnValue, String str, String delims, long maxSplits) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_split__StringRStringRIv( str,  delims,  maxSplits)), false);
    }

    private native static long _split__StringRStringRIv(String str, String delims, long maxSplits);

    /** 
    Upper-cases all the characters in the string. **/
    public static void toLowerCase(StringPointer str) {
        _toLowerCase__Stringr( str.object.pointer);
    }

    private native static void _toLowerCase__Stringr(long str);

    /** 
    Lower-cases all the characters in the string. **/
    public static void toUpperCase(StringPointer str) {
        _toUpperCase__Stringr( str.object.pointer);
    }

    private native static void _toUpperCase__Stringr(long str);

    /** 
    Returns whether the string begins with the pattern passed in. **/
    public static boolean startsWith(String str, String pattern, boolean lowerCase) {
         return _startsWith__StringRStringRbv( str,  pattern,  lowerCase);
    }

    private native static boolean _startsWith__StringRStringRbv(String str, String pattern, boolean lowerCase);

    /** 
    Returns whether the string ends with the pattern passed in. **/
    public static boolean endsWith(String str, String pattern, boolean lowerCase) {
         return _endsWith__StringRStringRbv( str,  pattern,  lowerCase);
    }

    private native static boolean _endsWith__StringRStringRbv(String str, String pattern, boolean lowerCase);

    /** 
    Method for standardising paths - use forward slashes only, end with slash. **/
    public static String standardisePath(String init) {
         return _standardisePath__StringR( init);
    }

    private native static String _standardisePath__StringR(String init);

    /** 
    Method for splitting a fully qualified filename into the base name and path. **/
    public static void splitFilename(String qualifiedName, StringPointer outBasename, StringPointer outPath) {
        _splitFilename__StringRStringrStringr( qualifiedName,  outBasename.object.pointer,  outPath.object.pointer);
    }

    private native static void _splitFilename__StringRStringrStringr(String qualifiedName, long outBasename, long outPath);

    /** 
    Method for splitting a fully qualified filename into the base name, extension and path. **/
    public static void splitFullFilename(String qualifiedName, StringPointer outBasename, StringPointer outExtention, StringPointer outPath) {
        _splitFullFilename__Ogre_StringROgre_StringrOgre_StringrOgre_Stringr( qualifiedName,  outBasename.object.pointer,  outExtention.object.pointer,  outPath.object.pointer);
    }

    private native static void _splitFullFilename__Ogre_StringROgre_StringrOgre_StringrOgre_Stringr(String qualifiedName, long outBasename, long outExtention, long outPath);

    /** 
    Method for splitting a filename into the base name and extension. **/
    public static void splitBaseFilename(String fullName, StringPointer outBasename, StringPointer outExtention) {
        _splitBaseFilename__Ogre_StringROgre_StringrOgre_Stringr( fullName,  outBasename.object.pointer,  outExtention.object.pointer);
    }

    private native static void _splitBaseFilename__Ogre_StringROgre_StringrOgre_Stringr(String fullName, long outBasename, long outExtention);

    /** 
    Simple pattern-matching routine allowing a wildcard pattern. **/
    public static boolean match(String str, String pattern, boolean caseSensitive) {
         return _match__StringRStringRbv( str,  pattern,  caseSensitive);
    }

    private native static boolean _match__StringRStringRbv(String str, String pattern, boolean caseSensitive);

    /** **/
    public StringUtil() {
         super( new org.xbig.base.InstancePointer(__createStringUtil()), false);
    }

    private native static long __createStringUtil();

    /** **/
    public static String getBLANK() {
         return _getBLANK();
    }

    private native static String _getBLANK();

}
