/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IParticleSystemManager extends INativeObject, org.ogre4j.IScriptLoader, org.ogre4j.ISceneObjAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.IParticleSystemManager > {

public interface IParticleTemplateMap extends INativeObject, org.std.Imap< String, org.ogre4j.IParticleSystem > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IParticleSystem get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystem value);

}
public interface IParticleAffectorFactoryMap extends INativeObject, org.std.Imap< String, org.ogre4j.IParticleAffectorFactory > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IParticleAffectorFactory get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleAffectorFactory value);

}
public interface IParticleEmitterFactoryMap extends INativeObject, org.std.Imap< String, org.ogre4j.IParticleEmitterFactory > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IParticleEmitterFactory get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleEmitterFactory value);

}
public interface IParticleSystemRendererFactoryMap extends INativeObject, org.std.Imap< String, org.ogre4j.IParticleSystemRendererFactory > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IParticleSystemRendererFactory get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystemRendererFactory value);

}
public interface IParticleAffectorFactoryIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IParticleAffectorFactory getNext();

    /** **/
    public org.ogre4j.IParticleAffectorFactory peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleAffectorFactory> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IParticleEmitterFactoryIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IParticleEmitterFactory getNext();

    /** **/
    public org.ogre4j.IParticleEmitterFactory peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleEmitterFactory> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IParticleRendererFactoryIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IParticleSystemManager.IParticleSystemRendererFactoryMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IParticleSystemRendererFactory getNext();

    /** **/
    public org.ogre4j.IParticleSystemRendererFactory peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleRendererFactoryIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleRendererFactoryIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleSystemRendererFactory> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IParticleSystemTemplateIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IParticleSystemManager.IParticleTemplateMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IParticleSystem getNext();

    /** **/
    public org.ogre4j.IParticleSystem peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleSystemTemplateIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleSystemTemplateIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleSystem> peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** 
    Adds a new 'factory' object for emitters to the list of available emitter types. **/
    public void addEmitterFactory(org.ogre4j.IParticleEmitterFactory factory);

    /** 
    Adds a new 'factory' object for affectors to the list of available affector types. **/
    public void addAffectorFactory(org.ogre4j.IParticleAffectorFactory factory);

    /** 
    Registers a factory class for creating  instances. **/
    public void addRendererFactory(org.ogre4j.IParticleSystemRendererFactory factory);

    /** 
    Adds a new particle system template to the list of available templates. **/
    public void addTemplate(String name, org.ogre4j.IParticleSystem sysTemplate);

    /** 
    Removes a specified template from the . **/
    public void removeTemplate(String name, boolean deleteTemplate);

    /** 
    Removes a specified template from the . **/
    public void removeAllTemplates(boolean deleteTemplate);

    /** 
    Create a new particle system template. **/
    public org.ogre4j.IParticleSystem createTemplate(String name, String resourceGroup);

    /** 
    Retrieves a particle system template for possible modification. **/
    public org.ogre4j.IParticleSystem getTemplate(String name);

    /** 
    Internal method for creating a new emitter from a factory. **/
    public org.ogre4j.IParticleEmitter _createEmitter(String emitterType, org.ogre4j.IParticleSystem psys);

    /** 
    Internal method for destroying an emitter. **/
    public void _destroyEmitter(org.ogre4j.IParticleEmitter emitter);

    /** 
    Internal method for creating a new affector from a factory. **/
    public org.ogre4j.IParticleAffector _createAffector(String affectorType, org.ogre4j.IParticleSystem psys);

    /** 
    Internal method for destroying an affector. **/
    public void _destroyAffector(org.ogre4j.IParticleAffector affector);

    /** 
    Internal method for creating a new renderer from a factory. **/
    public org.ogre4j.IParticleSystemRenderer _createRenderer(String rendererType);

    /** 
    Internal method for destroying a renderer. **/
    public void _destroyRenderer(org.ogre4j.IParticleSystemRenderer renderer);

    /** 
    Init method to be called by OGRE system. **/
    public void _initialise();

    /** **/
    public org.ogre4j.IStringVector getScriptPatterns();

    /** **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream, String groupName);

    /** **/
    public float getLoadingOrder();

    /** 
    Return an iterator over the affector factories currently registered **/
    public void getAffectorFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryIterator returnValue);

    /** 
    Return an iterator over the emitter factories currently registered **/
    public void getEmitterFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryIterator returnValue);

    /** 
    Return an iterator over the renderer factories currently registered **/
    public void getRendererFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleRendererFactoryIterator returnValue);

    /** 
    Gets an iterator over the list of particle system templates. **/
    public void getTemplateIterator(org.ogre4j.IParticleSystemManager.IParticleSystemTemplateIterator returnValue);

    /** 
    Get an instance of  (internal use). **/
    public org.ogre4j.IParticleSystemFactory _getFactory();

}
