/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class EdgeListBuilder extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder {
static { System.loadLibrary("ogre4j");}
protected static class CommonVertex extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.ICommonVertex {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CommonVertex(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CommonVertex(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CommonVertex(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CommonVertex() {
         super( new org.xbig.base.InstancePointer(__createCommonVertex()), false);
    }

    private native static long __createCommonVertex();

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getposition(this.object.pointer)), false);
    }

    private native long _getposition(long _pointer_);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_) {
        _setposition(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setposition(long _pointer_, long _jni_value_);

    /** **/
    public int getindex() {
         return _getindex(this.object.pointer);
    }

    private native int _getindex(long _pointer_);

    /** **/
    public void setindex(int _jni_value_) {
        _setindex(this.object.pointer, _jni_value_);
    }

    private native void _setindex(long _pointer_, int _jni_value_);

    /** **/
    public int getvertexSet() {
         return _getvertexSet(this.object.pointer);
    }

    private native int _getvertexSet(long _pointer_);

    /** **/
    public void setvertexSet(int _jni_value_) {
        _setvertexSet(this.object.pointer, _jni_value_);
    }

    private native void _setvertexSet(long _pointer_, int _jni_value_);

    /** **/
    public int getindexSet() {
         return _getindexSet(this.object.pointer);
    }

    private native int _getindexSet(long _pointer_);

    /** **/
    public void setindexSet(int _jni_value_) {
        _setindexSet(this.object.pointer, _jni_value_);
    }

    private native void _setindexSet(long _pointer_, int _jni_value_);

    /** **/
    public int getoriginalIndex() {
         return _getoriginalIndex(this.object.pointer);
    }

    private native int _getoriginalIndex(long _pointer_);

    /** **/
    public void setoriginalIndex(int _jni_value_) {
        _setoriginalIndex(this.object.pointer, _jni_value_);
    }

    private native void _setoriginalIndex(long _pointer_, int _jni_value_);

}
protected static class Geometry extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.IGeometry {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Geometry(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Geometry(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Geometry(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Geometry() {
         super( new org.xbig.base.InstancePointer(__createGeometry()), false);
    }

    private native static long __createGeometry();

    /** **/
    public int getvertexSet() {
         return _getvertexSet(this.object.pointer);
    }

    private native int _getvertexSet(long _pointer_);

    /** **/
    public void setvertexSet(int _jni_value_) {
        _setvertexSet(this.object.pointer, _jni_value_);
    }

    private native void _setvertexSet(long _pointer_, int _jni_value_);

    /** **/
    public int getindexSet() {
         return _getindexSet(this.object.pointer);
    }

    private native int _getindexSet(long _pointer_);

    /** **/
    public void setindexSet(int _jni_value_) {
        _setindexSet(this.object.pointer, _jni_value_);
    }

    private native void _setindexSet(long _pointer_, int _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData() {
         return new org.ogre4j.IndexData(new InstancePointer(_getindexData(this.object.pointer)));
    }

    private native long _getindexData(long _pointer_);

    /** **/
    public org.ogre4j.RenderOperation.OperationType getopType() {
         return org.ogre4j.RenderOperation.OperationType.toEnum(_getopType(this.object.pointer));
    }

    private native int _getopType(long _pointer_);

    /** **/
    public void setopType(org.ogre4j.RenderOperation.OperationType _jni_value_) {
        _setopType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setopType(long _pointer_, int _jni_value_);

}
protected static class geometryLess extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.IgeometryLess {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public geometryLess(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected geometryLess(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public geometryLess(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public boolean operatorFunctionCall(org.ogre4j.IEdgeListBuilder.IGeometry a, org.ogre4j.IEdgeListBuilder.IGeometry b) {
         return _operatorFunctionCall__GeometryRGeometryR_const(this.object.pointer, a.getInstancePointer().pointer,  b.getInstancePointer().pointer);
    }

    private native boolean _operatorFunctionCall__GeometryRGeometryR_const(long _pointer_, long a, long b);

    /** **/
    public geometryLess() {
         super( new org.xbig.base.InstancePointer(__creategeometryLess()), false);
    }

    private native static long __creategeometryLess();

}
protected static class vectorLess extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.IvectorLess {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public vectorLess(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected vectorLess(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public vectorLess(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public boolean operatorFunctionCall(org.ogre4j.IVector3 a, org.ogre4j.IVector3 b) {
         return _operatorFunctionCall__Vector3RVector3R_const(this.object.pointer, a.getInstancePointer().pointer,  b.getInstancePointer().pointer);
    }

    private native boolean _operatorFunctionCall__Vector3RVector3R_const(long _pointer_, long a, long b);

    /** **/
    public vectorLess() {
         super( new org.xbig.base.InstancePointer(__createvectorLess()), false);
    }

    private native static long __createvectorLess();

}
protected static class VertexDataList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.IVertexDataList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexDataList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexDataList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexDataList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexDataList() {
         super( new org.xbig.base.InstancePointer(__createVertexDataList()), false);
    }

    private native static long __createVertexDataList();

    /** **/
    public void assign(int num, org.ogre4j.IVertexData val) {
        _assign__ivOgre_VertexDataP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_VertexDataP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IVertexData at(int loc) {
         return new org.ogre4j.VertexData(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IVertexData back() {
         return new org.ogre4j.VertexData(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IVertexData front() {
         return new org.ogre4j.VertexData(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IVertexData val) {
        _push_back__Ogre_VertexDataP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_VertexDataP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class GeometryList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.IGeometryList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GeometryList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GeometryList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GeometryList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public GeometryList() {
         super( new org.xbig.base.InstancePointer(__createGeometryList()), false);
    }

    private native static long __createGeometryList();

    /** **/
    public void assign(int num, org.ogre4j.IEdgeListBuilder.IGeometry val) {
        _assign__ivOgre_EdgeListBuilder_GeometryR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_EdgeListBuilder_GeometryR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IEdgeListBuilder.IGeometry at(int loc) {
         return new org.ogre4j.EdgeListBuilder.Geometry(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IEdgeListBuilder.IGeometry back() {
         return new org.ogre4j.EdgeListBuilder.Geometry(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeListBuilder.IGeometry front() {
         return new org.ogre4j.EdgeListBuilder.Geometry(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IEdgeListBuilder.IGeometry val) {
        _push_back__Ogre_EdgeListBuilder_GeometryR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_EdgeListBuilder_GeometryR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class CommonVertexList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.ICommonVertexList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CommonVertexList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CommonVertexList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CommonVertexList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CommonVertexList() {
         super( new org.xbig.base.InstancePointer(__createCommonVertexList()), false);
    }

    private native static long __createCommonVertexList();

    /** **/
    public void assign(int num, org.ogre4j.IEdgeListBuilder.ICommonVertex val) {
        _assign__ivOgre_EdgeListBuilder_CommonVertexR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_EdgeListBuilder_CommonVertexR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IEdgeListBuilder.ICommonVertex at(int loc) {
         return new org.ogre4j.EdgeListBuilder.CommonVertex(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IEdgeListBuilder.ICommonVertex back() {
         return new org.ogre4j.EdgeListBuilder.CommonVertex(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeListBuilder.ICommonVertex front() {
         return new org.ogre4j.EdgeListBuilder.CommonVertex(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IEdgeListBuilder.ICommonVertex val) {
        _push_back__Ogre_EdgeListBuilder_CommonVertexR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_EdgeListBuilder_CommonVertexR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class CommonVertexMap extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.ICommonVertexMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CommonVertexMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CommonVertexMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CommonVertexMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CommonVertexMap() {
         super( new org.xbig.base.InstancePointer(__createCommonVertexMap()), false);
    }

    private native static long __createCommonVertexMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IVector3 key) {
         return _count__Ogre_Vector3R(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_Vector3R(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IVector3 key) {
         return _erase__Ogre_Vector3R(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_Vector3R(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public IntegerPointer get(org.ogre4j.IVector3 key) {
         return new IntegerPointer(new InstancePointer(_get__Ogre_Vector3R(this.object.pointer, key.getInstancePointer().pointer)));
    }

    private native long _get__Ogre_Vector3R(long _pointer_, long key);

    /** **/
    public void insert(org.ogre4j.IVector3 key, IntegerPointer value) {
        _insert__Ogre_Vector3Rir(this.object.pointer, key.getInstancePointer().pointer,  value.object.pointer);
    }

    private native void _insert__Ogre_Vector3Rir(long _pointer_, long key, long value);

}
protected static class EdgeMap extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeListBuilder.IEdgeMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EdgeMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EdgeMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EdgeMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EdgeMap() {
         super( new org.xbig.base.InstancePointer(__createEdgeMap()), false);
    }

    private native static long __createEdgeMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.std.Ipair< Integer, Integer > key) {
         return _count__std_pair__size_t__size_t__R(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__std_pair__size_t__size_t__R(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.std.Ipair< Integer, Integer > key) {
         return _erase__std_pair__size_t__size_t__R(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__std_pair__size_t__size_t__R(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EdgeListBuilder(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EdgeListBuilder(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EdgeListBuilder(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EdgeListBuilder() {
         super( new org.xbig.base.InstancePointer(__createEdgeListBuilder()), false);
    }

    private native static long __createEdgeListBuilder();

    /** 
    Add a set of vertex geometry data to the edge builder. **/
    public void addVertexData(org.ogre4j.IVertexData vertexData) {
        _addVertexData__VertexDataP(this.object.pointer, vertexData.getInstancePointer().pointer);
    }

    private native void _addVertexData__VertexDataP(long _pointer_, long vertexData);

    /** 
    Add a set of index geometry data to the edge builder. **/
    public void addIndexData(org.ogre4j.IIndexData indexData, int vertexSet, org.ogre4j.RenderOperation.OperationType opType) {
        _addIndexData__IndexDataPivRenderOperation_OperationTypev(this.object.pointer, indexData.getInstancePointer().pointer,  vertexSet,  opType.getValue());
    }

    private native void _addIndexData__IndexDataPivRenderOperation_OperationTypev(long _pointer_, long indexData, int vertexSet, int opType);

    /** 
    Builds the edge information based on the information built up so far. **/
    public org.ogre4j.IEdgeData build() {
         return new org.ogre4j.EdgeData(new InstancePointer(_build(this.object.pointer)));
    }

    private native long _build(long _pointer_);

    /** **/
    public void log(org.ogre4j.ILog l) {
        _log__Logp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _log__Logp(long _pointer_, long l);

}
