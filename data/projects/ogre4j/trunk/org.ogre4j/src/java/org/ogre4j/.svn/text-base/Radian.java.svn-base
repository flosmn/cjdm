/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Radian extends org.xbig.base.NativeObject implements org.ogre4j.IRadian {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Radian(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Radian(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Radian(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Radian(float r) {
         super( new org.xbig.base.InstancePointer(__createRadian__Realv( r)), false);
    }

    private native static long __createRadian__Realv(float r);

    /** **/
    public Radian(org.ogre4j.IDegree d) {
         super( new org.xbig.base.InstancePointer(__createRadian__DegreeR( d.getInstancePointer().pointer)), false);
    }

    private native static long __createRadian__DegreeR(long d);

    /** **/
    public org.ogre4j.IRadian operatorAssignment(float f) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorAssignment__RealR(this.object.pointer, f)));
    }

    private native long _operatorAssignment__RealR(long _pointer_, float f);

    /** **/
    public org.ogre4j.IRadian operatorAssignment(org.ogre4j.IRadian r) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorAssignment__RadianR(this.object.pointer, r.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__RadianR(long _pointer_, long r);

    /** **/
    public org.ogre4j.IRadian operatorAssignment(org.ogre4j.IDegree d) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorAssignment__DegreeR(this.object.pointer, d.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__DegreeR(long _pointer_, long d);

    /** **/
    public float valueDegrees() {
         return _valueDegrees_const(this.object.pointer);
    }

    private native float _valueDegrees_const(long _pointer_);

    /** **/
    public float valueRadians() {
         return _valueRadians_const(this.object.pointer);
    }

    private native float _valueRadians_const(long _pointer_);

    /** **/
    public float valueAngleUnits() {
         return _valueAngleUnits_const(this.object.pointer);
    }

    private native float _valueAngleUnits_const(long _pointer_);

    /** **/
    public org.ogre4j.IRadian operatorAddition() {
         return new org.ogre4j.Radian(new InstancePointer(_operatorAddition_const(this.object.pointer)));
    }

    private native long _operatorAddition_const(long _pointer_);

    /** **/
    public void operatorAddition(org.ogre4j.IRadian returnValue, org.ogre4j.IRadian r) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorAddition__RadianR_const(this.object.pointer, r.getInstancePointer().pointer)), false);
    }

    private native long _operatorAddition__RadianR_const(long _pointer_, long r);

    /** **/
    public void operatorAddition(org.ogre4j.IRadian returnValue, org.ogre4j.IDegree d) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorAddition__DegreeR_const(this.object.pointer, d.getInstancePointer().pointer)), false);
    }

    private native long _operatorAddition__DegreeR_const(long _pointer_, long d);

    /** **/
    public org.ogre4j.IRadian operatorIncrementAndAssign(org.ogre4j.IRadian r) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorIncrementAndAssign__RadianR(this.object.pointer, r.getInstancePointer().pointer)));
    }

    private native long _operatorIncrementAndAssign__RadianR(long _pointer_, long r);

    /** **/
    public org.ogre4j.IRadian operatorIncrementAndAssign(org.ogre4j.IDegree d) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorIncrementAndAssign__DegreeR(this.object.pointer, d.getInstancePointer().pointer)));
    }

    private native long _operatorIncrementAndAssign__DegreeR(long _pointer_, long d);

    /** **/
    public void operatorSubtraction(org.ogre4j.IRadian returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction_const(this.object.pointer)), false);
    }

    private native long _operatorSubtraction_const(long _pointer_);

    /** **/
    public void operatorSubtraction(org.ogre4j.IRadian returnValue, org.ogre4j.IRadian r) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction__RadianR_const(this.object.pointer, r.getInstancePointer().pointer)), false);
    }

    private native long _operatorSubtraction__RadianR_const(long _pointer_, long r);

    /** **/
    public void operatorSubtraction(org.ogre4j.IRadian returnValue, org.ogre4j.IDegree d) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction__DegreeR_const(this.object.pointer, d.getInstancePointer().pointer)), false);
    }

    private native long _operatorSubtraction__DegreeR_const(long _pointer_, long d);

    /** **/
    public org.ogre4j.IRadian operatorDecrementAndAssign(org.ogre4j.IRadian r) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorDecrementAndAssign__RadianR(this.object.pointer, r.getInstancePointer().pointer)));
    }

    private native long _operatorDecrementAndAssign__RadianR(long _pointer_, long r);

    /** **/
    public org.ogre4j.IRadian operatorDecrementAndAssign(org.ogre4j.IDegree d) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorDecrementAndAssign__DegreeR(this.object.pointer, d.getInstancePointer().pointer)));
    }

    private native long _operatorDecrementAndAssign__DegreeR(long _pointer_, long d);

    /** **/
    public void operatorMultiplication(org.ogre4j.IRadian returnValue, float f) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Realv_const(this.object.pointer, f)), false);
    }

    private native long _operatorMultiplication__Realv_const(long _pointer_, float f);

    /** **/
    public void operatorMultiplication(org.ogre4j.IRadian returnValue, org.ogre4j.IRadian f) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__RadianR_const(this.object.pointer, f.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__RadianR_const(long _pointer_, long f);

    /** **/
    public org.ogre4j.IRadian operatorMultiplyAndAssign(float f) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorMultiplyAndAssign__Realv(this.object.pointer, f)));
    }

    private native long _operatorMultiplyAndAssign__Realv(long _pointer_, float f);

    /** **/
    public void operatorDivision(org.ogre4j.IRadian returnValue, float f) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorDivision__Realv_const(this.object.pointer, f)), false);
    }

    private native long _operatorDivision__Realv_const(long _pointer_, float f);

    /** **/
    public org.ogre4j.IRadian operatorDivideAndAssign(float f) {
         return new org.ogre4j.Radian(new InstancePointer(_operatorDivideAndAssign__Realv(this.object.pointer, f)));
    }

    private native long _operatorDivideAndAssign__Realv(long _pointer_, float f);

    /** **/
    public boolean operatorLessThan(org.ogre4j.IRadian r) {
         return _operatorLessThan__RadianR_const(this.object.pointer, r.getInstancePointer().pointer);
    }

    private native boolean _operatorLessThan__RadianR_const(long _pointer_, long r);

    /** **/
    public boolean operatorLessThanOrEqual(org.ogre4j.IRadian r) {
         return _operatorLessThanOrEqual__RadianR_const(this.object.pointer, r.getInstancePointer().pointer);
    }

    private native boolean _operatorLessThanOrEqual__RadianR_const(long _pointer_, long r);

    /** **/
    public boolean operatorEqual(org.ogre4j.IRadian r) {
         return _operatorEqual__RadianR_const(this.object.pointer, r.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__RadianR_const(long _pointer_, long r);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IRadian r) {
         return _operatorNotEqual__RadianR_const(this.object.pointer, r.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__RadianR_const(long _pointer_, long r);

    /** **/
    public boolean operatorGreaterThanOrEqual(org.ogre4j.IRadian r) {
         return _operatorGreaterThanOrEqual__RadianR_const(this.object.pointer, r.getInstancePointer().pointer);
    }

    private native boolean _operatorGreaterThanOrEqual__RadianR_const(long _pointer_, long r);

    /** **/
    public boolean operatorGreaterThan(org.ogre4j.IRadian r) {
         return _operatorGreaterThan__RadianR_const(this.object.pointer, r.getInstancePointer().pointer);
    }

    private native boolean _operatorGreaterThan__RadianR_const(long _pointer_, long r);

}
