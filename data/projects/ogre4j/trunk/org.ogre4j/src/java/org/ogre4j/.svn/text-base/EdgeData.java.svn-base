/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class EdgeData extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData {
static { System.loadLibrary("ogre4j");}
public static class Edge extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.IEdge {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Edge(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Edge(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Edge(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Edge() {
         super( new org.xbig.base.InstancePointer(__createEdge()), false);
    }

    private native static long __createEdge();

























    /** **/
    public boolean getdegenerate() {
         return _getdegenerate(this.object.pointer);
    }

    private native boolean _getdegenerate(long _pointer_);

    /** **/
    public void setdegenerate(boolean _jni_value_) {
        _setdegenerate(this.object.pointer, _jni_value_);
    }

    private native void _setdegenerate(long _pointer_, boolean _jni_value_);

}
public static class EdgeGroup extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.IEdgeGroup {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EdgeGroup(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EdgeGroup(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EdgeGroup(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EdgeGroup() {
         super( new org.xbig.base.InstancePointer(__createEdgeGroup()), false);
    }

    private native static long __createEdgeGroup();

    /** **/
    public int getvertexSet() {
         return _getvertexSet(this.object.pointer);
    }

    private native int _getvertexSet(long _pointer_);

    /** **/
    public void setvertexSet(int _jni_value_) {
        _setvertexSet(this.object.pointer, _jni_value_);
    }

    private native void _setvertexSet(long _pointer_, int _jni_value_);

    /** **/
    public org.ogre4j.IVertexData getvertexData() {
         return new org.ogre4j.VertexData(new InstancePointer(_getvertexData(this.object.pointer)));
    }

    private native long _getvertexData(long _pointer_);

    /** **/
    public int gettriStart() {
         return _gettriStart(this.object.pointer);
    }

    private native int _gettriStart(long _pointer_);

    /** **/
    public void settriStart(int _jni_value_) {
        _settriStart(this.object.pointer, _jni_value_);
    }

    private native void _settriStart(long _pointer_, int _jni_value_);

    /** **/
    public int gettriCount() {
         return _gettriCount(this.object.pointer);
    }

    private native int _gettriCount(long _pointer_);

    /** **/
    public void settriCount(int _jni_value_) {
        _settriCount(this.object.pointer, _jni_value_);
    }

    private native void _settriCount(long _pointer_, int _jni_value_);

    /** **/
    public void getedges(org.ogre4j.IEdgeData.IEdgeList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getedges(this.object.pointer)), false);
    }

    private native long _getedges(long _pointer_);

    /** **/
    public void setedges(org.ogre4j.IEdgeData.IEdgeList _jni_value_) {
        _setedges(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setedges(long _pointer_, long _jni_value_);

}
public static class Triangle extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.ITriangle {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Triangle(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Triangle(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Triangle(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Triangle() {
         super( new org.xbig.base.InstancePointer(__createTriangle()), false);
    }

    private native static long __createTriangle();

    /** **/
    public int getindexSet() {
         return _getindexSet(this.object.pointer);
    }

    private native int _getindexSet(long _pointer_);

    /** **/
    public void setindexSet(int _jni_value_) {
        _setindexSet(this.object.pointer, _jni_value_);
    }

    private native void _setindexSet(long _pointer_, int _jni_value_);

    /** **/
    public int getvertexSet() {
         return _getvertexSet(this.object.pointer);
    }

    private native int _getvertexSet(long _pointer_);

    /** **/
    public void setvertexSet(int _jni_value_) {
        _setvertexSet(this.object.pointer, _jni_value_);
    }

    private native void _setvertexSet(long _pointer_, int _jni_value_);

















}
public static class TriangleFaceNormalList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.ITriangleFaceNormalList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TriangleFaceNormalList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TriangleFaceNormalList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TriangleFaceNormalList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TriangleFaceNormalList() {
         super( new org.xbig.base.InstancePointer(__createTriangleFaceNormalList()), false);
    }

    private native static long __createTriangleFaceNormalList();

    /** **/
    public void assign(int num, org.ogre4j.IVector4 val) {
        _assign__ivOgre_Vector4R(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_Vector4R(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IVector4 at(int loc) {
         return new org.ogre4j.Vector4(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IVector4 back() {
         return new org.ogre4j.Vector4(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IVector4 front() {
         return new org.ogre4j.Vector4(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IVector4 val) {
        _push_back__Ogre_Vector4R(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_Vector4R(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class TriangleLightFacingList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.ITriangleLightFacingList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TriangleLightFacingList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TriangleLightFacingList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TriangleLightFacingList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TriangleLightFacingList() {
         super( new org.xbig.base.InstancePointer(__createTriangleLightFacingList()), false);
    }

    private native static long __createTriangleLightFacingList();

    /** **/
    public void assign(int num, short val) {
        _assign__ivcR(this.object.pointer, num,  val);
    }

    private native void _assign__ivcR(long _pointer_, int num, short val);

    /** **/
    public BytePointer at(int loc) {
         return new BytePointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public BytePointer back() {
         return new BytePointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public BytePointer front() {
         return new BytePointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(short val) {
        _push_back__cR(this.object.pointer, val);
    }

    private native void _push_back__cR(long _pointer_, short val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class TriangleList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.ITriangleList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TriangleList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TriangleList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TriangleList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TriangleList() {
         super( new org.xbig.base.InstancePointer(__createTriangleList()), false);
    }

    private native static long __createTriangleList();

    /** **/
    public void assign(int num, org.ogre4j.IEdgeData.ITriangle val) {
        _assign__ivOgre_EdgeData_TriangleR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_EdgeData_TriangleR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IEdgeData.ITriangle at(int loc) {
         return new org.ogre4j.EdgeData.Triangle(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IEdgeData.ITriangle back() {
         return new org.ogre4j.EdgeData.Triangle(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData.ITriangle front() {
         return new org.ogre4j.EdgeData.Triangle(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IEdgeData.ITriangle val) {
        _push_back__Ogre_EdgeData_TriangleR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_EdgeData_TriangleR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class EdgeList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.IEdgeList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EdgeList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EdgeList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EdgeList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EdgeList() {
         super( new org.xbig.base.InstancePointer(__createEdgeList()), false);
    }

    private native static long __createEdgeList();

    /** **/
    public void assign(int num, org.ogre4j.IEdgeData.IEdge val) {
        _assign__ivOgre_EdgeData_EdgeR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_EdgeData_EdgeR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IEdgeData.IEdge at(int loc) {
         return new org.ogre4j.EdgeData.Edge(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IEdgeData.IEdge back() {
         return new org.ogre4j.EdgeData.Edge(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData.IEdge front() {
         return new org.ogre4j.EdgeData.Edge(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IEdgeData.IEdge val) {
        _push_back__Ogre_EdgeData_EdgeR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_EdgeData_EdgeR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class EdgeGroupList extends org.xbig.base.NativeObject implements org.ogre4j.IEdgeData.IEdgeGroupList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EdgeGroupList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EdgeGroupList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EdgeGroupList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EdgeGroupList() {
         super( new org.xbig.base.InstancePointer(__createEdgeGroupList()), false);
    }

    private native static long __createEdgeGroupList();

    /** **/
    public void assign(int num, org.ogre4j.IEdgeData.IEdgeGroup val) {
        _assign__ivOgre_EdgeData_EdgeGroupR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_EdgeData_EdgeGroupR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IEdgeData.IEdgeGroup at(int loc) {
         return new org.ogre4j.EdgeData.EdgeGroup(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IEdgeData.IEdgeGroup back() {
         return new org.ogre4j.EdgeData.EdgeGroup(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData.IEdgeGroup front() {
         return new org.ogre4j.EdgeData.EdgeGroup(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IEdgeData.IEdgeGroup val) {
        _push_back__Ogre_EdgeData_EdgeGroupR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_EdgeData_EdgeGroupR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EdgeData(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EdgeData(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EdgeData(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Calculate the light facing state of the triangles in this edge list **/
    public void updateTriangleLightFacing(org.ogre4j.IVector4 lightPos) {
        _updateTriangleLightFacing__Vector4R(this.object.pointer, lightPos.getInstancePointer().pointer);
    }

    private native void _updateTriangleLightFacing__Vector4R(long _pointer_, long lightPos);

    /** 
    Updates the face normals for this edge list based on (changed) position information, useful for animated objects. **/
    public void updateFaceNormals(int vertexSet, org.ogre4j.IHardwareVertexBufferSharedPtr positionBuffer) {
        _updateFaceNormals__ivHardwareVertexBufferSharedPtrR(this.object.pointer, vertexSet,  positionBuffer.getInstancePointer().pointer);
    }

    private native void _updateFaceNormals__ivHardwareVertexBufferSharedPtrR(long _pointer_, int vertexSet, long positionBuffer);

    /** **/
    public void log(org.ogre4j.ILog log) {
        _log__Logp(this.object.pointer, log.getInstancePointer().pointer);
    }

    private native void _log__Logp(long _pointer_, long log);

    /** **/
    public EdgeData() {
         super( new org.xbig.base.InstancePointer(__createEdgeData()), false);
    }

    private native static long __createEdgeData();

    /** **/
    public void gettriangles(org.ogre4j.IEdgeData.ITriangleList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_gettriangles(this.object.pointer)), false);
    }

    private native long _gettriangles(long _pointer_);

    /** **/
    public void settriangles(org.ogre4j.IEdgeData.ITriangleList _jni_value_) {
        _settriangles(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _settriangles(long _pointer_, long _jni_value_);

    /** **/
    public void gettriangleFaceNormals(org.ogre4j.IEdgeData.ITriangleFaceNormalList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_gettriangleFaceNormals(this.object.pointer)), false);
    }

    private native long _gettriangleFaceNormals(long _pointer_);

    /** **/
    public void settriangleFaceNormals(org.ogre4j.IEdgeData.ITriangleFaceNormalList _jni_value_) {
        _settriangleFaceNormals(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _settriangleFaceNormals(long _pointer_, long _jni_value_);

    /** **/
    public void gettriangleLightFacings(org.ogre4j.IEdgeData.ITriangleLightFacingList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_gettriangleLightFacings(this.object.pointer)), false);
    }

    private native long _gettriangleLightFacings(long _pointer_);

    /** **/
    public void settriangleLightFacings(org.ogre4j.IEdgeData.ITriangleLightFacingList _jni_value_) {
        _settriangleLightFacings(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _settriangleLightFacings(long _pointer_, long _jni_value_);

    /** **/
    public void getedgeGroups(org.ogre4j.IEdgeData.IEdgeGroupList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getedgeGroups(this.object.pointer)), false);
    }

    private native long _getedgeGroups(long _pointer_);

    /** **/
    public void setedgeGroups(org.ogre4j.IEdgeData.IEdgeGroupList _jni_value_) {
        _setedgeGroups(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setedgeGroups(long _pointer_, long _jni_value_);

    /** **/
    public boolean getisClosed() {
         return _getisClosed(this.object.pointer);
    }

    private native boolean _getisClosed(long _pointer_);

    /** **/
    public void setisClosed(boolean _jni_value_) {
        _setisClosed(this.object.pointer, _jni_value_);
    }

    private native void _setisClosed(long _pointer_, boolean _jni_value_);

}
