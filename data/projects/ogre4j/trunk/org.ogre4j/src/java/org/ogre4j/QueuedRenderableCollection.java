/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class QueuedRenderableCollection extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection {
static { System.loadLibrary("ogre4j");}
protected static class DepthSortDescendingLess extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection.IDepthSortDescendingLess {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public DepthSortDescendingLess(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected DepthSortDescendingLess(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public DepthSortDescendingLess(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public DepthSortDescendingLess(org.ogre4j.ICamera cam) {
         super( new org.xbig.base.InstancePointer(__createDepthSortDescendingLess__CameraP( cam.getInstancePointer().pointer)), false);
    }

    private native static long __createDepthSortDescendingLess__CameraP(long cam);

    /** **/
    public boolean operatorFunctionCall(org.ogre4j.IRenderablePass a, org.ogre4j.IRenderablePass b) {
         return _operatorFunctionCall__RenderablePassRRenderablePassR_const(this.object.pointer, a.getInstancePointer().pointer,  b.getInstancePointer().pointer);
    }

    private native boolean _operatorFunctionCall__RenderablePassRRenderablePassR_const(long _pointer_, long a, long b);

    /** **/
    public org.ogre4j.ICamera getcamera() {
         return new org.ogre4j.Camera(new InstancePointer(_getcamera(this.object.pointer)));
    }

    private native long _getcamera(long _pointer_);

}
protected static class PassGroupLess extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection.IPassGroupLess {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PassGroupLess(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PassGroupLess(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PassGroupLess(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public boolean operatorFunctionCall(org.ogre4j.IPass a, org.ogre4j.IPass b) {
         return _operatorFunctionCall__PassPPassP_const(this.object.pointer, a.getInstancePointer().pointer,  b.getInstancePointer().pointer);
    }

    private native boolean _operatorFunctionCall__PassPPassP_const(long _pointer_, long a, long b);

    /** **/
    public PassGroupLess() {
         super( new org.xbig.base.InstancePointer(__createPassGroupLess()), false);
    }

    private native static long __createPassGroupLess();

}
protected static class RadixSortFunctorDistance extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection.IRadixSortFunctorDistance {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RadixSortFunctorDistance(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RadixSortFunctorDistance(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RadixSortFunctorDistance(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RadixSortFunctorDistance(org.ogre4j.ICamera cam) {
         super( new org.xbig.base.InstancePointer(__createRadixSortFunctorDistance__CameraP( cam.getInstancePointer().pointer)), false);
    }

    private native static long __createRadixSortFunctorDistance__CameraP(long cam);

    /** **/
    public float operatorFunctionCall(org.ogre4j.IRenderablePass p) {
         return _operatorFunctionCall__RenderablePassR_const(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native float _operatorFunctionCall__RenderablePassR_const(long _pointer_, long p);

    /** **/
    public org.ogre4j.ICamera getcamera() {
         return new org.ogre4j.Camera(new InstancePointer(_getcamera(this.object.pointer)));
    }

    private native long _getcamera(long _pointer_);

}
protected static class RadixSortFunctorPass extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection.IRadixSortFunctorPass {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RadixSortFunctorPass(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RadixSortFunctorPass(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RadixSortFunctorPass(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public long operatorFunctionCall(org.ogre4j.IRenderablePass p) {
         return _operatorFunctionCall__RenderablePassR_const(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native long _operatorFunctionCall__RenderablePassR_const(long _pointer_, long p);

    /** **/
    public RadixSortFunctorPass() {
         super( new org.xbig.base.InstancePointer(__createRadixSortFunctorPass()), false);
    }

    private native static long __createRadixSortFunctorPass();

}
public enum OrganisationMode implements INativeEnum < OrganisationMode > {
    OM_PASS_GROUP(OrganisationModeHelper.ENUM_VALUES[0]),
    OM_SORT_DESCENDING(OrganisationModeHelper.ENUM_VALUES[1]),
    OM_SORT_ASCENDING(OrganisationModeHelper.ENUM_VALUES[2]);

    private int value;

    OrganisationMode(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public OrganisationMode getEnum(int val) {
        return toEnum(val);
    }

    public static final OrganisationMode toEnum(int retval) {
    if (retval ==OM_PASS_GROUP.value)
        return OrganisationMode.OM_PASS_GROUP;
    else if (retval ==OM_SORT_DESCENDING.value)
        return OrganisationMode.OM_SORT_DESCENDING;
    else if (retval ==OM_SORT_ASCENDING.value)
        return OrganisationMode.OM_SORT_ASCENDING;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class OrganisationModeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

protected static class RenderablePassList extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection.IRenderablePassList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderablePassList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderablePassList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderablePassList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderablePassList() {
         super( new org.xbig.base.InstancePointer(__createRenderablePassList()), false);
    }

    private native static long __createRenderablePassList();

    /** **/
    public void assign(int num, org.ogre4j.IRenderablePass val) {
        _assign__ivOgre_RenderablePassR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_RenderablePassR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IRenderablePass at(int loc) {
         return new org.ogre4j.RenderablePass(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IRenderablePass back() {
         return new org.ogre4j.RenderablePass(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IRenderablePass front() {
         return new org.ogre4j.RenderablePass(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IRenderablePass val) {
        _push_back__Ogre_RenderablePassR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_RenderablePassR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class RenderableList extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection.IRenderableList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderableList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderableList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderableList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderableList() {
         super( new org.xbig.base.InstancePointer(__createRenderableList()), false);
    }

    private native static long __createRenderableList();

    /** **/
    public void assign(int num, org.ogre4j.IRenderable val) {
        _assign__ivOgre_RenderableP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_RenderableP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IRenderable at(int loc) {
         return new org.ogre4j.Renderable(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IRenderable back() {
         return new org.ogre4j.Renderable(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IRenderable front() {
         return new org.ogre4j.Renderable(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IRenderable val) {
        _push_back__Ogre_RenderableP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_RenderableP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class PassGroupRenderableMap extends org.xbig.base.NativeObject implements org.ogre4j.IQueuedRenderableCollection.IPassGroupRenderableMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PassGroupRenderableMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PassGroupRenderableMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PassGroupRenderableMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PassGroupRenderableMap() {
         super( new org.xbig.base.InstancePointer(__createPassGroupRenderableMap()), false);
    }

    private native static long __createPassGroupRenderableMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IPass key) {
         return _count__Ogre_PassP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_PassP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IPass key) {
         return _erase__Ogre_PassP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_PassP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IQueuedRenderableCollection.IRenderableList get(org.ogre4j.IPass key) {
         return new org.ogre4j.QueuedRenderableCollection.RenderableList(new InstancePointer(_get__Ogre_PassP(this.object.pointer, key.getInstancePointer().pointer)));
    }

    private native long _get__Ogre_PassP(long _pointer_, long key);

    /** **/
    public void insert(org.ogre4j.IPass key, org.ogre4j.IQueuedRenderableCollection.IRenderableList value) {
        _insert__Ogre_PassPOgre_QueuedRenderableCollection_RenderableListp(this.object.pointer, key.getInstancePointer().pointer,  value.getInstancePointer().pointer);
    }

    private native void _insert__Ogre_PassPOgre_QueuedRenderableCollection_RenderableListp(long _pointer_, long key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QueuedRenderableCollection(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QueuedRenderableCollection(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QueuedRenderableCollection(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QueuedRenderableCollection() {
         super( new org.xbig.base.InstancePointer(__createQueuedRenderableCollection()), false);
    }

    private native static long __createQueuedRenderableCollection();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** 
    Remove the group entry (if any) for a given . **/
    public void removePassGroup(org.ogre4j.IPass p) {
        _removePassGroup__Passp(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native void _removePassGroup__Passp(long _pointer_, long p);

    /** 
    Reset the organisation modes required for this collection. **/
    public void resetOrganisationModes() {
        _resetOrganisationModes(this.object.pointer);
    }

    private native void _resetOrganisationModes(long _pointer_);

    /** 
    Add a required sorting / grouping mode to this collection when next used. **/
    public void addOrganisationMode(org.ogre4j.QueuedRenderableCollection.OrganisationMode om) {
        _addOrganisationMode__OrganisationModev(this.object.pointer, om.getValue());
    }

    private native void _addOrganisationMode__OrganisationModev(long _pointer_, int om);

    /** **/
    public void addRenderable(org.ogre4j.IPass pass, org.ogre4j.IRenderable rend) {
        _addRenderable__PasspRenderablep(this.object.pointer, pass.getInstancePointer().pointer,  rend.getInstancePointer().pointer);
    }

    private native void _addRenderable__PasspRenderablep(long _pointer_, long pass, long rend);

    /** 
    Perform any sorting that is required on this collection. **/
    public void sort(org.ogre4j.ICamera cam) {
        _sort__CameraP(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void _sort__CameraP(long _pointer_, long cam);

    /** 
    Accept a visitor over the collection contents. **/
    public void acceptVisitor(org.ogre4j.IQueuedRenderableVisitor visitor, org.ogre4j.QueuedRenderableCollection.OrganisationMode om) {
        _acceptVisitor__QueuedRenderableVisitorpOrganisationModev_const(this.object.pointer, visitor.getInstancePointer().pointer,  om.getValue());
    }

    private native void _acceptVisitor__QueuedRenderableVisitorpOrganisationModev_const(long _pointer_, long visitor, int om);

}
