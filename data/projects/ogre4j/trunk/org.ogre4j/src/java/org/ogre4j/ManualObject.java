/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ManualObject extends org.xbig.base.NativeObject implements org.ogre4j.IManualObject {
static { System.loadLibrary("ogre4j");}
public static class ManualObjectSection extends org.xbig.base.NativeObject implements org.ogre4j.IManualObject.IManualObjectSection {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ManualObjectSection(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ManualObjectSection(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ManualObjectSection(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ManualObjectSection(org.ogre4j.IManualObject parent, String materialName, org.ogre4j.RenderOperation.OperationType opType) {
         super( new org.xbig.base.InstancePointer(__createManualObjectSection__ManualObjectpStringRRenderOperation_OperationTypev( parent.getInstancePointer().pointer,  materialName,  opType.getValue())), false);
    }

    private native static long __createManualObjectSection__ManualObjectpStringRRenderOperation_OperationTypev(long parent, String materialName, int opType);

    /** **/
    public org.ogre4j.IRenderOperation getRenderOperation() {
         return new org.ogre4j.RenderOperation(new InstancePointer(_getRenderOperation(this.object.pointer)));
    }

    private native long _getRenderOperation(long _pointer_);

    /** **/
    public String getMaterialName() {
         return _getMaterialName_const(this.object.pointer);
    }

    private native String _getMaterialName_const(long _pointer_);

    /** **/
    public void setMaterialName(String name) {
        _setMaterialName__StringR(this.object.pointer, name);
    }

    private native void _setMaterialName__StringR(long _pointer_, String name);

    /** **/
    public void set32BitIndices(boolean n32) {
        _set32BitIndices__bv(this.object.pointer, n32);
    }

    private native void _set32BitIndices__bv(long _pointer_, boolean n32);

    /** **/
    public boolean get32BitIndices() {
         return _get32BitIndices_const(this.object.pointer);
    }

    private native boolean _get32BitIndices_const(long _pointer_);

    /** 
    
. **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** 
    
. **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op) {
        _getRenderOperation__RenderOperationr(this.object.pointer, op.getInstancePointer().pointer);
    }

    private native void _getRenderOperation__RenderOperationr(long _pointer_, long op);

    /** 
    
. **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform) {
        _getWorldTransforms__Matrix4p_const(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void _getWorldTransforms__Matrix4p_const(long _pointer_, long xform);

//    /** 
//    
//. **/
//    public float getSquaredViewDepth(org.ogre4j.ICamera a1) {
//         return _getSquaredViewDepth__Ogre_CameraP_const(this.object.pointer, a1.getInstancePointer().pointer);
//    }
//
//    private native float _getSquaredViewDepth__Ogre_CameraP_const(long _pointer_, long a1);

    /** 
    
. **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** 
    Retrieves a pointer to the  this renderable object uses. **/
    public org.ogre4j.ITechnique getTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getTechnique_const(this.object.pointer)));
    }

    private native long _getTechnique_const(long _pointer_);

    /** 
    Called just prior to the  being rendered. **/
    public boolean preRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
         return _preRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native boolean _preRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Called immediately after the  has been rendered. **/
    public void postRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
        _postRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native void _postRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Returns the number of world transform matrices this renderable requires. **/
    public int getNumWorldTransforms() {
         return _getNumWorldTransforms_const(this.object.pointer);
    }

    private native int _getNumWorldTransforms_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Returns the camera-relative squared depth of this renderable. **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam) {
         return _getSquaredViewDepth__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native float _getSquaredViewDepth__CameraP_const(long _pointer_, long cam);

    /** 
    Method which reports whether this renderable would normally cast a shadow. **/
    public boolean getCastsShadows() {
         return _getCastsShadows_const(this.object.pointer);
    }

    private native boolean _getCastsShadows_const(long _pointer_);

    /** 
    Sets a custom parameter for this , which may be used to drive calculations for this specific , like GPU program parameters. **/
    public void setCustomParameter(int index, org.ogre4j.IVector4 value) {
        _setCustomParameter__ivVector4R(this.object.pointer, index,  value.getInstancePointer().pointer);
    }

    private native void _setCustomParameter__ivVector4R(long _pointer_, int index, long value);

    /** 
    Gets the custom value associated with this  at the given index. **/
    public org.ogre4j.IVector4 getCustomParameter(int index) {
         return new org.ogre4j.Vector4(new InstancePointer(_getCustomParameter__iv_const(this.object.pointer, index)));
    }

    private native long _getCustomParameter__iv_const(long _pointer_, int index);

    /** 
    Update a custom  constant which is derived from information only this  knows. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params) {
        __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(this.object.pointer, constantEntry.getInstancePointer().pointer,  params.getInstancePointer().pointer);
    }

    private native void __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(long _pointer_, long constantEntry, long params);

    /** 
    Sets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets render system private data **/
    public org.ogre4j.IRenderable.IRenderSystemData getRenderSystemData() {
         return new org.ogre4j.Renderable.RenderSystemData(new InstancePointer(_getRenderSystemData_const(this.object.pointer)));
    }

    private native long _getRenderSystemData_const(long _pointer_);

    /** 
    gets render system private data **/
    public void setRenderSystemData(org.ogre4j.IRenderable.IRenderSystemData val) {
        _setRenderSystemData__RenderSystemDatap_const(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setRenderSystemData__RenderSystemDatap_const(long _pointer_, long val);

}
public static class ManualObjectSectionShadowRenderable extends org.xbig.base.NativeObject implements org.ogre4j.IManualObject.IManualObjectSectionShadowRenderable {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ManualObjectSectionShadowRenderable(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ManualObjectSectionShadowRenderable(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ManualObjectSectionShadowRenderable(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ManualObjectSectionShadowRenderable(org.ogre4j.IManualObject parent, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, org.ogre4j.IVertexData vertexData, boolean createSeparateLightCap, boolean isLightCap) {
         super( new org.xbig.base.InstancePointer(__createManualObjectSectionShadowRenderable__ManualObjectpHardwareIndexBufferSharedPtrpVertexDataPbvbv( parent.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  vertexData.getInstancePointer().pointer,  createSeparateLightCap,  isLightCap)), false);
    }

    private native static long __createManualObjectSectionShadowRenderable__ManualObjectpHardwareIndexBufferSharedPtrpVertexDataPbvbv(long parent, long indexBuffer, long vertexData, boolean createSeparateLightCap, boolean isLightCap);

    /** **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform) {
        _getWorldTransforms__Matrix4p_const(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void _getWorldTransforms__Matrix4p_const(long _pointer_, long xform);

    /** **/
    public void getPositionBuffer(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getPositionBuffer(this.object.pointer)), false);
    }

    private native long _getPositionBuffer(long _pointer_);

    /** **/
    public void getWBuffer(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getWBuffer(this.object.pointer)), false);
    }

    private native long _getWBuffer(long _pointer_);

    /** 
    Set the material to be used by the shadow, should be set by the caller before adding to a render queue **/
    public void setMaterial(org.ogre4j.IMaterialPtr mat) {
        _setMaterial__MaterialPtrR(this.object.pointer, mat.getInstancePointer().pointer);
    }

    private native void _setMaterial__MaterialPtrR(long _pointer_, long mat);

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op) {
        _getRenderOperation__RenderOperationr(this.object.pointer, op.getInstancePointer().pointer);
    }

    private native void _getRenderOperation__RenderOperationr(long _pointer_, long op);

    /** **/
    public org.ogre4j.IRenderOperation getRenderOperationForUpdate() {
         return new org.ogre4j.RenderOperation(new InstancePointer(_getRenderOperationForUpdate(this.object.pointer)));
    }

    private native long _getRenderOperationForUpdate(long _pointer_);

    /** **/
    public float getSquaredViewDepth(org.ogre4j.ICamera a1) {
         return _getSquaredViewDepth__CameraP_const(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native float _getSquaredViewDepth__CameraP_const(long _pointer_, long a1);

    /** **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** 
    Does this renderable require a separate light cap? **/
    public boolean isLightCapSeparate() {
         return _isLightCapSeparate_const(this.object.pointer);
    }

    private native boolean _isLightCapSeparate_const(long _pointer_);

    /** **/
    public org.ogre4j.IShadowRenderable getLightCapRenderable() {
         return new org.ogre4j.ShadowRenderable(new InstancePointer(_getLightCapRenderable(this.object.pointer)));
    }

    private native long _getLightCapRenderable(long _pointer_);

    /** **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Retrieves a pointer to the  this renderable object uses. **/
    public org.ogre4j.ITechnique getTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getTechnique_const(this.object.pointer)));
    }

    private native long _getTechnique_const(long _pointer_);

    /** 
    Called just prior to the  being rendered. **/
    public boolean preRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
         return _preRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native boolean _preRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Called immediately after the  has been rendered. **/
    public void postRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
        _postRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native void _postRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Returns the number of world transform matrices this renderable requires. **/
    public int getNumWorldTransforms() {
         return _getNumWorldTransforms_const(this.object.pointer);
    }

    private native int _getNumWorldTransforms_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Method which reports whether this renderable would normally cast a shadow. **/
    public boolean getCastsShadows() {
         return _getCastsShadows_const(this.object.pointer);
    }

    private native boolean _getCastsShadows_const(long _pointer_);

    /** 
    Sets a custom parameter for this , which may be used to drive calculations for this specific , like GPU program parameters. **/
    public void setCustomParameter(int index, org.ogre4j.IVector4 value) {
        _setCustomParameter__ivVector4R(this.object.pointer, index,  value.getInstancePointer().pointer);
    }

    private native void _setCustomParameter__ivVector4R(long _pointer_, int index, long value);

    /** 
    Gets the custom value associated with this  at the given index. **/
    public org.ogre4j.IVector4 getCustomParameter(int index) {
         return new org.ogre4j.Vector4(new InstancePointer(_getCustomParameter__iv_const(this.object.pointer, index)));
    }

    private native long _getCustomParameter__iv_const(long _pointer_, int index);

    /** 
    Update a custom  constant which is derived from information only this  knows. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params) {
        __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(this.object.pointer, constantEntry.getInstancePointer().pointer,  params.getInstancePointer().pointer);
    }

    private native void __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(long _pointer_, long constantEntry, long params);

    /** 
    Sets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets render system private data **/
    public org.ogre4j.IRenderable.IRenderSystemData getRenderSystemData() {
         return new org.ogre4j.Renderable.RenderSystemData(new InstancePointer(_getRenderSystemData_const(this.object.pointer)));
    }

    private native long _getRenderSystemData_const(long _pointer_);

    /** 
    gets render system private data **/
    public void setRenderSystemData(org.ogre4j.IRenderable.IRenderSystemData val) {
        _setRenderSystemData__RenderSystemDatap_const(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setRenderSystemData__RenderSystemDatap_const(long _pointer_, long val);

}
protected static class TempVertex extends org.xbig.base.NativeObject implements org.ogre4j.IManualObject.ITempVertex {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TempVertex(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TempVertex(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TempVertex(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TempVertex() {
         super( new org.xbig.base.InstancePointer(__createTempVertex()), false);
    }

    private native static long __createTempVertex();

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getposition(this.object.pointer)), false);
    }

    private native long _getposition(long _pointer_);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_) {
        _setposition(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setposition(long _pointer_, long _jni_value_);

    /** **/
    public void getnormal(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getnormal(this.object.pointer)), false);
    }

    private native long _getnormal(long _pointer_);

    /** **/
    public void setnormal(org.ogre4j.IVector3 _jni_value_) {
        _setnormal(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setnormal(long _pointer_, long _jni_value_);

    /** **/
    public void gettexCoord(org.ogre4j.IVector4 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_gettexCoord(this.object.pointer)), false);
    }

    private native long _gettexCoord(long _pointer_);

    /** **/
    public void settexCoord(org.ogre4j.IVector4 _jni_value_) {
        _settexCoord(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _settexCoord(long _pointer_, long _jni_value_);

    /** **/
    public int gettexCoordDims() {
         return _gettexCoordDims(this.object.pointer);
    }

    private native int _gettexCoordDims(long _pointer_);

    /** **/
    public void settexCoordDims(int _jni_value_) {
        _settexCoordDims(this.object.pointer, _jni_value_);
    }

    private native void _settexCoordDims(long _pointer_, int _jni_value_);

    /** **/
    public void getcolour(org.ogre4j.IColourValue returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getcolour(this.object.pointer)), false);
    }

    private native long _getcolour(long _pointer_);

    /** **/
    public void setcolour(org.ogre4j.IColourValue _jni_value_) {
        _setcolour(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setcolour(long _pointer_, long _jni_value_);

}
public static class SectionList extends org.xbig.base.NativeObject implements org.ogre4j.IManualObject.ISectionList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SectionList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SectionList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SectionList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SectionList() {
         super( new org.xbig.base.InstancePointer(__createSectionList()), false);
    }

    private native static long __createSectionList();

    /** **/
    public void assign(int num, org.ogre4j.IManualObject.IManualObjectSection val) {
        _assign__ivOgre_ManualObject_ManualObjectSectionP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ManualObject_ManualObjectSectionP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IManualObject.IManualObjectSection at(int loc) {
         return new org.ogre4j.ManualObject.ManualObjectSection(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IManualObject.IManualObjectSection back() {
         return new org.ogre4j.ManualObject.ManualObjectSection(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IManualObject.IManualObjectSection front() {
         return new org.ogre4j.ManualObject.ManualObjectSection(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IManualObject.IManualObjectSection val) {
        _push_back__Ogre_ManualObject_ManualObjectSectionP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ManualObject_ManualObjectSectionP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ManualObject(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ManualObject(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ManualObject(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ManualObject(String name) {
         super( new org.xbig.base.InstancePointer(__createManualObject__StringR( name)), false);
    }

    private native static long __createManualObject__StringR(String name);

    /** 
    Completely clear the contents of the object. **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** 
    Estimate the number of vertices ahead of time. **/
    public void estimateVertexCount(int vcount) {
        _estimateVertexCount__iv(this.object.pointer, vcount);
    }

    private native void _estimateVertexCount__iv(long _pointer_, int vcount);

    /** 
    Estimate the number of indices ahead of time. **/
    public void estimateIndexCount(int icount) {
        _estimateIndexCount__iv(this.object.pointer, icount);
    }

    private native void _estimateIndexCount__iv(long _pointer_, int icount);

    /** 
    Start defining a part of the object. **/
    public void begin(String materialName, org.ogre4j.RenderOperation.OperationType opType) {
        _begin__StringRRenderOperation_OperationTypev(this.object.pointer, materialName,  opType.getValue());
    }

    private native void _begin__StringRRenderOperation_OperationTypev(long _pointer_, String materialName, int opType);

    /** 
    Use before defining geometry to indicate that you intend to update the geometry regularly and want the internal structure to reflect that. **/
    public void setDynamic(boolean dyn) {
        _setDynamic__bv(this.object.pointer, dyn);
    }

    private native void _setDynamic__bv(long _pointer_, boolean dyn);

    /** 
    Gets whether this object is marked as dynamic **/
    public boolean getDynamic() {
         return _getDynamic_const(this.object.pointer);
    }

    private native boolean _getDynamic_const(long _pointer_);

    /** 
    Start the definition of an update to a part of the object. **/
    public void beginUpdate(int sectionIndex) {
        _beginUpdate__iv(this.object.pointer, sectionIndex);
    }

    private native void _beginUpdate__iv(long _pointer_, int sectionIndex);

    /** 
    Add a vertex position, starting a new vertex at the same time. **/
    public void position(org.ogre4j.IVector3 pos) {
        _position__Vector3R(this.object.pointer, pos.getInstancePointer().pointer);
    }

    private native void _position__Vector3R(long _pointer_, long pos);

    /** **/
    public void position(float x, float y, float z) {
        _position__RealvRealvRealv(this.object.pointer, x,  y,  z);
    }

    private native void _position__RealvRealvRealv(long _pointer_, float x, float y, float z);

    /** 
    Add a vertex normal to the current vertex. **/
    public void normal(org.ogre4j.IVector3 norm) {
        _normal__Vector3R(this.object.pointer, norm.getInstancePointer().pointer);
    }

    private native void _normal__Vector3R(long _pointer_, long norm);

    /** **/
    public void normal(float x, float y, float z) {
        _normal__RealvRealvRealv(this.object.pointer, x,  y,  z);
    }

    private native void _normal__RealvRealvRealv(long _pointer_, float x, float y, float z);

    /** 
    Add a texture coordinate to the current vertex. **/
    public void textureCoord(float u) {
        _textureCoord__Realv(this.object.pointer, u);
    }

    private native void _textureCoord__Realv(long _pointer_, float u);

    /** **/
    public void textureCoord(float u, float v) {
        _textureCoord__RealvRealv(this.object.pointer, u,  v);
    }

    private native void _textureCoord__RealvRealv(long _pointer_, float u, float v);

    /** **/
    public void textureCoord(float u, float v, float w) {
        _textureCoord__RealvRealvRealv(this.object.pointer, u,  v,  w);
    }

    private native void _textureCoord__RealvRealvRealv(long _pointer_, float u, float v, float w);

    /** **/
    public void textureCoord(float x, float y, float z, float w) {
        _textureCoord__RealvRealvRealvRealv(this.object.pointer, x,  y,  z,  w);
    }

    private native void _textureCoord__RealvRealvRealvRealv(long _pointer_, float x, float y, float z, float w);

    /** **/
    public void textureCoord(org.ogre4j.IVector2 uv) {
        _textureCoord__Vector2R(this.object.pointer, uv.getInstancePointer().pointer);
    }

    private native void _textureCoord__Vector2R(long _pointer_, long uv);

    /** **/
    public void textureCoord(org.ogre4j.IVector3 uvw) {
        _textureCoord__Vector3R(this.object.pointer, uvw.getInstancePointer().pointer);
    }

    private native void _textureCoord__Vector3R(long _pointer_, long uvw);

    /** **/
    public void textureCoord(org.ogre4j.IVector4 xyzw) {
        _textureCoord__Vector4R(this.object.pointer, xyzw.getInstancePointer().pointer);
    }

    private native void _textureCoord__Vector4R(long _pointer_, long xyzw);

    /** 
    Add a vertex colour to a vertex. **/
    public void colour(org.ogre4j.IColourValue col) {
        _colour__ColourValueR(this.object.pointer, col.getInstancePointer().pointer);
    }

    private native void _colour__ColourValueR(long _pointer_, long col);

    /** 
    Add a vertex colour to a vertex. **/
    public void colour(float r, float g, float b, float a) {
        _colour__RealvRealvRealvRealv(this.object.pointer, r,  g,  b,  a);
    }

    private native void _colour__RealvRealvRealvRealv(long _pointer_, float r, float g, float b, float a);

    /** 
    Add a vertex index to construct faces / lines / points via indexing rather than just by a simple list of vertices. **/
    public void index(long idx) {
        _index__uint32v(this.object.pointer, idx);
    }

    private native void _index__uint32v(long _pointer_, long idx);

    /** 
    Add a set of 3 vertex indices to construct a triangle; this is a shortcut to calling  3 times. It is only valid for triangle lists. **/
    public void triangle(long i1, long i2, long i3) {
        _triangle__uint32vuint32vuint32v(this.object.pointer, i1,  i2,  i3);
    }

    private native void _triangle__uint32vuint32vuint32v(long _pointer_, long i1, long i2, long i3);

    /** 
    Add a set of 4 vertex indices to construct a quad (out of 2 triangles); this is a shortcut to calling  6 times, or  twice. It's only valid for triangle list operations. **/
    public void quad(long i1, long i2, long i3, long i4) {
        _quad__uint32vuint32vuint32vuint32v(this.object.pointer, i1,  i2,  i3,  i4);
    }

    private native void _quad__uint32vuint32vuint32vuint32v(long _pointer_, long i1, long i2, long i3, long i4);

    /** 
    Finish defining the object and compile the final renderable version. **/
    public org.ogre4j.IManualObject.IManualObjectSection end() {
         return new org.ogre4j.ManualObject.ManualObjectSection(new InstancePointer(_end(this.object.pointer)));
    }

    private native long _end(long _pointer_);

    /** 
    Alter the material for a subsection of this object after it has been specified. **/
    public void setMaterialName(int subindex, String name) {
        _setMaterialName__ivStringR(this.object.pointer, subindex,  name);
    }

    private native void _setMaterialName__ivStringR(long _pointer_, int subindex, String name);

    /** 
    Convert this object to a . **/
    public void convertToMesh(org.ogre4j.IMeshPtr returnValue, String meshName, String groupName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_convertToMesh__StringRStringR(this.object.pointer, meshName,  groupName)), false);
    }

    private native long _convertToMesh__StringRStringR(long _pointer_, String meshName, String groupName);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Sets the bounding box. **/
    public void setBoundingBox(org.ogre4j.IAxisAlignedBox box) {
        _setBoundingBox__AxisAlignedBoxR(this.object.pointer, box.getInstancePointer().pointer);
    }

    private native void _setBoundingBox__AxisAlignedBoxR(long _pointer_, long box);

    /** 
    Gets a pointer to a , i.e. a part of a . **/
    public org.ogre4j.IManualObject.IManualObjectSection getSection(long index) {
         return new org.ogre4j.ManualObject.ManualObjectSection(new InstancePointer(_getSection__Iv_const(this.object.pointer, index)));
    }

    private native long _getSection__Iv_const(long _pointer_, long index);

    /** 
    Retrieves the number of  objects making up this . **/
    public long getNumSections() {
         return _getNumSections_const(this.object.pointer);
    }

    private native long _getNumSections_const(long _pointer_);

    /** 
    Sets whether or not to keep the original declaration order when queuing the renderables. **/
    public void setKeepDeclarationOrder(boolean keepOrder) {
        _setKeepDeclarationOrder__bv(this.object.pointer, keepOrder);
    }

    private native void _setKeepDeclarationOrder__bv(long _pointer_, boolean keepOrder);

    /** 
    Gets whether or not the declaration order is to be kept or not. **/
    public boolean getKeepDeclarationOrder() {
         return _getKeepDeclarationOrder_const(this.object.pointer);
    }

    private native boolean _getKeepDeclarationOrder_const(long _pointer_);

    /** 
    
. **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** 
    
. **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** 
    
. **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** 
    
. **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** 
    Implement this method to enable stencil shadows. **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** 
    Overridden member from . **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** 
    Implement this method to enable stencil shadows. **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the name of this object. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been attached to a node. **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Internal method to notify the object of the camera to be used for the next rendering operation. **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Get the 'type flags' for this . **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** 
    Create a reference-counted AnimableValuePtr for the named value. **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

}
