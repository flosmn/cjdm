/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IEdgeData extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

public static interface IEdge extends INativeObject {

;

;

;

;

;

;

    /** **/
    public boolean getdegenerate();

    /** **/
    public void setdegenerate(boolean _jni_value_);

}
public static interface IEdgeGroup extends INativeObject {

    /** **/
    public int getvertexSet();

    /** **/
    public void setvertexSet(int _jni_value_);

    /** **/
    public org.ogre4j.IVertexData getvertexData();

    /** **/
    public int gettriStart();

    /** **/
    public void settriStart(int _jni_value_);

    /** **/
    public int gettriCount();

    /** **/
    public void settriCount(int _jni_value_);

    /** **/
    public void getedges(org.ogre4j.IEdgeData.IEdgeList returnValue);

    /** **/
    public void setedges(org.ogre4j.IEdgeData.IEdgeList _jni_value_);

}
public static interface ITriangle extends INativeObject {

    /** **/
    public int getindexSet();

    /** **/
    public void setindexSet(int _jni_value_);

    /** **/
    public int getvertexSet();

    /** **/
    public void setvertexSet(int _jni_value_);

;

;

;

;

}
public interface ITriangleFaceNormalList extends INativeObject, org.std.Ivector< org.ogre4j.IVector4 > {

    /** **/
    public void assign(int num, org.ogre4j.IVector4 val);

    /** **/
    public org.ogre4j.IVector4 at(int loc);

    /** **/
    public org.ogre4j.IVector4 back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IVector4 front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IVector4 val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ITriangleLightFacingList extends INativeObject, org.std.Ivector< Short > {

    /** **/
    public void assign(int num, short val);

    /** **/
    public BytePointer at(int loc);

    /** **/
    public BytePointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public BytePointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(short val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ITriangleList extends INativeObject, org.std.Ivector< org.ogre4j.IEdgeData.ITriangle > {

    /** **/
    public void assign(int num, org.ogre4j.IEdgeData.ITriangle val);

    /** **/
    public org.ogre4j.IEdgeData.ITriangle at(int loc);

    /** **/
    public org.ogre4j.IEdgeData.ITriangle back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IEdgeData.ITriangle front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IEdgeData.ITriangle val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IEdgeList extends INativeObject, org.std.Ivector< org.ogre4j.IEdgeData.IEdge > {

    /** **/
    public void assign(int num, org.ogre4j.IEdgeData.IEdge val);

    /** **/
    public org.ogre4j.IEdgeData.IEdge at(int loc);

    /** **/
    public org.ogre4j.IEdgeData.IEdge back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IEdgeData.IEdge front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IEdgeData.IEdge val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IEdgeGroupList extends INativeObject, org.std.Ivector< org.ogre4j.IEdgeData.IEdgeGroup > {

    /** **/
    public void assign(int num, org.ogre4j.IEdgeData.IEdgeGroup val);

    /** **/
    public org.ogre4j.IEdgeData.IEdgeGroup at(int loc);

    /** **/
    public org.ogre4j.IEdgeData.IEdgeGroup back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IEdgeData.IEdgeGroup front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IEdgeData.IEdgeGroup val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Calculate the light facing state of the triangles in this edge list **/
    public void updateTriangleLightFacing(org.ogre4j.IVector4 lightPos);

    /** 
    Updates the face normals for this edge list based on (changed) position information, useful for animated objects. **/
    public void updateFaceNormals(int vertexSet, org.ogre4j.IHardwareVertexBufferSharedPtr positionBuffer);

    /** **/
    public void log(org.ogre4j.ILog log);

    /** **/
    public void gettriangles(org.ogre4j.IEdgeData.ITriangleList returnValue);

    /** **/
    public void settriangles(org.ogre4j.IEdgeData.ITriangleList _jni_value_);

    /** **/
    public void gettriangleFaceNormals(org.ogre4j.IEdgeData.ITriangleFaceNormalList returnValue);

    /** **/
    public void settriangleFaceNormals(org.ogre4j.IEdgeData.ITriangleFaceNormalList _jni_value_);

    /** **/
    public void gettriangleLightFacings(org.ogre4j.IEdgeData.ITriangleLightFacingList returnValue);

    /** **/
    public void settriangleLightFacings(org.ogre4j.IEdgeData.ITriangleLightFacingList _jni_value_);

    /** **/
    public void getedgeGroups(org.ogre4j.IEdgeData.IEdgeGroupList returnValue);

    /** **/
    public void setedgeGroups(org.ogre4j.IEdgeData.IEdgeGroupList _jni_value_);

    /** **/
    public boolean getisClosed();

    /** **/
    public void setisClosed(boolean _jni_value_);

}
