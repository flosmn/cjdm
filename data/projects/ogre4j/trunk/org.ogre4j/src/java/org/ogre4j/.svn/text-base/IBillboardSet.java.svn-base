/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IBillboardSet extends INativeObject, org.ogre4j.IMovableObject, org.ogre4j.IRenderable {

public static interface ISortByDirectionFunctor extends INativeObject {

    /** **/
    public float operatorFunctionCall(org.ogre4j.IBillboard bill);

    /** **/
    public void getsortDir(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setsortDir(org.ogre4j.IVector3 _jni_value_);

}
public static interface ISortByDistanceFunctor extends INativeObject {

    /** **/
    public float operatorFunctionCall(org.ogre4j.IBillboard bill);

    /** **/
    public void getsortPos(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setsortPos(org.ogre4j.IVector3 _jni_value_);

}
public interface IActiveBillboardList extends INativeObject, org.std.Ilist< org.ogre4j.IBillboard > {

    /** **/
    public void assign(int num, org.ogre4j.IBillboard val);

    /** **/
    public org.ogre4j.IBillboard back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IBillboard front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IBillboard val);

    /** **/
    public void push_front(org.ogre4j.IBillboard val);

    /** **/
    public void remove(org.ogre4j.IBillboard val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IFreeBillboardList extends INativeObject, org.std.Ilist< org.ogre4j.IBillboard > {

    /** **/
    public void assign(int num, org.ogre4j.IBillboard val);

    /** **/
    public org.ogre4j.IBillboard back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IBillboard front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IBillboard val);

    /** **/
    public void push_front(org.ogre4j.IBillboard val);

    /** **/
    public void remove(org.ogre4j.IBillboard val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IBillboardPool extends INativeObject, org.std.Ivector< org.ogre4j.IBillboard > {

    /** **/
    public void assign(int num, org.ogre4j.IBillboard val);

    /** **/
    public org.ogre4j.IBillboard at(int loc);

    /** **/
    public org.ogre4j.IBillboard back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IBillboard front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IBillboard val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ITextureCoordSets extends INativeObject, org.std.Ivector< org.ogre4j.IFloatRect > {

    /** **/
    public void assign(int num, org.ogre4j.IFloatRect val);

    /** **/
    public org.ogre4j.IFloatRect at(int loc);

    /** **/
    public org.ogre4j.IFloatRect back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IFloatRect front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IFloatRect val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Creates a new billboard and adds it to this set. **/
    public org.ogre4j.IBillboard createBillboard(org.ogre4j.IVector3 position, org.ogre4j.IColourValue colour);

    /** 
    Creates a new billboard and adds it to this set. **/
    public org.ogre4j.IBillboard createBillboard(float x, float y, float z, org.ogre4j.IColourValue colour);

    /** 
    Returns the number of active billboards which currently make up this set. **/
    public int getNumBillboards();

    /** 
    Tells the set whether to allow automatic extension of the pool of billboards. **/
    public void setAutoextend(boolean autoextend);

    /** 
    Returns true if the billboard pool automatically extends. **/
    public boolean getAutoextend();

    /** 
    Enables sorting for this . (default: off) **/
    public void setSortingEnabled(boolean sortenable);

    /** 
    Returns true if sorting of billboards is enabled based on their distance from the camera **/
    public boolean getSortingEnabled();

    /** 
    Adjusts the size of the pool of billboards available in this set. **/
    public void setPoolSize(int size);

    /** 
    Returns the current size of the billboard pool. **/
    public long getPoolSize();

    /** 
    Empties this set of all billboards. **/
    public void clear();

    /** 
    Returns a pointer to the billboard at the supplied index. **/
    public org.ogre4j.IBillboard getBillboard(long index);

    /** 
    Removes the billboard at the supplied index. **/
    public void removeBillboard(long index);

    /** 
    Removes a billboard from the set. **/
    public void removeBillboard(org.ogre4j.IBillboard pBill);

    /** 
    Sets the point which acts as the origin point for all billboards in this set. **/
    public void setBillboardOrigin(org.ogre4j.BillboardOrigin origin);

    /** 
    Gets the point which acts as the origin point for all billboards in this set. **/
    public org.ogre4j.BillboardOrigin getBillboardOrigin();

    /** 
    Sets billboard rotation type. **/
    public void setBillboardRotationType(org.ogre4j.BillboardRotationType rotationType);

    /** 
    Sets billboard rotation type. **/
    public org.ogre4j.BillboardRotationType getBillboardRotationType();

    /** 
    Sets the default dimensions of the billboards in this set. **/
    public void setDefaultDimensions(float width, float height);

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultWidth(float width);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultWidth();

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultHeight(float height);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultHeight();

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public void setMaterialName(String name);

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public String getMaterialName();

    /** 
    Overridden from **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** 
    Begin injection of billboard data; applicable when constructing the  for external data use. **/
    public void beginBillboards(int numBillboards);

    /** 
    Define a billboard. **/
    public void injectBillboard(org.ogre4j.IBillboard bb);

    /** 
    Finish defining billboards. **/
    public void endBillboards();

    /** 
    Set the bounds of the . **/
    public void setBounds(org.ogre4j.IAxisAlignedBox box, float radius);

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox();

    /** 
    Overridden from **/
    public float getBoundingRadius();

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue);

    /** 
    Overridden from **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** 
    Overridden from **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op);

    /** 
    Overridden from **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** 
    Internal callback used by Billboards to notify their parent that they have been resized. **/
    public void _notifyBillboardResized();

    /** 
    Internal callback used by Billboards to notify their parent that they have been rotated.. **/
    public void _notifyBillboardRotated();

    /** 
    Returns whether or not billboards in this are tested individually for culling. **/
    public boolean getCullIndividually();

    /** 
    Sets whether culling tests billboards in this individually as well as in a group. **/
    public void setCullIndividually(boolean cullIndividual);

    /** 
    Sets the type of billboard to render. **/
    public void setBillboardType(org.ogre4j.BillboardType bbt);

    /** 
    Returns the billboard type in use. **/
    public org.ogre4j.BillboardType getBillboardType();

    /** 
    Use this to specify the common direction given to billboards of type BBT_ORIENTED_COMMON or BBT_PERPENDICULAR_COMMON. **/
    public void setCommonDirection(org.ogre4j.IVector3 vec);

    /** 
    Gets the common direction for all billboards (BBT_ORIENTED_COMMON) **/
    public org.ogre4j.IVector3 getCommonDirection();

    /** 
    Use this to specify the common up-vector given to billboards of type BBT_PERPENDICULAR_SELF or BBT_PERPENDICULAR_COMMON. **/
    public void setCommonUpVector(org.ogre4j.IVector3 vec);

    /** 
    Gets the common up-vector for all billboards (BBT_PERPENDICULAR_SELF and BBT_PERPENDICULAR_COMMON) **/
    public org.ogre4j.IVector3 getCommonUpVector();

    /** 
    Sets whether or not billboards should use an 'accurate' facing model based on the vector from each billboard to the camera, rather than an optimised version using just the camera direction. **/
    public void setUseAccurateFacing(boolean acc);

    /** 
    Gets whether or not billboards use an 'accurate' facing model based on the vector from each billboard to the camera, rather than an optimised version using just the camera direction. **/
    public boolean getUseAccurateFacing();

    /** 
    Overridden from **/
    public String getMovableType();

    /** 
    Overridden, see **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam);

    /** 
    Update the bounds of the billboardset **/
    public void _updateBounds();

    /** 
    **/
    public org.ogre4j.ILightList getLights();

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** 
    Sort the billboard set. Only called when enabled via setSortingEnabled **/
    public void _sortBillboards(org.ogre4j.ICamera cam);

    /** 
    Gets the sort mode of this billboard set **/
    public org.ogre4j.SortMode _getSortMode();

    /** 
    Sets whether billboards should be treated as being in world space. **/
    public void setBillboardsInWorldSpace(boolean ws);

    /** 
     can use custom texture coordinates for various billboards. This is useful for selecting one of many particle images out of a tiled texture sheet, or doing flipbook animation within a single texture. **/
    public void setTextureCoords(org.ogre4j.IFloatRect coords, int numCoords);

    /** 
     will generate texture coordinate rects as if the texture for the billboard set contained 'stacks' rows of 'slices' images each, all equal size. Thus, if the texture size is 512x512 and 'stacks' is 4 and 'slices' is 8, each sub-rectangle of the texture would be 128 texels tall and 64 texels wide. **/
    public void setTextureStacksAndSlices(short stacks, short slices);

    /** 
     returns the current texture coordinate rects in effect. By default, there is only one texture coordinate rect in the set, spanning the entire texture from 0 through 1 in each direction. **/
    public org.ogre4j.IFloatRect getTextureCoords(IntegerPointer oNumCoords);

    /** 
    Set whether or not the  will use point rendering rather than manually generated quads. **/
    public void setPointRenderingEnabled(boolean enabled);

    /** 
    Returns whether point rendering is enabled. **/
    public boolean isPointRenderingEnabled();

    /** **/
    public long getTypeFlags();

}
