/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class CompositorScriptCompiler extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorScriptCompiler {
static { System.loadLibrary("ogre4j");}
protected static class CompositorScriptContext extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorScriptCompiler.ICompositorScriptContext {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CompositorScriptContext(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CompositorScriptContext(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CompositorScriptContext(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CompositorScriptContext() {
         super( new org.xbig.base.InstancePointer(__createCompositorScriptContext()), false);
    }

    private native static long __createCompositorScriptContext();

    /** **/
    public org.ogre4j.CompositorScriptCompiler.CompositorScriptSection getsection() {
         return org.ogre4j.CompositorScriptCompiler.CompositorScriptSection.toEnum(_getsection(this.object.pointer));
    }

    private native int _getsection(long _pointer_);

    /** **/
    public void setsection(org.ogre4j.CompositorScriptCompiler.CompositorScriptSection _jni_value_) {
        _setsection(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setsection(long _pointer_, int _jni_value_);

    /** **/
    public String getgroupName() {
         return _getgroupName(this.object.pointer);
    }

    private native String _getgroupName(long _pointer_);

    /** **/
    public void setgroupName(String _jni_value_) {
        _setgroupName(this.object.pointer, _jni_value_);
    }

    private native void _setgroupName(long _pointer_, String _jni_value_);

    /** **/
    public void getcompositor(org.ogre4j.ICompositorPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getcompositor(this.object.pointer)), false);
    }

    private native long _getcompositor(long _pointer_);

    /** **/
    public void setcompositor(org.ogre4j.ICompositorPtr _jni_value_) {
        _setcompositor(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setcompositor(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.ICompositionTechnique gettechnique() {
         return new org.ogre4j.CompositionTechnique(new InstancePointer(_gettechnique(this.object.pointer)));
    }

    private native long _gettechnique(long _pointer_);

    /** **/
    public void settechnique(org.ogre4j.ICompositionTechnique _jni_value_) {
        _settechnique(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _settechnique(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.ICompositionTargetPass gettarget() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_gettarget(this.object.pointer)));
    }

    private native long _gettarget(long _pointer_);

    /** **/
    public void settarget(org.ogre4j.ICompositionTargetPass _jni_value_) {
        _settarget(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _settarget(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.ICompositionPass getpass() {
         return new org.ogre4j.CompositionPass(new InstancePointer(_getpass(this.object.pointer)));
    }

    private native long _getpass(long _pointer_);

    /** **/
    public void setpass(org.ogre4j.ICompositionPass _jni_value_) {
        _setpass(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setpass(long _pointer_, long _jni_value_);

}
protected enum TokenID implements INativeEnum < TokenID > {
    ID_UNKOWN(TokenIDHelper.ENUM_VALUES[0]),
    ID_TARGET_WIDTH(TokenIDHelper.ENUM_VALUES[1]),
    ID_TARGET_HEIGHT(TokenIDHelper.ENUM_VALUES[2]),
    ID_TARGET_WIDTH_SCALED(TokenIDHelper.ENUM_VALUES[3]),
    ID_TARGET_HEIGHT_SCALED(TokenIDHelper.ENUM_VALUES[4]),
    ID_PF_A8R8G8B8(TokenIDHelper.ENUM_VALUES[5]),
    ID_PF_R8G8B8A8(TokenIDHelper.ENUM_VALUES[6]),
    ID_PF_R8G8B8(TokenIDHelper.ENUM_VALUES[7]),
    ID_PF_FLOAT16_R(TokenIDHelper.ENUM_VALUES[8]),
    ID_PF_FLOAT16_RGB(TokenIDHelper.ENUM_VALUES[9]),
    ID_PF_FLOAT16_RGBA(TokenIDHelper.ENUM_VALUES[10]),
    ID_PF_FLOAT32_R(TokenIDHelper.ENUM_VALUES[11]),
    ID_PF_FLOAT32_RGB(TokenIDHelper.ENUM_VALUES[12]),
    ID_PF_FLOAT32_RGBA(TokenIDHelper.ENUM_VALUES[13]),
    ID_PF_FLOAT16_GR(TokenIDHelper.ENUM_VALUES[14]),
    ID_PF_FLOAT32_GR(TokenIDHelper.ENUM_VALUES[15]),
    ID_PREVIOUS(TokenIDHelper.ENUM_VALUES[16]),
    ID_NONE(TokenIDHelper.ENUM_VALUES[17]),
    ID_RENDER_QUAD(TokenIDHelper.ENUM_VALUES[18]),
    ID_CLEAR(TokenIDHelper.ENUM_VALUES[19]),
    ID_STENCIL(TokenIDHelper.ENUM_VALUES[20]),
    ID_RENDER_SCENE(TokenIDHelper.ENUM_VALUES[21]),
    ID_CLR_COLOUR(TokenIDHelper.ENUM_VALUES[22]),
    ID_CLR_DEPTH(TokenIDHelper.ENUM_VALUES[23]),
    ID_ST_ALWAYS_FAIL(TokenIDHelper.ENUM_VALUES[24]),
    ID_ST_ALWAYS_PASS(TokenIDHelper.ENUM_VALUES[25]),
    ID_ST_LESS(TokenIDHelper.ENUM_VALUES[26]),
    ID_ST_LESS_EQUAL(TokenIDHelper.ENUM_VALUES[27]),
    ID_ST_EQUAL(TokenIDHelper.ENUM_VALUES[28]),
    ID_ST_NOT_EQUAL(TokenIDHelper.ENUM_VALUES[29]),
    ID_ST_GREATER_EQUAL(TokenIDHelper.ENUM_VALUES[30]),
    ID_ST_GREATER(TokenIDHelper.ENUM_VALUES[31]),
    ID_ST_KEEP(TokenIDHelper.ENUM_VALUES[32]),
    ID_ST_ZERO(TokenIDHelper.ENUM_VALUES[33]),
    ID_ST_REPLACE(TokenIDHelper.ENUM_VALUES[34]),
    ID_ST_INCREMENT(TokenIDHelper.ENUM_VALUES[35]),
    ID_ST_DECREMENT(TokenIDHelper.ENUM_VALUES[36]),
    ID_ST_INCREMENT_WRAP(TokenIDHelper.ENUM_VALUES[37]),
    ID_ST_DECREMENT_WRAP(TokenIDHelper.ENUM_VALUES[38]),
    ID_ST_INVERT(TokenIDHelper.ENUM_VALUES[39]),
    ID_ON(TokenIDHelper.ENUM_VALUES[40]),
    ID_OFF(TokenIDHelper.ENUM_VALUES[41]),
    ID_TRUE(TokenIDHelper.ENUM_VALUES[42]),
    ID_FALSE(TokenIDHelper.ENUM_VALUES[43]),
    ID_AUTOTOKENSTART(TokenIDHelper.ENUM_VALUES[44]);

    private int value;

    TokenID(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public TokenID getEnum(int val) {
        return toEnum(val);
    }

    public static final TokenID toEnum(int retval) {
    if (retval ==ID_UNKOWN.value)
        return TokenID.ID_UNKOWN;
    else if (retval ==ID_TARGET_WIDTH.value)
        return TokenID.ID_TARGET_WIDTH;
    else if (retval ==ID_TARGET_HEIGHT.value)
        return TokenID.ID_TARGET_HEIGHT;
    else if (retval ==ID_TARGET_WIDTH_SCALED.value)
        return TokenID.ID_TARGET_WIDTH_SCALED;
    else if (retval ==ID_TARGET_HEIGHT_SCALED.value)
        return TokenID.ID_TARGET_HEIGHT_SCALED;
    else if (retval ==ID_PF_A8R8G8B8.value)
        return TokenID.ID_PF_A8R8G8B8;
    else if (retval ==ID_PF_R8G8B8A8.value)
        return TokenID.ID_PF_R8G8B8A8;
    else if (retval ==ID_PF_R8G8B8.value)
        return TokenID.ID_PF_R8G8B8;
    else if (retval ==ID_PF_FLOAT16_R.value)
        return TokenID.ID_PF_FLOAT16_R;
    else if (retval ==ID_PF_FLOAT16_RGB.value)
        return TokenID.ID_PF_FLOAT16_RGB;
    else if (retval ==ID_PF_FLOAT16_RGBA.value)
        return TokenID.ID_PF_FLOAT16_RGBA;
    else if (retval ==ID_PF_FLOAT32_R.value)
        return TokenID.ID_PF_FLOAT32_R;
    else if (retval ==ID_PF_FLOAT32_RGB.value)
        return TokenID.ID_PF_FLOAT32_RGB;
    else if (retval ==ID_PF_FLOAT32_RGBA.value)
        return TokenID.ID_PF_FLOAT32_RGBA;
    else if (retval ==ID_PF_FLOAT16_GR.value)
        return TokenID.ID_PF_FLOAT16_GR;
    else if (retval ==ID_PF_FLOAT32_GR.value)
        return TokenID.ID_PF_FLOAT32_GR;
    else if (retval ==ID_PREVIOUS.value)
        return TokenID.ID_PREVIOUS;
    else if (retval ==ID_NONE.value)
        return TokenID.ID_NONE;
    else if (retval ==ID_RENDER_QUAD.value)
        return TokenID.ID_RENDER_QUAD;
    else if (retval ==ID_CLEAR.value)
        return TokenID.ID_CLEAR;
    else if (retval ==ID_STENCIL.value)
        return TokenID.ID_STENCIL;
    else if (retval ==ID_RENDER_SCENE.value)
        return TokenID.ID_RENDER_SCENE;
    else if (retval ==ID_CLR_COLOUR.value)
        return TokenID.ID_CLR_COLOUR;
    else if (retval ==ID_CLR_DEPTH.value)
        return TokenID.ID_CLR_DEPTH;
    else if (retval ==ID_ST_ALWAYS_FAIL.value)
        return TokenID.ID_ST_ALWAYS_FAIL;
    else if (retval ==ID_ST_ALWAYS_PASS.value)
        return TokenID.ID_ST_ALWAYS_PASS;
    else if (retval ==ID_ST_LESS.value)
        return TokenID.ID_ST_LESS;
    else if (retval ==ID_ST_LESS_EQUAL.value)
        return TokenID.ID_ST_LESS_EQUAL;
    else if (retval ==ID_ST_EQUAL.value)
        return TokenID.ID_ST_EQUAL;
    else if (retval ==ID_ST_NOT_EQUAL.value)
        return TokenID.ID_ST_NOT_EQUAL;
    else if (retval ==ID_ST_GREATER_EQUAL.value)
        return TokenID.ID_ST_GREATER_EQUAL;
    else if (retval ==ID_ST_GREATER.value)
        return TokenID.ID_ST_GREATER;
    else if (retval ==ID_ST_KEEP.value)
        return TokenID.ID_ST_KEEP;
    else if (retval ==ID_ST_ZERO.value)
        return TokenID.ID_ST_ZERO;
    else if (retval ==ID_ST_REPLACE.value)
        return TokenID.ID_ST_REPLACE;
    else if (retval ==ID_ST_INCREMENT.value)
        return TokenID.ID_ST_INCREMENT;
    else if (retval ==ID_ST_DECREMENT.value)
        return TokenID.ID_ST_DECREMENT;
    else if (retval ==ID_ST_INCREMENT_WRAP.value)
        return TokenID.ID_ST_INCREMENT_WRAP;
    else if (retval ==ID_ST_DECREMENT_WRAP.value)
        return TokenID.ID_ST_DECREMENT_WRAP;
    else if (retval ==ID_ST_INVERT.value)
        return TokenID.ID_ST_INVERT;
    else if (retval ==ID_ON.value)
        return TokenID.ID_ON;
    else if (retval ==ID_OFF.value)
        return TokenID.ID_OFF;
    else if (retval ==ID_TRUE.value)
        return TokenID.ID_TRUE;
    else if (retval ==ID_FALSE.value)
        return TokenID.ID_FALSE;
    else if (retval ==ID_AUTOTOKENSTART.value)
        return TokenID.ID_AUTOTOKENSTART;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class TokenIDHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

protected enum CompositorScriptSection implements INativeEnum < CompositorScriptSection > {
    CSS_NONE(CompositorScriptSectionHelper.ENUM_VALUES[0]),
    CSS_COMPOSITOR(CompositorScriptSectionHelper.ENUM_VALUES[1]),
    CSS_TECHNIQUE(CompositorScriptSectionHelper.ENUM_VALUES[2]),
    CSS_TARGET(CompositorScriptSectionHelper.ENUM_VALUES[3]),
    CSS_PASS(CompositorScriptSectionHelper.ENUM_VALUES[4]);

    private int value;

    CompositorScriptSection(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public CompositorScriptSection getEnum(int val) {
        return toEnum(val);
    }

    public static final CompositorScriptSection toEnum(int retval) {
    if (retval ==CSS_NONE.value)
        return CompositorScriptSection.CSS_NONE;
    else if (retval ==CSS_COMPOSITOR.value)
        return CompositorScriptSection.CSS_COMPOSITOR;
    else if (retval ==CSS_TECHNIQUE.value)
        return CompositorScriptSection.CSS_TECHNIQUE;
    else if (retval ==CSS_TARGET.value)
        return CompositorScriptSection.CSS_TARGET;
    else if (retval ==CSS_PASS.value)
        return CompositorScriptSection.CSS_PASS;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class CompositorScriptSectionHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

protected static class TokenActionMap extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorScriptCompiler.ITokenActionMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TokenActionMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TokenActionMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TokenActionMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



      }
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CompositorScriptCompiler(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CompositorScriptCompiler(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CompositorScriptCompiler(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CompositorScriptCompiler() {
         super( new org.xbig.base.InstancePointer(__createCompositorScriptCompiler()), false);
    }

    private native static long __createCompositorScriptCompiler();

    /** 
    gets BNF Grammar for  script. **/
    public String getClientBNFGrammer() {
         return _getClientBNFGrammer_const(this.object.pointer);
    }

    private native String _getClientBNFGrammer_const(long _pointer_);

    /** 
    get the name of the  script BNF grammar. **/
    public String getClientGrammerName() {
         return _getClientGrammerName_const(this.object.pointer);
    }

    private native String _getClientGrammerName_const(long _pointer_);

    /** 
    Compile a compositor script from a data stream using a specific resource group name. **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream, String groupName) {
        _parseScript__DataStreamPtrrStringR(this.object.pointer, stream.getInstancePointer().pointer,  groupName);
    }

    private native void _parseScript__DataStreamPtrrStringR(long _pointer_, long stream, String groupName);

    /** 
    compile the source - performs 2 passes. First pass is to tokenize, check semantics and context. The second pass is performed by using tokens to look up function implementors and executing them which convert tokens to application specific instructions. **/
    public boolean compile(String source, String sourceName) {
         return _compile__StringRStringR(this.object.pointer, source,  sourceName);
    }

    private native boolean _compile__StringRStringR(long _pointer_, String source, String sourceName);

}
