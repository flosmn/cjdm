/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Matrix3 extends org.xbig.base.NativeObject implements org.ogre4j.IMatrix3 {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Matrix3(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Matrix3(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Matrix3(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Default constructor. **/
    public Matrix3() {
         super( new org.xbig.base.InstancePointer(__createMatrix3()), false);
    }

    private native static long __createMatrix3();

//    /** **/
//    public Matrix3(float arr) {
//         super( new org.xbig.base.InstancePointer(__createMatrix3__RealV( arr)), false);
//    }
//
//    private native static long __createMatrix3__RealV(float arr);

    /** **/
    public Matrix3(org.ogre4j.IMatrix3 rkMatrix) {
         super( new org.xbig.base.InstancePointer(__createMatrix3__Matrix3R( rkMatrix.getInstancePointer().pointer)), false);
    }

    private native static long __createMatrix3__Matrix3R(long rkMatrix);

    /** **/
    public Matrix3(float fEntry00, float fEntry01, float fEntry02, float fEntry10, float fEntry11, float fEntry12, float fEntry20, float fEntry21, float fEntry22) {
         super( new org.xbig.base.InstancePointer(__createMatrix3__RealvRealvRealvRealvRealvRealvRealvRealvRealv( fEntry00,  fEntry01,  fEntry02,  fEntry10,  fEntry11,  fEntry12,  fEntry20,  fEntry21,  fEntry22)), false);
    }

    private native static long __createMatrix3__RealvRealvRealvRealvRealvRealvRealvRealvRealv(float fEntry00, float fEntry01, float fEntry02, float fEntry10, float fEntry11, float fEntry12, float fEntry20, float fEntry21, float fEntry22);

    /** **/
    public FloatPointer operatorIndex(int iRow) {
         return new FloatPointer(new InstancePointer(_operatorIndex__iv_const(this.object.pointer, iRow)));
    }

    private native long _operatorIndex__iv_const(long _pointer_, int iRow);

    /** **/
    public void GetColumn(org.ogre4j.IVector3 returnValue, int iCol) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_GetColumn__iv_const(this.object.pointer, iCol)), false);
    }

    private native long _GetColumn__iv_const(long _pointer_, int iCol);

    /** **/
    public void SetColumn(int iCol, org.ogre4j.IVector3 vec) {
        _SetColumn__ivVector3R(this.object.pointer, iCol,  vec.getInstancePointer().pointer);
    }

    private native void _SetColumn__ivVector3R(long _pointer_, int iCol, long vec);

    /** **/
    public void FromAxes(org.ogre4j.IVector3 xAxis, org.ogre4j.IVector3 yAxis, org.ogre4j.IVector3 zAxis) {
        _FromAxes__Vector3RVector3RVector3R(this.object.pointer, xAxis.getInstancePointer().pointer,  yAxis.getInstancePointer().pointer,  zAxis.getInstancePointer().pointer);
    }

    private native void _FromAxes__Vector3RVector3RVector3R(long _pointer_, long xAxis, long yAxis, long zAxis);

    /** **/
    public org.ogre4j.IMatrix3 operatorAssignment(org.ogre4j.IMatrix3 rkMatrix) {
         return new org.ogre4j.Matrix3(new InstancePointer(_operatorAssignment__Matrix3R(this.object.pointer, rkMatrix.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__Matrix3R(long _pointer_, long rkMatrix);

    /** **/
    public boolean operatorEqual(org.ogre4j.IMatrix3 rkMatrix) {
         return _operatorEqual__Matrix3R_const(this.object.pointer, rkMatrix.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__Matrix3R_const(long _pointer_, long rkMatrix);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IMatrix3 rkMatrix) {
         return _operatorNotEqual__Matrix3R_const(this.object.pointer, rkMatrix.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__Matrix3R_const(long _pointer_, long rkMatrix);

    /** **/
    public void operatorAddition(org.ogre4j.IMatrix3 returnValue, org.ogre4j.IMatrix3 rkMatrix) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorAddition__Matrix3R_const(this.object.pointer, rkMatrix.getInstancePointer().pointer)), false);
    }

    private native long _operatorAddition__Matrix3R_const(long _pointer_, long rkMatrix);

    /** **/
    public void operatorSubtraction(org.ogre4j.IMatrix3 returnValue, org.ogre4j.IMatrix3 rkMatrix) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction__Matrix3R_const(this.object.pointer, rkMatrix.getInstancePointer().pointer)), false);
    }

    private native long _operatorSubtraction__Matrix3R_const(long _pointer_, long rkMatrix);

    /** **/
    public void operatorMultiplication(org.ogre4j.IMatrix3 returnValue, org.ogre4j.IMatrix3 rkMatrix) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Matrix3R_const(this.object.pointer, rkMatrix.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__Matrix3R_const(long _pointer_, long rkMatrix);

    /** **/
    public void operatorSubtraction(org.ogre4j.IMatrix3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction_const(this.object.pointer)), false);
    }

    private native long _operatorSubtraction_const(long _pointer_);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rkVector) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Vector3R_const(this.object.pointer, rkVector.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__Vector3R_const(long _pointer_, long rkVector);

    /** **/
    public void operatorMultiplication(org.ogre4j.IMatrix3 returnValue, float fScalar) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Realv_const(this.object.pointer, fScalar)), false);
    }

    private native long _operatorMultiplication__Realv_const(long _pointer_, float fScalar);

    /** **/
    public void Transpose(org.ogre4j.IMatrix3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_Transpose_const(this.object.pointer)), false);
    }

    private native long _Transpose_const(long _pointer_);

    /** **/
    public boolean Inverse(org.ogre4j.IMatrix3 rkInverse, float fTolerance) {
         return _Inverse__Matrix3rRealv_const(this.object.pointer, rkInverse.getInstancePointer().pointer,  fTolerance);
    }

    private native boolean _Inverse__Matrix3rRealv_const(long _pointer_, long rkInverse, float fTolerance);

    /** **/
    public void Inverse_rbv(org.ogre4j.IMatrix3 returnValue, float fTolerance) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_Inverse__Realv_const(this.object.pointer, fTolerance)), false);
    }

    private native long _Inverse__Realv_const(long _pointer_, float fTolerance);

    /** **/
    public float Determinant() {
         return _Determinant_const(this.object.pointer);
    }

    private native float _Determinant_const(long _pointer_);

    /** **/
    public void SingularValueDecomposition(org.ogre4j.IMatrix3 rkL, org.ogre4j.IVector3 rkS, org.ogre4j.IMatrix3 rkR) {
        _SingularValueDecomposition__Matrix3rVector3rMatrix3r_const(this.object.pointer, rkL.getInstancePointer().pointer,  rkS.getInstancePointer().pointer,  rkR.getInstancePointer().pointer);
    }

    private native void _SingularValueDecomposition__Matrix3rVector3rMatrix3r_const(long _pointer_, long rkL, long rkS, long rkR);

    /** **/
    public void SingularValueComposition(org.ogre4j.IMatrix3 rkL, org.ogre4j.IVector3 rkS, org.ogre4j.IMatrix3 rkR) {
        _SingularValueComposition__Matrix3RVector3RMatrix3R(this.object.pointer, rkL.getInstancePointer().pointer,  rkS.getInstancePointer().pointer,  rkR.getInstancePointer().pointer);
    }

    private native void _SingularValueComposition__Matrix3RVector3RMatrix3R(long _pointer_, long rkL, long rkS, long rkR);

    /** **/
    public void Orthonormalize() {
        _Orthonormalize(this.object.pointer);
    }

    private native void _Orthonormalize(long _pointer_);

    /** **/
    public void QDUDecomposition(org.ogre4j.IMatrix3 rkQ, org.ogre4j.IVector3 rkD, org.ogre4j.IVector3 rkU) {
        _QDUDecomposition__Matrix3rVector3rVector3r_const(this.object.pointer, rkQ.getInstancePointer().pointer,  rkD.getInstancePointer().pointer,  rkU.getInstancePointer().pointer);
    }

    private native void _QDUDecomposition__Matrix3rVector3rVector3r_const(long _pointer_, long rkQ, long rkD, long rkU);

    /** **/
    public float SpectralNorm() {
         return _SpectralNorm_const(this.object.pointer);
    }

    private native float _SpectralNorm_const(long _pointer_);

    /** **/
    public void ToAxisAngle(org.ogre4j.IVector3 rkAxis, org.ogre4j.IRadian rfAngle) {
        _ToAxisAngle__Vector3rRadianr_const(this.object.pointer, rkAxis.getInstancePointer().pointer,  rfAngle.getInstancePointer().pointer);
    }

    private native void _ToAxisAngle__Vector3rRadianr_const(long _pointer_, long rkAxis, long rfAngle);

    /** **/
    public void ToAxisAngle(org.ogre4j.IVector3 rkAxis, org.ogre4j.IDegree rfAngle) {
        _ToAxisAngle__Vector3rDegreer_const(this.object.pointer, rkAxis.getInstancePointer().pointer,  rfAngle.getInstancePointer().pointer);
    }

    private native void _ToAxisAngle__Vector3rDegreer_const(long _pointer_, long rkAxis, long rfAngle);

    /** **/
    public void FromAxisAngle(org.ogre4j.IVector3 rkAxis, org.ogre4j.IRadian fRadians) {
        _FromAxisAngle__Vector3RRadianR(this.object.pointer, rkAxis.getInstancePointer().pointer,  fRadians.getInstancePointer().pointer);
    }

    private native void _FromAxisAngle__Vector3RRadianR(long _pointer_, long rkAxis, long fRadians);

    /** **/
    public boolean ToEulerAnglesXYZ(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle) {
         return _ToEulerAnglesXYZ__RadianrRadianrRadianr_const(this.object.pointer, rfYAngle.getInstancePointer().pointer,  rfPAngle.getInstancePointer().pointer,  rfRAngle.getInstancePointer().pointer);
    }

    private native boolean _ToEulerAnglesXYZ__RadianrRadianrRadianr_const(long _pointer_, long rfYAngle, long rfPAngle, long rfRAngle);

    /** **/
    public boolean ToEulerAnglesXZY(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle) {
         return _ToEulerAnglesXZY__RadianrRadianrRadianr_const(this.object.pointer, rfYAngle.getInstancePointer().pointer,  rfPAngle.getInstancePointer().pointer,  rfRAngle.getInstancePointer().pointer);
    }

    private native boolean _ToEulerAnglesXZY__RadianrRadianrRadianr_const(long _pointer_, long rfYAngle, long rfPAngle, long rfRAngle);

    /** **/
    public boolean ToEulerAnglesYXZ(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle) {
         return _ToEulerAnglesYXZ__RadianrRadianrRadianr_const(this.object.pointer, rfYAngle.getInstancePointer().pointer,  rfPAngle.getInstancePointer().pointer,  rfRAngle.getInstancePointer().pointer);
    }

    private native boolean _ToEulerAnglesYXZ__RadianrRadianrRadianr_const(long _pointer_, long rfYAngle, long rfPAngle, long rfRAngle);

    /** **/
    public boolean ToEulerAnglesYZX(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle) {
         return _ToEulerAnglesYZX__RadianrRadianrRadianr_const(this.object.pointer, rfYAngle.getInstancePointer().pointer,  rfPAngle.getInstancePointer().pointer,  rfRAngle.getInstancePointer().pointer);
    }

    private native boolean _ToEulerAnglesYZX__RadianrRadianrRadianr_const(long _pointer_, long rfYAngle, long rfPAngle, long rfRAngle);

    /** **/
    public boolean ToEulerAnglesZXY(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle) {
         return _ToEulerAnglesZXY__RadianrRadianrRadianr_const(this.object.pointer, rfYAngle.getInstancePointer().pointer,  rfPAngle.getInstancePointer().pointer,  rfRAngle.getInstancePointer().pointer);
    }

    private native boolean _ToEulerAnglesZXY__RadianrRadianrRadianr_const(long _pointer_, long rfYAngle, long rfPAngle, long rfRAngle);

    /** **/
    public boolean ToEulerAnglesZYX(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle) {
         return _ToEulerAnglesZYX__RadianrRadianrRadianr_const(this.object.pointer, rfYAngle.getInstancePointer().pointer,  rfPAngle.getInstancePointer().pointer,  rfRAngle.getInstancePointer().pointer);
    }

    private native boolean _ToEulerAnglesZYX__RadianrRadianrRadianr_const(long _pointer_, long rfYAngle, long rfPAngle, long rfRAngle);

    /** **/
    public void FromEulerAnglesXYZ(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle) {
        _FromEulerAnglesXYZ__RadianRRadianRRadianR(this.object.pointer, fYAngle.getInstancePointer().pointer,  fPAngle.getInstancePointer().pointer,  fRAngle.getInstancePointer().pointer);
    }

    private native void _FromEulerAnglesXYZ__RadianRRadianRRadianR(long _pointer_, long fYAngle, long fPAngle, long fRAngle);

    /** **/
    public void FromEulerAnglesXZY(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle) {
        _FromEulerAnglesXZY__RadianRRadianRRadianR(this.object.pointer, fYAngle.getInstancePointer().pointer,  fPAngle.getInstancePointer().pointer,  fRAngle.getInstancePointer().pointer);
    }

    private native void _FromEulerAnglesXZY__RadianRRadianRRadianR(long _pointer_, long fYAngle, long fPAngle, long fRAngle);

    /** **/
    public void FromEulerAnglesYXZ(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle) {
        _FromEulerAnglesYXZ__RadianRRadianRRadianR(this.object.pointer, fYAngle.getInstancePointer().pointer,  fPAngle.getInstancePointer().pointer,  fRAngle.getInstancePointer().pointer);
    }

    private native void _FromEulerAnglesYXZ__RadianRRadianRRadianR(long _pointer_, long fYAngle, long fPAngle, long fRAngle);

    /** **/
    public void FromEulerAnglesYZX(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle) {
        _FromEulerAnglesYZX__RadianRRadianRRadianR(this.object.pointer, fYAngle.getInstancePointer().pointer,  fPAngle.getInstancePointer().pointer,  fRAngle.getInstancePointer().pointer);
    }

    private native void _FromEulerAnglesYZX__RadianRRadianRRadianR(long _pointer_, long fYAngle, long fPAngle, long fRAngle);

    /** **/
    public void FromEulerAnglesZXY(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle) {
        _FromEulerAnglesZXY__RadianRRadianRRadianR(this.object.pointer, fYAngle.getInstancePointer().pointer,  fPAngle.getInstancePointer().pointer,  fRAngle.getInstancePointer().pointer);
    }

    private native void _FromEulerAnglesZXY__RadianRRadianRRadianR(long _pointer_, long fYAngle, long fPAngle, long fRAngle);

    /** **/
    public void FromEulerAnglesZYX(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle) {
        _FromEulerAnglesZYX__RadianRRadianRRadianR(this.object.pointer, fYAngle.getInstancePointer().pointer,  fPAngle.getInstancePointer().pointer,  fRAngle.getInstancePointer().pointer);
    }

    private native void _FromEulerAnglesZYX__RadianRRadianRRadianR(long _pointer_, long fYAngle, long fPAngle, long fRAngle);





    /** 
    Determines if this matrix involves a scaling. **/
    public boolean hasScale() {
         return _hasScale_const(this.object.pointer);
    }

    private native boolean _hasScale_const(long _pointer_);

    /** **/
    public static void TensorProduct(org.ogre4j.IVector3 rkU, org.ogre4j.IVector3 rkV, org.ogre4j.IMatrix3 rkProduct) {
        _TensorProduct__Vector3RVector3RMatrix3r( rkU.getInstancePointer().pointer,  rkV.getInstancePointer().pointer,  rkProduct.getInstancePointer().pointer);
    }

    private native static void _TensorProduct__Vector3RVector3RMatrix3r(long rkU, long rkV, long rkProduct);

    /** **/
    public static float getEPSILON() {
         return _getEPSILON();
    }

    private native static float _getEPSILON();

    /** **/
    public static org.ogre4j.IMatrix3 getZERO() {
         return new org.ogre4j.Matrix3(new InstancePointer(_getZERO()));
    }

    private native static long _getZERO();

    /** **/
    public static org.ogre4j.IMatrix3 getIDENTITY() {
         return new org.ogre4j.Matrix3(new InstancePointer(_getIDENTITY()));
    }

    private native static long _getIDENTITY();

}
