/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ColourValue extends org.xbig.base.NativeObject implements org.ogre4j.IColourValue {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ColourValue(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ColourValue(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ColourValue(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ColourValue(float red, float green, float blue, float alpha) {
         super( new org.xbig.base.InstancePointer(__createColourValue__FvFvFvFv( red,  green,  blue,  alpha)), false);
    }

    private native static long __createColourValue__FvFvFvFv(float red, float green, float blue, float alpha);

    /** **/
    public boolean operatorEqual(org.ogre4j.IColourValue rhs) {
         return _operatorEqual__ColourValueR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__ColourValueR_const(long _pointer_, long rhs);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IColourValue rhs) {
         return _operatorNotEqual__ColourValueR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__ColourValueR_const(long _pointer_, long rhs);

    /** 
    Retrieves colour as RGBA. **/
    public long getAsRGBA() {
         return _getAsRGBA_const(this.object.pointer);
    }

    private native long _getAsRGBA_const(long _pointer_);

    /** 
    Retrieves colour as ARGB. **/
    public long getAsARGB() {
         return _getAsARGB_const(this.object.pointer);
    }

    private native long _getAsARGB_const(long _pointer_);

    /** 
    Retrieves colour as BGRA. **/
    public long getAsBGRA() {
         return _getAsBGRA_const(this.object.pointer);
    }

    private native long _getAsBGRA_const(long _pointer_);

    /** 
    Retrieves colours as ABGR **/
    public long getAsABGR() {
         return _getAsABGR_const(this.object.pointer);
    }

    private native long _getAsABGR_const(long _pointer_);

    /** 
    Sets colour as RGBA. **/
    public void setAsRGBA(long val) {
        _setAsRGBA__RGBAV(this.object.pointer, val);
    }

    private native void _setAsRGBA__RGBAV(long _pointer_, long val);

    /** 
    Sets colour as ARGB. **/
    public void setAsARGB(long val) {
        _setAsARGB__ARGBV(this.object.pointer, val);
    }

    private native void _setAsARGB__ARGBV(long _pointer_, long val);

    /** 
    Sets colour as BGRA. **/
    public void setAsBGRA(long val) {
        _setAsBGRA__BGRAV(this.object.pointer, val);
    }

    private native void _setAsBGRA__BGRAV(long _pointer_, long val);

    /** 
    Sets colour as ABGR. **/
    public void setAsABGR(long val) {
        _setAsABGR__ABGRV(this.object.pointer, val);
    }

    private native void _setAsABGR__ABGRV(long _pointer_, long val);

    /** 
    Clamps colour value to the range [0, 1]. **/
    public void saturate() {
        _saturate(this.object.pointer);
    }

    private native void _saturate(long _pointer_);

    /** 
    As saturate, except that this colour value is unaffected and the saturated colour value is returned as a copy. **/
    public void saturateCopy(org.ogre4j.IColourValue returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_saturateCopy_const(this.object.pointer)), false);
    }

    private native long _saturateCopy_const(long _pointer_);

    /** **/
    public float operatorIndex_const(int i) {
         return _operatorIndex_const__iV_const(this.object.pointer, i);
    }

    private native float _operatorIndex_const__iV_const(long _pointer_, int i);

    /** **/
    public FloatPointer operatorIndex(int i) {
         return new FloatPointer(new InstancePointer(_operatorIndex__iV(this.object.pointer, i)));
    }

    private native long _operatorIndex__iV(long _pointer_, int i);

    /** **/
    public FloatPointer ptr() {
         return new FloatPointer(new InstancePointer(_ptr(this.object.pointer)));
    }

    private native long _ptr(long _pointer_);

    /** **/
    public FloatPointer ptr_const() {
         return new FloatPointer(new InstancePointer(_ptr_const_const(this.object.pointer)));
    }

    private native long _ptr_const_const(long _pointer_);

    /** **/
    public void operatorAddition(org.ogre4j.IColourValue returnValue, org.ogre4j.IColourValue rkVector) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorAddition__ColourValueR_const(this.object.pointer, rkVector.getInstancePointer().pointer)), false);
    }

    private native long _operatorAddition__ColourValueR_const(long _pointer_, long rkVector);

    /** **/
    public void operatorSubtraction(org.ogre4j.IColourValue returnValue, org.ogre4j.IColourValue rkVector) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction__ColourValueR_const(this.object.pointer, rkVector.getInstancePointer().pointer)), false);
    }

    private native long _operatorSubtraction__ColourValueR_const(long _pointer_, long rkVector);

    /** **/
    public void operatorMultiplication(org.ogre4j.IColourValue returnValue, float fScalar) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__FV_const(this.object.pointer, fScalar)), false);
    }

    private native long _operatorMultiplication__FV_const(long _pointer_, float fScalar);

    /** **/
    public void operatorMultiplication(org.ogre4j.IColourValue returnValue, org.ogre4j.IColourValue rhs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__ColourValueR_const(this.object.pointer, rhs.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__ColourValueR_const(long _pointer_, long rhs);

    /** **/
    public void operatorDivision(org.ogre4j.IColourValue returnValue, org.ogre4j.IColourValue rhs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorDivision__ColourValueR_const(this.object.pointer, rhs.getInstancePointer().pointer)), false);
    }

    private native long _operatorDivision__ColourValueR_const(long _pointer_, long rhs);

    /** **/
    public void operatorDivision(org.ogre4j.IColourValue returnValue, float fScalar) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorDivision__FV_const(this.object.pointer, fScalar)), false);
    }

    private native long _operatorDivision__FV_const(long _pointer_, float fScalar);

    /** **/
    public org.ogre4j.IColourValue operatorIncrementAndAssign(org.ogre4j.IColourValue rkVector) {
         return new org.ogre4j.ColourValue(new InstancePointer(_operatorIncrementAndAssign__ColourValueR(this.object.pointer, rkVector.getInstancePointer().pointer)));
    }

    private native long _operatorIncrementAndAssign__ColourValueR(long _pointer_, long rkVector);

    /** **/
    public org.ogre4j.IColourValue operatorDecrementAndAssign(org.ogre4j.IColourValue rkVector) {
         return new org.ogre4j.ColourValue(new InstancePointer(_operatorDecrementAndAssign__ColourValueR(this.object.pointer, rkVector.getInstancePointer().pointer)));
    }

    private native long _operatorDecrementAndAssign__ColourValueR(long _pointer_, long rkVector);

    /** **/
    public org.ogre4j.IColourValue operatorMultiplyAndAssign(float fScalar) {
         return new org.ogre4j.ColourValue(new InstancePointer(_operatorMultiplyAndAssign__FV(this.object.pointer, fScalar)));
    }

    private native long _operatorMultiplyAndAssign__FV(long _pointer_, float fScalar);

    /** **/
    public org.ogre4j.IColourValue operatorDivideAndAssign(float fScalar) {
         return new org.ogre4j.ColourValue(new InstancePointer(_operatorDivideAndAssign__FV(this.object.pointer, fScalar)));
    }

    private native long _operatorDivideAndAssign__FV(long _pointer_, float fScalar);

    /** 
    Set a colour value from Hue, Saturation and Brightness. **/
    public void setHSB(float hue, float saturation, float brightness) {
        _setHSB__RealvRealvRealv(this.object.pointer, hue,  saturation,  brightness);
    }

    private native void _setHSB__RealvRealvRealv(long _pointer_, float hue, float saturation, float brightness);

    /** 
    Convert the current colour to Hue, Saturation and Brightness values. **/
    public void getHSB(FloatPointer hue, FloatPointer saturation, FloatPointer brightness) {
        _getHSB__RealpRealpRealp_const(this.object.pointer, hue.object.pointer,  saturation.object.pointer,  brightness.object.pointer);
    }

    private native void _getHSB__RealpRealpRealp_const(long _pointer_, long hue, long saturation, long brightness);

    /** **/
    public static org.ogre4j.IColourValue getZERO() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getZERO()));
    }

    private native static long _getZERO();

    /** **/
    public static org.ogre4j.IColourValue getBlack() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getBlack()));
    }

    private native static long _getBlack();

    /** **/
    public static org.ogre4j.IColourValue getWhite() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getWhite()));
    }

    private native static long _getWhite();

    /** **/
    public static org.ogre4j.IColourValue getRed() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getRed()));
    }

    private native static long _getRed();

    /** **/
    public static org.ogre4j.IColourValue getGreen() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getGreen()));
    }

    private native static long _getGreen();

    /** **/
    public static org.ogre4j.IColourValue getBlue() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getBlue()));
    }

    private native static long _getBlue();

    /** **/
    public float getr() {
         return _getr(this.object.pointer);
    }

    private native float _getr(long _pointer_);

    /** **/
    public void setr(float _jni_value_) {
        _setr(this.object.pointer, _jni_value_);
    }

    private native void _setr(long _pointer_, float _jni_value_);

    /** **/
    public float getg() {
         return _getg(this.object.pointer);
    }

    private native float _getg(long _pointer_);

    /** **/
    public void setg(float _jni_value_) {
        _setg(this.object.pointer, _jni_value_);
    }

    private native void _setg(long _pointer_, float _jni_value_);

    /** **/
    public float getb() {
         return _getb(this.object.pointer);
    }

    private native float _getb(long _pointer_);

    /** **/
    public void setb(float _jni_value_) {
        _setb(this.object.pointer, _jni_value_);
    }

    private native void _setb(long _pointer_, float _jni_value_);

    /** **/
    public float geta() {
         return _geta(this.object.pointer);
    }

    private native float _geta(long _pointer_);

    /** **/
    public void seta(float _jni_value_) {
        _seta(this.object.pointer, _jni_value_);
    }

    private native void _seta(long _pointer_, float _jni_value_);

}
