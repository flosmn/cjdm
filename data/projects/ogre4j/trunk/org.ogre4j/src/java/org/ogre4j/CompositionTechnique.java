/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class CompositionTechnique extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTechnique {
static { System.loadLibrary("ogre4j");}
public static class TextureDefinition extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTechnique.ITextureDefinition {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TextureDefinition(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TextureDefinition(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TextureDefinition(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TextureDefinition() {
         super( new org.xbig.base.InstancePointer(__createTextureDefinition()), false);
    }

    private native static long __createTextureDefinition();

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public int getwidth() {
         return _getwidth(this.object.pointer);
    }

    private native int _getwidth(long _pointer_);

    /** **/
    public void setwidth(int _jni_value_) {
        _setwidth(this.object.pointer, _jni_value_);
    }

    private native void _setwidth(long _pointer_, int _jni_value_);

    /** **/
    public int getheight() {
         return _getheight(this.object.pointer);
    }

    private native int _getheight(long _pointer_);

    /** **/
    public void setheight(int _jni_value_) {
        _setheight(this.object.pointer, _jni_value_);
    }

    private native void _setheight(long _pointer_, int _jni_value_);

    /** **/
    public float getwidthFactor() {
         return _getwidthFactor(this.object.pointer);
    }

    private native float _getwidthFactor(long _pointer_);

    /** **/
    public void setwidthFactor(float _jni_value_) {
        _setwidthFactor(this.object.pointer, _jni_value_);
    }

    private native void _setwidthFactor(long _pointer_, float _jni_value_);

    /** **/
    public float getheightFactor() {
         return _getheightFactor(this.object.pointer);
    }

    private native float _getheightFactor(long _pointer_);

    /** **/
    public void setheightFactor(float _jni_value_) {
        _setheightFactor(this.object.pointer, _jni_value_);
    }

    private native void _setheightFactor(long _pointer_, float _jni_value_);

    /** **/
    public void getformatList(org.ogre4j.IPixelFormatList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getformatList(this.object.pointer)), false);
    }

    private native long _getformatList(long _pointer_);

    /** **/
    public void setformatList(org.ogre4j.IPixelFormatList _jni_value_) {
        _setformatList(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setformatList(long _pointer_, long _jni_value_);

}
public static class TargetPasses extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTechnique.ITargetPasses {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TargetPasses(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TargetPasses(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TargetPasses(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TargetPasses() {
         super( new org.xbig.base.InstancePointer(__createTargetPasses()), false);
    }

    private native static long __createTargetPasses();

    /** **/
    public void assign(int num, org.ogre4j.ICompositionTargetPass val) {
        _assign__ivOgre_CompositionTargetPassP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_CompositionTargetPassP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ICompositionTargetPass at(int loc) {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ICompositionTargetPass back() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionTargetPass front() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ICompositionTargetPass val) {
        _push_back__Ogre_CompositionTargetPassP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_CompositionTargetPassP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class TargetPassIterator extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTechnique.ITargetPassIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TargetPassIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TargetPassIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TargetPassIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TargetPassIterator(org.ogre4j.ICompositionTechnique.ITargetPasses c) {
         super( new org.xbig.base.InstancePointer(__createTargetPassIterator__Ogre_CompositionTechnique_TargetPassesr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createTargetPassIterator__Ogre_CompositionTechnique_TargetPassesr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionTargetPass getNext() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionTargetPass peekNext() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_peekNext(this.object.pointer)));
    }

    private native long _peekNext(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.ICompositionTargetPass> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.ICompositionTargetPass>(new InstancePointer(_peekNextPtr(this.object.pointer)));
    }

    private native long _peekNextPtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class TextureDefinitions extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTechnique.ITextureDefinitions {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TextureDefinitions(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TextureDefinitions(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TextureDefinitions(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TextureDefinitions() {
         super( new org.xbig.base.InstancePointer(__createTextureDefinitions()), false);
    }

    private native static long __createTextureDefinitions();

    /** **/
    public void assign(int num, org.ogre4j.ICompositionTechnique.ITextureDefinition val) {
        _assign__ivOgre_CompositionTechnique_TextureDefinitionP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_CompositionTechnique_TextureDefinitionP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition at(int loc) {
         return new org.ogre4j.CompositionTechnique.TextureDefinition(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition back() {
         return new org.ogre4j.CompositionTechnique.TextureDefinition(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition front() {
         return new org.ogre4j.CompositionTechnique.TextureDefinition(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ICompositionTechnique.ITextureDefinition val) {
        _push_back__Ogre_CompositionTechnique_TextureDefinitionP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_CompositionTechnique_TextureDefinitionP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class TextureDefinitionIterator extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTechnique.ITextureDefinitionIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TextureDefinitionIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TextureDefinitionIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TextureDefinitionIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TextureDefinitionIterator(org.ogre4j.ICompositionTechnique.ITextureDefinitions c) {
         super( new org.xbig.base.InstancePointer(__createTextureDefinitionIterator__Ogre_CompositionTechnique_TextureDefinitionsr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createTextureDefinitionIterator__Ogre_CompositionTechnique_TextureDefinitionsr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition getNext() {
         return new org.ogre4j.CompositionTechnique.TextureDefinition(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition peekNext() {
         return new org.ogre4j.CompositionTechnique.TextureDefinition(new InstancePointer(_peekNext(this.object.pointer)));
    }

    private native long _peekNext(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.ICompositionTechnique.ITextureDefinition> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.ICompositionTechnique.ITextureDefinition>(new InstancePointer(_peekNextPtr(this.object.pointer)));
    }

    private native long _peekNextPtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
private static class Instances extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTechnique.IInstances {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Instances(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Instances(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Instances(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Instances() {
         super( new org.xbig.base.InstancePointer(__createInstances()), false);
    }

    private native static long __createInstances();

    /** **/
    public void assign(int num, org.ogre4j.ICompositorInstance val) {
        _assign__ivOgre_CompositorInstanceP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_CompositorInstanceP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ICompositorInstance at(int loc) {
         return new org.ogre4j.CompositorInstance(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ICompositorInstance back() {
         return new org.ogre4j.CompositorInstance(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ICompositorInstance front() {
         return new org.ogre4j.CompositorInstance(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ICompositorInstance val) {
        _push_back__Ogre_CompositorInstanceP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_CompositorInstanceP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CompositionTechnique(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CompositionTechnique(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CompositionTechnique(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CompositionTechnique(org.ogre4j.ICompositor parent) {
         super( new org.xbig.base.InstancePointer(__createCompositionTechnique__Compositorp( parent.getInstancePointer().pointer)), false);
    }

    private native static long __createCompositionTechnique__Compositorp(long parent);

    /** 
    Create a new local texture definition, and return a pointer to it. **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition createTextureDefinition(String name) {
         return new org.ogre4j.CompositionTechnique.TextureDefinition(new InstancePointer(_createTextureDefinition__StringR(this.object.pointer, name)));
    }

    private native long _createTextureDefinition__StringR(long _pointer_, String name);

    /** 
    Remove and destroy a local texture definition. **/
    public void removeTextureDefinition(int idx) {
        _removeTextureDefinition__iv(this.object.pointer, idx);
    }

    private native void _removeTextureDefinition__iv(long _pointer_, int idx);

    /** 
    Get a local texture definition. **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition getTextureDefinition(int idx) {
         return new org.ogre4j.CompositionTechnique.TextureDefinition(new InstancePointer(_getTextureDefinition__iv(this.object.pointer, idx)));
    }

    private native long _getTextureDefinition__iv(long _pointer_, int idx);

    /** 
    Get the number of local texture definitions. **/
    public int getNumTextureDefinitions() {
         return _getNumTextureDefinitions(this.object.pointer);
    }

    private native int _getNumTextureDefinitions(long _pointer_);

    /** 
    Remove all  Definitions **/
    public void removeAllTextureDefinitions() {
        _removeAllTextureDefinitions(this.object.pointer);
    }

    private native void _removeAllTextureDefinitions(long _pointer_);

    /** 
    Get an iterator over the TextureDefinitions in this . **/
    public void getTextureDefinitionIterator(org.ogre4j.ICompositionTechnique.ITextureDefinitionIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTextureDefinitionIterator(this.object.pointer)), false);
    }

    private native long _getTextureDefinitionIterator(long _pointer_);

    /** 
    Create a new target pass, and return a pointer to it. **/
    public org.ogre4j.ICompositionTargetPass createTargetPass() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_createTargetPass(this.object.pointer)));
    }

    private native long _createTargetPass(long _pointer_);

    /** 
    Remove a target pass. It will also be destroyed. **/
    public void removeTargetPass(int idx) {
        _removeTargetPass__iv(this.object.pointer, idx);
    }

    private native void _removeTargetPass__iv(long _pointer_, int idx);

    /** 
    Get a target pass. **/
    public org.ogre4j.ICompositionTargetPass getTargetPass(int idx) {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_getTargetPass__iv(this.object.pointer, idx)));
    }

    private native long _getTargetPass__iv(long _pointer_, int idx);

    /** 
    Get the number of target passes. **/
    public int getNumTargetPasses() {
         return _getNumTargetPasses(this.object.pointer);
    }

    private native int _getNumTargetPasses(long _pointer_);

    /** 
    Remove all target passes. **/
    public void removeAllTargetPasses() {
        _removeAllTargetPasses(this.object.pointer);
    }

    private native void _removeAllTargetPasses(long _pointer_);

    /** 
    Get an iterator over the TargetPasses in this . **/
    public void getTargetPassIterator(org.ogre4j.ICompositionTechnique.ITargetPassIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTargetPassIterator(this.object.pointer)), false);
    }

    private native long _getTargetPassIterator(long _pointer_);

    /** 
    Get output (final) target pass **/
    public org.ogre4j.ICompositionTargetPass getOutputTargetPass() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_getOutputTargetPass(this.object.pointer)));
    }

    private native long _getOutputTargetPass(long _pointer_);

    /** 
    Determine if this technique is supported on the current rendering device. **/
    public boolean isSupported(boolean allowTextureDegradation) {
         return _isSupported__bv(this.object.pointer, allowTextureDegradation);
    }

    private native boolean _isSupported__bv(long _pointer_, boolean allowTextureDegradation);

    /** 
    Create an instance of this technique. **/
    public org.ogre4j.ICompositorInstance createInstance(org.ogre4j.ICompositorChain chain) {
         return new org.ogre4j.CompositorInstance(new InstancePointer(_createInstance__CompositorChainp(this.object.pointer, chain.getInstancePointer().pointer)));
    }

    private native long _createInstance__CompositorChainp(long _pointer_, long chain);

    /** 
    Destroy an instance of this technique. **/
    public void destroyInstance(org.ogre4j.ICompositorInstance instance) {
        _destroyInstance__CompositorInstancep(this.object.pointer, instance.getInstancePointer().pointer);
    }

    private native void _destroyInstance__CompositorInstancep(long _pointer_, long instance);

    /** 
    Get parent object **/
    public org.ogre4j.ICompositor getParent() {
         return new org.ogre4j.Compositor(new InstancePointer(_getParent(this.object.pointer)));
    }

    private native long _getParent(long _pointer_);

}
