/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IAnimation extends INativeObject, org.ogre4j.IAnimationAllocatedObject {

public interface INodeTrackList extends INativeObject, org.std.Imap< Integer, org.ogre4j.INodeAnimationTrack > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.INodeAnimationTrack get(int key);

    /** **/
    public void insert(int key, org.ogre4j.INodeAnimationTrack value);

}
public interface INodeTrackIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.IAnimation.INodeTrackList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.INodeAnimationTrack getNext();

    /** **/
    public org.ogre4j.INodeAnimationTrack peekNextValue();

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.IAnimation.INodeTrackIterator operatorAssignment(org.ogre4j.IAnimation.INodeTrackIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.INodeAnimationTrack> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface INumericTrackList extends INativeObject, org.std.Imap< Integer, org.ogre4j.INumericAnimationTrack > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.INumericAnimationTrack get(int key);

    /** **/
    public void insert(int key, org.ogre4j.INumericAnimationTrack value);

}
public interface INumericTrackIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.IAnimation.INumericTrackList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.INumericAnimationTrack getNext();

    /** **/
    public org.ogre4j.INumericAnimationTrack peekNextValue();

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.IAnimation.INumericTrackIterator operatorAssignment(org.ogre4j.IAnimation.INumericTrackIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.INumericAnimationTrack> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IVertexTrackList extends INativeObject, org.std.Imap< Integer, org.ogre4j.IVertexAnimationTrack > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IVertexAnimationTrack get(int key);

    /** **/
    public void insert(int key, org.ogre4j.IVertexAnimationTrack value);

}
public interface IVertexTrackIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.IAnimation.IVertexTrackList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IVertexAnimationTrack getNext();

    /** **/
    public org.ogre4j.IVertexAnimationTrack peekNextValue();

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.IAnimation.IVertexTrackIterator operatorAssignment(org.ogre4j.IAnimation.IVertexTrackIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IVertexAnimationTrack> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface ITrackHandleList extends INativeObject, org.std.Iset< Integer > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IKeyFrameTimeList extends INativeObject, org.std.Ivector< Float > {

    /** **/
    public void assign(int num, float val);

    /** **/
    public FloatPointer at(int loc);

    /** **/
    public FloatPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public FloatPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(float val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Gets the name of this animation. **/
    public String getName();

    /** 
    Gets the total length of the animation. **/
    public float getLength();

    /** 
    Sets the length of the animation. **/
    public void setLength(float len);

    /** 
    Creates a  for animating a . **/
    public org.ogre4j.INodeAnimationTrack createNodeTrack(int handle);

    /** 
    Creates a  for animating any numeric value. **/
    public org.ogre4j.INumericAnimationTrack createNumericTrack(int handle);

    /** 
    Creates a  for animating vertex position data. **/
    public org.ogre4j.IVertexAnimationTrack createVertexTrack(int handle, org.ogre4j.VertexAnimationType animType);

    /** 
    Creates a new  automatically associated with a . **/
    public org.ogre4j.INodeAnimationTrack createNodeTrack(int handle, org.ogre4j.INode node);

    /** 
    Creates a  and associates it with an animable. **/
    public org.ogre4j.INumericAnimationTrack createNumericTrack(int handle, org.ogre4j.IAnimableValuePtr anim);

    /** 
    Creates a  and associates it with . **/
    public org.ogre4j.IVertexAnimationTrack createVertexTrack(int handle, org.ogre4j.IVertexData data, org.ogre4j.VertexAnimationType animType);

    /** 
    Gets the number of  objects contained in this animation. **/
    public int getNumNodeTracks();

    /** 
    Gets a node track by it's handle. **/
    public org.ogre4j.INodeAnimationTrack getNodeTrack(int handle);

    /** 
    Does a track exist with the given handle? **/
    public boolean hasNodeTrack(int handle);

    /** 
    Gets the number of  objects contained in this animation. **/
    public int getNumNumericTracks();

    /** 
    Gets a numeric track by it's handle. **/
    public org.ogre4j.INumericAnimationTrack getNumericTrack(int handle);

    /** 
    Does a track exist with the given handle? **/
    public boolean hasNumericTrack(int handle);

    /** 
    Gets the number of  objects contained in this animation. **/
    public int getNumVertexTracks();

    /** 
    Gets a Vertex track by it's handle. **/
    public org.ogre4j.IVertexAnimationTrack getVertexTrack(int handle);

    /** 
    Does a track exist with the given handle? **/
    public boolean hasVertexTrack(int handle);

    /** 
    Destroys the node track with the given handle. **/
    public void destroyNodeTrack(int handle);

    /** 
    Destroys the numeric track with the given handle. **/
    public void destroyNumericTrack(int handle);

    /** 
    Destroys the Vertex track with the given handle. **/
    public void destroyVertexTrack(int handle);

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllTracks();

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllNodeTracks();

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllNumericTracks();

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllVertexTracks();

    /** 
    Applies an animation given a specific time point and weight. **/
    public void apply(float timePos, float weight, float scale);

    /** 
    Applies all node tracks given a specific time point and weight to a given skeleton. **/
    public void apply(org.ogre4j.ISkeleton skeleton, float timePos, float weight, float scale);

    /** 
    Applies all node tracks given a specific time point and weight to a given skeleton. **/
    public void apply(org.ogre4j.ISkeleton skeleton, float timePos, float weight, org.ogre4j.IAnimationState.IBoneBlendMask blendMask, float scale);

    /** 
    Applies all vertex tracks given a specific time point and weight to a given entity. **/
    public void apply(org.ogre4j.IEntity entity, float timePos, float weight, boolean software, boolean hardware);

    /** 
    Tells the animation how to interpolate between keyframes. **/
    public void setInterpolationMode(org.ogre4j.Animation.InterpolationMode im);

    /** 
    Gets the current interpolation mode of this animation. **/
    public org.ogre4j.Animation.InterpolationMode getInterpolationMode();

    /** 
    Tells the animation how to interpolate rotations. **/
    public void setRotationInterpolationMode(org.ogre4j.Animation.RotationInterpolationMode im);

    /** 
    Gets the current rotation interpolation mode of this animation. **/
    public org.ogre4j.Animation.RotationInterpolationMode getRotationInterpolationMode();

    /** **/
    public org.ogre4j.IAnimation.INodeTrackList _getNodeTrackList();

    /** **/
    public void getNodeTrackIterator(org.ogre4j.IAnimation.INodeTrackIterator returnValue);

    /** **/
    public org.ogre4j.IAnimation.INumericTrackList _getNumericTrackList();

    /** **/
    public void getNumericTrackIterator(org.ogre4j.IAnimation.INumericTrackIterator returnValue);

    /** **/
    public org.ogre4j.IAnimation.IVertexTrackList _getVertexTrackList();

    /** **/
    public void getVertexTrackIterator(org.ogre4j.IAnimation.IVertexTrackIterator returnValue);

    /** 
    Optimise an animation by removing unnecessary tracks and keyframes. **/
    public void optimise(boolean discardIdentityNodeTracks);

    /** 
    Internal method for collecting identity node tracks. **/
    public void _collectIdentityNodeTracks(org.ogre4j.IAnimation.ITrackHandleList tracks);

    /** 
    Internal method for destroy given node tracks. **/
    public void _destroyNodeTracks(org.ogre4j.IAnimation.ITrackHandleList tracks);

    /** 
    Clone this animation. **/
    public org.ogre4j.IAnimation clone(String newName);

    /** 
    Internal method used to tell the animation that keyframe list has been changed, which may cause it to rebuild some internal data **/
    public void _keyFrameListChanged();

    /** 
    Internal method used to convert time position to time index object. **/
    public void _getTimeIndex(org.ogre4j.ITimeIndex returnValue, float timePos);

}
