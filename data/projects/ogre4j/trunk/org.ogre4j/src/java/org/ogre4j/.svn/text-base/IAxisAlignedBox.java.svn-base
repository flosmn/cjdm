/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IAxisAlignedBox extends INativeObject {

    /** **/
    public org.ogre4j.IAxisAlignedBox operatorAssignment(org.ogre4j.IAxisAlignedBox rhs);

    /** **/
    public org.ogre4j.IVector3 getMinimum_const();

    /** 
    Gets a modifiable version of the minimum corner of the box. **/
    public org.ogre4j.IVector3 getMinimum();

    /** **/
    public org.ogre4j.IVector3 getMaximum_const();

    /** 
    Gets a modifiable version of the maximum corner of the box. **/
    public org.ogre4j.IVector3 getMaximum();

    /** 
    Sets the minimum corner of the box. **/
    public void setMinimum(org.ogre4j.IVector3 vec);

    /** **/
    public void setMinimum(float x, float y, float z);

    /** 
    Changes one of the components of the minimum corner of the box used to resize only one dimension of the box **/
    public void setMinimumX(float x);

    /** **/
    public void setMinimumY(float y);

    /** **/
    public void setMinimumZ(float z);

    /** 
    Sets the maximum corner of the box. **/
    public void setMaximum(org.ogre4j.IVector3 vec);

    /** **/
    public void setMaximum(float x, float y, float z);

    /** 
    Changes one of the components of the maximum corner of the box used to resize only one dimension of the box **/
    public void setMaximumX(float x);

    /** **/
    public void setMaximumY(float y);

    /** **/
    public void setMaximumZ(float z);

    /** 
    Sets both minimum and maximum extents at once. **/
    public void setExtents(org.ogre4j.IVector3 _min, org.ogre4j.IVector3 _max);

    /** **/
    public void setExtents(float mx, float my, float mz, float Mx, float My, float Mz);

    /** 
    Returns a pointer to an array of 8 corner points, useful for collision vs. non-aligned objects. **/
    public org.ogre4j.IVector3 getAllCorners();

    /** 
    gets the position of one of the corners **/
    public void getCorner(org.ogre4j.IVector3 returnValue, org.ogre4j.AxisAlignedBox.CornerEnum cornerToGet);

    /** 
    Merges the passed in box into the current box. The result is the box which encompasses both. **/
    public void merge(org.ogre4j.IAxisAlignedBox rhs);

    /** 
    Extends the box to encompass the specified point (if needed). **/
    public void merge(org.ogre4j.IVector3 point);

    /** 
    Transforms the box according to the matrix supplied. **/
    public void transform(org.ogre4j.IMatrix4 matrix);

    /** 
    Transforms the box according to the affine matrix supplied. **/
    public void transformAffine(org.ogre4j.IMatrix4 m);

    /** 
    Sets the box to a 'null' value i.e. not a box. **/
    public void setNull();

    /** 
    Returns true if the box is null i.e. empty. **/
    public boolean isNull();

    /** 
    Returns true if the box is finite. **/
    public boolean isFinite();

    /** 
    Sets the box to 'infinite' **/
    public void setInfinite();

    /** 
    Returns true if the box is infinite. **/
    public boolean isInfinite();

    /** 
    Returns whether or not this box intersects another. **/
    public boolean intersects(org.ogre4j.IAxisAlignedBox b2);

    /** **/
    public void intersection(org.ogre4j.IAxisAlignedBox returnValue, org.ogre4j.IAxisAlignedBox b2);

    /** **/
    public float volume();

    /** 
    Scales the AABB by the vector given. **/
    public void scale(org.ogre4j.IVector3 s);

    /** 
    Tests whether this box intersects a sphere. **/
    public boolean intersects(org.ogre4j.ISphere s);

    /** 
    Tests whether this box intersects a plane. **/
    public boolean intersects(org.ogre4j.IPlane p);

    /** 
    Tests whether the vector point is within this box. **/
    public boolean intersects(org.ogre4j.IVector3 v);

    /** **/
    public void getCenter(org.ogre4j.IVector3 returnValue);

    /** **/
    public void getSize(org.ogre4j.IVector3 returnValue);

    /** **/
    public void getHalfSize(org.ogre4j.IVector3 returnValue);

    /** 
    Tests whether the given point contained by this box. **/
    public boolean contains(org.ogre4j.IVector3 v);

    /** 
    Tests whether another box contained by this box. **/
    public boolean contains(org.ogre4j.IAxisAlignedBox other);

    /** 
    Tests 2 boxes for equality. **/
    public boolean operatorEqual(org.ogre4j.IAxisAlignedBox rhs);

    /** 
    Tests 2 boxes for inequality. **/
    public boolean operatorNotEqual(org.ogre4j.IAxisAlignedBox rhs);

}
