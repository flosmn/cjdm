/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class AnimationTrack extends org.xbig.base.NativeObject implements org.ogre4j.IAnimationTrack {
static { System.loadLibrary("ogre4j");}
public static class Listener extends org.xbig.base.NativeObject implements org.ogre4j.IAnimationTrack.IListener {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Listener(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Listener(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Listener(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Get an interpolated keyframe for this track at the given time. **/
    public boolean getInterpolatedKeyFrame(org.ogre4j.IAnimationTrack t, org.ogre4j.ITimeIndex timeIndex, org.ogre4j.IKeyFrame kf) {
         return _getInterpolatedKeyFrame__AnimationTrackPTimeIndexRKeyFramep(this.object.pointer, t.getInstancePointer().pointer,  timeIndex.getInstancePointer().pointer,  kf.getInstancePointer().pointer);
    }

    private native boolean _getInterpolatedKeyFrame__AnimationTrackPTimeIndexRKeyFramep(long _pointer_, long t, long timeIndex, long kf);

}
protected static class KeyFrameList extends org.xbig.base.NativeObject implements org.ogre4j.IAnimationTrack.IKeyFrameList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public KeyFrameList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected KeyFrameList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public KeyFrameList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public KeyFrameList() {
         super( new org.xbig.base.InstancePointer(__createKeyFrameList()), false);
    }

    private native static long __createKeyFrameList();

    /** **/
    public void assign(int num, org.ogre4j.IKeyFrame val) {
        _assign__ivOgre_KeyFrameP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_KeyFrameP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IKeyFrame at(int loc) {
         return new org.ogre4j.KeyFrame(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IKeyFrame back() {
         return new org.ogre4j.KeyFrame(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IKeyFrame front() {
         return new org.ogre4j.KeyFrame(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IKeyFrame val) {
        _push_back__Ogre_KeyFrameP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_KeyFrameP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class KeyFrameIndexMap extends org.xbig.base.NativeObject implements org.ogre4j.IAnimationTrack.IKeyFrameIndexMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public KeyFrameIndexMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected KeyFrameIndexMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public KeyFrameIndexMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public KeyFrameIndexMap() {
         super( new org.xbig.base.InstancePointer(__createKeyFrameIndexMap()), false);
    }

    private native static long __createKeyFrameIndexMap();

    /** **/
    public void assign(int num, int val) {
        _assign__ivHR(this.object.pointer, num,  val);
    }

    private native void _assign__ivHR(long _pointer_, int num, int val);

    /** **/
    public IntegerPointer at(int loc) {
         return new IntegerPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public IntegerPointer back() {
         return new IntegerPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public IntegerPointer front() {
         return new IntegerPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(int val) {
        _push_back__HR(this.object.pointer, val);
    }

    private native void _push_back__HR(long _pointer_, int val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AnimationTrack(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AnimationTrack(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AnimationTrack(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Get the handle associated with this track. **/
    public int getHandle() {
         return _getHandle_const(this.object.pointer);
    }

    private native int _getHandle_const(long _pointer_);

    /** 
    Returns the number of keyframes in this animation. **/
    public int getNumKeyFrames() {
         return _getNumKeyFrames_const(this.object.pointer);
    }

    private native int _getNumKeyFrames_const(long _pointer_);

    /** 
    Returns the  at the specified index. **/
    public org.ogre4j.IKeyFrame getKeyFrame(int index) {
         return new org.ogre4j.KeyFrame(new InstancePointer(_getKeyFrame__Hv_const(this.object.pointer, index)));
    }

    private native long _getKeyFrame__Hv_const(long _pointer_, int index);

    /** 
    Gets the 2  objects which are active at the time given, and the blend value between them. **/
    public float getKeyFramesAtTime(org.ogre4j.ITimeIndex timeIndex, NativeObjectPointer<org.ogre4j.IKeyFrame> keyFrame1, NativeObjectPointer<org.ogre4j.IKeyFrame> keyFrame2, IntegerPointer firstKeyIndex) {
         return _getKeyFramesAtTime__TimeIndexRKeyFramepKeyFramepHp_const(this.object.pointer, timeIndex.getInstancePointer().pointer,  keyFrame1.getInstancePointer().pointer,  keyFrame2.getInstancePointer().pointer,  firstKeyIndex.object.pointer);
    }

    private native float _getKeyFramesAtTime__TimeIndexRKeyFramepKeyFramepHp_const(long _pointer_, long timeIndex, long keyFrame1, long keyFrame2, long firstKeyIndex);

    /** 
    Creates a new  and adds it to this animation at the given time index. **/
    public org.ogre4j.IKeyFrame createKeyFrame(float timePos) {
         return new org.ogre4j.KeyFrame(new InstancePointer(_createKeyFrame__Realv(this.object.pointer, timePos)));
    }

    private native long _createKeyFrame__Realv(long _pointer_, float timePos);

    /** 
    Removes a  by it's index. **/
    public void removeKeyFrame(int index) {
        _removeKeyFrame__Hv(this.object.pointer, index);
    }

    private native void _removeKeyFrame__Hv(long _pointer_, int index);

    /** 
    Removes all the KeyFrames from this track. **/
    public void removeAllKeyFrames() {
        _removeAllKeyFrames(this.object.pointer);
    }

    private native void _removeAllKeyFrames(long _pointer_);

    /** 
    Gets a  object which contains the interpolated transforms at the time index specified. **/
    public void getInterpolatedKeyFrame(org.ogre4j.ITimeIndex timeIndex, org.ogre4j.IKeyFrame kf) {
        _getInterpolatedKeyFrame__TimeIndexRKeyFramep_const(this.object.pointer, timeIndex.getInstancePointer().pointer,  kf.getInstancePointer().pointer);
    }

    private native void _getInterpolatedKeyFrame__TimeIndexRKeyFramep_const(long _pointer_, long timeIndex, long kf);

    /** 
    Applies an animation track to the designated target. **/
    public void apply(org.ogre4j.ITimeIndex timeIndex, float weight, float scale) {
        _apply__TimeIndexRRealvRealv(this.object.pointer, timeIndex.getInstancePointer().pointer,  weight,  scale);
    }

    private native void _apply__TimeIndexRRealvRealv(long _pointer_, long timeIndex, float weight, float scale);

    /** 
    Internal method used to tell the track that keyframe data has been changed, which may cause it to rebuild some internal data. **/
    public void _keyFrameDataChanged() {
        __keyFrameDataChanged_const(this.object.pointer);
    }

    private native void __keyFrameDataChanged_const(long _pointer_);

    /** 
    Method to determine if this track has any KeyFrames which are doing anything useful - can be used to determine if this track can be optimised out. **/
    public boolean hasNonZeroKeyFrames() {
         return _hasNonZeroKeyFrames_const(this.object.pointer);
    }

    private native boolean _hasNonZeroKeyFrames_const(long _pointer_);

    /** 
    Optimise the current track by removing any duplicate keyframes. **/
    public void optimise() {
        _optimise(this.object.pointer);
    }

    private native void _optimise(long _pointer_);

    /** 
    Internal method to collect keyframe times, in unique, ordered format. **/
    public void _collectKeyFrameTimes(org.std.Ivector< Float > keyFrameTimes) {
        __collectKeyFrameTimes__std_vector__Real__r(this.object.pointer, keyFrameTimes.getInstancePointer().pointer);
    }

    private native void __collectKeyFrameTimes__std_vector__Real__r(long _pointer_, long keyFrameTimes);

    /** 
    Internal method to build keyframe time index map to translate global lower bound index to local lower bound index. **/
    public void _buildKeyFrameIndexMap(org.std.Ivector< Float > keyFrameTimes) {
        __buildKeyFrameIndexMap__std_vector__Real__r(this.object.pointer, keyFrameTimes.getInstancePointer().pointer);
    }

    private native void __buildKeyFrameIndexMap__std_vector__Real__r(long _pointer_, long keyFrameTimes);

    /** 
    Set a listener for this track. **/
    public void setListener(org.ogre4j.IAnimationTrack.IListener l) {
        _setListener__Listenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long l);

    /** 
    Returns the parent  object for this track. **/
    public org.ogre4j.IAnimation getParent() {
         return new org.ogre4j.Animation(new InstancePointer(_getParent_const(this.object.pointer)));
    }

    private native long _getParent_const(long _pointer_);

}
