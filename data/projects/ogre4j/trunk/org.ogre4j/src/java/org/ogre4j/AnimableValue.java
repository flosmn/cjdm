/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class AnimableValue extends org.xbig.base.NativeObject implements org.ogre4j.IAnimableValue {
static { System.loadLibrary("ogre4j");}
public enum ValueType implements INativeEnum < ValueType > {
    INT(ValueTypeHelper.ENUM_VALUES[0]),
    REAL(ValueTypeHelper.ENUM_VALUES[1]),
    VECTOR2(ValueTypeHelper.ENUM_VALUES[2]),
    VECTOR3(ValueTypeHelper.ENUM_VALUES[3]),
    VECTOR4(ValueTypeHelper.ENUM_VALUES[4]),
    QUATERNION(ValueTypeHelper.ENUM_VALUES[5]),
    COLOUR(ValueTypeHelper.ENUM_VALUES[6]),
    RADIAN(ValueTypeHelper.ENUM_VALUES[7]),
    DEGREE(ValueTypeHelper.ENUM_VALUES[8]);

    private int value;

    ValueType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public ValueType getEnum(int val) {
        return toEnum(val);
    }

    public static final ValueType toEnum(int retval) {
    if (retval ==INT.value)
        return ValueType.INT;
    else if (retval ==REAL.value)
        return ValueType.REAL;
    else if (retval ==VECTOR2.value)
        return ValueType.VECTOR2;
    else if (retval ==VECTOR3.value)
        return ValueType.VECTOR3;
    else if (retval ==VECTOR4.value)
        return ValueType.VECTOR4;
    else if (retval ==QUATERNION.value)
        return ValueType.QUATERNION;
    else if (retval ==COLOUR.value)
        return ValueType.COLOUR;
    else if (retval ==RADIAN.value)
        return ValueType.RADIAN;
    else if (retval ==DEGREE.value)
        return ValueType.DEGREE;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class ValueTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AnimableValue(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AnimableValue(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AnimableValue(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public org.ogre4j.AnimableValue.ValueType getType() {
         return org.ogre4j.AnimableValue.ValueType.toEnum(_getType_const(this.object.pointer));
    }

    private native int _getType_const(long _pointer_);

    /** **/
    public void setCurrentStateAsBaseValue() {
        _setCurrentStateAsBaseValue(this.object.pointer);
    }

    private native void _setCurrentStateAsBaseValue(long _pointer_);

    /** **/
    public void setValue(int a1) {
        _setValue__iv(this.object.pointer, a1);
    }

    private native void _setValue__iv(long _pointer_, int a1);

    /** **/
    public void setValue(float a1) {
        _setValue__Realv(this.object.pointer, a1);
    }

    private native void _setValue__Realv(long _pointer_, float a1);

    /** **/
    public void setValue(org.ogre4j.IVector2 a1) {
        _setValue__Vector2R(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _setValue__Vector2R(long _pointer_, long a1);

    /** **/
    public void setValue(org.ogre4j.IVector3 a1) {
        _setValue__Vector3R(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _setValue__Vector3R(long _pointer_, long a1);

    /** **/
    public void setValue(org.ogre4j.IVector4 a1) {
        _setValue__Vector4R(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _setValue__Vector4R(long _pointer_, long a1);

    /** **/
    public void setValue(org.ogre4j.IQuaternion a1) {
        _setValue__QuaternionR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _setValue__QuaternionR(long _pointer_, long a1);

    /** **/
    public void setValue(org.ogre4j.IColourValue a1) {
        _setValue__ColourValueR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _setValue__ColourValueR(long _pointer_, long a1);

    /** **/
    public void setValue(org.ogre4j.IRadian a1) {
        _setValue__RadianR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _setValue__RadianR(long _pointer_, long a1);

    /** **/
    public void setValue(org.ogre4j.IDegree a1) {
        _setValue__DegreeR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _setValue__DegreeR(long _pointer_, long a1);

    /** **/
    public void setValue(org.ogre4j.IAny val) {
        _setValue__AnyR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setValue__AnyR(long _pointer_, long val);

    /** **/
    public void resetToBaseValue() {
        _resetToBaseValue(this.object.pointer);
    }

    private native void _resetToBaseValue(long _pointer_);

    /** **/
    public void applyDeltaValue(int a1) {
        _applyDeltaValue__iv(this.object.pointer, a1);
    }

    private native void _applyDeltaValue__iv(long _pointer_, int a1);

    /** **/
    public void applyDeltaValue(float a1) {
        _applyDeltaValue__Realv(this.object.pointer, a1);
    }

    private native void _applyDeltaValue__Realv(long _pointer_, float a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IVector2 a1) {
        _applyDeltaValue__Vector2R(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__Vector2R(long _pointer_, long a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IVector3 a1) {
        _applyDeltaValue__Vector3R(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__Vector3R(long _pointer_, long a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IVector4 a1) {
        _applyDeltaValue__Vector4R(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__Vector4R(long _pointer_, long a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IQuaternion a1) {
        _applyDeltaValue__QuaternionR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__QuaternionR(long _pointer_, long a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IColourValue a1) {
        _applyDeltaValue__ColourValueR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__ColourValueR(long _pointer_, long a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IDegree a1) {
        _applyDeltaValue__DegreeR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__DegreeR(long _pointer_, long a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IRadian a1) {
        _applyDeltaValue__RadianR(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__RadianR(long _pointer_, long a1);

    /** **/
    public void applyDeltaValue(org.ogre4j.IAny val) {
        _applyDeltaValue__AnyR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _applyDeltaValue__AnyR(long _pointer_, long val);

















}
