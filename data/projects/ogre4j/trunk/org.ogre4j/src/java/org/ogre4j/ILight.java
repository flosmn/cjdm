/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ILight extends INativeObject, org.ogre4j.IMovableObject {

    /** **/
    public void _calcTempSquareDist(org.ogre4j.IVector3 worldPos);

    /** 
    Sets the type of light - see LightTypes for more info. **/
    public void setType(org.ogre4j.Light.LightTypes type);

    /** 
    Returns the light type. **/
    public org.ogre4j.Light.LightTypes getType();

    /** 
    Sets the colour of the diffuse light given off by this source. **/
    public void setDiffuseColour(float red, float green, float blue);

    /** 
    Sets the colour of the diffuse light given off by this source. **/
    public void setDiffuseColour(org.ogre4j.IColourValue colour);

    /** 
    Returns the colour of the diffuse light given off by this light source (see setDiffuseColour for more info). **/
    public org.ogre4j.IColourValue getDiffuseColour();

    /** 
    Sets the colour of the specular light given off by this source. **/
    public void setSpecularColour(float red, float green, float blue);

    /** 
    Sets the colour of the specular light given off by this source. **/
    public void setSpecularColour(org.ogre4j.IColourValue colour);

    /** 
    Returns the colour of specular light given off by this light source. **/
    public org.ogre4j.IColourValue getSpecularColour();

    /** 
    Sets the attenuation parameters of the light source i.e. how it diminishes with distance. **/
    public void setAttenuation(float range, float constant, float linear, float quadratic);

    /** 
    Returns the absolute upper range of the light. **/
    public float getAttenuationRange();

    /** 
    Returns the constant factor in the attenuation formula. **/
    public float getAttenuationConstant();

    /** 
    Returns the linear factor in the attenuation formula. **/
    public float getAttenuationLinear();

    /** 
    Returns the quadric factor in the attenuation formula. **/
    public float getAttenuationQuadric();

    /** 
    Sets the position of the light. **/
    public void setPosition(float x, float y, float z);

    /** 
    Sets the position of the light. **/
    public void setPosition(org.ogre4j.IVector3 vec);

    /** 
    Returns the position of the light. **/
    public org.ogre4j.IVector3 getPosition();

    /** 
    Sets the direction in which a light points. **/
    public void setDirection(float x, float y, float z);

    /** 
    Sets the direction in which a light points. **/
    public void setDirection(org.ogre4j.IVector3 vec);

    /** 
    Returns the light's direction. **/
    public org.ogre4j.IVector3 getDirection();

    /** 
    Sets the range of a spotlight, i.e. the angle of the inner and outer cones and the rate of falloff between them. **/
    public void setSpotlightRange(org.ogre4j.IRadian innerAngle, org.ogre4j.IRadian outerAngle, float falloff);

    /** 
    Returns the angle covered by the spotlights inner cone. **/
    public org.ogre4j.IRadian getSpotlightInnerAngle();

    /** 
    Returns the angle covered by the spotlights outer cone. **/
    public org.ogre4j.IRadian getSpotlightOuterAngle();

    /** 
    Returns the falloff between the inner and outer cones of the spotlight. **/
    public float getSpotlightFalloff();

    /** 
    Sets the angle covered by the spotlights inner cone. **/
    public void setSpotlightInnerAngle(org.ogre4j.IRadian val);

    /** 
    Sets the angle covered by the spotlights outer cone. **/
    public void setSpotlightOuterAngle(org.ogre4j.IRadian val);

    /** 
    Sets the falloff between the inner and outer cones of the spotlight. **/
    public void setSpotlightFalloff(float val);

    /** 
    Set a scaling factor to indicate the relative power of a light. **/
    public void setPowerScale(float power);

    /** 
    Set the scaling factor which indicates the relative power of a light. **/
    public float getPowerScale();

    /** 
    Overridden from **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint);

    /** 
    Overridden from **/
    public void _notifyMoved();

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox();

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue);

    /** 
    Overridden from **/
    public String getMovableType();

    /** 
    Retrieves the position of the light including any transform from nodes it is attached to. **/
    public org.ogre4j.IVector3 getDerivedPosition(boolean cameraRelativeIfSet);

    /** 
    Retrieves the direction of the light including any transform from nodes it is attached to. **/
    public org.ogre4j.IVector3 getDerivedDirection();

    /** 
    Overridden from . **/
    public void setVisible(boolean visible);

    /** 
    Overridden from **/
    public float getBoundingRadius();

    /** 
    Gets the details of this light as a 4D vector. **/
    public void getAs4DVector(org.ogre4j.IVector4 returnValue, boolean cameraRelativeIfSet);

    /** 
    Internal method for calculating the 'near clip volume', which is the volume formed between the near clip rectangle of the camera and the light. **/
    public org.ogre4j.IPlaneBoundedVolume _getNearClipVolume(org.ogre4j.ICamera cam);

    /** 
    Internal method for calculating the clip volumes outside of the frustum which can be used to determine which objects are casting shadow on the frustum as a whole. **/
    public org.ogre4j.IPlaneBoundedVolumeList _getFrustumClipVolumes(org.ogre4j.ICamera cam);

    /** **/
    public long getTypeFlags();

    /** **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName);

    /** 
    Set this light to use a custom shadow camera when rendering texture shadows. **/
    public void setCustomShadowCameraSetup(org.ogre4j.IShadowCameraSetupPtr customShadowSetup);

    /** 
    Reset the shadow camera setup to the default. **/
    public void resetCustomShadowCameraSetup();

    /** 
    return a pointer to the custom shadow camera setup (null means use  global version). **/
    public org.ogre4j.IShadowCameraSetupPtr getCustomShadowCameraSetup();

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** 
    Gets the index at which this light is in the current render. **/
    public int _getIndexInFrame();

    /** **/
    public void _notifyIndexInFrame(int i);

    /** 
    Sets the maximum distance away from the camera that shadows by this light will be visible. **/
    public void setShadowFarDistance(float distance);

    /** 
    Tells the light to use the shadow far distance of the **/
    public void resetShadowFarDistance();

    /** 
    Gets the maximum distance away from the camera that shadows by this light will be visible. **/
    public float getShadowFarDistance();

    /** **/
    public float getShadowFarDistanceSquared();

    /** **/
    public void _setCameraRelative(org.ogre4j.ICamera cam);

    /** **/
    public float gettempSquareDist();

    /** **/
    public void settempSquareDist(float _jni_value_);

}
