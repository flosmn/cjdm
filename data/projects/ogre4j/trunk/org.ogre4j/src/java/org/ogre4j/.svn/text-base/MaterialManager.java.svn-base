/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class MaterialManager extends org.xbig.base.NativeObject implements org.ogre4j.IMaterialManager {
static { System.loadLibrary("ogre4j");}
public static class Listener extends org.xbig.base.NativeObject implements org.ogre4j.IMaterialManager.IListener {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Listener(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Listener(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Listener(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Called if a technique for a given scheme is not found within a material, allows the application to specify a  instance manually. **/
    public org.ogre4j.ITechnique handleSchemeNotFound(int schemeIndex, String schemeName, org.ogre4j.IMaterial originalMaterial, int lodIndex, org.ogre4j.IRenderable rend) {
         return new org.ogre4j.Technique(new InstancePointer(_handleSchemeNotFound__HvStringRMaterialpHvRenderableP(this.object.pointer, schemeIndex,  schemeName,  originalMaterial.getInstancePointer().pointer,  lodIndex,  rend.getInstancePointer().pointer)));
    }

    private native long _handleSchemeNotFound__HvStringRMaterialpHvRenderableP(long _pointer_, int schemeIndex, String schemeName, long originalMaterial, int lodIndex, long rend);

}
protected static class SchemeMap extends org.xbig.base.NativeObject implements org.ogre4j.IMaterialManager.ISchemeMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SchemeMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SchemeMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SchemeMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SchemeMap() {
         super( new org.xbig.base.InstancePointer(__createSchemeMap()), false);
    }

    private native static long __createSchemeMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public IntegerPointer get(String key) {
         return new IntegerPointer(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, IntegerPointer value) {
        _insert__sRHr(this.object.pointer, key,  value.object.pointer);
    }

    private native void _insert__sRHr(long _pointer_, String key, long value);

}
protected static class ListenerList extends org.xbig.base.NativeObject implements org.ogre4j.IMaterialManager.IListenerList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ListenerList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ListenerList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ListenerList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ListenerList() {
         super( new org.xbig.base.InstancePointer(__createListenerList()), false);
    }

    private native static long __createListenerList();

    /** **/
    public void assign(int num, org.ogre4j.IMaterialManager.IListener val) {
        _assign__ivOgre_MaterialManager_ListenerP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_MaterialManager_ListenerP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IMaterialManager.IListener back() {
         return new org.ogre4j.MaterialManager.Listener(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IMaterialManager.IListener front() {
         return new org.ogre4j.MaterialManager.Listener(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IMaterialManager.IListener val) {
        _push_back__Ogre_MaterialManager_ListenerP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_MaterialManager_ListenerP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IMaterialManager.IListener val) {
        _push_front__Ogre_MaterialManager_ListenerP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_MaterialManager_ListenerP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IMaterialManager.IListener val) {
        _remove__Ogre_MaterialManager_ListenerP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_MaterialManager_ListenerP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public MaterialManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected MaterialManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public MaterialManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Default constructor. **/
    public MaterialManager() {
         super( new org.xbig.base.InstancePointer(__createMaterialManager()), false);
    }

    private native static long __createMaterialManager();

    /** 
    Initialises the material manager, which also triggers it to parse all available .program and .material scripts. **/
    public void initialise() {
        _initialise(this.object.pointer);
    }

    private native void _initialise(long _pointer_);

    /** 
    **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream, String groupName) {
        _parseScript__DataStreamPtrrStringR(this.object.pointer, stream.getInstancePointer().pointer,  groupName);
    }

    private native void _parseScript__DataStreamPtrrStringR(long _pointer_, long stream, String groupName);

    /** 
    Sets the default texture filtering to be used for loaded textures, for when textures are loaded automatically (e.g. by  class) or when 'load' is called with the default parameters by the application. **/
    public void setDefaultTextureFiltering(org.ogre4j.TextureFilterOptions fo) {
        _setDefaultTextureFiltering__TextureFilterOptionsv(this.object.pointer, fo.getValue());
    }

    private native void _setDefaultTextureFiltering__TextureFilterOptionsv(long _pointer_, int fo);

    /** 
    Sets the default texture filtering to be used for loaded textures, for when textures are loaded automatically (e.g. by  class) or when 'load' is called with the default parameters by the application. **/
    public void setDefaultTextureFiltering(org.ogre4j.FilterType ftype, org.ogre4j.FilterOptions opts) {
        _setDefaultTextureFiltering__FilterTypevFilterOptionsv(this.object.pointer, ftype.getValue(),  opts.getValue());
    }

    private native void _setDefaultTextureFiltering__FilterTypevFilterOptionsv(long _pointer_, int ftype, int opts);

    /** 
    Sets the default texture filtering to be used for loaded textures, for when textures are loaded automatically (e.g. by  class) or when 'load' is called with the default parameters by the application. **/
    public void setDefaultTextureFiltering(org.ogre4j.FilterOptions minFilter, org.ogre4j.FilterOptions magFilter, org.ogre4j.FilterOptions mipFilter) {
        _setDefaultTextureFiltering__FilterOptionsvFilterOptionsvFilterOptionsv(this.object.pointer, minFilter.getValue(),  magFilter.getValue(),  mipFilter.getValue());
    }

    private native void _setDefaultTextureFiltering__FilterOptionsvFilterOptionsvFilterOptionsv(long _pointer_, int minFilter, int magFilter, int mipFilter);

    /** **/
    public org.ogre4j.FilterOptions getDefaultTextureFiltering(org.ogre4j.FilterType ftype) {
         return org.ogre4j.FilterOptions.toEnum(_getDefaultTextureFiltering__FilterTypev_const(this.object.pointer, ftype.getValue()));
    }

    private native int _getDefaultTextureFiltering__FilterTypev_const(long _pointer_, int ftype);

    /** 
    Sets the default anisotropy level to be used for loaded textures, for when textures are loaded automatically (e.g. by  class) or when 'load' is called with the default parameters by the application. **/
    public void setDefaultAnisotropy(long maxAniso) {
        _setDefaultAnisotropy__Iv(this.object.pointer, maxAniso);
    }

    private native void _setDefaultAnisotropy__Iv(long _pointer_, long maxAniso);

    /** **/
    public long getDefaultAnisotropy() {
         return _getDefaultAnisotropy_const(this.object.pointer);
    }

    private native long _getDefaultAnisotropy_const(long _pointer_);

    /** 
    Returns a pointer to the default  settings. **/
    public void getDefaultSettings(org.ogre4j.IMaterialPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getDefaultSettings_const(this.object.pointer)), false);
    }

    private native long _getDefaultSettings_const(long _pointer_);

    /** 
    Internal method - returns index for a given material scheme name. **/
    public int _getSchemeIndex(String name) {
         return __getSchemeIndex__StringR(this.object.pointer, name);
    }

    private native int __getSchemeIndex__StringR(long _pointer_, String name);

    /** 
    Internal method - returns name for a given material scheme index. **/
    public String _getSchemeName(int index) {
         return __getSchemeName__Hv(this.object.pointer, index);
    }

    private native String __getSchemeName__Hv(long _pointer_, int index);

    /** 
    Internal method - returns the active scheme index. **/
    public int _getActiveSchemeIndex() {
         return __getActiveSchemeIndex_const(this.object.pointer);
    }

    private native int __getActiveSchemeIndex_const(long _pointer_);

    /** 
    Returns the name of the active material scheme. **/
    public String getActiveScheme() {
         return _getActiveScheme_const(this.object.pointer);
    }

    private native String _getActiveScheme_const(long _pointer_);

    /** 
    Sets the name of the active material scheme. **/
    public void setActiveScheme(String schemeName) {
        _setActiveScheme__StringR(this.object.pointer, schemeName);
    }

    private native void _setActiveScheme__StringR(long _pointer_, String schemeName);

    /** 
    Add a listener to handle material events. **/
    public void addListener(org.ogre4j.IMaterialManager.IListener l) {
        _addListener__Listenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _addListener__Listenerp(long _pointer_, long l);

    /** 
    Remove a listener handling material events. **/
    public void removeListener(org.ogre4j.IMaterialManager.IListener l) {
        _removeListener__Listenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _removeListener__Listenerp(long _pointer_, long l);

    /** **/
    public org.ogre4j.ITechnique _arbitrateMissingTechniqueForActiveScheme(org.ogre4j.IMaterial mat, int lodIndex, org.ogre4j.IRenderable rend) {
         return new org.ogre4j.Technique(new InstancePointer(__arbitrateMissingTechniqueForActiveScheme__MaterialpHvRenderableP(this.object.pointer, mat.getInstancePointer().pointer,  lodIndex,  rend.getInstancePointer().pointer)));
    }

    private native long __arbitrateMissingTechniqueForActiveScheme__MaterialpHvRenderableP(long _pointer_, long mat, int lodIndex, long rend);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IMaterialManager getSingleton() {
         return new org.ogre4j.MaterialManager(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IMaterialManager getSingletonPtr() {
         return new org.ogre4j.MaterialManager(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

    /** 
    Creates a new blank resource, but does not immediately load it. **/
    public void create(org.ogre4j.IResourcePtr returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList createParams) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_create__StringRStringRbvManualResourceLoaderpNameValuePairListP(this.object.pointer, name,  group,  isManual,  loader.getInstancePointer().pointer,  createParams.getInstancePointer().pointer)), false);
    }

    private native long _create__StringRStringRbvManualResourceLoaderpNameValuePairListP(long _pointer_, String name, String group, boolean isManual, long loader, long createParams);

    /** 
    Create a new resource, or retrieve an existing one with the same name if it already exists. **/
    public void createOrRetrieve(org.ogre4j.IResourceManager.IResourceCreateOrRetrieveResult returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList createParams) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createOrRetrieve__StringRStringRbvManualResourceLoaderpNameValuePairListP(this.object.pointer, name,  group,  isManual,  loader.getInstancePointer().pointer,  createParams.getInstancePointer().pointer)), false);
    }

    private native long _createOrRetrieve__StringRStringRbvManualResourceLoaderpNameValuePairListP(long _pointer_, String name, String group, boolean isManual, long loader, long createParams);

    /** 
    Set a limit on the amount of memory this resource handler may use. **/
    public void setMemoryBudget(int bytes) {
        _setMemoryBudget__iv(this.object.pointer, bytes);
    }

    private native void _setMemoryBudget__iv(long _pointer_, int bytes);

    /** 
    Get the limit on the amount of memory this resource handler may use. **/
    public int getMemoryBudget() {
         return _getMemoryBudget_const(this.object.pointer);
    }

    private native int _getMemoryBudget_const(long _pointer_);

    /** 
    Gets the current memory usage, in bytes. **/
    public int getMemoryUsage() {
         return _getMemoryUsage_const(this.object.pointer);
    }

    private native int _getMemoryUsage_const(long _pointer_);

    /** 
    Unloads a single resource by name. **/
    public void unload(String name) {
        _unload__StringR(this.object.pointer, name);
    }

    private native void _unload__StringR(long _pointer_, String name);

    /** 
    Unloads a single resource by handle. **/
    public void unload(long handle) {
        _unload__ResourceHandlev(this.object.pointer, handle);
    }

    private native void _unload__ResourceHandlev(long _pointer_, long handle);

    /** 
    Unloads all resources. **/
    public void unloadAll(boolean reloadableOnly) {
        _unloadAll__bv(this.object.pointer, reloadableOnly);
    }

    private native void _unloadAll__bv(long _pointer_, boolean reloadableOnly);

    /** 
    Caused all currently loaded resources to be reloaded. **/
    public void reloadAll(boolean reloadableOnly) {
        _reloadAll__bv(this.object.pointer, reloadableOnly);
    }

    private native void _reloadAll__bv(long _pointer_, boolean reloadableOnly);

    /** 
    Unload all resources which are not referenced by any other object. **/
    public void unloadUnreferencedResources(boolean reloadableOnly) {
        _unloadUnreferencedResources__bv(this.object.pointer, reloadableOnly);
    }

    private native void _unloadUnreferencedResources__bv(long _pointer_, boolean reloadableOnly);

    /** 
    Caused all currently loaded but not referenced by any other object resources to be reloaded. **/
    public void reloadUnreferencedResources(boolean reloadableOnly) {
        _reloadUnreferencedResources__bv(this.object.pointer, reloadableOnly);
    }

    private native void _reloadUnreferencedResources__bv(long _pointer_, boolean reloadableOnly);

    /** 
    Remove a single resource. **/
    public void remove(org.ogre4j.IResourcePtr r) {
        _remove__ResourcePtrr(this.object.pointer, r.getInstancePointer().pointer);
    }

    private native void _remove__ResourcePtrr(long _pointer_, long r);

    /** 
    Remove a single resource by name. **/
    public void remove(String name) {
        _remove__StringR(this.object.pointer, name);
    }

    private native void _remove__StringR(long _pointer_, String name);

    /** 
    Remove a single resource by handle. **/
    public void remove(long handle) {
        _remove__ResourceHandlev(this.object.pointer, handle);
    }

    private native void _remove__ResourceHandlev(long _pointer_, long handle);

    /** 
    Removes all resources. **/
    public void removeAll() {
        _removeAll(this.object.pointer);
    }

    private native void _removeAll(long _pointer_);

    /** 
    Retrieves a pointer to a resource by name, or null if the resource does not exist. **/
    public void getByName(org.ogre4j.IResourcePtr returnValue, String name) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getByName__StringR(this.object.pointer, name)), false);
    }

    private native long _getByName__StringR(long _pointer_, String name);

    /** 
    Retrieves a pointer to a resource by handle, or null if the resource does not exist. **/
    public void getByHandle(org.ogre4j.IResourcePtr returnValue, long handle) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getByHandle__ResourceHandlev(this.object.pointer, handle)), false);
    }

    private native long _getByHandle__ResourceHandlev(long _pointer_, long handle);

    /** **/
    public boolean resourceExists(String name) {
         return _resourceExists__StringR(this.object.pointer, name);
    }

    private native boolean _resourceExists__StringR(long _pointer_, String name);

    /** **/
    public boolean resourceExists(long handle) {
         return _resourceExists__ResourceHandlev(this.object.pointer, handle);
    }

    private native boolean _resourceExists__ResourceHandlev(long _pointer_, long handle);

    /** 
    Notify this manager that a resource which it manages has been 'touched', i.e. used. **/
    public void _notifyResourceTouched(org.ogre4j.IResource res) {
        __notifyResourceTouched__Resourcep(this.object.pointer, res.getInstancePointer().pointer);
    }

    private native void __notifyResourceTouched__Resourcep(long _pointer_, long res);

    /** 
    Notify this manager that a resource which it manages has been loaded. **/
    public void _notifyResourceLoaded(org.ogre4j.IResource res) {
        __notifyResourceLoaded__Resourcep(this.object.pointer, res.getInstancePointer().pointer);
    }

    private native void __notifyResourceLoaded__Resourcep(long _pointer_, long res);

    /** 
    Notify this manager that a resource which it manages has been unloaded. **/
    public void _notifyResourceUnloaded(org.ogre4j.IResource res) {
        __notifyResourceUnloaded__Resourcep(this.object.pointer, res.getInstancePointer().pointer);
    }

    private native void __notifyResourceUnloaded__Resourcep(long _pointer_, long res);

    /** 
    Generic prepare method, used to create a  specific to this  without using one of the specialised 'prepare' methods (containing per-Resource-type parameters). **/
    public void prepare(org.ogre4j.IResourcePtr returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList loadParams) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_prepare__StringRStringRbvManualResourceLoaderpNameValuePairListP(this.object.pointer, name,  group,  isManual,  loader.getInstancePointer().pointer,  loadParams.getInstancePointer().pointer)), false);
    }

    private native long _prepare__StringRStringRbvManualResourceLoaderpNameValuePairListP(long _pointer_, String name, String group, boolean isManual, long loader, long loadParams);

    /** 
    Generic load method, used to create a  specific to this  without using one of the specialised 'load' methods (containing per-Resource-type parameters). **/
    public void load(org.ogre4j.IResourcePtr returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList loadParams) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_load__StringRStringRbvManualResourceLoaderpNameValuePairListP(this.object.pointer, name,  group,  isManual,  loader.getInstancePointer().pointer,  loadParams.getInstancePointer().pointer)), false);
    }

    private native long _load__StringRStringRbvManualResourceLoaderpNameValuePairListP(long _pointer_, String name, String group, boolean isManual, long loader, long loadParams);

    /** 
    Gets the file patterns which should be used to find scripts for this . **/
    public org.ogre4j.IStringVector getScriptPatterns() {
         return new org.ogre4j.StringVector(new InstancePointer(_getScriptPatterns_const(this.object.pointer)));
    }

    private native long _getScriptPatterns_const(long _pointer_);

    /** 
    Gets the relative loading order of resources of this type. **/
    public float getLoadingOrder() {
         return _getLoadingOrder_const(this.object.pointer);
    }

    private native float _getLoadingOrder_const(long _pointer_);

    /** 
    Gets a string identifying the type of resource this manager handles. **/
    public String getResourceType() {
         return _getResourceType_const(this.object.pointer);
    }

    private native String _getResourceType_const(long _pointer_);

    /** 
    Sets whether this manager and its resources habitually produce log output **/
    public void setVerbose(boolean v) {
        _setVerbose__bv(this.object.pointer, v);
    }

    private native void _setVerbose__bv(long _pointer_, boolean v);

    /** 
    Gets whether this manager and its resources habitually produce log output **/
    public boolean getVerbose() {
         return _getVerbose(this.object.pointer);
    }

    private native boolean _getVerbose(long _pointer_);

    /** 
    Returns an iterator over all resources in this manager. **/
    public void getResourceIterator(org.ogre4j.IResourceManager.IResourceMapIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getResourceIterator(this.object.pointer)), false);
    }

    private native long _getResourceIterator(long _pointer_);

    /** **/
    public static String getDEFAULT_SCHEME_NAME() {
         return _getDEFAULT_SCHEME_NAME();
    }

    private native static String _getDEFAULT_SCHEME_NAME();

    /** **/
    public static void setDEFAULT_SCHEME_NAME(String _jni_value_) {
        _setDEFAULT_SCHEME_NAME( _jni_value_);
    }

    private native static void _setDEFAULT_SCHEME_NAME(String _jni_value_);

}
