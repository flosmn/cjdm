/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Animation extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation {
static { System.loadLibrary("ogre4j");}
public enum InterpolationMode implements INativeEnum < InterpolationMode > {
    IM_LINEAR(InterpolationModeHelper.ENUM_VALUES[0]),
    IM_SPLINE(InterpolationModeHelper.ENUM_VALUES[1]);

    private int value;

    InterpolationMode(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public InterpolationMode getEnum(int val) {
        return toEnum(val);
    }

    public static final InterpolationMode toEnum(int retval) {
    if (retval ==IM_LINEAR.value)
        return InterpolationMode.IM_LINEAR;
    else if (retval ==IM_SPLINE.value)
        return InterpolationMode.IM_SPLINE;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class InterpolationModeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public enum RotationInterpolationMode implements INativeEnum < RotationInterpolationMode > {
    RIM_LINEAR(RotationInterpolationModeHelper.ENUM_VALUES[0]),
    RIM_SPHERICAL(RotationInterpolationModeHelper.ENUM_VALUES[1]);

    private int value;

    RotationInterpolationMode(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public RotationInterpolationMode getEnum(int val) {
        return toEnum(val);
    }

    public static final RotationInterpolationMode toEnum(int retval) {
    if (retval ==RIM_LINEAR.value)
        return RotationInterpolationMode.RIM_LINEAR;
    else if (retval ==RIM_SPHERICAL.value)
        return RotationInterpolationMode.RIM_SPHERICAL;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class RotationInterpolationModeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public static class NodeTrackList extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.INodeTrackList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NodeTrackList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NodeTrackList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NodeTrackList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NodeTrackList() {
         super( new org.xbig.base.InstancePointer(__createNodeTrackList()), false);
    }

    private native static long __createNodeTrackList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__HR(this.object.pointer, key);
    }

    private native int _count__HR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__HR(this.object.pointer, key);
    }

    private native int _erase__HR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.INodeAnimationTrack get(int key) {
         return new org.ogre4j.NodeAnimationTrack(new InstancePointer(_get__HR(this.object.pointer, key)));
    }

    private native long _get__HR(long _pointer_, int key);

    /** **/
    public void insert(int key, org.ogre4j.INodeAnimationTrack value) {
        _insert__HROgre_NodeAnimationTrackp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__HROgre_NodeAnimationTrackp(long _pointer_, int key, long value);

}
public static class NodeTrackIterator extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.INodeTrackIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NodeTrackIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NodeTrackIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NodeTrackIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NodeTrackIterator(org.ogre4j.IAnimation.INodeTrackList c) {
         super( new org.xbig.base.InstancePointer(__createNodeTrackIterator__Ogre_Animation_NodeTrackListR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createNodeTrackIterator__Ogre_Animation_NodeTrackListR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.INodeAnimationTrack getNext() {
         return new org.ogre4j.NodeAnimationTrack(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.INodeAnimationTrack peekNextValue() {
         return new org.ogre4j.NodeAnimationTrack(new InstancePointer(_peekNextValue_const(this.object.pointer)));
    }

    private native long _peekNextValue_const(long _pointer_);

    /** **/
    public int peekNextKey() {
         return _peekNextKey_const(this.object.pointer);
    }

    private native int _peekNextKey_const(long _pointer_);

    /** **/
    public org.ogre4j.IAnimation.INodeTrackIterator operatorAssignment(org.ogre4j.IAnimation.INodeTrackIterator rhs) {
         return new org.ogre4j.Animation.NodeTrackIterator(new InstancePointer(_operatorAssignment___Ogre_Animation_NodeTrackIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_Animation_NodeTrackIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.INodeAnimationTrack> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.INodeAnimationTrack>(new InstancePointer(_peekNextValuePtr_const(this.object.pointer)));
    }

    private native long _peekNextValuePtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
public static class NumericTrackList extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.INumericTrackList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NumericTrackList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NumericTrackList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NumericTrackList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NumericTrackList() {
         super( new org.xbig.base.InstancePointer(__createNumericTrackList()), false);
    }

    private native static long __createNumericTrackList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__HR(this.object.pointer, key);
    }

    private native int _count__HR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__HR(this.object.pointer, key);
    }

    private native int _erase__HR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.INumericAnimationTrack get(int key) {
         return new org.ogre4j.NumericAnimationTrack(new InstancePointer(_get__HR(this.object.pointer, key)));
    }

    private native long _get__HR(long _pointer_, int key);

    /** **/
    public void insert(int key, org.ogre4j.INumericAnimationTrack value) {
        _insert__HROgre_NumericAnimationTrackp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__HROgre_NumericAnimationTrackp(long _pointer_, int key, long value);

}
public static class NumericTrackIterator extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.INumericTrackIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NumericTrackIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NumericTrackIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NumericTrackIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NumericTrackIterator(org.ogre4j.IAnimation.INumericTrackList c) {
         super( new org.xbig.base.InstancePointer(__createNumericTrackIterator__Ogre_Animation_NumericTrackListR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createNumericTrackIterator__Ogre_Animation_NumericTrackListR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.INumericAnimationTrack getNext() {
         return new org.ogre4j.NumericAnimationTrack(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.INumericAnimationTrack peekNextValue() {
         return new org.ogre4j.NumericAnimationTrack(new InstancePointer(_peekNextValue_const(this.object.pointer)));
    }

    private native long _peekNextValue_const(long _pointer_);

    /** **/
    public int peekNextKey() {
         return _peekNextKey_const(this.object.pointer);
    }

    private native int _peekNextKey_const(long _pointer_);

    /** **/
    public org.ogre4j.IAnimation.INumericTrackIterator operatorAssignment(org.ogre4j.IAnimation.INumericTrackIterator rhs) {
         return new org.ogre4j.Animation.NumericTrackIterator(new InstancePointer(_operatorAssignment___Ogre_Animation_NumericTrackIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_Animation_NumericTrackIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.INumericAnimationTrack> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.INumericAnimationTrack>(new InstancePointer(_peekNextValuePtr_const(this.object.pointer)));
    }

    private native long _peekNextValuePtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
public static class VertexTrackList extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.IVertexTrackList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexTrackList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexTrackList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexTrackList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexTrackList() {
         super( new org.xbig.base.InstancePointer(__createVertexTrackList()), false);
    }

    private native static long __createVertexTrackList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__HR(this.object.pointer, key);
    }

    private native int _count__HR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__HR(this.object.pointer, key);
    }

    private native int _erase__HR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IVertexAnimationTrack get(int key) {
         return new org.ogre4j.VertexAnimationTrack(new InstancePointer(_get__HR(this.object.pointer, key)));
    }

    private native long _get__HR(long _pointer_, int key);

    /** **/
    public void insert(int key, org.ogre4j.IVertexAnimationTrack value) {
        _insert__HROgre_VertexAnimationTrackp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__HROgre_VertexAnimationTrackp(long _pointer_, int key, long value);

}
public static class VertexTrackIterator extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.IVertexTrackIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexTrackIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexTrackIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexTrackIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexTrackIterator(org.ogre4j.IAnimation.IVertexTrackList c) {
         super( new org.xbig.base.InstancePointer(__createVertexTrackIterator__Ogre_Animation_VertexTrackListR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createVertexTrackIterator__Ogre_Animation_VertexTrackListR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IVertexAnimationTrack getNext() {
         return new org.ogre4j.VertexAnimationTrack(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IVertexAnimationTrack peekNextValue() {
         return new org.ogre4j.VertexAnimationTrack(new InstancePointer(_peekNextValue_const(this.object.pointer)));
    }

    private native long _peekNextValue_const(long _pointer_);

    /** **/
    public int peekNextKey() {
         return _peekNextKey_const(this.object.pointer);
    }

    private native int _peekNextKey_const(long _pointer_);

    /** **/
    public org.ogre4j.IAnimation.IVertexTrackIterator operatorAssignment(org.ogre4j.IAnimation.IVertexTrackIterator rhs) {
         return new org.ogre4j.Animation.VertexTrackIterator(new InstancePointer(_operatorAssignment___Ogre_Animation_VertexTrackIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_Animation_VertexTrackIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IVertexAnimationTrack> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IVertexAnimationTrack>(new InstancePointer(_peekNextValuePtr_const(this.object.pointer)));
    }

    private native long _peekNextValuePtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
public static class TrackHandleList extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.ITrackHandleList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TrackHandleList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TrackHandleList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TrackHandleList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TrackHandleList() {
         super( new org.xbig.base.InstancePointer(__createTrackHandleList()), false);
    }

    private native static long __createTrackHandleList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__HR(this.object.pointer, key);
    }

    private native int _count__HR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__HR(this.object.pointer, key);
    }

    private native int _erase__HR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
protected static class KeyFrameTimeList extends org.xbig.base.NativeObject implements org.ogre4j.IAnimation.IKeyFrameTimeList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public KeyFrameTimeList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected KeyFrameTimeList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public KeyFrameTimeList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public KeyFrameTimeList() {
         super( new org.xbig.base.InstancePointer(__createKeyFrameTimeList()), false);
    }

    private native static long __createKeyFrameTimeList();

    /** **/
    public void assign(int num, float val) {
        _assign__ivFR(this.object.pointer, num,  val);
    }

    private native void _assign__ivFR(long _pointer_, int num, float val);

    /** **/
    public FloatPointer at(int loc) {
         return new FloatPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public FloatPointer back() {
         return new FloatPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public FloatPointer front() {
         return new FloatPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(float val) {
        _push_back__FR(this.object.pointer, val);
    }

    private native void _push_back__FR(long _pointer_, float val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Animation(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Animation(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Animation(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    You should not use this constructor directly, use the parent object such as  instead. **/
    public Animation(String name, float length) {
         super( new org.xbig.base.InstancePointer(__createAnimation__StringRRealv( name,  length)), false);
    }

    private native static long __createAnimation__StringRRealv(String name, float length);

    /** 
    Gets the name of this animation. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Gets the total length of the animation. **/
    public float getLength() {
         return _getLength_const(this.object.pointer);
    }

    private native float _getLength_const(long _pointer_);

    /** 
    Sets the length of the animation. **/
    public void setLength(float len) {
        _setLength__Realv(this.object.pointer, len);
    }

    private native void _setLength__Realv(long _pointer_, float len);

    /** 
    Creates a  for animating a . **/
    public org.ogre4j.INodeAnimationTrack createNodeTrack(int handle) {
         return new org.ogre4j.NodeAnimationTrack(new InstancePointer(_createNodeTrack__Hv(this.object.pointer, handle)));
    }

    private native long _createNodeTrack__Hv(long _pointer_, int handle);

    /** 
    Creates a  for animating any numeric value. **/
    public org.ogre4j.INumericAnimationTrack createNumericTrack(int handle) {
         return new org.ogre4j.NumericAnimationTrack(new InstancePointer(_createNumericTrack__Hv(this.object.pointer, handle)));
    }

    private native long _createNumericTrack__Hv(long _pointer_, int handle);

    /** 
    Creates a  for animating vertex position data. **/
    public org.ogre4j.IVertexAnimationTrack createVertexTrack(int handle, org.ogre4j.VertexAnimationType animType) {
         return new org.ogre4j.VertexAnimationTrack(new InstancePointer(_createVertexTrack__HvVertexAnimationTypev(this.object.pointer, handle,  animType.getValue())));
    }

    private native long _createVertexTrack__HvVertexAnimationTypev(long _pointer_, int handle, int animType);

    /** 
    Creates a new  automatically associated with a . **/
    public org.ogre4j.INodeAnimationTrack createNodeTrack(int handle, org.ogre4j.INode node) {
         return new org.ogre4j.NodeAnimationTrack(new InstancePointer(_createNodeTrack__HvNodep(this.object.pointer, handle,  node.getInstancePointer().pointer)));
    }

    private native long _createNodeTrack__HvNodep(long _pointer_, int handle, long node);

    /** 
    Creates a  and associates it with an animable. **/
    public org.ogre4j.INumericAnimationTrack createNumericTrack(int handle, org.ogre4j.IAnimableValuePtr anim) {
         return new org.ogre4j.NumericAnimationTrack(new InstancePointer(_createNumericTrack__HvAnimableValuePtrR(this.object.pointer, handle,  anim.getInstancePointer().pointer)));
    }

    private native long _createNumericTrack__HvAnimableValuePtrR(long _pointer_, int handle, long anim);

    /** 
    Creates a  and associates it with . **/
    public org.ogre4j.IVertexAnimationTrack createVertexTrack(int handle, org.ogre4j.IVertexData data, org.ogre4j.VertexAnimationType animType) {
         return new org.ogre4j.VertexAnimationTrack(new InstancePointer(_createVertexTrack__HvVertexDatapVertexAnimationTypev(this.object.pointer, handle,  data.getInstancePointer().pointer,  animType.getValue())));
    }

    private native long _createVertexTrack__HvVertexDatapVertexAnimationTypev(long _pointer_, int handle, long data, int animType);

    /** 
    Gets the number of  objects contained in this animation. **/
    public int getNumNodeTracks() {
         return _getNumNodeTracks_const(this.object.pointer);
    }

    private native int _getNumNodeTracks_const(long _pointer_);

    /** 
    Gets a node track by it's handle. **/
    public org.ogre4j.INodeAnimationTrack getNodeTrack(int handle) {
         return new org.ogre4j.NodeAnimationTrack(new InstancePointer(_getNodeTrack__Hv_const(this.object.pointer, handle)));
    }

    private native long _getNodeTrack__Hv_const(long _pointer_, int handle);

    /** 
    Does a track exist with the given handle? **/
    public boolean hasNodeTrack(int handle) {
         return _hasNodeTrack__Hv_const(this.object.pointer, handle);
    }

    private native boolean _hasNodeTrack__Hv_const(long _pointer_, int handle);

    /** 
    Gets the number of  objects contained in this animation. **/
    public int getNumNumericTracks() {
         return _getNumNumericTracks_const(this.object.pointer);
    }

    private native int _getNumNumericTracks_const(long _pointer_);

    /** 
    Gets a numeric track by it's handle. **/
    public org.ogre4j.INumericAnimationTrack getNumericTrack(int handle) {
         return new org.ogre4j.NumericAnimationTrack(new InstancePointer(_getNumericTrack__Hv_const(this.object.pointer, handle)));
    }

    private native long _getNumericTrack__Hv_const(long _pointer_, int handle);

    /** 
    Does a track exist with the given handle? **/
    public boolean hasNumericTrack(int handle) {
         return _hasNumericTrack__Hv_const(this.object.pointer, handle);
    }

    private native boolean _hasNumericTrack__Hv_const(long _pointer_, int handle);

    /** 
    Gets the number of  objects contained in this animation. **/
    public int getNumVertexTracks() {
         return _getNumVertexTracks_const(this.object.pointer);
    }

    private native int _getNumVertexTracks_const(long _pointer_);

    /** 
    Gets a Vertex track by it's handle. **/
    public org.ogre4j.IVertexAnimationTrack getVertexTrack(int handle) {
         return new org.ogre4j.VertexAnimationTrack(new InstancePointer(_getVertexTrack__Hv_const(this.object.pointer, handle)));
    }

    private native long _getVertexTrack__Hv_const(long _pointer_, int handle);

    /** 
    Does a track exist with the given handle? **/
    public boolean hasVertexTrack(int handle) {
         return _hasVertexTrack__Hv_const(this.object.pointer, handle);
    }

    private native boolean _hasVertexTrack__Hv_const(long _pointer_, int handle);

    /** 
    Destroys the node track with the given handle. **/
    public void destroyNodeTrack(int handle) {
        _destroyNodeTrack__Hv(this.object.pointer, handle);
    }

    private native void _destroyNodeTrack__Hv(long _pointer_, int handle);

    /** 
    Destroys the numeric track with the given handle. **/
    public void destroyNumericTrack(int handle) {
        _destroyNumericTrack__Hv(this.object.pointer, handle);
    }

    private native void _destroyNumericTrack__Hv(long _pointer_, int handle);

    /** 
    Destroys the Vertex track with the given handle. **/
    public void destroyVertexTrack(int handle) {
        _destroyVertexTrack__Hv(this.object.pointer, handle);
    }

    private native void _destroyVertexTrack__Hv(long _pointer_, int handle);

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllTracks() {
        _destroyAllTracks(this.object.pointer);
    }

    private native void _destroyAllTracks(long _pointer_);

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllNodeTracks() {
        _destroyAllNodeTracks(this.object.pointer);
    }

    private native void _destroyAllNodeTracks(long _pointer_);

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllNumericTracks() {
        _destroyAllNumericTracks(this.object.pointer);
    }

    private native void _destroyAllNumericTracks(long _pointer_);

    /** 
    Removes and destroys all tracks making up this animation. **/
    public void destroyAllVertexTracks() {
        _destroyAllVertexTracks(this.object.pointer);
    }

    private native void _destroyAllVertexTracks(long _pointer_);

    /** 
    Applies an animation given a specific time point and weight. **/
    public void apply(float timePos, float weight, float scale) {
        _apply__RealvRealvRealv(this.object.pointer, timePos,  weight,  scale);
    }

    private native void _apply__RealvRealvRealv(long _pointer_, float timePos, float weight, float scale);

    /** 
    Applies all node tracks given a specific time point and weight to a given skeleton. **/
    public void apply(org.ogre4j.ISkeleton skeleton, float timePos, float weight, float scale) {
        _apply__SkeletonpRealvRealvRealv(this.object.pointer, skeleton.getInstancePointer().pointer,  timePos,  weight,  scale);
    }

    private native void _apply__SkeletonpRealvRealvRealv(long _pointer_, long skeleton, float timePos, float weight, float scale);

    /** 
    Applies all node tracks given a specific time point and weight to a given skeleton. **/
    public void apply(org.ogre4j.ISkeleton skeleton, float timePos, float weight, org.ogre4j.IAnimationState.IBoneBlendMask blendMask, float scale) {
        _apply__SkeletonpRealvFvAnimationState_BoneBlendMaskPRealv(this.object.pointer, skeleton.getInstancePointer().pointer,  timePos,  weight,  blendMask.getInstancePointer().pointer,  scale);
    }

    private native void _apply__SkeletonpRealvFvAnimationState_BoneBlendMaskPRealv(long _pointer_, long skeleton, float timePos, float weight, long blendMask, float scale);

    /** 
    Applies all vertex tracks given a specific time point and weight to a given entity. **/
    public void apply(org.ogre4j.IEntity entity, float timePos, float weight, boolean software, boolean hardware) {
        _apply__EntitypRealvRealvbvbv(this.object.pointer, entity.getInstancePointer().pointer,  timePos,  weight,  software,  hardware);
    }

    private native void _apply__EntitypRealvRealvbvbv(long _pointer_, long entity, float timePos, float weight, boolean software, boolean hardware);

    /** 
    Tells the animation how to interpolate between keyframes. **/
    public void setInterpolationMode(org.ogre4j.Animation.InterpolationMode im) {
        _setInterpolationMode__InterpolationModev(this.object.pointer, im.getValue());
    }

    private native void _setInterpolationMode__InterpolationModev(long _pointer_, int im);

    /** 
    Gets the current interpolation mode of this animation. **/
    public org.ogre4j.Animation.InterpolationMode getInterpolationMode() {
         return org.ogre4j.Animation.InterpolationMode.toEnum(_getInterpolationMode_const(this.object.pointer));
    }

    private native int _getInterpolationMode_const(long _pointer_);

    /** 
    Tells the animation how to interpolate rotations. **/
    public void setRotationInterpolationMode(org.ogre4j.Animation.RotationInterpolationMode im) {
        _setRotationInterpolationMode__RotationInterpolationModev(this.object.pointer, im.getValue());
    }

    private native void _setRotationInterpolationMode__RotationInterpolationModev(long _pointer_, int im);

    /** 
    Gets the current rotation interpolation mode of this animation. **/
    public org.ogre4j.Animation.RotationInterpolationMode getRotationInterpolationMode() {
         return org.ogre4j.Animation.RotationInterpolationMode.toEnum(_getRotationInterpolationMode_const(this.object.pointer));
    }

    private native int _getRotationInterpolationMode_const(long _pointer_);

    /** **/
    public org.ogre4j.IAnimation.INodeTrackList _getNodeTrackList() {
         return new org.ogre4j.Animation.NodeTrackList(new InstancePointer(__getNodeTrackList_const(this.object.pointer)));
    }

    private native long __getNodeTrackList_const(long _pointer_);

    /** **/
    public void getNodeTrackIterator(org.ogre4j.IAnimation.INodeTrackIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNodeTrackIterator_const(this.object.pointer)), false);
    }

    private native long _getNodeTrackIterator_const(long _pointer_);

    /** **/
    public org.ogre4j.IAnimation.INumericTrackList _getNumericTrackList() {
         return new org.ogre4j.Animation.NumericTrackList(new InstancePointer(__getNumericTrackList_const(this.object.pointer)));
    }

    private native long __getNumericTrackList_const(long _pointer_);

    /** **/
    public void getNumericTrackIterator(org.ogre4j.IAnimation.INumericTrackIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNumericTrackIterator_const(this.object.pointer)), false);
    }

    private native long _getNumericTrackIterator_const(long _pointer_);

    /** **/
    public org.ogre4j.IAnimation.IVertexTrackList _getVertexTrackList() {
         return new org.ogre4j.Animation.VertexTrackList(new InstancePointer(__getVertexTrackList_const(this.object.pointer)));
    }

    private native long __getVertexTrackList_const(long _pointer_);

    /** **/
    public void getVertexTrackIterator(org.ogre4j.IAnimation.IVertexTrackIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getVertexTrackIterator_const(this.object.pointer)), false);
    }

    private native long _getVertexTrackIterator_const(long _pointer_);

    /** 
    Optimise an animation by removing unnecessary tracks and keyframes. **/
    public void optimise(boolean discardIdentityNodeTracks) {
        _optimise__bv(this.object.pointer, discardIdentityNodeTracks);
    }

    private native void _optimise__bv(long _pointer_, boolean discardIdentityNodeTracks);

    /** 
    Internal method for collecting identity node tracks. **/
    public void _collectIdentityNodeTracks(org.ogre4j.IAnimation.ITrackHandleList tracks) {
        __collectIdentityNodeTracks__TrackHandleListr_const(this.object.pointer, tracks.getInstancePointer().pointer);
    }

    private native void __collectIdentityNodeTracks__TrackHandleListr_const(long _pointer_, long tracks);

    /** 
    Internal method for destroy given node tracks. **/
    public void _destroyNodeTracks(org.ogre4j.IAnimation.ITrackHandleList tracks) {
        __destroyNodeTracks__TrackHandleListR(this.object.pointer, tracks.getInstancePointer().pointer);
    }

    private native void __destroyNodeTracks__TrackHandleListR(long _pointer_, long tracks);

    /** 
    Clone this animation. **/
    public org.ogre4j.IAnimation clone(String newName) {
         return new org.ogre4j.Animation(new InstancePointer(_clone__StringR_const(this.object.pointer, newName)));
    }

    private native long _clone__StringR_const(long _pointer_, String newName);

    /** 
    Internal method used to tell the animation that keyframe list has been changed, which may cause it to rebuild some internal data **/
    public void _keyFrameListChanged() {
        __keyFrameListChanged(this.object.pointer);
    }

    private native void __keyFrameListChanged(long _pointer_);

    /** 
    Internal method used to convert time position to time index object. **/
    public void _getTimeIndex(org.ogre4j.ITimeIndex returnValue, float timePos) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(__getTimeIndex__Realv_const(this.object.pointer, timePos)), false);
    }

    private native long __getTimeIndex__Realv_const(long _pointer_, float timePos);

    /** 
    Sets the default animation interpolation mode. **/
    public static void setDefaultInterpolationMode(org.ogre4j.Animation.InterpolationMode im) {
        _setDefaultInterpolationMode__InterpolationModev( im.getValue());
    }

    private native static void _setDefaultInterpolationMode__InterpolationModev(int im);

    /** 
    Gets the default interpolation mode for all animations. **/
    public static org.ogre4j.Animation.InterpolationMode getDefaultInterpolationMode() {
         return org.ogre4j.Animation.InterpolationMode.toEnum(_getDefaultInterpolationMode());
    }

    private native static int _getDefaultInterpolationMode();

    /** 
    Sets the default rotation interpolation mode. **/
    public static void setDefaultRotationInterpolationMode(org.ogre4j.Animation.RotationInterpolationMode im) {
        _setDefaultRotationInterpolationMode__RotationInterpolationModev( im.getValue());
    }

    private native static void _setDefaultRotationInterpolationMode__RotationInterpolationModev(int im);

    /** 
    Gets the default rotation interpolation mode for all animations. **/
    public static org.ogre4j.Animation.RotationInterpolationMode getDefaultRotationInterpolationMode() {
         return org.ogre4j.Animation.RotationInterpolationMode.toEnum(_getDefaultRotationInterpolationMode());
    }

    private native static int _getDefaultRotationInterpolationMode();

}
