/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public enum Capabilities implements INativeEnum < Capabilities > {
    RSC_AUTOMIPMAP(CapabilitiesHelper.ENUM_VALUES[0]),
    RSC_BLENDING(CapabilitiesHelper.ENUM_VALUES[1]),
    RSC_ANISOTROPY(CapabilitiesHelper.ENUM_VALUES[2]),
    RSC_DOT3(CapabilitiesHelper.ENUM_VALUES[3]),
    RSC_CUBEMAPPING(CapabilitiesHelper.ENUM_VALUES[4]),
    RSC_HWSTENCIL(CapabilitiesHelper.ENUM_VALUES[5]),
    RSC_VBO(CapabilitiesHelper.ENUM_VALUES[6]),
    RSC_VERTEX_PROGRAM(CapabilitiesHelper.ENUM_VALUES[7]),
    RSC_FRAGMENT_PROGRAM(CapabilitiesHelper.ENUM_VALUES[8]),
    RSC_SCISSOR_TEST(CapabilitiesHelper.ENUM_VALUES[9]),
    RSC_TWO_SIDED_STENCIL(CapabilitiesHelper.ENUM_VALUES[10]),
    RSC_STENCIL_WRAP(CapabilitiesHelper.ENUM_VALUES[11]),
    RSC_HWOCCLUSION(CapabilitiesHelper.ENUM_VALUES[12]),
    RSC_USER_CLIP_PLANES(CapabilitiesHelper.ENUM_VALUES[13]),
    RSC_VERTEX_FORMAT_UBYTE4(CapabilitiesHelper.ENUM_VALUES[14]),
    RSC_INFINITE_FAR_PLANE(CapabilitiesHelper.ENUM_VALUES[15]),
    RSC_HWRENDER_TO_TEXTURE(CapabilitiesHelper.ENUM_VALUES[16]),
    RSC_TEXTURE_FLOAT(CapabilitiesHelper.ENUM_VALUES[17]),
    RSC_NON_POWER_OF_2_TEXTURES(CapabilitiesHelper.ENUM_VALUES[18]),
    RSC_TEXTURE_3D(CapabilitiesHelper.ENUM_VALUES[19]),
    RSC_POINT_SPRITES(CapabilitiesHelper.ENUM_VALUES[20]),
    RSC_POINT_EXTENDED_PARAMETERS(CapabilitiesHelper.ENUM_VALUES[21]),
    RSC_VERTEX_TEXTURE_FETCH(CapabilitiesHelper.ENUM_VALUES[22]),
    RSC_MIPMAP_LOD_BIAS(CapabilitiesHelper.ENUM_VALUES[23]),
    RSC_GEOMETRY_PROGRAM(CapabilitiesHelper.ENUM_VALUES[24]),
    RSC_HWRENDER_TO_VERTEX_BUFFER(CapabilitiesHelper.ENUM_VALUES[25]),
    RSC_TEXTURE_COMPRESSION(CapabilitiesHelper.ENUM_VALUES[26]),
    RSC_TEXTURE_COMPRESSION_DXT(CapabilitiesHelper.ENUM_VALUES[27]),
    RSC_TEXTURE_COMPRESSION_VTC(CapabilitiesHelper.ENUM_VALUES[28]),
    RSC_FIXED_FUNCTION(CapabilitiesHelper.ENUM_VALUES[29]),
    RSC_MRT_DIFFERENT_BIT_DEPTHS(CapabilitiesHelper.ENUM_VALUES[30]),
    RSC_ALPHA_TO_COVERAGE(CapabilitiesHelper.ENUM_VALUES[31]),
    RSC_PERSTAGECONSTANT(CapabilitiesHelper.ENUM_VALUES[32]),
    RSC_GL1_5_NOVBO(CapabilitiesHelper.ENUM_VALUES[33]),
    RSC_FBO(CapabilitiesHelper.ENUM_VALUES[34]),
    RSC_FBO_ARB(CapabilitiesHelper.ENUM_VALUES[35]),
    RSC_FBO_ATI(CapabilitiesHelper.ENUM_VALUES[36]),
    RSC_PBUFFER(CapabilitiesHelper.ENUM_VALUES[37]),
    RSC_GL1_5_NOHWOCCLUSION(CapabilitiesHelper.ENUM_VALUES[38]);

    private int value;

    Capabilities(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public Capabilities getEnum(int val) {
        return toEnum(val);
    }

    public static final Capabilities toEnum(int retval) {
    if (retval ==RSC_AUTOMIPMAP.value)
        return Capabilities.RSC_AUTOMIPMAP;
    else if (retval ==RSC_BLENDING.value)
        return Capabilities.RSC_BLENDING;
    else if (retval ==RSC_ANISOTROPY.value)
        return Capabilities.RSC_ANISOTROPY;
    else if (retval ==RSC_DOT3.value)
        return Capabilities.RSC_DOT3;
    else if (retval ==RSC_CUBEMAPPING.value)
        return Capabilities.RSC_CUBEMAPPING;
    else if (retval ==RSC_HWSTENCIL.value)
        return Capabilities.RSC_HWSTENCIL;
    else if (retval ==RSC_VBO.value)
        return Capabilities.RSC_VBO;
    else if (retval ==RSC_VERTEX_PROGRAM.value)
        return Capabilities.RSC_VERTEX_PROGRAM;
    else if (retval ==RSC_FRAGMENT_PROGRAM.value)
        return Capabilities.RSC_FRAGMENT_PROGRAM;
    else if (retval ==RSC_SCISSOR_TEST.value)
        return Capabilities.RSC_SCISSOR_TEST;
    else if (retval ==RSC_TWO_SIDED_STENCIL.value)
        return Capabilities.RSC_TWO_SIDED_STENCIL;
    else if (retval ==RSC_STENCIL_WRAP.value)
        return Capabilities.RSC_STENCIL_WRAP;
    else if (retval ==RSC_HWOCCLUSION.value)
        return Capabilities.RSC_HWOCCLUSION;
    else if (retval ==RSC_USER_CLIP_PLANES.value)
        return Capabilities.RSC_USER_CLIP_PLANES;
    else if (retval ==RSC_VERTEX_FORMAT_UBYTE4.value)
        return Capabilities.RSC_VERTEX_FORMAT_UBYTE4;
    else if (retval ==RSC_INFINITE_FAR_PLANE.value)
        return Capabilities.RSC_INFINITE_FAR_PLANE;
    else if (retval ==RSC_HWRENDER_TO_TEXTURE.value)
        return Capabilities.RSC_HWRENDER_TO_TEXTURE;
    else if (retval ==RSC_TEXTURE_FLOAT.value)
        return Capabilities.RSC_TEXTURE_FLOAT;
    else if (retval ==RSC_NON_POWER_OF_2_TEXTURES.value)
        return Capabilities.RSC_NON_POWER_OF_2_TEXTURES;
    else if (retval ==RSC_TEXTURE_3D.value)
        return Capabilities.RSC_TEXTURE_3D;
    else if (retval ==RSC_POINT_SPRITES.value)
        return Capabilities.RSC_POINT_SPRITES;
    else if (retval ==RSC_POINT_EXTENDED_PARAMETERS.value)
        return Capabilities.RSC_POINT_EXTENDED_PARAMETERS;
    else if (retval ==RSC_VERTEX_TEXTURE_FETCH.value)
        return Capabilities.RSC_VERTEX_TEXTURE_FETCH;
    else if (retval ==RSC_MIPMAP_LOD_BIAS.value)
        return Capabilities.RSC_MIPMAP_LOD_BIAS;
    else if (retval ==RSC_GEOMETRY_PROGRAM.value)
        return Capabilities.RSC_GEOMETRY_PROGRAM;
    else if (retval ==RSC_HWRENDER_TO_VERTEX_BUFFER.value)
        return Capabilities.RSC_HWRENDER_TO_VERTEX_BUFFER;
    else if (retval ==RSC_TEXTURE_COMPRESSION.value)
        return Capabilities.RSC_TEXTURE_COMPRESSION;
    else if (retval ==RSC_TEXTURE_COMPRESSION_DXT.value)
        return Capabilities.RSC_TEXTURE_COMPRESSION_DXT;
    else if (retval ==RSC_TEXTURE_COMPRESSION_VTC.value)
        return Capabilities.RSC_TEXTURE_COMPRESSION_VTC;
    else if (retval ==RSC_FIXED_FUNCTION.value)
        return Capabilities.RSC_FIXED_FUNCTION;
    else if (retval ==RSC_MRT_DIFFERENT_BIT_DEPTHS.value)
        return Capabilities.RSC_MRT_DIFFERENT_BIT_DEPTHS;
    else if (retval ==RSC_ALPHA_TO_COVERAGE.value)
        return Capabilities.RSC_ALPHA_TO_COVERAGE;
    else if (retval ==RSC_PERSTAGECONSTANT.value)
        return Capabilities.RSC_PERSTAGECONSTANT;
    else if (retval ==RSC_GL1_5_NOVBO.value)
        return Capabilities.RSC_GL1_5_NOVBO;
    else if (retval ==RSC_FBO.value)
        return Capabilities.RSC_FBO;
    else if (retval ==RSC_FBO_ARB.value)
        return Capabilities.RSC_FBO_ARB;
    else if (retval ==RSC_FBO_ATI.value)
        return Capabilities.RSC_FBO_ATI;
    else if (retval ==RSC_PBUFFER.value)
        return Capabilities.RSC_PBUFFER;
    else if (retval ==RSC_GL1_5_NOHWOCCLUSION.value)
        return Capabilities.RSC_GL1_5_NOHWOCCLUSION;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

class CapabilitiesHelper{
static { System.loadLibrary("ogre4j");}

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

