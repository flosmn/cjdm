/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IVertexAnimationTrack extends INativeObject, org.ogre4j.IAnimationTrack {

    /** 
    Get the type of vertex animation we're performing. **/
    public org.ogre4j.VertexAnimationType getAnimationType();

    /** 
    Creates a new morph  and adds it to this animation at the given time index. **/
    public org.ogre4j.IVertexMorphKeyFrame createVertexMorphKeyFrame(float timePos);

    /** 
    Creates the single pose  and adds it to this animation. **/
    public org.ogre4j.IVertexPoseKeyFrame createVertexPoseKeyFrame(float timePos);

    /** 
    This method in fact does nothing, since interpolation is not performed inside the keyframes for this type of track. **/
    public void getInterpolatedKeyFrame(org.ogre4j.ITimeIndex timeIndex, org.ogre4j.IKeyFrame kf);

    /** **/
    public void apply(org.ogre4j.ITimeIndex timeIndex, float weight, float scale);

    /** 
    As the 'apply' method but applies to specified  instead of associated data. **/
    public void applyToVertexData(org.ogre4j.IVertexData data, org.ogre4j.ITimeIndex timeIndex, float weight, org.ogre4j.IPoseList poseList);

    /** 
    Returns the morph  at the specified index. **/
    public org.ogre4j.IVertexMorphKeyFrame getVertexMorphKeyFrame(int index);

    /** 
    Returns the pose  at the specified index. **/
    public org.ogre4j.IVertexPoseKeyFrame getVertexPoseKeyFrame(int index);

    /** 
    Sets the associated  which this track will update. **/
    public void setAssociatedVertexData(org.ogre4j.IVertexData data);

    /** 
    Gets the associated  which this track will update. **/
    public org.ogre4j.IVertexData getAssociatedVertexData();

    /** **/
    public void setTargetMode(org.ogre4j.VertexAnimationTrack.TargetMode m);

    /** **/
    public org.ogre4j.VertexAnimationTrack.TargetMode getTargetMode();

    /** 
    Method to determine if this track has any KeyFrames which are doing anything useful - can be used to determine if this track can be optimised out. **/
    public boolean hasNonZeroKeyFrames();

    /** 
    Optimise the current track by removing any duplicate keyframes. **/
    public void optimise();

    /** 
    Clone this track (internal use only) **/
    public org.ogre4j.IVertexAnimationTrack _clone(org.ogre4j.IAnimation newParent);

}
