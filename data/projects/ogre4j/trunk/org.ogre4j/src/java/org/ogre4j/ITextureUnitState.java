/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ITextureUnitState extends INativeObject, org.ogre4j.IResourceAllocatedObject {

public static interface ITextureEffect extends INativeObject {

    /** **/
    public org.ogre4j.TextureUnitState.TextureEffectType gettype();

    /** **/
    public void settype(org.ogre4j.TextureUnitState.TextureEffectType _jni_value_);

    /** **/
    public int getsubtype();

    /** **/
    public void setsubtype(int _jni_value_);

    /** **/
    public float getarg1();

    /** **/
    public void setarg1(float _jni_value_);

    /** **/
    public float getarg2();

    /** **/
    public void setarg2(float _jni_value_);

    /** **/
    public org.ogre4j.WaveformType getwaveType();

    /** **/
    public void setwaveType(org.ogre4j.WaveformType _jni_value_);

    /** **/
    public float getbase();

    /** **/
    public void setbase(float _jni_value_);

    /** **/
    public float getfrequency();

    /** **/
    public void setfrequency(float _jni_value_);

    /** **/
    public float getphase();

    /** **/
    public void setphase(float _jni_value_);

    /** **/
    public float getamplitude();

    /** **/
    public void setamplitude(float _jni_value_);

    /** **/
    public void getcontroller(org.ogre4j.IController< Float > returnValue);

    /** **/
    public void setcontroller(org.ogre4j.IController< Float > _jni_value_);

    /** **/
    public org.ogre4j.IFrustum getfrustum();

}
public static interface IUVWAddressingMode extends INativeObject {

    /** **/
    public org.ogre4j.TextureUnitState.TextureAddressingMode getu();

    /** **/
    public void setu(org.ogre4j.TextureUnitState.TextureAddressingMode _jni_value_);

    /** **/
    public org.ogre4j.TextureUnitState.TextureAddressingMode getv();

    /** **/
    public void setv(org.ogre4j.TextureUnitState.TextureAddressingMode _jni_value_);

    /** **/
    public org.ogre4j.TextureUnitState.TextureAddressingMode getw();

    /** **/
    public void setw(org.ogre4j.TextureUnitState.TextureAddressingMode _jni_value_);

}
public interface IEffectMap extends INativeObject, org.std.Imultimap< org.ogre4j.TextureUnitState.TextureEffectType, org.ogre4j.ITextureUnitState.ITextureEffect > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.TextureUnitState.TextureEffectType key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.TextureUnitState.TextureEffectType key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
    /** **/
    public org.ogre4j.ITextureUnitState operatorAssignment(org.ogre4j.ITextureUnitState oth);

    /** 
    Get the name of current texture image for this layer. **/
    public String getTextureName();

    /** 
    Sets this texture layer to use a single texture, given the name of the texture to use on this layer. **/
    public void setTextureName(String name, org.ogre4j.TextureType ttype);

    /** 
    Sets this texture layer to use a combination of 6 texture maps, each one relating to a face of a cube. **/
    public void setCubicTextureName(String name, boolean forUVW);

    /** 
    Sets the names of the texture images for an animated texture. **/
    public void setAnimatedTextureName(String name, long numFrames, float duration);

    /** 
    Returns the width and height of the texture in the given frame. **/
    public void getTextureDimensions(org.std.Ipair< Integer, Integer > returnValue, long frame);

    /** 
    Changes the active frame in an animated or multi-image texture. **/
    public void setCurrentFrame(long frameNumber);

    /** 
    Gets the active frame in an animated or multi-image texture layer. **/
    public long getCurrentFrame();

    /** 
    Gets the name of the texture associated with a frame number. Throws an exception if frameNumber exceeds the number of stored frames. **/
    public String getFrameTextureName(long frameNumber);

    /** 
    Sets the name of the texture associated with a frame. **/
    public void setFrameTextureName(String name, long frameNumber);

    /** 
    Add a  name to the end of the frame container. **/
    public void addFrameTextureName(String name);

    /** 
    deletes a specific texture frame. The texture used is not deleted but the texture will no longer be used by the  Unit. An exception is raised if the frame number exceeds the number of actual frames. **/
    public void deleteFrameTextureName(int frameNumber);

    /** 
    Gets the number of frames for a texture. **/
    public long getNumFrames();

    /** 
    Sets the type of unit these texture settings should be bound to. **/
    public void setBindingType(org.ogre4j.TextureUnitState.BindingType bt);

    /** 
    Gets the type of unit these texture settings should be bound to. **/
    public org.ogre4j.TextureUnitState.BindingType getBindingType();

    /** 
    Set the type of content this  references. **/
    public void setContentType(org.ogre4j.TextureUnitState.ContentType ct);

    /** 
    Get the type of content this  references. **/
    public org.ogre4j.TextureUnitState.ContentType getContentType();

    /** 
    Returns true if this texture unit is either a series of 6 2D textures, each in it's own frame, or is a full 3D cube map. You can tell which by checking getTextureType. **/
    public boolean isCubic();

    /** 
    Returns true if this texture layer uses a composite 3D cubic texture. **/
    public boolean is3D();

    /** 
    Returns the type of this texture. **/
    public org.ogre4j.TextureType getTextureType();

    /** 
    Sets the desired pixel format when load the texture. **/
    public void setDesiredFormat(org.ogre4j.PixelFormat desiredFormat);

    /** 
    Gets the desired pixel format when load the texture. **/
    public org.ogre4j.PixelFormat getDesiredFormat();

    /** 
    Sets how many mipmaps have been requested for the texture. **/
    public void setNumMipmaps(int numMipmaps);

    /** 
    Gets how many mipmaps have been requested for the texture. **/
    public int getNumMipmaps();

    /** 
    Sets whether this texture is requested to be loaded as alpha if single channel **/
    public void setIsAlpha(boolean isAlpha);

    /** 
    Gets whether this texture is requested to be loaded as alpha if single channel **/
    public boolean getIsAlpha();

    /** **/
    public void setHardwareGammaEnabled(boolean enabled);

    /** **/
    public boolean isHardwareGammaEnabled();

    /** 
    Gets the index of the set of texture co-ords this layer uses. **/
    public long getTextureCoordSet();

    /** 
    Sets the index of the set of texture co-ords this layer uses. **/
    public void setTextureCoordSet(long set);

    /** 
    Sets a matrix used to transform any texture coordinates on this layer. **/
    public void setTextureTransform(org.ogre4j.IMatrix4 xform);

    /** 
    Gets the current texture transformation matrix. **/
    public org.ogre4j.IMatrix4 getTextureTransform();

    /** 
    Sets the translation offset of the texture, ie scrolls the texture. **/
    public void setTextureScroll(float u, float v);

    /** 
    As setTextureScroll, but sets only U value. **/
    public void setTextureUScroll(float value);

    /** **/
    public float getTextureUScroll();

    /** 
    As setTextureScroll, but sets only V value. **/
    public void setTextureVScroll(float value);

    /** **/
    public float getTextureVScroll();

    /** 
    As setTextureScale, but sets only U value. **/
    public void setTextureUScale(float value);

    /** **/
    public float getTextureUScale();

    /** 
    As setTextureScale, but sets only V value. **/
    public void setTextureVScale(float value);

    /** **/
    public float getTextureVScale();

    /** 
    Sets the scaling factor applied to texture coordinates. **/
    public void setTextureScale(float uScale, float vScale);

    /** 
    Sets the anticlockwise rotation factor applied to texture coordinates. **/
    public void setTextureRotate(org.ogre4j.IRadian angle);

    /** **/
    public org.ogre4j.IRadian getTextureRotate();

    /** 
    Gets the texture addressing mode for a given coordinate, i.e. what happens at uv values above 1.0. **/
    public org.ogre4j.ITextureUnitState.IUVWAddressingMode getTextureAddressingMode();

    /** 
    Sets the texture addressing mode, i.e. what happens at uv values above 1.0. **/
    public void setTextureAddressingMode(org.ogre4j.TextureUnitState.TextureAddressingMode tam);

    /** 
    Sets the texture addressing mode, i.e. what happens at uv values above 1.0. **/
    public void setTextureAddressingMode(org.ogre4j.TextureUnitState.TextureAddressingMode u, org.ogre4j.TextureUnitState.TextureAddressingMode v, org.ogre4j.TextureUnitState.TextureAddressingMode w);

    /** 
    Sets the texture addressing mode, i.e. what happens at uv values above 1.0. **/
    public void setTextureAddressingMode(org.ogre4j.ITextureUnitState.IUVWAddressingMode uvw);

    /** 
    Sets the texture border colour. **/
    public void setTextureBorderColour(org.ogre4j.IColourValue colour);

    /** 
    Sets the texture border colour. **/
    public org.ogre4j.IColourValue getTextureBorderColour();

    /** 
    Setting advanced blending options. **/
    public void setColourOperationEx(org.ogre4j.LayerBlendOperationEx op, org.ogre4j.LayerBlendSource source1, org.ogre4j.LayerBlendSource source2, org.ogre4j.IColourValue arg1, org.ogre4j.IColourValue arg2, float manualBlend);

    /** 
    Determines how this texture layer is combined with the one below it (or the diffuse colour of the geometry if this is layer 0). **/
    public void setColourOperation(org.ogre4j.LayerBlendOperation op);

    /** 
    Sets the multipass fallback operation for this layer, if you used  and not enough multitexturing hardware is available. **/
    public void setColourOpMultipassFallback(org.ogre4j.SceneBlendFactor sourceFactor, org.ogre4j.SceneBlendFactor destFactor);

    /** 
    Get multitexturing colour blending mode. **/
    public org.ogre4j.ILayerBlendModeEx getColourBlendMode();

    /** 
    Get multitexturing alpha blending mode. **/
    public org.ogre4j.ILayerBlendModeEx getAlphaBlendMode();

    /** 
    Get the multipass fallback for colour blending operation source factor. **/
    public org.ogre4j.SceneBlendFactor getColourBlendFallbackSrc();

    /** 
    Get the multipass fallback for colour blending operation destination factor. **/
    public org.ogre4j.SceneBlendFactor getColourBlendFallbackDest();

    /** 
    Sets the alpha operation to be applied to this texture. **/
    public void setAlphaOperation(org.ogre4j.LayerBlendOperationEx op, org.ogre4j.LayerBlendSource source1, org.ogre4j.LayerBlendSource source2, float arg1, float arg2, float manualBlend);

    /** 
    Generic method for setting up texture effects. **/
    public void addEffect(org.ogre4j.ITextureUnitState.ITextureEffect effect);

    /** 
    Turns on/off texture coordinate effect that makes this layer an environment map. **/
    public void setEnvironmentMap(boolean enable, org.ogre4j.TextureUnitState.EnvMapType envMapType);

    /** 
    Sets up an animated scroll for the texture layer. **/
    public void setScrollAnimation(float uSpeed, float vSpeed);

    /** 
    Sets up an animated texture rotation for this layer. **/
    public void setRotateAnimation(float speed);

    /** 
    Sets up a general time-relative texture modification effect. **/
    public void setTransformAnimation(org.ogre4j.TextureUnitState.TextureTransformType ttype, org.ogre4j.WaveformType waveType, float base, float frequency, float phase, float amplitude);

    /** 
    Enables or disables projective texturing on this texture unit. **/
    public void setProjectiveTexturing(boolean enabled, org.ogre4j.IFrustum projectionSettings);

    /** 
    Removes all effects applied to this texture layer. **/
    public void removeAllEffects();

    /** 
    Removes a single effect applied to this texture layer. **/
    public void removeEffect(org.ogre4j.TextureUnitState.TextureEffectType type);

    /** 
    Determines if this texture layer is currently blank. **/
    public boolean isBlank();

    /** 
    Sets this texture layer to be blank. **/
    public void setBlank();

    /** 
    Tests if the texture associated with this unit has failed to load. **/
    public boolean isTextureLoadFailing();

    /** 
    Tells the unit to retry loading the texture if it had failed to load. **/
    public void retryTextureLoad();

    /** **/
    public org.ogre4j.ITextureUnitState.IEffectMap getEffects();

    /** **/
    public float getAnimationDuration();

    /** 
    Set the texture filtering for this unit, using the simplified interface. **/
    public void setTextureFiltering(org.ogre4j.TextureFilterOptions filterType);

    /** 
    Set a single filtering option on this texture unit.  ftype The filtering type to set  opts The filtering option to set **/
    public void setTextureFiltering(org.ogre4j.FilterType ftype, org.ogre4j.FilterOptions opts);

    /** 
    Set a the detailed filtering options on this texture unit.  minFilter The filtering to use when reducing the size of the texture. Can be FO_POINT, FO_LINEAR or FO_ANISOTROPIC  magFilter The filtering to use when increasing the size of the texture Can be FO_POINT, FO_LINEAR or FO_ANISOTROPIC  mipFilter The filtering to use between mip levels Can be FO_NONE (turns off mipmapping), FO_POINT or FO_LINEAR (trilinear filtering) **/
    public void setTextureFiltering(org.ogre4j.FilterOptions minFilter, org.ogre4j.FilterOptions magFilter, org.ogre4j.FilterOptions mipFilter);

    /** **/
    public org.ogre4j.FilterOptions getTextureFiltering(org.ogre4j.FilterType ftpye);

    /** 
    Sets the anisotropy level to be used for this texture level. **/
    public void setTextureAnisotropy(long maxAniso);

    /** **/
    public long getTextureAnisotropy();

    /** 
    Sets the bias value applied to the mipmap calculation. **/
    public void setTextureMipmapBias(float bias);

    /** 
    Gets the bias value applied to the mipmap calculation. **/
    public float getTextureMipmapBias();

    /** **/
    public org.ogre4j.IPass getParent();

    /** 
    Internal method for preparing this object for load, as part of **/
    public void _prepare();

    /** 
    Internal method for undoing the preparation this object as part of Material::unprepare **/
    public void _unprepare();

    /** 
    Internal method for loading this object as part of **/
    public void _load();

    /** 
    Internal method for unloading this object as part of **/
    public void _unload();

    /** **/
    public boolean hasViewRelativeTextureCoordinateGeneration();

    /** **/
    public boolean isLoaded();

    /** 
    Tells the class that it needs recompilation. **/
    public void _notifyNeedsRecompile();

    /** 
    Set the name of the  Unit State **/
    public void setName(String name);

    /** **/
    public String getName();

    /** 
    Set the alias name used for texture frame names **/
    public void setTextureNameAlias(String name);

    /** 
    gets the  Name Alias of the  Unit. **/
    public String getTextureNameAlias();

    /** 
    Applies texture names to  Unit State with matching texture name aliases. If no matching aliases are found then the TUS state does not change. **/
    public boolean applyTextureAliases(org.ogre4j.IAliasTextureNamePairList aliasList, boolean apply);

    /** 
    Notify this object that its parent has changed **/
    public void _notifyParent(org.ogre4j.IPass parent);

    /** 
    Get the texture pointer for the current frame. **/
    public org.ogre4j.ITexturePtr _getTexturePtr();

    /** 
    Get the texture pointer for a given frame. **/
    public org.ogre4j.ITexturePtr _getTexturePtr(int frame);

    /** 
    Set the texture pointer for the current frame (internal use only!). **/
    public void _setTexturePtr(org.ogre4j.ITexturePtr texptr);

    /** 
    Set the texture pointer for a given frame (internal use only!). **/
    public void _setTexturePtr(org.ogre4j.ITexturePtr texptr, int frame);

    /** 
    Gets the animation controller (as created because of setAnimatedTexture) if it exists. **/
    public void _getAnimController(org.ogre4j.IController< Float > returnValue);

}
