/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IBillboardParticleRenderer extends INativeObject, org.ogre4j.IParticleSystemRenderer {

public static interface ICmdAccurateFacing extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdBillboardOrigin extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdBillboardRotationType extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdBillboardType extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdCommonDirection extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdCommonUpVector extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdPointRendering extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
    /** 
    Sets the type of billboard to render. **/
    public void setBillboardType(org.ogre4j.BillboardType bbt);

    /** 
    Returns the billboard type in use. **/
    public org.ogre4j.BillboardType getBillboardType();

    /** **/
    public void setUseAccurateFacing(boolean acc);

    /** **/
    public boolean getUseAccurateFacing();

    /** 
    Sets the point which acts as the origin point for all billboards in this set. **/
    public void setBillboardOrigin(org.ogre4j.BillboardOrigin origin);

    /** 
    Gets the point which acts as the origin point for all billboards in this set. **/
    public org.ogre4j.BillboardOrigin getBillboardOrigin();

    /** 
    Sets billboard rotation type. **/
    public void setBillboardRotationType(org.ogre4j.BillboardRotationType rotationType);

    /** 
    Sets billboard rotation type. **/
    public org.ogre4j.BillboardRotationType getBillboardRotationType();

    /** 
    Use this to specify the common direction given to billboards of type BBT_ORIENTED_COMMON. **/
    public void setCommonDirection(org.ogre4j.IVector3 vec);

    /** 
    Gets the common direction for all billboards (BBT_ORIENTED_COMMON) **/
    public org.ogre4j.IVector3 getCommonDirection();

    /** 
    Use this to specify the common up-vector given to billboards of type BBT_PERPENDICULAR_SELF. **/
    public void setCommonUpVector(org.ogre4j.IVector3 vec);

    /** 
    Gets the common up-vector for all billboards (BBT_PERPENDICULAR_SELF) **/
    public org.ogre4j.IVector3 getCommonUpVector();

    /** **/
    public void setPointRenderingEnabled(boolean enabled);

    /** **/
    public boolean isPointRenderingEnabled();

    /** **/
    public String getType();

    /** **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue, org.std.Ilist< org.ogre4j.IParticle > currentParticles, boolean cullIndividually);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** **/
    public void _setMaterial(org.ogre4j.IMaterialPtr mat);

    /** **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** **/
    public void _notifyParticleRotated();

    /** **/
    public void _notifyParticleResized();

    /** **/
    public void _notifyParticleQuota(int quota);

    /** **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint);

    /** **/
    public void _notifyDefaultDimensions(float width, float height);

    /** **/
    public void setRenderQueueGroup(short queueID);

    /** **/
    public void setKeepParticlesInLocalSpace(boolean keepLocal);

    /** **/
    public org.ogre4j.SortMode _getSortMode();

    /** **/
    public org.ogre4j.IBillboardSet getBillboardSet();

}
