/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class DefaultAxisAlignedBoxSceneQuery extends org.xbig.base.NativeObject implements org.ogre4j.IDefaultAxisAlignedBoxSceneQuery {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public DefaultAxisAlignedBoxSceneQuery(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected DefaultAxisAlignedBoxSceneQuery(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public DefaultAxisAlignedBoxSceneQuery(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public DefaultAxisAlignedBoxSceneQuery(org.ogre4j.ISceneManager creator) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    See RayScenQuery. **/
    public void execute(org.ogre4j.ISceneQueryListener listener) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Sets the size of the box you wish to query. **/
    public void setBox(org.ogre4j.IAxisAlignedBox box) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Gets the box which is being used for this query. **/
    public org.ogre4j.IAxisAlignedBox getBox() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Executes the query, returning the results back in one list. **/
    public org.ogre4j.ISceneQueryResult execute() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Gets the results of the last query that was run using this object, provided the query was executed using the collection-returning version of execute. **/
    public org.ogre4j.ISceneQueryResult getLastResults() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Clears the results of the last query execution. **/
    public void clearResults() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Self-callback in order to deal with execute which returns collection. **/
    public boolean queryResult(org.ogre4j.IMovableObject first) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Self-callback in order to deal with execute which returns collection. **/
    public boolean queryResult(org.ogre4j.ISceneQuery.IWorldFragment fragment) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Sets the mask for results of this query. **/
    public void setQueryMask(long mask) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Returns the current mask for this query. **/
    public long getQueryMask() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Sets the type mask for results of this query. **/
    public void setQueryTypeMask(long mask) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Returns the current mask for this query. **/
    public long getQueryTypeMask() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Tells the query what kind of world geometry to return from queries; often the full renderable geometry is not what is needed. **/
    public void setWorldFragmentType(org.ogre4j.SceneQuery.WorldFragmentType wft) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Gets the current world fragment types to be returned from the query. **/
    public org.ogre4j.SceneQuery.WorldFragmentType getWorldFragmentType() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Returns the types of world fragments this query supports. **/
    public void getSupportedWorldFragmentTypes(org.std.Iset< org.ogre4j.SceneQuery.WorldFragmentType > returnValue) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
