/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class GpuProgramParameters extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramParameters {
static { System.loadLibrary("ogre4j");}
public static class AutoConstantEntry extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramParameters.IAutoConstantEntry {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AutoConstantEntry(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AutoConstantEntry(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AutoConstantEntry(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public AutoConstantEntry(org.ogre4j.GpuProgramParameters.AutoConstantType theType, int theIndex, int theData, int theElemCount) {
         super( new org.xbig.base.InstancePointer(__createAutoConstantEntry__AutoConstantTypeviviviv( theType.getValue(),  theIndex,  theData,  theElemCount)), false);
    }

    private native static long __createAutoConstantEntry__AutoConstantTypeviviviv(int theType, int theIndex, int theData, int theElemCount);

    /** **/
    public AutoConstantEntry(org.ogre4j.GpuProgramParameters.AutoConstantType theType, int theIndex, float theData, int theElemCount) {
         super( new org.xbig.base.InstancePointer(__createAutoConstantEntry__AutoConstantTypevivRealviv( theType.getValue(),  theIndex,  theData,  theElemCount)), false);
    }

    private native static long __createAutoConstantEntry__AutoConstantTypevivRealviv(int theType, int theIndex, float theData, int theElemCount);

    /** **/
    public org.ogre4j.GpuProgramParameters.AutoConstantType getparamType() {
         return org.ogre4j.GpuProgramParameters.AutoConstantType.toEnum(_getparamType(this.object.pointer));
    }

    private native int _getparamType(long _pointer_);

    /** **/
    public void setparamType(org.ogre4j.GpuProgramParameters.AutoConstantType _jni_value_) {
        _setparamType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setparamType(long _pointer_, int _jni_value_);

    /** **/
    public int getphysicalIndex() {
         return _getphysicalIndex(this.object.pointer);
    }

    private native int _getphysicalIndex(long _pointer_);

    /** **/
    public void setphysicalIndex(int _jni_value_) {
        _setphysicalIndex(this.object.pointer, _jni_value_);
    }

    private native void _setphysicalIndex(long _pointer_, int _jni_value_);

    /** **/
    public int getelementCount() {
         return _getelementCount(this.object.pointer);
    }

    private native int _getelementCount(long _pointer_);

    /** **/
    public void setelementCount(int _jni_value_) {
        _setelementCount(this.object.pointer, _jni_value_);
    }

    private native void _setelementCount(long _pointer_, int _jni_value_);

    /** **/
    public int getdata() {
         return _getdata(this.object.pointer);
    }

    private native int _getdata(long _pointer_);

    /** **/
    public void setdata(int _jni_value_) {
        _setdata(this.object.pointer, _jni_value_);
    }

    private native void _setdata(long _pointer_, int _jni_value_);

    /** **/
    public float getfData() {
         return _getfData(this.object.pointer);
    }

    private native float _getfData(long _pointer_);

    /** **/
    public void setfData(float _jni_value_) {
        _setfData(this.object.pointer, _jni_value_);
    }

    private native void _setfData(long _pointer_, float _jni_value_);

}
public static class AutoConstantDefinition extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramParameters.IAutoConstantDefinition {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AutoConstantDefinition(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AutoConstantDefinition(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AutoConstantDefinition(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public AutoConstantDefinition(org.ogre4j.GpuProgramParameters.AutoConstantType _acType, String _name, int _elementCount, org.ogre4j.GpuProgramParameters.ElementType _elementType, org.ogre4j.GpuProgramParameters.ACDataType _dataType) {
         super( new org.xbig.base.InstancePointer(__createAutoConstantDefinition__AutoConstantTypevStringRivElementTypevACDataTypev( _acType.getValue(),  _name,  _elementCount,  _elementType.getValue(),  _dataType.getValue())), false);
    }

    private native static long __createAutoConstantDefinition__AutoConstantTypevStringRivElementTypevACDataTypev(int _acType, String _name, int _elementCount, int _elementType, int _dataType);

    /** **/
    public org.ogre4j.GpuProgramParameters.AutoConstantType getacType() {
         return org.ogre4j.GpuProgramParameters.AutoConstantType.toEnum(_getacType(this.object.pointer));
    }

    private native int _getacType(long _pointer_);

    /** **/
    public void setacType(org.ogre4j.GpuProgramParameters.AutoConstantType _jni_value_) {
        _setacType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setacType(long _pointer_, int _jni_value_);

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public int getelementCount() {
         return _getelementCount(this.object.pointer);
    }

    private native int _getelementCount(long _pointer_);

    /** **/
    public void setelementCount(int _jni_value_) {
        _setelementCount(this.object.pointer, _jni_value_);
    }

    private native void _setelementCount(long _pointer_, int _jni_value_);

    /** **/
    public org.ogre4j.GpuProgramParameters.ElementType getelementType() {
         return org.ogre4j.GpuProgramParameters.ElementType.toEnum(_getelementType(this.object.pointer));
    }

    private native int _getelementType(long _pointer_);

    /** **/
    public void setelementType(org.ogre4j.GpuProgramParameters.ElementType _jni_value_) {
        _setelementType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setelementType(long _pointer_, int _jni_value_);

    /** **/
    public org.ogre4j.GpuProgramParameters.ACDataType getdataType() {
         return org.ogre4j.GpuProgramParameters.ACDataType.toEnum(_getdataType(this.object.pointer));
    }

    private native int _getdataType(long _pointer_);

    /** **/
    public void setdataType(org.ogre4j.GpuProgramParameters.ACDataType _jni_value_) {
        _setdataType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setdataType(long _pointer_, int _jni_value_);

}
public enum AutoConstantType implements INativeEnum < AutoConstantType > {
    ACT_WORLD_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[0]),
    ACT_INVERSE_WORLD_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[1]),
    ACT_TRANSPOSE_WORLD_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[2]),
    ACT_INVERSE_TRANSPOSE_WORLD_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[3]),
    ACT_WORLD_MATRIX_ARRAY_3x4(AutoConstantTypeHelper.ENUM_VALUES[4]),
    ACT_WORLD_MATRIX_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[5]),
    ACT_VIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[6]),
    ACT_INVERSE_VIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[7]),
    ACT_TRANSPOSE_VIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[8]),
    ACT_INVERSE_TRANSPOSE_VIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[9]),
    ACT_PROJECTION_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[10]),
    ACT_INVERSE_PROJECTION_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[11]),
    ACT_TRANSPOSE_PROJECTION_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[12]),
    ACT_INVERSE_TRANSPOSE_PROJECTION_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[13]),
    ACT_VIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[14]),
    ACT_INVERSE_VIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[15]),
    ACT_TRANSPOSE_VIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[16]),
    ACT_INVERSE_TRANSPOSE_VIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[17]),
    ACT_WORLDVIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[18]),
    ACT_INVERSE_WORLDVIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[19]),
    ACT_TRANSPOSE_WORLDVIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[20]),
    ACT_INVERSE_TRANSPOSE_WORLDVIEW_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[21]),
    ACT_WORLDVIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[22]),
    ACT_INVERSE_WORLDVIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[23]),
    ACT_TRANSPOSE_WORLDVIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[24]),
    ACT_INVERSE_TRANSPOSE_WORLDVIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[25]),
    ACT_RENDER_TARGET_FLIPPING(AutoConstantTypeHelper.ENUM_VALUES[26]),
    ACT_FOG_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[27]),
    ACT_FOG_PARAMS(AutoConstantTypeHelper.ENUM_VALUES[28]),
    ACT_SURFACE_AMBIENT_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[29]),
    ACT_SURFACE_DIFFUSE_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[30]),
    ACT_SURFACE_SPECULAR_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[31]),
    ACT_SURFACE_EMISSIVE_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[32]),
    ACT_SURFACE_SHININESS(AutoConstantTypeHelper.ENUM_VALUES[33]),
    ACT_LIGHT_COUNT(AutoConstantTypeHelper.ENUM_VALUES[34]),
    ACT_AMBIENT_LIGHT_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[35]),
    ACT_LIGHT_DIFFUSE_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[36]),
    ACT_LIGHT_SPECULAR_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[37]),
    ACT_LIGHT_ATTENUATION(AutoConstantTypeHelper.ENUM_VALUES[38]),
    ACT_SPOTLIGHT_PARAMS(AutoConstantTypeHelper.ENUM_VALUES[39]),
    ACT_LIGHT_POSITION(AutoConstantTypeHelper.ENUM_VALUES[40]),
    ACT_LIGHT_POSITION_OBJECT_SPACE(AutoConstantTypeHelper.ENUM_VALUES[41]),
    ACT_LIGHT_POSITION_VIEW_SPACE(AutoConstantTypeHelper.ENUM_VALUES[42]),
    ACT_LIGHT_DIRECTION(AutoConstantTypeHelper.ENUM_VALUES[43]),
    ACT_LIGHT_DIRECTION_OBJECT_SPACE(AutoConstantTypeHelper.ENUM_VALUES[44]),
    ACT_LIGHT_DIRECTION_VIEW_SPACE(AutoConstantTypeHelper.ENUM_VALUES[45]),
    ACT_LIGHT_DISTANCE_OBJECT_SPACE(AutoConstantTypeHelper.ENUM_VALUES[46]),
    ACT_LIGHT_POWER_SCALE(AutoConstantTypeHelper.ENUM_VALUES[47]),
    ACT_LIGHT_DIFFUSE_COLOUR_POWER_SCALED(AutoConstantTypeHelper.ENUM_VALUES[48]),
    ACT_LIGHT_SPECULAR_COLOUR_POWER_SCALED(AutoConstantTypeHelper.ENUM_VALUES[49]),
    ACT_LIGHT_DIFFUSE_COLOUR_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[50]),
    ACT_LIGHT_SPECULAR_COLOUR_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[51]),
    ACT_LIGHT_DIFFUSE_COLOUR_POWER_SCALED_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[52]),
    ACT_LIGHT_SPECULAR_COLOUR_POWER_SCALED_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[53]),
    ACT_LIGHT_ATTENUATION_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[54]),
    ACT_LIGHT_POSITION_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[55]),
    ACT_LIGHT_POSITION_OBJECT_SPACE_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[56]),
    ACT_LIGHT_POSITION_VIEW_SPACE_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[57]),
    ACT_LIGHT_DIRECTION_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[58]),
    ACT_LIGHT_DIRECTION_OBJECT_SPACE_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[59]),
    ACT_LIGHT_DIRECTION_VIEW_SPACE_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[60]),
    ACT_LIGHT_DISTANCE_OBJECT_SPACE_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[61]),
    ACT_LIGHT_POWER_SCALE_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[62]),
    ACT_SPOTLIGHT_PARAMS_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[63]),
    ACT_DERIVED_AMBIENT_LIGHT_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[64]),
    ACT_DERIVED_SCENE_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[65]),
    ACT_DERIVED_LIGHT_DIFFUSE_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[66]),
    ACT_DERIVED_LIGHT_SPECULAR_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[67]),
    ACT_DERIVED_LIGHT_DIFFUSE_COLOUR_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[68]),
    ACT_DERIVED_LIGHT_SPECULAR_COLOUR_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[69]),
    ACT_LIGHT_NUMBER(AutoConstantTypeHelper.ENUM_VALUES[70]),
    ACT_LIGHT_CASTS_SHADOWS(AutoConstantTypeHelper.ENUM_VALUES[71]),
    ACT_SHADOW_EXTRUSION_DISTANCE(AutoConstantTypeHelper.ENUM_VALUES[72]),
    ACT_CAMERA_POSITION(AutoConstantTypeHelper.ENUM_VALUES[73]),
    ACT_CAMERA_POSITION_OBJECT_SPACE(AutoConstantTypeHelper.ENUM_VALUES[74]),
    ACT_TEXTURE_VIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[75]),
    ACT_TEXTURE_VIEWPROJ_MATRIX_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[76]),
    ACT_TEXTURE_WORLDVIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[77]),
    ACT_TEXTURE_WORLDVIEWPROJ_MATRIX_ARRAY(AutoConstantTypeHelper.ENUM_VALUES[78]),
    ACT_SPOTLIGHT_VIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[79]),
    ACT_SPOTLIGHT_WORLDVIEWPROJ_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[80]),
    ACT_CUSTOM(AutoConstantTypeHelper.ENUM_VALUES[81]),
    ACT_TIME(AutoConstantTypeHelper.ENUM_VALUES[82]),
    ACT_TIME_0_X(AutoConstantTypeHelper.ENUM_VALUES[83]),
    ACT_COSTIME_0_X(AutoConstantTypeHelper.ENUM_VALUES[84]),
    ACT_SINTIME_0_X(AutoConstantTypeHelper.ENUM_VALUES[85]),
    ACT_TANTIME_0_X(AutoConstantTypeHelper.ENUM_VALUES[86]),
    ACT_TIME_0_X_PACKED(AutoConstantTypeHelper.ENUM_VALUES[87]),
    ACT_TIME_0_1(AutoConstantTypeHelper.ENUM_VALUES[88]),
    ACT_COSTIME_0_1(AutoConstantTypeHelper.ENUM_VALUES[89]),
    ACT_SINTIME_0_1(AutoConstantTypeHelper.ENUM_VALUES[90]),
    ACT_TANTIME_0_1(AutoConstantTypeHelper.ENUM_VALUES[91]),
    ACT_TIME_0_1_PACKED(AutoConstantTypeHelper.ENUM_VALUES[92]),
    ACT_TIME_0_2PI(AutoConstantTypeHelper.ENUM_VALUES[93]),
    ACT_COSTIME_0_2PI(AutoConstantTypeHelper.ENUM_VALUES[94]),
    ACT_SINTIME_0_2PI(AutoConstantTypeHelper.ENUM_VALUES[95]),
    ACT_TANTIME_0_2PI(AutoConstantTypeHelper.ENUM_VALUES[96]),
    ACT_TIME_0_2PI_PACKED(AutoConstantTypeHelper.ENUM_VALUES[97]),
    ACT_FRAME_TIME(AutoConstantTypeHelper.ENUM_VALUES[98]),
    ACT_FPS(AutoConstantTypeHelper.ENUM_VALUES[99]),
    ACT_VIEWPORT_WIDTH(AutoConstantTypeHelper.ENUM_VALUES[100]),
    ACT_VIEWPORT_HEIGHT(AutoConstantTypeHelper.ENUM_VALUES[101]),
    ACT_INVERSE_VIEWPORT_WIDTH(AutoConstantTypeHelper.ENUM_VALUES[102]),
    ACT_INVERSE_VIEWPORT_HEIGHT(AutoConstantTypeHelper.ENUM_VALUES[103]),
    ACT_VIEWPORT_SIZE(AutoConstantTypeHelper.ENUM_VALUES[104]),
    ACT_VIEW_DIRECTION(AutoConstantTypeHelper.ENUM_VALUES[105]),
    ACT_VIEW_SIDE_VECTOR(AutoConstantTypeHelper.ENUM_VALUES[106]),
    ACT_VIEW_UP_VECTOR(AutoConstantTypeHelper.ENUM_VALUES[107]),
    ACT_FOV(AutoConstantTypeHelper.ENUM_VALUES[108]),
    ACT_NEAR_CLIP_DISTANCE(AutoConstantTypeHelper.ENUM_VALUES[109]),
    ACT_FAR_CLIP_DISTANCE(AutoConstantTypeHelper.ENUM_VALUES[110]),
    ACT_PASS_NUMBER(AutoConstantTypeHelper.ENUM_VALUES[111]),
    ACT_PASS_ITERATION_NUMBER(AutoConstantTypeHelper.ENUM_VALUES[112]),
    ACT_ANIMATION_PARAMETRIC(AutoConstantTypeHelper.ENUM_VALUES[113]),
    ACT_TEXEL_OFFSETS(AutoConstantTypeHelper.ENUM_VALUES[114]),
    ACT_SCENE_DEPTH_RANGE(AutoConstantTypeHelper.ENUM_VALUES[115]),
    ACT_SHADOW_SCENE_DEPTH_RANGE(AutoConstantTypeHelper.ENUM_VALUES[116]),
    ACT_SHADOW_COLOUR(AutoConstantTypeHelper.ENUM_VALUES[117]),
    ACT_TEXTURE_SIZE(AutoConstantTypeHelper.ENUM_VALUES[118]),
    ACT_INVERSE_TEXTURE_SIZE(AutoConstantTypeHelper.ENUM_VALUES[119]),
    ACT_PACKED_TEXTURE_SIZE(AutoConstantTypeHelper.ENUM_VALUES[120]),
    ACT_TEXTURE_MATRIX(AutoConstantTypeHelper.ENUM_VALUES[121]),
    ACT_LOD_CAMERA_POSITION(AutoConstantTypeHelper.ENUM_VALUES[122]),
    ACT_LOD_CAMERA_POSITION_OBJECT_SPACE(AutoConstantTypeHelper.ENUM_VALUES[123]);

    private int value;

    AutoConstantType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public AutoConstantType getEnum(int val) {
        return toEnum(val);
    }

    public static final AutoConstantType toEnum(int retval) {
    if (retval ==ACT_WORLD_MATRIX.value)
        return AutoConstantType.ACT_WORLD_MATRIX;
    else if (retval ==ACT_INVERSE_WORLD_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_WORLD_MATRIX;
    else if (retval ==ACT_TRANSPOSE_WORLD_MATRIX.value)
        return AutoConstantType.ACT_TRANSPOSE_WORLD_MATRIX;
    else if (retval ==ACT_INVERSE_TRANSPOSE_WORLD_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_TRANSPOSE_WORLD_MATRIX;
    else if (retval ==ACT_WORLD_MATRIX_ARRAY_3x4.value)
        return AutoConstantType.ACT_WORLD_MATRIX_ARRAY_3x4;
    else if (retval ==ACT_WORLD_MATRIX_ARRAY.value)
        return AutoConstantType.ACT_WORLD_MATRIX_ARRAY;
    else if (retval ==ACT_VIEW_MATRIX.value)
        return AutoConstantType.ACT_VIEW_MATRIX;
    else if (retval ==ACT_INVERSE_VIEW_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_VIEW_MATRIX;
    else if (retval ==ACT_TRANSPOSE_VIEW_MATRIX.value)
        return AutoConstantType.ACT_TRANSPOSE_VIEW_MATRIX;
    else if (retval ==ACT_INVERSE_TRANSPOSE_VIEW_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_TRANSPOSE_VIEW_MATRIX;
    else if (retval ==ACT_PROJECTION_MATRIX.value)
        return AutoConstantType.ACT_PROJECTION_MATRIX;
    else if (retval ==ACT_INVERSE_PROJECTION_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_PROJECTION_MATRIX;
    else if (retval ==ACT_TRANSPOSE_PROJECTION_MATRIX.value)
        return AutoConstantType.ACT_TRANSPOSE_PROJECTION_MATRIX;
    else if (retval ==ACT_INVERSE_TRANSPOSE_PROJECTION_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_TRANSPOSE_PROJECTION_MATRIX;
    else if (retval ==ACT_VIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_VIEWPROJ_MATRIX;
    else if (retval ==ACT_INVERSE_VIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_VIEWPROJ_MATRIX;
    else if (retval ==ACT_TRANSPOSE_VIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_TRANSPOSE_VIEWPROJ_MATRIX;
    else if (retval ==ACT_INVERSE_TRANSPOSE_VIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_TRANSPOSE_VIEWPROJ_MATRIX;
    else if (retval ==ACT_WORLDVIEW_MATRIX.value)
        return AutoConstantType.ACT_WORLDVIEW_MATRIX;
    else if (retval ==ACT_INVERSE_WORLDVIEW_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_WORLDVIEW_MATRIX;
    else if (retval ==ACT_TRANSPOSE_WORLDVIEW_MATRIX.value)
        return AutoConstantType.ACT_TRANSPOSE_WORLDVIEW_MATRIX;
    else if (retval ==ACT_INVERSE_TRANSPOSE_WORLDVIEW_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_TRANSPOSE_WORLDVIEW_MATRIX;
    else if (retval ==ACT_WORLDVIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_WORLDVIEWPROJ_MATRIX;
    else if (retval ==ACT_INVERSE_WORLDVIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_WORLDVIEWPROJ_MATRIX;
    else if (retval ==ACT_TRANSPOSE_WORLDVIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_TRANSPOSE_WORLDVIEWPROJ_MATRIX;
    else if (retval ==ACT_INVERSE_TRANSPOSE_WORLDVIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_INVERSE_TRANSPOSE_WORLDVIEWPROJ_MATRIX;
    else if (retval ==ACT_RENDER_TARGET_FLIPPING.value)
        return AutoConstantType.ACT_RENDER_TARGET_FLIPPING;
    else if (retval ==ACT_FOG_COLOUR.value)
        return AutoConstantType.ACT_FOG_COLOUR;
    else if (retval ==ACT_FOG_PARAMS.value)
        return AutoConstantType.ACT_FOG_PARAMS;
    else if (retval ==ACT_SURFACE_AMBIENT_COLOUR.value)
        return AutoConstantType.ACT_SURFACE_AMBIENT_COLOUR;
    else if (retval ==ACT_SURFACE_DIFFUSE_COLOUR.value)
        return AutoConstantType.ACT_SURFACE_DIFFUSE_COLOUR;
    else if (retval ==ACT_SURFACE_SPECULAR_COLOUR.value)
        return AutoConstantType.ACT_SURFACE_SPECULAR_COLOUR;
    else if (retval ==ACT_SURFACE_EMISSIVE_COLOUR.value)
        return AutoConstantType.ACT_SURFACE_EMISSIVE_COLOUR;
    else if (retval ==ACT_SURFACE_SHININESS.value)
        return AutoConstantType.ACT_SURFACE_SHININESS;
    else if (retval ==ACT_LIGHT_COUNT.value)
        return AutoConstantType.ACT_LIGHT_COUNT;
    else if (retval ==ACT_AMBIENT_LIGHT_COLOUR.value)
        return AutoConstantType.ACT_AMBIENT_LIGHT_COLOUR;
    else if (retval ==ACT_LIGHT_DIFFUSE_COLOUR.value)
        return AutoConstantType.ACT_LIGHT_DIFFUSE_COLOUR;
    else if (retval ==ACT_LIGHT_SPECULAR_COLOUR.value)
        return AutoConstantType.ACT_LIGHT_SPECULAR_COLOUR;
    else if (retval ==ACT_LIGHT_ATTENUATION.value)
        return AutoConstantType.ACT_LIGHT_ATTENUATION;
    else if (retval ==ACT_SPOTLIGHT_PARAMS.value)
        return AutoConstantType.ACT_SPOTLIGHT_PARAMS;
    else if (retval ==ACT_LIGHT_POSITION.value)
        return AutoConstantType.ACT_LIGHT_POSITION;
    else if (retval ==ACT_LIGHT_POSITION_OBJECT_SPACE.value)
        return AutoConstantType.ACT_LIGHT_POSITION_OBJECT_SPACE;
    else if (retval ==ACT_LIGHT_POSITION_VIEW_SPACE.value)
        return AutoConstantType.ACT_LIGHT_POSITION_VIEW_SPACE;
    else if (retval ==ACT_LIGHT_DIRECTION.value)
        return AutoConstantType.ACT_LIGHT_DIRECTION;
    else if (retval ==ACT_LIGHT_DIRECTION_OBJECT_SPACE.value)
        return AutoConstantType.ACT_LIGHT_DIRECTION_OBJECT_SPACE;
    else if (retval ==ACT_LIGHT_DIRECTION_VIEW_SPACE.value)
        return AutoConstantType.ACT_LIGHT_DIRECTION_VIEW_SPACE;
    else if (retval ==ACT_LIGHT_DISTANCE_OBJECT_SPACE.value)
        return AutoConstantType.ACT_LIGHT_DISTANCE_OBJECT_SPACE;
    else if (retval ==ACT_LIGHT_POWER_SCALE.value)
        return AutoConstantType.ACT_LIGHT_POWER_SCALE;
    else if (retval ==ACT_LIGHT_DIFFUSE_COLOUR_POWER_SCALED.value)
        return AutoConstantType.ACT_LIGHT_DIFFUSE_COLOUR_POWER_SCALED;
    else if (retval ==ACT_LIGHT_SPECULAR_COLOUR_POWER_SCALED.value)
        return AutoConstantType.ACT_LIGHT_SPECULAR_COLOUR_POWER_SCALED;
    else if (retval ==ACT_LIGHT_DIFFUSE_COLOUR_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_DIFFUSE_COLOUR_ARRAY;
    else if (retval ==ACT_LIGHT_SPECULAR_COLOUR_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_SPECULAR_COLOUR_ARRAY;
    else if (retval ==ACT_LIGHT_DIFFUSE_COLOUR_POWER_SCALED_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_DIFFUSE_COLOUR_POWER_SCALED_ARRAY;
    else if (retval ==ACT_LIGHT_SPECULAR_COLOUR_POWER_SCALED_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_SPECULAR_COLOUR_POWER_SCALED_ARRAY;
    else if (retval ==ACT_LIGHT_ATTENUATION_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_ATTENUATION_ARRAY;
    else if (retval ==ACT_LIGHT_POSITION_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_POSITION_ARRAY;
    else if (retval ==ACT_LIGHT_POSITION_OBJECT_SPACE_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_POSITION_OBJECT_SPACE_ARRAY;
    else if (retval ==ACT_LIGHT_POSITION_VIEW_SPACE_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_POSITION_VIEW_SPACE_ARRAY;
    else if (retval ==ACT_LIGHT_DIRECTION_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_DIRECTION_ARRAY;
    else if (retval ==ACT_LIGHT_DIRECTION_OBJECT_SPACE_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_DIRECTION_OBJECT_SPACE_ARRAY;
    else if (retval ==ACT_LIGHT_DIRECTION_VIEW_SPACE_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_DIRECTION_VIEW_SPACE_ARRAY;
    else if (retval ==ACT_LIGHT_DISTANCE_OBJECT_SPACE_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_DISTANCE_OBJECT_SPACE_ARRAY;
    else if (retval ==ACT_LIGHT_POWER_SCALE_ARRAY.value)
        return AutoConstantType.ACT_LIGHT_POWER_SCALE_ARRAY;
    else if (retval ==ACT_SPOTLIGHT_PARAMS_ARRAY.value)
        return AutoConstantType.ACT_SPOTLIGHT_PARAMS_ARRAY;
    else if (retval ==ACT_DERIVED_AMBIENT_LIGHT_COLOUR.value)
        return AutoConstantType.ACT_DERIVED_AMBIENT_LIGHT_COLOUR;
    else if (retval ==ACT_DERIVED_SCENE_COLOUR.value)
        return AutoConstantType.ACT_DERIVED_SCENE_COLOUR;
    else if (retval ==ACT_DERIVED_LIGHT_DIFFUSE_COLOUR.value)
        return AutoConstantType.ACT_DERIVED_LIGHT_DIFFUSE_COLOUR;
    else if (retval ==ACT_DERIVED_LIGHT_SPECULAR_COLOUR.value)
        return AutoConstantType.ACT_DERIVED_LIGHT_SPECULAR_COLOUR;
    else if (retval ==ACT_DERIVED_LIGHT_DIFFUSE_COLOUR_ARRAY.value)
        return AutoConstantType.ACT_DERIVED_LIGHT_DIFFUSE_COLOUR_ARRAY;
    else if (retval ==ACT_DERIVED_LIGHT_SPECULAR_COLOUR_ARRAY.value)
        return AutoConstantType.ACT_DERIVED_LIGHT_SPECULAR_COLOUR_ARRAY;
    else if (retval ==ACT_LIGHT_NUMBER.value)
        return AutoConstantType.ACT_LIGHT_NUMBER;
    else if (retval ==ACT_LIGHT_CASTS_SHADOWS.value)
        return AutoConstantType.ACT_LIGHT_CASTS_SHADOWS;
    else if (retval ==ACT_SHADOW_EXTRUSION_DISTANCE.value)
        return AutoConstantType.ACT_SHADOW_EXTRUSION_DISTANCE;
    else if (retval ==ACT_CAMERA_POSITION.value)
        return AutoConstantType.ACT_CAMERA_POSITION;
    else if (retval ==ACT_CAMERA_POSITION_OBJECT_SPACE.value)
        return AutoConstantType.ACT_CAMERA_POSITION_OBJECT_SPACE;
    else if (retval ==ACT_TEXTURE_VIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_TEXTURE_VIEWPROJ_MATRIX;
    else if (retval ==ACT_TEXTURE_VIEWPROJ_MATRIX_ARRAY.value)
        return AutoConstantType.ACT_TEXTURE_VIEWPROJ_MATRIX_ARRAY;
    else if (retval ==ACT_TEXTURE_WORLDVIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_TEXTURE_WORLDVIEWPROJ_MATRIX;
    else if (retval ==ACT_TEXTURE_WORLDVIEWPROJ_MATRIX_ARRAY.value)
        return AutoConstantType.ACT_TEXTURE_WORLDVIEWPROJ_MATRIX_ARRAY;
    else if (retval ==ACT_SPOTLIGHT_VIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_SPOTLIGHT_VIEWPROJ_MATRIX;
    else if (retval ==ACT_SPOTLIGHT_WORLDVIEWPROJ_MATRIX.value)
        return AutoConstantType.ACT_SPOTLIGHT_WORLDVIEWPROJ_MATRIX;
    else if (retval ==ACT_CUSTOM.value)
        return AutoConstantType.ACT_CUSTOM;
    else if (retval ==ACT_TIME.value)
        return AutoConstantType.ACT_TIME;
    else if (retval ==ACT_TIME_0_X.value)
        return AutoConstantType.ACT_TIME_0_X;
    else if (retval ==ACT_COSTIME_0_X.value)
        return AutoConstantType.ACT_COSTIME_0_X;
    else if (retval ==ACT_SINTIME_0_X.value)
        return AutoConstantType.ACT_SINTIME_0_X;
    else if (retval ==ACT_TANTIME_0_X.value)
        return AutoConstantType.ACT_TANTIME_0_X;
    else if (retval ==ACT_TIME_0_X_PACKED.value)
        return AutoConstantType.ACT_TIME_0_X_PACKED;
    else if (retval ==ACT_TIME_0_1.value)
        return AutoConstantType.ACT_TIME_0_1;
    else if (retval ==ACT_COSTIME_0_1.value)
        return AutoConstantType.ACT_COSTIME_0_1;
    else if (retval ==ACT_SINTIME_0_1.value)
        return AutoConstantType.ACT_SINTIME_0_1;
    else if (retval ==ACT_TANTIME_0_1.value)
        return AutoConstantType.ACT_TANTIME_0_1;
    else if (retval ==ACT_TIME_0_1_PACKED.value)
        return AutoConstantType.ACT_TIME_0_1_PACKED;
    else if (retval ==ACT_TIME_0_2PI.value)
        return AutoConstantType.ACT_TIME_0_2PI;
    else if (retval ==ACT_COSTIME_0_2PI.value)
        return AutoConstantType.ACT_COSTIME_0_2PI;
    else if (retval ==ACT_SINTIME_0_2PI.value)
        return AutoConstantType.ACT_SINTIME_0_2PI;
    else if (retval ==ACT_TANTIME_0_2PI.value)
        return AutoConstantType.ACT_TANTIME_0_2PI;
    else if (retval ==ACT_TIME_0_2PI_PACKED.value)
        return AutoConstantType.ACT_TIME_0_2PI_PACKED;
    else if (retval ==ACT_FRAME_TIME.value)
        return AutoConstantType.ACT_FRAME_TIME;
    else if (retval ==ACT_FPS.value)
        return AutoConstantType.ACT_FPS;
    else if (retval ==ACT_VIEWPORT_WIDTH.value)
        return AutoConstantType.ACT_VIEWPORT_WIDTH;
    else if (retval ==ACT_VIEWPORT_HEIGHT.value)
        return AutoConstantType.ACT_VIEWPORT_HEIGHT;
    else if (retval ==ACT_INVERSE_VIEWPORT_WIDTH.value)
        return AutoConstantType.ACT_INVERSE_VIEWPORT_WIDTH;
    else if (retval ==ACT_INVERSE_VIEWPORT_HEIGHT.value)
        return AutoConstantType.ACT_INVERSE_VIEWPORT_HEIGHT;
    else if (retval ==ACT_VIEWPORT_SIZE.value)
        return AutoConstantType.ACT_VIEWPORT_SIZE;
    else if (retval ==ACT_VIEW_DIRECTION.value)
        return AutoConstantType.ACT_VIEW_DIRECTION;
    else if (retval ==ACT_VIEW_SIDE_VECTOR.value)
        return AutoConstantType.ACT_VIEW_SIDE_VECTOR;
    else if (retval ==ACT_VIEW_UP_VECTOR.value)
        return AutoConstantType.ACT_VIEW_UP_VECTOR;
    else if (retval ==ACT_FOV.value)
        return AutoConstantType.ACT_FOV;
    else if (retval ==ACT_NEAR_CLIP_DISTANCE.value)
        return AutoConstantType.ACT_NEAR_CLIP_DISTANCE;
    else if (retval ==ACT_FAR_CLIP_DISTANCE.value)
        return AutoConstantType.ACT_FAR_CLIP_DISTANCE;
    else if (retval ==ACT_PASS_NUMBER.value)
        return AutoConstantType.ACT_PASS_NUMBER;
    else if (retval ==ACT_PASS_ITERATION_NUMBER.value)
        return AutoConstantType.ACT_PASS_ITERATION_NUMBER;
    else if (retval ==ACT_ANIMATION_PARAMETRIC.value)
        return AutoConstantType.ACT_ANIMATION_PARAMETRIC;
    else if (retval ==ACT_TEXEL_OFFSETS.value)
        return AutoConstantType.ACT_TEXEL_OFFSETS;
    else if (retval ==ACT_SCENE_DEPTH_RANGE.value)
        return AutoConstantType.ACT_SCENE_DEPTH_RANGE;
    else if (retval ==ACT_SHADOW_SCENE_DEPTH_RANGE.value)
        return AutoConstantType.ACT_SHADOW_SCENE_DEPTH_RANGE;
    else if (retval ==ACT_SHADOW_COLOUR.value)
        return AutoConstantType.ACT_SHADOW_COLOUR;
    else if (retval ==ACT_TEXTURE_SIZE.value)
        return AutoConstantType.ACT_TEXTURE_SIZE;
    else if (retval ==ACT_INVERSE_TEXTURE_SIZE.value)
        return AutoConstantType.ACT_INVERSE_TEXTURE_SIZE;
    else if (retval ==ACT_PACKED_TEXTURE_SIZE.value)
        return AutoConstantType.ACT_PACKED_TEXTURE_SIZE;
    else if (retval ==ACT_TEXTURE_MATRIX.value)
        return AutoConstantType.ACT_TEXTURE_MATRIX;
    else if (retval ==ACT_LOD_CAMERA_POSITION.value)
        return AutoConstantType.ACT_LOD_CAMERA_POSITION;
    else if (retval ==ACT_LOD_CAMERA_POSITION_OBJECT_SPACE.value)
        return AutoConstantType.ACT_LOD_CAMERA_POSITION_OBJECT_SPACE;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class AutoConstantTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public enum ACDataType implements INativeEnum < ACDataType > {
    ACDT_NONE(ACDataTypeHelper.ENUM_VALUES[0]),
    ACDT_INT(ACDataTypeHelper.ENUM_VALUES[1]),
    ACDT_REAL(ACDataTypeHelper.ENUM_VALUES[2]);

    private int value;

    ACDataType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public ACDataType getEnum(int val) {
        return toEnum(val);
    }

    public static final ACDataType toEnum(int retval) {
    if (retval ==ACDT_NONE.value)
        return ACDataType.ACDT_NONE;
    else if (retval ==ACDT_INT.value)
        return ACDataType.ACDT_INT;
    else if (retval ==ACDT_REAL.value)
        return ACDataType.ACDT_REAL;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class ACDataTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public enum ElementType implements INativeEnum < ElementType > {
    ET_INT(ElementTypeHelper.ENUM_VALUES[0]),
    ET_REAL(ElementTypeHelper.ENUM_VALUES[1]);

    private int value;

    ElementType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public ElementType getEnum(int val) {
        return toEnum(val);
    }

    public static final ElementType toEnum(int retval) {
    if (retval ==ET_INT.value)
        return ElementType.ET_INT;
    else if (retval ==ET_REAL.value)
        return ElementType.ET_REAL;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class ElementTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public static class AutoConstantList extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramParameters.IAutoConstantList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AutoConstantList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AutoConstantList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AutoConstantList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public AutoConstantList() {
         super( new org.xbig.base.InstancePointer(__createAutoConstantList()), false);
    }

    private native static long __createAutoConstantList();

    /** **/
    public void assign(int num, org.ogre4j.IGpuProgramParameters.IAutoConstantEntry val) {
        _assign__ivOgre_GpuProgramParameters_AutoConstantEntryR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_GpuProgramParameters_AutoConstantEntryR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry at(int loc) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry back() {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry front() {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry val) {
        _push_back__Ogre_GpuProgramParameters_AutoConstantEntryR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_GpuProgramParameters_AutoConstantEntryR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class FloatConstantList extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramParameters.IFloatConstantList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public FloatConstantList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected FloatConstantList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public FloatConstantList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public FloatConstantList() {
         super( new org.xbig.base.InstancePointer(__createFloatConstantList()), false);
    }

    private native static long __createFloatConstantList();

    /** **/
    public void assign(int num, float val) {
        _assign__ivFR(this.object.pointer, num,  val);
    }

    private native void _assign__ivFR(long _pointer_, int num, float val);

    /** **/
    public FloatPointer at(int loc) {
         return new FloatPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public FloatPointer back() {
         return new FloatPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public FloatPointer front() {
         return new FloatPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(float val) {
        _push_back__FR(this.object.pointer, val);
    }

    private native void _push_back__FR(long _pointer_, float val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class IntConstantList extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramParameters.IIntConstantList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public IntConstantList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected IntConstantList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public IntConstantList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public IntConstantList() {
         super( new org.xbig.base.InstancePointer(__createIntConstantList()), false);
    }

    private native static long __createIntConstantList();

    /** **/
    public void assign(int num, int val) {
        _assign__iviR(this.object.pointer, num,  val);
    }

    private native void _assign__iviR(long _pointer_, int num, int val);

    /** **/
    public IntegerPointer at(int loc) {
         return new IntegerPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public IntegerPointer back() {
         return new IntegerPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public IntegerPointer front() {
         return new IntegerPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(int val) {
        _push_back__iR(this.object.pointer, val);
    }

    private native void _push_back__iR(long _pointer_, int val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class AutoConstantIterator extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramParameters.IAutoConstantIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AutoConstantIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AutoConstantIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AutoConstantIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public AutoConstantIterator(org.ogre4j.IGpuProgramParameters.IAutoConstantList c) {
         super( new org.xbig.base.InstancePointer(__createAutoConstantIterator__Ogre_GpuProgramParameters_AutoConstantListR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createAutoConstantIterator__Ogre_GpuProgramParameters_AutoConstantListR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public void getNext(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNext(this.object.pointer)), false);
    }

    private native long _getNext(long _pointer_);

    /** **/
    public void peekNext(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_peekNext_const(this.object.pointer)), false);
    }

    private native long _peekNext_const(long _pointer_);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry peekNextPtr() {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_peekNextPtr_const(this.object.pointer)));
    }

    private native long _peekNextPtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GpuProgramParameters(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GpuProgramParameters(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GpuProgramParameters(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public GpuProgramParameters() {
         super( new org.xbig.base.InstancePointer(__createGpuProgramParameters()), false);
    }

    private native static long __createGpuProgramParameters();

    /** **/
    public GpuProgramParameters(org.ogre4j.IGpuProgramParameters oth) {
         super( new org.xbig.base.InstancePointer(__createGpuProgramParameters__GpuProgramParametersR( oth.getInstancePointer().pointer)), false);
    }

    private native static long __createGpuProgramParameters__GpuProgramParametersR(long oth);

    /** **/
    public org.ogre4j.IGpuProgramParameters operatorAssignment(org.ogre4j.IGpuProgramParameters oth) {
         return new org.ogre4j.GpuProgramParameters(new InstancePointer(_operatorAssignment__GpuProgramParametersR(this.object.pointer, oth.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__GpuProgramParametersR(long _pointer_, long oth);

    /** 
    Internal method for providing a link to a name->definition map for parameters. **/
    public void _setNamedConstants(org.ogre4j.IGpuNamedConstants constantmap) {
        __setNamedConstants__GpuNamedConstantsP(this.object.pointer, constantmap.getInstancePointer().pointer);
    }

    private native void __setNamedConstants__GpuNamedConstantsP(long _pointer_, long constantmap);

    /** 
    Internal method for providing a link to a logical index->physical index map for parameters. **/
    public void _setLogicalIndexes(org.ogre4j.IGpuLogicalBufferStruct floatIndexMap, org.ogre4j.IGpuLogicalBufferStruct intIndexMap) {
        __setLogicalIndexes__GpuLogicalBufferStructpGpuLogicalBufferStructp(this.object.pointer, floatIndexMap.getInstancePointer().pointer,  intIndexMap.getInstancePointer().pointer);
    }

    private native void __setLogicalIndexes__GpuLogicalBufferStructpGpuLogicalBufferStructp(long _pointer_, long floatIndexMap, long intIndexMap);

    /** **/
    public boolean hasNamedParameters() {
         return _hasNamedParameters_const(this.object.pointer);
    }

    private native boolean _hasNamedParameters_const(long _pointer_);

    /** 
    Does this parameter set include logically indexed parameters? **/
    public boolean hasLogicalIndexedParameters() {
         return _hasLogicalIndexedParameters_const(this.object.pointer);
    }

    private native boolean _hasLogicalIndexedParameters_const(long _pointer_);

    /** 
    Sets a 4-element floating-point parameter to the program. **/
    public void setConstant(int index, org.ogre4j.IVector4 vec) {
        _setConstant__ivVector4R(this.object.pointer, index,  vec.getInstancePointer().pointer);
    }

    private native void _setConstant__ivVector4R(long _pointer_, int index, long vec);

    /** 
    Sets a single floating-point parameter to the program. **/
    public void setConstant(int index, float val) {
        _setConstant__ivRealv(this.object.pointer, index,  val);
    }

    private native void _setConstant__ivRealv(long _pointer_, int index, float val);

    /** 
    Sets a 4-element floating-point parameter to the program via . **/
    public void setConstant(int index, org.ogre4j.IVector3 vec) {
        _setConstant__ivVector3R(this.object.pointer, index,  vec.getInstancePointer().pointer);
    }

    private native void _setConstant__ivVector3R(long _pointer_, int index, long vec);

    /** 
    Sets a  parameter to the program. **/
    public void setConstant(int index, org.ogre4j.IMatrix4 m) {
        _setConstant__ivMatrix4R(this.object.pointer, index,  m.getInstancePointer().pointer);
    }

    private native void _setConstant__ivMatrix4R(long _pointer_, int index, long m);

    /** 
    Sets a list of  parameters to the program. **/
    public void setConstant(int index, org.ogre4j.IMatrix4 m, int numEntries) {
        _setConstant__ivMatrix4Piv(this.object.pointer, index,  m.getInstancePointer().pointer,  numEntries);
    }

    private native void _setConstant__ivMatrix4Piv(long _pointer_, int index, long m, int numEntries);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setConstant(int index, FloatPointer val, int count) {
        _setConstant__ivFPiv(this.object.pointer, index,  val.object.pointer,  count);
    }

    private native void _setConstant__ivFPiv(long _pointer_, int index, long val, int count);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setConstant(int index, DoublePointer val, int count) {
        _setConstant__ivDPiv(this.object.pointer, index,  val.object.pointer,  count);
    }

    private native void _setConstant__ivDPiv(long _pointer_, int index, long val, int count);

    /** 
    Sets a  parameter to the program. **/
    public void setConstant(int index, org.ogre4j.IColourValue colour) {
        _setConstant__ivColourValueR(this.object.pointer, index,  colour.getInstancePointer().pointer);
    }

    private native void _setConstant__ivColourValueR(long _pointer_, int index, long colour);

    /** 
    Sets a multiple value constant integer parameter to the program. **/
    public void setConstant(int index, IntegerPointer val, int count) {
        _setConstant__iviPiv(this.object.pointer, index,  val.object.pointer,  count);
    }

    private native void _setConstant__iviPiv(long _pointer_, int index, long val, int count);

    /** 
    Write a series of floating point values into the underlying float constant buffer at the given physical index. **/
    public void _writeRawConstants(int physicalIndex, FloatPointer val, int count) {
        __writeRawConstants__ivFPiv(this.object.pointer, physicalIndex,  val.object.pointer,  count);
    }

    private native void __writeRawConstants__ivFPiv(long _pointer_, int physicalIndex, long val, int count);

    /** 
    Write a series of floating point values into the underlying float constant buffer at the given physical index. **/
    public void _writeRawConstants(int physicalIndex, DoublePointer val, int count) {
        __writeRawConstants__ivDPiv(this.object.pointer, physicalIndex,  val.object.pointer,  count);
    }

    private native void __writeRawConstants__ivDPiv(long _pointer_, int physicalIndex, long val, int count);

    /** 
    Write a series of integer values into the underlying integer constant buffer at the given physical index. **/
    public void _writeRawConstants(int physicalIndex, IntegerPointer val, int count) {
        __writeRawConstants__iviPiv(this.object.pointer, physicalIndex,  val.object.pointer,  count);
    }

    private native void __writeRawConstants__iviPiv(long _pointer_, int physicalIndex, long val, int count);

    /** 
    Read a series of floating point values from the underlying float constant buffer at the given physical index. **/
    public void _readRawConstants(int physicalIndex, int count, FloatPointer dest) {
        __readRawConstants__ivivFp(this.object.pointer, physicalIndex,  count,  dest.object.pointer);
    }

    private native void __readRawConstants__ivivFp(long _pointer_, int physicalIndex, int count, long dest);

    /** 
    Read a series of integer values from the underlying integer constant buffer at the given physical index. **/
    public void _readRawConstants(int physicalIndex, int count, IntegerPointer dest) {
        __readRawConstants__ivivip(this.object.pointer, physicalIndex,  count,  dest.object.pointer);
    }

    private native void __readRawConstants__ivivip(long _pointer_, int physicalIndex, int count, long dest);

    /** 
    Write a 4-element floating-point parameter to the program directly to the underlying constants buffer. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IVector4 vec, int count) {
        __writeRawConstant__ivVector4Riv(this.object.pointer, physicalIndex,  vec.getInstancePointer().pointer,  count);
    }

    private native void __writeRawConstant__ivVector4Riv(long _pointer_, int physicalIndex, long vec, int count);

    /** 
    Write a single floating-point parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, float val) {
        __writeRawConstant__ivRealv(this.object.pointer, physicalIndex,  val);
    }

    private native void __writeRawConstant__ivRealv(long _pointer_, int physicalIndex, float val);

    /** 
    Write a single integer parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, int val) {
        __writeRawConstant__iviv(this.object.pointer, physicalIndex,  val);
    }

    private native void __writeRawConstant__iviv(long _pointer_, int physicalIndex, int val);

    /** 
    Write a 3-element floating-point parameter to the program via . **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IVector3 vec) {
        __writeRawConstant__ivVector3R(this.object.pointer, physicalIndex,  vec.getInstancePointer().pointer);
    }

    private native void __writeRawConstant__ivVector3R(long _pointer_, int physicalIndex, long vec);

    /** 
    Write a  parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IMatrix4 m) {
        __writeRawConstant__ivMatrix4R(this.object.pointer, physicalIndex,  m.getInstancePointer().pointer);
    }

    private native void __writeRawConstant__ivMatrix4R(long _pointer_, int physicalIndex, long m);

    /** 
    Write a list of  parameters to the program. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IMatrix4 m, int numEntries) {
        __writeRawConstant__ivMatrix4Piv(this.object.pointer, physicalIndex,  m.getInstancePointer().pointer,  numEntries);
    }

    private native void __writeRawConstant__ivMatrix4Piv(long _pointer_, int physicalIndex, long m, int numEntries);

    /** 
    Write a  parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IColourValue colour, int count) {
        __writeRawConstant__ivColourValueRiv(this.object.pointer, physicalIndex,  colour.getInstancePointer().pointer,  count);
    }

    private native void __writeRawConstant__ivColourValueRiv(long _pointer_, int physicalIndex, long colour, int count);

    /** 
    Gets an iterator over the named  instances as defined by the program for which these parameters exist. **/
    public void getConstantDefinitionIterator(org.ogre4j.IGpuConstantDefinitionIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getConstantDefinitionIterator_const(this.object.pointer)), false);
    }

    private native long _getConstantDefinitionIterator_const(long _pointer_);

    /** 
    Get a specific  for a named parameter. **/
    public org.ogre4j.IGpuConstantDefinition getConstantDefinition(String name) {
         return new org.ogre4j.GpuConstantDefinition(new InstancePointer(_getConstantDefinition__StringR_const(this.object.pointer, name)));
    }

    private native long _getConstantDefinition__StringR_const(long _pointer_, String name);

    /** 
    Get the full list of  instances. **/
    public org.ogre4j.IGpuNamedConstants getConstantDefinitions() {
         return new org.ogre4j.GpuNamedConstants(new InstancePointer(_getConstantDefinitions_const(this.object.pointer)));
    }

    private native long _getConstantDefinitions_const(long _pointer_);

    /** 
    Get the current list of mappings from low-level logical param indexes to physical buffer locations in the float buffer. **/
    public org.ogre4j.IGpuLogicalBufferStruct getFloatLogicalBufferStruct() {
         return new org.ogre4j.GpuLogicalBufferStruct(new InstancePointer(_getFloatLogicalBufferStruct_const(this.object.pointer)));
    }

    private native long _getFloatLogicalBufferStruct_const(long _pointer_);

    /** 
    Retrieves the logical index relating to a physical index in the float buffer, for programs which support that (low-level programs and high-level programs which use logical parameter indexes). **/
    public int getFloatLogicalIndexForPhysicalIndex(int physicalIndex) {
         return _getFloatLogicalIndexForPhysicalIndex__iv(this.object.pointer, physicalIndex);
    }

    private native int _getFloatLogicalIndexForPhysicalIndex__iv(long _pointer_, int physicalIndex);

    /** 
    Retrieves the logical index relating to a physical index in the int buffer, for programs which support that (low-level programs and high-level programs which use logical parameter indexes). **/
    public int getIntLogicalIndexForPhysicalIndex(int physicalIndex) {
         return _getIntLogicalIndexForPhysicalIndex__iv(this.object.pointer, physicalIndex);
    }

    private native int _getIntLogicalIndexForPhysicalIndex__iv(long _pointer_, int physicalIndex);

    /** 
    Get the current list of mappings from low-level logical param indexes to physical buffer locations in the integer buffer. **/
    public org.ogre4j.IGpuLogicalBufferStruct getIntLogicalBufferStruct() {
         return new org.ogre4j.GpuLogicalBufferStruct(new InstancePointer(_getIntLogicalBufferStruct_const(this.object.pointer)));
    }

    private native long _getIntLogicalBufferStruct_const(long _pointer_);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IFloatConstantList getFloatConstantList() {
         return new org.ogre4j.GpuProgramParameters.FloatConstantList(new InstancePointer(_getFloatConstantList_const(this.object.pointer)));
    }

    private native long _getFloatConstantList_const(long _pointer_);

    /** **/
    public FloatPointer getFloatPointer(int pos) {
         return new FloatPointer(new InstancePointer(_getFloatPointer__iv(this.object.pointer, pos)));
    }

    private native long _getFloatPointer__iv(long _pointer_, int pos);

    /** **/
    public FloatPointer getFloatPointer_const(int pos) {
         return new FloatPointer(new InstancePointer(_getFloatPointer_const__iv_const(this.object.pointer, pos)));
    }

    private native long _getFloatPointer_const__iv_const(long _pointer_, int pos);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IIntConstantList getIntConstantList() {
         return new org.ogre4j.GpuProgramParameters.IntConstantList(new InstancePointer(_getIntConstantList_const(this.object.pointer)));
    }

    private native long _getIntConstantList_const(long _pointer_);

    /** **/
    public IntegerPointer getIntPointer(int pos) {
         return new IntegerPointer(new InstancePointer(_getIntPointer__iv(this.object.pointer, pos)));
    }

    private native long _getIntPointer__iv(long _pointer_, int pos);

    /** **/
    public IntegerPointer getIntPointer_const(int pos) {
         return new IntegerPointer(new InstancePointer(_getIntPointer_const__iv_const(this.object.pointer, pos)));
    }

    private native long _getIntPointer_const__iv_const(long _pointer_, int pos);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantList getAutoConstantList() {
         return new org.ogre4j.GpuProgramParameters.AutoConstantList(new InstancePointer(_getAutoConstantList_const(this.object.pointer)));
    }

    private native long _getAutoConstantList_const(long _pointer_);

    /** 
    Sets up a constant which will automatically be updated by the system. **/
    public void setAutoConstant(int index, org.ogre4j.GpuProgramParameters.AutoConstantType acType, int extraInfo) {
        _setAutoConstant__ivAutoConstantTypeviv(this.object.pointer, index,  acType.getValue(),  extraInfo);
    }

    private native void _setAutoConstant__ivAutoConstantTypeviv(long _pointer_, int index, int acType, int extraInfo);

    /** **/
    public void setAutoConstantReal(int index, org.ogre4j.GpuProgramParameters.AutoConstantType acType, float rData) {
        _setAutoConstantReal__ivAutoConstantTypevRealv(this.object.pointer, index,  acType.getValue(),  rData);
    }

    private native void _setAutoConstantReal__ivAutoConstantTypevRealv(long _pointer_, int index, int acType, float rData);

    /** 
    As setAutoConstant, but sets up the auto constant directly against a physical buffer index. **/
    public void _setRawAutoConstant(int physicalIndex, org.ogre4j.GpuProgramParameters.AutoConstantType acType, int extraInfo, int elementSize) {
        __setRawAutoConstant__ivAutoConstantTypeviviv(this.object.pointer, physicalIndex,  acType.getValue(),  extraInfo,  elementSize);
    }

    private native void __setRawAutoConstant__ivAutoConstantTypeviviv(long _pointer_, int physicalIndex, int acType, int extraInfo, int elementSize);

    /** 
    As setAutoConstantReal, but sets up the auto constant directly against a physical buffer index. **/
    public void _setRawAutoConstantReal(int physicalIndex, org.ogre4j.GpuProgramParameters.AutoConstantType acType, float rData, int elementSize) {
        __setRawAutoConstantReal__ivAutoConstantTypevRealviv(this.object.pointer, physicalIndex,  acType.getValue(),  rData,  elementSize);
    }

    private native void __setRawAutoConstantReal__ivAutoConstantTypevRealviv(long _pointer_, int physicalIndex, int acType, float rData, int elementSize);

    /** 
    Unbind an auto constant so that the constant is manually controlled again. **/
    public void clearAutoConstant(int index) {
        _clearAutoConstant__iv(this.object.pointer, index);
    }

    private native void _clearAutoConstant__iv(long _pointer_, int index);

    /** 
    Sets a named parameter up to track a derivation of the current time. **/
    public void setConstantFromTime(int index, float factor) {
        _setConstantFromTime__ivRealv(this.object.pointer, index,  factor);
    }

    private native void _setConstantFromTime__ivRealv(long _pointer_, int index, float factor);

    /** 
    Clears all the existing automatic constants. **/
    public void clearAutoConstants() {
        _clearAutoConstants(this.object.pointer);
    }

    private native void _clearAutoConstants(long _pointer_);

    /** 
    Gets an iterator over the automatic constant bindings currently in place. **/
    public void getAutoConstantIterator(org.ogre4j.IGpuProgramParameters.IAutoConstantIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getAutoConstantIterator_const(this.object.pointer)), false);
    }

    private native long _getAutoConstantIterator_const(long _pointer_);

    /** **/
    public int getAutoConstantCount() {
         return _getAutoConstantCount_const(this.object.pointer);
    }

    private native int _getAutoConstantCount_const(long _pointer_);

    /** 
    Gets a specific Auto Constant entry if index is in valid range otherwise returns a NULL **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry getAutoConstantEntry(int index) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_getAutoConstantEntry__iV(this.object.pointer, index)));
    }

    private native long _getAutoConstantEntry__iV(long _pointer_, int index);

    /** 
    Returns true if this instance has any automatic constants. **/
    public boolean hasAutoConstants() {
         return _hasAutoConstants_const(this.object.pointer);
    }

    private native boolean _hasAutoConstants_const(long _pointer_);

    /** 
    Finds an auto constant that's affecting a given logical parameter index for floating-point values. **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry findFloatAutoConstantEntry(int logicalIndex) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_findFloatAutoConstantEntry__iv(this.object.pointer, logicalIndex)));
    }

    private native long _findFloatAutoConstantEntry__iv(long _pointer_, int logicalIndex);

    /** 
    Finds an auto constant that's affecting a given logical parameter index for integer values. **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry findIntAutoConstantEntry(int logicalIndex) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_findIntAutoConstantEntry__iv(this.object.pointer, logicalIndex)));
    }

    private native long _findIntAutoConstantEntry__iv(long _pointer_, int logicalIndex);

    /** 
    Finds an auto constant that's affecting a given named parameter index. **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry findAutoConstantEntry(String paramName) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(_findAutoConstantEntry__StringR(this.object.pointer, paramName)));
    }

    private native long _findAutoConstantEntry__StringR(long _pointer_, String paramName);

    /** 
    Finds an auto constant that's affecting a given physical position in the floating-point buffer **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry _findRawAutoConstantEntryFloat(int physicalIndex) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(__findRawAutoConstantEntryFloat__iv(this.object.pointer, physicalIndex)));
    }

    private native long __findRawAutoConstantEntryFloat__iv(long _pointer_, int physicalIndex);

    /** 
    Finds an auto constant that's affecting a given physical position in the integer buffer **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry _findRawAutoConstantEntryInt(int physicalIndex) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantEntry(new InstancePointer(__findRawAutoConstantEntryInt__iv(this.object.pointer, physicalIndex)));
    }

    private native long __findRawAutoConstantEntryInt__iv(long _pointer_, int physicalIndex);

    /** 
    Updates the automatic parameters (except lights) based on the details provided. **/
    public void _updateAutoParamsNoLights(org.ogre4j.IAutoParamDataSource source) {
        __updateAutoParamsNoLights__AutoParamDataSourceP(this.object.pointer, source.getInstancePointer().pointer);
    }

    private native void __updateAutoParamsNoLights__AutoParamDataSourceP(long _pointer_, long source);

    /** 
    Updates the automatic parameters for lights based on the details provided. **/
    public void _updateAutoParamsLightsOnly(org.ogre4j.IAutoParamDataSource source) {
        __updateAutoParamsLightsOnly__AutoParamDataSourceP(this.object.pointer, source.getInstancePointer().pointer);
    }

    private native void __updateAutoParamsLightsOnly__AutoParamDataSourceP(long _pointer_, long source);

    /** 
    Tells the program whether to ignore missing parameters or not. **/
    public void setIgnoreMissingParams(boolean state) {
        _setIgnoreMissingParams__bv(this.object.pointer, state);
    }

    private native void _setIgnoreMissingParams__bv(long _pointer_, boolean state);

    /** 
    Sets a single value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, float val) {
        _setNamedConstant__StringRRealv(this.object.pointer, name,  val);
    }

    private native void _setNamedConstant__StringRRealv(long _pointer_, String name, float val);

    /** 
    Sets a single value constant integer parameter to the program. **/
    public void setNamedConstant(String name, int val) {
        _setNamedConstant__StringRiv(this.object.pointer, name,  val);
    }

    private native void _setNamedConstant__StringRiv(long _pointer_, String name, int val);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IVector4 vec) {
        _setNamedConstant__StringRVector4R(this.object.pointer, name,  vec.getInstancePointer().pointer);
    }

    private native void _setNamedConstant__StringRVector4R(long _pointer_, String name, long vec);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IVector3 vec) {
        _setNamedConstant__StringRVector3R(this.object.pointer, name,  vec.getInstancePointer().pointer);
    }

    private native void _setNamedConstant__StringRVector3R(long _pointer_, String name, long vec);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IMatrix4 m) {
        _setNamedConstant__StringRMatrix4R(this.object.pointer, name,  m.getInstancePointer().pointer);
    }

    private native void _setNamedConstant__StringRMatrix4R(long _pointer_, String name, long m);

    /** 
    Sets a list of  parameters to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IMatrix4 m, int numEntries) {
        _setNamedConstant__StringRMatrix4Piv(this.object.pointer, name,  m.getInstancePointer().pointer,  numEntries);
    }

    private native void _setNamedConstant__StringRMatrix4Piv(long _pointer_, String name, long m, int numEntries);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, FloatPointer val, int count, int multiple) {
        _setNamedConstant__StringRFPiviv(this.object.pointer, name,  val.object.pointer,  count,  multiple);
    }

    private native void _setNamedConstant__StringRFPiviv(long _pointer_, String name, long val, int count, int multiple);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, DoublePointer val, int count, int multiple) {
        _setNamedConstant__StringRDPiviv(this.object.pointer, name,  val.object.pointer,  count,  multiple);
    }

    private native void _setNamedConstant__StringRDPiviv(long _pointer_, String name, long val, int count, int multiple);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IColourValue colour) {
        _setNamedConstant__StringRColourValueR(this.object.pointer, name,  colour.getInstancePointer().pointer);
    }

    private native void _setNamedConstant__StringRColourValueR(long _pointer_, String name, long colour);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, IntegerPointer val, int count, int multiple) {
        _setNamedConstant__StringRiPiviv(this.object.pointer, name,  val.object.pointer,  count,  multiple);
    }

    private native void _setNamedConstant__StringRiPiviv(long _pointer_, String name, long val, int count, int multiple);

    /** 
    Sets up a constant which will automatically be updated by the system. **/
    public void setNamedAutoConstant(String name, org.ogre4j.GpuProgramParameters.AutoConstantType acType, int extraInfo) {
        _setNamedAutoConstant__StringRAutoConstantTypeviv(this.object.pointer, name,  acType.getValue(),  extraInfo);
    }

    private native void _setNamedAutoConstant__StringRAutoConstantTypeviv(long _pointer_, String name, int acType, int extraInfo);

    /** **/
    public void setNamedAutoConstantReal(String name, org.ogre4j.GpuProgramParameters.AutoConstantType acType, float rData) {
        _setNamedAutoConstantReal__StringRAutoConstantTypevRealv(this.object.pointer, name,  acType.getValue(),  rData);
    }

    private native void _setNamedAutoConstantReal__StringRAutoConstantTypevRealv(long _pointer_, String name, int acType, float rData);

    /** 
    Sets a named parameter up to track a derivation of the current time. **/
    public void setNamedConstantFromTime(String name, float factor) {
        _setNamedConstantFromTime__StringRRealv(this.object.pointer, name,  factor);
    }

    private native void _setNamedConstantFromTime__StringRRealv(long _pointer_, String name, float factor);

    /** 
    Unbind an auto constant so that the constant is manually controlled again. **/
    public void clearNamedAutoConstant(String name) {
        _clearNamedAutoConstant__StringR(this.object.pointer, name);
    }

    private native void _clearNamedAutoConstant__StringR(long _pointer_, String name);

    /** 
    Find a constant definition for a named parameter. **/
    public org.ogre4j.IGpuConstantDefinition _findNamedConstantDefinition(String name, boolean throwExceptionIfMissing) {
         return new org.ogre4j.GpuConstantDefinition(new InstancePointer(__findNamedConstantDefinition__StringRbv_const(this.object.pointer, name,  throwExceptionIfMissing)));
    }

    private native long __findNamedConstantDefinition__StringRbv_const(long _pointer_, String name, boolean throwExceptionIfMissing);

    /** 
    Gets the physical buffer index associated with a logical float constant index. **/
    public int _getFloatConstantPhysicalIndex(int logicalIndex, int requestedSize) {
         return __getFloatConstantPhysicalIndex__iviv(this.object.pointer, logicalIndex,  requestedSize);
    }

    private native int __getFloatConstantPhysicalIndex__iviv(long _pointer_, int logicalIndex, int requestedSize);

    /** 
    Gets the physical buffer index associated with a logical int constant index. **/
    public int _getIntConstantPhysicalIndex(int logicalIndex, int requestedSize) {
         return __getIntConstantPhysicalIndex__iviv(this.object.pointer, logicalIndex,  requestedSize);
    }

    private native int __getIntConstantPhysicalIndex__iviv(long _pointer_, int logicalIndex, int requestedSize);

    /** 
    Sets whether or not we need to transpose the matrices passed in from the rest of OGRE. **/
    public void setTransposeMatrices(boolean val) {
        _setTransposeMatrices__bv(this.object.pointer, val);
    }

    private native void _setTransposeMatrices__bv(long _pointer_, boolean val);

    /** **/
    public boolean getTransposeMatrices() {
         return _getTransposeMatrices_const(this.object.pointer);
    }

    private native boolean _getTransposeMatrices_const(long _pointer_);

    /** 
    Copies the values of all constants (including auto constants) from another  object. **/
    public void copyConstantsFrom(org.ogre4j.IGpuProgramParameters source) {
        _copyConstantsFrom__GpuProgramParametersR(this.object.pointer, source.getInstancePointer().pointer);
    }

    private native void _copyConstantsFrom__GpuProgramParametersR(long _pointer_, long source);

    /** 
    increments the multipass number entry by 1 if it exists **/
    public void incPassIterationNumber() {
        _incPassIterationNumber(this.object.pointer);
    }

    private native void _incPassIterationNumber(long _pointer_);

    /** 
    Does this parameters object have a pass iteration number constant? **/
    public boolean hasPassIterationNumber() {
         return _hasPassIterationNumber_const(this.object.pointer);
    }

    private native boolean _hasPassIterationNumber_const(long _pointer_);

    /** 
    Get the physical buffer index of the pass iteration number constant **/
    public int getPassIterationNumberIndex() {
         return _getPassIterationNumberIndex_const(this.object.pointer);
    }

    private native int _getPassIterationNumberIndex_const(long _pointer_);

    /** 
    gets the auto constant definition associated with name if found else returns NULL **/
    public static org.ogre4j.IGpuProgramParameters.IAutoConstantDefinition getAutoConstantDefinition(String name) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantDefinition(new InstancePointer(_getAutoConstantDefinition__StringR( name)));
    }

    private native static long _getAutoConstantDefinition__StringR(String name);

    /** 
    gets the auto constant definition using an index into the auto constant definition array. If the index is out of bounds then NULL is returned; **/
    public static org.ogre4j.IGpuProgramParameters.IAutoConstantDefinition getAutoConstantDefinition(int idx) {
         return new org.ogre4j.GpuProgramParameters.AutoConstantDefinition(new InstancePointer(_getAutoConstantDefinition__iV( idx)));
    }

    private native static long _getAutoConstantDefinition__iV(int idx);

    /** 
    Returns the number of auto constant definitions **/
    public static int getNumAutoConstantDefinitions() {
         return _getNumAutoConstantDefinitions();
    }

    private native static int _getNumAutoConstantDefinitions();

}
