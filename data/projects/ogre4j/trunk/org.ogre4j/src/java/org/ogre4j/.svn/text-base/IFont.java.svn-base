/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IFont extends INativeObject, org.ogre4j.IResource, org.ogre4j.IManualResourceLoader {

public static interface ICmdCodePoints extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdResolution extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdSize extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdSource extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdType extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface IGlyphInfo extends INativeObject {

    /** **/
    public long getcodePoint();

    /** **/
    public void setcodePoint(long _jni_value_);

    /** **/
    public void getuvRect(org.ogre4j.IFloatRect returnValue);

    /** **/
    public void setuvRect(org.ogre4j.IFloatRect _jni_value_);

    /** **/
    public float getaspectRatio();

    /** **/
    public void setaspectRatio(float _jni_value_);

}
public interface ICodePointRange extends INativeObject, org.std.Ipair< Long, Long > {

    /** **/
    public long getfirst();

    /** **/
    public void setfirst(long _jni_value_);

    /** **/
    public long getsecond();

    /** **/
    public void setsecond(long _jni_value_);

}
public interface ICodePointRangeList extends INativeObject, org.std.Ivector< org.ogre4j.IFont.ICodePointRange > {

    /** **/
    public void assign(int num, org.ogre4j.IFont.ICodePointRange val);

    /** **/
    public org.ogre4j.IFont.ICodePointRange at(int loc);

    /** **/
    public org.ogre4j.IFont.ICodePointRange back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IFont.ICodePointRange front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IFont.ICodePointRange val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ICodePointMap extends INativeObject, org.std.Imap< Long, org.ogre4j.IFont.IGlyphInfo > {

    /** **/
    public void clear();

    /** **/
    public int count(long key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(long key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IFont.IGlyphInfo get(long key);

    /** **/
    public void insert(long key, org.ogre4j.IFont.IGlyphInfo value);

}
    /** 
    Sets the type of font. Must be set before loading. **/
    public void setType(org.ogre4j.FontType ftype);

    /** 
    Gets the type of font. **/
    public org.ogre4j.FontType getType();

    /** 
    Sets the source of the font. **/
    public void setSource(String source);

    /** 
    Gets the source this font (either an image or a truetype font). **/
    public String getSource();

    /** 
    Sets the size of a truetype font (only required for FT_TRUETYPE). **/
    public void setTrueTypeSize(float ttfSize);

    /** 
    Gets the resolution (dpi) of the font used to generate the texture (only required for FT_TRUETYPE). **/
    public void setTrueTypeResolution(long ttfResolution);

    /** 
    Gets the point size of the font used to generate the texture. **/
    public float getTrueTypeSize();

    /** 
    Gets the resolution (dpi) of the font used to generate the texture. **/
    public long getTrueTypeResolution();

    /** 
    Gets the maximum baseline distance of all glyphs used in the texture. **/
    public int getTrueTypeMaxBearingY();

    /** 
    Returns the texture coordinates of the associated glyph. **/
    public org.ogre4j.IFloatRect getGlyphTexCoords(long id);

    /** 
    Sets the texture coordinates of a glyph. **/
    public void setGlyphTexCoords(long id, float u1, float v1, float u2, float v2, float textureAspect);

    /** 
    Gets the aspect ratio (width / height) of this character. **/
    public float getGlyphAspectRatio(long id);

    /** 
    Sets the aspect ratio (width / height) of this character. **/
    public void setGlyphAspectRatio(long id, float ratio);

    /** 
    Gets the information available for a glyph corresponding to a given code point, or throws an exception if it doesn't exist; **/
    public org.ogre4j.IFont.IGlyphInfo getGlyphInfo(long id);

    /** 
    Adds a range of code points to the list of code point ranges to generate glyphs for, if this is a truetype based font. **/
    public void addCodePointRange(org.ogre4j.IFont.ICodePointRange range);

    /** 
    Clear the list of code point ranges. **/
    public void clearCodePointRanges();

    /** 
    Get a const reference to the list of code point ranges to be used to generate glyphs from a truetype font. **/
    public org.ogre4j.IFont.ICodePointRangeList getCodePointRangeList();

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial_const();

    /** 
    Gets the material generated for this font, as a weak reference. **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** 
    Sets whether or not the colour of this font is antialiased as it is generated from a true type font. **/
    public void setAntialiasColour(boolean enabled);

    /** 
    Gets whether or not the colour of this font is antialiased as it is generated from a true type font. **/
    public boolean getAntialiasColour();

    /** 
    Implementation of , called when the  that this font creates needs to (re)load. **/
    public void loadResource(org.ogre4j.IResource resource);

}
