/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ISkeletonInstance extends INativeObject, org.ogre4j.ISkeleton {

public interface ITagPointList extends INativeObject, org.std.Ilist< org.ogre4j.ITagPoint > {

    /** **/
    public void assign(int num, org.ogre4j.ITagPoint val);

    /** **/
    public org.ogre4j.ITagPoint back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ITagPoint front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.ITagPoint val);

    /** **/
    public void push_front(org.ogre4j.ITagPoint val);

    /** **/
    public void remove(org.ogre4j.ITagPoint val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
    /** 
    Gets the number of animations on this skeleton. **/
    public int getNumAnimations();

    /** 
    Gets a single animation by index. **/
    public org.ogre4j.IAnimation getAnimation(int index);

    /** **/
    public org.ogre4j.IAnimation _getAnimationImpl(String name, NativeObjectPointer<org.ogre4j.ILinkedSkeletonAnimationSource> linker);

    /** 
    Creates a new  object for animating this skeleton. **/
    public org.ogre4j.IAnimation createAnimation(String name, float length);

    /** 
    Returns the named  object. **/
    public org.ogre4j.IAnimation getAnimation(String name, NativeObjectPointer<org.ogre4j.ILinkedSkeletonAnimationSource> linker);

    /** 
    Removes an  from this skeleton. **/
    public void removeAnimation(String name);

    /** 
    Creates a  ready to be attached to a bone **/
    public org.ogre4j.ITagPoint createTagPointOnBone(org.ogre4j.IBone bone, org.ogre4j.IQuaternion offsetOrientation, org.ogre4j.IVector3 offsetPosition);

    /** 
    Frees a  that already attached to a bone **/
    public void freeTagPoint(org.ogre4j.ITagPoint tagPoint);

    /** **/
    public void addLinkedSkeletonAnimationSource(String skelName, float scale);

    /** **/
    public void removeAllLinkedSkeletonAnimationSources();

    /** **/
    public void getLinkedSkeletonAnimationSourceIterator(org.ogre4j.ISkeleton.ILinkedSkeletonAnimSourceIterator returnValue);

    /** **/
    public void _initAnimationState(org.ogre4j.IAnimationStateSet animSet);

    /** **/
    public void _refreshAnimationState(org.ogre4j.IAnimationStateSet animSet);

    /** **/
    public String getName();

    /** **/
    public long getHandle();

    /** **/
    public String getGroup();

}
