/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class DDSCodec extends org.xbig.base.NativeObject implements org.ogre4j.IDDSCodec {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public DDSCodec(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected DDSCodec(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public DDSCodec(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public DDSCodec() {
         super( new org.xbig.base.InstancePointer(__createDDSCodec()), false);
    }

    private native static long __createDDSCodec();

    /** **/
    public void code(org.ogre4j.IDataStreamPtr returnValue, org.ogre4j.IMemoryDataStreamPtr input, org.ogre4j.ICodec.ICodecDataPtr pData) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_code__MemoryDataStreamPtrrCodecDataPtrr_const(this.object.pointer, input.getInstancePointer().pointer,  pData.getInstancePointer().pointer)), false);
    }

    private native long _code__MemoryDataStreamPtrrCodecDataPtrr_const(long _pointer_, long input, long pData);

    /** **/
    public void codeToFile(org.ogre4j.IMemoryDataStreamPtr input, String outFileName, org.ogre4j.ICodec.ICodecDataPtr pData) {
        _codeToFile__MemoryDataStreamPtrrStringRCodecDataPtrr_const(this.object.pointer, input.getInstancePointer().pointer,  outFileName,  pData.getInstancePointer().pointer);
    }

    private native void _codeToFile__MemoryDataStreamPtrrStringRCodecDataPtrr_const(long _pointer_, long input, String outFileName, long pData);

    /** **/
    public void decode(org.ogre4j.ICodec.IDecodeResult returnValue, org.ogre4j.IDataStreamPtr input) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_decode__DataStreamPtrr_const(this.object.pointer, input.getInstancePointer().pointer)), false);
    }

    private native long _decode__DataStreamPtrr_const(long _pointer_, long input);

    /** **/
    public String magicNumberToFileExt(String magicNumberPtr, int maxbytes) {
         return _magicNumberToFileExt__cPiv_const(this.object.pointer, magicNumberPtr,  maxbytes);
    }

    private native String _magicNumberToFileExt__cPiv_const(long _pointer_, String magicNumberPtr, int maxbytes);

    /** **/
    public String getType() {
         return _getType_const(this.object.pointer);
    }

    private native String _getType_const(long _pointer_);

    /** **/
    public static void startup() {
        _startup();
    }

    private native static void _startup();

    /** **/
    public static void shutdown() {
        _shutdown();
    }

    private native static void _shutdown();

    /** **/
    public String getDataType() {
         return _getDataType_const(this.object.pointer);
    }

    private native String _getDataType_const(long _pointer_);

    /** 
    Returns whether a magic number header matches this codec. **/
    public boolean magicNumberMatch(String magicNumberPtr, int maxbytes) {
         return _magicNumberMatch__cPiv_const(this.object.pointer, magicNumberPtr,  maxbytes);
    }

    private native boolean _magicNumberMatch__cPiv_const(long _pointer_, String magicNumberPtr, int maxbytes);

    /** 
    Registers a new codec in the database. **/
    public static void registerCodec(org.ogre4j.ICodec pCodec) {
        _registerCodec__Codecp( pCodec.getInstancePointer().pointer);
    }

    private native static void _registerCodec__Codecp(long pCodec);

    /** 
    Unregisters a codec from the database. **/
    public static void unRegisterCodec(org.ogre4j.ICodec pCodec) {
        _unRegisterCodec__Codecp( pCodec.getInstancePointer().pointer);
    }

    private native static void _unRegisterCodec__Codecp(long pCodec);

    /** 
    Gets the iterator for the registered codecs. **/
    public static void getCodecIterator(org.ogre4j.ICodec.ICodecIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getCodecIterator()), false);
    }

    private native static long _getCodecIterator();

    /** 
    Gets the file extension list for the registered codecs. **/
    public static void getExtensions(org.ogre4j.IStringVector returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getExtensions()), false);
    }

    private native static long _getExtensions();

    /** 
    Gets the codec registered for the passed in file extension. **/
    public static org.ogre4j.ICodec getCodec(String extension) {
         return new org.ogre4j.Codec(new InstancePointer(_getCodec__StringR( extension)));
    }

    private native static long _getCodec__StringR(String extension);

    /** 
    Gets the codec that can handle the given 'magic' identifier. **/
    public static org.ogre4j.ICodec getCodec(BytePointer magicNumberPtr, int maxbytes) {
         return new org.ogre4j.Codec(new InstancePointer(_getCodec__cpiv( magicNumberPtr.object.pointer,  maxbytes)));
    }

    private native static long _getCodec__cpiv(long magicNumberPtr, int maxbytes);

}
