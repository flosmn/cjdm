/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class CompositionPass extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionPass {
static { System.loadLibrary("ogre4j");}
public static class InputTex extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionPass.IInputTex {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public InputTex(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected InputTex(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public InputTex(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public InputTex() {
         super( new org.xbig.base.InstancePointer(__createInputTex()), false);
    }

    private native static long __createInputTex();

    /** **/
    public InputTex(String _name, int _mrtIndex) {
         super( new org.xbig.base.InstancePointer(__createInputTex__StringRiv( _name,  _mrtIndex)), false);
    }

    private native static long __createInputTex__StringRiv(String _name, int _mrtIndex);

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public int getmrtIndex() {
         return _getmrtIndex(this.object.pointer);
    }

    private native int _getmrtIndex(long _pointer_);

    /** **/
    public void setmrtIndex(int _jni_value_) {
        _setmrtIndex(this.object.pointer, _jni_value_);
    }

    private native void _setmrtIndex(long _pointer_, int _jni_value_);

}
public enum PassType implements INativeEnum < PassType > {
    PT_CLEAR(PassTypeHelper.ENUM_VALUES[0]),
    PT_STENCIL(PassTypeHelper.ENUM_VALUES[1]),
    PT_RENDERSCENE(PassTypeHelper.ENUM_VALUES[2]),
    PT_RENDERQUAD(PassTypeHelper.ENUM_VALUES[3]);

    private int value;

    PassType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public PassType getEnum(int val) {
        return toEnum(val);
    }

    public static final PassType toEnum(int retval) {
    if (retval ==PT_CLEAR.value)
        return PassType.PT_CLEAR;
    else if (retval ==PT_STENCIL.value)
        return PassType.PT_STENCIL;
    else if (retval ==PT_RENDERSCENE.value)
        return PassType.PT_RENDERSCENE;
    else if (retval ==PT_RENDERQUAD.value)
        return PassType.PT_RENDERQUAD;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class PassTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CompositionPass(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CompositionPass(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CompositionPass(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CompositionPass(org.ogre4j.ICompositionTargetPass parent) {
         super( new org.xbig.base.InstancePointer(__createCompositionPass__CompositionTargetPassp( parent.getInstancePointer().pointer)), false);
    }

    private native static long __createCompositionPass__CompositionTargetPassp(long parent);

    /** 
    Set the type of composition pass **/
    public void setType(org.ogre4j.CompositionPass.PassType type) {
        _setType__PassTypev(this.object.pointer, type.getValue());
    }

    private native void _setType__PassTypev(long _pointer_, int type);

    /** 
    Get the type of composition pass **/
    public org.ogre4j.CompositionPass.PassType getType() {
         return org.ogre4j.CompositionPass.PassType.toEnum(_getType_const(this.object.pointer));
    }

    private native int _getType_const(long _pointer_);

    /** 
    Set an identifier for this pass. This identifier can be used to "listen in" on this pass with an . **/
    public void setIdentifier(long id) {
        _setIdentifier__uint32v(this.object.pointer, id);
    }

    private native void _setIdentifier__uint32v(long _pointer_, long id);

    /** 
    Get the identifier for this pass **/
    public long getIdentifier() {
         return _getIdentifier_const(this.object.pointer);
    }

    private native long _getIdentifier_const(long _pointer_);

    /** 
    Set the material used by this pass **/
    public void setMaterial(org.ogre4j.IMaterialPtr mat) {
        _setMaterial__MaterialPtrR(this.object.pointer, mat.getInstancePointer().pointer);
    }

    private native void _setMaterial__MaterialPtrR(long _pointer_, long mat);

    /** 
    Set the material used by this pass **/
    public void setMaterialName(String name) {
        _setMaterialName__StringR(this.object.pointer, name);
    }

    private native void _setMaterialName__StringR(long _pointer_, String name);

    /** 
    Get the material used by this pass **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** 
    Set the first render queue to be rendered in this pass (inclusive) **/
    public void setFirstRenderQueue(short id) {
        _setFirstRenderQueue__uint8v(this.object.pointer, id);
    }

    private native void _setFirstRenderQueue__uint8v(long _pointer_, short id);

    /** 
    Get the first render queue to be rendered in this pass (inclusive) **/
    public short getFirstRenderQueue() {
         return _getFirstRenderQueue(this.object.pointer);
    }

    private native short _getFirstRenderQueue(long _pointer_);

    /** 
    Set the last render queue to be rendered in this pass (inclusive) **/
    public void setLastRenderQueue(short id) {
        _setLastRenderQueue__uint8v(this.object.pointer, id);
    }

    private native void _setLastRenderQueue__uint8v(long _pointer_, short id);

    /** 
    Get the last render queue to be rendered in this pass (inclusive) **/
    public short getLastRenderQueue() {
         return _getLastRenderQueue(this.object.pointer);
    }

    private native short _getLastRenderQueue(long _pointer_);

    /** 
    Set the viewport clear buffers (defaults to FBT_COLOUR|FBT_DEPTH) **/
    public void setClearBuffers(long val) {
        _setClearBuffers__uint32v(this.object.pointer, val);
    }

    private native void _setClearBuffers__uint32v(long _pointer_, long val);

    /** 
    Get the viewport clear buffers. **/
    public long getClearBuffers() {
         return _getClearBuffers(this.object.pointer);
    }

    private native long _getClearBuffers(long _pointer_);

    /** 
    Set the viewport clear colour (defaults to 0,0,0,0) **/
    public void setClearColour(org.ogre4j.IColourValue val) {
        _setClearColour__ColourValuev(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setClearColour__ColourValuev(long _pointer_, long val);

    /** 
    Get the viewport clear colour (defaults to 0,0,0,0) **/
    public org.ogre4j.IColourValue getClearColour() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getClearColour(this.object.pointer)));
    }

    private native long _getClearColour(long _pointer_);

    /** 
    Set the viewport clear depth (defaults to 1.0) **/
    public void setClearDepth(float depth) {
        _setClearDepth__Realv(this.object.pointer, depth);
    }

    private native void _setClearDepth__Realv(long _pointer_, float depth);

    /** 
    Get the viewport clear depth (defaults to 1.0) **/
    public float getClearDepth() {
         return _getClearDepth(this.object.pointer);
    }

    private native float _getClearDepth(long _pointer_);

    /** 
    Set the viewport clear stencil value (defaults to 0) **/
    public void setClearStencil(long value) {
        _setClearStencil__uint32v(this.object.pointer, value);
    }

    private native void _setClearStencil__uint32v(long _pointer_, long value);

    /** 
    Get the viewport clear stencil value (defaults to 0) **/
    public long getClearStencil() {
         return _getClearStencil(this.object.pointer);
    }

    private native long _getClearStencil(long _pointer_);

    /** 
    Set stencil check on or off. **/
    public void setStencilCheck(boolean value) {
        _setStencilCheck__bv(this.object.pointer, value);
    }

    private native void _setStencilCheck__bv(long _pointer_, boolean value);

    /** 
    Get stencil check enable. **/
    public boolean getStencilCheck() {
         return _getStencilCheck(this.object.pointer);
    }

    private native boolean _getStencilCheck(long _pointer_);

    /** 
    Set stencil compare function. **/
    public void setStencilFunc(org.ogre4j.CompareFunction value) {
        _setStencilFunc__CompareFunctionv(this.object.pointer, value.getValue());
    }

    private native void _setStencilFunc__CompareFunctionv(long _pointer_, int value);

    /** 
    Get stencil compare function. **/
    public org.ogre4j.CompareFunction getStencilFunc() {
         return org.ogre4j.CompareFunction.toEnum(_getStencilFunc(this.object.pointer));
    }

    private native int _getStencilFunc(long _pointer_);

    /** 
    Set stencil reference value. **/
    public void setStencilRefValue(long value) {
        _setStencilRefValue__uint32v(this.object.pointer, value);
    }

    private native void _setStencilRefValue__uint32v(long _pointer_, long value);

    /** 
    Get stencil reference value. **/
    public long getStencilRefValue() {
         return _getStencilRefValue(this.object.pointer);
    }

    private native long _getStencilRefValue(long _pointer_);

    /** 
    Set stencil mask. **/
    public void setStencilMask(long value) {
        _setStencilMask__uint32v(this.object.pointer, value);
    }

    private native void _setStencilMask__uint32v(long _pointer_, long value);

    /** 
    Get stencil mask. **/
    public long getStencilMask() {
         return _getStencilMask(this.object.pointer);
    }

    private native long _getStencilMask(long _pointer_);

    /** 
    Set stencil fail operation. **/
    public void setStencilFailOp(org.ogre4j.StencilOperation value) {
        _setStencilFailOp__StencilOperationv(this.object.pointer, value.getValue());
    }

    private native void _setStencilFailOp__StencilOperationv(long _pointer_, int value);

    /** 
    Get stencil fail operation. **/
    public org.ogre4j.StencilOperation getStencilFailOp() {
         return org.ogre4j.StencilOperation.toEnum(_getStencilFailOp(this.object.pointer));
    }

    private native int _getStencilFailOp(long _pointer_);

    /** 
    Set stencil depth fail operation. **/
    public void setStencilDepthFailOp(org.ogre4j.StencilOperation value) {
        _setStencilDepthFailOp__StencilOperationv(this.object.pointer, value.getValue());
    }

    private native void _setStencilDepthFailOp__StencilOperationv(long _pointer_, int value);

    /** 
    Get stencil depth fail operation. **/
    public org.ogre4j.StencilOperation getStencilDepthFailOp() {
         return org.ogre4j.StencilOperation.toEnum(_getStencilDepthFailOp(this.object.pointer));
    }

    private native int _getStencilDepthFailOp(long _pointer_);

    /** 
    Set stencil pass operation. **/
    public void setStencilPassOp(org.ogre4j.StencilOperation value) {
        _setStencilPassOp__StencilOperationv(this.object.pointer, value.getValue());
    }

    private native void _setStencilPassOp__StencilOperationv(long _pointer_, int value);

    /** 
    Get stencil pass operation. **/
    public org.ogre4j.StencilOperation getStencilPassOp() {
         return org.ogre4j.StencilOperation.toEnum(_getStencilPassOp(this.object.pointer));
    }

    private native int _getStencilPassOp(long _pointer_);

    /** 
    Set two sided stencil operation. **/
    public void setStencilTwoSidedOperation(boolean value) {
        _setStencilTwoSidedOperation__bv(this.object.pointer, value);
    }

    private native void _setStencilTwoSidedOperation__bv(long _pointer_, boolean value);

    /** 
    Get two sided stencil operation. **/
    public boolean getStencilTwoSidedOperation() {
         return _getStencilTwoSidedOperation(this.object.pointer);
    }

    private native boolean _getStencilTwoSidedOperation(long _pointer_);

    /** 
    Set an input local texture. An empty string clears the input. **/
    public void setInput(int id, String input, int mrtIndex) {
        _setInput__ivStringRiv(this.object.pointer, id,  input,  mrtIndex);
    }

    private native void _setInput__ivStringRiv(long _pointer_, int id, String input, int mrtIndex);

    /** 
    Get the value of an input. **/
    public org.ogre4j.ICompositionPass.IInputTex getInput(int id) {
         return new org.ogre4j.CompositionPass.InputTex(new InstancePointer(_getInput__iv(this.object.pointer, id)));
    }

    private native long _getInput__iv(long _pointer_, int id);

    /** 
    Get the number of inputs used. **/
    public int getNumInputs() {
         return _getNumInputs(this.object.pointer);
    }

    private native int _getNumInputs(long _pointer_);

    /** 
    Clear all inputs. **/
    public void clearAllInputs() {
        _clearAllInputs(this.object.pointer);
    }

    private native void _clearAllInputs(long _pointer_);

    /** 
    Get parent object **/
    public org.ogre4j.ICompositionTargetPass getParent() {
         return new org.ogre4j.CompositionTargetPass(new InstancePointer(_getParent(this.object.pointer)));
    }

    private native long _getParent(long _pointer_);

    /** 
    Determine if this target pass is supported on the current rendering device. **/
    public boolean _isSupported() {
         return __isSupported(this.object.pointer);
    }

    private native boolean __isSupported(long _pointer_);

    /** 
    Set quad normalised positions [-1;1]x[-1;1] **/
    public void setQuadCorners(float left, float top, float right, float bottom) {
        _setQuadCorners__RealvRealvRealvRealv(this.object.pointer, left,  top,  right,  bottom);
    }

    private native void _setQuadCorners__RealvRealvRealvRealv(long _pointer_, float left, float top, float right, float bottom);

    /** 
    Get quad normalised positions [-1;1]x[-1;1] **/
    public boolean getQuadCorners(FloatPointer left, FloatPointer top, FloatPointer right, FloatPointer bottom) {
         return _getQuadCorners__RealrRealrRealrRealr_const(this.object.pointer, left.object.pointer,  top.object.pointer,  right.object.pointer,  bottom.object.pointer);
    }

    private native boolean _getQuadCorners__RealrRealrRealrRealr_const(long _pointer_, long left, long top, long right, long bottom);

}
