/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IScriptCompiler extends INativeObject, org.ogre4j.IScriptingAllocatedObject {

public static interface IAbstractTreeBuilder extends INativeObject {

    /** **/
    public org.ogre4j.IAbstractNodeListPtr getResult();

    /** **/
    public void visit(org.ogre4j.IConcreteNode node);

}
public static interface IError extends INativeObject, org.ogre4j.IScriptingAllocatedObject {

    /** **/
    public String getfile();

    /** **/
    public void setfile(String _jni_value_);

    /** **/
    public String getmessage();

    /** **/
    public void setmessage(String _jni_value_);

    /** **/
    public int getline();

    /** **/
    public void setline(int _jni_value_);

    /** **/
    public long getcode();

    /** **/
    public void setcode(long _jni_value_);

}
public interface IIdMap extends INativeObject, org.std.Imap< String, Long > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public LongPointer get(String key);

    /** **/
    public void insert(String key, LongPointer value);

}
public interface IErrorPtr extends INativeObject, org.ogre4j.ISharedPtr< org.ogre4j.IScriptCompiler.IError > {

    /** **/
    public org.ogre4j.IScriptCompiler.IErrorPtr operatorAssignment(org.ogre4j.IScriptCompiler.IErrorPtr r);

    /** **/
    public org.ogre4j.IScriptCompiler.IError operatorMultiplication();

    /** **/
    public org.ogre4j.IScriptCompiler.IError operatorMemberAccessFromAPointer();

    /** **/
    public org.ogre4j.IScriptCompiler.IError get();

    /** **/
    public void bind(org.ogre4j.IScriptCompiler.IError rep, org.ogre4j.SharedPtrFreeMethod freeMethod);

    /** **/
    public boolean unique();

    /** **/
    public long useCount();

    /** **/
    public LongPointer useCountPointer();

    /** **/
    public org.ogre4j.IScriptCompiler.IError getPointer();

    /** **/
    public org.ogre4j.SharedPtrFreeMethod freeMethod();

    /** **/
    public boolean isNull();

    /** **/
    public void setNull();

}
public interface IErrorList extends INativeObject, org.std.Ilist< org.ogre4j.IScriptCompiler.IErrorPtr > {

    /** **/
    public void assign(int num, org.ogre4j.IScriptCompiler.IErrorPtr val);

    /** **/
    public org.ogre4j.IScriptCompiler.IErrorPtr back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IScriptCompiler.IErrorPtr front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IScriptCompiler.IErrorPtr val);

    /** **/
    public void push_front(org.ogre4j.IScriptCompiler.IErrorPtr val);

    /** **/
    public void remove(org.ogre4j.IScriptCompiler.IErrorPtr val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IEnvironment extends INativeObject, org.std.Imap< String, String > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public StringPointer get(String key);

    /** **/
    public void insert(String key, StringPointer value);

}
public interface IImportCacheMap extends INativeObject, org.std.Imap< String, org.ogre4j.IAbstractNodeListPtr > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IAbstractNodeListPtr get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IAbstractNodeListPtr value);

}
public interface IImportRequestMap extends INativeObject, org.std.Imultimap< String, String > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
    /** 
    **/
    public boolean compile(String str, String source, String group);

    /** **/
    public boolean compile(org.ogre4j.IConcreteNodeListPtr nodes, String group);

    /** **/
    public boolean _compile(org.ogre4j.IAbstractNodeListPtr nodes, String group);

    /** **/
    public void addError(long code, String file, int line, String msg);

    /** **/
    public void setListener(org.ogre4j.IScriptCompilerListener listener);

    /** **/
    public org.ogre4j.IScriptCompilerListener getListener();

    /** **/
    public String getResourceGroup();

    /** 
    Name exclusions identify object types which cannot accept names. This means that excluded types will always have empty names. All values in the object header are stored as object values. **/
    public void addNameExclusion(String type);

    /** **/
    public void removeNameExclusion(String type);

    /** **/
    public boolean _fireEvent(String name, org.std.Ivector< org.ogre4j.IAny > args, org.ogre4j.IAny retval);

    /** **/
    public void _fireCreateObject(org.ogre4j.IAny returnValue, String type, org.std.Ivector< org.ogre4j.IAny > args);

}
