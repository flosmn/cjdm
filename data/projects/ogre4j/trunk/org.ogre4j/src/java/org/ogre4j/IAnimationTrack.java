/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IAnimationTrack extends INativeObject, org.ogre4j.IAnimationAllocatedObject {

public static interface IListener extends INativeObject {

    /** 
    Get an interpolated keyframe for this track at the given time. **/
    public boolean getInterpolatedKeyFrame(org.ogre4j.IAnimationTrack t, org.ogre4j.ITimeIndex timeIndex, org.ogre4j.IKeyFrame kf);

}
public interface IKeyFrameList extends INativeObject, org.std.Ivector< org.ogre4j.IKeyFrame > {

    /** **/
    public void assign(int num, org.ogre4j.IKeyFrame val);

    /** **/
    public org.ogre4j.IKeyFrame at(int loc);

    /** **/
    public org.ogre4j.IKeyFrame back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IKeyFrame front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IKeyFrame val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IKeyFrameIndexMap extends INativeObject, org.std.Ivector< Integer > {

    /** **/
    public void assign(int num, int val);

    /** **/
    public IntegerPointer at(int loc);

    /** **/
    public IntegerPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public IntegerPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(int val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Get the handle associated with this track. **/
    public int getHandle();

    /** 
    Returns the number of keyframes in this animation. **/
    public int getNumKeyFrames();

    /** 
    Returns the  at the specified index. **/
    public org.ogre4j.IKeyFrame getKeyFrame(int index);

    /** 
    Gets the 2  objects which are active at the time given, and the blend value between them. **/
    public float getKeyFramesAtTime(org.ogre4j.ITimeIndex timeIndex, NativeObjectPointer<org.ogre4j.IKeyFrame> keyFrame1, NativeObjectPointer<org.ogre4j.IKeyFrame> keyFrame2, IntegerPointer firstKeyIndex);

    /** 
    Creates a new  and adds it to this animation at the given time index. **/
    public org.ogre4j.IKeyFrame createKeyFrame(float timePos);

    /** 
    Removes a  by it's index. **/
    public void removeKeyFrame(int index);

    /** 
    Removes all the KeyFrames from this track. **/
    public void removeAllKeyFrames();

    /** 
    Gets a  object which contains the interpolated transforms at the time index specified. **/
    public void getInterpolatedKeyFrame(org.ogre4j.ITimeIndex timeIndex, org.ogre4j.IKeyFrame kf);

    /** 
    Applies an animation track to the designated target. **/
    public void apply(org.ogre4j.ITimeIndex timeIndex, float weight, float scale);

    /** 
    Internal method used to tell the track that keyframe data has been changed, which may cause it to rebuild some internal data. **/
    public void _keyFrameDataChanged();

    /** 
    Method to determine if this track has any KeyFrames which are doing anything useful - can be used to determine if this track can be optimised out. **/
    public boolean hasNonZeroKeyFrames();

    /** 
    Optimise the current track by removing any duplicate keyframes. **/
    public void optimise();

    /** 
    Internal method to collect keyframe times, in unique, ordered format. **/
    public void _collectKeyFrameTimes(org.std.Ivector< Float > keyFrameTimes);

    /** 
    Internal method to build keyframe time index map to translate global lower bound index to local lower bound index. **/
    public void _buildKeyFrameIndexMap(org.std.Ivector< Float > keyFrameTimes);

    /** 
    Set a listener for this track. **/
    public void setListener(org.ogre4j.IAnimationTrack.IListener l);

    /** 
    Returns the parent  object for this track. **/
    public org.ogre4j.IAnimation getParent();

}
