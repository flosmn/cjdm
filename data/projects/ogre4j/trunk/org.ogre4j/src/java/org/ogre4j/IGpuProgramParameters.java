/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IGpuProgramParameters extends INativeObject, org.ogre4j.IRenderSysAllocatedObject {

public static interface IAutoConstantEntry extends INativeObject {

    /** **/
    public org.ogre4j.GpuProgramParameters.AutoConstantType getparamType();

    /** **/
    public void setparamType(org.ogre4j.GpuProgramParameters.AutoConstantType _jni_value_);

    /** **/
    public int getphysicalIndex();

    /** **/
    public void setphysicalIndex(int _jni_value_);

    /** **/
    public int getelementCount();

    /** **/
    public void setelementCount(int _jni_value_);

    /** **/
    public int getdata();

    /** **/
    public void setdata(int _jni_value_);

    /** **/
    public float getfData();

    /** **/
    public void setfData(float _jni_value_);

}
public static interface IAutoConstantDefinition extends INativeObject {

    /** **/
    public org.ogre4j.GpuProgramParameters.AutoConstantType getacType();

    /** **/
    public void setacType(org.ogre4j.GpuProgramParameters.AutoConstantType _jni_value_);

    /** **/
    public String getname();

    /** **/
    public void setname(String _jni_value_);

    /** **/
    public int getelementCount();

    /** **/
    public void setelementCount(int _jni_value_);

    /** **/
    public org.ogre4j.GpuProgramParameters.ElementType getelementType();

    /** **/
    public void setelementType(org.ogre4j.GpuProgramParameters.ElementType _jni_value_);

    /** **/
    public org.ogre4j.GpuProgramParameters.ACDataType getdataType();

    /** **/
    public void setdataType(org.ogre4j.GpuProgramParameters.ACDataType _jni_value_);

}
public interface IAutoConstantList extends INativeObject, org.std.Ivector< org.ogre4j.IGpuProgramParameters.IAutoConstantEntry > {

    /** **/
    public void assign(int num, org.ogre4j.IGpuProgramParameters.IAutoConstantEntry val);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry at(int loc);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IFloatConstantList extends INativeObject, org.std.Ivector< Float > {

    /** **/
    public void assign(int num, float val);

    /** **/
    public FloatPointer at(int loc);

    /** **/
    public FloatPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public FloatPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(float val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IIntConstantList extends INativeObject, org.std.Ivector< Integer > {

    /** **/
    public void assign(int num, int val);

    /** **/
    public IntegerPointer at(int loc);

    /** **/
    public IntegerPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public IntegerPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(int val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IAutoConstantIterator extends INativeObject, org.ogre4j.IConstVectorIterator< org.ogre4j.IGpuProgramParameters.IAutoConstantList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public void getNext(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry returnValue);

    /** **/
    public void peekNext(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry returnValue);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry peekNextPtr();

    /** **/
    public void moveNext();

}
    /** **/
    public org.ogre4j.IGpuProgramParameters operatorAssignment(org.ogre4j.IGpuProgramParameters oth);

    /** 
    Internal method for providing a link to a name->definition map for parameters. **/
    public void _setNamedConstants(org.ogre4j.IGpuNamedConstants constantmap);

    /** 
    Internal method for providing a link to a logical index->physical index map for parameters. **/
    public void _setLogicalIndexes(org.ogre4j.IGpuLogicalBufferStruct floatIndexMap, org.ogre4j.IGpuLogicalBufferStruct intIndexMap);

    /** **/
    public boolean hasNamedParameters();

    /** 
    Does this parameter set include logically indexed parameters? **/
    public boolean hasLogicalIndexedParameters();

    /** 
    Sets a 4-element floating-point parameter to the program. **/
    public void setConstant(int index, org.ogre4j.IVector4 vec);

    /** 
    Sets a single floating-point parameter to the program. **/
    public void setConstant(int index, float val);

    /** 
    Sets a 4-element floating-point parameter to the program via . **/
    public void setConstant(int index, org.ogre4j.IVector3 vec);

    /** 
    Sets a  parameter to the program. **/
    public void setConstant(int index, org.ogre4j.IMatrix4 m);

    /** 
    Sets a list of  parameters to the program. **/
    public void setConstant(int index, org.ogre4j.IMatrix4 m, int numEntries);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setConstant(int index, FloatPointer val, int count);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setConstant(int index, DoublePointer val, int count);

    /** 
    Sets a  parameter to the program. **/
    public void setConstant(int index, org.ogre4j.IColourValue colour);

    /** 
    Sets a multiple value constant integer parameter to the program. **/
    public void setConstant(int index, IntegerPointer val, int count);

    /** 
    Write a series of floating point values into the underlying float constant buffer at the given physical index. **/
    public void _writeRawConstants(int physicalIndex, FloatPointer val, int count);

    /** 
    Write a series of floating point values into the underlying float constant buffer at the given physical index. **/
    public void _writeRawConstants(int physicalIndex, DoublePointer val, int count);

    /** 
    Write a series of integer values into the underlying integer constant buffer at the given physical index. **/
    public void _writeRawConstants(int physicalIndex, IntegerPointer val, int count);

    /** 
    Read a series of floating point values from the underlying float constant buffer at the given physical index. **/
    public void _readRawConstants(int physicalIndex, int count, FloatPointer dest);

    /** 
    Read a series of integer values from the underlying integer constant buffer at the given physical index. **/
    public void _readRawConstants(int physicalIndex, int count, IntegerPointer dest);

    /** 
    Write a 4-element floating-point parameter to the program directly to the underlying constants buffer. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IVector4 vec, int count);

    /** 
    Write a single floating-point parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, float val);

    /** 
    Write a single integer parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, int val);

    /** 
    Write a 3-element floating-point parameter to the program via . **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IVector3 vec);

    /** 
    Write a  parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IMatrix4 m);

    /** 
    Write a list of  parameters to the program. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IMatrix4 m, int numEntries);

    /** 
    Write a  parameter to the program. **/
    public void _writeRawConstant(int physicalIndex, org.ogre4j.IColourValue colour, int count);

    /** 
    Gets an iterator over the named  instances as defined by the program for which these parameters exist. **/
    public void getConstantDefinitionIterator(org.ogre4j.IGpuConstantDefinitionIterator returnValue);

    /** 
    Get a specific  for a named parameter. **/
    public org.ogre4j.IGpuConstantDefinition getConstantDefinition(String name);

    /** 
    Get the full list of  instances. **/
    public org.ogre4j.IGpuNamedConstants getConstantDefinitions();

    /** 
    Get the current list of mappings from low-level logical param indexes to physical buffer locations in the float buffer. **/
    public org.ogre4j.IGpuLogicalBufferStruct getFloatLogicalBufferStruct();

    /** 
    Retrieves the logical index relating to a physical index in the float buffer, for programs which support that (low-level programs and high-level programs which use logical parameter indexes). **/
    public int getFloatLogicalIndexForPhysicalIndex(int physicalIndex);

    /** 
    Retrieves the logical index relating to a physical index in the int buffer, for programs which support that (low-level programs and high-level programs which use logical parameter indexes). **/
    public int getIntLogicalIndexForPhysicalIndex(int physicalIndex);

    /** 
    Get the current list of mappings from low-level logical param indexes to physical buffer locations in the integer buffer. **/
    public org.ogre4j.IGpuLogicalBufferStruct getIntLogicalBufferStruct();

    /** **/
    public org.ogre4j.IGpuProgramParameters.IFloatConstantList getFloatConstantList();

    /** **/
    public FloatPointer getFloatPointer(int pos);

    /** **/
    public FloatPointer getFloatPointer_const(int pos);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IIntConstantList getIntConstantList();

    /** **/
    public IntegerPointer getIntPointer(int pos);

    /** **/
    public IntegerPointer getIntPointer_const(int pos);

    /** **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantList getAutoConstantList();

    /** 
    Sets up a constant which will automatically be updated by the system. **/
    public void setAutoConstant(int index, org.ogre4j.GpuProgramParameters.AutoConstantType acType, int extraInfo);

    /** **/
    public void setAutoConstantReal(int index, org.ogre4j.GpuProgramParameters.AutoConstantType acType, float rData);

    /** 
    As setAutoConstant, but sets up the auto constant directly against a physical buffer index. **/
    public void _setRawAutoConstant(int physicalIndex, org.ogre4j.GpuProgramParameters.AutoConstantType acType, int extraInfo, int elementSize);

    /** 
    As setAutoConstantReal, but sets up the auto constant directly against a physical buffer index. **/
    public void _setRawAutoConstantReal(int physicalIndex, org.ogre4j.GpuProgramParameters.AutoConstantType acType, float rData, int elementSize);

    /** 
    Unbind an auto constant so that the constant is manually controlled again. **/
    public void clearAutoConstant(int index);

    /** 
    Sets a named parameter up to track a derivation of the current time. **/
    public void setConstantFromTime(int index, float factor);

    /** 
    Clears all the existing automatic constants. **/
    public void clearAutoConstants();

    /** 
    Gets an iterator over the automatic constant bindings currently in place. **/
    public void getAutoConstantIterator(org.ogre4j.IGpuProgramParameters.IAutoConstantIterator returnValue);

    /** **/
    public int getAutoConstantCount();

    /** 
    Gets a specific Auto Constant entry if index is in valid range otherwise returns a NULL **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry getAutoConstantEntry(int index);

    /** 
    Returns true if this instance has any automatic constants. **/
    public boolean hasAutoConstants();

    /** 
    Finds an auto constant that's affecting a given logical parameter index for floating-point values. **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry findFloatAutoConstantEntry(int logicalIndex);

    /** 
    Finds an auto constant that's affecting a given logical parameter index for integer values. **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry findIntAutoConstantEntry(int logicalIndex);

    /** 
    Finds an auto constant that's affecting a given named parameter index. **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry findAutoConstantEntry(String paramName);

    /** 
    Finds an auto constant that's affecting a given physical position in the floating-point buffer **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry _findRawAutoConstantEntryFloat(int physicalIndex);

    /** 
    Finds an auto constant that's affecting a given physical position in the integer buffer **/
    public org.ogre4j.IGpuProgramParameters.IAutoConstantEntry _findRawAutoConstantEntryInt(int physicalIndex);

    /** 
    Updates the automatic parameters (except lights) based on the details provided. **/
    public void _updateAutoParamsNoLights(org.ogre4j.IAutoParamDataSource source);

    /** 
    Updates the automatic parameters for lights based on the details provided. **/
    public void _updateAutoParamsLightsOnly(org.ogre4j.IAutoParamDataSource source);

    /** 
    Tells the program whether to ignore missing parameters or not. **/
    public void setIgnoreMissingParams(boolean state);

    /** 
    Sets a single value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, float val);

    /** 
    Sets a single value constant integer parameter to the program. **/
    public void setNamedConstant(String name, int val);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IVector4 vec);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IVector3 vec);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IMatrix4 m);

    /** 
    Sets a list of  parameters to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IMatrix4 m, int numEntries);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, FloatPointer val, int count, int multiple);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, DoublePointer val, int count, int multiple);

    /** 
    Sets a  parameter to the program. **/
    public void setNamedConstant(String name, org.ogre4j.IColourValue colour);

    /** 
    Sets a multiple value constant floating-point parameter to the program. **/
    public void setNamedConstant(String name, IntegerPointer val, int count, int multiple);

    /** 
    Sets up a constant which will automatically be updated by the system. **/
    public void setNamedAutoConstant(String name, org.ogre4j.GpuProgramParameters.AutoConstantType acType, int extraInfo);

    /** **/
    public void setNamedAutoConstantReal(String name, org.ogre4j.GpuProgramParameters.AutoConstantType acType, float rData);

    /** 
    Sets a named parameter up to track a derivation of the current time. **/
    public void setNamedConstantFromTime(String name, float factor);

    /** 
    Unbind an auto constant so that the constant is manually controlled again. **/
    public void clearNamedAutoConstant(String name);

    /** 
    Find a constant definition for a named parameter. **/
    public org.ogre4j.IGpuConstantDefinition _findNamedConstantDefinition(String name, boolean throwExceptionIfMissing);

    /** 
    Gets the physical buffer index associated with a logical float constant index. **/
    public int _getFloatConstantPhysicalIndex(int logicalIndex, int requestedSize);

    /** 
    Gets the physical buffer index associated with a logical int constant index. **/
    public int _getIntConstantPhysicalIndex(int logicalIndex, int requestedSize);

    /** 
    Sets whether or not we need to transpose the matrices passed in from the rest of OGRE. **/
    public void setTransposeMatrices(boolean val);

    /** **/
    public boolean getTransposeMatrices();

    /** 
    Copies the values of all constants (including auto constants) from another  object. **/
    public void copyConstantsFrom(org.ogre4j.IGpuProgramParameters source);

    /** 
    increments the multipass number entry by 1 if it exists **/
    public void incPassIterationNumber();

    /** 
    Does this parameters object have a pass iteration number constant? **/
    public boolean hasPassIterationNumber();

    /** 
    Get the physical buffer index of the pass iteration number constant **/
    public int getPassIterationNumberIndex();

}
