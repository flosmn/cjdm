/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IRenderQueueGroup extends INativeObject, org.ogre4j.ISceneCtlAllocatedObject {

public interface IPriorityMap extends INativeObject, org.std.Imap< Integer, org.ogre4j.IRenderPriorityGroup > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IRenderPriorityGroup get(int key);

    /** **/
    public void insert(int key, org.ogre4j.IRenderPriorityGroup value);

}
public interface IPriorityMapIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IRenderQueueGroup.IPriorityMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IRenderPriorityGroup getNext();

    /** **/
    public org.ogre4j.IRenderPriorityGroup peekNextValue();

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.IRenderQueueGroup.IPriorityMapIterator operatorAssignment(org.ogre4j.IRenderQueueGroup.IPriorityMapIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IRenderPriorityGroup> peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** 
    Get an iterator for browsing through child contents. **/
    public void getIterator(org.ogre4j.IRenderQueueGroup.IPriorityMapIterator returnValue);

    /** 
    Add a renderable to this group, with the given priority. **/
    public void addRenderable(org.ogre4j.IRenderable pRend, org.ogre4j.ITechnique pTech, int priority);

    /** 
    Clears this group of renderables. **/
    public void clear(boolean destroy);

    /** 
    Indicate whether a given queue group will be doing any shadow setup. **/
    public void setShadowsEnabled(boolean enabled);

    /** 
    Are shadows enabled for this queue? **/
    public boolean getShadowsEnabled();

    /** 
    Sets whether or not the queue will split passes by their lighting type, ie ambient, per-light and decal. **/
    public void setSplitPassesByLightingType(boolean split);

    /** 
    Sets whether or not the queue will split passes which have shadow receive turned off (in their parent material), which is needed when certain shadow techniques are used. **/
    public void setSplitNoShadowPasses(boolean split);

    /** 
    Sets whether or not objects which cast shadows should be treated as never receiving shadows. **/
    public void setShadowCastersCannotBeReceivers(boolean ind);

    /** 
    Reset the organisation modes required for the solids in this group. **/
    public void resetOrganisationModes();

    /** 
    Add a required sorting / grouping mode for the solids in this group. **/
    public void addOrganisationMode(org.ogre4j.QueuedRenderableCollection.OrganisationMode om);

    /** 
    Setthe sorting / grouping mode for the solids in this group to the default. **/
    public void defaultOrganisationMode();

}
