/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ISceneNode extends INativeObject, org.ogre4j.INode {

public interface IObjectMap extends INativeObject, org.std.Ihash_map< String, org.ogre4j.IMovableObject > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IMovableObject get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IMovableObject value);

}
public interface IObjectIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.ISceneNode.IObjectMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IMovableObject getNext();

    /** **/
    public org.ogre4j.IMovableObject peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.ISceneNode.IObjectIterator operatorAssignment(org.ogre4j.ISceneNode.IObjectIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IMovableObject> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IConstObjectIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.ISceneNode.IObjectMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IMovableObject getNext();

    /** **/
    public org.ogre4j.IMovableObject peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.ISceneNode.IConstObjectIterator operatorAssignment(org.ogre4j.ISceneNode.IConstObjectIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IMovableObject> peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** 
    Adds an instance of a scene object to this node. **/
    public void attachObject(org.ogre4j.IMovableObject obj);

    /** 
    Reports the number of objects attached to this node. **/
    public int numAttachedObjects();

    /** 
    Retrieves a pointer to an attached object. **/
    public org.ogre4j.IMovableObject getAttachedObject(int index);

    /** 
    Retrieves a pointer to an attached object. **/
    public org.ogre4j.IMovableObject getAttachedObject(String name);

    /** 
    Detaches the indexed object from this scene node. **/
    public org.ogre4j.IMovableObject detachObject(int index);

    /** 
    Detaches an object by pointer. **/
    public void detachObject(org.ogre4j.IMovableObject obj);

    /** 
    Detaches the named object from this node and returns a pointer to it. **/
    public org.ogre4j.IMovableObject detachObject(String name);

    /** 
    Detaches all objects attached to this node. **/
    public void detachAllObjects();

    /** 
    Determines whether this node is in the scene graph, i.e. whether it's ultimate ancestor is the root scene node. **/
    public boolean isInSceneGraph();

    /** 
    Notifies this  that it is the root scene node. **/
    public void _notifyRootNode();

    /** 
    Internal method to update the . **/
    public void _update(boolean updateChildren, boolean parentHasChanged);

    /** 
    Tells the  to update the world bound info it stores. **/
    public void _updateBounds();

    /** 
    Internal method which locates any visible objects attached to this node and adds them to the passed in queue. **/
    public void _findVisibleObjects(org.ogre4j.ICamera cam, org.ogre4j.IRenderQueue queue, org.ogre4j.IVisibleObjectsBoundsInfo visibleBounds, boolean includeChildren, boolean displayNodes, boolean onlyShadowCasters);

    /** 
    Gets the axis-aligned bounding box of this node (and hence all subnodes). **/
    public org.ogre4j.IAxisAlignedBox _getWorldAABB();

    /** 
    Retrieves an iterator which can be used to efficiently step through the objects attached to this node. **/
    public void getAttachedObjectIterator(org.ogre4j.ISceneNode.IObjectIterator returnValue);

    /** **/
    public void getAttachedObjectIterator_const(org.ogre4j.ISceneNode.IConstObjectIterator returnValue);

    /** 
    Gets the creator of this scene node. **/
    public org.ogre4j.ISceneManager getCreator();

    /** 
    This method removes and destroys the named child and all of its children. **/
    public void removeAndDestroyChild(String name);

    /** 
    This method removes and destroys the child and all of its children. **/
    public void removeAndDestroyChild(int index);

    /** 
    Removes and destroys all children of this node. **/
    public void removeAndDestroyAllChildren();

    /** 
    Allows the showing of the node's bounding box. **/
    public void showBoundingBox(boolean bShow);

    /** 
    Add the bounding box to the rendering queue. **/
    public void _addBoundingBoxToQueue(org.ogre4j.IRenderQueue queue);

    /** 
    This allows scene managers to determine if the node's bounding box should be added to the rendering queue. **/
    public boolean getShowBoundingBox();

    /** 
    Creates an unnamed new  as a child of this node. **/
    public org.ogre4j.ISceneNode createChildSceneNode(org.ogre4j.IVector3 translate, org.ogre4j.IQuaternion rotate);

    /** 
    Creates a new named  as a child of this node. **/
    public org.ogre4j.ISceneNode createChildSceneNode(String name, org.ogre4j.IVector3 translate, org.ogre4j.IQuaternion rotate);

    /** 
    Allows retrieval of the nearest lights to the centre of this . **/
    public void findLights(org.ogre4j.ILightList destList, float radius);

    /** 
    Tells the node whether to yaw around it's own local Y axis or a fixed axis of choice. **/
    public void setFixedYawAxis(boolean useFixed, org.ogre4j.IVector3 fixedAxis);

    /** 
    Rotate the node around the Y-axis. **/
    public void yaw(org.ogre4j.IRadian angle, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Sets the node's direction vector ie it's local -z. **/
    public void setDirection(float x, float y, float z, org.ogre4j.Node.TransformSpace relativeTo, org.ogre4j.IVector3 localDirectionVector);

    /** 
    Sets the node's direction vector ie it's local -z. **/
    public void setDirection(org.ogre4j.IVector3 vec, org.ogre4j.Node.TransformSpace relativeTo, org.ogre4j.IVector3 localDirectionVector);

    /** 
    Points the local -Z direction of this node at a point in space. **/
    public void lookAt(org.ogre4j.IVector3 targetPoint, org.ogre4j.Node.TransformSpace relativeTo, org.ogre4j.IVector3 localDirectionVector);

    /** 
    Enables / disables automatic tracking of another . **/
    public void setAutoTracking(boolean enabled, org.ogre4j.ISceneNode target, org.ogre4j.IVector3 localDirectionVector, org.ogre4j.IVector3 offset);

    /** 
    Get the auto tracking target for this node, if any. **/
    public org.ogre4j.ISceneNode getAutoTrackTarget();

    /** 
    Get the auto tracking offset for this node, if the node is auto tracking. **/
    public org.ogre4j.IVector3 getAutoTrackOffset();

    /** 
    Get the auto tracking local direction for this node, if it is auto tracking. **/
    public org.ogre4j.IVector3 getAutoTrackLocalDirection();

    /** 
    Internal method used by OGRE to update auto-tracking cameras. **/
    public void _autoTrack();

    /** 
    Gets the parent of this . **/
    public org.ogre4j.ISceneNode getParentSceneNode();

    /** 
    Makes all objects attached to this node become visible / invisible. **/
    public void setVisible(boolean visible, boolean cascade);

    /** 
    Inverts the visibility of all objects attached to this node. **/
    public void flipVisibility(boolean cascade);

    /** 
    Tells all objects attached to this node whether to display their debug information or not. **/
    public void setDebugDisplayEnabled(boolean enabled, boolean cascade);



    /**
     * This method has been added manually to prevent a runtime problem with C++ multiple inheritance
     * and reinterprete_cast.
     * <p>
     * ParticleSystem has two base classes:
     * <ul>
     * <li>StringInterface</li>
     * <li>MovableObject</li>
     * </ul>
     * SceneNode.attachObject casts given pointer to MovableObject.
     * Because ParticleSystem's first base class is StringInterface,
     * the runtime dies at this cast.
     * </p>
     * 
     * @param obj ParticleSystem to attach.
     */
    public void attachObject(org.ogre4j.IParticleSystem obj);


}
