/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ISkeleton extends INativeObject, org.ogre4j.IResource {

public interface IBoneList extends INativeObject, org.std.Ivector< org.ogre4j.IBone > {

    /** **/
    public void assign(int num, org.ogre4j.IBone val);

    /** **/
    public org.ogre4j.IBone at(int loc);

    /** **/
    public org.ogre4j.IBone back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IBone front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IBone val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IBoneIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.ISkeleton.IBoneList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IBone getNext();

    /** **/
    public org.ogre4j.IBone peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.IBone> peekNextPtr();

    /** **/
    public void moveNext();

}
public interface ILinkedSkeletonAnimSourceList extends INativeObject, org.std.Ivector< org.ogre4j.ILinkedSkeletonAnimationSource > {

    /** **/
    public void assign(int num, org.ogre4j.ILinkedSkeletonAnimationSource val);

    /** **/
    public org.ogre4j.ILinkedSkeletonAnimationSource at(int loc);

    /** **/
    public org.ogre4j.ILinkedSkeletonAnimationSource back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ILinkedSkeletonAnimationSource front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ILinkedSkeletonAnimationSource val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ILinkedSkeletonAnimSourceIterator extends INativeObject, org.ogre4j.IConstVectorIterator< org.ogre4j.ISkeleton.ILinkedSkeletonAnimSourceList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public void getNext(org.ogre4j.ILinkedSkeletonAnimationSource returnValue);

    /** **/
    public void peekNext(org.ogre4j.ILinkedSkeletonAnimationSource returnValue);

    /** **/
    public org.ogre4j.ILinkedSkeletonAnimationSource peekNextPtr();

    /** **/
    public void moveNext();

}
public interface IBoneHandleMap extends INativeObject, org.std.Ivector< Integer > {

    /** **/
    public void assign(int num, int val);

    /** **/
    public IntegerPointer at(int loc);

    /** **/
    public IntegerPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public IntegerPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(int val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IBoneListByName extends INativeObject, org.std.Imap< String, org.ogre4j.IBone > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IBone get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IBone value);

}
public interface IBoneSet extends INativeObject, org.std.Iset< org.ogre4j.IBone > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IBone key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IBone key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IAnimationList extends INativeObject, org.std.Imap< String, org.ogre4j.IAnimation > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IAnimation get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IAnimation value);

}
    /** 
    Creates a brand new  owned by this . **/
    public org.ogre4j.IBone createBone();

    /** 
    Creates a brand new  owned by this . **/
    public org.ogre4j.IBone createBone(int handle);

    /** 
    Creates a brand new  owned by this . **/
    public org.ogre4j.IBone createBone(String name);

    /** 
    Creates a brand new  owned by this . **/
    public org.ogre4j.IBone createBone(String name, int handle);

    /** 
    Returns the number of bones in this skeleton. **/
    public int getNumBones();

    /** 
    Gets the root bone of the skeleton: deprecated in favour of getRootBoneIterator. **/
    public org.ogre4j.IBone getRootBone();

    /** **/
    public void getRootBoneIterator(org.ogre4j.ISkeleton.IBoneIterator returnValue);

    /** **/
    public void getBoneIterator(org.ogre4j.ISkeleton.IBoneIterator returnValue);

    /** 
    Gets a bone by it's handle. **/
    public org.ogre4j.IBone getBone(int handle);

    /** 
    Gets a bone by it's name. **/
    public org.ogre4j.IBone getBone(String name);

    /** 
    Returns whether this skeleton contains the named bone. **/
    public boolean hasBone(String name);

    /** 
    Sets the current position / orientation to be the 'binding pose' i.e. the layout in which bones were originally bound to a mesh. **/
    public void setBindingPose();

    /** 
    Resets the position and orientation of all bones in this skeleton to their original binding position. **/
    public void reset(boolean resetManualBones);

    /** 
    Creates a new  object for animating this skeleton. **/
    public org.ogre4j.IAnimation createAnimation(String name, float length);

    /** 
    Returns the named  object. **/
    public org.ogre4j.IAnimation getAnimation(String name, NativeObjectPointer<org.ogre4j.ILinkedSkeletonAnimationSource> linker);

    /** **/
    public org.ogre4j.IAnimation _getAnimationImpl(String name, NativeObjectPointer<org.ogre4j.ILinkedSkeletonAnimationSource> linker);

    /** 
    Returns whether this skeleton contains the named animation. **/
    public boolean hasAnimation(String name);

    /** 
    Removes an  from this skeleton. **/
    public void removeAnimation(String name);

    /** 
    Changes the state of the skeleton to reflect the application of the passed in collection of animations. **/
    public void setAnimationState(org.ogre4j.IAnimationStateSet animSet);

    /** 
    Initialise an animation set suitable for use with this skeleton. **/
    public void _initAnimationState(org.ogre4j.IAnimationStateSet animSet);

    /** 
    Refresh an animation set suitable for use with this skeleton. **/
    public void _refreshAnimationState(org.ogre4j.IAnimationStateSet animSet);

    /** 
    Populates the passed in array with the bone matrices based on the current position. **/
    public void _getBoneMatrices(org.ogre4j.IMatrix4 pMatrices);

    /** 
    Gets the number of animations on this skeleton. **/
    public int getNumAnimations();

    /** 
    Gets a single animation by index. **/
    public org.ogre4j.IAnimation getAnimation(int index);

    /** 
    Gets the animation blending mode which this skeleton will use. **/
    public org.ogre4j.SkeletonAnimationBlendMode getBlendMode();

    /** 
    Sets the animation blending mode this skeleton will use. **/
    public void setBlendMode(org.ogre4j.SkeletonAnimationBlendMode state);

    /** **/
    public void _updateTransforms();

    /** 
    Optimise all of this skeleton's animations. **/
    public void optimiseAllAnimations(boolean preservingIdentityNodeTracks);

    /** 
    Allows you to use the animations from another  object to animate this skeleton. 
You cannot set up cyclic relationships, e.g. SkeletonA uses SkeletonB's animations, and SkeletonB uses SkeletonA's animations. This is because it would set up a circular dependency which would prevent proper unloading - make one of the skeletons the 'master' in this case. **/
    public void addLinkedSkeletonAnimationSource(String skelName, float scale);

    /** **/
    public void removeAllLinkedSkeletonAnimationSources();

    /** **/
    public void getLinkedSkeletonAnimationSourceIterator(org.ogre4j.ISkeleton.ILinkedSkeletonAnimSourceIterator returnValue);

    /** **/
    public void _notifyManualBonesDirty();

    /** **/
    public void _notifyManualBoneStateChange(org.ogre4j.IBone bone);

    /** **/
    public boolean getManualBonesDirty();

    /** **/
    public boolean hasManualBones();

    /** 
    Merge animations from another  object into this skeleton. **/
    public void _mergeSkeletonAnimations(org.ogre4j.ISkeleton source, org.ogre4j.ISkeleton.IBoneHandleMap boneHandleMap, org.ogre4j.IStringVector animations);

    /** 
    Build the bone handle map to use with . **/
    public void _buildMapBoneByHandle(org.ogre4j.ISkeleton source, org.ogre4j.ISkeleton.IBoneHandleMap boneHandleMap);

    /** 
    Build the bone handle map to use with . **/
    public void _buildMapBoneByName(org.ogre4j.ISkeleton source, org.ogre4j.ISkeleton.IBoneHandleMap boneHandleMap);

}
