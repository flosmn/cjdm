/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IExternalTextureSource extends INativeObject, org.ogre4j.IStringInterface {

public static interface ICmdFPS extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdInputFileName extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdPlayMode extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdTecPassState extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
    /** **/
    public void setInputName(String sIN);

    /** **/
    public String getInputName();

    /** **/
    public void setFPS(int iFPS);

    /** **/
    public int getFPS();

    /** **/
    public void setPlayMode(org.ogre4j.eTexturePlayMode eMode);

    /** **/
    public org.ogre4j.eTexturePlayMode getPlayMode();

    /** **/
    public void setTextureTecPassStateLevel(int t, int p, int s);

    /** **/
    public void getTextureTecPassStateLevel(IntegerPointer t, IntegerPointer p, IntegerPointer s);

    /** 
    Call from derived classes to ensure the dictionary is setup **/
    public void addBaseParams();

    /** 
    Returns the string name of this PlugIn (as set by the PlugIn) **/
    public String getPlugInStringName();

    /** 
    Returns dictionary name **/
    public String getDictionaryStringName();

    /** 
    Call this function from manager to init system **/
    public boolean initialise();

    /** 
    Shuts down PlugIn **/
    public void shutDown();

    /** 
    Creates a texture into an already defined material or one that is created new (it's up to plugin to use a material or create one) Before calling, ensure that needed params have been defined via the stringInterface or regular methods **/
    public void createDefinedTexture(String sMaterialName, String groupName);

    /** 
    What this destroys is dependent on the plugin... See specific plugin doc to know what is all destroyed (normally, plugins will destroy only what they created, or used directly - ie. just texture unit) **/
    public void destroyAdvancedTexture(String sTextureName, String groupName);

}
