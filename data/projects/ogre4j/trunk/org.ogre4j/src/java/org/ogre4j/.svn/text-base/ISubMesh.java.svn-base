/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ISubMesh extends INativeObject, org.ogre4j.IResourceAllocatedObject {

public interface IIndexMap extends INativeObject, org.std.Ivector< Integer > {

    /** **/
    public void assign(int num, int val);

    /** **/
    public IntegerPointer at(int loc);

    /** **/
    public IntegerPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public IntegerPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(int val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IVertexBoneAssignmentList extends INativeObject, org.std.Imultimap< Integer, org.ogre4j.IVertexBoneAssignment_s > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IBoneAssignmentIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.ISubMesh.IVertexBoneAssignmentList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public void getNext(org.ogre4j.IVertexBoneAssignment_s returnValue);

    /** **/
    public void peekNextValue(org.ogre4j.IVertexBoneAssignment_s returnValue);

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.ISubMesh.IBoneAssignmentIterator operatorAssignment(org.ogre4j.ISubMesh.IBoneAssignmentIterator rhs);

    /** **/
    public org.ogre4j.IVertexBoneAssignment_s peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IAliasTextureIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.IAliasTextureNamePairList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public String getNext();

    /** **/
    public String peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.ISubMesh.IAliasTextureIterator operatorAssignment(org.ogre4j.ISubMesh.IAliasTextureIterator rhs);

    /** **/
    public StringPointer peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** **/
    public void setMaterialName(String matName);

    /** **/
    public String getMaterialName();

    /** 
    Returns true if a material has been assigned to the submesh, otherwise returns false. **/
    public boolean isMatInitialised();

    /** 
    Returns a  structure required to render this mesh. **/
    public void _getRenderOperation(org.ogre4j.IRenderOperation rend, int lodIndex);

    /** 
    Assigns a vertex to a bone with a given weight, for skeletal animation. **/
    public void addBoneAssignment(org.ogre4j.IVertexBoneAssignment_s vertBoneAssign);

    /** 
    Removes all bone assignments for this mesh. **/
    public void clearBoneAssignments();

    /** 
    Gets an iterator for access all bone assignments. **/
    public void getBoneAssignmentIterator(org.ogre4j.ISubMesh.IBoneAssignmentIterator returnValue);

    /** 
    Gets a const reference to the list of bone assignments **/
    public org.ogre4j.ISubMesh.IVertexBoneAssignmentList getBoneAssignments();

    /** 
    Must be called once to compile bone assignments into geometry buffer. **/
    public void _compileBoneAssignments();

    /** 
    Gets an constant iterator to access all texture alias names assigned to this submesh. **/
    public void getAliasTextureIterator(org.ogre4j.ISubMesh.IAliasTextureIterator returnValue);

    /** 
    Adds the alias or replaces an existing one and associates the texture name to it. **/
    public void addTextureAlias(String aliasName, String textureName);

    /** 
    Remove a specific texture alias name from the sub mesh **/
    public void removeTextureAlias(String aliasName);

    /** 
    removes all texture aliases from the sub mesh **/
    public void removeAllTextureAliases();

    /** 
    returns true if the sub mesh has texture aliases **/
    public boolean hasTextureAliases();

    /** 
    Gets the number of texture aliases assigned to the sub mesh. **/
    public int getTextureAliasCount();

    /** 
    The current material used by the submesh is copied into a new material and the submesh's texture aliases are applied if the current texture alias names match those found in the original material. **/
    public boolean updateMaterialUsingTextureAliases();

    /** 
    Get the type of any vertex animation used by dedicated geometry. **/
    public org.ogre4j.VertexAnimationType getVertexAnimationType();

    /** 
    Generate the submesh extremes (**/
    public void generateExtremes(int count);

    /** 
    Returns true(by default) if the submesh should be included in the mesh EdgeList, otherwise returns false. **/
    public boolean isBuildEdgesEnabled();

    /** **/
    public void setBuildEdgesEnabled(boolean b);

    /** **/
    public boolean getuseSharedVertices();

    /** **/
    public void setuseSharedVertices(boolean _jni_value_);

    /** **/
    public org.ogre4j.RenderOperation.OperationType getoperationType();

    /** **/
    public void setoperationType(org.ogre4j.RenderOperation.OperationType _jni_value_);

    /** **/
    public org.ogre4j.IVertexData getvertexData();

    /** **/
    public void setvertexData(org.ogre4j.IVertexData _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData();

    /** **/
    public void setindexData(org.ogre4j.IIndexData _jni_value_);

    /** **/
    public void getblendIndexToBoneIndexMap(org.ogre4j.ISubMesh.IIndexMap returnValue);

    /** **/
    public void setblendIndexToBoneIndexMap(org.ogre4j.ISubMesh.IIndexMap _jni_value_);

    /** **/
    public void getmLodFaceList(org.ogre4j.IProgressiveMesh.ILODFaceList returnValue);

    /** **/
    public void setmLodFaceList(org.ogre4j.IProgressiveMesh.ILODFaceList _jni_value_);

    /** **/
    public void getextremityPoints(org.std.Ivector< org.ogre4j.IVector3 > returnValue);

    /** **/
    public void setextremityPoints(org.std.Ivector< org.ogre4j.IVector3 > _jni_value_);

    /** **/
    public org.ogre4j.IMesh getparent();

    /** **/
    public void setparent(org.ogre4j.IMesh _jni_value_);

}
