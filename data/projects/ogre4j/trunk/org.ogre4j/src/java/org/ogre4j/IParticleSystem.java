/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IParticleSystem extends INativeObject, org.ogre4j.IStringInterface, org.ogre4j.IMovableObject {

public static interface ICmdCull extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdEmittedEmitterQuota extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdHeight extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdIterationInterval extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdLocalSpace extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdMaterial extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdNonvisibleTimeout extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdQuota extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdRenderer extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdSorted extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ICmdWidth extends INativeObject, org.ogre4j.IParamCommand {

// this type is ignored
}
public static interface ISortByDirectionFunctor extends INativeObject {

    /** **/
    public float operatorFunctionCall(org.ogre4j.IParticle p);

    /** **/
    public void getsortDir(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setsortDir(org.ogre4j.IVector3 _jni_value_);

}
public static interface ISortByDistanceFunctor extends INativeObject {

    /** **/
    public float operatorFunctionCall(org.ogre4j.IParticle p);

    /** **/
    public void getsortPos(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setsortPos(org.ogre4j.IVector3 _jni_value_);

}
public interface IActiveParticleList extends INativeObject, org.std.Ilist< org.ogre4j.IParticle > {

    /** **/
    public void assign(int num, org.ogre4j.IParticle val);

    /** **/
    public org.ogre4j.IParticle back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticle front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IParticle val);

    /** **/
    public void push_front(org.ogre4j.IParticle val);

    /** **/
    public void remove(org.ogre4j.IParticle val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IFreeParticleList extends INativeObject, org.std.Ilist< org.ogre4j.IParticle > {

    /** **/
    public void assign(int num, org.ogre4j.IParticle val);

    /** **/
    public org.ogre4j.IParticle back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticle front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IParticle val);

    /** **/
    public void push_front(org.ogre4j.IParticle val);

    /** **/
    public void remove(org.ogre4j.IParticle val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IParticlePool extends INativeObject, org.std.Ivector< org.ogre4j.IParticle > {

    /** **/
    public void assign(int num, org.ogre4j.IParticle val);

    /** **/
    public org.ogre4j.IParticle at(int loc);

    /** **/
    public org.ogre4j.IParticle back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticle front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IParticle val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IFreeEmittedEmitterList extends INativeObject, org.std.Ilist< org.ogre4j.IParticleEmitter > {

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val);

    /** **/
    public org.ogre4j.IParticleEmitter back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticleEmitter front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val);

    /** **/
    public void push_front(org.ogre4j.IParticleEmitter val);

    /** **/
    public void remove(org.ogre4j.IParticleEmitter val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IActiveEmittedEmitterList extends INativeObject, org.std.Ilist< org.ogre4j.IParticleEmitter > {

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val);

    /** **/
    public org.ogre4j.IParticleEmitter back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticleEmitter front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val);

    /** **/
    public void push_front(org.ogre4j.IParticleEmitter val);

    /** **/
    public void remove(org.ogre4j.IParticleEmitter val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IEmittedEmitterList extends INativeObject, org.std.Ivector< org.ogre4j.IParticleEmitter > {

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val);

    /** **/
    public org.ogre4j.IParticleEmitter at(int loc);

    /** **/
    public org.ogre4j.IParticleEmitter back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticleEmitter front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IFreeEmittedEmitterMap extends INativeObject, org.std.Imap< String, org.ogre4j.IParticleSystem.IFreeEmittedEmitterList > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IParticleSystem.IFreeEmittedEmitterList get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystem.IFreeEmittedEmitterList value);

}
public interface IEmittedEmitterPool extends INativeObject, org.std.Imap< String, org.ogre4j.IParticleSystem.IEmittedEmitterList > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IParticleSystem.IEmittedEmitterList get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystem.IEmittedEmitterList value);

}
public interface IParticleEmitterList extends INativeObject, org.std.Ivector< org.ogre4j.IParticleEmitter > {

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val);

    /** **/
    public org.ogre4j.IParticleEmitter at(int loc);

    /** **/
    public org.ogre4j.IParticleEmitter back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticleEmitter front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IParticleAffectorList extends INativeObject, org.std.Ivector< org.ogre4j.IParticleAffector > {

    /** **/
    public void assign(int num, org.ogre4j.IParticleAffector val);

    /** **/
    public org.ogre4j.IParticleAffector at(int loc);

    /** **/
    public org.ogre4j.IParticleAffector back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IParticleAffector front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IParticleAffector val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Sets the ParticleRenderer to be used to render this particle system. **/
    public void setRenderer(String typeName);

    /** 
    Gets the ParticleRenderer to be used to render this particle system. **/
    public org.ogre4j.IParticleSystemRenderer getRenderer();

    /** 
    Gets the name of the ParticleRenderer to be used to render this particle system. **/
    public String getRendererName();

    /** 
    Adds an emitter to this particle system. **/
    public org.ogre4j.IParticleEmitter addEmitter(String emitterType);

    /** 
    Retrieves an emitter by it's index (zero-based). **/
    public org.ogre4j.IParticleEmitter getEmitter(int index);

    /** 
    Returns the number of emitters for this particle system. **/
    public int getNumEmitters();

    /** 
    Removes an emitter from the system. **/
    public void removeEmitter(int index);

    /** 
    Removes all the emitters from this system. **/
    public void removeAllEmitters();

    /** 
    Adds an affector to this particle system. **/
    public org.ogre4j.IParticleAffector addAffector(String affectorType);

    /** 
    Retrieves an affector by it's index (zero-based). **/
    public org.ogre4j.IParticleAffector getAffector(int index);

    /** 
    Returns the number of affectors for this particle system. **/
    public int getNumAffectors();

    /** 
    Removes an affector from the system. **/
    public void removeAffector(int index);

    /** 
    Removes all the affectors from this system. **/
    public void removeAllAffectors();

    /** 
    Empties this set of all particles. **/
    public void clear();

    /** 
    Gets the number of individual particles in the system right now. **/
    public int getNumParticles();

    /** 
    Manually add a particle to the system. **/
    public org.ogre4j.IParticle createParticle();

    /** 
    Manually add an emitter particle to the system. **/
    public org.ogre4j.IParticle createEmitterParticle(String emitterName);

    /** 
    Retrieve a particle from the system for manual tweaking. **/
    public org.ogre4j.IParticle getParticle(int index);

    /** 
    Returns the maximum number of particles this system is allowed to have active at once. **/
    public int getParticleQuota();

    /** 
    Sets the maximum number of particles this system is allowed to have active at once. **/
    public void setParticleQuota(int quota);

    /** 
    Returns the maximum number of emitted emitters this system is allowed to have active at once. **/
    public int getEmittedEmitterQuota();

    /** 
    Sets the maximum number of emitted emitters this system is allowed to have active at once. **/
    public void setEmittedEmitterQuota(int quota);

    /** 
    Assignment operator for copying. **/
    public org.ogre4j.IParticleSystem operatorAssignment(org.ogre4j.IParticleSystem rhs);

    /** 
    Updates the particles in the system based on time elapsed. **/
    public void _update(float timeElapsed);

    /** 
    Returns an iterator for stepping through all particles in this system. **/
    public void _getIterator(org.ogre4j.IParticleIterator returnValue);

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public void setMaterialName(String name);

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public String getMaterialName();

    /** 
    Overridden from **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** 
    Overridden from **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint);

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox();

    /** 
    Overridden from **/
    public float getBoundingRadius();

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** 
    Fast-forwards this system by the required number of seconds. **/
    public void fastForward(float time, float interval);

    /** 
    Sets a 'speed factor' on this particle system, which means it scales the elapsed real time which has passed by this factor before passing it to the emitters, affectors, and the particle life calculation. **/
    public void setSpeedFactor(float speedFactor);

    /** 
    Gets the 'speed factor' on this particle system. **/
    public float getSpeedFactor();

    /** 
    Sets a 'iteration interval' on this particle system. **/
    public void setIterationInterval(float iterationInterval);

    /** 
    Gets a 'iteration interval' on this particle system. **/
    public float getIterationInterval();

    /** 
    Sets when the particle system should stop updating after it hasn't been visible for a while. **/
    public void setNonVisibleUpdateTimeout(float timeout);

    /** 
    Gets when the particle system should stop updating after it hasn't been visible for a while. **/
    public float getNonVisibleUpdateTimeout();

    /** 
    Overridden from **/
    public String getMovableType();

    /** 
    Internal callback used by Particles to notify their parent that they have been resized. **/
    public void _notifyParticleResized();

    /** 
    Internal callback used by Particles to notify their parent that they have been rotated. **/
    public void _notifyParticleRotated();

    /** 
    Sets the default dimensions of the particles in this set. **/
    public void setDefaultDimensions(float width, float height);

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultWidth(float width);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultWidth();

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultHeight(float height);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultHeight();

    /** 
    Returns whether or not particles in this are tested individually for culling. **/
    public boolean getCullIndividually();

    /** 
    Sets whether culling tests particles in this individually as well as in a group. **/
    public void setCullIndividually(boolean cullIndividual);

    /** **/
    public String getResourceGroupName();

    /** 
    Get the origin of this particle system, e.g. a script file name. **/
    public String getOrigin();

    /** **/
    public void _notifyOrigin(String origin);

    /** 
    **/
    public void setRenderQueueGroup(short queueID);

    /** 
    Set whether or not particles are sorted according to the camera. **/
    public void setSortingEnabled(boolean enabled);

    /** **/
    public boolean getSortingEnabled();

    /** 
    Set the (initial) bounds of the particle system manually. **/
    public void setBounds(org.ogre4j.IAxisAlignedBox aabb);

    /** 
    Sets whether the bounds will be automatically updated for the life of the particle system **/
    public void setBoundsAutoUpdated(boolean autoUpdate, float stopIn);

    /** 
    Sets whether particles (and any affector effects) remain relative to the node the particle system is attached to. **/
    public void setKeepParticlesInLocalSpace(boolean keepLocal);

    /** 
    Gets whether particles (and any affector effects) remain relative to the node the particle system is attached to. **/
    public boolean getKeepParticlesInLocalSpace();

    /** 
    Internal method for updating the bounds of the particle system. **/
    public void _updateBounds();

    /** **/
    public long getTypeFlags();

}
