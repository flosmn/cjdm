/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IOverlay extends INativeObject, org.ogre4j.ISceneObjAllocatedObject {

public interface IOverlayContainerList extends INativeObject, org.std.Ilist< org.ogre4j.IOverlayContainer > {

    /** **/
    public void assign(int num, org.ogre4j.IOverlayContainer val);

    /** **/
    public org.ogre4j.IOverlayContainer back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IOverlayContainer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IOverlayContainer val);

    /** **/
    public void push_front(org.ogre4j.IOverlayContainer val);

    /** **/
    public void remove(org.ogre4j.IOverlayContainer val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IOverlay2DElementsIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.IOverlay.IOverlayContainerList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IOverlayContainer getNext();

    /** **/
    public org.ogre4j.IOverlayContainer peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.IOverlayContainer> peekNextPtr();

    /** **/
    public void moveNext();

}
    /** **/
    public org.ogre4j.IOverlayContainer getChild(String name);

    /** 
    Gets the name of this overlay. **/
    public String getName();

    /** 
    Alters the ZOrder of this overlay. **/
    public void setZOrder(int zorder);

    /** 
    Gets the ZOrder of this overlay. **/
    public int getZOrder();

    /** 
    Gets whether the overlay is displayed or not. **/
    public boolean isVisible();

    /** 
    Gets whether the overlay is initialised or not. **/
    public boolean isInitialised();

    /** 
    Shows the overlay if it was hidden. **/
    public void show();

    /** 
    Hides the overlay if it was visible. **/
    public void hide();

    /** 
    Adds a 2D 'container' to the overlay. **/
    public void add2D(org.ogre4j.IOverlayContainer cont);

    /** 
    Removes a 2D container from the overlay. **/
    public void remove2D(org.ogre4j.IOverlayContainer cont);

    /** 
    Adds a node capable of holding 3D objects to the overlay. **/
    public void add3D(org.ogre4j.ISceneNode node);

    /** 
    Removes a 3D element from the overlay. **/
    public void remove3D(org.ogre4j.ISceneNode node);

    /** 
    Clears the overlay of all attached items. **/
    public void clear();

    /** 
    Sets the scrolling factor of this overlay. **/
    public void setScroll(float x, float y);

    /** 
    Gets the current X scroll value **/
    public float getScrollX();

    /** 
    Gets the current Y scroll value **/
    public float getScrollY();

    /** 
    Scrolls the overlay by the offsets provided. **/
    public void scroll(float xoff, float yoff);

    /** 
    Sets the rotation applied to this overlay. **/
    public void setRotate(org.ogre4j.IRadian angle);

    /** 
    Gets the rotation applied to this overlay, in degrees. **/
    public org.ogre4j.IRadian getRotate();

    /** 
    Adds the passed in angle to the rotation applied to this overlay. **/
    public void rotate(org.ogre4j.IRadian angle);

    /** 
    Sets the scaling factor of this overlay. **/
    public void setScale(float x, float y);

    /** 
    Gets the current X scale value **/
    public float getScaleX();

    /** 
    Gets the current Y scale value **/
    public float getScaleY();

    /** 
    Used to transform the overlay when scrolling, scaling etc. **/
    public void _getWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** 
    Internal method to put the overlay contents onto the render queue. **/
    public void _findVisibleObjects(org.ogre4j.ICamera cam, org.ogre4j.IRenderQueue queue);

    /** 
    This returns a  at position x,y. **/
    public org.ogre4j.IOverlayElement findElementAt(float x, float y);

    /** **/
    public void get2DElementsIterator(org.ogre4j.IOverlay.IOverlay2DElementsIterator returnValue);

    /** 
    Get the origin of this overlay, e.g. a script file name. **/
    public String getOrigin();

    /** **/
    public void _notifyOrigin(String origin);

}
