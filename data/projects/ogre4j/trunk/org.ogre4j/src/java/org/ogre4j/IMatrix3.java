/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IMatrix3 extends INativeObject {

    /** **/
    public FloatPointer operatorIndex(int iRow);

    /** **/
    public void GetColumn(org.ogre4j.IVector3 returnValue, int iCol);

    /** **/
    public void SetColumn(int iCol, org.ogre4j.IVector3 vec);

    /** **/
    public void FromAxes(org.ogre4j.IVector3 xAxis, org.ogre4j.IVector3 yAxis, org.ogre4j.IVector3 zAxis);

    /** **/
    public org.ogre4j.IMatrix3 operatorAssignment(org.ogre4j.IMatrix3 rkMatrix);

    /** **/
    public boolean operatorEqual(org.ogre4j.IMatrix3 rkMatrix);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IMatrix3 rkMatrix);

    /** **/
    public void operatorAddition(org.ogre4j.IMatrix3 returnValue, org.ogre4j.IMatrix3 rkMatrix);

    /** **/
    public void operatorSubtraction(org.ogre4j.IMatrix3 returnValue, org.ogre4j.IMatrix3 rkMatrix);

    /** **/
    public void operatorMultiplication(org.ogre4j.IMatrix3 returnValue, org.ogre4j.IMatrix3 rkMatrix);

    /** **/
    public void operatorSubtraction(org.ogre4j.IMatrix3 returnValue);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rkVector);

    /** **/
    public void operatorMultiplication(org.ogre4j.IMatrix3 returnValue, float fScalar);

    /** **/
    public void Transpose(org.ogre4j.IMatrix3 returnValue);

    /** **/
    public boolean Inverse(org.ogre4j.IMatrix3 rkInverse, float fTolerance);

    /** **/
    public void Inverse_rbv(org.ogre4j.IMatrix3 returnValue, float fTolerance);

    /** **/
    public float Determinant();

    /** **/
    public void SingularValueDecomposition(org.ogre4j.IMatrix3 rkL, org.ogre4j.IVector3 rkS, org.ogre4j.IMatrix3 rkR);

    /** **/
    public void SingularValueComposition(org.ogre4j.IMatrix3 rkL, org.ogre4j.IVector3 rkS, org.ogre4j.IMatrix3 rkR);

    /** **/
    public void Orthonormalize();

    /** **/
    public void QDUDecomposition(org.ogre4j.IMatrix3 rkQ, org.ogre4j.IVector3 rkD, org.ogre4j.IVector3 rkU);

    /** **/
    public float SpectralNorm();

    /** **/
    public void ToAxisAngle(org.ogre4j.IVector3 rkAxis, org.ogre4j.IRadian rfAngle);

    /** **/
    public void ToAxisAngle(org.ogre4j.IVector3 rkAxis, org.ogre4j.IDegree rfAngle);

    /** **/
    public void FromAxisAngle(org.ogre4j.IVector3 rkAxis, org.ogre4j.IRadian fRadians);

    /** **/
    public boolean ToEulerAnglesXYZ(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle);

    /** **/
    public boolean ToEulerAnglesXZY(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle);

    /** **/
    public boolean ToEulerAnglesYXZ(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle);

    /** **/
    public boolean ToEulerAnglesYZX(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle);

    /** **/
    public boolean ToEulerAnglesZXY(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle);

    /** **/
    public boolean ToEulerAnglesZYX(org.ogre4j.IRadian rfYAngle, org.ogre4j.IRadian rfPAngle, org.ogre4j.IRadian rfRAngle);

    /** **/
    public void FromEulerAnglesXYZ(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle);

    /** **/
    public void FromEulerAnglesXZY(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle);

    /** **/
    public void FromEulerAnglesYXZ(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle);

    /** **/
    public void FromEulerAnglesYZX(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle);

    /** **/
    public void FromEulerAnglesZXY(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle);

    /** **/
    public void FromEulerAnglesZYX(org.ogre4j.IRadian fYAngle, org.ogre4j.IRadian fPAngle, org.ogre4j.IRadian fRAngle);

;

    /** 
    Determines if this matrix involves a scaling. **/
    public boolean hasScale();

}
