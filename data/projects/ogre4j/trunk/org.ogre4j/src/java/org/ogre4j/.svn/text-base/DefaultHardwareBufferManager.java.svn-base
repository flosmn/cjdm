/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class DefaultHardwareBufferManager extends org.xbig.base.NativeObject implements org.ogre4j.IDefaultHardwareBufferManager {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public DefaultHardwareBufferManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected DefaultHardwareBufferManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public DefaultHardwareBufferManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public DefaultHardwareBufferManager() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void createVertexBuffer(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue, int vertexSize, int numVerts, org.ogre4j.HardwareBuffer.Usage usage, boolean useShadowBuffer) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void createIndexBuffer(org.ogre4j.IHardwareIndexBufferSharedPtr returnValue, org.ogre4j.HardwareIndexBuffer.IndexType itype, int numIndexes, org.ogre4j.HardwareBuffer.Usage usage, boolean useShadowBuffer) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void createRenderToVertexBuffer(org.ogre4j.IRenderToVertexBufferSharedPtr returnValue) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Creates a new vertex declaration. **/
    public org.ogre4j.IVertexDeclaration createVertexDeclaration() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Destroys a vertex declaration. **/
    public void destroyVertexDeclaration(org.ogre4j.IVertexDeclaration decl) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Creates a new . **/
    public org.ogre4j.IVertexBufferBinding createVertexBufferBinding() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Destroys a . **/
    public void destroyVertexBufferBinding(org.ogre4j.IVertexBufferBinding binding) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Registers a vertex buffer as a copy of another. **/
    public void registerVertexBufferSourceAndCopy(org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer, org.ogre4j.IHardwareVertexBufferSharedPtr copy) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Allocates a copy of a given vertex buffer. **/
    public void allocateVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue, org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer, org.ogre4j.HardwareBufferManager.BufferLicenseType licenseType, org.ogre4j.IHardwareBufferLicensee licensee, boolean copyData) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Manually release a vertex buffer copy for others to subsequently use. **/
    public void releaseVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr bufferCopy) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Tell engine that the vertex buffer copy intent to reuse. **/
    public void touchVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr bufferCopy) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Free all unused vertex buffer copies. **/
    public void _freeUnusedBufferCopies() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Internal method for releasing all temporary buffers which have been allocated using BLT_AUTOMATIC_RELEASE; is called by OGRE. **/
    public void _releaseBufferCopies(boolean forceFreeUnused) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Internal method that forces the release of copies of a given buffer. **/
    public void _forceReleaseBufferCopies(org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Internal method that forces the release of copies of a given buffer. **/
    public void _forceReleaseBufferCopies(org.ogre4j.IHardwareVertexBuffer sourceBuffer) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void _notifyVertexBufferDestroyed(org.ogre4j.IHardwareVertexBuffer buf) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void _notifyIndexBufferDestroyed(org.ogre4j.IHardwareIndexBuffer buf) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IHardwareBufferManager getSingleton() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IHardwareBufferManager getSingletonPtr() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
