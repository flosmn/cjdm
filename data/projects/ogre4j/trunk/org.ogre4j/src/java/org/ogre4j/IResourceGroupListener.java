/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IResourceGroupListener extends INativeObject {

    /** 
    This event is fired when a resource group begins parsing scripts. **/
    public void resourceGroupScriptingStarted(String groupName, int scriptCount);

    /** 
    This event is fired when a script is about to be parsed. **/
    public void scriptParseStarted(String scriptName, BooleanPointer skipThisScript);

    /** 
    This event is fired when the script has been fully parsed. **/
    public void scriptParseEnded(String scriptName, boolean skipped);

    /** 
    This event is fired when a resource group finished parsing scripts. **/
    public void resourceGroupScriptingEnded(String groupName);

    /** 
    This event is fired when a resource group begins preparing. **/
    public void resourceGroupPrepareStarted(String groupName, int resourceCount);

    /** 
    This event is fired when a declared resource is about to be prepared. **/
    public void resourcePrepareStarted(org.ogre4j.IResourcePtr resource);

    /** 
    This event is fired when the resource has been prepared. **/
    public void resourcePrepareEnded();

    /** 
    This event is fired when a stage of preparing linked world geometry is about to start. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryPrepareStageStarted(String description);

    /** 
    This event is fired when a stage of preparing linked world geometry has been completed. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryPrepareStageEnded();

    /** 
    This event is fired when a resource group finished preparing. **/
    public void resourceGroupPrepareEnded(String groupName);

    /** 
    This event is fired when a resource group begins loading. **/
    public void resourceGroupLoadStarted(String groupName, int resourceCount);

    /** 
    This event is fired when a declared resource is about to be loaded. **/
    public void resourceLoadStarted(org.ogre4j.IResourcePtr resource);

    /** 
    This event is fired when the resource has been loaded. **/
    public void resourceLoadEnded();

    /** 
    This event is fired when a stage of loading linked world geometry is about to start. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryStageStarted(String description);

    /** 
    This event is fired when a stage of loading linked world geometry has been completed. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryStageEnded();

    /** 
    This event is fired when a resource group finished loading. **/
    public void resourceGroupLoadEnded(String groupName);

}
