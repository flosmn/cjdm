/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Exception extends org.xbig.base.NativeObject implements org.ogre4j.IException {
static { System.loadLibrary("ogre4j");}
public enum ExceptionCodes implements INativeEnum < ExceptionCodes > {
    ERR_CANNOT_WRITE_TO_FILE(ExceptionCodesHelper.ENUM_VALUES[0]),
    ERR_INVALID_STATE(ExceptionCodesHelper.ENUM_VALUES[1]),
    ERR_INVALIDPARAMS(ExceptionCodesHelper.ENUM_VALUES[2]),
    ERR_RENDERINGAPI_ERROR(ExceptionCodesHelper.ENUM_VALUES[3]),
    ERR_DUPLICATE_ITEM(ExceptionCodesHelper.ENUM_VALUES[4]),
    ERR_ITEM_NOT_FOUND(ExceptionCodesHelper.ENUM_VALUES[5]),
    ERR_FILE_NOT_FOUND(ExceptionCodesHelper.ENUM_VALUES[6]),
    ERR_INTERNAL_ERROR(ExceptionCodesHelper.ENUM_VALUES[7]),
    ERR_RT_ASSERTION_FAILED(ExceptionCodesHelper.ENUM_VALUES[8]),
    ERR_NOT_IMPLEMENTED(ExceptionCodesHelper.ENUM_VALUES[9]);

    private int value;

    ExceptionCodes(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public ExceptionCodes getEnum(int val) {
        return toEnum(val);
    }

    public static final ExceptionCodes toEnum(int retval) {
    if (retval ==ERR_CANNOT_WRITE_TO_FILE.value)
        return ExceptionCodes.ERR_CANNOT_WRITE_TO_FILE;
    else if (retval ==ERR_INVALID_STATE.value)
        return ExceptionCodes.ERR_INVALID_STATE;
    else if (retval ==ERR_INVALIDPARAMS.value)
        return ExceptionCodes.ERR_INVALIDPARAMS;
    else if (retval ==ERR_RENDERINGAPI_ERROR.value)
        return ExceptionCodes.ERR_RENDERINGAPI_ERROR;
    else if (retval ==ERR_DUPLICATE_ITEM.value)
        return ExceptionCodes.ERR_DUPLICATE_ITEM;
    else if (retval ==ERR_ITEM_NOT_FOUND.value)
        return ExceptionCodes.ERR_ITEM_NOT_FOUND;
    else if (retval ==ERR_FILE_NOT_FOUND.value)
        return ExceptionCodes.ERR_FILE_NOT_FOUND;
    else if (retval ==ERR_INTERNAL_ERROR.value)
        return ExceptionCodes.ERR_INTERNAL_ERROR;
    else if (retval ==ERR_RT_ASSERTION_FAILED.value)
        return ExceptionCodes.ERR_RT_ASSERTION_FAILED;
    else if (retval ==ERR_NOT_IMPLEMENTED.value)
        return ExceptionCodes.ERR_NOT_IMPLEMENTED;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class ExceptionCodesHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Exception(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Exception(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Exception(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Default constructor. **/
    public Exception(int number, String description, String source) {
         super( new org.xbig.base.InstancePointer(__createException__ivStringRStringR( number,  description,  source)), false);
    }

    private native static long __createException__ivStringRStringR(int number, String description, String source);

    /** 
    Advanced constructor. **/
    public Exception(int number, String description, String source, String type, String file, long line) {
         super( new org.xbig.base.InstancePointer(__createException__ivStringRStringRcPcPlv( number,  description,  source,  type,  file,  line)), false);
    }

    private native static long __createException__ivStringRStringRcPcPlv(int number, String description, String source, String type, String file, long line);

    /** 
    Copy constructor. **/
    public Exception(org.ogre4j.IException rhs) {
         super( new org.xbig.base.InstancePointer(__createException__ExceptionR( rhs.getInstancePointer().pointer)), false);
    }

    private native static long __createException__ExceptionR(long rhs);

    /** 
    Assignment operator. **/
    public void operatorAssignment(org.ogre4j.IException rhs) {
        _operatorAssignment__ExceptionR(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native void _operatorAssignment__ExceptionR(long _pointer_, long rhs);

    /** 
    Returns a string with the full description of this error. **/
    public String getFullDescription() {
         return _getFullDescription_const(this.object.pointer);
    }

    private native String _getFullDescription_const(long _pointer_);

    /** 
    Gets the error code. **/
    public int getNumber() {
         return _getNumber_const(this.object.pointer);
    }

    private native int _getNumber_const(long _pointer_);

    /** 
    Gets the source function. **/
    public String getSource() {
         return _getSource_const(this.object.pointer);
    }

    private native String _getSource_const(long _pointer_);

    /** 
    Gets source file name. **/
    public String getFile() {
         return _getFile_const(this.object.pointer);
    }

    private native String _getFile_const(long _pointer_);

    /** 
    Gets line number. **/
    public long getLine() {
         return _getLine_const(this.object.pointer);
    }

    private native long _getLine_const(long _pointer_);

    /** 
    Returns a string with only the 'description' field of this exception. Use getFullDescriptionto get a full description of the error including line number, error number and what function threw the exception. **/
    public String getDescription() {
         return _getDescription_const(this.object.pointer);
    }

    private native String _getDescription_const(long _pointer_);

    /** **/
    public String what() {
         return _what_const(this.object.pointer);
    }

    private native String _what_const(long _pointer_);

}
