/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IParticle extends INativeObject, org.ogre4j.ISceneObjAllocatedObject {

    /** 
    Sets the width and height for this particle. **/
    public void setDimensions(float width, float height);

    /** 
    Returns true if this particle deviates from the ParticleSystem's default dimensions (i.e. if the particle::setDimensions method has been called for this instance). **/
    public boolean hasOwnDimensions();

    /** 
    Retrieves the particle's personal width, if hasOwnDimensions is true. **/
    public float getOwnWidth();

    /** 
    Retrieves the particle's personal width, if hasOwnDimensions is true. **/
    public float getOwnHeight();

    /** 
    Sets the current rotation **/
    public void setRotation(org.ogre4j.IRadian rad);

    /** **/
    public org.ogre4j.IRadian getRotation();

    /** 
    Internal method for notifying the particle of it's owner. **/
    public void _notifyOwner(org.ogre4j.IParticleSystem owner);

    /** 
    Internal method for notifying the particle of it's optional visual data. **/
    public void _notifyVisualData(org.ogre4j.IParticleVisualData vis);

    /** **/
    public org.ogre4j.IParticleVisualData getVisualData();

    /** **/
    public void resetDimensions();

    /** **/
    public boolean getmOwnDimensions();

    /** **/
    public void setmOwnDimensions(boolean _jni_value_);

    /** **/
    public float getmWidth();

    /** **/
    public void setmWidth(float _jni_value_);

    /** **/
    public float getmHeight();

    /** **/
    public void setmHeight(float _jni_value_);

    /** **/
    public void getrotation(org.ogre4j.IRadian returnValue);

    /** **/
    public void setrotation(org.ogre4j.IRadian _jni_value_);

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getdirection(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setdirection(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getcolour(org.ogre4j.IColourValue returnValue);

    /** **/
    public void setcolour(org.ogre4j.IColourValue _jni_value_);

    /** **/
    public float gettimeToLive();

    /** **/
    public void settimeToLive(float _jni_value_);

    /** **/
    public float gettotalTimeToLive();

    /** **/
    public void settotalTimeToLive(float _jni_value_);

    /** **/
    public void getrotationSpeed(org.ogre4j.IRadian returnValue);

    /** **/
    public void setrotationSpeed(org.ogre4j.IRadian _jni_value_);

    /** **/
    public org.ogre4j.Particle.ParticleType getparticleType();

    /** **/
    public void setparticleType(org.ogre4j.Particle.ParticleType _jni_value_);

}
