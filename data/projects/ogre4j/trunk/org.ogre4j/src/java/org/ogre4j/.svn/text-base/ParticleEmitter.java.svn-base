/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ParticleEmitter extends org.xbig.base.NativeObject implements org.ogre4j.IParticleEmitter {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleEmitter(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleEmitter(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleEmitter(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Sets the position of this emitter relative to the particle system center. **/
    public void setPosition(org.ogre4j.IVector3 pos) {
        _setPosition__Vector3R(this.object.pointer, pos.getInstancePointer().pointer);
    }

    private native void _setPosition__Vector3R(long _pointer_, long pos);

    /** 
    Returns the position of this emitter relative to the center of the particle system. **/
    public org.ogre4j.IVector3 getPosition() {
         return new org.ogre4j.Vector3(new InstancePointer(_getPosition_const(this.object.pointer)));
    }

    private native long _getPosition_const(long _pointer_);

    /** 
    Sets the direction of the emitter. **/
    public void setDirection(org.ogre4j.IVector3 direction) {
        _setDirection__Vector3R(this.object.pointer, direction.getInstancePointer().pointer);
    }

    private native void _setDirection__Vector3R(long _pointer_, long direction);

    /** 
    Returns the base direction of the emitter. **/
    public org.ogre4j.IVector3 getDirection() {
         return new org.ogre4j.Vector3(new InstancePointer(_getDirection_const(this.object.pointer)));
    }

    private native long _getDirection_const(long _pointer_);

    /** 
    Sets the maximum angle away from the emitter direction which particle will be emitted. **/
    public void setAngle(org.ogre4j.IRadian angle) {
        _setAngle__RadianR(this.object.pointer, angle.getInstancePointer().pointer);
    }

    private native void _setAngle__RadianR(long _pointer_, long angle);

    /** 
    Returns the maximum angle which the initial particle direction can deviate from the emitters base direction. **/
    public org.ogre4j.IRadian getAngle() {
         return new org.ogre4j.Radian(new InstancePointer(_getAngle_const(this.object.pointer)));
    }

    private native long _getAngle_const(long _pointer_);

    /** 
    Sets the initial velocity of particles emitted. **/
    public void setParticleVelocity(float speed) {
        _setParticleVelocity__Realv(this.object.pointer, speed);
    }

    private native void _setParticleVelocity__Realv(long _pointer_, float speed);

    /** 
    Sets the initial velocity range of particles emitted. **/
    public void setParticleVelocity(float _min, float _max) {
        _setParticleVelocity__RealvRealv(this.object.pointer, _min,  _max);
    }

    private native void _setParticleVelocity__RealvRealv(long _pointer_, float _min, float _max);

    /** 
    Returns the minimum particle velocity. **/
    public void setMinParticleVelocity(float _min) {
        _setMinParticleVelocity__Realv(this.object.pointer, _min);
    }

    private native void _setMinParticleVelocity__Realv(long _pointer_, float _min);

    /** 
    Returns the maximum particle velocity. **/
    public void setMaxParticleVelocity(float _max) {
        _setMaxParticleVelocity__Realv(this.object.pointer, _max);
    }

    private native void _setMaxParticleVelocity__Realv(long _pointer_, float _max);

    /** 
    Returns the initial velocity of particles emitted. **/
    public float getParticleVelocity() {
         return _getParticleVelocity_const(this.object.pointer);
    }

    private native float _getParticleVelocity_const(long _pointer_);

    /** 
    Returns the minimum particle velocity. **/
    public float getMinParticleVelocity() {
         return _getMinParticleVelocity_const(this.object.pointer);
    }

    private native float _getMinParticleVelocity_const(long _pointer_);

    /** 
    Returns the maximum particle velocity. **/
    public float getMaxParticleVelocity() {
         return _getMaxParticleVelocity_const(this.object.pointer);
    }

    private native float _getMaxParticleVelocity_const(long _pointer_);

    /** 
    Sets the emission rate for this emitter. **/
    public void setEmissionRate(float particlesPerSecond) {
        _setEmissionRate__Realv(this.object.pointer, particlesPerSecond);
    }

    private native void _setEmissionRate__Realv(long _pointer_, float particlesPerSecond);

    /** 
    Returns the emission rate set for this emitter. **/
    public float getEmissionRate() {
         return _getEmissionRate_const(this.object.pointer);
    }

    private native float _getEmissionRate_const(long _pointer_);

    /** 
    Sets the lifetime of all particles emitted. **/
    public void setTimeToLive(float ttl) {
        _setTimeToLive__Realv(this.object.pointer, ttl);
    }

    private native void _setTimeToLive__Realv(long _pointer_, float ttl);

    /** 
    Sets the range of lifetime for particles emitted. **/
    public void setTimeToLive(float minTtl, float maxTtl) {
        _setTimeToLive__RealvRealv(this.object.pointer, minTtl,  maxTtl);
    }

    private native void _setTimeToLive__RealvRealv(long _pointer_, float minTtl, float maxTtl);

    /** 
    Sets the minimum time each particle will live for. **/
    public void setMinTimeToLive(float _min) {
        _setMinTimeToLive__Realv(this.object.pointer, _min);
    }

    private native void _setMinTimeToLive__Realv(long _pointer_, float _min);

    /** 
    Sets the maximum time each particle will live for. **/
    public void setMaxTimeToLive(float _max) {
        _setMaxTimeToLive__Realv(this.object.pointer, _max);
    }

    private native void _setMaxTimeToLive__Realv(long _pointer_, float _max);

    /** 
    Gets the time each particle will live for. **/
    public float getTimeToLive() {
         return _getTimeToLive_const(this.object.pointer);
    }

    private native float _getTimeToLive_const(long _pointer_);

    /** 
    Gets the minimum time each particle will live for. **/
    public float getMinTimeToLive() {
         return _getMinTimeToLive_const(this.object.pointer);
    }

    private native float _getMinTimeToLive_const(long _pointer_);

    /** 
    Gets the maximum time each particle will live for. **/
    public float getMaxTimeToLive() {
         return _getMaxTimeToLive_const(this.object.pointer);
    }

    private native float _getMaxTimeToLive_const(long _pointer_);

    /** 
    Sets the initial colour of particles emitted. **/
    public void setColour(org.ogre4j.IColourValue colour) {
        _setColour__ColourValueR(this.object.pointer, colour.getInstancePointer().pointer);
    }

    private native void _setColour__ColourValueR(long _pointer_, long colour);

    /** 
    Sets the range of colours for emitted particles. **/
    public void setColour(org.ogre4j.IColourValue colourStart, org.ogre4j.IColourValue colourEnd) {
        _setColour__ColourValueRColourValueR(this.object.pointer, colourStart.getInstancePointer().pointer,  colourEnd.getInstancePointer().pointer);
    }

    private native void _setColour__ColourValueRColourValueR(long _pointer_, long colourStart, long colourEnd);

    /** 
    Sets the minimum colour of particles to be emitted. **/
    public void setColourRangeStart(org.ogre4j.IColourValue colour) {
        _setColourRangeStart__ColourValueR(this.object.pointer, colour.getInstancePointer().pointer);
    }

    private native void _setColourRangeStart__ColourValueR(long _pointer_, long colour);

    /** 
    Sets the maximum colour of particles to be emitted. **/
    public void setColourRangeEnd(org.ogre4j.IColourValue colour) {
        _setColourRangeEnd__ColourValueR(this.object.pointer, colour.getInstancePointer().pointer);
    }

    private native void _setColourRangeEnd__ColourValueR(long _pointer_, long colour);

    /** 
    Gets the colour of particles to be emitted. **/
    public org.ogre4j.IColourValue getColour() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getColour_const(this.object.pointer)));
    }

    private native long _getColour_const(long _pointer_);

    /** 
    Gets the minimum colour of particles to be emitted. **/
    public org.ogre4j.IColourValue getColourRangeStart() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getColourRangeStart_const(this.object.pointer)));
    }

    private native long _getColourRangeStart_const(long _pointer_);

    /** 
    Gets the maximum colour of particles to be emitted. **/
    public org.ogre4j.IColourValue getColourRangeEnd() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getColourRangeEnd_const(this.object.pointer)));
    }

    private native long _getColourRangeEnd_const(long _pointer_);

    /** 
    Gets the number of particles which this emitter would like to emit based on the time elapsed. **/
    public int _getEmissionCount(float timeElapsed) {
         return __getEmissionCount__Realv(this.object.pointer, timeElapsed);
    }

    private native int __getEmissionCount__Realv(long _pointer_, float timeElapsed);

    /** 
    Initialises a particle based on the emitter's approach and parameters. **/
    public void _initParticle(org.ogre4j.IParticle pParticle) {
        __initParticle__Particlep(this.object.pointer, pParticle.getInstancePointer().pointer);
    }

    private native void __initParticle__Particlep(long _pointer_, long pParticle);

    /** 
    Returns the name of the type of emitter. **/
    public String getType() {
         return _getType_const(this.object.pointer);
    }

    private native String _getType_const(long _pointer_);

    /** 
    Sets whether or not the emitter is enabled. **/
    public void setEnabled(boolean enabled) {
        _setEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Gets the flag indicating if this emitter is enabled or not. **/
    public boolean getEnabled() {
         return _getEnabled_const(this.object.pointer);
    }

    private native boolean _getEnabled_const(long _pointer_);

    /** 
    Sets the 'start time' of this emitter. **/
    public void setStartTime(float startTime) {
        _setStartTime__Realv(this.object.pointer, startTime);
    }

    private native void _setStartTime__Realv(long _pointer_, float startTime);

    /** 
    Gets the start time of the emitter. **/
    public float getStartTime() {
         return _getStartTime_const(this.object.pointer);
    }

    private native float _getStartTime_const(long _pointer_);

    /** 
    Sets the duration of the emitter. **/
    public void setDuration(float duration) {
        _setDuration__Realv(this.object.pointer, duration);
    }

    private native void _setDuration__Realv(long _pointer_, float duration);

    /** 
    Gets the duration of the emitter from when it is created or re-enabled. **/
    public float getDuration() {
         return _getDuration_const(this.object.pointer);
    }

    private native float _getDuration_const(long _pointer_);

    /** 
    Sets the range of random duration for this emitter. **/
    public void setDuration(float _min, float _max) {
        _setDuration__RealvRealv(this.object.pointer, _min,  _max);
    }

    private native void _setDuration__RealvRealv(long _pointer_, float _min, float _max);

    /** 
    Sets the minimum duration of this emitter in seconds (see setDuration for more details) **/
    public void setMinDuration(float _min) {
        _setMinDuration__Realv(this.object.pointer, _min);
    }

    private native void _setMinDuration__Realv(long _pointer_, float _min);

    /** 
    Sets the maximum duration of this emitter in seconds (see setDuration for more details) **/
    public void setMaxDuration(float _max) {
        _setMaxDuration__Realv(this.object.pointer, _max);
    }

    private native void _setMaxDuration__Realv(long _pointer_, float _max);

    /** 
    Gets the minimum duration of this emitter in seconds (see setDuration for more details) **/
    public float getMinDuration() {
         return _getMinDuration_const(this.object.pointer);
    }

    private native float _getMinDuration_const(long _pointer_);

    /** 
    Gets the maximum duration of this emitter in seconds (see setDuration for more details) **/
    public float getMaxDuration() {
         return _getMaxDuration_const(this.object.pointer);
    }

    private native float _getMaxDuration_const(long _pointer_);

    /** 
    Sets the time between repeats of the emitter. **/
    public void setRepeatDelay(float duration) {
        _setRepeatDelay__Realv(this.object.pointer, duration);
    }

    private native void _setRepeatDelay__Realv(long _pointer_, float duration);

    /** 
    Gets the duration of the emitter from when it is created or re-enabled. **/
    public float getRepeatDelay() {
         return _getRepeatDelay_const(this.object.pointer);
    }

    private native float _getRepeatDelay_const(long _pointer_);

    /** 
    Sets the range of random duration for this emitter. **/
    public void setRepeatDelay(float _min, float _max) {
        _setRepeatDelay__RealvRealv(this.object.pointer, _min,  _max);
    }

    private native void _setRepeatDelay__RealvRealv(long _pointer_, float _min, float _max);

    /** 
    Sets the minimum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public void setMinRepeatDelay(float _min) {
        _setMinRepeatDelay__Realv(this.object.pointer, _min);
    }

    private native void _setMinRepeatDelay__Realv(long _pointer_, float _min);

    /** 
    Sets the maximum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public void setMaxRepeatDelay(float _max) {
        _setMaxRepeatDelay__Realv(this.object.pointer, _max);
    }

    private native void _setMaxRepeatDelay__Realv(long _pointer_, float _max);

    /** 
    Gets the minimum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public float getMinRepeatDelay() {
         return _getMinRepeatDelay_const(this.object.pointer);
    }

    private native float _getMinRepeatDelay_const(long _pointer_);

    /** 
    Gets the maximum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public float getMaxRepeatDelay() {
         return _getMaxRepeatDelay_const(this.object.pointer);
    }

    private native float _getMaxRepeatDelay_const(long _pointer_);

    /** 
    Returns the name of the emitter **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Sets the name of the emitter **/
    public void setName(String newName) {
        _setName__StringR(this.object.pointer, newName);
    }

    private native void _setName__StringR(long _pointer_, String newName);

    /** 
    Returns the name of the emitter to be emitted **/
    public String getEmittedEmitter() {
         return _getEmittedEmitter_const(this.object.pointer);
    }

    private native String _getEmittedEmitter_const(long _pointer_);

    /** 
    Sets the name of the emitter to be emitted **/
    public void setEmittedEmitter(String emittedEmitter) {
        _setEmittedEmitter__StringR(this.object.pointer, emittedEmitter);
    }

    private native void _setEmittedEmitter__StringR(long _pointer_, String emittedEmitter);

    /** 
    Return 'true' if the emitter is emitted by another emitter **/
    public boolean isEmitted() {
         return _isEmitted_const(this.object.pointer);
    }

    private native boolean _isEmitted_const(long _pointer_);

    /** 
    Set the indication (true/false) to indicate that the emitter is emitted by another emitter **/
    public void setEmitted(boolean emitted) {
        _setEmitted__bv(this.object.pointer, emitted);
    }

    private native void _setEmitted__bv(long _pointer_, boolean emitted);

    /** 
    Retrieves the parameter dictionary for this class. **/
    public org.ogre4j.IParamDictionary getParamDictionary() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary(this.object.pointer)));
    }

    private native long _getParamDictionary(long _pointer_);

    /** **/
    public org.ogre4j.IParamDictionary getParamDictionary_const() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary_const_const(this.object.pointer)));
    }

    private native long _getParamDictionary_const_const(long _pointer_);

    /** 
    Retrieves a list of parameters valid for this object. **/
    public org.ogre4j.IParameterList getParameters() {
         return new org.ogre4j.ParameterList(new InstancePointer(_getParameters_const(this.object.pointer)));
    }

    private native long _getParameters_const(long _pointer_);

    /** 
    Generic parameter setting method. **/
    public boolean setParameter(String name, String value) {
         return _setParameter__StringRStringR(this.object.pointer, name,  value);
    }

    private native boolean _setParameter__StringRStringR(long _pointer_, String name, String value);

    /** 
    Generic multiple parameter setting method. **/
    public void setParameterList(org.ogre4j.INameValuePairList paramList) {
        _setParameterList__NameValuePairListR(this.object.pointer, paramList.getInstancePointer().pointer);
    }

    private native void _setParameterList__NameValuePairListR(long _pointer_, long paramList);

    /** 
    Generic parameter retrieval method. **/
    public String getParameter(String name) {
         return _getParameter__StringR_const(this.object.pointer, name);
    }

    private native String _getParameter__StringR_const(long _pointer_, String name);

    /** 
    Method for copying this object's parameters to another object. **/
    public void copyParametersTo(org.ogre4j.IStringInterface dest) {
        _copyParametersTo__StringInterfacep_const(this.object.pointer, dest.getInstancePointer().pointer);
    }

    private native void _copyParametersTo__StringInterfacep_const(long _pointer_, long dest);

    /** 
    Cleans up the static 'msDictionary' required to reset , otherwise the containers are left with invalid pointers, which will lead to a crash as soon as one of the  implementers (e.g. ) initializes. **/
    public static void cleanupDictionary() {
        _cleanupDictionary();
    }

    private native static void _cleanupDictionary();

    /** 
    Sets the width and height for this particle. **/
    public void setDimensions(float width, float height) {
        _setDimensions__RealvRealv(this.object.pointer, width,  height);
    }

    private native void _setDimensions__RealvRealv(long _pointer_, float width, float height);

    /** 
    Returns true if this particle deviates from the ParticleSystem's default dimensions (i.e. if the particle::setDimensions method has been called for this instance). **/
    public boolean hasOwnDimensions() {
         return _hasOwnDimensions_const(this.object.pointer);
    }

    private native boolean _hasOwnDimensions_const(long _pointer_);

    /** 
    Retrieves the particle's personal width, if hasOwnDimensions is true. **/
    public float getOwnWidth() {
         return _getOwnWidth_const(this.object.pointer);
    }

    private native float _getOwnWidth_const(long _pointer_);

    /** 
    Retrieves the particle's personal width, if hasOwnDimensions is true. **/
    public float getOwnHeight() {
         return _getOwnHeight_const(this.object.pointer);
    }

    private native float _getOwnHeight_const(long _pointer_);

    /** 
    Sets the current rotation **/
    public void setRotation(org.ogre4j.IRadian rad) {
        _setRotation__RadianR(this.object.pointer, rad.getInstancePointer().pointer);
    }

    private native void _setRotation__RadianR(long _pointer_, long rad);

    /** **/
    public org.ogre4j.IRadian getRotation() {
         return new org.ogre4j.Radian(new InstancePointer(_getRotation_const(this.object.pointer)));
    }

    private native long _getRotation_const(long _pointer_);

    /** 
    Internal method for notifying the particle of it's owner. **/
    public void _notifyOwner(org.ogre4j.IParticleSystem owner) {
        __notifyOwner__ParticleSystemp(this.object.pointer, owner.getInstancePointer().pointer);
    }

    private native void __notifyOwner__ParticleSystemp(long _pointer_, long owner);

    /** 
    Internal method for notifying the particle of it's optional visual data. **/
    public void _notifyVisualData(org.ogre4j.IParticleVisualData vis) {
        __notifyVisualData__ParticleVisualDatap(this.object.pointer, vis.getInstancePointer().pointer);
    }

    private native void __notifyVisualData__ParticleVisualDatap(long _pointer_, long vis);

    /** **/
    public org.ogre4j.IParticleVisualData getVisualData() {
         return new org.ogre4j.ParticleVisualData(new InstancePointer(_getVisualData_const(this.object.pointer)));
    }

    private native long _getVisualData_const(long _pointer_);

    /** **/
    public void resetDimensions() {
        _resetDimensions(this.object.pointer);
    }

    private native void _resetDimensions(long _pointer_);

    /** **/
    public boolean getmOwnDimensions() {
         return _getmOwnDimensions(this.object.pointer);
    }

    private native boolean _getmOwnDimensions(long _pointer_);

    /** **/
    public void setmOwnDimensions(boolean _jni_value_) {
        _setmOwnDimensions(this.object.pointer, _jni_value_);
    }

    private native void _setmOwnDimensions(long _pointer_, boolean _jni_value_);

    /** **/
    public float getmWidth() {
         return _getmWidth(this.object.pointer);
    }

    private native float _getmWidth(long _pointer_);

    /** **/
    public void setmWidth(float _jni_value_) {
        _setmWidth(this.object.pointer, _jni_value_);
    }

    private native void _setmWidth(long _pointer_, float _jni_value_);

    /** **/
    public float getmHeight() {
         return _getmHeight(this.object.pointer);
    }

    private native float _getmHeight(long _pointer_);

    /** **/
    public void setmHeight(float _jni_value_) {
        _setmHeight(this.object.pointer, _jni_value_);
    }

    private native void _setmHeight(long _pointer_, float _jni_value_);

    /** **/
    public void getrotation(org.ogre4j.IRadian returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getrotation(this.object.pointer)), false);
    }

    private native long _getrotation(long _pointer_);

    /** **/
    public void setrotation(org.ogre4j.IRadian _jni_value_) {
        _setrotation(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrotation(long _pointer_, long _jni_value_);

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getposition(this.object.pointer)), false);
    }

    private native long _getposition(long _pointer_);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_) {
        _setposition(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setposition(long _pointer_, long _jni_value_);

    /** **/
    public void getdirection(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getdirection(this.object.pointer)), false);
    }

    private native long _getdirection(long _pointer_);

    /** **/
    public void setdirection(org.ogre4j.IVector3 _jni_value_) {
        _setdirection(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setdirection(long _pointer_, long _jni_value_);

    /** **/
    public void getcolour(org.ogre4j.IColourValue returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getcolour(this.object.pointer)), false);
    }

    private native long _getcolour(long _pointer_);

    /** **/
    public void setcolour(org.ogre4j.IColourValue _jni_value_) {
        _setcolour(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setcolour(long _pointer_, long _jni_value_);

    /** **/
    public float gettimeToLive() {
         return _gettimeToLive(this.object.pointer);
    }

    private native float _gettimeToLive(long _pointer_);

    /** **/
    public void settimeToLive(float _jni_value_) {
        _settimeToLive(this.object.pointer, _jni_value_);
    }

    private native void _settimeToLive(long _pointer_, float _jni_value_);

    /** **/
    public float gettotalTimeToLive() {
         return _gettotalTimeToLive(this.object.pointer);
    }

    private native float _gettotalTimeToLive(long _pointer_);

    /** **/
    public void settotalTimeToLive(float _jni_value_) {
        _settotalTimeToLive(this.object.pointer, _jni_value_);
    }

    private native void _settotalTimeToLive(long _pointer_, float _jni_value_);

    /** **/
    public void getrotationSpeed(org.ogre4j.IRadian returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getrotationSpeed(this.object.pointer)), false);
    }

    private native long _getrotationSpeed(long _pointer_);

    /** **/
    public void setrotationSpeed(org.ogre4j.IRadian _jni_value_) {
        _setrotationSpeed(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrotationSpeed(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.Particle.ParticleType getparticleType() {
         return org.ogre4j.Particle.ParticleType.toEnum(_getparticleType(this.object.pointer));
    }

    private native int _getparticleType(long _pointer_);

    /** **/
    public void setparticleType(org.ogre4j.Particle.ParticleType _jni_value_) {
        _setparticleType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setparticleType(long _pointer_, int _jni_value_);

}
