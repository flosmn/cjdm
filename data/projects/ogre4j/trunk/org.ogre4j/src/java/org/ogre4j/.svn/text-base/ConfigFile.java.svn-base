/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ConfigFile extends org.xbig.base.NativeObject implements org.ogre4j.IConfigFile {
static { System.loadLibrary("ogre4j");}
public static class SettingsMultiMap extends org.xbig.base.NativeObject implements org.ogre4j.IConfigFile.ISettingsMultiMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SettingsMultiMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SettingsMultiMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SettingsMultiMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SettingsMultiMap() {
         super( new org.xbig.base.InstancePointer(__createSettingsMultiMap()), false);
    }

    private native static long __createSettingsMultiMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
public static class SettingsIterator extends org.xbig.base.NativeObject implements org.ogre4j.IConfigFile.ISettingsIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SettingsIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SettingsIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SettingsIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SettingsIterator(org.ogre4j.IConfigFile.ISettingsMultiMap c) {
         super( new org.xbig.base.InstancePointer(__createSettingsIterator__Ogre_ConfigFile_SettingsMultiMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createSettingsIterator__Ogre_ConfigFile_SettingsMultiMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public String getNext() {
         return _getNext(this.object.pointer);
    }

    private native String _getNext(long _pointer_);

    /** **/
    public String peekNextValue() {
         return _peekNextValue(this.object.pointer);
    }

    private native String _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IConfigFile.ISettingsIterator operatorAssignment(org.ogre4j.IConfigFile.ISettingsIterator rhs) {
         return new org.ogre4j.ConfigFile.SettingsIterator(new InstancePointer(_operatorAssignment___Ogre_ConfigFile_SettingsIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_ConfigFile_SettingsIteratorr(long _pointer_, long rhs);

    /** **/
    public StringPointer peekNextValuePtr() {
         return new StringPointer(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class SettingsBySection extends org.xbig.base.NativeObject implements org.ogre4j.IConfigFile.ISettingsBySection {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SettingsBySection(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SettingsBySection(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SettingsBySection(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SettingsBySection() {
         super( new org.xbig.base.InstancePointer(__createSettingsBySection()), false);
    }

    private native static long __createSettingsBySection();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IConfigFile.ISettingsMultiMap get(String key) {
         return new org.ogre4j.ConfigFile.SettingsMultiMap(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IConfigFile.ISettingsMultiMap value) {
        _insert__sROgre_ConfigFile_SettingsMultiMapp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ConfigFile_SettingsMultiMapp(long _pointer_, String key, long value);

}
public static class SectionIterator extends org.xbig.base.NativeObject implements org.ogre4j.IConfigFile.ISectionIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SectionIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SectionIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SectionIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SectionIterator(org.ogre4j.IConfigFile.ISettingsBySection c) {
         super( new org.xbig.base.InstancePointer(__createSectionIterator__Ogre_ConfigFile_SettingsBySectionr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createSectionIterator__Ogre_ConfigFile_SettingsBySectionr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IConfigFile.ISettingsMultiMap getNext() {
         return new org.ogre4j.ConfigFile.SettingsMultiMap(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IConfigFile.ISettingsMultiMap peekNextValue() {
         return new org.ogre4j.ConfigFile.SettingsMultiMap(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IConfigFile.ISectionIterator operatorAssignment(org.ogre4j.IConfigFile.ISectionIterator rhs) {
         return new org.ogre4j.ConfigFile.SectionIterator(new InstancePointer(_operatorAssignment___Ogre_ConfigFile_SectionIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_ConfigFile_SectionIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IConfigFile.ISettingsMultiMap> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IConfigFile.ISettingsMultiMap>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ConfigFile(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ConfigFile(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ConfigFile(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ConfigFile() {
         super( new org.xbig.base.InstancePointer(__createConfigFile()), false);
    }

    private native static long __createConfigFile();

    /** **/
    public void load(String filename, String separators, boolean trimWhitespace) {
        _load__StringRStringRbv(this.object.pointer, filename,  separators,  trimWhitespace);
    }

    private native void _load__StringRStringRbv(long _pointer_, String filename, String separators, boolean trimWhitespace);

    /** **/
    public void load(String filename, String resourceGroup, String separators, boolean trimWhitespace) {
        _load__StringRStringRStringRbv(this.object.pointer, filename,  resourceGroup,  separators,  trimWhitespace);
    }

    private native void _load__StringRStringRStringRbv(long _pointer_, String filename, String resourceGroup, String separators, boolean trimWhitespace);

    /** **/
    public void load(org.ogre4j.IDataStreamPtr stream, String separators, boolean trimWhitespace) {
        _load__DataStreamPtrRStringRbv(this.object.pointer, stream.getInstancePointer().pointer,  separators,  trimWhitespace);
    }

    private native void _load__DataStreamPtrRStringRbv(long _pointer_, long stream, String separators, boolean trimWhitespace);

    /** **/
    public void loadDirect(String filename, String separators, boolean trimWhitespace) {
        _loadDirect__StringRStringRbv(this.object.pointer, filename,  separators,  trimWhitespace);
    }

    private native void _loadDirect__StringRStringRbv(long _pointer_, String filename, String separators, boolean trimWhitespace);

    /** **/
    public void loadFromResourceSystem(String filename, String resourceGroup, String separators, boolean trimWhitespace) {
        _loadFromResourceSystem__StringRStringRStringRbv(this.object.pointer, filename,  resourceGroup,  separators,  trimWhitespace);
    }

    private native void _loadFromResourceSystem__StringRStringRStringRbv(long _pointer_, String filename, String resourceGroup, String separators, boolean trimWhitespace);

    /** 
    Gets the first setting from the file with the named key. **/
    public String getSetting(String key, String section, String defaultValue) {
         return _getSetting__StringRStringRStringR_const(this.object.pointer, key,  section,  defaultValue);
    }

    private native String _getSetting__StringRStringRStringR_const(long _pointer_, String key, String section, String defaultValue);

    /** 
    Gets all settings from the file with the named key. **/
    public void getMultiSetting(org.ogre4j.IStringVector returnValue, String key, String section) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getMultiSetting__StringRStringR_const(this.object.pointer, key,  section)), false);
    }

    private native long _getMultiSetting__StringRStringR_const(long _pointer_, String key, String section);

    /** 
    Get an iterator over all the available sections in the config file **/
    public void getSectionIterator(org.ogre4j.IConfigFile.ISectionIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getSectionIterator(this.object.pointer)), false);
    }

    private native long _getSectionIterator(long _pointer_);

    /** 
    Get an iterator over all the available settings in a section **/
    public void getSettingsIterator(org.ogre4j.IConfigFile.ISettingsIterator returnValue, String section) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getSettingsIterator__StringR(this.object.pointer, section)), false);
    }

    private native long _getSettingsIterator__StringR(long _pointer_, String section);

    /** 
    Clear the settings **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

}
