/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ITangentSpaceCalc extends INativeObject {

public static interface IIndexRemap extends INativeObject {

    /** **/
    public int getindexSet();

    /** **/
    public void setindexSet(int _jni_value_);

    /** **/
    public int getfaceIndex();

    /** **/
    public void setfaceIndex(int _jni_value_);

    /** **/
    public void getsplitVertex(org.ogre4j.ITangentSpaceCalc.IVertexSplit returnValue);

    /** **/
    public void setsplitVertex(org.ogre4j.ITangentSpaceCalc.IVertexSplit _jni_value_);

}
public static interface IResult extends INativeObject {

    /** **/
    public void getvertexSplits(org.ogre4j.ITangentSpaceCalc.IVertexSplits returnValue);

    /** **/
    public void setvertexSplits(org.ogre4j.ITangentSpaceCalc.IVertexSplits _jni_value_);

    /** **/
    public void getindexesRemapped(org.ogre4j.ITangentSpaceCalc.IIndexRemapList returnValue);

    /** **/
    public void setindexesRemapped(org.ogre4j.ITangentSpaceCalc.IIndexRemapList _jni_value_);

}
public static interface IVertexInfo extends INativeObject {

    /** **/
    public void getpos(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setpos(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getnorm(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setnorm(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getuv(org.ogre4j.IVector2 returnValue);

    /** **/
    public void setuv(org.ogre4j.IVector2 _jni_value_);

    /** **/
    public void gettangent(org.ogre4j.IVector3 returnValue);

    /** **/
    public void settangent(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getbinormal(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setbinormal(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public int getparity();

    /** **/
    public void setparity(int _jni_value_);

    /** **/
    public int getoppositeParityIndex();

    /** **/
    public void setoppositeParityIndex(int _jni_value_);

}
public interface IVertexSplit extends INativeObject, org.std.Ipair< Integer, Integer > {

    /** **/
    public int getfirst();

    /** **/
    public void setfirst(int _jni_value_);

    /** **/
    public int getsecond();

    /** **/
    public void setsecond(int _jni_value_);

}
public interface IIndexRemapList extends INativeObject, org.std.Ilist< org.ogre4j.ITangentSpaceCalc.IIndexRemap > {

    /** **/
    public void assign(int num, org.ogre4j.ITangentSpaceCalc.IIndexRemap val);

    /** **/
    public org.ogre4j.ITangentSpaceCalc.IIndexRemap back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ITangentSpaceCalc.IIndexRemap front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.ITangentSpaceCalc.IIndexRemap val);

    /** **/
    public void push_front(org.ogre4j.ITangentSpaceCalc.IIndexRemap val);

;

    /** **/
    public void reverse();

    /** **/
    public int size();

;

}
public interface IVertexSplits extends INativeObject, org.std.Ilist< org.ogre4j.ITangentSpaceCalc.IVertexSplit > {

    /** **/
    public void assign(int num, org.ogre4j.ITangentSpaceCalc.IVertexSplit val);

    /** **/
    public org.ogre4j.ITangentSpaceCalc.IVertexSplit back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ITangentSpaceCalc.IVertexSplit front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.ITangentSpaceCalc.IVertexSplit val);

    /** **/
    public void push_front(org.ogre4j.ITangentSpaceCalc.IVertexSplit val);

    /** **/
    public void remove(org.ogre4j.ITangentSpaceCalc.IVertexSplit val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IIndexDataList extends INativeObject, org.std.Ivector< org.ogre4j.IIndexData > {

    /** **/
    public void assign(int num, org.ogre4j.IIndexData val);

    /** **/
    public org.ogre4j.IIndexData at(int loc);

    /** **/
    public org.ogre4j.IIndexData back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IIndexData front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IIndexData val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IOpTypeList extends INativeObject, org.std.Ivector< org.ogre4j.RenderOperation.OperationType > {

    /** **/
    public void assign(int num, org.ogre4j.RenderOperation.OperationType val);

    /** **/
    public org.ogre4j.RenderOperation.OperationType at(int loc);

    /** **/
    public org.ogre4j.RenderOperation.OperationType back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.RenderOperation.OperationType front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.RenderOperation.OperationType val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IVertexInfoArray extends INativeObject, org.std.Ivector< org.ogre4j.ITangentSpaceCalc.IVertexInfo > {

    /** **/
    public void assign(int num, org.ogre4j.ITangentSpaceCalc.IVertexInfo val);

    /** **/
    public org.ogre4j.ITangentSpaceCalc.IVertexInfo at(int loc);

    /** **/
    public org.ogre4j.ITangentSpaceCalc.IVertexInfo back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ITangentSpaceCalc.IVertexInfo front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ITangentSpaceCalc.IVertexInfo val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** **/
    public void clear();

    /** 
    Set the incoming vertex data (which will be modified) **/
    public void setVertexData(org.ogre4j.IVertexData v_in);

    /** 
    Add a set of index data that references the vertex data. This might be modified if there are vertex splits. **/
    public void addIndexData(org.ogre4j.IIndexData i_in, org.ogre4j.RenderOperation.OperationType opType);

    /** 
    Sets whether to store tangent space parity in the W of a 4-component tangent or not. **/
    public void setStoreParityInW(boolean enabled);

    /** 
    Gets whether to store tangent space parity in the W of a 4-component tangent or not. **/
    public boolean getStoreParityInW();

    /** 
    Sets whether or not to split vertices when a mirrored tangent space transition is detected (matrix parity differs). **/
    public void setSplitMirrored(boolean split);

    /** 
    Gets whether or not to split vertices when a mirrored tangent space transition is detected. **/
    public boolean getSplitMirrored();

    /** 
    Sets whether or not to split vertices when tangent space rotates more than 90 degrees around a vertex. **/
    public void setSplitRotated(boolean split);

    /** 
    Sets whether or not to split vertices when tangent space rotates more than 90 degrees around a vertex. **/
    public boolean getSplitRotated();

    /** 
    Build a tangent space basis from the provided data. **/
    public void build(org.ogre4j.ITangentSpaceCalc.IResult returnValue, org.ogre4j.VertexElementSemantic targetSemantic, int sourceTexCoordSet, int index);

}
