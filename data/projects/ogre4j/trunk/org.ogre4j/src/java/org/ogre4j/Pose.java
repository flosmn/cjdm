/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Pose extends org.xbig.base.NativeObject implements org.ogre4j.IPose {
static { System.loadLibrary("ogre4j");}
public static class VertexOffsetMap extends org.xbig.base.NativeObject implements org.ogre4j.IPose.IVertexOffsetMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexOffsetMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexOffsetMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexOffsetMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexOffsetMap() {
         super( new org.xbig.base.InstancePointer(__createVertexOffsetMap()), false);
    }

    private native static long __createVertexOffsetMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__iR(this.object.pointer, key);
    }

    private native int _count__iR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__iR(this.object.pointer, key);
    }

    private native int _erase__iR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IVector3 get(int key) {
         return new org.ogre4j.Vector3(new InstancePointer(_get__iR(this.object.pointer, key)));
    }

    private native long _get__iR(long _pointer_, int key);

    /** **/
    public void insert(int key, org.ogre4j.IVector3 value) {
        _insert__iROgre_Vector3r(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__iROgre_Vector3r(long _pointer_, int key, long value);

}
public static class VertexOffsetIterator extends org.xbig.base.NativeObject implements org.ogre4j.IPose.IVertexOffsetIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexOffsetIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexOffsetIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexOffsetIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexOffsetIterator(org.ogre4j.IPose.IVertexOffsetMap c) {
         super( new org.xbig.base.InstancePointer(__createVertexOffsetIterator__Ogre_Pose_VertexOffsetMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createVertexOffsetIterator__Ogre_Pose_VertexOffsetMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public void getNext(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNext(this.object.pointer)), false);
    }

    private native long _getNext(long _pointer_);

    /** **/
    public void peekNextValue(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_peekNextValue(this.object.pointer)), false);
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public int peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native int _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IPose.IVertexOffsetIterator operatorAssignment(org.ogre4j.IPose.IVertexOffsetIterator rhs) {
         return new org.ogre4j.Pose.VertexOffsetIterator(new InstancePointer(_operatorAssignment___Ogre_Pose_VertexOffsetIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_Pose_VertexOffsetIteratorr(long _pointer_, long rhs);

    /** **/
    public org.ogre4j.IVector3 peekNextValuePtr() {
         return new org.ogre4j.Vector3(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class ConstVertexOffsetIterator extends org.xbig.base.NativeObject implements org.ogre4j.IPose.IConstVertexOffsetIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ConstVertexOffsetIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ConstVertexOffsetIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ConstVertexOffsetIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ConstVertexOffsetIterator(org.ogre4j.IPose.IVertexOffsetMap c) {
         super( new org.xbig.base.InstancePointer(__createConstVertexOffsetIterator__Ogre_Pose_VertexOffsetMapR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createConstVertexOffsetIterator__Ogre_Pose_VertexOffsetMapR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public void getNext(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNext(this.object.pointer)), false);
    }

    private native long _getNext(long _pointer_);

    /** **/
    public void peekNextValue(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_peekNextValue_const(this.object.pointer)), false);
    }

    private native long _peekNextValue_const(long _pointer_);

    /** **/
    public int peekNextKey() {
         return _peekNextKey_const(this.object.pointer);
    }

    private native int _peekNextKey_const(long _pointer_);

    /** **/
    public org.ogre4j.IPose.IConstVertexOffsetIterator operatorAssignment(org.ogre4j.IPose.IConstVertexOffsetIterator rhs) {
         return new org.ogre4j.Pose.ConstVertexOffsetIterator(new InstancePointer(_operatorAssignment___Ogre_Pose_ConstVertexOffsetIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_Pose_ConstVertexOffsetIteratorr(long _pointer_, long rhs);

    /** **/
    public org.ogre4j.IVector3 peekNextValuePtr() {
         return new org.ogre4j.Vector3(new InstancePointer(_peekNextValuePtr_const(this.object.pointer)));
    }

    private native long _peekNextValuePtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Pose(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Pose(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Pose(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Constructor **/
    public Pose(int target, String name) {
         super( new org.xbig.base.InstancePointer(__createPose__ushortvStringR( target,  name)), false);
    }

    private native static long __createPose__ushortvStringR(int target, String name);

    /** **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** **/
    public int getTarget() {
         return _getTarget_const(this.object.pointer);
    }

    private native int _getTarget_const(long _pointer_);

    /** 
    Adds an offset to a vertex for this pose. **/
    public void addVertex(int index, org.ogre4j.IVector3 offset) {
        _addVertex__ivVector3R(this.object.pointer, index,  offset.getInstancePointer().pointer);
    }

    private native void _addVertex__ivVector3R(long _pointer_, int index, long offset);

    /** 
    Remove a vertex offset. **/
    public void removeVertex(int index) {
        _removeVertex__iv(this.object.pointer, index);
    }

    private native void _removeVertex__iv(long _pointer_, int index);

    /** 
    Clear all vertex offsets. **/
    public void clearVertexOffsets() {
        _clearVertexOffsets(this.object.pointer);
    }

    private native void _clearVertexOffsets(long _pointer_);

    /** **/
    public void getVertexOffsetIterator_const(org.ogre4j.IPose.IConstVertexOffsetIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getVertexOffsetIterator_const_const(this.object.pointer)), false);
    }

    private native long _getVertexOffsetIterator_const_const(long _pointer_);

    /** 
    Gets an iterator over all the vertex offsets. **/
    public void getVertexOffsetIterator(org.ogre4j.IPose.IVertexOffsetIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getVertexOffsetIterator(this.object.pointer)), false);
    }

    private native long _getVertexOffsetIterator(long _pointer_);

    /** 
    Gets a const reference to the vertex offsets. **/
    public org.ogre4j.IPose.IVertexOffsetMap getVertexOffsets() {
         return new org.ogre4j.Pose.VertexOffsetMap(new InstancePointer(_getVertexOffsets_const(this.object.pointer)));
    }

    private native long _getVertexOffsets_const(long _pointer_);

    /** 
    Get a hardware vertex buffer version of the vertex offsets. **/
    public org.ogre4j.IHardwareVertexBufferSharedPtr _getHardwareVertexBuffer(int numVertices) {
         return new org.ogre4j.HardwareVertexBufferSharedPtr(new InstancePointer(__getHardwareVertexBuffer__iv_const(this.object.pointer, numVertices)));
    }

    private native long __getHardwareVertexBuffer__iv_const(long _pointer_, int numVertices);

    /** 
    Clone this pose and create another one configured exactly the same way (only really useful for cloning holders of this class). **/
    public org.ogre4j.IPose clone() {
         return new org.ogre4j.Pose(new InstancePointer(_clone_const(this.object.pointer)));
    }

    private native long _clone_const(long _pointer_);

}
