/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IGpuProgram extends INativeObject, org.ogre4j.IResource {

public static interface ICmdAdjacency extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdManualNamedConstsFile extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdMorph extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdPose extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdSkeletal extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdSyntax extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdType extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
public static interface ICmdVTF extends INativeObject, org.ogre4j.IParamCommand {

    /** **/
    public String doGet(VoidPointer target);

    /** **/
    public void doSet(VoidPointer target, String val);

}
    /** 
    Sets the filename of the source assembly for this program. **/
    public void setSourceFile(String filename);

    /** 
    Sets the source assembly for this program from an in-memory string. **/
    public void setSource(String source);

    /** 
    Gets the syntax code for this program e.g. arbvp1, fp20, vs_1_1 etc **/
    public String getSyntaxCode();

    /** 
    Sets the syntax code for this program e.g. arbvp1, fp20, vs_1_1 etc **/
    public void setSyntaxCode(String syntax);

    /** 
    Gets the name of the file used as source for this program. **/
    public String getSourceFile();

    /** 
    Gets the assembler source for this program. **/
    public String getSource();

    /** **/
    public void setType(org.ogre4j.GpuProgramType t);

    /** **/
    public org.ogre4j.GpuProgramType getType();

    /** 
    Returns the  which should be bound to the pipeline. **/
    public org.ogre4j.IGpuProgram _getBindingDelegate();

    /** 
    Returns whether this program can be supported on the current renderer and hardware. **/
    public boolean isSupported();

    /** 
    Creates a new parameters object compatible with this program definition. **/
    public void createParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue);

    /** 
    Sets whether a vertex program includes the required instructions to perform skeletal animation. **/
    public void setSkeletalAnimationIncluded(boolean included);

    /** 
    Returns whether a vertex program includes the required instructions to perform skeletal animation. **/
    public boolean isSkeletalAnimationIncluded();

    /** 
    Sets whether a vertex program includes the required instructions to perform morph animation. **/
    public void setMorphAnimationIncluded(boolean included);

    /** 
    Sets whether a vertex program includes the required instructions to perform pose animation. **/
    public void setPoseAnimationIncluded(int poseCount);

    /** 
    Returns whether a vertex program includes the required instructions to perform morph animation. **/
    public boolean isMorphAnimationIncluded();

    /** 
    Returns whether a vertex program includes the required instructions to perform pose animation. **/
    public boolean isPoseAnimationIncluded();

    /** 
    Returns the number of simultaneous poses the vertex program can blend, for use in pose animation. **/
    public int getNumberOfPosesIncluded();

    /** 
    Sets whether this vertex program requires support for vertex texture fetch from the hardware. **/
    public void setVertexTextureFetchRequired(boolean r);

    /** 
    Returns whether this vertex program requires support for vertex texture fetch from the hardware. **/
    public boolean isVertexTextureFetchRequired();

    /** 
    Sets whether this geometry program requires adjacency information from the input primitives. **/
    public void setAdjacencyInfoRequired(boolean r);

    /** 
    Returns whether this geometry program requires adjacency information from the input primitives. **/
    public boolean isAdjacencyInfoRequired();

    /** 
    Get a reference to the default parameters which are to be used for all uses of this program. **/
    public void getDefaultParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue);

    /** 
    Returns true if default parameters have been set up. **/
    public boolean hasDefaultParameters();

    /** 
    Sets whether a vertex program requires light and material states to be passed to through fixed pipeline low level API rendering calls. **/
    public void setSurfaceAndPassLightStates(boolean state);

    /** 
    Returns whether a vertex program wants light and material states to be passed through fixed pipeline low level API rendering calls **/
    public boolean getPassSurfaceAndLightStates();

    /** 
    Returns a string that specifies the language of the gpu programs as specified in a material script. ie: asm, cg, hlsl, glsl **/
    public String getLanguage();

    /** 
    Did this program encounter a compile error when loading? **/
    public boolean hasCompileError();

    /** 
    Reset a compile error if it occurred, allowing the load to be retried **/
    public void resetCompileError();

    /** 
    Allows you to manually provide a set of named parameter mappings to a program which would not be able to derive named parameters itself. **/
    public void setManualNamedConstants(org.ogre4j.IGpuNamedConstants namedConstants);

    /** **/
    public org.ogre4j.IGpuNamedConstants getNamedConstants();

    /** 
    Specifies the name of a file from which to load named parameters mapping for a program which would not be able to derive named parameters itself. **/
    public void setManualNamedConstantsFile(String paramDefFile);

    /** 
    Gets the name of a file from which to load named parameters mapping for a program which would not be able to derive named parameters itself. **/
    public String getManualNamedConstantsFile();

    /** 
    Get the full list of named constants. **/
    public org.ogre4j.IGpuNamedConstants getConstantDefinitions();

}
