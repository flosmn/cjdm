/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Quaternion extends org.xbig.base.NativeObject implements org.ogre4j.IQuaternion {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Quaternion(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Quaternion(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Quaternion(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Quaternion(float fW, float fX, float fY, float fZ) {
         super( new org.xbig.base.InstancePointer(__createQuaternion__RealvRealvRealvRealv( fW,  fX,  fY,  fZ)), false);
    }

    private native static long __createQuaternion__RealvRealvRealvRealv(float fW, float fX, float fY, float fZ);

    /** **/
    public Quaternion(org.ogre4j.IMatrix3 rot) {
         super( new org.xbig.base.InstancePointer(__createQuaternion__Matrix3R( rot.getInstancePointer().pointer)), false);
    }

    private native static long __createQuaternion__Matrix3R(long rot);

    /** **/
    public Quaternion(org.ogre4j.IRadian rfAngle, org.ogre4j.IVector3 rkAxis) {
         super( new org.xbig.base.InstancePointer(__createQuaternion__RadianRVector3R( rfAngle.getInstancePointer().pointer,  rkAxis.getInstancePointer().pointer)), false);
    }

    private native static long __createQuaternion__RadianRVector3R(long rfAngle, long rkAxis);

    /** **/
    public Quaternion(org.ogre4j.IVector3 xaxis, org.ogre4j.IVector3 yaxis, org.ogre4j.IVector3 zaxis) {
         super( new org.xbig.base.InstancePointer(__createQuaternion__Vector3RVector3RVector3R( xaxis.getInstancePointer().pointer,  yaxis.getInstancePointer().pointer,  zaxis.getInstancePointer().pointer)), false);
    }

    private native static long __createQuaternion__Vector3RVector3RVector3R(long xaxis, long yaxis, long zaxis);

    /** **/
    public Quaternion(org.ogre4j.IVector3 akAxis) {
         super( new org.xbig.base.InstancePointer(__createQuaternion__Vector3P( akAxis.getInstancePointer().pointer)), false);
    }

    private native static long __createQuaternion__Vector3P(long akAxis);

    /** **/
    public Quaternion(FloatPointer valptr) {
         super( new org.xbig.base.InstancePointer(__createQuaternion__Realp( valptr.object.pointer)), false);
    }

    private native static long __createQuaternion__Realp(long valptr);

    /** **/
    public float operatorIndex_const(int i) {
         return _operatorIndex_const__iV_const(this.object.pointer, i);
    }

    private native float _operatorIndex_const__iV_const(long _pointer_, int i);

    /** **/
    public FloatPointer operatorIndex(int i) {
         return new FloatPointer(new InstancePointer(_operatorIndex__iV(this.object.pointer, i)));
    }

    private native long _operatorIndex__iV(long _pointer_, int i);

    /** **/
    public FloatPointer ptr() {
         return new FloatPointer(new InstancePointer(_ptr(this.object.pointer)));
    }

    private native long _ptr(long _pointer_);

    /** **/
    public FloatPointer ptr_const() {
         return new FloatPointer(new InstancePointer(_ptr_const_const(this.object.pointer)));
    }

    private native long _ptr_const_const(long _pointer_);

    /** **/
    public void FromRotationMatrix(org.ogre4j.IMatrix3 kRot) {
        _FromRotationMatrix__Matrix3R(this.object.pointer, kRot.getInstancePointer().pointer);
    }

    private native void _FromRotationMatrix__Matrix3R(long _pointer_, long kRot);

    /** **/
    public void ToRotationMatrix(org.ogre4j.IMatrix3 kRot) {
        _ToRotationMatrix__Matrix3r_const(this.object.pointer, kRot.getInstancePointer().pointer);
    }

    private native void _ToRotationMatrix__Matrix3r_const(long _pointer_, long kRot);

    /** **/
    public void FromAngleAxis(org.ogre4j.IRadian rfAngle, org.ogre4j.IVector3 rkAxis) {
        _FromAngleAxis__RadianRVector3R(this.object.pointer, rfAngle.getInstancePointer().pointer,  rkAxis.getInstancePointer().pointer);
    }

    private native void _FromAngleAxis__RadianRVector3R(long _pointer_, long rfAngle, long rkAxis);

    /** **/
    public void ToAngleAxis(org.ogre4j.IRadian rfAngle, org.ogre4j.IVector3 rkAxis) {
        _ToAngleAxis__RadianrVector3r_const(this.object.pointer, rfAngle.getInstancePointer().pointer,  rkAxis.getInstancePointer().pointer);
    }

    private native void _ToAngleAxis__RadianrVector3r_const(long _pointer_, long rfAngle, long rkAxis);

    /** **/
    public void ToAngleAxis(org.ogre4j.IDegree dAngle, org.ogre4j.IVector3 rkAxis) {
        _ToAngleAxis__DegreerVector3r_const(this.object.pointer, dAngle.getInstancePointer().pointer,  rkAxis.getInstancePointer().pointer);
    }

    private native void _ToAngleAxis__DegreerVector3r_const(long _pointer_, long dAngle, long rkAxis);

    /** **/
    public void FromAxes(org.ogre4j.IVector3 akAxis) {
        _FromAxes__Vector3P(this.object.pointer, akAxis.getInstancePointer().pointer);
    }

    private native void _FromAxes__Vector3P(long _pointer_, long akAxis);

    /** **/
    public void FromAxes(org.ogre4j.IVector3 xAxis, org.ogre4j.IVector3 yAxis, org.ogre4j.IVector3 zAxis) {
        _FromAxes__Vector3RVector3RVector3R(this.object.pointer, xAxis.getInstancePointer().pointer,  yAxis.getInstancePointer().pointer,  zAxis.getInstancePointer().pointer);
    }

    private native void _FromAxes__Vector3RVector3RVector3R(long _pointer_, long xAxis, long yAxis, long zAxis);

    /** **/
    public void ToAxes(org.ogre4j.IVector3 akAxis) {
        _ToAxes__Vector3p_const(this.object.pointer, akAxis.getInstancePointer().pointer);
    }

    private native void _ToAxes__Vector3p_const(long _pointer_, long akAxis);

    /** **/
    public void ToAxes(org.ogre4j.IVector3 xAxis, org.ogre4j.IVector3 yAxis, org.ogre4j.IVector3 zAxis) {
        _ToAxes__Vector3rVector3rVector3r_const(this.object.pointer, xAxis.getInstancePointer().pointer,  yAxis.getInstancePointer().pointer,  zAxis.getInstancePointer().pointer);
    }

    private native void _ToAxes__Vector3rVector3rVector3r_const(long _pointer_, long xAxis, long yAxis, long zAxis);

    /** **/
    public void xAxis(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_xAxis_const(this.object.pointer)), false);
    }

    private native long _xAxis_const(long _pointer_);

    /** **/
    public void yAxis(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_yAxis_const(this.object.pointer)), false);
    }

    private native long _yAxis_const(long _pointer_);

    /** **/
    public void zAxis(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_zAxis_const(this.object.pointer)), false);
    }

    private native long _zAxis_const(long _pointer_);

    /** **/
    public org.ogre4j.IQuaternion operatorAssignment(org.ogre4j.IQuaternion rkQ) {
         return new org.ogre4j.Quaternion(new InstancePointer(_operatorAssignment__QuaternionR(this.object.pointer, rkQ.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__QuaternionR(long _pointer_, long rkQ);

    /** **/
    public void operatorAddition(org.ogre4j.IQuaternion returnValue, org.ogre4j.IQuaternion rkQ) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorAddition__QuaternionR_const(this.object.pointer, rkQ.getInstancePointer().pointer)), false);
    }

    private native long _operatorAddition__QuaternionR_const(long _pointer_, long rkQ);

    /** **/
    public void operatorSubtraction(org.ogre4j.IQuaternion returnValue, org.ogre4j.IQuaternion rkQ) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction__QuaternionR_const(this.object.pointer, rkQ.getInstancePointer().pointer)), false);
    }

    private native long _operatorSubtraction__QuaternionR_const(long _pointer_, long rkQ);

    /** **/
    public void operatorMultiplication(org.ogre4j.IQuaternion returnValue, org.ogre4j.IQuaternion rkQ) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__QuaternionR_const(this.object.pointer, rkQ.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__QuaternionR_const(long _pointer_, long rkQ);

    /** **/
    public void operatorMultiplication(org.ogre4j.IQuaternion returnValue, float fScalar) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Realv_const(this.object.pointer, fScalar)), false);
    }

    private native long _operatorMultiplication__Realv_const(long _pointer_, float fScalar);

    /** **/
    public void operatorSubtraction(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction_const(this.object.pointer)), false);
    }

    private native long _operatorSubtraction_const(long _pointer_);

    /** **/
    public boolean operatorEqual(org.ogre4j.IQuaternion rhs) {
         return _operatorEqual__QuaternionR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__QuaternionR_const(long _pointer_, long rhs);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IQuaternion rhs) {
         return _operatorNotEqual__QuaternionR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__QuaternionR_const(long _pointer_, long rhs);

    /** **/
    public float Dot(org.ogre4j.IQuaternion rkQ) {
         return _Dot__QuaternionR_const(this.object.pointer, rkQ.getInstancePointer().pointer);
    }

    private native float _Dot__QuaternionR_const(long _pointer_, long rkQ);

    /** **/
    public float Norm() {
         return _Norm_const(this.object.pointer);
    }

    private native float _Norm_const(long _pointer_);

    /** **/
    public float normalise() {
         return _normalise(this.object.pointer);
    }

    private native float _normalise(long _pointer_);

    /** **/
    public void Inverse(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_Inverse_const(this.object.pointer)), false);
    }

    private native long _Inverse_const(long _pointer_);

    /** **/
    public void UnitInverse(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_UnitInverse_const(this.object.pointer)), false);
    }

    private native long _UnitInverse_const(long _pointer_);

    /** **/
    public void Exp(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_Exp_const(this.object.pointer)), false);
    }

    private native long _Exp_const(long _pointer_);

    /** **/
    public void Log(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_Log_const(this.object.pointer)), false);
    }

    private native long _Log_const(long _pointer_);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rkVector) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Vector3R_const(this.object.pointer, rkVector.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__Vector3R_const(long _pointer_, long rkVector);

    /** 
    Calculate the local roll element of this quaternion. **/
    public void getRoll(org.ogre4j.IRadian returnValue, boolean reprojectAxis) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getRoll__bv_const(this.object.pointer, reprojectAxis)), false);
    }

    private native long _getRoll__bv_const(long _pointer_, boolean reprojectAxis);

    /** 
    Calculate the local pitch element of this quaternion **/
    public void getPitch(org.ogre4j.IRadian returnValue, boolean reprojectAxis) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getPitch__bv_const(this.object.pointer, reprojectAxis)), false);
    }

    private native long _getPitch__bv_const(long _pointer_, boolean reprojectAxis);

    /** 
    Calculate the local yaw element of this quaternion **/
    public void getYaw(org.ogre4j.IRadian returnValue, boolean reprojectAxis) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getYaw__bv_const(this.object.pointer, reprojectAxis)), false);
    }

    private native long _getYaw__bv_const(long _pointer_, boolean reprojectAxis);

    /** **/
    public boolean equals(org.ogre4j.IQuaternion rhs, org.ogre4j.IRadian tolerance) {
         return _equals__QuaternionRRadianR_const(this.object.pointer, rhs.getInstancePointer().pointer,  tolerance.getInstancePointer().pointer);
    }

    private native boolean _equals__QuaternionRRadianR_const(long _pointer_, long rhs, long tolerance);

    /** **/
    public static void Slerp(org.ogre4j.IQuaternion returnValue, float fT, org.ogre4j.IQuaternion rkP, org.ogre4j.IQuaternion rkQ, boolean shortestPath) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_Slerp__RealvQuaternionRQuaternionRbv( fT,  rkP.getInstancePointer().pointer,  rkQ.getInstancePointer().pointer,  shortestPath)), false);
    }

    private native static long _Slerp__RealvQuaternionRQuaternionRbv(float fT, long rkP, long rkQ, boolean shortestPath);

    /** **/
    public static void SlerpExtraSpins(org.ogre4j.IQuaternion returnValue, float fT, org.ogre4j.IQuaternion rkP, org.ogre4j.IQuaternion rkQ, int iExtraSpins) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_SlerpExtraSpins__RealvQuaternionRQuaternionRiv( fT,  rkP.getInstancePointer().pointer,  rkQ.getInstancePointer().pointer,  iExtraSpins)), false);
    }

    private native static long _SlerpExtraSpins__RealvQuaternionRQuaternionRiv(float fT, long rkP, long rkQ, int iExtraSpins);

    /** **/
    public static void Intermediate(org.ogre4j.IQuaternion rkQ0, org.ogre4j.IQuaternion rkQ1, org.ogre4j.IQuaternion rkQ2, org.ogre4j.IQuaternion rka, org.ogre4j.IQuaternion rkB) {
        _Intermediate__QuaternionRQuaternionRQuaternionRQuaternionrQuaternionr( rkQ0.getInstancePointer().pointer,  rkQ1.getInstancePointer().pointer,  rkQ2.getInstancePointer().pointer,  rka.getInstancePointer().pointer,  rkB.getInstancePointer().pointer);
    }

    private native static void _Intermediate__QuaternionRQuaternionRQuaternionRQuaternionrQuaternionr(long rkQ0, long rkQ1, long rkQ2, long rka, long rkB);

    /** **/
    public static void Squad(org.ogre4j.IQuaternion returnValue, float fT, org.ogre4j.IQuaternion rkP, org.ogre4j.IQuaternion rkA, org.ogre4j.IQuaternion rkB, org.ogre4j.IQuaternion rkQ, boolean shortestPath) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_Squad__RealvQuaternionRQuaternionRQuaternionRQuaternionRbv( fT,  rkP.getInstancePointer().pointer,  rkA.getInstancePointer().pointer,  rkB.getInstancePointer().pointer,  rkQ.getInstancePointer().pointer,  shortestPath)), false);
    }

    private native static long _Squad__RealvQuaternionRQuaternionRQuaternionRQuaternionRbv(float fT, long rkP, long rkA, long rkB, long rkQ, boolean shortestPath);

    /** **/
    public static void nlerp(org.ogre4j.IQuaternion returnValue, float fT, org.ogre4j.IQuaternion rkP, org.ogre4j.IQuaternion rkQ, boolean shortestPath) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_nlerp__RealvQuaternionRQuaternionRbv( fT,  rkP.getInstancePointer().pointer,  rkQ.getInstancePointer().pointer,  shortestPath)), false);
    }

    private native static long _nlerp__RealvQuaternionRQuaternionRbv(float fT, long rkP, long rkQ, boolean shortestPath);

    /** **/
    public static float getms_fEpsilon() {
         return _getms_fEpsilon();
    }

    private native static float _getms_fEpsilon();

    /** **/
    public static org.ogre4j.IQuaternion getZERO() {
         return new org.ogre4j.Quaternion(new InstancePointer(_getZERO()));
    }

    private native static long _getZERO();

    /** **/
    public static org.ogre4j.IQuaternion getIDENTITY() {
         return new org.ogre4j.Quaternion(new InstancePointer(_getIDENTITY()));
    }

    private native static long _getIDENTITY();

    /** **/
    public float getw() {
         return _getw(this.object.pointer);
    }

    private native float _getw(long _pointer_);

    /** **/
    public void setw(float _jni_value_) {
        _setw(this.object.pointer, _jni_value_);
    }

    private native void _setw(long _pointer_, float _jni_value_);

    /** **/
    public float getx() {
         return _getx(this.object.pointer);
    }

    private native float _getx(long _pointer_);

    /** **/
    public void setx(float _jni_value_) {
        _setx(this.object.pointer, _jni_value_);
    }

    private native void _setx(long _pointer_, float _jni_value_);

    /** **/
    public float gety() {
         return _gety(this.object.pointer);
    }

    private native float _gety(long _pointer_);

    /** **/
    public void sety(float _jni_value_) {
        _sety(this.object.pointer, _jni_value_);
    }

    private native void _sety(long _pointer_, float _jni_value_);

    /** **/
    public float getz() {
         return _getz(this.object.pointer);
    }

    private native float _getz(long _pointer_);

    /** **/
    public void setz(float _jni_value_) {
        _setz(this.object.pointer, _jni_value_);
    }

    private native void _setz(long _pointer_, float _jni_value_);

}
