/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IResource extends INativeObject, org.ogre4j.IStringInterface, org.ogre4j.IResourceAllocatedObject {

public static interface IListener extends INativeObject {

    /** 
    Callback to indicate that background loading has completed. **/
    public void backgroundLoadingComplete(org.ogre4j.IResource a1);

    /** 
    Callback to indicate that background preparing has completed. **/
    public void backgroundPreparingComplete(org.ogre4j.IResource a1);

}
public interface IListenerList extends INativeObject, org.std.Ilist< org.ogre4j.IResource.IListener > {

    /** **/
    public void assign(int num, org.ogre4j.IResource.IListener val);

    /** **/
    public org.ogre4j.IResource.IListener back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IResource.IListener front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IResource.IListener val);

    /** **/
    public void push_front(org.ogre4j.IResource.IListener val);

    /** **/
    public void remove(org.ogre4j.IResource.IListener val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
    /** 
    Prepares the resource for load, if it is not already. One can call  before , but this is not required as  will call  itself, if needed. When OGRE_THREAD_SUPPORT==1 both  and  are thread-safe. When OGRE_THREAD_SUPPORT==2 however, only  is thread-safe. The reason for this function is to allow a background thread to do some of the loading work, without requiring the whole render system to be thread-safe. The background thread would call  while the main render loop would later call . So long as  remains thread-safe, subclasses can arbitrarily split the work of loading a resource between  and . It is best to try and do as much work in , however, since this will leave less work for the main render thread to do and thus increase FPS. **/
    public void prepare();

    /** 
    Loads the resource, if it is not already. **/
    public void load(boolean backgroundThread);

    /** 
    Reloads the resource, if it is already loaded. **/
    public void reload();

    /** 
    Returns true if the  is reloadable, false otherwise. **/
    public boolean isReloadable();

    /** 
    Is this resource manually loaded? **/
    public boolean isManuallyLoaded();

    /** 
    Unloads the resource; this is not permanent, the resource can be reloaded later if required. **/
    public void unload();

    /** 
    Retrieves info about the size of the resource. **/
    public int getSize();

    /** 
    'Touches' the resource to indicate it has been used. **/
    public void touch();

    /** 
    Gets resource name. **/
    public String getName();

    /** **/
    public long getHandle();

    /** 
    Returns true if the  has been prepared, false otherwise. **/
    public boolean isPrepared();

    /** 
    Returns true if the  has been loaded, false otherwise. **/
    public boolean isLoaded();

    /** 
    Returns whether the resource is currently in the process of background loading. **/
    public boolean isLoading();

    /** 
    Returns the current loading state. **/
    public org.ogre4j.Resource.LoadingState getLoadingState();

    /** 
    Returns whether this  has been earmarked for background loading. **/
    public boolean isBackgroundLoaded();

    /** 
    Tells the resource whether it is background loaded or not. **/
    public void setBackgroundLoaded(boolean bl);

    /** 
    Escalates the loading of a background loaded resource. **/
    public void escalateLoading();

    /** 
    Register a listener on this resource. **/
    public void addListener(org.ogre4j.IResource.IListener lis);

    /** 
    Remove a listener on this resource. **/
    public void removeListener(org.ogre4j.IResource.IListener lis);

    /** **/
    public String getGroup();

    /** 
    Change the resource group ownership of a . **/
    public void changeGroupOwnership(String newGroup);

    /** **/
    public org.ogre4j.IResourceManager getCreator();

    /** 
    Get the origin of this resource, e.g. a script file name. **/
    public String getOrigin();

    /** **/
    public void _notifyOrigin(String origin);

    /** 
    Returns the number of times this resource has changed state, which generally means the number of times it has been loaded. Objects that build derived data based on the resource can check this value against a copy they kept last time they built this derived data, in order to know whether it needs rebuilding. This is a nice way of monitoring changes without having a tightly-bound callback. **/
    public int getStateCount();

    /** 
    Manually mark the state of this resource as having been changed. **/
    public void _dirtyState();

    /** 
    Firing of background loading complete event **/
    public void _fireBackgroundLoadingComplete();

    /** 
    Firing of background preparing complete event **/
    public void _fireBackgroundPreparingComplete();

}
