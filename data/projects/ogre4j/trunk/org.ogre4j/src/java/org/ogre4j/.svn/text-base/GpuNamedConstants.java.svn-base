/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class GpuNamedConstants extends org.xbig.base.NativeObject implements org.ogre4j.IGpuNamedConstants {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GpuNamedConstants(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GpuNamedConstants(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GpuNamedConstants(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Generate additional constant entries for arrays based on a base definition. **/
    public void generateConstantDefinitionArrayEntries(String paramName, org.ogre4j.IGpuConstantDefinition baseDef) {
        _generateConstantDefinitionArrayEntries__StringRGpuConstantDefinitionR(this.object.pointer, paramName,  baseDef.getInstancePointer().pointer);
    }

    private native void _generateConstantDefinitionArrayEntries__StringRGpuConstantDefinitionR(long _pointer_, String paramName, long baseDef);

    /** 
    Saves constant definitions to a file, compatible with . **/
    public void save(String filename) {
        _save__StringR_const(this.object.pointer, filename);
    }

    private native void _save__StringR_const(long _pointer_, String filename);

    /** 
    Loads constant definitions from a stream, compatible with . **/
    public void load(org.ogre4j.IDataStreamPtr stream) {
        _load__DataStreamPtrr(this.object.pointer, stream.getInstancePointer().pointer);
    }

    private native void _load__DataStreamPtrr(long _pointer_, long stream);

    /** **/
    public static boolean getGenerateAllConstantDefinitionArrayEntries() {
         return _getGenerateAllConstantDefinitionArrayEntries();
    }

    private native static boolean _getGenerateAllConstantDefinitionArrayEntries();

    /** 
    Sets whether all array entries will be generated and added to the definitions map. **/
    public static void setGenerateAllConstantDefinitionArrayEntries(boolean generateAll) {
        _setGenerateAllConstantDefinitionArrayEntries__bv( generateAll);
    }

    private native static void _setGenerateAllConstantDefinitionArrayEntries__bv(boolean generateAll);

    /** **/
    public GpuNamedConstants() {
         super( new org.xbig.base.InstancePointer(__createGpuNamedConstants()), false);
    }

    private native static long __createGpuNamedConstants();

    /** **/
    public int getfloatBufferSize() {
         return _getfloatBufferSize(this.object.pointer);
    }

    private native int _getfloatBufferSize(long _pointer_);

    /** **/
    public void setfloatBufferSize(int _jni_value_) {
        _setfloatBufferSize(this.object.pointer, _jni_value_);
    }

    private native void _setfloatBufferSize(long _pointer_, int _jni_value_);

    /** **/
    public int getintBufferSize() {
         return _getintBufferSize(this.object.pointer);
    }

    private native int _getintBufferSize(long _pointer_);

    /** **/
    public void setintBufferSize(int _jni_value_) {
        _setintBufferSize(this.object.pointer, _jni_value_);
    }

    private native void _setintBufferSize(long _pointer_, int _jni_value_);

    /** **/
    public void getmap(org.ogre4j.IGpuConstantDefinitionMap returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getmap(this.object.pointer)), false);
    }

    private native long _getmap(long _pointer_);

    /** **/
    public void setmap(org.ogre4j.IGpuConstantDefinitionMap _jni_value_) {
        _setmap(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setmap(long _pointer_, long _jni_value_);

}
