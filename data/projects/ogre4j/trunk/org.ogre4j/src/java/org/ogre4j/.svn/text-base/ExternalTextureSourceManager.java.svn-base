/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ExternalTextureSourceManager extends org.xbig.base.NativeObject implements org.ogre4j.IExternalTextureSourceManager {
static { System.loadLibrary("ogre4j");}
protected static class TextureSystemList extends org.xbig.base.NativeObject implements org.ogre4j.IExternalTextureSourceManager.ITextureSystemList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TextureSystemList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TextureSystemList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TextureSystemList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TextureSystemList() {
         super( new org.xbig.base.InstancePointer(__createTextureSystemList()), false);
    }

    private native static long __createTextureSystemList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IExternalTextureSource get(String key) {
         return new org.ogre4j.ExternalTextureSource(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IExternalTextureSource value) {
        _insert__sROgre_ExternalTextureSourcep(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ExternalTextureSourcep(long _pointer_, String key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ExternalTextureSourceManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ExternalTextureSourceManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ExternalTextureSourceManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Constructor **/
    public ExternalTextureSourceManager() {
         super( new org.xbig.base.InstancePointer(__createExternalTextureSourceManager()), false);
    }

    private native static long __createExternalTextureSourceManager();

    /** 
    Sets active plugin (ie. "video", "effect", "generic", etc..) **/
    public void setCurrentPlugIn(String sTexturePlugInType) {
        _setCurrentPlugIn__StringR(this.object.pointer, sTexturePlugInType);
    }

    private native void _setCurrentPlugIn__StringR(long _pointer_, String sTexturePlugInType);

    /** 
    Returns currently selected plugin, may be null if none selected **/
    public org.ogre4j.IExternalTextureSource getCurrentPlugIn() {
         return new org.ogre4j.ExternalTextureSource(new InstancePointer(_getCurrentPlugIn_const(this.object.pointer)));
    }

    private native long _getCurrentPlugIn_const(long _pointer_);

    /** 
    Calls the destroy method of all registered plugins... Only the owner plugin should perform the destroy action. **/
    public void destroyAdvancedTexture(String sTextureName, String groupName) {
        _destroyAdvancedTexture__StringRStringR(this.object.pointer, sTextureName,  groupName);
    }

    private native void _destroyAdvancedTexture__StringRStringR(long _pointer_, String sTextureName, String groupName);

    /** 
    Returns the plugin which reistered itself with a specific name (eg. "video"), or null if specified plugin not found **/
    public org.ogre4j.IExternalTextureSource getExternalTextureSource(String sTexturePlugInType) {
         return new org.ogre4j.ExternalTextureSource(new InstancePointer(_getExternalTextureSource__StringR(this.object.pointer, sTexturePlugInType)));
    }

    private native long _getExternalTextureSource__StringR(long _pointer_, String sTexturePlugInType);

    /** 
    Called from plugin to register itself **/
    public void setExternalTextureSource(String sTexturePlugInType, org.ogre4j.IExternalTextureSource pTextureSystem) {
        _setExternalTextureSource__StringRExternalTextureSourcep(this.object.pointer, sTexturePlugInType,  pTextureSystem.getInstancePointer().pointer);
    }

    private native void _setExternalTextureSource__StringRExternalTextureSourcep(long _pointer_, String sTexturePlugInType, long pTextureSystem);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IExternalTextureSourceManager getSingleton() {
         return new org.ogre4j.ExternalTextureSourceManager(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IExternalTextureSourceManager getSingletonPtr() {
         return new org.ogre4j.ExternalTextureSourceManager(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

}
