/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ICompositionTechnique extends INativeObject, org.ogre4j.IResourceAllocatedObject {

public static interface ITextureDefinition extends INativeObject, org.ogre4j.IResourceAllocatedObject {

    /** **/
    public String getname();

    /** **/
    public void setname(String _jni_value_);

    /** **/
    public int getwidth();

    /** **/
    public void setwidth(int _jni_value_);

    /** **/
    public int getheight();

    /** **/
    public void setheight(int _jni_value_);

    /** **/
    public float getwidthFactor();

    /** **/
    public void setwidthFactor(float _jni_value_);

    /** **/
    public float getheightFactor();

    /** **/
    public void setheightFactor(float _jni_value_);

    /** **/
    public void getformatList(org.ogre4j.IPixelFormatList returnValue);

    /** **/
    public void setformatList(org.ogre4j.IPixelFormatList _jni_value_);

}
public interface ITargetPasses extends INativeObject, org.std.Ivector< org.ogre4j.ICompositionTargetPass > {

    /** **/
    public void assign(int num, org.ogre4j.ICompositionTargetPass val);

    /** **/
    public org.ogre4j.ICompositionTargetPass at(int loc);

    /** **/
    public org.ogre4j.ICompositionTargetPass back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ICompositionTargetPass front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ICompositionTargetPass val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ITargetPassIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.ICompositionTechnique.ITargetPasses > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.ICompositionTargetPass getNext();

    /** **/
    public org.ogre4j.ICompositionTargetPass peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.ICompositionTargetPass> peekNextPtr();

    /** **/
    public void moveNext();

}
public interface ITextureDefinitions extends INativeObject, org.std.Ivector< org.ogre4j.ICompositionTechnique.ITextureDefinition > {

    /** **/
    public void assign(int num, org.ogre4j.ICompositionTechnique.ITextureDefinition val);

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition at(int loc);

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ICompositionTechnique.ITextureDefinition val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ITextureDefinitionIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.ICompositionTechnique.ITextureDefinitions > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition getNext();

    /** **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.ICompositionTechnique.ITextureDefinition> peekNextPtr();

    /** **/
    public void moveNext();

}
public interface IInstances extends INativeObject, org.std.Ivector< org.ogre4j.ICompositorInstance > {

    /** **/
    public void assign(int num, org.ogre4j.ICompositorInstance val);

    /** **/
    public org.ogre4j.ICompositorInstance at(int loc);

    /** **/
    public org.ogre4j.ICompositorInstance back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ICompositorInstance front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ICompositorInstance val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Create a new local texture definition, and return a pointer to it. **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition createTextureDefinition(String name);

    /** 
    Remove and destroy a local texture definition. **/
    public void removeTextureDefinition(int idx);

    /** 
    Get a local texture definition. **/
    public org.ogre4j.ICompositionTechnique.ITextureDefinition getTextureDefinition(int idx);

    /** 
    Get the number of local texture definitions. **/
    public int getNumTextureDefinitions();

    /** 
    Remove all  Definitions **/
    public void removeAllTextureDefinitions();

    /** 
    Get an iterator over the TextureDefinitions in this . **/
    public void getTextureDefinitionIterator(org.ogre4j.ICompositionTechnique.ITextureDefinitionIterator returnValue);

    /** 
    Create a new target pass, and return a pointer to it. **/
    public org.ogre4j.ICompositionTargetPass createTargetPass();

    /** 
    Remove a target pass. It will also be destroyed. **/
    public void removeTargetPass(int idx);

    /** 
    Get a target pass. **/
    public org.ogre4j.ICompositionTargetPass getTargetPass(int idx);

    /** 
    Get the number of target passes. **/
    public int getNumTargetPasses();

    /** 
    Remove all target passes. **/
    public void removeAllTargetPasses();

    /** 
    Get an iterator over the TargetPasses in this . **/
    public void getTargetPassIterator(org.ogre4j.ICompositionTechnique.ITargetPassIterator returnValue);

    /** 
    Get output (final) target pass **/
    public org.ogre4j.ICompositionTargetPass getOutputTargetPass();

    /** 
    Determine if this technique is supported on the current rendering device. **/
    public boolean isSupported(boolean allowTextureDegradation);

    /** 
    Create an instance of this technique. **/
    public org.ogre4j.ICompositorInstance createInstance(org.ogre4j.ICompositorChain chain);

    /** 
    Destroy an instance of this technique. **/
    public void destroyInstance(org.ogre4j.ICompositorInstance instance);

    /** 
    Get parent object **/
    public org.ogre4j.ICompositor getParent();

}
