/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IParticleSystemRenderer extends INativeObject, org.ogre4j.IStringInterface, org.ogre4j.ISceneObjAllocatedObject {

    /** 
    Gets the type of this renderer - must be implemented by subclasses **/
    public String getType();

    /** 
    Delegated to by **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue, org.std.Ilist< org.ogre4j.IParticle > currentParticles, boolean cullIndividually);

    /** 
    Sets the material this renderer must use; called by . **/
    public void _setMaterial(org.ogre4j.IMaterialPtr mat);

    /** 
    Delegated to by **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** 
    Delegated to by **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint);

    /** 
    Optional callback notified when particles are rotated **/
    public void _notifyParticleRotated();

    /** 
    Optional callback notified when particles are resized individually **/
    public void _notifyParticleResized();

    /** 
    Tells the renderer that the particle quota has changed **/
    public void _notifyParticleQuota(int quota);

    /** 
    Tells the renderer that the particle default size has changed **/
    public void _notifyDefaultDimensions(float width, float height);

    /** 
    Optional callback notified when particle emitted **/
    public void _notifyParticleEmitted(org.ogre4j.IParticle particle);

    /** 
    Optional callback notified when particle expired **/
    public void _notifyParticleExpired(org.ogre4j.IParticle particle);

    /** 
    Optional callback notified when particles moved **/
    public void _notifyParticleMoved(org.std.Ilist< org.ogre4j.IParticle > currentParticles);

    /** 
    Optional callback notified when particles cleared **/
    public void _notifyParticleCleared(org.std.Ilist< org.ogre4j.IParticle > currentParticles);

    /** 
    Create a new  instance for attachment to a particle. **/
    public org.ogre4j.IParticleVisualData _createVisualData();

    /** 
    Destroy a  instance. **/
    public void _destroyVisualData(org.ogre4j.IParticleVisualData vis);

    /** 
    Sets which render queue group this renderer should target with it's output. **/
    public void setRenderQueueGroup(short queueID);

    /** 
    Setting carried over from . **/
    public void setKeepParticlesInLocalSpace(boolean keepLocal);

    /** 
    Gets the desired particles sort mode of this renderer **/
    public org.ogre4j.SortMode _getSortMode();

    /** 
    Required method to allow the renderer to communicate the Renderables it will be using to render the system to a visitor. **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

}
