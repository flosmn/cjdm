/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class OptimisedUtil extends org.xbig.base.NativeObject implements org.ogre4j.IOptimisedUtil {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public OptimisedUtil(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected OptimisedUtil(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public OptimisedUtil(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Performs software vertex skinning. **/
    public void softwareVertexSkinning(FloatPointer srcPosPtr, FloatPointer destPosPtr, FloatPointer srcNormPtr, FloatPointer destNormPtr, FloatPointer blendWeightPtr, ShortPointer blendIndexPtr, NativeObjectPointer<org.ogre4j.IMatrix4> blendMatrices, int srcPosStride, int destPosStride, int srcNormStride, int destNormStride, int blendWeightStride, int blendIndexStride, int numWeightsPerVertex, int numVertices) {
        _softwareVertexSkinning__FPFpFPFpFPBPMatrix4Piviviviviviviviv(this.object.pointer, srcPosPtr.object.pointer,  destPosPtr.object.pointer,  srcNormPtr.object.pointer,  destNormPtr.object.pointer,  blendWeightPtr.object.pointer,  blendIndexPtr.object.pointer,  blendMatrices.getInstancePointer().pointer,  srcPosStride,  destPosStride,  srcNormStride,  destNormStride,  blendWeightStride,  blendIndexStride,  numWeightsPerVertex,  numVertices);
    }

    private native void _softwareVertexSkinning__FPFpFPFpFPBPMatrix4Piviviviviviviviv(long _pointer_, long srcPosPtr, long destPosPtr, long srcNormPtr, long destNormPtr, long blendWeightPtr, long blendIndexPtr, long blendMatrices, int srcPosStride, int destPosStride, int srcNormStride, int destNormStride, int blendWeightStride, int blendIndexStride, int numWeightsPerVertex, int numVertices);

    /** 
    Performs a software vertex morph, of the kind used for morph animation although it can be used for other purposes. **/
    public void softwareVertexMorph(float t, FloatPointer srcPos1, FloatPointer srcPos2, FloatPointer dstPos, int numVertices) {
        _softwareVertexMorph__RealvFPFPFpiv(this.object.pointer, t,  srcPos1.object.pointer,  srcPos2.object.pointer,  dstPos.object.pointer,  numVertices);
    }

    private native void _softwareVertexMorph__RealvFPFPFpiv(long _pointer_, float t, long srcPos1, long srcPos2, long dstPos, int numVertices);

    /** 
    Concatenate an affine matrix to an array of affine matrices. **/
    public void concatenateAffineMatrices(org.ogre4j.IMatrix4 baseMatrix, org.ogre4j.IMatrix4 srcMatrices, org.ogre4j.IMatrix4 dstMatrices, int numMatrices) {
        _concatenateAffineMatrices__Matrix4RMatrix4PMatrix4piv(this.object.pointer, baseMatrix.getInstancePointer().pointer,  srcMatrices.getInstancePointer().pointer,  dstMatrices.getInstancePointer().pointer,  numMatrices);
    }

    private native void _concatenateAffineMatrices__Matrix4RMatrix4PMatrix4piv(long _pointer_, long baseMatrix, long srcMatrices, long dstMatrices, int numMatrices);

    /** 
    Calculate the face normals for the triangles based on position information. **/
    public void calculateFaceNormals(FloatPointer positions, org.ogre4j.IEdgeData.ITriangle triangles, org.ogre4j.IVector4 faceNormals, int numTriangles) {
        _calculateFaceNormals__FPEdgeData_TrianglePVector4piv(this.object.pointer, positions.object.pointer,  triangles.getInstancePointer().pointer,  faceNormals.getInstancePointer().pointer,  numTriangles);
    }

    private native void _calculateFaceNormals__FPEdgeData_TrianglePVector4piv(long _pointer_, long positions, long triangles, long faceNormals, int numTriangles);

    /** 
    Calculate the light facing state of the triangle's face normals **/
    public void calculateLightFacing(org.ogre4j.IVector4 lightPos, org.ogre4j.IVector4 faceNormals, BytePointer lightFacings, int numFaces) {
        _calculateLightFacing__Vector4RVector4Pcpiv(this.object.pointer, lightPos.getInstancePointer().pointer,  faceNormals.getInstancePointer().pointer,  lightFacings.object.pointer,  numFaces);
    }

    private native void _calculateLightFacing__Vector4RVector4Pcpiv(long _pointer_, long lightPos, long faceNormals, long lightFacings, int numFaces);

    /** 
    Extruding vertices by a fixed distance based on light position. **/
    public void extrudeVertices(org.ogre4j.IVector4 lightPos, float extrudeDist, FloatPointer srcPositions, FloatPointer destPositions, int numVertices) {
        _extrudeVertices__Vector4RRealvFPFpiv(this.object.pointer, lightPos.getInstancePointer().pointer,  extrudeDist,  srcPositions.object.pointer,  destPositions.object.pointer,  numVertices);
    }

    private native void _extrudeVertices__Vector4RRealvFPFpiv(long _pointer_, long lightPos, float extrudeDist, long srcPositions, long destPositions, int numVertices);

    /** 
    Gets the implementation of this class. **/
    public static org.ogre4j.IOptimisedUtil getImplementation() {
         return new org.ogre4j.OptimisedUtil(new InstancePointer(_getImplementation()));
    }

    private native static long _getImplementation();

}
