/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class WindowEventUtilities extends org.xbig.base.NativeObject implements org.ogre4j.IWindowEventUtilities {
static { System.loadLibrary("ogre4j");}
public static class WindowEventListeners extends org.xbig.base.NativeObject implements org.ogre4j.IWindowEventUtilities.IWindowEventListeners {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public WindowEventListeners(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected WindowEventListeners(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public WindowEventListeners(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public WindowEventListeners() {
         super( new org.xbig.base.InstancePointer(__createWindowEventListeners()), false);
    }

    private native static long __createWindowEventListeners();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IRenderWindow key) {
         return _count__Ogre_RenderWindowP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_RenderWindowP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IRenderWindow key) {
         return _erase__Ogre_RenderWindowP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_RenderWindowP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
public static class Windows extends org.xbig.base.NativeObject implements org.ogre4j.IWindowEventUtilities.IWindows {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Windows(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Windows(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Windows(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Windows() {
         super( new org.xbig.base.InstancePointer(__createWindows()), false);
    }

    private native static long __createWindows();

    /** **/
    public void assign(int num, org.ogre4j.IRenderWindow val) {
        _assign__ivOgre_RenderWindowP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_RenderWindowP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IRenderWindow at(int loc) {
         return new org.ogre4j.RenderWindow(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IRenderWindow back() {
         return new org.ogre4j.RenderWindow(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IRenderWindow front() {
         return new org.ogre4j.RenderWindow(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IRenderWindow val) {
        _push_back__Ogre_RenderWindowP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_RenderWindowP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public WindowEventUtilities(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected WindowEventUtilities(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public WindowEventUtilities(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    **/
    public static void messagePump() {
        _messagePump();
    }

    private native static void _messagePump();

    /** 
    **/
    public static void addWindowEventListener(org.ogre4j.IRenderWindow window, org.ogre4j.IWindowEventListener listener) {
        _addWindowEventListener__RenderWindowpWindowEventListenerp( window.getInstancePointer().pointer,  listener.getInstancePointer().pointer);
    }

    private native static void _addWindowEventListener__RenderWindowpWindowEventListenerp(long window, long listener);

    /** 
    **/
    public static void removeWindowEventListener(org.ogre4j.IRenderWindow window, org.ogre4j.IWindowEventListener listener) {
        _removeWindowEventListener__RenderWindowpWindowEventListenerp( window.getInstancePointer().pointer,  listener.getInstancePointer().pointer);
    }

    private native static void _removeWindowEventListener__RenderWindowpWindowEventListenerp(long window, long listener);

    /** 
    **/
    public static void _addRenderWindow(org.ogre4j.IRenderWindow window) {
        __addRenderWindow__RenderWindowp( window.getInstancePointer().pointer);
    }

    private native static void __addRenderWindow__RenderWindowp(long window);

    /** 
    **/
    public static void _removeRenderWindow(org.ogre4j.IRenderWindow window) {
        __removeRenderWindow__RenderWindowp( window.getInstancePointer().pointer);
    }

    private native static void __removeRenderWindow__RenderWindowp(long window);

    /** **/
    public WindowEventUtilities() {
         super( new org.xbig.base.InstancePointer(__createWindowEventUtilities()), false);
    }

    private native static long __createWindowEventUtilities();

    /** **/
    public static org.ogre4j.IWindowEventUtilities.IWindowEventListeners get_msListeners() {
         return new org.ogre4j.WindowEventUtilities.WindowEventListeners(new InstancePointer(_get_msListeners()));
    }

    private native static long _get_msListeners();

    /** **/
    public static void set_msListeners(org.ogre4j.IWindowEventUtilities.IWindowEventListeners _jni_value_) {
        _set_msListeners( _jni_value_.getInstancePointer().pointer);
    }

    private native static void _set_msListeners(long _jni_value_);

    /** **/
    public static org.ogre4j.IWindowEventUtilities.IWindows get_msWindows() {
         return new org.ogre4j.WindowEventUtilities.Windows(new InstancePointer(_get_msWindows()));
    }

    private native static long _get_msWindows();

    /** **/
    public static void set_msWindows(org.ogre4j.IWindowEventUtilities.IWindows _jni_value_) {
        _set_msWindows( _jni_value_.getInstancePointer().pointer);
    }

    private native static void _set_msWindows(long _jni_value_);

}
