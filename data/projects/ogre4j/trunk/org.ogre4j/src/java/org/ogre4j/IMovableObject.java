/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IMovableObject extends INativeObject, org.ogre4j.IShadowCaster, org.ogre4j.IAnimableObject, org.ogre4j.ISceneObjAllocatedObject {

public static interface IListener extends INativeObject {

    /** 
     is being destroyed **/
    public void objectDestroyed(org.ogre4j.IMovableObject a1);

    /** 
     has been attached to a node **/
    public void objectAttached(org.ogre4j.IMovableObject a1);

    /** 
     has been detached from a node **/
    public void objectDetached(org.ogre4j.IMovableObject a1);

    /** 
     has been moved **/
    public void objectMoved(org.ogre4j.IMovableObject a1);

    /** 
    Called when the movable object of the camera to be used for rendering. **/
    public boolean objectRendering(org.ogre4j.IMovableObject a1, org.ogre4j.ICamera a2);

    /** 
    Called when the movable object needs to query a light list. **/
    public org.ogre4j.ILightList objectQueryLights(org.ogre4j.IMovableObject a1);

}
    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator();

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager();

    /** 
    Returns the name of this object. **/
    public String getName();

    /** 
    Returns the type name of this object. **/
    public String getMovableType();

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode();

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode();

    /** 
    Internal method called to notify the object that it has been attached to a node. **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached();

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent();

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene();

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved();

    /** 
    Internal method to notify the object of the camera to be used for the next rendering operation. **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** 
    Retrieves the local axis-aligned bounding box for this object. **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox();

    /** 
    Retrieves the radius of the origin-centered bounding sphere for this object. **/
    public float getBoundingRadius();

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive);

    /** 
    Internal method by which the movable object must add  subclass instances to the rendering queue. **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible();

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible();

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance();

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject();

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny();

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup();

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform();

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags);

    /** **/
    public long getQueryFlags();

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags);

    /** **/
    public long getVisibilityFlags();

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener();

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights();

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList();

    /** **/
    public org.ogre4j.IEdgeData getEdgeList();

    /** **/
    public boolean hasEdgeList();

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds();

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows();

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l);

    /** 
    Get the 'type flags' for this . **/
    public long getTypeFlags();

    /** 
    Method to allow a caller to abstractly iterate over the  instances that this  will add to the render queue when asked, if any. **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled();

}
