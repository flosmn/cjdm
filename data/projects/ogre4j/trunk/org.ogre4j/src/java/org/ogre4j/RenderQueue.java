/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class RenderQueue extends org.xbig.base.NativeObject implements org.ogre4j.IRenderQueue {
static { System.loadLibrary("ogre4j");}
public static class RenderableListener extends org.xbig.base.NativeObject implements org.ogre4j.IRenderQueue.IRenderableListener {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderableListener(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderableListener(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderableListener(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Method called when a  is added to the queue. **/
    public boolean renderableQueued(org.ogre4j.IRenderable rend, short groupID, int priority, NativeObjectPointer<org.ogre4j.ITechnique> ppTech, org.ogre4j.IRenderQueue pQueue) {
         return _renderableQueued__Renderablepuint8vushortvTechniquepRenderQueuep(this.object.pointer, rend.getInstancePointer().pointer,  groupID,  priority,  ppTech.getInstancePointer().pointer,  pQueue.getInstancePointer().pointer);
    }

    private native boolean _renderableQueued__Renderablepuint8vushortvTechniquepRenderQueuep(long _pointer_, long rend, short groupID, int priority, long ppTech, long pQueue);

}
public static class RenderQueueGroupMap extends org.xbig.base.NativeObject implements org.ogre4j.IRenderQueue.IRenderQueueGroupMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderQueueGroupMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderQueueGroupMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderQueueGroupMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderQueueGroupMap() {
         super( new org.xbig.base.InstancePointer(__createRenderQueueGroupMap()), false);
    }

    private native static long __createRenderQueueGroupMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(short key) {
         return _count__BR(this.object.pointer, key);
    }

    private native int _count__BR(long _pointer_, short key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(short key) {
         return _erase__BR(this.object.pointer, key);
    }

    private native int _erase__BR(long _pointer_, short key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IRenderQueueGroup get(short key) {
         return new org.ogre4j.RenderQueueGroup(new InstancePointer(_get__BR(this.object.pointer, key)));
    }

    private native long _get__BR(long _pointer_, short key);

    /** **/
    public void insert(short key, org.ogre4j.IRenderQueueGroup value) {
        _insert__BROgre_RenderQueueGroupp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__BROgre_RenderQueueGroupp(long _pointer_, short key, long value);

}
public static class QueueGroupIterator extends org.xbig.base.NativeObject implements org.ogre4j.IRenderQueue.IQueueGroupIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QueueGroupIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QueueGroupIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QueueGroupIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QueueGroupIterator(org.ogre4j.IRenderQueue.IRenderQueueGroupMap c) {
         super( new org.xbig.base.InstancePointer(__createQueueGroupIterator__Ogre_RenderQueue_RenderQueueGroupMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createQueueGroupIterator__Ogre_RenderQueue_RenderQueueGroupMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IRenderQueueGroup getNext() {
         return new org.ogre4j.RenderQueueGroup(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IRenderQueueGroup peekNextValue() {
         return new org.ogre4j.RenderQueueGroup(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public short peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native short _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IRenderQueue.IQueueGroupIterator operatorAssignment(org.ogre4j.IRenderQueue.IQueueGroupIterator rhs) {
         return new org.ogre4j.RenderQueue.QueueGroupIterator(new InstancePointer(_operatorAssignment___Ogre_RenderQueue_QueueGroupIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_RenderQueue_QueueGroupIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IRenderQueueGroup> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IRenderQueueGroup>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderQueue(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderQueue(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderQueue(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderQueue() {
         super( new org.xbig.base.InstancePointer(__createRenderQueue()), false);
    }

    private native static long __createRenderQueue();

    /** 
    Empty the queue - should only be called by SceneManagers. **/
    public void clear(boolean destroyPassMaps) {
        _clear__bv(this.object.pointer, destroyPassMaps);
    }

    private native void _clear__bv(long _pointer_, boolean destroyPassMaps);

    /** 
    Get a render queue group. **/
    public org.ogre4j.IRenderQueueGroup getQueueGroup(short qid) {
         return new org.ogre4j.RenderQueueGroup(new InstancePointer(_getQueueGroup__uint8v(this.object.pointer, qid)));
    }

    private native long _getQueueGroup__uint8v(long _pointer_, short qid);

    /** 
    Add a renderable object to the queue. **/
    public void addRenderable(org.ogre4j.IRenderable pRend, short groupID, int priority) {
        _addRenderable__Renderablepuint8vushortv(this.object.pointer, pRend.getInstancePointer().pointer,  groupID,  priority);
    }

    private native void _addRenderable__Renderablepuint8vushortv(long _pointer_, long pRend, short groupID, int priority);

    /** 
    Add a renderable object to the queue. **/
    public void addRenderable(org.ogre4j.IRenderable pRend, short groupId) {
        _addRenderable__Renderablepuint8v(this.object.pointer, pRend.getInstancePointer().pointer,  groupId);
    }

    private native void _addRenderable__Renderablepuint8v(long _pointer_, long pRend, short groupId);

    /** 
    Add a renderable object to the queue. **/
    public void addRenderable(org.ogre4j.IRenderable pRend) {
        _addRenderable__Renderablep(this.object.pointer, pRend.getInstancePointer().pointer);
    }

    private native void _addRenderable__Renderablep(long _pointer_, long pRend);

    /** 
    Gets the current default queue group, which will be used for all renderable which do not specify which group they wish to be on. **/
    public short getDefaultQueueGroup() {
         return _getDefaultQueueGroup_const(this.object.pointer);
    }

    private native short _getDefaultQueueGroup_const(long _pointer_);

    /** 
    Sets the current default renderable priority, which will be used for all renderables which do not specify which priority they wish to use. **/
    public void setDefaultRenderablePriority(int priority) {
        _setDefaultRenderablePriority__ushortv(this.object.pointer, priority);
    }

    private native void _setDefaultRenderablePriority__ushortv(long _pointer_, int priority);

    /** 
    Gets the current default renderable priority, which will be used for all renderables which do not specify which priority they wish to use. **/
    public int getDefaultRenderablePriority() {
         return _getDefaultRenderablePriority_const(this.object.pointer);
    }

    private native int _getDefaultRenderablePriority_const(long _pointer_);

    /** 
    Sets the current default queue group, which will be used for all renderable which do not specify which group they wish to be on. **/
    public void setDefaultQueueGroup(short grp) {
        _setDefaultQueueGroup__uint8v(this.object.pointer, grp);
    }

    private native void _setDefaultQueueGroup__uint8v(long _pointer_, short grp);

    /** 
    Internal method, returns an iterator for the queue groups. **/
    public void _getQueueGroupIterator(org.ogre4j.IRenderQueue.IQueueGroupIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(__getQueueGroupIterator(this.object.pointer)), false);
    }

    private native long __getQueueGroupIterator(long _pointer_);

    /** 
    Sets whether or not the queue will split passes by their lighting type, ie ambient, per-light and decal. **/
    public void setSplitPassesByLightingType(boolean split) {
        _setSplitPassesByLightingType__bv(this.object.pointer, split);
    }

    private native void _setSplitPassesByLightingType__bv(long _pointer_, boolean split);

    /** 
    Sets whether or not the queue will split passes which have shadow receive turned off (in their parent material), which is needed when certain shadow techniques are used. **/
    public void setSplitNoShadowPasses(boolean split) {
        _setSplitNoShadowPasses__bv(this.object.pointer, split);
    }

    private native void _setSplitNoShadowPasses__bv(long _pointer_, boolean split);

    /** 
    Sets whether or not objects which cast shadows should be treated as never receiving shadows. **/
    public void setShadowCastersCannotBeReceivers(boolean ind) {
        _setShadowCastersCannotBeReceivers__bv(this.object.pointer, ind);
    }

    private native void _setShadowCastersCannotBeReceivers__bv(long _pointer_, boolean ind);

    /** 
    Set a renderable listener on the queue. **/
    public void setRenderableListener(org.ogre4j.IRenderQueue.IRenderableListener listener) {
        _setRenderableListener__RenderableListenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setRenderableListener__RenderableListenerp(long _pointer_, long listener);

    /** **/
    public org.ogre4j.IRenderQueue.IRenderableListener getRenderableListener() {
         return new org.ogre4j.RenderQueue.RenderableListener(new InstancePointer(_getRenderableListener_const(this.object.pointer)));
    }

    private native long _getRenderableListener_const(long _pointer_);

}
