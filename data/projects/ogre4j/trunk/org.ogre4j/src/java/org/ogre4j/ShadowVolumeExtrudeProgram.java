/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ShadowVolumeExtrudeProgram extends org.xbig.base.NativeObject implements org.ogre4j.IShadowVolumeExtrudeProgram {
static { System.loadLibrary("ogre4j");}
public enum Programs implements INativeEnum < Programs > {
    POINT_LIGHT(ProgramsHelper.ENUM_VALUES[0]),
    POINT_LIGHT_DEBUG(ProgramsHelper.ENUM_VALUES[1]),
    DIRECTIONAL_LIGHT(ProgramsHelper.ENUM_VALUES[2]),
    DIRECTIONAL_LIGHT_DEBUG(ProgramsHelper.ENUM_VALUES[3]),
    POINT_LIGHT_FINITE(ProgramsHelper.ENUM_VALUES[4]),
    POINT_LIGHT_FINITE_DEBUG(ProgramsHelper.ENUM_VALUES[5]),
    DIRECTIONAL_LIGHT_FINITE(ProgramsHelper.ENUM_VALUES[6]),
    DIRECTIONAL_LIGHT_FINITE_DEBUG(ProgramsHelper.ENUM_VALUES[7]);

    private int value;

    Programs(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public Programs getEnum(int val) {
        return toEnum(val);
    }

    public static final Programs toEnum(int retval) {
    if (retval ==POINT_LIGHT.value)
        return Programs.POINT_LIGHT;
    else if (retval ==POINT_LIGHT_DEBUG.value)
        return Programs.POINT_LIGHT_DEBUG;
    else if (retval ==DIRECTIONAL_LIGHT.value)
        return Programs.DIRECTIONAL_LIGHT;
    else if (retval ==DIRECTIONAL_LIGHT_DEBUG.value)
        return Programs.DIRECTIONAL_LIGHT_DEBUG;
    else if (retval ==POINT_LIGHT_FINITE.value)
        return Programs.POINT_LIGHT_FINITE;
    else if (retval ==POINT_LIGHT_FINITE_DEBUG.value)
        return Programs.POINT_LIGHT_FINITE_DEBUG;
    else if (retval ==DIRECTIONAL_LIGHT_FINITE.value)
        return Programs.DIRECTIONAL_LIGHT_FINITE;
    else if (retval ==DIRECTIONAL_LIGHT_FINITE_DEBUG.value)
        return Programs.DIRECTIONAL_LIGHT_FINITE_DEBUG;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class ProgramsHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ShadowVolumeExtrudeProgram(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ShadowVolumeExtrudeProgram(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ShadowVolumeExtrudeProgram(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public static void initialise() {
        _initialise();
    }

    private native static void _initialise();

    /** **/
    public static void shutdown() {
        _shutdown();
    }

    private native static void _shutdown();

    /** **/
    public static String getPointLightExtruderArbvp1() {
         return _getPointLightExtruderArbvp1();
    }

    private native static String _getPointLightExtruderArbvp1();

    /** **/
    public static String getPointLightExtruderVs_1_1() {
         return _getPointLightExtruderVs_1_1();
    }

    private native static String _getPointLightExtruderVs_1_1();

    /** **/
    public static String getDirectionalLightExtruderArbvp1() {
         return _getDirectionalLightExtruderArbvp1();
    }

    private native static String _getDirectionalLightExtruderArbvp1();

    /** **/
    public static String getDirectionalLightExtruderVs_1_1() {
         return _getDirectionalLightExtruderVs_1_1();
    }

    private native static String _getDirectionalLightExtruderVs_1_1();

    /** **/
    public static String getPointLightExtruderArbvp1Debug() {
         return _getPointLightExtruderArbvp1Debug();
    }

    private native static String _getPointLightExtruderArbvp1Debug();

    /** **/
    public static String getPointLightExtruderVs_1_1Debug() {
         return _getPointLightExtruderVs_1_1Debug();
    }

    private native static String _getPointLightExtruderVs_1_1Debug();

    /** **/
    public static String getDirectionalLightExtruderArbvp1Debug() {
         return _getDirectionalLightExtruderArbvp1Debug();
    }

    private native static String _getDirectionalLightExtruderArbvp1Debug();

    /** **/
    public static String getDirectionalLightExtruderVs_1_1Debug() {
         return _getDirectionalLightExtruderVs_1_1Debug();
    }

    private native static String _getDirectionalLightExtruderVs_1_1Debug();

    /** **/
    public static String getProgramSource(org.ogre4j.Light.LightTypes lightType, String syntax, boolean finite, boolean debug) {
         return _getProgramSource__Light_LightTypesvStringVbvbv( lightType.getValue(),  syntax,  finite,  debug);
    }

    private native static String _getProgramSource__Light_LightTypesvStringVbvbv(int lightType, String syntax, boolean finite, boolean debug);

    /** **/
    public static String getProgramName(org.ogre4j.Light.LightTypes lightType, boolean finite, boolean debug) {
         return _getProgramName__Light_LightTypesvbvbv( lightType.getValue(),  finite,  debug);
    }

    private native static String _getProgramName__Light_LightTypesvbvbv(int lightType, boolean finite, boolean debug);

    /** **/
    public static String getPointLightExtruderArbvp1Finite() {
         return _getPointLightExtruderArbvp1Finite();
    }

    private native static String _getPointLightExtruderArbvp1Finite();

    /** **/
    public static String getPointLightExtruderVs_1_1Finite() {
         return _getPointLightExtruderVs_1_1Finite();
    }

    private native static String _getPointLightExtruderVs_1_1Finite();

    /** **/
    public static String getDirectionalLightExtruderArbvp1Finite() {
         return _getDirectionalLightExtruderArbvp1Finite();
    }

    private native static String _getDirectionalLightExtruderArbvp1Finite();

    /** **/
    public static String getDirectionalLightExtruderVs_1_1Finite() {
         return _getDirectionalLightExtruderVs_1_1Finite();
    }

    private native static String _getDirectionalLightExtruderVs_1_1Finite();

    /** **/
    public static String getPointLightExtruderArbvp1FiniteDebug() {
         return _getPointLightExtruderArbvp1FiniteDebug();
    }

    private native static String _getPointLightExtruderArbvp1FiniteDebug();

    /** **/
    public static String getPointLightExtruderVs_1_1FiniteDebug() {
         return _getPointLightExtruderVs_1_1FiniteDebug();
    }

    private native static String _getPointLightExtruderVs_1_1FiniteDebug();

    /** **/
    public static String getDirectionalLightExtruderArbvp1FiniteDebug() {
         return _getDirectionalLightExtruderArbvp1FiniteDebug();
    }

    private native static String _getDirectionalLightExtruderArbvp1FiniteDebug();

    /** **/
    public static String getDirectionalLightExtruderVs_1_1FiniteDebug() {
         return _getDirectionalLightExtruderVs_1_1FiniteDebug();
    }

    private native static String _getDirectionalLightExtruderVs_1_1FiniteDebug();

    /** **/
    public ShadowVolumeExtrudeProgram() {
         super( new org.xbig.base.InstancePointer(__createShadowVolumeExtrudeProgram()), false);
    }

    private native static long __createShadowVolumeExtrudeProgram();





}
