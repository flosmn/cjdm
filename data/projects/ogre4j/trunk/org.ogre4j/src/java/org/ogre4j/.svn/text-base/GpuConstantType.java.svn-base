/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public enum GpuConstantType implements INativeEnum < GpuConstantType > {
    GCT_FLOAT1(GpuConstantTypeHelper.ENUM_VALUES[0]),
    GCT_FLOAT2(GpuConstantTypeHelper.ENUM_VALUES[1]),
    GCT_FLOAT3(GpuConstantTypeHelper.ENUM_VALUES[2]),
    GCT_FLOAT4(GpuConstantTypeHelper.ENUM_VALUES[3]),
    GCT_SAMPLER1D(GpuConstantTypeHelper.ENUM_VALUES[4]),
    GCT_SAMPLER2D(GpuConstantTypeHelper.ENUM_VALUES[5]),
    GCT_SAMPLER3D(GpuConstantTypeHelper.ENUM_VALUES[6]),
    GCT_SAMPLERCUBE(GpuConstantTypeHelper.ENUM_VALUES[7]),
    GCT_SAMPLER1DSHADOW(GpuConstantTypeHelper.ENUM_VALUES[8]),
    GCT_SAMPLER2DSHADOW(GpuConstantTypeHelper.ENUM_VALUES[9]),
    GCT_MATRIX_2X2(GpuConstantTypeHelper.ENUM_VALUES[10]),
    GCT_MATRIX_2X3(GpuConstantTypeHelper.ENUM_VALUES[11]),
    GCT_MATRIX_2X4(GpuConstantTypeHelper.ENUM_VALUES[12]),
    GCT_MATRIX_3X2(GpuConstantTypeHelper.ENUM_VALUES[13]),
    GCT_MATRIX_3X3(GpuConstantTypeHelper.ENUM_VALUES[14]),
    GCT_MATRIX_3X4(GpuConstantTypeHelper.ENUM_VALUES[15]),
    GCT_MATRIX_4X2(GpuConstantTypeHelper.ENUM_VALUES[16]),
    GCT_MATRIX_4X3(GpuConstantTypeHelper.ENUM_VALUES[17]),
    GCT_MATRIX_4X4(GpuConstantTypeHelper.ENUM_VALUES[18]),
    GCT_INT1(GpuConstantTypeHelper.ENUM_VALUES[19]),
    GCT_INT2(GpuConstantTypeHelper.ENUM_VALUES[20]),
    GCT_INT3(GpuConstantTypeHelper.ENUM_VALUES[21]),
    GCT_INT4(GpuConstantTypeHelper.ENUM_VALUES[22]),
    GCT_UNKNOWN(GpuConstantTypeHelper.ENUM_VALUES[23]);

    private int value;

    GpuConstantType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public GpuConstantType getEnum(int val) {
        return toEnum(val);
    }

    public static final GpuConstantType toEnum(int retval) {
    if (retval ==GCT_FLOAT1.value)
        return GpuConstantType.GCT_FLOAT1;
    else if (retval ==GCT_FLOAT2.value)
        return GpuConstantType.GCT_FLOAT2;
    else if (retval ==GCT_FLOAT3.value)
        return GpuConstantType.GCT_FLOAT3;
    else if (retval ==GCT_FLOAT4.value)
        return GpuConstantType.GCT_FLOAT4;
    else if (retval ==GCT_SAMPLER1D.value)
        return GpuConstantType.GCT_SAMPLER1D;
    else if (retval ==GCT_SAMPLER2D.value)
        return GpuConstantType.GCT_SAMPLER2D;
    else if (retval ==GCT_SAMPLER3D.value)
        return GpuConstantType.GCT_SAMPLER3D;
    else if (retval ==GCT_SAMPLERCUBE.value)
        return GpuConstantType.GCT_SAMPLERCUBE;
    else if (retval ==GCT_SAMPLER1DSHADOW.value)
        return GpuConstantType.GCT_SAMPLER1DSHADOW;
    else if (retval ==GCT_SAMPLER2DSHADOW.value)
        return GpuConstantType.GCT_SAMPLER2DSHADOW;
    else if (retval ==GCT_MATRIX_2X2.value)
        return GpuConstantType.GCT_MATRIX_2X2;
    else if (retval ==GCT_MATRIX_2X3.value)
        return GpuConstantType.GCT_MATRIX_2X3;
    else if (retval ==GCT_MATRIX_2X4.value)
        return GpuConstantType.GCT_MATRIX_2X4;
    else if (retval ==GCT_MATRIX_3X2.value)
        return GpuConstantType.GCT_MATRIX_3X2;
    else if (retval ==GCT_MATRIX_3X3.value)
        return GpuConstantType.GCT_MATRIX_3X3;
    else if (retval ==GCT_MATRIX_3X4.value)
        return GpuConstantType.GCT_MATRIX_3X4;
    else if (retval ==GCT_MATRIX_4X2.value)
        return GpuConstantType.GCT_MATRIX_4X2;
    else if (retval ==GCT_MATRIX_4X3.value)
        return GpuConstantType.GCT_MATRIX_4X3;
    else if (retval ==GCT_MATRIX_4X4.value)
        return GpuConstantType.GCT_MATRIX_4X4;
    else if (retval ==GCT_INT1.value)
        return GpuConstantType.GCT_INT1;
    else if (retval ==GCT_INT2.value)
        return GpuConstantType.GCT_INT2;
    else if (retval ==GCT_INT3.value)
        return GpuConstantType.GCT_INT3;
    else if (retval ==GCT_INT4.value)
        return GpuConstantType.GCT_INT4;
    else if (retval ==GCT_UNKNOWN.value)
        return GpuConstantType.GCT_UNKNOWN;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

class GpuConstantTypeHelper{
static { System.loadLibrary("ogre4j");}

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

