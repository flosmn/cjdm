/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IFrustum extends INativeObject, org.ogre4j.IMovableObject, org.ogre4j.IRenderable {

    /** 
    Sets the Y-dimension Field Of View (FOV) of the frustum. **/
    public void setFOVy(org.ogre4j.IRadian fovy);

    /** 
    Retrieves the frustums Y-dimension Field Of View (FOV). **/
    public org.ogre4j.IRadian getFOVy();

    /** 
    Sets the position of the near clipping plane. **/
    public void setNearClipDistance(float nearDist);

    /** 
    Sets the position of the near clipping plane. **/
    public float getNearClipDistance();

    /** 
    Sets the distance to the far clipping plane. **/
    public void setFarClipDistance(float farDist);

    /** 
    Retrieves the distance from the frustum to the far clipping plane. **/
    public float getFarClipDistance();

    /** 
    Sets the aspect ratio for the frustum viewport. **/
    public void setAspectRatio(float ratio);

    /** 
    Retreives the current aspect ratio. **/
    public float getAspectRatio();

    /** 
    Sets frustum offsets, used in stereo rendering. **/
    public void setFrustumOffset(org.ogre4j.IVector2 offset);

    /** 
    Sets frustum offsets, used in stereo rendering. **/
    public void setFrustumOffset(float horizontal, float vertical);

    /** 
    Retrieves the frustum offsets. **/
    public org.ogre4j.IVector2 getFrustumOffset();

    /** 
    Sets frustum focal length (used in stereo rendering). **/
    public void setFocalLength(float focalLength);

    /** 
    Returns focal length of frustum. **/
    public float getFocalLength();

    /** 
    Manually set the extents of the frustum. **/
    public void setFrustumExtents(float left, float right, float top, float bottom);

    /** 
    Reset the frustum extents to be automatically derived from other params. **/
    public void resetFrustumExtents();

    /** 
    Get the extents of the frustum in view space. **/
    public void getFrustumExtents(FloatPointer outleft, FloatPointer outright, FloatPointer outtop, FloatPointer outbottom);

    /** 
    Gets the projection matrix for this frustum adjusted for the current rendersystem specifics (may be right or left-handed, depth range may vary). **/
    public org.ogre4j.IMatrix4 getProjectionMatrixRS();

    /** 
    Gets the depth-adjusted projection matrix for the current rendersystem, but one which still conforms to right-hand rules. **/
    public org.ogre4j.IMatrix4 getProjectionMatrixWithRSDepth();

    /** 
    Gets the normal projection matrix for this frustum, ie the projection matrix which conforms to standard right-handed rules and uses depth range [-1,+1]. **/
    public org.ogre4j.IMatrix4 getProjectionMatrix();

    /** 
    Gets the view matrix for this frustum. Mainly for use by OGRE internally. **/
    public org.ogre4j.IMatrix4 getViewMatrix();

    /** 
    Calculate a view matrix for this frustum, relative to a potentially dynamic point. Mainly for use by OGRE internally when using camera-relative rendering for frustums that are not the centre (e.g. texture projection) **/
    public void calcViewMatrixRelative(org.ogre4j.IVector3 relPos, org.ogre4j.IMatrix4 matToUpdate);

    /** 
    Set whether to use a custom view matrix on this frustum. **/
    public void setCustomViewMatrix(boolean enable, org.ogre4j.IMatrix4 viewMatrix);

    /** **/
    public boolean isCustomViewMatrixEnabled();

    /** 
    Set whether to use a custom projection matrix on this frustum. **/
    public void setCustomProjectionMatrix(boolean enable, org.ogre4j.IMatrix4 projectionMatrix);

    /** **/
    public boolean isCustomProjectionMatrixEnabled();

    /** 
    Retrieves the clipping planes of the frustum (world space). **/
    public org.ogre4j.IPlane getFrustumPlanes();

    /** 
    Retrieves a specified plane of the frustum (world space). **/
    public org.ogre4j.IPlane getFrustumPlane(int plane);

    /** 
    Tests whether the given container is visible in the . **/
    public boolean isVisible(org.ogre4j.IAxisAlignedBox bound, EnumPointer < org.ogre4j.FrustumPlane > culledBy);

    /** 
    Tests whether the given container is visible in the . **/
    public boolean isVisible(org.ogre4j.ISphere bound, EnumPointer < org.ogre4j.FrustumPlane > culledBy);

    /** 
    Tests whether the given vertex is visible in the . **/
    public boolean isVisible(org.ogre4j.IVector3 vert, EnumPointer < org.ogre4j.FrustumPlane > culledBy);

    /** **/
    public long getTypeFlags();

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox();

    /** 
    Overridden from **/
    public float getBoundingRadius();

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue);

    /** 
    Overridden from **/
    public String getMovableType();

    /** 
    Overridden from **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** 
    Overridden from **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** 
    Overridden from **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op);

    /** 
    Overridden from **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** 
    Overridden from **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam);

    /** 
    Overridden from **/
    public org.ogre4j.ILightList getLights();

    /** 
    Gets the world space corners of the frustum. **/
    public org.ogre4j.IVector3 getWorldSpaceCorners();

    /** 
    Sets the type of projection to use (orthographic or perspective). Default is perspective. **/
    public void setProjectionType(org.ogre4j.ProjectionType pt);

    /** 
    Retrieves info on the type of projection used (orthographic or perspective). **/
    public org.ogre4j.ProjectionType getProjectionType();

    /** 
    Sets the orthographic window settings, for use with orthographic rendering only. **/
    public void setOrthoWindow(float w, float h);

    /** 
    Sets the orthographic window height, for use with orthographic rendering only. **/
    public void setOrthoWindowHeight(float h);

    /** 
    Sets the orthographic window width, for use with orthographic rendering only. **/
    public void setOrthoWindowWidth(float w);

    /** 
    Gets the orthographic window height, for use with orthographic rendering only. **/
    public float getOrthoWindowHeight();

    /** 
    Gets the orthographic window width, for use with orthographic rendering only. **/
    public float getOrthoWindowWidth();

    /** 
    Modifies this frustum so it always renders from the reflection of itself through the plane specified. **/
    public void enableReflection(org.ogre4j.IPlane p);

    /** 
    Modifies this frustum so it always renders from the reflection of itself through the plane specified. Note that this version of the method links to a plane so that changes to it are picked up automatically. It is important that this plane continues to exist whilst this object does; do not destroy the plane before the frustum. **/
    public void enableReflection(org.ogre4j.IMovablePlane p);

    /** 
    Disables reflection modification previously turned on with enableReflection **/
    public void disableReflection();

    /** **/
    public boolean isReflected();

    /** **/
    public org.ogre4j.IMatrix4 getReflectionMatrix();

    /** **/
    public org.ogre4j.IPlane getReflectionPlane();

    /** 
    Project a sphere onto the near plane and get the bounding rectangle. **/
    public boolean projectSphere(org.ogre4j.ISphere sphere, FloatPointer left, FloatPointer top, FloatPointer right, FloatPointer bottom);

    /** 
    Links the frustum to a custom near clip plane, which can be used to clip geometry in a custom manner without using user clip planes. **/
    public void enableCustomNearClipPlane(org.ogre4j.IMovablePlane plane);

    /** 
    Links the frustum to a custom near clip plane, which can be used to clip geometry in a custom manner without using user clip planes. **/
    public void enableCustomNearClipPlane(org.ogre4j.IPlane plane);

    /** 
    Disables any custom near clip plane. **/
    public void disableCustomNearClipPlane();

    /** 
    Is a custom near clip plane in use? **/
    public boolean isCustomNearClipPlaneEnabled();

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** 
    Get the derived position of this frustum. **/
    public org.ogre4j.IVector3 getPositionForViewUpdate();

    /** 
    Get the derived orientation of this frustum. **/
    public org.ogre4j.IQuaternion getOrientationForViewUpdate();

}
