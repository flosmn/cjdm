/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ControllerManager extends org.xbig.base.NativeObject implements org.ogre4j.IControllerManager {
static { System.loadLibrary("ogre4j");}
protected static class ControllerList extends org.xbig.base.NativeObject implements org.ogre4j.IControllerManager.IControllerList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ControllerList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ControllerList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ControllerList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ControllerList() {
         super( new org.xbig.base.InstancePointer(__createControllerList()), false);
    }

    private native static long __createControllerList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IController< Float > key) {
         return _count__Ogre_Controller__float__P(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_Controller__float__P(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IController< Float > key) {
         return _erase__Ogre_Controller__float__P(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_Controller__float__P(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ControllerManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ControllerManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ControllerManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ControllerManager() {
         super( new org.xbig.base.InstancePointer(__createControllerManager()), false);
    }

    private native static long __createControllerManager();

    /** 
    Creates a new controller and registers it with the manager. **/
    public void createController(org.ogre4j.IController< Float > returnValue, org.ogre4j.IControllerValueRealPtr src, org.ogre4j.IControllerValueRealPtr dest, org.ogre4j.IControllerFunctionRealPtr func) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createController__ControllerValueRealPtrRControllerValueRealPtrRControllerFunctionRealPtrR(this.object.pointer, src.getInstancePointer().pointer,  dest.getInstancePointer().pointer,  func.getInstancePointer().pointer)), true);
    }

    private native long _createController__ControllerValueRealPtrRControllerValueRealPtrRControllerFunctionRealPtrR(long _pointer_, long src, long dest, long func);

    /** 
    Creates a new controller use frame time source and passthrough controller function. **/
    public void createFrameTimePassthroughController(org.ogre4j.IController< Float > returnValue, org.ogre4j.IControllerValueRealPtr dest) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createFrameTimePassthroughController__ControllerValueRealPtrR(this.object.pointer, dest.getInstancePointer().pointer)), true);
    }

    private native long _createFrameTimePassthroughController__ControllerValueRealPtrR(long _pointer_, long dest);

    /** 
    Destroys all the controllers in existence. **/
    public void clearControllers() {
        _clearControllers(this.object.pointer);
    }

    private native void _clearControllers(long _pointer_);

    /** 
    Updates all the registered controllers. **/
    public void updateAllControllers() {
        _updateAllControllers(this.object.pointer);
    }

    private native void _updateAllControllers(long _pointer_);

    /** 
    Returns a  which provides the time since the last frame as a control value source. **/
    public org.ogre4j.IControllerValueRealPtr getFrameTimeSource() {
         return new org.ogre4j.ControllerValueRealPtr(new InstancePointer(_getFrameTimeSource_const(this.object.pointer)));
    }

    private native long _getFrameTimeSource_const(long _pointer_);

    /** 
    Retrieve a simple passthrough controller function. **/
    public org.ogre4j.IControllerFunctionRealPtr getPassthroughControllerFunction() {
         return new org.ogre4j.ControllerFunctionRealPtr(new InstancePointer(_getPassthroughControllerFunction_const(this.object.pointer)));
    }

    private native long _getPassthroughControllerFunction_const(long _pointer_);

    /** 
    Creates a texture layer animator controller. **/
    public void createTextureAnimator(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float sequenceTime) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createTextureAnimator__TextureUnitStatepRealv(this.object.pointer, layer.getInstancePointer().pointer,  sequenceTime)), true);
    }

    private native long _createTextureAnimator__TextureUnitStatepRealv(long _pointer_, long layer, float sequenceTime);

    /** 
    Creates a basic time-based texture uv coordinate modifier designed for creating scrolling textures. **/
    public void createTextureUVScroller(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float speed) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createTextureUVScroller__TextureUnitStatepRealv(this.object.pointer, layer.getInstancePointer().pointer,  speed)), true);
    }

    private native long _createTextureUVScroller__TextureUnitStatepRealv(long _pointer_, long layer, float speed);

    /** 
    Creates a basic time-based texture u coordinate modifier designed for creating scrolling textures. **/
    public void createTextureUScroller(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float uSpeed) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createTextureUScroller__TextureUnitStatepRealv(this.object.pointer, layer.getInstancePointer().pointer,  uSpeed)), true);
    }

    private native long _createTextureUScroller__TextureUnitStatepRealv(long _pointer_, long layer, float uSpeed);

    /** 
    Creates a basic time-based texture v coordinate modifier designed for creating scrolling textures. **/
    public void createTextureVScroller(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float vSpeed) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createTextureVScroller__TextureUnitStatepRealv(this.object.pointer, layer.getInstancePointer().pointer,  vSpeed)), true);
    }

    private native long _createTextureVScroller__TextureUnitStatepRealv(long _pointer_, long layer, float vSpeed);

    /** 
    Creates a basic time-based texture coordinate modifier designed for creating rotating textures. **/
    public void createTextureRotater(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float speed) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createTextureRotater__TextureUnitStatepRealv(this.object.pointer, layer.getInstancePointer().pointer,  speed)), true);
    }

    private native long _createTextureRotater__TextureUnitStatepRealv(long _pointer_, long layer, float speed);

    /** 
    Creates a very flexible time-based texture transformation which can alter the scale, position or rotation of a texture based on a wave function. **/
    public void createTextureWaveTransformer(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, org.ogre4j.TextureUnitState.TextureTransformType ttype, org.ogre4j.WaveformType waveType, float base, float frequency, float phase, float amplitude) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createTextureWaveTransformer__TextureUnitStatepTextureUnitState_TextureTransformTypevWaveformTypevRealvRealvRealvRealv(this.object.pointer, layer.getInstancePointer().pointer,  ttype.getValue(),  waveType.getValue(),  base,  frequency,  phase,  amplitude)), true);
    }

    private native long _createTextureWaveTransformer__TextureUnitStatepTextureUnitState_TextureTransformTypevWaveformTypevRealvRealvRealvRealv(long _pointer_, long layer, int ttype, int waveType, float base, float frequency, float phase, float amplitude);

    /** 
    Creates a controller for passing a frame time value through to a vertex / fragment program parameter. **/
    public void createGpuProgramTimerParam(org.ogre4j.IController< Float > returnValue, org.ogre4j.IGpuProgramParameters params, int paramIndex, float timeFactor) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createGpuProgramTimerParam__GpuProgramParameterspivRealv(this.object.pointer, params.getInstancePointer().pointer,  paramIndex,  timeFactor)), true);
    }

    private native long _createGpuProgramTimerParam__GpuProgramParameterspivRealv(long _pointer_, long params, int paramIndex, float timeFactor);

    /** 
    Removes & destroys the controller passed in as a pointer. **/
    public void destroyController(org.ogre4j.IController< Float > controller) {
        _destroyController__Controller__Real__p(this.object.pointer, controller.getInstancePointer().pointer);
    }

    private native void _destroyController__Controller__Real__p(long _pointer_, long controller);

    /** 
    Return relative speed of time as perceived by time based controllers. **/
    public float getTimeFactor() {
         return _getTimeFactor_const(this.object.pointer);
    }

    private native float _getTimeFactor_const(long _pointer_);

    /** 
    Set the relative speed to update frame time based controllers. **/
    public void setTimeFactor(float tf) {
        _setTimeFactor__Realv(this.object.pointer, tf);
    }

    private native void _setTimeFactor__Realv(long _pointer_, float tf);

    /** 
    Gets the constant that is added to time lapsed between each frame. **/
    public float getFrameDelay() {
         return _getFrameDelay_const(this.object.pointer);
    }

    private native float _getFrameDelay_const(long _pointer_);

    /** 
    Sets a constant frame rate. **/
    public void setFrameDelay(float fd) {
        _setFrameDelay__Realv(this.object.pointer, fd);
    }

    private native void _setFrameDelay__Realv(long _pointer_, float fd);

    /** 
    Return the elapsed time. **/
    public float getElapsedTime() {
         return _getElapsedTime_const(this.object.pointer);
    }

    private native float _getElapsedTime_const(long _pointer_);

    /** 
    Set the elapsed time. **/
    public void setElapsedTime(float elapsedTime) {
        _setElapsedTime__Realv(this.object.pointer, elapsedTime);
    }

    private native void _setElapsedTime__Realv(long _pointer_, float elapsedTime);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IControllerManager getSingleton() {
         return new org.ogre4j.ControllerManager(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IControllerManager getSingletonPtr() {
         return new org.ogre4j.ControllerManager(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

}
