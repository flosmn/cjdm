/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ResourceGroupManager extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager {
static { System.loadLibrary("ogre4j");}
public static class ResourceDeclaration extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceDeclaration {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceDeclaration(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceDeclaration(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceDeclaration(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceDeclaration() {
         super( new org.xbig.base.InstancePointer(__createResourceDeclaration()), false);
    }

    private native static long __createResourceDeclaration();

    /** **/
    public String getresourceName() {
         return _getresourceName(this.object.pointer);
    }

    private native String _getresourceName(long _pointer_);

    /** **/
    public void setresourceName(String _jni_value_) {
        _setresourceName(this.object.pointer, _jni_value_);
    }

    private native void _setresourceName(long _pointer_, String _jni_value_);

    /** **/
    public String getresourceType() {
         return _getresourceType(this.object.pointer);
    }

    private native String _getresourceType(long _pointer_);

    /** **/
    public void setresourceType(String _jni_value_) {
        _setresourceType(this.object.pointer, _jni_value_);
    }

    private native void _setresourceType(long _pointer_, String _jni_value_);

    /** **/
    public org.ogre4j.IManualResourceLoader getloader() {
         return new org.ogre4j.ManualResourceLoader(new InstancePointer(_getloader(this.object.pointer)));
    }

    private native long _getloader(long _pointer_);

    /** **/
    public void setloader(org.ogre4j.IManualResourceLoader _jni_value_) {
        _setloader(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setloader(long _pointer_, long _jni_value_);

    /** **/
    public void getparameters(org.ogre4j.INameValuePairList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getparameters(this.object.pointer)), false);
    }

    private native long _getparameters(long _pointer_);

    /** **/
    public void setparameters(org.ogre4j.INameValuePairList _jni_value_) {
        _setparameters(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setparameters(long _pointer_, long _jni_value_);

}
protected static class ResourceGroup extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceGroup {
static { System.loadLibrary("ogre4j");}
public enum Status implements INativeEnum < Status > {
    UNINITIALSED(StatusHelper.ENUM_VALUES[0]),
    INITIALISING(StatusHelper.ENUM_VALUES[1]),
    INITIALISED(StatusHelper.ENUM_VALUES[2]),
    LOADING(StatusHelper.ENUM_VALUES[3]),
    LOADED(StatusHelper.ENUM_VALUES[4]);

    private int value;

    Status(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public Status getEnum(int val) {
        return toEnum(val);
    }

    public static final Status toEnum(int retval) {
    if (retval ==UNINITIALSED.value)
        return Status.UNINITIALSED;
    else if (retval ==INITIALISING.value)
        return Status.INITIALISING;
    else if (retval ==INITIALISED.value)
        return Status.INITIALISED;
    else if (retval ==LOADING.value)
        return Status.LOADING;
    else if (retval ==LOADED.value)
        return Status.LOADED;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class StatusHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public static class LoadResourceOrderMap extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceGroup.ILoadResourceOrderMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LoadResourceOrderMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LoadResourceOrderMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LoadResourceOrderMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LoadResourceOrderMap() {
         super( new org.xbig.base.InstancePointer(__createLoadResourceOrderMap()), false);
    }

    private native static long __createLoadResourceOrderMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(float key) {
         return _count__FR(this.object.pointer, key);
    }

    private native int _count__FR(long _pointer_, float key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(float key) {
         return _erase__FR(this.object.pointer, key);
    }

    private native int _erase__FR(long _pointer_, float key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IResourceGroupManager.ILoadUnloadResourceList get(float key) {
         return new org.ogre4j.ResourceGroupManager.LoadUnloadResourceList(new InstancePointer(_get__FR(this.object.pointer, key)));
    }

    private native long _get__FR(long _pointer_, float key);

    /** **/
    public void insert(float key, org.ogre4j.IResourceGroupManager.ILoadUnloadResourceList value) {
        _insert__FROgre_ResourceGroupManager_LoadUnloadResourceListp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__FROgre_ResourceGroupManager_LoadUnloadResourceListp(long _pointer_, float key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceGroup(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceGroup(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceGroup(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceGroup() {
         super( new org.xbig.base.InstancePointer(__createResourceGroup()), false);
    }

    private native static long __createResourceGroup();

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public org.ogre4j.ResourceGroupManager.ResourceGroup.Status getgroupStatus() {
         return org.ogre4j.ResourceGroupManager.ResourceGroup.Status.toEnum(_getgroupStatus(this.object.pointer));
    }

    private native int _getgroupStatus(long _pointer_);

    /** **/
    public void setgroupStatus(org.ogre4j.ResourceGroupManager.ResourceGroup.Status _jni_value_) {
        _setgroupStatus(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setgroupStatus(long _pointer_, int _jni_value_);

    /** **/
    public void getlocationList(org.ogre4j.IResourceGroupManager.ILocationList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getlocationList(this.object.pointer)), false);
    }

    private native long _getlocationList(long _pointer_);

    /** **/
    public void setlocationList(org.ogre4j.IResourceGroupManager.ILocationList _jni_value_) {
        _setlocationList(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setlocationList(long _pointer_, long _jni_value_);

    /** **/
    public void getresourceIndexCaseSensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getresourceIndexCaseSensitive(this.object.pointer)), false);
    }

    private native long _getresourceIndexCaseSensitive(long _pointer_);

    /** **/
    public void setresourceIndexCaseSensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex _jni_value_) {
        _setresourceIndexCaseSensitive(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setresourceIndexCaseSensitive(long _pointer_, long _jni_value_);

    /** **/
    public void getresourceIndexCaseInsensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getresourceIndexCaseInsensitive(this.object.pointer)), false);
    }

    private native long _getresourceIndexCaseInsensitive(long _pointer_);

    /** **/
    public void setresourceIndexCaseInsensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex _jni_value_) {
        _setresourceIndexCaseInsensitive(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setresourceIndexCaseInsensitive(long _pointer_, long _jni_value_);

    /** **/
    public void getresourceDeclarations(org.ogre4j.IResourceGroupManager.IResourceDeclarationList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getresourceDeclarations(this.object.pointer)), false);
    }

    private native long _getresourceDeclarations(long _pointer_);

    /** **/
    public void setresourceDeclarations(org.ogre4j.IResourceGroupManager.IResourceDeclarationList _jni_value_) {
        _setresourceDeclarations(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setresourceDeclarations(long _pointer_, long _jni_value_);

    /** **/
    public void getloadResourceOrderMap(org.ogre4j.IResourceGroupManager.IResourceGroup.ILoadResourceOrderMap returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getloadResourceOrderMap(this.object.pointer)), false);
    }

    private native long _getloadResourceOrderMap(long _pointer_);

    /** **/
    public void setloadResourceOrderMap(org.ogre4j.IResourceGroupManager.IResourceGroup.ILoadResourceOrderMap _jni_value_) {
        _setloadResourceOrderMap(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setloadResourceOrderMap(long _pointer_, long _jni_value_);

    /** **/
    public String getworldGeometry() {
         return _getworldGeometry(this.object.pointer);
    }

    private native String _getworldGeometry(long _pointer_);

    /** **/
    public void setworldGeometry(String _jni_value_) {
        _setworldGeometry(this.object.pointer, _jni_value_);
    }

    private native void _setworldGeometry(long _pointer_, String _jni_value_);

    /** **/
    public org.ogre4j.ISceneManager getworldGeometrySceneManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(_getworldGeometrySceneManager(this.object.pointer)));
    }

    private native long _getworldGeometrySceneManager(long _pointer_);

    /** **/
    public void setworldGeometrySceneManager(org.ogre4j.ISceneManager _jni_value_) {
        _setworldGeometrySceneManager(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setworldGeometrySceneManager(long _pointer_, long _jni_value_);

}
protected static class ResourceLocation extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceLocation {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceLocation(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceLocation(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceLocation(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceLocation() {
         super( new org.xbig.base.InstancePointer(__createResourceLocation()), false);
    }

    private native static long __createResourceLocation();

    /** **/
    public org.ogre4j.IArchive getarchive() {
         return new org.ogre4j.Archive(new InstancePointer(_getarchive(this.object.pointer)));
    }

    private native long _getarchive(long _pointer_);

    /** **/
    public void setarchive(org.ogre4j.IArchive _jni_value_) {
        _setarchive(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setarchive(long _pointer_, long _jni_value_);

    /** **/
    public boolean getrecursive() {
         return _getrecursive(this.object.pointer);
    }

    private native boolean _getrecursive(long _pointer_);

    /** **/
    public void setrecursive(boolean _jni_value_) {
        _setrecursive(this.object.pointer, _jni_value_);
    }

    private native void _setrecursive(long _pointer_, boolean _jni_value_);

}
public static class ResourceDeclarationList extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceDeclarationList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceDeclarationList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceDeclarationList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceDeclarationList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceDeclarationList() {
         super( new org.xbig.base.InstancePointer(__createResourceDeclarationList()), false);
    }

    private native static long __createResourceDeclarationList();

    /** **/
    public void assign(int num, org.ogre4j.IResourceGroupManager.IResourceDeclaration val) {
        _assign__ivOgre_ResourceGroupManager_ResourceDeclarationR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ResourceGroupManager_ResourceDeclarationR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceDeclaration back() {
         return new org.ogre4j.ResourceGroupManager.ResourceDeclaration(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceDeclaration front() {
         return new org.ogre4j.ResourceGroupManager.ResourceDeclaration(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IResourceGroupManager.IResourceDeclaration val) {
        _push_back__Ogre_ResourceGroupManager_ResourceDeclarationR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ResourceGroupManager_ResourceDeclarationR(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IResourceGroupManager.IResourceDeclaration val) {
        _push_front__Ogre_ResourceGroupManager_ResourceDeclarationR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ResourceGroupManager_ResourceDeclarationR(long _pointer_, long val);





    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);





}
public static class ResourceManagerMap extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceManagerMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceManagerMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceManagerMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceManagerMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceManagerMap() {
         super( new org.xbig.base.InstancePointer(__createResourceManagerMap()), false);
    }

    private native static long __createResourceManagerMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IResourceManager get(String key) {
         return new org.ogre4j.ResourceManager(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IResourceManager value) {
        _insert__sROgre_ResourceManagerp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ResourceManagerp(long _pointer_, String key, long value);

}
public static class ResourceManagerIterator extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceManagerIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceManagerIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceManagerIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceManagerIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceManagerIterator(org.ogre4j.IResourceGroupManager.IResourceManagerMap c) {
         super( new org.xbig.base.InstancePointer(__createResourceManagerIterator__Ogre_ResourceGroupManager_ResourceManagerMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createResourceManagerIterator__Ogre_ResourceGroupManager_ResourceManagerMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IResourceManager getNext() {
         return new org.ogre4j.ResourceManager(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IResourceManager peekNextValue() {
         return new org.ogre4j.ResourceManager(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceManagerIterator operatorAssignment(org.ogre4j.IResourceGroupManager.IResourceManagerIterator rhs) {
         return new org.ogre4j.ResourceGroupManager.ResourceManagerIterator(new InstancePointer(_operatorAssignment___Ogre_ResourceGroupManager_ResourceManagerIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_ResourceGroupManager_ResourceManagerIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IResourceManager> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IResourceManager>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
protected static class ScriptLoaderOrderMap extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IScriptLoaderOrderMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ScriptLoaderOrderMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ScriptLoaderOrderMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ScriptLoaderOrderMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ScriptLoaderOrderMap() {
         super( new org.xbig.base.InstancePointer(__createScriptLoaderOrderMap()), false);
    }

    private native static long __createScriptLoaderOrderMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(float key) {
         return _count__FR(this.object.pointer, key);
    }

    private native int _count__FR(long _pointer_, float key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(float key) {
         return _erase__FR(this.object.pointer, key);
    }

    private native int _erase__FR(long _pointer_, float key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
protected static class ResourceGroupListenerList extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceGroupListenerList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceGroupListenerList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceGroupListenerList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceGroupListenerList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceGroupListenerList() {
         super( new org.xbig.base.InstancePointer(__createResourceGroupListenerList()), false);
    }

    private native static long __createResourceGroupListenerList();

    /** **/
    public void assign(int num, org.ogre4j.IResourceGroupListener val) {
        _assign__ivOgre_ResourceGroupListenerP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ResourceGroupListenerP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IResourceGroupListener at(int loc) {
         return new org.ogre4j.ResourceGroupListener(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IResourceGroupListener back() {
         return new org.ogre4j.ResourceGroupListener(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IResourceGroupListener front() {
         return new org.ogre4j.ResourceGroupListener(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IResourceGroupListener val) {
        _push_back__Ogre_ResourceGroupListenerP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ResourceGroupListenerP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class ResourceLocationIndex extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceLocationIndex {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceLocationIndex(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceLocationIndex(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceLocationIndex(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceLocationIndex() {
         super( new org.xbig.base.InstancePointer(__createResourceLocationIndex()), false);
    }

    private native static long __createResourceLocationIndex();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IArchive get(String key) {
         return new org.ogre4j.Archive(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IArchive value) {
        _insert__sROgre_Archivep(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_Archivep(long _pointer_, String key, long value);

}
protected static class LocationList extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.ILocationList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LocationList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LocationList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LocationList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LocationList() {
         super( new org.xbig.base.InstancePointer(__createLocationList()), false);
    }

    private native static long __createLocationList();

    /** **/
    public void assign(int num, org.ogre4j.IResourceGroupManager.IResourceLocation val) {
        _assign__ivOgre_ResourceGroupManager_ResourceLocationP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ResourceGroupManager_ResourceLocationP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceLocation back() {
         return new org.ogre4j.ResourceGroupManager.ResourceLocation(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceLocation front() {
         return new org.ogre4j.ResourceGroupManager.ResourceLocation(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IResourceGroupManager.IResourceLocation val) {
        _push_back__Ogre_ResourceGroupManager_ResourceLocationP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ResourceGroupManager_ResourceLocationP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IResourceGroupManager.IResourceLocation val) {
        _push_front__Ogre_ResourceGroupManager_ResourceLocationP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ResourceGroupManager_ResourceLocationP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IResourceGroupManager.IResourceLocation val) {
        _remove__Ogre_ResourceGroupManager_ResourceLocationP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_ResourceGroupManager_ResourceLocationP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class LoadUnloadResourceList extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.ILoadUnloadResourceList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LoadUnloadResourceList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LoadUnloadResourceList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LoadUnloadResourceList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LoadUnloadResourceList() {
         super( new org.xbig.base.InstancePointer(__createLoadUnloadResourceList()), false);
    }

    private native static long __createLoadUnloadResourceList();

    /** **/
    public void assign(int num, org.ogre4j.IResourcePtr val) {
        _assign__ivOgre_ResourcePtrR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ResourcePtrR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IResourcePtr back() {
         return new org.ogre4j.ResourcePtr(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IResourcePtr front() {
         return new org.ogre4j.ResourcePtr(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IResourcePtr val) {
        _push_back__Ogre_ResourcePtrR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ResourcePtrR(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IResourcePtr val) {
        _push_front__Ogre_ResourcePtrR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ResourcePtrR(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IResourcePtr val) {
        _remove__Ogre_ResourcePtrR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_ResourcePtrR(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class ResourceGroupMap extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupManager.IResourceGroupMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceGroupMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceGroupMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceGroupMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceGroupMap() {
         super( new org.xbig.base.InstancePointer(__createResourceGroupMap()), false);
    }

    private native static long __createResourceGroupMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceGroup get(String key) {
         return new org.ogre4j.ResourceGroupManager.ResourceGroup(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IResourceGroupManager.IResourceGroup value) {
        _insert__sROgre_ResourceGroupManager_ResourceGroupp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ResourceGroupManager_ResourceGroupp(long _pointer_, String key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceGroupManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceGroupManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceGroupManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ResourceGroupManager() {
         super( new org.xbig.base.InstancePointer(__createResourceGroupManager()), false);
    }

    private native static long __createResourceGroupManager();

    /** 
    Create a resource group. **/
    public void createResourceGroup(String name) {
        _createResourceGroup__StringR(this.object.pointer, name);
    }

    private native void _createResourceGroup__StringR(long _pointer_, String name);

    /** 
    Initialises a resource group. **/
    public void initialiseResourceGroup(String name) {
        _initialiseResourceGroup__StringR(this.object.pointer, name);
    }

    private native void _initialiseResourceGroup__StringR(long _pointer_, String name);

    /** 
    Initialise all resource groups which are yet to be initialised. **/
    public void initialiseAllResourceGroups() {
        _initialiseAllResourceGroups(this.object.pointer);
    }

    private native void _initialiseAllResourceGroups(long _pointer_);

    /** 
    Prepares a resource group. 
When this method is called, this class will callback any ResourceGroupListeners which have been registered to update them on progress. **/
    public void prepareResourceGroup(String name, boolean prepareMainResources, boolean prepareWorldGeom) {
        _prepareResourceGroup__StringRbvbv(this.object.pointer, name,  prepareMainResources,  prepareWorldGeom);
    }

    private native void _prepareResourceGroup__StringRbvbv(long _pointer_, String name, boolean prepareMainResources, boolean prepareWorldGeom);

    /** 
    Loads a resource group. 
When this method is called, this class will callback any ResourceGroupListeners which have been registered to update them on progress. **/
    public void loadResourceGroup(String name, boolean loadMainResources, boolean loadWorldGeom) {
        _loadResourceGroup__StringRbvbv(this.object.pointer, name,  loadMainResources,  loadWorldGeom);
    }

    private native void _loadResourceGroup__StringRbvbv(long _pointer_, String name, boolean loadMainResources, boolean loadWorldGeom);

    /** 
    Unloads a resource group. **/
    public void unloadResourceGroup(String name, boolean reloadableOnly) {
        _unloadResourceGroup__StringRbv(this.object.pointer, name,  reloadableOnly);
    }

    private native void _unloadResourceGroup__StringRbv(long _pointer_, String name, boolean reloadableOnly);

    /** 
    Unload all resources which are not referenced by any other object. **/
    public void unloadUnreferencedResourcesInGroup(String name, boolean reloadableOnly) {
        _unloadUnreferencedResourcesInGroup__StringRbv(this.object.pointer, name,  reloadableOnly);
    }

    private native void _unloadUnreferencedResourcesInGroup__StringRbv(long _pointer_, String name, boolean reloadableOnly);

    /** 
    Clears a resource group. **/
    public void clearResourceGroup(String name) {
        _clearResourceGroup__StringR(this.object.pointer, name);
    }

    private native void _clearResourceGroup__StringR(long _pointer_, String name);

    /** 
    Destroys a resource group, clearing it first, destroying the resources which are part of it, and then removing it from the list of resource groups. **/
    public void destroyResourceGroup(String name) {
        _destroyResourceGroup__StringR(this.object.pointer, name);
    }

    private native void _destroyResourceGroup__StringR(long _pointer_, String name);

    /** 
    Checks the status of a resource group. **/
    public boolean isResourceGroupInitialised(String name) {
         return _isResourceGroupInitialised__StringR(this.object.pointer, name);
    }

    private native boolean _isResourceGroupInitialised__StringR(long _pointer_, String name);

    /** 
    Checks the status of a resource group. **/
    public boolean isResourceGroupLoaded(String name) {
         return _isResourceGroupLoaded__StringR(this.object.pointer, name);
    }

    private native boolean _isResourceGroupLoaded__StringR(long _pointer_, String name);

    /** 
    Method to add a resource location to for a given resource group. **/
    public void addResourceLocation(String name, String locType, String resGroup, boolean recursive) {
        _addResourceLocation__StringRStringRStringRbv(this.object.pointer, name,  locType,  resGroup,  recursive);
    }

    private native void _addResourceLocation__StringRStringRStringRbv(long _pointer_, String name, String locType, String resGroup, boolean recursive);

    /** 
    Removes a resource location from the search path. **/
    public void removeResourceLocation(String name, String resGroup) {
        _removeResourceLocation__StringRStringR(this.object.pointer, name,  resGroup);
    }

    private native void _removeResourceLocation__StringRStringR(long _pointer_, String name, String resGroup);

    /** 
    Declares a resource to be a part of a resource group, allowing you to load and unload it as part of the group. **/
    public void declareResource(String name, String resourceType, String groupName, org.ogre4j.INameValuePairList loadParameters) {
        _declareResource__StringRStringRStringRNameValuePairListR(this.object.pointer, name,  resourceType,  groupName,  loadParameters.getInstancePointer().pointer);
    }

    private native void _declareResource__StringRStringRStringRNameValuePairListR(long _pointer_, String name, String resourceType, String groupName, long loadParameters);

    /** 
    Declares a resource to be a part of a resource group, allowing you to load and unload it as part of the group. **/
    public void declareResource(String name, String resourceType, String groupName, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList loadParameters) {
        _declareResource__StringRStringRStringRManualResourceLoaderpNameValuePairListR(this.object.pointer, name,  resourceType,  groupName,  loader.getInstancePointer().pointer,  loadParameters.getInstancePointer().pointer);
    }

    private native void _declareResource__StringRStringRStringRManualResourceLoaderpNameValuePairListR(long _pointer_, String name, String resourceType, String groupName, long loader, long loadParameters);

    /** 
    Undeclare a resource. **/
    public void undeclareResource(String name, String groupName) {
        _undeclareResource__StringRStringR(this.object.pointer, name,  groupName);
    }

    private native void _undeclareResource__StringRStringR(long _pointer_, String name, String groupName);

    /** 
    Open a single resource by name and return a  pointing at the source of the data. **/
    public void openResource(org.ogre4j.IDataStreamPtr returnValue, String resourceName, String groupName, boolean searchGroupsIfNotFound, org.ogre4j.IResource resourceBeingLoaded) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_openResource__StringRStringRbvResourcep(this.object.pointer, resourceName,  groupName,  searchGroupsIfNotFound,  resourceBeingLoaded.getInstancePointer().pointer)), false);
    }

    private native long _openResource__StringRStringRbvResourcep(long _pointer_, String resourceName, String groupName, boolean searchGroupsIfNotFound, long resourceBeingLoaded);

    /** 
    Open all resources matching a given pattern (which can contain the character '*' as a wildcard), and return a collection of  objects on them. **/
    public void openResources(org.ogre4j.IDataStreamListPtr returnValue, String pattern, String groupName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_openResources__StringRStringR(this.object.pointer, pattern,  groupName)), false);
    }

    private native long _openResources__StringRStringR(long _pointer_, String pattern, String groupName);

    /** 
    List all file or directory names in a resource group. **/
    public void listResourceNames(org.ogre4j.IStringVectorPtr returnValue, String groupName, boolean dirs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_listResourceNames__StringRbv(this.object.pointer, groupName,  dirs)), false);
    }

    private native long _listResourceNames__StringRbv(long _pointer_, String groupName, boolean dirs);

    /** 
    List all files in a resource group with accompanying information. **/
    public void listResourceFileInfo(org.ogre4j.IFileInfoListPtr returnValue, String groupName, boolean dirs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_listResourceFileInfo__StringRbv(this.object.pointer, groupName,  dirs)), false);
    }

    private native long _listResourceFileInfo__StringRbv(long _pointer_, String groupName, boolean dirs);

    /** 
    Find all file or directory names matching a given pattern in a resource group. **/
    public void findResourceNames(org.ogre4j.IStringVectorPtr returnValue, String groupName, String pattern, boolean dirs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_findResourceNames__StringRStringRbv(this.object.pointer, groupName,  pattern,  dirs)), false);
    }

    private native long _findResourceNames__StringRStringRbv(long _pointer_, String groupName, String pattern, boolean dirs);

    /** 
    Find out if the named file exists in a group. **/
    public boolean resourceExists(String group, String filename) {
         return _resourceExists__StringRStringR(this.object.pointer, group,  filename);
    }

    private native boolean _resourceExists__StringRStringR(long _pointer_, String group, String filename);

    /** 
    Find out if the named file exists in a group. **/
    public boolean resourceExists(org.ogre4j.IResourceGroupManager.IResourceGroup group, String filename) {
         return _resourceExists__ResourceGrouppStringR(this.object.pointer, group.getInstancePointer().pointer,  filename);
    }

    private native boolean _resourceExists__ResourceGrouppStringR(long _pointer_, long group, String filename);

    /** 
    Find the group in which a resource exists. **/
    public String findGroupContainingResource(String filename) {
         return _findGroupContainingResource__StringR(this.object.pointer, filename);
    }

    private native String _findGroupContainingResource__StringR(long _pointer_, String filename);

    /** 
    Find all files or directories matching a given pattern in a group and get some detailed information about them. **/
    public void findResourceFileInfo(org.ogre4j.IFileInfoListPtr returnValue, String group, String pattern, boolean dirs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_findResourceFileInfo__StringRStringRbv(this.object.pointer, group,  pattern,  dirs)), false);
    }

    private native long _findResourceFileInfo__StringRStringRbv(long _pointer_, String group, String pattern, boolean dirs);

    /** 
    Retrieve the modification time of a given file **/
    public long resourceModifiedTime(String group, String filename) {
         return _resourceModifiedTime__StringRStringR(this.object.pointer, group,  filename);
    }

    private native long _resourceModifiedTime__StringRStringR(long _pointer_, String group, String filename);

    /** 
    Retrieve the modification time of a given file **/
    public long resourceModifiedTime(org.ogre4j.IResourceGroupManager.IResourceGroup group, String filename) {
         return _resourceModifiedTime__ResourceGrouppStringR(this.object.pointer, group.getInstancePointer().pointer,  filename);
    }

    private native long _resourceModifiedTime__ResourceGrouppStringR(long _pointer_, long group, String filename);

    /** 
    Adds a  which will be called back during resource loading events. **/
    public void addResourceGroupListener(org.ogre4j.IResourceGroupListener l) {
        _addResourceGroupListener__ResourceGroupListenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _addResourceGroupListener__ResourceGroupListenerp(long _pointer_, long l);

    /** 
    Removes a **/
    public void removeResourceGroupListener(org.ogre4j.IResourceGroupListener l) {
        _removeResourceGroupListener__ResourceGroupListenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _removeResourceGroupListener__ResourceGroupListenerp(long _pointer_, long l);

    /** 
    Sets the resource group that 'world' resources will use. **/
    public void setWorldResourceGroupName(String groupName) {
        _setWorldResourceGroupName__StringR(this.object.pointer, groupName);
    }

    private native void _setWorldResourceGroupName__StringR(long _pointer_, String groupName);

    /** **/
    public String getWorldResourceGroupName() {
         return _getWorldResourceGroupName_const(this.object.pointer);
    }

    private native String _getWorldResourceGroupName_const(long _pointer_);

    /** 
    Associates some world geometry with a resource group, causing it to be loaded / unloaded with the resource group. **/
    public void linkWorldGeometryToResourceGroup(String group, String worldGeometry, org.ogre4j.ISceneManager sceneManager) {
        _linkWorldGeometryToResourceGroup__StringRStringRSceneManagerp(this.object.pointer, group,  worldGeometry,  sceneManager.getInstancePointer().pointer);
    }

    private native void _linkWorldGeometryToResourceGroup__StringRStringRSceneManagerp(long _pointer_, String group, String worldGeometry, long sceneManager);

    /** 
    Clear any link to world geometry from a resource group. **/
    public void unlinkWorldGeometryFromResourceGroup(String group) {
        _unlinkWorldGeometryFromResourceGroup__StringR(this.object.pointer, group);
    }

    private native void _unlinkWorldGeometryFromResourceGroup__StringR(long _pointer_, String group);

    /** 
    Shutdown all ResourceManagers, performed as part of clean-up. **/
    public void shutdownAll() {
        _shutdownAll(this.object.pointer);
    }

    private native void _shutdownAll(long _pointer_);

    /** 
    Internal method for registering a  (which should be a singleton). Creators of plugins can register new ResourceManagers this way if they wish. **/
    public void _registerResourceManager(String resourceType, org.ogre4j.IResourceManager rm) {
        __registerResourceManager__StringRResourceManagerp(this.object.pointer, resourceType,  rm.getInstancePointer().pointer);
    }

    private native void __registerResourceManager__StringRResourceManagerp(long _pointer_, String resourceType, long rm);

    /** 
    Internal method for unregistering a . **/
    public void _unregisterResourceManager(String resourceType) {
        __unregisterResourceManager__StringR(this.object.pointer, resourceType);
    }

    private native void __unregisterResourceManager__StringR(long _pointer_, String resourceType);

    /** 
    Get an iterator over the registered resource managers. **/
    public void getResourceManagerIterator(org.ogre4j.IResourceGroupManager.IResourceManagerIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getResourceManagerIterator(this.object.pointer)), false);
    }

    private native long _getResourceManagerIterator(long _pointer_);

    /** 
    Internal method for registering a . **/
    public void _registerScriptLoader(org.ogre4j.IScriptLoader su) {
        __registerScriptLoader__ScriptLoaderp(this.object.pointer, su.getInstancePointer().pointer);
    }

    private native void __registerScriptLoader__ScriptLoaderp(long _pointer_, long su);

    /** 
    Internal method for unregistering a . **/
    public void _unregisterScriptLoader(org.ogre4j.IScriptLoader su) {
        __unregisterScriptLoader__ScriptLoaderp(this.object.pointer, su.getInstancePointer().pointer);
    }

    private native void __unregisterScriptLoader__ScriptLoaderp(long _pointer_, long su);

    /** 
    Internal method for getting a registered . **/
    public org.ogre4j.IResourceManager _getResourceManager(String resourceType) {
         return new org.ogre4j.ResourceManager(new InstancePointer(__getResourceManager__StringR(this.object.pointer, resourceType)));
    }

    private native long __getResourceManager__StringR(long _pointer_, String resourceType);

    /** 
    Internal method called by  when a resource is created. **/
    public void _notifyResourceCreated(org.ogre4j.IResourcePtr res) {
        __notifyResourceCreated__ResourcePtrr(this.object.pointer, res.getInstancePointer().pointer);
    }

    private native void __notifyResourceCreated__ResourcePtrr(long _pointer_, long res);

    /** 
    Internal method called by  when a resource is removed. **/
    public void _notifyResourceRemoved(org.ogre4j.IResourcePtr res) {
        __notifyResourceRemoved__ResourcePtrr(this.object.pointer, res.getInstancePointer().pointer);
    }

    private native void __notifyResourceRemoved__ResourcePtrr(long _pointer_, long res);

    /** 
    Internal method to notify the group manager that a resource has changed group (only applicable for autodetect group) **/
    public void _notifyResourceGroupChanged(String oldGroup, org.ogre4j.IResource res) {
        __notifyResourceGroupChanged__StringRResourcep(this.object.pointer, oldGroup,  res.getInstancePointer().pointer);
    }

    private native void __notifyResourceGroupChanged__StringRResourcep(long _pointer_, String oldGroup, long res);

    /** 
    Internal method called by  when all resources for that manager are removed. **/
    public void _notifyAllResourcesRemoved(org.ogre4j.IResourceManager manager) {
        __notifyAllResourcesRemoved__ResourceManagerp(this.object.pointer, manager.getInstancePointer().pointer);
    }

    private native void __notifyAllResourcesRemoved__ResourceManagerp(long _pointer_, long manager);

    /** 
    Notify this manager that one stage of world geometry loading has been started. **/
    public void _notifyWorldGeometryPrepareStageStarted(String description) {
        __notifyWorldGeometryPrepareStageStarted__StringR(this.object.pointer, description);
    }

    private native void __notifyWorldGeometryPrepareStageStarted__StringR(long _pointer_, String description);

    /** 
    Notify this manager that one stage of world geometry loading has been completed. **/
    public void _notifyWorldGeometryPrepareStageEnded() {
        __notifyWorldGeometryPrepareStageEnded(this.object.pointer);
    }

    private native void __notifyWorldGeometryPrepareStageEnded(long _pointer_);

    /** 
    Notify this manager that one stage of world geometry loading has been started. **/
    public void _notifyWorldGeometryStageStarted(String description) {
        __notifyWorldGeometryStageStarted__StringR(this.object.pointer, description);
    }

    private native void __notifyWorldGeometryStageStarted__StringR(long _pointer_, String description);

    /** 
    Notify this manager that one stage of world geometry loading has been completed. **/
    public void _notifyWorldGeometryStageEnded() {
        __notifyWorldGeometryStageEnded(this.object.pointer);
    }

    private native void __notifyWorldGeometryStageEnded(long _pointer_);

    /** 
    Get a list of the currently defined resource groups. **/
    public void getResourceGroups(org.ogre4j.IStringVector returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getResourceGroups(this.object.pointer)), false);
    }

    private native long _getResourceGroups(long _pointer_);

    /** 
    Get the list of resource declarations for the specified group name. **/
    public void getResourceDeclarationList(org.ogre4j.IResourceGroupManager.IResourceDeclarationList returnValue, String groupName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getResourceDeclarationList__StringR(this.object.pointer, groupName)), false);
    }

    private native long _getResourceDeclarationList__StringR(long _pointer_, String groupName);

    /** **/
    public void setLoadingListener(org.ogre4j.IResourceLoadingListener listener) {
        _setLoadingListener__ResourceLoadingListenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setLoadingListener__ResourceLoadingListenerp(long _pointer_, long listener);

    /** **/
    public org.ogre4j.IResourceLoadingListener getLoadingListener() {
         return new org.ogre4j.ResourceLoadingListener(new InstancePointer(_getLoadingListener(this.object.pointer)));
    }

    private native long _getLoadingListener(long _pointer_);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IResourceGroupManager getSingleton() {
         return new org.ogre4j.ResourceGroupManager(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IResourceGroupManager getSingletonPtr() {
         return new org.ogre4j.ResourceGroupManager(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

    /** **/
    public static String getDEFAULT_RESOURCE_GROUP_NAME() {
         return _getDEFAULT_RESOURCE_GROUP_NAME();
    }

    private native static String _getDEFAULT_RESOURCE_GROUP_NAME();

    /** **/
    public static void setDEFAULT_RESOURCE_GROUP_NAME(String _jni_value_) {
        _setDEFAULT_RESOURCE_GROUP_NAME( _jni_value_);
    }

    private native static void _setDEFAULT_RESOURCE_GROUP_NAME(String _jni_value_);

    /** **/
    public static String getINTERNAL_RESOURCE_GROUP_NAME() {
         return _getINTERNAL_RESOURCE_GROUP_NAME();
    }

    private native static String _getINTERNAL_RESOURCE_GROUP_NAME();

    /** **/
    public static void setINTERNAL_RESOURCE_GROUP_NAME(String _jni_value_) {
        _setINTERNAL_RESOURCE_GROUP_NAME( _jni_value_);
    }

    private native static void _setINTERNAL_RESOURCE_GROUP_NAME(String _jni_value_);

    /** **/
    public static String getBOOTSTRAP_RESOURCE_GROUP_NAME() {
         return _getBOOTSTRAP_RESOURCE_GROUP_NAME();
    }

    private native static String _getBOOTSTRAP_RESOURCE_GROUP_NAME();

    /** **/
    public static void setBOOTSTRAP_RESOURCE_GROUP_NAME(String _jni_value_) {
        _setBOOTSTRAP_RESOURCE_GROUP_NAME( _jni_value_);
    }

    private native static void _setBOOTSTRAP_RESOURCE_GROUP_NAME(String _jni_value_);

    /** **/
    public static String getAUTODETECT_RESOURCE_GROUP_NAME() {
         return _getAUTODETECT_RESOURCE_GROUP_NAME();
    }

    private native static String _getAUTODETECT_RESOURCE_GROUP_NAME();

    /** **/
    public static void setAUTODETECT_RESOURCE_GROUP_NAME(String _jni_value_) {
        _setAUTODETECT_RESOURCE_GROUP_NAME( _jni_value_);
    }

    private native static void _setAUTODETECT_RESOURCE_GROUP_NAME(String _jni_value_);

    /** **/
    public static int getRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS() {
         return _getRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS();
    }

    private native static int _getRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS();

    /** **/
    public static void setRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS(int _jni_value_) {
        _setRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS( _jni_value_);
    }

    private native static void _setRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS(int _jni_value_);

}
