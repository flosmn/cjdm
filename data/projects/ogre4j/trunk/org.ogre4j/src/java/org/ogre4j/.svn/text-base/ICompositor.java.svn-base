/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ICompositor extends INativeObject, org.ogre4j.IResource {

public interface ITechniques extends INativeObject, org.std.Ivector< org.ogre4j.ICompositionTechnique > {

    /** **/
    public void assign(int num, org.ogre4j.ICompositionTechnique val);

    /** **/
    public org.ogre4j.ICompositionTechnique at(int loc);

    /** **/
    public org.ogre4j.ICompositionTechnique back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ICompositionTechnique front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ICompositionTechnique val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ITechniqueIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.ICompositor.ITechniques > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.ICompositionTechnique getNext();

    /** **/
    public org.ogre4j.ICompositionTechnique peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.ICompositionTechnique> peekNextPtr();

    /** **/
    public void moveNext();

}
    /** 
    Create a new technique, and return a pointer to it. **/
    public org.ogre4j.ICompositionTechnique createTechnique();

    /** 
    Remove a technique. It will also be destroyed. **/
    public void removeTechnique(int idx);

    /** 
    Get a technique. **/
    public org.ogre4j.ICompositionTechnique getTechnique(int idx);

    /** 
    Get the number of techniques. **/
    public int getNumTechniques();

    /** 
    Remove all techniques **/
    public void removeAllTechniques();

    /** 
    Get an iterator over the Techniques in this compositor. **/
    public void getTechniqueIterator(org.ogre4j.ICompositor.ITechniqueIterator returnValue);

    /** 
    Get a supported technique. **/
    public org.ogre4j.ICompositionTechnique getSupportedTechnique(int idx);

    /** 
    Get the number of supported techniques. **/
    public int getNumSupportedTechniques();

    /** 
    Gets an iterator over all the Techniques which are supported by the current card. **/
    public void getSupportedTechniqueIterator(org.ogre4j.ICompositor.ITechniqueIterator returnValue);

}
