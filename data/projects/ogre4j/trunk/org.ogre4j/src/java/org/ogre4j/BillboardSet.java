/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class BillboardSet extends org.xbig.base.NativeObject implements org.ogre4j.IBillboardSet {
static { System.loadLibrary("ogre4j");}
protected static class SortByDirectionFunctor extends org.xbig.base.NativeObject implements org.ogre4j.IBillboardSet.ISortByDirectionFunctor {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SortByDirectionFunctor(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SortByDirectionFunctor(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SortByDirectionFunctor(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SortByDirectionFunctor(org.ogre4j.IVector3 dir) {
         super( new org.xbig.base.InstancePointer(__createSortByDirectionFunctor__Vector3R( dir.getInstancePointer().pointer)), false);
    }

    private native static long __createSortByDirectionFunctor__Vector3R(long dir);

    /** **/
    public float operatorFunctionCall(org.ogre4j.IBillboard bill) {
         return _operatorFunctionCall__Billboardp_const(this.object.pointer, bill.getInstancePointer().pointer);
    }

    private native float _operatorFunctionCall__Billboardp_const(long _pointer_, long bill);

    /** **/
    public void getsortDir(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getsortDir(this.object.pointer)), false);
    }

    private native long _getsortDir(long _pointer_);

    /** **/
    public void setsortDir(org.ogre4j.IVector3 _jni_value_) {
        _setsortDir(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsortDir(long _pointer_, long _jni_value_);

}
protected static class SortByDistanceFunctor extends org.xbig.base.NativeObject implements org.ogre4j.IBillboardSet.ISortByDistanceFunctor {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SortByDistanceFunctor(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SortByDistanceFunctor(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SortByDistanceFunctor(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SortByDistanceFunctor(org.ogre4j.IVector3 pos) {
         super( new org.xbig.base.InstancePointer(__createSortByDistanceFunctor__Vector3R( pos.getInstancePointer().pointer)), false);
    }

    private native static long __createSortByDistanceFunctor__Vector3R(long pos);

    /** **/
    public float operatorFunctionCall(org.ogre4j.IBillboard bill) {
         return _operatorFunctionCall__Billboardp_const(this.object.pointer, bill.getInstancePointer().pointer);
    }

    private native float _operatorFunctionCall__Billboardp_const(long _pointer_, long bill);

    /** **/
    public void getsortPos(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getsortPos(this.object.pointer)), false);
    }

    private native long _getsortPos(long _pointer_);

    /** **/
    public void setsortPos(org.ogre4j.IVector3 _jni_value_) {
        _setsortPos(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsortPos(long _pointer_, long _jni_value_);

}
protected static class ActiveBillboardList extends org.xbig.base.NativeObject implements org.ogre4j.IBillboardSet.IActiveBillboardList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ActiveBillboardList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ActiveBillboardList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ActiveBillboardList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ActiveBillboardList() {
         super( new org.xbig.base.InstancePointer(__createActiveBillboardList()), false);
    }

    private native static long __createActiveBillboardList();

    /** **/
    public void assign(int num, org.ogre4j.IBillboard val) {
        _assign__ivOgre_BillboardP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_BillboardP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IBillboard back() {
         return new org.ogre4j.Billboard(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IBillboard front() {
         return new org.ogre4j.Billboard(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IBillboard val) {
        _push_back__Ogre_BillboardP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_BillboardP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IBillboard val) {
        _push_front__Ogre_BillboardP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_BillboardP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IBillboard val) {
        _remove__Ogre_BillboardP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_BillboardP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class FreeBillboardList extends org.xbig.base.NativeObject implements org.ogre4j.IBillboardSet.IFreeBillboardList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public FreeBillboardList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected FreeBillboardList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public FreeBillboardList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public FreeBillboardList() {
         super( new org.xbig.base.InstancePointer(__createFreeBillboardList()), false);
    }

    private native static long __createFreeBillboardList();

    /** **/
    public void assign(int num, org.ogre4j.IBillboard val) {
        _assign__ivOgre_BillboardP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_BillboardP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IBillboard back() {
         return new org.ogre4j.Billboard(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IBillboard front() {
         return new org.ogre4j.Billboard(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IBillboard val) {
        _push_back__Ogre_BillboardP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_BillboardP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IBillboard val) {
        _push_front__Ogre_BillboardP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_BillboardP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IBillboard val) {
        _remove__Ogre_BillboardP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_BillboardP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class BillboardPool extends org.xbig.base.NativeObject implements org.ogre4j.IBillboardSet.IBillboardPool {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public BillboardPool(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected BillboardPool(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public BillboardPool(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public BillboardPool() {
         super( new org.xbig.base.InstancePointer(__createBillboardPool()), false);
    }

    private native static long __createBillboardPool();

    /** **/
    public void assign(int num, org.ogre4j.IBillboard val) {
        _assign__ivOgre_BillboardP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_BillboardP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IBillboard at(int loc) {
         return new org.ogre4j.Billboard(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IBillboard back() {
         return new org.ogre4j.Billboard(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IBillboard front() {
         return new org.ogre4j.Billboard(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IBillboard val) {
        _push_back__Ogre_BillboardP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_BillboardP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class TextureCoordSets extends org.xbig.base.NativeObject implements org.ogre4j.IBillboardSet.ITextureCoordSets {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TextureCoordSets(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TextureCoordSets(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TextureCoordSets(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TextureCoordSets() {
         super( new org.xbig.base.InstancePointer(__createTextureCoordSets()), false);
    }

    private native static long __createTextureCoordSets();

    /** **/
    public void assign(int num, org.ogre4j.IFloatRect val) {
        _assign__ivOgre_FloatRectR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_FloatRectR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IFloatRect at(int loc) {
         return new org.ogre4j.FloatRect(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IFloatRect back() {
         return new org.ogre4j.FloatRect(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IFloatRect front() {
         return new org.ogre4j.FloatRect(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IFloatRect val) {
        _push_back__Ogre_FloatRectR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_FloatRectR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public BillboardSet(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected BillboardSet(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public BillboardSet(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Usual constructor - this is called by the . **/
    public BillboardSet(String name, long poolSize, boolean externalDataSource) {
         super( new org.xbig.base.InstancePointer(__createBillboardSet__StringRIvbv( name,  poolSize,  externalDataSource)), false);
    }

    private native static long __createBillboardSet__StringRIvbv(String name, long poolSize, boolean externalDataSource);

    /** 
    Creates a new billboard and adds it to this set. **/
    public org.ogre4j.IBillboard createBillboard(org.ogre4j.IVector3 position, org.ogre4j.IColourValue colour) {
         return new org.ogre4j.Billboard(new InstancePointer(_createBillboard__Vector3RColourValueR(this.object.pointer, position.getInstancePointer().pointer,  colour.getInstancePointer().pointer)));
    }

    private native long _createBillboard__Vector3RColourValueR(long _pointer_, long position, long colour);

    /** 
    Creates a new billboard and adds it to this set. **/
    public org.ogre4j.IBillboard createBillboard(float x, float y, float z, org.ogre4j.IColourValue colour) {
         return new org.ogre4j.Billboard(new InstancePointer(_createBillboard__RealvRealvRealvColourValueR(this.object.pointer, x,  y,  z,  colour.getInstancePointer().pointer)));
    }

    private native long _createBillboard__RealvRealvRealvColourValueR(long _pointer_, float x, float y, float z, long colour);

    /** 
    Returns the number of active billboards which currently make up this set. **/
    public int getNumBillboards() {
         return _getNumBillboards_const(this.object.pointer);
    }

    private native int _getNumBillboards_const(long _pointer_);

    /** 
    Tells the set whether to allow automatic extension of the pool of billboards. **/
    public void setAutoextend(boolean autoextend) {
        _setAutoextend__bv(this.object.pointer, autoextend);
    }

    private native void _setAutoextend__bv(long _pointer_, boolean autoextend);

    /** 
    Returns true if the billboard pool automatically extends. **/
    public boolean getAutoextend() {
         return _getAutoextend_const(this.object.pointer);
    }

    private native boolean _getAutoextend_const(long _pointer_);

    /** 
    Enables sorting for this . (default: off) **/
    public void setSortingEnabled(boolean sortenable) {
        _setSortingEnabled__bv(this.object.pointer, sortenable);
    }

    private native void _setSortingEnabled__bv(long _pointer_, boolean sortenable);

    /** 
    Returns true if sorting of billboards is enabled based on their distance from the camera **/
    public boolean getSortingEnabled() {
         return _getSortingEnabled_const(this.object.pointer);
    }

    private native boolean _getSortingEnabled_const(long _pointer_);

    /** 
    Adjusts the size of the pool of billboards available in this set. **/
    public void setPoolSize(int size) {
        _setPoolSize__iv(this.object.pointer, size);
    }

    private native void _setPoolSize__iv(long _pointer_, int size);

    /** 
    Returns the current size of the billboard pool. **/
    public long getPoolSize() {
         return _getPoolSize_const(this.object.pointer);
    }

    private native long _getPoolSize_const(long _pointer_);

    /** 
    Empties this set of all billboards. **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** 
    Returns a pointer to the billboard at the supplied index. **/
    public org.ogre4j.IBillboard getBillboard(long index) {
         return new org.ogre4j.Billboard(new InstancePointer(_getBillboard__Iv_const(this.object.pointer, index)));
    }

    private native long _getBillboard__Iv_const(long _pointer_, long index);

    /** 
    Removes the billboard at the supplied index. **/
    public void removeBillboard(long index) {
        _removeBillboard__Iv(this.object.pointer, index);
    }

    private native void _removeBillboard__Iv(long _pointer_, long index);

    /** 
    Removes a billboard from the set. **/
    public void removeBillboard(org.ogre4j.IBillboard pBill) {
        _removeBillboard__Billboardp(this.object.pointer, pBill.getInstancePointer().pointer);
    }

    private native void _removeBillboard__Billboardp(long _pointer_, long pBill);

    /** 
    Sets the point which acts as the origin point for all billboards in this set. **/
    public void setBillboardOrigin(org.ogre4j.BillboardOrigin origin) {
        _setBillboardOrigin__BillboardOriginv(this.object.pointer, origin.getValue());
    }

    private native void _setBillboardOrigin__BillboardOriginv(long _pointer_, int origin);

    /** 
    Gets the point which acts as the origin point for all billboards in this set. **/
    public org.ogre4j.BillboardOrigin getBillboardOrigin() {
         return org.ogre4j.BillboardOrigin.toEnum(_getBillboardOrigin_const(this.object.pointer));
    }

    private native int _getBillboardOrigin_const(long _pointer_);

    /** 
    Sets billboard rotation type. **/
    public void setBillboardRotationType(org.ogre4j.BillboardRotationType rotationType) {
        _setBillboardRotationType__BillboardRotationTypev(this.object.pointer, rotationType.getValue());
    }

    private native void _setBillboardRotationType__BillboardRotationTypev(long _pointer_, int rotationType);

    /** 
    Sets billboard rotation type. **/
    public org.ogre4j.BillboardRotationType getBillboardRotationType() {
         return org.ogre4j.BillboardRotationType.toEnum(_getBillboardRotationType_const(this.object.pointer));
    }

    private native int _getBillboardRotationType_const(long _pointer_);

    /** 
    Sets the default dimensions of the billboards in this set. **/
    public void setDefaultDimensions(float width, float height) {
        _setDefaultDimensions__RealvRealv(this.object.pointer, width,  height);
    }

    private native void _setDefaultDimensions__RealvRealv(long _pointer_, float width, float height);

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultWidth(float width) {
        _setDefaultWidth__Realv(this.object.pointer, width);
    }

    private native void _setDefaultWidth__Realv(long _pointer_, float width);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultWidth() {
         return _getDefaultWidth_const(this.object.pointer);
    }

    private native float _getDefaultWidth_const(long _pointer_);

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultHeight(float height) {
        _setDefaultHeight__Realv(this.object.pointer, height);
    }

    private native void _setDefaultHeight__Realv(long _pointer_, float height);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultHeight() {
         return _getDefaultHeight_const(this.object.pointer);
    }

    private native float _getDefaultHeight_const(long _pointer_);

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public void setMaterialName(String name) {
        _setMaterialName__StringR(this.object.pointer, name);
    }

    private native void _setMaterialName__StringR(long _pointer_, String name);

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public String getMaterialName() {
         return _getMaterialName_const(this.object.pointer);
    }

    private native String _getMaterialName_const(long _pointer_);

    /** 
    Overridden from **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** 
    Begin injection of billboard data; applicable when constructing the  for external data use. **/
    public void beginBillboards(int numBillboards) {
        _beginBillboards__iv(this.object.pointer, numBillboards);
    }

    private native void _beginBillboards__iv(long _pointer_, int numBillboards);

    /** 
    Define a billboard. **/
    public void injectBillboard(org.ogre4j.IBillboard bb) {
        _injectBillboard__BillboardR(this.object.pointer, bb.getInstancePointer().pointer);
    }

    private native void _injectBillboard__BillboardR(long _pointer_, long bb);

    /** 
    Finish defining billboards. **/
    public void endBillboards() {
        _endBillboards(this.object.pointer);
    }

    private native void _endBillboards(long _pointer_);

    /** 
    Set the bounds of the . **/
    public void setBounds(org.ogre4j.IAxisAlignedBox box, float radius) {
        _setBounds__AxisAlignedBoxRRealv(this.object.pointer, box.getInstancePointer().pointer,  radius);
    }

    private native void _setBounds__AxisAlignedBoxRRealv(long _pointer_, long box, float radius);

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** 
    Overridden from **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** 
    Overridden from **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** 
    Overridden from **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op) {
        _getRenderOperation__RenderOperationr(this.object.pointer, op.getInstancePointer().pointer);
    }

    private native void _getRenderOperation__RenderOperationr(long _pointer_, long op);

    /** 
    Overridden from **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform) {
        _getWorldTransforms__Matrix4p_const(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void _getWorldTransforms__Matrix4p_const(long _pointer_, long xform);

    /** 
    Internal callback used by Billboards to notify their parent that they have been resized. **/
    public void _notifyBillboardResized() {
        __notifyBillboardResized(this.object.pointer);
    }

    private native void __notifyBillboardResized(long _pointer_);

    /** 
    Internal callback used by Billboards to notify their parent that they have been rotated.. **/
    public void _notifyBillboardRotated() {
        __notifyBillboardRotated(this.object.pointer);
    }

    private native void __notifyBillboardRotated(long _pointer_);

    /** 
    Returns whether or not billboards in this are tested individually for culling. **/
    public boolean getCullIndividually() {
         return _getCullIndividually_const(this.object.pointer);
    }

    private native boolean _getCullIndividually_const(long _pointer_);

    /** 
    Sets whether culling tests billboards in this individually as well as in a group. **/
    public void setCullIndividually(boolean cullIndividual) {
        _setCullIndividually__bv(this.object.pointer, cullIndividual);
    }

    private native void _setCullIndividually__bv(long _pointer_, boolean cullIndividual);

    /** 
    Sets the type of billboard to render. **/
    public void setBillboardType(org.ogre4j.BillboardType bbt) {
        _setBillboardType__BillboardTypev(this.object.pointer, bbt.getValue());
    }

    private native void _setBillboardType__BillboardTypev(long _pointer_, int bbt);

    /** 
    Returns the billboard type in use. **/
    public org.ogre4j.BillboardType getBillboardType() {
         return org.ogre4j.BillboardType.toEnum(_getBillboardType_const(this.object.pointer));
    }

    private native int _getBillboardType_const(long _pointer_);

    /** 
    Use this to specify the common direction given to billboards of type BBT_ORIENTED_COMMON or BBT_PERPENDICULAR_COMMON. **/
    public void setCommonDirection(org.ogre4j.IVector3 vec) {
        _setCommonDirection__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _setCommonDirection__Vector3R(long _pointer_, long vec);

    /** 
    Gets the common direction for all billboards (BBT_ORIENTED_COMMON) **/
    public org.ogre4j.IVector3 getCommonDirection() {
         return new org.ogre4j.Vector3(new InstancePointer(_getCommonDirection_const(this.object.pointer)));
    }

    private native long _getCommonDirection_const(long _pointer_);

    /** 
    Use this to specify the common up-vector given to billboards of type BBT_PERPENDICULAR_SELF or BBT_PERPENDICULAR_COMMON. **/
    public void setCommonUpVector(org.ogre4j.IVector3 vec) {
        _setCommonUpVector__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _setCommonUpVector__Vector3R(long _pointer_, long vec);

    /** 
    Gets the common up-vector for all billboards (BBT_PERPENDICULAR_SELF and BBT_PERPENDICULAR_COMMON) **/
    public org.ogre4j.IVector3 getCommonUpVector() {
         return new org.ogre4j.Vector3(new InstancePointer(_getCommonUpVector_const(this.object.pointer)));
    }

    private native long _getCommonUpVector_const(long _pointer_);

    /** 
    Sets whether or not billboards should use an 'accurate' facing model based on the vector from each billboard to the camera, rather than an optimised version using just the camera direction. **/
    public void setUseAccurateFacing(boolean acc) {
        _setUseAccurateFacing__bv(this.object.pointer, acc);
    }

    private native void _setUseAccurateFacing__bv(long _pointer_, boolean acc);

    /** 
    Gets whether or not billboards use an 'accurate' facing model based on the vector from each billboard to the camera, rather than an optimised version using just the camera direction. **/
    public boolean getUseAccurateFacing() {
         return _getUseAccurateFacing_const(this.object.pointer);
    }

    private native boolean _getUseAccurateFacing_const(long _pointer_);

    /** 
    Overridden from **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** 
    Overridden, see **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam) {
         return _getSquaredViewDepth__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native float _getSquaredViewDepth__CameraP_const(long _pointer_, long cam);

    /** 
    Update the bounds of the billboardset **/
    public void _updateBounds() {
        __updateBounds(this.object.pointer);
    }

    private native void __updateBounds(long _pointer_);

    /** 
    **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Sort the billboard set. Only called when enabled via setSortingEnabled **/
    public void _sortBillboards(org.ogre4j.ICamera cam) {
        __sortBillboards__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __sortBillboards__Camerap(long _pointer_, long cam);

    /** 
    Gets the sort mode of this billboard set **/
    public org.ogre4j.SortMode _getSortMode() {
         return org.ogre4j.SortMode.toEnum(__getSortMode_const(this.object.pointer));
    }

    private native int __getSortMode_const(long _pointer_);

    /** 
    Sets whether billboards should be treated as being in world space. **/
    public void setBillboardsInWorldSpace(boolean ws) {
        _setBillboardsInWorldSpace__bv(this.object.pointer, ws);
    }

    private native void _setBillboardsInWorldSpace__bv(long _pointer_, boolean ws);

    /** 
     can use custom texture coordinates for various billboards. This is useful for selecting one of many particle images out of a tiled texture sheet, or doing flipbook animation within a single texture. **/
    public void setTextureCoords(org.ogre4j.IFloatRect coords, int numCoords) {
        _setTextureCoords__Ogre_FloatRectPuint16v(this.object.pointer, coords.getInstancePointer().pointer,  numCoords);
    }

    private native void _setTextureCoords__Ogre_FloatRectPuint16v(long _pointer_, long coords, int numCoords);

    /** 
     will generate texture coordinate rects as if the texture for the billboard set contained 'stacks' rows of 'slices' images each, all equal size. Thus, if the texture size is 512x512 and 'stacks' is 4 and 'slices' is 8, each sub-rectangle of the texture would be 128 texels tall and 64 texels wide. **/
    public void setTextureStacksAndSlices(short stacks, short slices) {
        _setTextureStacksAndSlices__ucharvucharv(this.object.pointer, stacks,  slices);
    }

    private native void _setTextureStacksAndSlices__ucharvucharv(long _pointer_, short stacks, short slices);

    /** 
     returns the current texture coordinate rects in effect. By default, there is only one texture coordinate rect in the set, spanning the entire texture from 0 through 1 in each direction. **/
    public org.ogre4j.IFloatRect getTextureCoords(IntegerPointer oNumCoords) {
         return new org.ogre4j.FloatRect(new InstancePointer(_getTextureCoords__uint16p(this.object.pointer, oNumCoords.object.pointer)));
    }

    private native long _getTextureCoords__uint16p(long _pointer_, long oNumCoords);

    /** 
    Set whether or not the  will use point rendering rather than manually generated quads. **/
    public void setPointRenderingEnabled(boolean enabled) {
        _setPointRenderingEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setPointRenderingEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether point rendering is enabled. **/
    public boolean isPointRenderingEnabled() {
         return _isPointRenderingEnabled_const(this.object.pointer);
    }

    private native boolean _isPointRenderingEnabled_const(long _pointer_);

    /** **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the name of this object. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been attached to a node. **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** 
    Create a reference-counted AnimableValuePtr for the named value. **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

    /** 
    Retrieves a pointer to the  this renderable object uses. **/
    public org.ogre4j.ITechnique getTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getTechnique_const(this.object.pointer)));
    }

    private native long _getTechnique_const(long _pointer_);

    /** 
    Called just prior to the  being rendered. **/
    public boolean preRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
         return _preRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native boolean _preRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Called immediately after the  has been rendered. **/
    public void postRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
        _postRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native void _postRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Returns the number of world transform matrices this renderable requires. **/
    public int getNumWorldTransforms() {
         return _getNumWorldTransforms_const(this.object.pointer);
    }

    private native int _getNumWorldTransforms_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Method which reports whether this renderable would normally cast a shadow. **/
    public boolean getCastsShadows() {
         return _getCastsShadows_const(this.object.pointer);
    }

    private native boolean _getCastsShadows_const(long _pointer_);

    /** 
    Sets a custom parameter for this , which may be used to drive calculations for this specific , like GPU program parameters. **/
    public void setCustomParameter(int index, org.ogre4j.IVector4 value) {
        _setCustomParameter__ivVector4R(this.object.pointer, index,  value.getInstancePointer().pointer);
    }

    private native void _setCustomParameter__ivVector4R(long _pointer_, int index, long value);

    /** 
    Gets the custom value associated with this  at the given index. **/
    public org.ogre4j.IVector4 getCustomParameter(int index) {
         return new org.ogre4j.Vector4(new InstancePointer(_getCustomParameter__iv_const(this.object.pointer, index)));
    }

    private native long _getCustomParameter__iv_const(long _pointer_, int index);

    /** 
    Update a custom  constant which is derived from information only this  knows. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params) {
        __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(this.object.pointer, constantEntry.getInstancePointer().pointer,  params.getInstancePointer().pointer);
    }

    private native void __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(long _pointer_, long constantEntry, long params);

    /** 
    Sets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets render system private data **/
    public org.ogre4j.IRenderable.IRenderSystemData getRenderSystemData() {
         return new org.ogre4j.Renderable.RenderSystemData(new InstancePointer(_getRenderSystemData_const(this.object.pointer)));
    }

    private native long _getRenderSystemData_const(long _pointer_);

    /** 
    gets render system private data **/
    public void setRenderSystemData(org.ogre4j.IRenderable.IRenderSystemData val) {
        _setRenderSystemData__RenderSystemDatap_const(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setRenderSystemData__RenderSystemDatap_const(long _pointer_, long val);

}
