/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IRenderToVertexBuffer extends INativeObject {

    /** 
    Get the vertex declaration that the pass will output. **/
    public org.ogre4j.IVertexDeclaration getVertexDeclaration();

    /** 
    Get the maximum number of vertices that the buffer will hold **/
    public long getMaxVertexCount();

    /** 
    Set the maximum number of vertices that the buffer will hold **/
    public void setMaxVertexCount(long maxVertexCount);

    /** 
    What type of primitives does this object generate? **/
    public org.ogre4j.RenderOperation.OperationType getOperationType();

    /** 
    Set the type of primitives that this object generates **/
    public void setOperationType(org.ogre4j.RenderOperation.OperationType operationType);

    /** 
    Set wether this object resets its buffers each time it updates. **/
    public void setResetsEveryUpdate(boolean resetsEveryUpdate);

    /** 
    Does this object reset its buffer each time it updates? **/
    public boolean getResetsEveryUpdate();

    /** 
    Get the render operation for this buffer **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op);

    /** 
    Update the contents of this vertex buffer by rendering **/
    public void update(org.ogre4j.ISceneManager sceneMgr);

    /** 
    Reset the vertex buffer to the initial state. In the next update, the source renderable will be used as input. **/
    public void reset();

    /** 
    Set the source renderable of this object. During the first (and perhaps later) update of this object, this object's data will be used as input) **/
    public void setSourceRenderable(org.ogre4j.IRenderable source);

    /** 
    Get the source renderable of this object **/
    public org.ogre4j.IRenderable getSourceRenderable();

    /** 
    Get the material which is used to render the geometry into the vertex buffer. **/
    public org.ogre4j.IMaterialPtr getRenderToBufferMaterial();

    /** 
    Set the material name which is used to render the geometry into the vertex buffer **/
    public void setRenderToBufferMaterialName(String materialName);

}
