/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ScriptCompiler extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler {
static { System.loadLibrary("ogre4j");}
private static class AbstractTreeBuilder extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IAbstractTreeBuilder {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AbstractTreeBuilder(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AbstractTreeBuilder(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AbstractTreeBuilder(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public AbstractTreeBuilder(org.ogre4j.IScriptCompiler compiler) {
         super( new org.xbig.base.InstancePointer(__createAbstractTreeBuilder__ScriptCompilerp( compiler.getInstancePointer().pointer)), false);
    }

    private native static long __createAbstractTreeBuilder__ScriptCompilerp(long compiler);

    /** **/
    public org.ogre4j.IAbstractNodeListPtr getResult() {
         return new org.ogre4j.AbstractNodeListPtr(new InstancePointer(_getResult_const(this.object.pointer)));
    }

    private native long _getResult_const(long _pointer_);

    /** **/
    public void visit(org.ogre4j.IConcreteNode node) {
        _visit__ConcreteNodep(this.object.pointer, node.getInstancePointer().pointer);
    }

    private native void _visit__ConcreteNodep(long _pointer_, long node);

    /** **/
    public static void visit(org.ogre4j.IScriptCompiler.IAbstractTreeBuilder visitor, org.ogre4j.IConcreteNodeList nodes) {
        _visit__AbstractTreeBuilderpConcreteNodeListR( visitor.getInstancePointer().pointer,  nodes.getInstancePointer().pointer);
    }

    private native static void _visit__AbstractTreeBuilderpConcreteNodeListR(long visitor, long nodes);

}
public static class Error extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IError {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Error(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Error(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Error(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Error() {
         super( new org.xbig.base.InstancePointer(__createError()), false);
    }

    private native static long __createError();

    /** **/
    public String getfile() {
         return _getfile(this.object.pointer);
    }

    private native String _getfile(long _pointer_);

    /** **/
    public void setfile(String _jni_value_) {
        _setfile(this.object.pointer, _jni_value_);
    }

    private native void _setfile(long _pointer_, String _jni_value_);

    /** **/
    public String getmessage() {
         return _getmessage(this.object.pointer);
    }

    private native String _getmessage(long _pointer_);

    /** **/
    public void setmessage(String _jni_value_) {
        _setmessage(this.object.pointer, _jni_value_);
    }

    private native void _setmessage(long _pointer_, String _jni_value_);

    /** **/
    public int getline() {
         return _getline(this.object.pointer);
    }

    private native int _getline(long _pointer_);

    /** **/
    public void setline(int _jni_value_) {
        _setline(this.object.pointer, _jni_value_);
    }

    private native void _setline(long _pointer_, int _jni_value_);

    /** **/
    public long getcode() {
         return _getcode(this.object.pointer);
    }

    private native long _getcode(long _pointer_);

    /** **/
    public void setcode(long _jni_value_) {
        _setcode(this.object.pointer, _jni_value_);
    }

    private native void _setcode(long _pointer_, long _jni_value_);

}
public static class IdMap extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IIdMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public IdMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected IdMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public IdMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public IdMap() {
         super( new org.xbig.base.InstancePointer(__createIdMap()), false);
    }

    private native static long __createIdMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public LongPointer get(String key) {
         return new LongPointer(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, LongPointer value) {
        _insert__sRIr(this.object.pointer, key,  value.object.pointer);
    }

    private native void _insert__sRIr(long _pointer_, String key, long value);

}
public static class ErrorPtr extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IErrorPtr {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ErrorPtr(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ErrorPtr(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ErrorPtr(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ErrorPtr() {
         super( new org.xbig.base.InstancePointer(__createErrorPtr()), false);
    }

    private native static long __createErrorPtr();

    /** **/
    public org.ogre4j.IScriptCompiler.IErrorPtr operatorAssignment(org.ogre4j.IScriptCompiler.IErrorPtr r) {
         return new org.ogre4j.ScriptCompiler.ErrorPtr(new InstancePointer(_operatorAssignment___Ogre_SharedPtrR(this.object.pointer, r.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_SharedPtrR(long _pointer_, long r);

    /** **/
    public org.ogre4j.IScriptCompiler.IError operatorMultiplication() {
         return new org.ogre4j.ScriptCompiler.Error(new InstancePointer(_operatorMultiplication_const(this.object.pointer)));
    }

    private native long _operatorMultiplication_const(long _pointer_);

    /** **/
    public org.ogre4j.IScriptCompiler.IError operatorMemberAccessFromAPointer() {
         return new org.ogre4j.ScriptCompiler.Error(new InstancePointer(_operatorMemberAccessFromAPointer_const(this.object.pointer)));
    }

    private native long _operatorMemberAccessFromAPointer_const(long _pointer_);

    /** **/
    public org.ogre4j.IScriptCompiler.IError get() {
         return new org.ogre4j.ScriptCompiler.Error(new InstancePointer(_get_const(this.object.pointer)));
    }

    private native long _get_const(long _pointer_);

    /** **/
    public void bind(org.ogre4j.IScriptCompiler.IError rep, org.ogre4j.SharedPtrFreeMethod freeMethod) {
        _bind__Ogre_ScriptCompiler_Errorp_Ogre_SharedPtrFreeMethodv(this.object.pointer, rep.getInstancePointer().pointer,  freeMethod.getValue());
    }

    private native void _bind__Ogre_ScriptCompiler_Errorp_Ogre_SharedPtrFreeMethodv(long _pointer_, long rep, int freeMethod);

    /** **/
    public boolean unique() {
         return _unique_const(this.object.pointer);
    }

    private native boolean _unique_const(long _pointer_);

    /** **/
    public long useCount() {
         return _useCount_const(this.object.pointer);
    }

    private native long _useCount_const(long _pointer_);

    /** **/
    public LongPointer useCountPointer() {
         return new LongPointer(new InstancePointer(_useCountPointer_const(this.object.pointer)));
    }

    private native long _useCountPointer_const(long _pointer_);

    /** **/
    public org.ogre4j.IScriptCompiler.IError getPointer() {
         return new org.ogre4j.ScriptCompiler.Error(new InstancePointer(_getPointer_const(this.object.pointer)));
    }

    private native long _getPointer_const(long _pointer_);

    /** **/
    public org.ogre4j.SharedPtrFreeMethod freeMethod() {
         return org.ogre4j.SharedPtrFreeMethod.toEnum(_freeMethod_const(this.object.pointer));
    }

    private native int _freeMethod_const(long _pointer_);

    /** **/
    public boolean isNull() {
         return _isNull_const(this.object.pointer);
    }

    private native boolean _isNull_const(long _pointer_);

    /** **/
    public void setNull() {
        _setNull(this.object.pointer);
    }

    private native void _setNull(long _pointer_);

}
public static class ErrorList extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IErrorList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ErrorList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ErrorList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ErrorList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ErrorList() {
         super( new org.xbig.base.InstancePointer(__createErrorList()), false);
    }

    private native static long __createErrorList();

    /** **/
    public void assign(int num, org.ogre4j.IScriptCompiler.IErrorPtr val) {
        _assign__ivOgre_ScriptCompiler_ErrorPtrR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ScriptCompiler_ErrorPtrR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IScriptCompiler.IErrorPtr back() {
         return new org.ogre4j.ScriptCompiler.ErrorPtr(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IScriptCompiler.IErrorPtr front() {
         return new org.ogre4j.ScriptCompiler.ErrorPtr(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IScriptCompiler.IErrorPtr val) {
        _push_back__Ogre_ScriptCompiler_ErrorPtrR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ScriptCompiler_ErrorPtrR(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IScriptCompiler.IErrorPtr val) {
        _push_front__Ogre_ScriptCompiler_ErrorPtrR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ScriptCompiler_ErrorPtrR(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IScriptCompiler.IErrorPtr val) {
        _remove__Ogre_ScriptCompiler_ErrorPtrR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_ScriptCompiler_ErrorPtrR(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
private static class Environment extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IEnvironment {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Environment(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Environment(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Environment(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Environment() {
         super( new org.xbig.base.InstancePointer(__createEnvironment()), false);
    }

    private native static long __createEnvironment();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public StringPointer get(String key) {
         return new StringPointer(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, StringPointer value) {
        _insert__sRsr(this.object.pointer, key,  value.object.pointer);
    }

    private native void _insert__sRsr(long _pointer_, String key, long value);

}
private static class ImportCacheMap extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IImportCacheMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ImportCacheMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ImportCacheMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ImportCacheMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ImportCacheMap() {
         super( new org.xbig.base.InstancePointer(__createImportCacheMap()), false);
    }

    private native static long __createImportCacheMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IAbstractNodeListPtr get(String key) {
         return new org.ogre4j.AbstractNodeListPtr(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IAbstractNodeListPtr value) {
        _insert__sROgre_AbstractNodeListPtrr(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_AbstractNodeListPtrr(long _pointer_, String key, long value);

}
private static class ImportRequestMap extends org.xbig.base.NativeObject implements org.ogre4j.IScriptCompiler.IImportRequestMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ImportRequestMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ImportRequestMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ImportRequestMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ImportRequestMap() {
         super( new org.xbig.base.InstancePointer(__createImportRequestMap()), false);
    }

    private native static long __createImportRequestMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ScriptCompiler(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ScriptCompiler(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ScriptCompiler(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ScriptCompiler() {
         super( new org.xbig.base.InstancePointer(__createScriptCompiler()), false);
    }

    private native static long __createScriptCompiler();

    /** 
    **/
    public boolean compile(String str, String source, String group) {
         return _compile__StringRStringRStringR(this.object.pointer, str,  source,  group);
    }

    private native boolean _compile__StringRStringRStringR(long _pointer_, String str, String source, String group);

    /** **/
    public boolean compile(org.ogre4j.IConcreteNodeListPtr nodes, String group) {
         return _compile__ConcreteNodeListPtrRStringR(this.object.pointer, nodes.getInstancePointer().pointer,  group);
    }

    private native boolean _compile__ConcreteNodeListPtrRStringR(long _pointer_, long nodes, String group);

    /** **/
    public boolean _compile(org.ogre4j.IAbstractNodeListPtr nodes, String group) {
         return __compile__AbstractNodeListPtrvStringR(this.object.pointer, nodes.getInstancePointer().pointer,  group);
    }

    private native boolean __compile__AbstractNodeListPtrvStringR(long _pointer_, long nodes, String group);

    /** **/
    public void addError(long code, String file, int line, String msg) {
        _addError__uint32vStringRivStringR(this.object.pointer, code,  file,  line,  msg);
    }

    private native void _addError__uint32vStringRivStringR(long _pointer_, long code, String file, int line, String msg);

    /** **/
    public void setListener(org.ogre4j.IScriptCompilerListener listener) {
        _setListener__ScriptCompilerListenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__ScriptCompilerListenerp(long _pointer_, long listener);

    /** **/
    public org.ogre4j.IScriptCompilerListener getListener() {
         return new org.ogre4j.ScriptCompilerListener(new InstancePointer(_getListener(this.object.pointer)));
    }

    private native long _getListener(long _pointer_);

    /** **/
    public String getResourceGroup() {
         return _getResourceGroup_const(this.object.pointer);
    }

    private native String _getResourceGroup_const(long _pointer_);

    /** 
    Name exclusions identify object types which cannot accept names. This means that excluded types will always have empty names. All values in the object header are stored as object values. **/
    public void addNameExclusion(String type) {
        _addNameExclusion__StringR(this.object.pointer, type);
    }

    private native void _addNameExclusion__StringR(long _pointer_, String type);

    /** **/
    public void removeNameExclusion(String type) {
        _removeNameExclusion__StringR(this.object.pointer, type);
    }

    private native void _removeNameExclusion__StringR(long _pointer_, String type);

    /** **/
    public boolean _fireEvent(String name, org.std.Ivector< org.ogre4j.IAny > args, org.ogre4j.IAny retval) {
         return __fireEvent__StringRstd_vector__Any__rAnyp(this.object.pointer, name,  args.getInstancePointer().pointer,  retval.getInstancePointer().pointer);
    }

    private native boolean __fireEvent__StringRstd_vector__Any__rAnyp(long _pointer_, String name, long args, long retval);

    /** **/
    public void _fireCreateObject(org.ogre4j.IAny returnValue, String type, org.std.Ivector< org.ogre4j.IAny > args) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(__fireCreateObject__StringRstd_vector__Any__r(this.object.pointer, type,  args.getInstancePointer().pointer)), false);
    }

    private native long __fireCreateObject__StringRstd_vector__Any__r(long _pointer_, String type, long args);

    /** **/
    public static String formatErrorCode(long code) {
         return _formatErrorCode__uint32v( code);
    }

    private native static String _formatErrorCode__uint32v(long code);

}
