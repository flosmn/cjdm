/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class GpuProgramUsage extends org.xbig.base.NativeObject implements org.ogre4j.IGpuProgramUsage {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GpuProgramUsage(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GpuProgramUsage(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GpuProgramUsage(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Default constructor. **/
    public GpuProgramUsage(org.ogre4j.GpuProgramType gptype) {
         super( new org.xbig.base.InstancePointer(__createGpuProgramUsage__GpuProgramTypev( gptype.getValue())), false);
    }

    private native static long __createGpuProgramUsage__GpuProgramTypev(int gptype);

    /** 
    Copy constructor **/
    public GpuProgramUsage(org.ogre4j.IGpuProgramUsage rhs) {
         super( new org.xbig.base.InstancePointer(__createGpuProgramUsage__GpuProgramUsageR( rhs.getInstancePointer().pointer)), false);
    }

    private native static long __createGpuProgramUsage__GpuProgramUsageR(long rhs);

    /** 
    Gets the type of program we're trying to link to. **/
    public org.ogre4j.GpuProgramType getType() {
         return org.ogre4j.GpuProgramType.toEnum(_getType_const(this.object.pointer));
    }

    private native int _getType_const(long _pointer_);

    /** 
    Sets the name of the program to use. **/
    public void setProgramName(String name, boolean resetParams) {
        _setProgramName__StringRbv(this.object.pointer, name,  resetParams);
    }

    private native void _setProgramName__StringRbv(long _pointer_, String name, boolean resetParams);

    /** 
    Sets the program to use. **/
    public void setProgram(org.ogre4j.IGpuProgramPtr prog) {
        _setProgram__GpuProgramPtrr(this.object.pointer, prog.getInstancePointer().pointer);
    }

    private native void _setProgram__GpuProgramPtrr(long _pointer_, long prog);

    /** 
    Gets the program being used. **/
    public org.ogre4j.IGpuProgramPtr getProgram() {
         return new org.ogre4j.GpuProgramPtr(new InstancePointer(_getProgram_const(this.object.pointer)));
    }

    private native long _getProgram_const(long _pointer_);

    /** 
    Gets the program being used. **/
    public String getProgramName() {
         return _getProgramName_const(this.object.pointer);
    }

    private native String _getProgramName_const(long _pointer_);

    /** 
    Sets the program parameters that should be used; because parameters can be shared between multiple usages for efficiency, this method is here for you to register externally created parameter objects. Otherwise, the parameters will be created for you when a program is linked. **/
    public void setParameters(org.ogre4j.IGpuProgramParametersSharedPtr params) {
        _setParameters__GpuProgramParametersSharedPtrv(this.object.pointer, params.getInstancePointer().pointer);
    }

    private native void _setParameters__GpuProgramParametersSharedPtrv(long _pointer_, long params);

    /** 
    Gets the parameters being used here. **/
    public void getParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getParameters(this.object.pointer)), false);
    }

    private native long _getParameters(long _pointer_);

    /** **/
    public void _load() {
        __load(this.object.pointer);
    }

    private native void __load(long _pointer_);

    /** **/
    public void _unload() {
        __unload(this.object.pointer);
    }

    private native void __unload(long _pointer_);

}
