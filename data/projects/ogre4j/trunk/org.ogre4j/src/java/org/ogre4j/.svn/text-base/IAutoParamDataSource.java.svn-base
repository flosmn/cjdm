/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IAutoParamDataSource extends INativeObject, org.ogre4j.ISceneCtlAllocatedObject {

    /** 
    Updates the current renderable **/
    public void setCurrentRenderable(org.ogre4j.IRenderable rend);

    /** 
    Sets the world matrices, avoid query from renderable again **/
    public void setWorldMatrices(org.ogre4j.IMatrix4 m, int count);

    /** 
    Updates the current camera **/
    public void setCurrentCamera(org.ogre4j.ICamera cam, boolean useCameraRelative);

    /** 
    Sets the light list that should be used, and it's base index from the global list **/
    public void setCurrentLightList(org.ogre4j.ILightList ll);

    /** 
    Sets the current texture projector for a index **/
    public void setTextureProjector(org.ogre4j.IFrustum frust, int index);

    /** 
    Sets the current render target **/
    public void setCurrentRenderTarget(org.ogre4j.IRenderTarget target);

    /** 
    Sets the current viewport **/
    public void setCurrentViewport(org.ogre4j.IViewport viewport);

    /** 
    Sets the shadow extrusion distance to be used for point lights. **/
    public void setShadowDirLightExtrusionDistance(float dist);

    /** 
    Sets the main camera's scene bounding information **/
    public void setMainCamBoundsInfo(org.ogre4j.IVisibleObjectsBoundsInfo info);

    /** 
    Set the current scene manager for enquiring on demand **/
    public void setCurrentSceneManager(org.ogre4j.ISceneManager sm);

    /** 
    Sets the current pass **/
    public void setCurrentPass(org.ogre4j.IPass pass);

    /** **/
    public org.ogre4j.IMatrix4 getWorldMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getWorldMatrixArray();

    /** **/
    public int getWorldMatrixCount();

    /** **/
    public org.ogre4j.IMatrix4 getViewMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getViewProjectionMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getProjectionMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getWorldViewProjMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getWorldViewMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getInverseWorldMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getInverseWorldViewMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getInverseViewMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getInverseTransposeWorldMatrix();

    /** **/
    public org.ogre4j.IMatrix4 getInverseTransposeWorldViewMatrix();

    /** **/
    public org.ogre4j.IVector4 getCameraPosition();

    /** **/
    public org.ogre4j.IVector4 getCameraPositionObjectSpace();

    /** **/
    public org.ogre4j.IVector4 getLodCameraPosition();

    /** **/
    public org.ogre4j.IVector4 getLodCameraPositionObjectSpace();

    /** 
    Get the light which is 'index'th closest to the current object **/
    public float getLightNumber(int index);

    /** **/
    public float getLightCount();

    /** **/
    public int getLightCastsShadows(int index);

    /** **/
    public org.ogre4j.IColourValue getLightDiffuseColour(int index);

    /** **/
    public org.ogre4j.IColourValue getLightSpecularColour(int index);

    /** **/
    public void getLightDiffuseColourWithPower(org.ogre4j.IColourValue returnValue, int index);

    /** **/
    public void getLightSpecularColourWithPower(org.ogre4j.IColourValue returnValue, int index);

    /** **/
    public org.ogre4j.IVector3 getLightPosition(int index);

    /** **/
    public void getLightAs4DVector(org.ogre4j.IVector4 returnValue, int index);

    /** **/
    public org.ogre4j.IVector3 getLightDirection(int index);

    /** **/
    public float getLightPowerScale(int index);

    /** **/
    public void getLightAttenuation(org.ogre4j.IVector4 returnValue, int index);

    /** **/
    public void getSpotlightParams(org.ogre4j.IVector4 returnValue, int index);

    /** **/
    public void setAmbientLightColour(org.ogre4j.IColourValue ambient);

    /** **/
    public org.ogre4j.IColourValue getAmbientLightColour();

    /** **/
    public org.ogre4j.IColourValue getSurfaceAmbientColour();

    /** **/
    public org.ogre4j.IColourValue getSurfaceDiffuseColour();

    /** **/
    public org.ogre4j.IColourValue getSurfaceSpecularColour();

    /** **/
    public org.ogre4j.IColourValue getSurfaceEmissiveColour();

    /** **/
    public float getSurfaceShininess();

    /** **/
    public void getDerivedAmbientLightColour(org.ogre4j.IColourValue returnValue);

    /** **/
    public void getDerivedSceneColour(org.ogre4j.IColourValue returnValue);

    /** **/
    public void setFog(org.ogre4j.FogMode mode, org.ogre4j.IColourValue colour, float expDensity, float linearStart, float linearEnd);

    /** **/
    public org.ogre4j.IColourValue getFogColour();

    /** **/
    public org.ogre4j.IVector4 getFogParams();

    /** **/
    public org.ogre4j.IMatrix4 getTextureViewProjMatrix(int index);

    /** **/
    public org.ogre4j.IMatrix4 getTextureWorldViewProjMatrix(int index);

    /** **/
    public org.ogre4j.IMatrix4 getSpotlightViewProjMatrix(int index);

    /** **/
    public org.ogre4j.IMatrix4 getSpotlightWorldViewProjMatrix(int index);

    /** **/
    public org.ogre4j.IMatrix4 getTextureTransformMatrix(int index);

    /** **/
    public org.ogre4j.IRenderTarget getCurrentRenderTarget();

    /** **/
    public org.ogre4j.IRenderable getCurrentRenderable();

    /** **/
    public org.ogre4j.IPass getCurrentPass();

    /** **/
    public void getTextureSize(org.ogre4j.IVector4 returnValue, int index);

    /** **/
    public void getInverseTextureSize(org.ogre4j.IVector4 returnValue, int index);

    /** **/
    public void getPackedTextureSize(org.ogre4j.IVector4 returnValue, int index);

    /** **/
    public float getShadowExtrusionDistance();

    /** **/
    public org.ogre4j.IVector4 getSceneDepthRange();

    /** **/
    public org.ogre4j.IVector4 getShadowSceneDepthRange(int index);

    /** **/
    public org.ogre4j.IColourValue getShadowColour();

    /** **/
    public void getInverseViewProjMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getInverseTransposeViewProjMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getTransposeViewProjMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getTransposeViewMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getInverseTransposeViewMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getTransposeProjectionMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getInverseProjectionMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getInverseTransposeProjectionMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getTransposeWorldViewProjMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getInverseWorldViewProjMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getInverseTransposeWorldViewProjMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getTransposeWorldViewMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public void getTransposeWorldMatrix(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public float getTime();

    /** **/
    public float getTime_0_X(float x);

    /** **/
    public float getCosTime_0_X(float x);

    /** **/
    public float getSinTime_0_X(float x);

    /** **/
    public float getTanTime_0_X(float x);

    /** **/
    public void getTime_0_X_packed(org.ogre4j.IVector4 returnValue, float x);

    /** **/
    public float getTime_0_1(float x);

    /** **/
    public float getCosTime_0_1(float x);

    /** **/
    public float getSinTime_0_1(float x);

    /** **/
    public float getTanTime_0_1(float x);

    /** **/
    public void getTime_0_1_packed(org.ogre4j.IVector4 returnValue, float x);

    /** **/
    public float getTime_0_2Pi(float x);

    /** **/
    public float getCosTime_0_2Pi(float x);

    /** **/
    public float getSinTime_0_2Pi(float x);

    /** **/
    public float getTanTime_0_2Pi(float x);

    /** **/
    public void getTime_0_2Pi_packed(org.ogre4j.IVector4 returnValue, float x);

    /** **/
    public float getFrameTime();

    /** **/
    public float getFPS();

    /** **/
    public float getViewportWidth();

    /** **/
    public float getViewportHeight();

    /** **/
    public float getInverseViewportWidth();

    /** **/
    public float getInverseViewportHeight();

    /** **/
    public void getViewDirection(org.ogre4j.IVector3 returnValue);

    /** **/
    public void getViewSideVector(org.ogre4j.IVector3 returnValue);

    /** **/
    public void getViewUpVector(org.ogre4j.IVector3 returnValue);

    /** **/
    public float getFOV();

    /** **/
    public float getNearClipDistance();

    /** **/
    public float getFarClipDistance();

    /** **/
    public int getPassNumber();

    /** **/
    public void setPassNumber(int passNumber);

    /** **/
    public void incPassNumber();

}
