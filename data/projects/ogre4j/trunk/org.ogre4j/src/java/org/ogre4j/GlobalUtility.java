/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class GlobalUtility extends org.xbig.base.NativeObject implements org.ogre4j.IGlobalUtility {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GlobalUtility(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GlobalUtility(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GlobalUtility(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public static float asm_arccos(float r) {
         return _asm_arccos__Fv( r);
    }

    private native static float _asm_arccos__Fv(float r);

    /** **/
    public static float asm_arcsin(float r) {
         return _asm_arcsin__Fv( r);
    }

    private native static float _asm_arcsin__Fv(float r);

    /** **/
    public static float asm_arctan(float r) {
         return _asm_arctan__Fv( r);
    }

    private native static float _asm_arctan__Fv(float r);

    /** **/
    public static float asm_sin(float r) {
         return _asm_sin__Fv( r);
    }

    private native static float _asm_sin__Fv(float r);

    /** **/
    public static float asm_cos(float r) {
         return _asm_cos__Fv( r);
    }

    private native static float _asm_cos__Fv(float r);

    /** **/
    public static float asm_tan(float r) {
         return _asm_tan__Fv( r);
    }

    private native static float _asm_tan__Fv(float r);

    /** **/
    public static float asm_sqrt(float r) {
         return _asm_sqrt__Fv( r);
    }

    private native static float _asm_sqrt__Fv(float r);

    /** **/
    public static float asm_rsq(float r) {
         return _asm_rsq__Fv( r);
    }

    private native static float _asm_rsq__Fv(float r);

    /** **/
    public static float apx_rsq(float r) {
         return _apx_rsq__Fv( r);
    }

    private native static float _apx_rsq__Fv(float r);

    /** **/
    public static float asm_rand() {
         return _asm_rand();
    }

    private native static float _asm_rand();

    /** **/
    public static float asm_rand_max() {
         return _asm_rand_max();
    }

    private native static float _asm_rand_max();

    /** **/
    public static float asm_ln(float r) {
         return _asm_ln__Fv( r);
    }

    private native static float _asm_ln__Fv(float r);

    /** 
    Locate command-line options of the unary form '-blah' and of the binary form '-blah foo', passing back the index of the next non-option. **/
    public static int findCommandLineOpts(int numargs, NativeObjectPointer<BytePointer> argv, org.ogre4j.IUnaryOptionList unaryOptList, org.ogre4j.IBinaryOptionList binOptList) {
         return _findCommandLineOpts__ivcpUnaryOptionListrBinaryOptionListr( numargs,  argv.object.pointer,  unaryOptList.getInstancePointer().pointer,  binOptList.getInstancePointer().pointer);
    }

    private native static int _findCommandLineOpts__ivcpUnaryOptionListrBinaryOptionListr(int numargs, long argv, long unaryOptList, long binOptList);

    /** **/
    public static void operatorMultiplication(org.ogre4j.IRadian returnValue, float a, org.ogre4j.IRadian b) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__RealvRadianR( a,  b.getInstancePointer().pointer)), false);
    }

    private native static long _operatorMultiplication__RealvRadianR(float a, long b);

    /** **/
    public static void operatorDivision(org.ogre4j.IRadian returnValue, float a, org.ogre4j.IRadian b) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorDivision__RealvRadianR( a,  b.getInstancePointer().pointer)), false);
    }

    private native static long _operatorDivision__RealvRadianR(float a, long b);

    /** **/
    public static void operatorMultiplication(org.ogre4j.IDegree returnValue, float a, org.ogre4j.IDegree b) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__RealvDegreeR( a,  b.getInstancePointer().pointer)), false);
    }

    private native static long _operatorMultiplication__RealvDegreeR(float a, long b);

    /** **/
    public static void operatorDivision(org.ogre4j.IDegree returnValue, float a, org.ogre4j.IDegree b) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorDivision__RealvDegreeR( a,  b.getInstancePointer().pointer)), false);
    }

    private native static long _operatorDivision__RealvDegreeR(float a, long b);

    /** **/
    public static void operatorMultiplication(org.ogre4j.IVector4 returnValue, org.ogre4j.IVector4 v, org.ogre4j.IMatrix4 mat) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Vector4RMatrix4R( v.getInstancePointer().pointer,  mat.getInstancePointer().pointer)), false);
    }

    private native static long _operatorMultiplication__Vector4RMatrix4R(long v, long mat);

    /** 
    Geometric intersection of two rectanglar regions.
    
If the two input rectangles do not intersect, then the result will be a degenerate rectangle, i.e. left >= right or top >= bottom, or both. **/
    public static void intersect(org.ogre4j.IRectangle returnValue, org.ogre4j.IRectangle lhs, org.ogre4j.IRectangle rhs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_intersect__RectangleRRectangleR( lhs.getInstancePointer().pointer,  rhs.getInstancePointer().pointer)), false);
    }

    private native static long _intersect__RectangleRRectangleR(long lhs, long rhs);

    /** **/
    public static boolean operatorEqual(org.ogre4j.IShadowTextureConfig lhs, org.ogre4j.IShadowTextureConfig rhs) {
         return _operatorEqual__ShadowTextureConfigRShadowTextureConfigR( lhs.getInstancePointer().pointer,  rhs.getInstancePointer().pointer);
    }

    private native static boolean _operatorEqual__ShadowTextureConfigRShadowTextureConfigR(long lhs, long rhs);

    /** **/
    public static boolean operatorNotEqual(org.ogre4j.IShadowTextureConfig lhs, org.ogre4j.IShadowTextureConfig rhs) {
         return _operatorNotEqual__ShadowTextureConfigRShadowTextureConfigR( lhs.getInstancePointer().pointer,  rhs.getInstancePointer().pointer);
    }

    private native static boolean _operatorNotEqual__ShadowTextureConfigRShadowTextureConfigR(long lhs, long rhs);

    /** **/
    public static int operatorSubtraction(org.ogre4j.IUTFString.I_const_fwd_iterator left, org.ogre4j.IUTFString.I_const_fwd_iterator right) {
         return _operatorSubtraction__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static int _operatorSubtraction__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR(long left, long right);

    /** **/
    public static boolean operatorEqual(org.ogre4j.IUTFString.I_const_fwd_iterator left, org.ogre4j.IUTFString.I_const_fwd_iterator right) {
         return _operatorEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR(long left, long right);

    /** **/
    public static boolean operatorNotEqual(org.ogre4j.IUTFString.I_const_fwd_iterator left, org.ogre4j.IUTFString.I_const_fwd_iterator right) {
         return _operatorNotEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorNotEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR(long left, long right);

    /** **/
    public static boolean operatorLessThan(org.ogre4j.IUTFString.I_const_fwd_iterator left, org.ogre4j.IUTFString.I_const_fwd_iterator right) {
         return _operatorLessThan__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorLessThan__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR(long left, long right);

    /** **/
    public static boolean operatorLessThanOrEqual(org.ogre4j.IUTFString.I_const_fwd_iterator left, org.ogre4j.IUTFString.I_const_fwd_iterator right) {
         return _operatorLessThanOrEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorLessThanOrEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR(long left, long right);

    /** **/
    public static boolean operatorGreaterThan(org.ogre4j.IUTFString.I_const_fwd_iterator left, org.ogre4j.IUTFString.I_const_fwd_iterator right) {
         return _operatorGreaterThan__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorGreaterThan__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR(long left, long right);

    /** **/
    public static boolean operatorGreaterThanOrEqual(org.ogre4j.IUTFString.I_const_fwd_iterator left, org.ogre4j.IUTFString.I_const_fwd_iterator right) {
         return _operatorGreaterThanOrEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorGreaterThanOrEqual__UTFString__const_fwd_iteratorRUTFString__const_fwd_iteratorR(long left, long right);

    /** **/
    public static int operatorSubtraction(org.ogre4j.IUTFString.I_const_rev_iterator left, org.ogre4j.IUTFString.I_const_rev_iterator right) {
         return _operatorSubtraction__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static int _operatorSubtraction__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR(long left, long right);

    /** **/
    public static boolean operatorEqual(org.ogre4j.IUTFString.I_const_rev_iterator left, org.ogre4j.IUTFString.I_const_rev_iterator right) {
         return _operatorEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR(long left, long right);

    /** **/
    public static boolean operatorNotEqual(org.ogre4j.IUTFString.I_const_rev_iterator left, org.ogre4j.IUTFString.I_const_rev_iterator right) {
         return _operatorNotEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorNotEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR(long left, long right);

    /** **/
    public static boolean operatorLessThan(org.ogre4j.IUTFString.I_const_rev_iterator left, org.ogre4j.IUTFString.I_const_rev_iterator right) {
         return _operatorLessThan__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorLessThan__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR(long left, long right);

    /** **/
    public static boolean operatorLessThanOrEqual(org.ogre4j.IUTFString.I_const_rev_iterator left, org.ogre4j.IUTFString.I_const_rev_iterator right) {
         return _operatorLessThanOrEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorLessThanOrEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR(long left, long right);

    /** **/
    public static boolean operatorGreaterThan(org.ogre4j.IUTFString.I_const_rev_iterator left, org.ogre4j.IUTFString.I_const_rev_iterator right) {
         return _operatorGreaterThan__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorGreaterThan__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR(long left, long right);

    /** **/
    public static boolean operatorGreaterThanOrEqual(org.ogre4j.IUTFString.I_const_rev_iterator left, org.ogre4j.IUTFString.I_const_rev_iterator right) {
         return _operatorGreaterThanOrEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR( left.getInstancePointer().pointer,  right.getInstancePointer().pointer);
    }

    private native static boolean _operatorGreaterThanOrEqual__UTFString__const_rev_iteratorRUTFString__const_rev_iteratorR(long left, long right);

    /** **/
    public static float getpi() {
         return _getpi();
    }

    private native static float _getpi();

    /** **/
    public static float gethalf_pi() {
         return _gethalf_pi();
    }

    private native static float _gethalf_pi();

    /** **/
    public static int getRENDER_QUEUE_COUNT() {
         return _getRENDER_QUEUE_COUNT();
    }

    private native static int _getRENDER_QUEUE_COUNT();









}
