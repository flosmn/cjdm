/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class VertexDeclaration extends org.xbig.base.NativeObject implements org.ogre4j.IVertexDeclaration {
static { System.loadLibrary("ogre4j");}
public static class VertexElementList extends org.xbig.base.NativeObject implements org.ogre4j.IVertexDeclaration.IVertexElementList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexElementList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexElementList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexElementList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexElementList() {
         super( new org.xbig.base.InstancePointer(__createVertexElementList()), false);
    }

    private native static long __createVertexElementList();

    /** **/
    public void assign(int num, org.ogre4j.IVertexElement val) {
        _assign__ivOgre_VertexElementR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_VertexElementR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IVertexElement back() {
         return new org.ogre4j.VertexElement(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IVertexElement front() {
         return new org.ogre4j.VertexElement(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IVertexElement val) {
        _push_back__Ogre_VertexElementR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_VertexElementR(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IVertexElement val) {
        _push_front__Ogre_VertexElementR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_VertexElementR(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IVertexElement val) {
        _remove__Ogre_VertexElementR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_VertexElementR(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexDeclaration(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexDeclaration(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexDeclaration(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexDeclaration() {
         super( new org.xbig.base.InstancePointer(__createVertexDeclaration()), false);
    }

    private native static long __createVertexDeclaration();

    /** 
    Get the number of elements in the declaration. **/
    public int getElementCount() {
         return _getElementCount(this.object.pointer);
    }

    private native int _getElementCount(long _pointer_);

    /** 
    Gets read-only access to the list of vertex elements. **/
    public org.ogre4j.IVertexDeclaration.IVertexElementList getElements() {
         return new org.ogre4j.VertexDeclaration.VertexElementList(new InstancePointer(_getElements_const(this.object.pointer)));
    }

    private native long _getElements_const(long _pointer_);

    /** 
    Get a single element. **/
    public org.ogre4j.IVertexElement getElement(int index) {
         return new org.ogre4j.VertexElement(new InstancePointer(_getElement__Hv(this.object.pointer, index)));
    }

    private native long _getElement__Hv(long _pointer_, int index);

    /** 
    Sorts the elements in this list to be compatible with the maximum number of rendering APIs / graphics cards. **/
    public void sort() {
        _sort(this.object.pointer);
    }

    private native void _sort(long _pointer_);

    /** 
    Remove any gaps in the source buffer list used by this declaration. **/
    public void closeGapsInSource() {
        _closeGapsInSource(this.object.pointer);
    }

    private native void _closeGapsInSource(long _pointer_);

    /** 
    Generates a new  for optimal usage based on the current vertex declaration, which can be used with  later if you wish, or simply used as a template. **/
    public org.ogre4j.IVertexDeclaration getAutoOrganisedDeclaration(boolean skeletalAnimation, boolean vertexAnimation) {
         return new org.ogre4j.VertexDeclaration(new InstancePointer(_getAutoOrganisedDeclaration__bvbv(this.object.pointer, skeletalAnimation,  vertexAnimation)));
    }

    private native long _getAutoOrganisedDeclaration__bvbv(long _pointer_, boolean skeletalAnimation, boolean vertexAnimation);

    /** 
    Gets the index of the highest source value referenced by this declaration. **/
    public int getMaxSource() {
         return _getMaxSource_const(this.object.pointer);
    }

    private native int _getMaxSource_const(long _pointer_);

    /** 
    Adds a new  to this declaration. **/
    public org.ogre4j.IVertexElement addElement(int source, int offset, org.ogre4j.VertexElementType theType, org.ogre4j.VertexElementSemantic semantic, int index) {
         return new org.ogre4j.VertexElement(new InstancePointer(_addElement__HvivVertexElementTypevVertexElementSemanticvHv(this.object.pointer, source,  offset,  theType.getValue(),  semantic.getValue(),  index)));
    }

    private native long _addElement__HvivVertexElementTypevVertexElementSemanticvHv(long _pointer_, int source, int offset, int theType, int semantic, int index);

    /** 
    Inserts a new  at a given position in this declaration. **/
    public org.ogre4j.IVertexElement insertElement(int atPosition, int source, int offset, org.ogre4j.VertexElementType theType, org.ogre4j.VertexElementSemantic semantic, int index) {
         return new org.ogre4j.VertexElement(new InstancePointer(_insertElement__HvHvivVertexElementTypevVertexElementSemanticvHv(this.object.pointer, atPosition,  source,  offset,  theType.getValue(),  semantic.getValue(),  index)));
    }

    private native long _insertElement__HvHvivVertexElementTypevVertexElementSemanticvHv(long _pointer_, int atPosition, int source, int offset, int theType, int semantic, int index);

    /** 
    Remove the element at the given index from this declaration. **/
    public void removeElement(int elem_index) {
        _removeElement__Hv(this.object.pointer, elem_index);
    }

    private native void _removeElement__Hv(long _pointer_, int elem_index);

    /** 
    Remove the element with the given semantic and usage index. **/
    public void removeElement(org.ogre4j.VertexElementSemantic semantic, int index) {
        _removeElement__VertexElementSemanticvHv(this.object.pointer, semantic.getValue(),  index);
    }

    private native void _removeElement__VertexElementSemanticvHv(long _pointer_, int semantic, int index);

    /** 
    Remove all elements. **/
    public void removeAllElements() {
        _removeAllElements(this.object.pointer);
    }

    private native void _removeAllElements(long _pointer_);

    /** 
    Modify an element in-place, params as addElement. **/
    public void modifyElement(int elem_index, int source, int offset, org.ogre4j.VertexElementType theType, org.ogre4j.VertexElementSemantic semantic, int index) {
        _modifyElement__HvHvivVertexElementTypevVertexElementSemanticvHv(this.object.pointer, elem_index,  source,  offset,  theType.getValue(),  semantic.getValue(),  index);
    }

    private native void _modifyElement__HvHvivVertexElementTypevVertexElementSemanticvHv(long _pointer_, int elem_index, int source, int offset, int theType, int semantic, int index);

    /** 
    Finds a  with the given semantic, and index if there is more than one element with the same semantic. **/
    public org.ogre4j.IVertexElement findElementBySemantic(org.ogre4j.VertexElementSemantic sem, int index) {
         return new org.ogre4j.VertexElement(new InstancePointer(_findElementBySemantic__VertexElementSemanticvHv(this.object.pointer, sem.getValue(),  index)));
    }

    private native long _findElementBySemantic__VertexElementSemanticvHv(long _pointer_, int sem, int index);

    /** 
    Gets a list of elements which use a given source. **/
    public void findElementsBySource(org.ogre4j.IVertexDeclaration.IVertexElementList returnValue, int source) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_findElementsBySource__Hv(this.object.pointer, source)), false);
    }

    private native long _findElementsBySource__Hv(long _pointer_, int source);

    /** 
    Gets the vertex size defined by this declaration for a given source. **/
    public int getVertexSize(int source) {
         return _getVertexSize__Hv(this.object.pointer, source);
    }

    private native int _getVertexSize__Hv(long _pointer_, int source);

    /** 
    Clones this declaration. **/
    public org.ogre4j.IVertexDeclaration clone() {
         return new org.ogre4j.VertexDeclaration(new InstancePointer(_clone(this.object.pointer)));
    }

    private native long _clone(long _pointer_);

    /** **/
    public boolean operatorEqual(org.ogre4j.IVertexDeclaration rhs) {
         return _operatorEqual__VertexDeclarationR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__VertexDeclarationR_const(long _pointer_, long rhs);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IVertexDeclaration rhs) {
         return _operatorNotEqual__VertexDeclarationR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__VertexDeclarationR_const(long _pointer_, long rhs);

    /** **/
    public static boolean vertexElementLess(org.ogre4j.IVertexElement e1, org.ogre4j.IVertexElement e2) {
         return _vertexElementLess__VertexElementRVertexElementR( e1.getInstancePointer().pointer,  e2.getInstancePointer().pointer);
    }

    private native static boolean _vertexElementLess__VertexElementRVertexElementR(long e1, long e2);

}
