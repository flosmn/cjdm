/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class PSSMShadowCameraSetup extends org.xbig.base.NativeObject implements org.ogre4j.IPSSMShadowCameraSetup {
static { System.loadLibrary("ogre4j");}
public static class SplitPointList extends org.xbig.base.NativeObject implements org.ogre4j.IPSSMShadowCameraSetup.ISplitPointList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SplitPointList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SplitPointList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SplitPointList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SplitPointList() {
         super( new org.xbig.base.InstancePointer(__createSplitPointList()), false);
    }

    private native static long __createSplitPointList();

    /** **/
    public void assign(int num, float val) {
        _assign__ivFR(this.object.pointer, num,  val);
    }

    private native void _assign__ivFR(long _pointer_, int num, float val);

    /** **/
    public FloatPointer at(int loc) {
         return new FloatPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public FloatPointer back() {
         return new FloatPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public FloatPointer front() {
         return new FloatPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(float val) {
        _push_back__FR(this.object.pointer, val);
    }

    private native void _push_back__FR(long _pointer_, float val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class OptimalAdjustFactorList extends org.xbig.base.NativeObject implements org.ogre4j.IPSSMShadowCameraSetup.IOptimalAdjustFactorList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public OptimalAdjustFactorList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected OptimalAdjustFactorList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public OptimalAdjustFactorList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public OptimalAdjustFactorList() {
         super( new org.xbig.base.InstancePointer(__createOptimalAdjustFactorList()), false);
    }

    private native static long __createOptimalAdjustFactorList();

    /** **/
    public void assign(int num, float val) {
        _assign__ivFR(this.object.pointer, num,  val);
    }

    private native void _assign__ivFR(long _pointer_, int num, float val);

    /** **/
    public FloatPointer at(int loc) {
         return new FloatPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public FloatPointer back() {
         return new FloatPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public FloatPointer front() {
         return new FloatPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(float val) {
        _push_back__FR(this.object.pointer, val);
    }

    private native void _push_back__FR(long _pointer_, float val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PSSMShadowCameraSetup(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PSSMShadowCameraSetup(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PSSMShadowCameraSetup(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PSSMShadowCameraSetup() {
         super( new org.xbig.base.InstancePointer(__createPSSMShadowCameraSetup()), false);
    }

    private native static long __createPSSMShadowCameraSetup();

    /** 
    Calculate a new splitting scheme. **/
    public void calculateSplitPoints(int splitCount, float nearDist, float farDist, float lambda) {
        _calculateSplitPoints__ivRealvRealvRealv(this.object.pointer, splitCount,  nearDist,  farDist,  lambda);
    }

    private native void _calculateSplitPoints__ivRealvRealvRealv(long _pointer_, int splitCount, float nearDist, float farDist, float lambda);

    /** 
    Manually configure a new splitting scheme. **/
    public void setSplitPoints(org.ogre4j.IPSSMShadowCameraSetup.ISplitPointList newSplitPoints) {
        _setSplitPoints__SplitPointListR(this.object.pointer, newSplitPoints.getInstancePointer().pointer);
    }

    private native void _setSplitPoints__SplitPointListR(long _pointer_, long newSplitPoints);

    /** 
    Set the LiSPSM optimal adjust factor for a given split (call after configuring splits). **/
    public void setOptimalAdjustFactor(int splitIndex, float factor) {
        _setOptimalAdjustFactor__ivRealv(this.object.pointer, splitIndex,  factor);
    }

    private native void _setOptimalAdjustFactor__ivRealv(long _pointer_, int splitIndex, float factor);

    /** 
    Set the padding factor to apply to the near & far distances when matching up splits to one another, to avoid 'cracks'. **/
    public void setSplitPadding(float pad) {
        _setSplitPadding__Realv(this.object.pointer, pad);
    }

    private native void _setSplitPadding__Realv(long _pointer_, float pad);

    /** 
    Get the padding factor to apply to the near & far distances when matching up splits to one another, to avoid 'cracks'. **/
    public float getSplitPadding() {
         return _getSplitPadding_const(this.object.pointer);
    }

    private native float _getSplitPadding_const(long _pointer_);

    /** **/
    public int getSplitCount() {
         return _getSplitCount_const(this.object.pointer);
    }

    private native int _getSplitCount_const(long _pointer_);

//    /** **/
//    public void getShadowCamera(org.ogre4j.ISceneManager sm, org.ogre4j.ICamera cam, org.ogre4j.IViewport vp, org.ogre4j.ILight light, org.ogre4j.ICamera texCam, int iteration) {
//        _getShadowCamera__Ogre_SceneManagerPOgre_CameraPOgre_ViewportPOgre_LightPOgre_Camerapiv_const(this.object.pointer, sm.getInstancePointer().pointer,  cam.getInstancePointer().pointer,  vp.getInstancePointer().pointer,  light.getInstancePointer().pointer,  texCam.getInstancePointer().pointer,  iteration);
//    }
//
//    private native void _getShadowCamera__Ogre_SceneManagerPOgre_CameraPOgre_ViewportPOgre_LightPOgre_Camerapiv_const(long _pointer_, long sm, long cam, long vp, long light, long texCam, int iteration);

    /** **/
    public org.ogre4j.IPSSMShadowCameraSetup.ISplitPointList getSplitPoints() {
         return new org.ogre4j.PSSMShadowCameraSetup.SplitPointList(new InstancePointer(_getSplitPoints_const(this.object.pointer)));
    }

    private native long _getSplitPoints_const(long _pointer_);

    /** **/
    public float getOptimalAdjustFactor(int splitIndex) {
         return _getOptimalAdjustFactor__iv_const(this.object.pointer, splitIndex);
    }

    private native float _getOptimalAdjustFactor__iv_const(long _pointer_, int splitIndex);

    /** **/
    public float getOptimalAdjustFactor() {
         return _getOptimalAdjustFactor_const(this.object.pointer);
    }

    private native float _getOptimalAdjustFactor_const(long _pointer_);

    /** 
    Returns a LiSPSM shadow camera. **/
    public void getShadowCamera(org.ogre4j.ISceneManager sm, org.ogre4j.ICamera cam, org.ogre4j.IViewport vp, org.ogre4j.ILight light, org.ogre4j.ICamera texCam, int iteration) {
        _getShadowCamera__SceneManagerPCameraPViewportPLightPCamerapiv_const(this.object.pointer, sm.getInstancePointer().pointer,  cam.getInstancePointer().pointer,  vp.getInstancePointer().pointer,  light.getInstancePointer().pointer,  texCam.getInstancePointer().pointer,  iteration);
    }

    private native void _getShadowCamera__SceneManagerPCameraPViewportPLightPCamerapiv_const(long _pointer_, long sm, long cam, long vp, long light, long texCam, int iteration);

    /** 
    Adjusts the parameter n to produce optimal shadows. **/
    public void setOptimalAdjustFactor(float n) {
        _setOptimalAdjustFactor__Realv(this.object.pointer, n);
    }

    private native void _setOptimalAdjustFactor__Realv(long _pointer_, float n);

    /** 
    Sets whether or not to use a slightly simpler version of the camera near point derivation (default is true) **/
    public void setUseSimpleOptimalAdjust(boolean s) {
        _setUseSimpleOptimalAdjust__bv(this.object.pointer, s);
    }

    private native void _setUseSimpleOptimalAdjust__bv(long _pointer_, boolean s);

    /** 
    Gets whether or not to use a slightly simpler version of the camera near point derivation (default is true) **/
    public boolean getUseSimpleOptimalAdjust() {
         return _getUseSimpleOptimalAdjust_const(this.object.pointer);
    }

    private native boolean _getUseSimpleOptimalAdjust_const(long _pointer_);

    /** 
    Sets whether or not to use the more aggressive approach to deciding on the focus region or not. **/
    public void setUseAggressiveFocusRegion(boolean aggressive) {
        _setUseAggressiveFocusRegion__bv(this.object.pointer, aggressive);
    }

    private native void _setUseAggressiveFocusRegion__bv(long _pointer_, boolean aggressive);

    /** **/
    public boolean getUseAggressiveFocusRegion() {
         return _getUseAggressiveFocusRegion_const(this.object.pointer);
    }

    private native boolean _getUseAggressiveFocusRegion_const(long _pointer_);

}
