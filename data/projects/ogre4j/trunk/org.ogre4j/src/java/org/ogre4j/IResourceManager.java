/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IResourceManager extends INativeObject, org.ogre4j.IScriptLoader, org.ogre4j.IResourceAllocatedObject {

public interface IResourceCreateOrRetrieveResult extends INativeObject, org.std.Ipair< org.ogre4j.IResourcePtr, Boolean > {

    /** **/
    public void getfirst(org.ogre4j.IResourcePtr returnValue);

    /** **/
    public void setfirst(org.ogre4j.IResourcePtr _jni_value_);

    /** **/
    public boolean getsecond();

    /** **/
    public void setsecond(boolean _jni_value_);

}
public interface IResourceMap extends INativeObject, org.std.Ihash_map< String, org.ogre4j.IResourcePtr > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IResourcePtr get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IResourcePtr value);

}
public interface IResourceHandleMap extends INativeObject, org.std.Imap< Long, org.ogre4j.IResourcePtr > {

    /** **/
    public void clear();

    /** **/
    public int count(long key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(long key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IResourcePtr get(long key);

    /** **/
    public void insert(long key, org.ogre4j.IResourcePtr value);

}
public interface IResourceMapIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IResourceManager.IResourceHandleMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public void getNext(org.ogre4j.IResourcePtr returnValue);

    /** **/
    public void peekNextValue(org.ogre4j.IResourcePtr returnValue);

    /** **/
    public long peekNextKey();

    /** **/
    public org.ogre4j.IResourceManager.IResourceMapIterator operatorAssignment(org.ogre4j.IResourceManager.IResourceMapIterator rhs);

    /** **/
    public org.ogre4j.IResourcePtr peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** 
    Creates a new blank resource, but does not immediately load it. **/
    public void create(org.ogre4j.IResourcePtr returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList createParams);

    /** 
    Create a new resource, or retrieve an existing one with the same name if it already exists. **/
    public void createOrRetrieve(org.ogre4j.IResourceManager.IResourceCreateOrRetrieveResult returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList createParams);

    /** 
    Set a limit on the amount of memory this resource handler may use. **/
    public void setMemoryBudget(int bytes);

    /** 
    Get the limit on the amount of memory this resource handler may use. **/
    public int getMemoryBudget();

    /** 
    Gets the current memory usage, in bytes. **/
    public int getMemoryUsage();

    /** 
    Unloads a single resource by name. **/
    public void unload(String name);

    /** 
    Unloads a single resource by handle. **/
    public void unload(long handle);

    /** 
    Unloads all resources. **/
    public void unloadAll(boolean reloadableOnly);

    /** 
    Caused all currently loaded resources to be reloaded. **/
    public void reloadAll(boolean reloadableOnly);

    /** 
    Unload all resources which are not referenced by any other object. **/
    public void unloadUnreferencedResources(boolean reloadableOnly);

    /** 
    Caused all currently loaded but not referenced by any other object resources to be reloaded. **/
    public void reloadUnreferencedResources(boolean reloadableOnly);

    /** 
    Remove a single resource. **/
    public void remove(org.ogre4j.IResourcePtr r);

    /** 
    Remove a single resource by name. **/
    public void remove(String name);

    /** 
    Remove a single resource by handle. **/
    public void remove(long handle);

    /** 
    Removes all resources. **/
    public void removeAll();

    /** 
    Retrieves a pointer to a resource by name, or null if the resource does not exist. **/
    public void getByName(org.ogre4j.IResourcePtr returnValue, String name);

    /** 
    Retrieves a pointer to a resource by handle, or null if the resource does not exist. **/
    public void getByHandle(org.ogre4j.IResourcePtr returnValue, long handle);

    /** **/
    public boolean resourceExists(String name);

    /** **/
    public boolean resourceExists(long handle);

    /** 
    Notify this manager that a resource which it manages has been 'touched', i.e. used. **/
    public void _notifyResourceTouched(org.ogre4j.IResource res);

    /** 
    Notify this manager that a resource which it manages has been loaded. **/
    public void _notifyResourceLoaded(org.ogre4j.IResource res);

    /** 
    Notify this manager that a resource which it manages has been unloaded. **/
    public void _notifyResourceUnloaded(org.ogre4j.IResource res);

    /** 
    Generic prepare method, used to create a  specific to this  without using one of the specialised 'prepare' methods (containing per-Resource-type parameters). **/
    public void prepare(org.ogre4j.IResourcePtr returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList loadParams);

    /** 
    Generic load method, used to create a  specific to this  without using one of the specialised 'load' methods (containing per-Resource-type parameters). **/
    public void load(org.ogre4j.IResourcePtr returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList loadParams);

    /** 
    Gets the file patterns which should be used to find scripts for this . **/
    public org.ogre4j.IStringVector getScriptPatterns();

    /** 
    Parse the definition of a set of resources from a script file. **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream, String groupName);

    /** 
    Gets the relative loading order of resources of this type. **/
    public float getLoadingOrder();

    /** 
    Gets a string identifying the type of resource this manager handles. **/
    public String getResourceType();

    /** 
    Sets whether this manager and its resources habitually produce log output **/
    public void setVerbose(boolean v);

    /** 
    Gets whether this manager and its resources habitually produce log output **/
    public boolean getVerbose();

    /** 
    Returns an iterator over all resources in this manager. **/
    public void getResourceIterator(org.ogre4j.IResourceManager.IResourceMapIterator returnValue);

}
