/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IPolygon extends INativeObject {

public interface IVertexList extends INativeObject, org.std.Ivector< org.ogre4j.IVector3 > {

    /** **/
    public void assign(int num, org.ogre4j.IVector3 val);

    /** **/
    public org.ogre4j.IVector3 at(int loc);

    /** **/
    public org.ogre4j.IVector3 back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IVector3 front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IVector3 val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IEdgeMap extends INativeObject, org.std.Imultimap< org.ogre4j.IVector3, org.ogre4j.IVector3 > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IVector3 key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IVector3 key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IEdge extends INativeObject, org.std.Ipair< org.ogre4j.IVector3, org.ogre4j.IVector3 > {

    /** **/
    public void getfirst(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setfirst(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getsecond(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setsecond(org.ogre4j.IVector3 _jni_value_);

}
    /** 
    Inserts a vertex at a specific position. **/
    public void insertVertex(org.ogre4j.IVector3 vdata, int vertexIndex);

    /** 
    Inserts a vertex at the end of the polygon. **/
    public void insertVertex(org.ogre4j.IVector3 vdata);

    /** 
    Returns a vertex. **/
    public org.ogre4j.IVector3 getVertex(int vertex);

    /** 
    Sets a specific vertex of a polygon. **/
    public void setVertex(org.ogre4j.IVector3 vdata, int vertexIndex);

    /** 
    Removes duplicate vertices from a polygon. **/
    public void removeDuplicates();

    /** 
    Vertex count. **/
    public int getVertexCount();

    /** 
    Returns the polygon normal. **/
    public org.ogre4j.IVector3 getNormal();

    /** 
    Deletes a specific vertex. **/
    public void deleteVertex(int vertex);

    /** 
    Determines if a point is inside the polygon. **/
    public boolean isPointInside(org.ogre4j.IVector3 point);

    /** 
    Stores the edges of the polygon in ccw order. The vertices are copied so the user has to take the deletion into account. **/
    public void storeEdges(org.ogre4j.IPolygon.IEdgeMap edgeMap);

    /** 
    Resets the object. **/
    public void reset();

    /** 
    Determines if the current object is equal to the compared one. **/
    public boolean operatorEqual(org.ogre4j.IPolygon rhs);

    /** 
    Determines if the current object is not equal to the compared one. **/
    public boolean operatorNotEqual(org.ogre4j.IPolygon rhs);

}
