/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Particle extends org.xbig.base.NativeObject implements org.ogre4j.IParticle {
static { System.loadLibrary("ogre4j");}
public enum ParticleType implements INativeEnum < ParticleType > {
    Visual(ParticleTypeHelper.ENUM_VALUES[0]),
    Emitter(ParticleTypeHelper.ENUM_VALUES[1]);

    private int value;

    ParticleType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public ParticleType getEnum(int val) {
        return toEnum(val);
    }

    public static final ParticleType toEnum(int retval) {
    if (retval ==Visual.value)
        return ParticleType.Visual;
    else if (retval ==Emitter.value)
        return ParticleType.Emitter;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class ParticleTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Particle(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Particle(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Particle(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Particle() {
         super( new org.xbig.base.InstancePointer(__createParticle()), false);
    }

    private native static long __createParticle();

    /** 
    Sets the width and height for this particle. **/
    public void setDimensions(float width, float height) {
        _setDimensions__RealvRealv(this.object.pointer, width,  height);
    }

    private native void _setDimensions__RealvRealv(long _pointer_, float width, float height);

    /** 
    Returns true if this particle deviates from the ParticleSystem's default dimensions (i.e. if the particle::setDimensions method has been called for this instance). **/
    public boolean hasOwnDimensions() {
         return _hasOwnDimensions_const(this.object.pointer);
    }

    private native boolean _hasOwnDimensions_const(long _pointer_);

    /** 
    Retrieves the particle's personal width, if hasOwnDimensions is true. **/
    public float getOwnWidth() {
         return _getOwnWidth_const(this.object.pointer);
    }

    private native float _getOwnWidth_const(long _pointer_);

    /** 
    Retrieves the particle's personal width, if hasOwnDimensions is true. **/
    public float getOwnHeight() {
         return _getOwnHeight_const(this.object.pointer);
    }

    private native float _getOwnHeight_const(long _pointer_);

    /** 
    Sets the current rotation **/
    public void setRotation(org.ogre4j.IRadian rad) {
        _setRotation__RadianR(this.object.pointer, rad.getInstancePointer().pointer);
    }

    private native void _setRotation__RadianR(long _pointer_, long rad);

    /** **/
    public org.ogre4j.IRadian getRotation() {
         return new org.ogre4j.Radian(new InstancePointer(_getRotation_const(this.object.pointer)));
    }

    private native long _getRotation_const(long _pointer_);

    /** 
    Internal method for notifying the particle of it's owner. **/
    public void _notifyOwner(org.ogre4j.IParticleSystem owner) {
        __notifyOwner__ParticleSystemp(this.object.pointer, owner.getInstancePointer().pointer);
    }

    private native void __notifyOwner__ParticleSystemp(long _pointer_, long owner);

    /** 
    Internal method for notifying the particle of it's optional visual data. **/
    public void _notifyVisualData(org.ogre4j.IParticleVisualData vis) {
        __notifyVisualData__ParticleVisualDatap(this.object.pointer, vis.getInstancePointer().pointer);
    }

    private native void __notifyVisualData__ParticleVisualDatap(long _pointer_, long vis);

    /** **/
    public org.ogre4j.IParticleVisualData getVisualData() {
         return new org.ogre4j.ParticleVisualData(new InstancePointer(_getVisualData_const(this.object.pointer)));
    }

    private native long _getVisualData_const(long _pointer_);

    /** **/
    public void resetDimensions() {
        _resetDimensions(this.object.pointer);
    }

    private native void _resetDimensions(long _pointer_);

    /** **/
    public boolean getmOwnDimensions() {
         return _getmOwnDimensions(this.object.pointer);
    }

    private native boolean _getmOwnDimensions(long _pointer_);

    /** **/
    public void setmOwnDimensions(boolean _jni_value_) {
        _setmOwnDimensions(this.object.pointer, _jni_value_);
    }

    private native void _setmOwnDimensions(long _pointer_, boolean _jni_value_);

    /** **/
    public float getmWidth() {
         return _getmWidth(this.object.pointer);
    }

    private native float _getmWidth(long _pointer_);

    /** **/
    public void setmWidth(float _jni_value_) {
        _setmWidth(this.object.pointer, _jni_value_);
    }

    private native void _setmWidth(long _pointer_, float _jni_value_);

    /** **/
    public float getmHeight() {
         return _getmHeight(this.object.pointer);
    }

    private native float _getmHeight(long _pointer_);

    /** **/
    public void setmHeight(float _jni_value_) {
        _setmHeight(this.object.pointer, _jni_value_);
    }

    private native void _setmHeight(long _pointer_, float _jni_value_);

    /** **/
    public void getrotation(org.ogre4j.IRadian returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getrotation(this.object.pointer)), false);
    }

    private native long _getrotation(long _pointer_);

    /** **/
    public void setrotation(org.ogre4j.IRadian _jni_value_) {
        _setrotation(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrotation(long _pointer_, long _jni_value_);

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getposition(this.object.pointer)), false);
    }

    private native long _getposition(long _pointer_);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_) {
        _setposition(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setposition(long _pointer_, long _jni_value_);

    /** **/
    public void getdirection(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getdirection(this.object.pointer)), false);
    }

    private native long _getdirection(long _pointer_);

    /** **/
    public void setdirection(org.ogre4j.IVector3 _jni_value_) {
        _setdirection(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setdirection(long _pointer_, long _jni_value_);

    /** **/
    public void getcolour(org.ogre4j.IColourValue returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getcolour(this.object.pointer)), false);
    }

    private native long _getcolour(long _pointer_);

    /** **/
    public void setcolour(org.ogre4j.IColourValue _jni_value_) {
        _setcolour(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setcolour(long _pointer_, long _jni_value_);

    /** **/
    public float gettimeToLive() {
         return _gettimeToLive(this.object.pointer);
    }

    private native float _gettimeToLive(long _pointer_);

    /** **/
    public void settimeToLive(float _jni_value_) {
        _settimeToLive(this.object.pointer, _jni_value_);
    }

    private native void _settimeToLive(long _pointer_, float _jni_value_);

    /** **/
    public float gettotalTimeToLive() {
         return _gettotalTimeToLive(this.object.pointer);
    }

    private native float _gettotalTimeToLive(long _pointer_);

    /** **/
    public void settotalTimeToLive(float _jni_value_) {
        _settotalTimeToLive(this.object.pointer, _jni_value_);
    }

    private native void _settotalTimeToLive(long _pointer_, float _jni_value_);

    /** **/
    public void getrotationSpeed(org.ogre4j.IRadian returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getrotationSpeed(this.object.pointer)), false);
    }

    private native long _getrotationSpeed(long _pointer_);

    /** **/
    public void setrotationSpeed(org.ogre4j.IRadian _jni_value_) {
        _setrotationSpeed(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrotationSpeed(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.Particle.ParticleType getparticleType() {
         return org.ogre4j.Particle.ParticleType.toEnum(_getparticleType(this.object.pointer));
    }

    private native int _getparticleType(long _pointer_);

    /** **/
    public void setparticleType(org.ogre4j.Particle.ParticleType _jni_value_) {
        _setparticleType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setparticleType(long _pointer_, int _jni_value_);

}
