/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class AxisAlignedBoxSceneQuery extends org.xbig.base.NativeObject implements org.ogre4j.IAxisAlignedBoxSceneQuery {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AxisAlignedBoxSceneQuery(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AxisAlignedBoxSceneQuery(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AxisAlignedBoxSceneQuery(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Sets the size of the box you wish to query. **/
    public void setBox(org.ogre4j.IAxisAlignedBox box) {
        _setBox__AxisAlignedBoxR(this.object.pointer, box.getInstancePointer().pointer);
    }

    private native void _setBox__AxisAlignedBoxR(long _pointer_, long box);

    /** 
    Gets the box which is being used for this query. **/
    public org.ogre4j.IAxisAlignedBox getBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBox_const(this.object.pointer)));
    }

    private native long _getBox_const(long _pointer_);

    /** 
    Executes the query, returning the results back in one list. **/
    public org.ogre4j.ISceneQueryResult execute() {
         return new org.ogre4j.SceneQueryResult(new InstancePointer(_execute(this.object.pointer)));
    }

    private native long _execute(long _pointer_);

    /** 
    Executes the query and returns each match through a listener interface. **/
    public void execute(org.ogre4j.ISceneQueryListener listener) {
        _execute__SceneQueryListenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _execute__SceneQueryListenerp(long _pointer_, long listener);

    /** 
    Gets the results of the last query that was run using this object, provided the query was executed using the collection-returning version of execute. **/
    public org.ogre4j.ISceneQueryResult getLastResults() {
         return new org.ogre4j.SceneQueryResult(new InstancePointer(_getLastResults_const(this.object.pointer)));
    }

    private native long _getLastResults_const(long _pointer_);

    /** 
    Clears the results of the last query execution. **/
    public void clearResults() {
        _clearResults(this.object.pointer);
    }

    private native void _clearResults(long _pointer_);

    /** 
    Self-callback in order to deal with execute which returns collection. **/
    public boolean queryResult(org.ogre4j.IMovableObject first) {
         return _queryResult__MovableObjectp(this.object.pointer, first.getInstancePointer().pointer);
    }

    private native boolean _queryResult__MovableObjectp(long _pointer_, long first);

    /** 
    Self-callback in order to deal with execute which returns collection. **/
    public boolean queryResult(org.ogre4j.ISceneQuery.IWorldFragment fragment) {
         return _queryResult__SceneQuery_WorldFragmentp(this.object.pointer, fragment.getInstancePointer().pointer);
    }

    private native boolean _queryResult__SceneQuery_WorldFragmentp(long _pointer_, long fragment);

    /** 
    Sets the mask for results of this query. **/
    public void setQueryMask(long mask) {
        _setQueryMask__uint32v(this.object.pointer, mask);
    }

    private native void _setQueryMask__uint32v(long _pointer_, long mask);

    /** 
    Returns the current mask for this query. **/
    public long getQueryMask() {
         return _getQueryMask_const(this.object.pointer);
    }

    private native long _getQueryMask_const(long _pointer_);

    /** 
    Sets the type mask for results of this query. **/
    public void setQueryTypeMask(long mask) {
        _setQueryTypeMask__uint32v(this.object.pointer, mask);
    }

    private native void _setQueryTypeMask__uint32v(long _pointer_, long mask);

    /** 
    Returns the current mask for this query. **/
    public long getQueryTypeMask() {
         return _getQueryTypeMask_const(this.object.pointer);
    }

    private native long _getQueryTypeMask_const(long _pointer_);

    /** 
    Tells the query what kind of world geometry to return from queries; often the full renderable geometry is not what is needed. **/
    public void setWorldFragmentType(org.ogre4j.SceneQuery.WorldFragmentType wft) {
        _setWorldFragmentType__WorldFragmentTypev(this.object.pointer, wft.getValue());
    }

    private native void _setWorldFragmentType__WorldFragmentTypev(long _pointer_, int wft);

    /** 
    Gets the current world fragment types to be returned from the query. **/
    public org.ogre4j.SceneQuery.WorldFragmentType getWorldFragmentType() {
         return org.ogre4j.SceneQuery.WorldFragmentType.toEnum(_getWorldFragmentType_const(this.object.pointer));
    }

    private native int _getWorldFragmentType_const(long _pointer_);

    /** 
    Returns the types of world fragments this query supports. **/
    public void getSupportedWorldFragmentTypes(org.std.Iset< org.ogre4j.SceneQuery.WorldFragmentType > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getSupportedWorldFragmentTypes_const(this.object.pointer)), true);
    }

    private native long _getSupportedWorldFragmentTypes_const(long _pointer_);

}
