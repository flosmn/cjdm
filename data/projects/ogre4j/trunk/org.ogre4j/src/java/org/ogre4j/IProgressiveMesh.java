/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IProgressiveMesh extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

public static interface IPMFaceVertex extends INativeObject {

    /** **/
    public int getrealIndex();

    /** **/
    public void setrealIndex(int _jni_value_);

;

;

}
public static interface IPMTriangle extends INativeObject {

    /** **/
    public void setDetails(int index, org.ogre4j.IProgressiveMesh.IPMFaceVertex v0, org.ogre4j.IProgressiveMesh.IPMFaceVertex v1, org.ogre4j.IProgressiveMesh.IPMFaceVertex v2);

    /** **/
    public void computeNormal();

    /** **/
    public void replaceVertex(org.ogre4j.IProgressiveMesh.IPMFaceVertex vold, org.ogre4j.IProgressiveMesh.IPMFaceVertex vnew);

    /** **/
    public boolean hasCommonVertex(org.ogre4j.IProgressiveMesh.IPMVertex v);

    /** **/
    public boolean hasFaceVertex(org.ogre4j.IProgressiveMesh.IPMFaceVertex v);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMFaceVertex getFaceVertexFromCommon(org.ogre4j.IProgressiveMesh.IPMVertex commonVert);

    /** **/
    public void notifyRemoved();

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMFaceVertex getvertex();

    /** **/
    public void setvertex(org.ogre4j.IProgressiveMesh.IPMFaceVertex _jni_value_);

    /** **/
    public void getnormal(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setnormal(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public boolean getremoved();

    /** **/
    public void setremoved(boolean _jni_value_);

    /** **/
    public int getindex();

    /** **/
    public void setindex(int _jni_value_);

}
public static interface IPMVertex extends INativeObject {

public interface INeighborList extends INativeObject, org.std.Iset< org.ogre4j.IProgressiveMesh.IPMVertex > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IProgressiveMesh.IPMVertex key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IProgressiveMesh.IPMVertex key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IDuplicateList extends INativeObject, org.std.Iset< org.ogre4j.IProgressiveMesh.IPMVertex > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IProgressiveMesh.IPMVertex key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IProgressiveMesh.IPMVertex key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IFaceList extends INativeObject, org.std.Iset< org.ogre4j.IProgressiveMesh.IPMTriangle > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IProgressiveMesh.IPMTriangle key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IProgressiveMesh.IPMTriangle key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
    /** **/
    public void setDetails(org.ogre4j.IVector3 v, int index);

    /** **/
    public void removeIfNonNeighbor(org.ogre4j.IProgressiveMesh.IPMVertex n);

    /** **/
    public boolean isBorder();

    /** **/
    public boolean isManifoldEdgeWith(org.ogre4j.IProgressiveMesh.IPMVertex v);

    /** **/
    public void notifyRemoved();

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public int getindex();

    /** **/
    public void setindex(int _jni_value_);

    /** **/
    public void getneighbor(org.ogre4j.IProgressiveMesh.IPMVertex.INeighborList returnValue);

    /** **/
    public void setneighbor(org.ogre4j.IProgressiveMesh.IPMVertex.INeighborList _jni_value_);

    /** **/
    public void getface(org.ogre4j.IProgressiveMesh.IPMVertex.IFaceList returnValue);

    /** **/
    public void setface(org.ogre4j.IProgressiveMesh.IPMVertex.IFaceList _jni_value_);

    /** **/
    public float getcollapseCost();

    /** **/
    public void setcollapseCost(float _jni_value_);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMVertex getcollapseTo();

    /** **/
    public void setcollapseTo(org.ogre4j.IProgressiveMesh.IPMVertex _jni_value_);

    /** **/
    public boolean getremoved();

    /** **/
    public void setremoved(boolean _jni_value_);

    /** **/
    public boolean gettoBeRemoved();

    /** **/
    public void settoBeRemoved(boolean _jni_value_);

    /** **/
    public boolean getseam();

    /** **/
    public void setseam(boolean _jni_value_);

}
public static interface IPMWorkingData extends INativeObject {

    /** **/
    public void getmTriList(org.ogre4j.IProgressiveMesh.ITriangleList returnValue);

    /** **/
    public void setmTriList(org.ogre4j.IProgressiveMesh.ITriangleList _jni_value_);

    /** **/
    public void getmFaceVertList(org.ogre4j.IProgressiveMesh.IFaceVertexList returnValue);

    /** **/
    public void setmFaceVertList(org.ogre4j.IProgressiveMesh.IFaceVertexList _jni_value_);

    /** **/
    public void getmVertList(org.ogre4j.IProgressiveMesh.ICommonVertexList returnValue);

    /** **/
    public void setmVertList(org.ogre4j.IProgressiveMesh.ICommonVertexList _jni_value_);

}
public interface ILODFaceList extends INativeObject, org.std.Ivector< org.ogre4j.IIndexData > {

    /** **/
    public void assign(int num, org.ogre4j.IIndexData val);

    /** **/
    public org.ogre4j.IIndexData at(int loc);

    /** **/
    public org.ogre4j.IIndexData back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IIndexData front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IIndexData val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ITriangleList extends INativeObject, org.std.Ivector< org.ogre4j.IProgressiveMesh.IPMTriangle > {

    /** **/
    public void assign(int num, org.ogre4j.IProgressiveMesh.IPMTriangle val);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMTriangle at(int loc);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMTriangle back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMTriangle front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IProgressiveMesh.IPMTriangle val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IFaceVertexList extends INativeObject, org.std.Ivector< org.ogre4j.IProgressiveMesh.IPMFaceVertex > {

    /** **/
    public void assign(int num, org.ogre4j.IProgressiveMesh.IPMFaceVertex val);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMFaceVertex at(int loc);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMFaceVertex back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMFaceVertex front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IProgressiveMesh.IPMFaceVertex val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ICommonVertexList extends INativeObject, org.std.Ivector< org.ogre4j.IProgressiveMesh.IPMVertex > {

    /** **/
    public void assign(int num, org.ogre4j.IProgressiveMesh.IPMVertex val);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMVertex at(int loc);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMVertex back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMVertex front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IProgressiveMesh.IPMVertex val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IWorstCostList extends INativeObject, org.std.Ivector< Float > {

    /** **/
    public void assign(int num, float val);

    /** **/
    public FloatPointer at(int loc);

    /** **/
    public FloatPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public FloatPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(float val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IWorkingDataList extends INativeObject, org.std.Ivector< org.ogre4j.IProgressiveMesh.IPMWorkingData > {

    /** **/
    public void assign(int num, org.ogre4j.IProgressiveMesh.IPMWorkingData val);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMWorkingData at(int loc);

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMWorkingData back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IProgressiveMesh.IPMWorkingData front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IProgressiveMesh.IPMWorkingData val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Adds an extra vertex position buffer. **/
    public void addExtraVertexPositionBuffer(org.ogre4j.IVertexData vertexData);

    /** 
    Builds the progressive mesh with the specified number of levels. **/
    public void build(int numLevels, org.ogre4j.IProgressiveMesh.ILODFaceList outList, org.ogre4j.ProgressiveMesh.VertexReductionQuota quota, float reductionValue);

}
