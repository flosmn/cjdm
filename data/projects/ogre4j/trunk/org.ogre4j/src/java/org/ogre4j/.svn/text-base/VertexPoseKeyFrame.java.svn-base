/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class VertexPoseKeyFrame extends org.xbig.base.NativeObject implements org.ogre4j.IVertexPoseKeyFrame {
static { System.loadLibrary("ogre4j");}
public static class PoseRef extends org.xbig.base.NativeObject implements org.ogre4j.IVertexPoseKeyFrame.IPoseRef {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PoseRef(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PoseRef(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PoseRef(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PoseRef(int p, float i) {
         super( new org.xbig.base.InstancePointer(__createPoseRef__ushortvRealv( p,  i)), false);
    }

    private native static long __createPoseRef__ushortvRealv(int p, float i);

    /** **/
    public int getposeIndex() {
         return _getposeIndex(this.object.pointer);
    }

    private native int _getposeIndex(long _pointer_);

    /** **/
    public void setposeIndex(int _jni_value_) {
        _setposeIndex(this.object.pointer, _jni_value_);
    }

    private native void _setposeIndex(long _pointer_, int _jni_value_);

    /** **/
    public float getinfluence() {
         return _getinfluence(this.object.pointer);
    }

    private native float _getinfluence(long _pointer_);

    /** **/
    public void setinfluence(float _jni_value_) {
        _setinfluence(this.object.pointer, _jni_value_);
    }

    private native void _setinfluence(long _pointer_, float _jni_value_);

}
public static class PoseRefList extends org.xbig.base.NativeObject implements org.ogre4j.IVertexPoseKeyFrame.IPoseRefList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PoseRefList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PoseRefList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PoseRefList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PoseRefList() {
         super( new org.xbig.base.InstancePointer(__createPoseRefList()), false);
    }

    private native static long __createPoseRefList();

    /** **/
    public void assign(int num, org.ogre4j.IVertexPoseKeyFrame.IPoseRef val) {
        _assign__ivOgre_VertexPoseKeyFrame_PoseRefR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_VertexPoseKeyFrame_PoseRefR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IVertexPoseKeyFrame.IPoseRef at(int loc) {
         return new org.ogre4j.VertexPoseKeyFrame.PoseRef(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IVertexPoseKeyFrame.IPoseRef back() {
         return new org.ogre4j.VertexPoseKeyFrame.PoseRef(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IVertexPoseKeyFrame.IPoseRef front() {
         return new org.ogre4j.VertexPoseKeyFrame.PoseRef(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IVertexPoseKeyFrame.IPoseRef val) {
        _push_back__Ogre_VertexPoseKeyFrame_PoseRefR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_VertexPoseKeyFrame_PoseRefR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class PoseRefIterator extends org.xbig.base.NativeObject implements org.ogre4j.IVertexPoseKeyFrame.IPoseRefIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PoseRefIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PoseRefIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PoseRefIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PoseRefIterator(org.ogre4j.IVertexPoseKeyFrame.IPoseRefList c) {
         super( new org.xbig.base.InstancePointer(__createPoseRefIterator__Ogre_VertexPoseKeyFrame_PoseRefListr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createPoseRefIterator__Ogre_VertexPoseKeyFrame_PoseRefListr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public void getNext(org.ogre4j.IVertexPoseKeyFrame.IPoseRef returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNext(this.object.pointer)), false);
    }

    private native long _getNext(long _pointer_);

    /** **/
    public void peekNext(org.ogre4j.IVertexPoseKeyFrame.IPoseRef returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_peekNext(this.object.pointer)), false);
    }

    private native long _peekNext(long _pointer_);

    /** **/
    public org.ogre4j.IVertexPoseKeyFrame.IPoseRef peekNextPtr() {
         return new org.ogre4j.VertexPoseKeyFrame.PoseRef(new InstancePointer(_peekNextPtr(this.object.pointer)));
    }

    private native long _peekNextPtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class ConstPoseRefIterator extends org.xbig.base.NativeObject implements org.ogre4j.IVertexPoseKeyFrame.IConstPoseRefIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ConstPoseRefIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ConstPoseRefIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ConstPoseRefIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ConstPoseRefIterator(org.ogre4j.IVertexPoseKeyFrame.IPoseRefList c) {
         super( new org.xbig.base.InstancePointer(__createConstPoseRefIterator__Ogre_VertexPoseKeyFrame_PoseRefListR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createConstPoseRefIterator__Ogre_VertexPoseKeyFrame_PoseRefListR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public void getNext(org.ogre4j.IVertexPoseKeyFrame.IPoseRef returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNext(this.object.pointer)), false);
    }

    private native long _getNext(long _pointer_);

    /** **/
    public void peekNext(org.ogre4j.IVertexPoseKeyFrame.IPoseRef returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_peekNext_const(this.object.pointer)), false);
    }

    private native long _peekNext_const(long _pointer_);

    /** **/
    public org.ogre4j.IVertexPoseKeyFrame.IPoseRef peekNextPtr() {
         return new org.ogre4j.VertexPoseKeyFrame.PoseRef(new InstancePointer(_peekNextPtr_const(this.object.pointer)));
    }

    private native long _peekNextPtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexPoseKeyFrame(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexPoseKeyFrame(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexPoseKeyFrame(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Default constructor, you should not call this but use  instead. **/
    public VertexPoseKeyFrame(org.ogre4j.IAnimationTrack parent, float time) {
         super( new org.xbig.base.InstancePointer(__createVertexPoseKeyFrame__AnimationTrackPRealv( parent.getInstancePointer().pointer,  time)), false);
    }

    private native static long __createVertexPoseKeyFrame__AnimationTrackPRealv(long parent, float time);

    /** 
    Add a new pose reference. **/
    public void addPoseReference(int poseIndex, float influence) {
        _addPoseReference__ushortvRealv(this.object.pointer, poseIndex,  influence);
    }

    private native void _addPoseReference__ushortvRealv(long _pointer_, int poseIndex, float influence);

    /** 
    Update the influence of a pose reference. **/
    public void updatePoseReference(int poseIndex, float influence) {
        _updatePoseReference__ushortvRealv(this.object.pointer, poseIndex,  influence);
    }

    private native void _updatePoseReference__ushortvRealv(long _pointer_, int poseIndex, float influence);

    /** 
    Remove reference to a given pose. **/
    public void removePoseReference(int poseIndex) {
        _removePoseReference__ushortv(this.object.pointer, poseIndex);
    }

    private native void _removePoseReference__ushortv(long _pointer_, int poseIndex);

    /** 
    Remove all pose references. **/
    public void removeAllPoseReferences() {
        _removeAllPoseReferences(this.object.pointer);
    }

    private native void _removeAllPoseReferences(long _pointer_);

    /** 
    Get a const reference to the list of pose references. **/
    public org.ogre4j.IVertexPoseKeyFrame.IPoseRefList getPoseReferences() {
         return new org.ogre4j.VertexPoseKeyFrame.PoseRefList(new InstancePointer(_getPoseReferences_const(this.object.pointer)));
    }

    private native long _getPoseReferences_const(long _pointer_);

    /** 
    Get an iterator over the pose references. **/
    public void getPoseReferenceIterator(org.ogre4j.IVertexPoseKeyFrame.IPoseRefIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getPoseReferenceIterator(this.object.pointer)), false);
    }

    private native long _getPoseReferenceIterator(long _pointer_);

    /** **/
    public void getPoseReferenceIterator_const(org.ogre4j.IVertexPoseKeyFrame.IConstPoseRefIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getPoseReferenceIterator_const_const(this.object.pointer)), false);
    }

    private native long _getPoseReferenceIterator_const_const(long _pointer_);

    /** 
    Clone a keyframe (internal use only) **/
    public org.ogre4j.IKeyFrame _clone(org.ogre4j.IAnimationTrack newParent) {
         return new org.ogre4j.KeyFrame(new InstancePointer(__clone__AnimationTrackp_const(this.object.pointer, newParent.getInstancePointer().pointer)));
    }

    private native long __clone__AnimationTrackp_const(long _pointer_, long newParent);

    /** 
    Gets the time of this keyframe in the animation sequence. **/
    public float getTime() {
         return _getTime_const(this.object.pointer);
    }

    private native float _getTime_const(long _pointer_);

}
