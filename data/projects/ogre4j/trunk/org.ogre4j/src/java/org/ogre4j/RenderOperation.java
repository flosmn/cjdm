/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class RenderOperation extends org.xbig.base.NativeObject implements org.ogre4j.IRenderOperation {
static { System.loadLibrary("ogre4j");}
public enum OperationType implements INativeEnum < OperationType > {
    OT_POINT_LIST(OperationTypeHelper.ENUM_VALUES[0]),
    OT_LINE_LIST(OperationTypeHelper.ENUM_VALUES[1]),
    OT_LINE_STRIP(OperationTypeHelper.ENUM_VALUES[2]),
    OT_TRIANGLE_LIST(OperationTypeHelper.ENUM_VALUES[3]),
    OT_TRIANGLE_STRIP(OperationTypeHelper.ENUM_VALUES[4]),
    OT_TRIANGLE_FAN(OperationTypeHelper.ENUM_VALUES[5]);

    private int value;

    OperationType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public OperationType getEnum(int val) {
        return toEnum(val);
    }

    public static final OperationType toEnum(int retval) {
    if (retval ==OT_POINT_LIST.value)
        return OperationType.OT_POINT_LIST;
    else if (retval ==OT_LINE_LIST.value)
        return OperationType.OT_LINE_LIST;
    else if (retval ==OT_LINE_STRIP.value)
        return OperationType.OT_LINE_STRIP;
    else if (retval ==OT_TRIANGLE_LIST.value)
        return OperationType.OT_TRIANGLE_LIST;
    else if (retval ==OT_TRIANGLE_STRIP.value)
        return OperationType.OT_TRIANGLE_STRIP;
    else if (retval ==OT_TRIANGLE_FAN.value)
        return OperationType.OT_TRIANGLE_FAN;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class OperationTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderOperation(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderOperation(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderOperation(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderOperation() {
         super( new org.xbig.base.InstancePointer(__createRenderOperation()), false);
    }

    private native static long __createRenderOperation();

    /** **/
    public org.ogre4j.IVertexData getvertexData() {
         return new org.ogre4j.VertexData(new InstancePointer(_getvertexData(this.object.pointer)));
    }

    private native long _getvertexData(long _pointer_);

    /** **/
    public void setvertexData(org.ogre4j.IVertexData _jni_value_) {
        _setvertexData(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setvertexData(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.RenderOperation.OperationType getoperationType() {
         return org.ogre4j.RenderOperation.OperationType.toEnum(_getoperationType(this.object.pointer));
    }

    private native int _getoperationType(long _pointer_);

    /** **/
    public void setoperationType(org.ogre4j.RenderOperation.OperationType _jni_value_) {
        _setoperationType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setoperationType(long _pointer_, int _jni_value_);

    /** **/
    public boolean getuseIndexes() {
         return _getuseIndexes(this.object.pointer);
    }

    private native boolean _getuseIndexes(long _pointer_);

    /** **/
    public void setuseIndexes(boolean _jni_value_) {
        _setuseIndexes(this.object.pointer, _jni_value_);
    }

    private native void _setuseIndexes(long _pointer_, boolean _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData() {
         return new org.ogre4j.IndexData(new InstancePointer(_getindexData(this.object.pointer)));
    }

    private native long _getindexData(long _pointer_);

    /** **/
    public void setindexData(org.ogre4j.IIndexData _jni_value_) {
        _setindexData(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setindexData(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.IRenderable getsrcRenderable() {
         return new org.ogre4j.Renderable(new InstancePointer(_getsrcRenderable(this.object.pointer)));
    }

    private native long _getsrcRenderable(long _pointer_);

}
