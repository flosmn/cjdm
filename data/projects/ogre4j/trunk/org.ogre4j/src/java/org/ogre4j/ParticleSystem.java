/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ParticleSystem extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem {
static { System.loadLibrary("ogre4j");}
public static class CmdCull extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdCull {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdCull(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdCull(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdCull(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdCull() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdEmittedEmitterQuota extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdEmittedEmitterQuota {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdEmittedEmitterQuota(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdEmittedEmitterQuota(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdEmittedEmitterQuota(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdEmittedEmitterQuota() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdHeight extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdHeight {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdHeight(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdHeight(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdHeight(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdHeight() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdIterationInterval extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdIterationInterval {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdIterationInterval(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdIterationInterval(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdIterationInterval(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdIterationInterval() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdLocalSpace extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdLocalSpace {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdLocalSpace(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdLocalSpace(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdLocalSpace(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdLocalSpace() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdMaterial extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdMaterial {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdMaterial(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdMaterial(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdMaterial(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdMaterial() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdNonvisibleTimeout extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdNonvisibleTimeout {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdNonvisibleTimeout(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdNonvisibleTimeout(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdNonvisibleTimeout(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdNonvisibleTimeout() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdQuota extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdQuota {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdQuota(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdQuota(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdQuota(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdQuota() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdRenderer extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdRenderer {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdRenderer(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdRenderer(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdRenderer(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdRenderer() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdSorted extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdSorted {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdSorted(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdSorted(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdSorted(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdSorted() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdWidth extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ICmdWidth {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdWidth(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdWidth(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdWidth(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdWidth() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
protected static class SortByDirectionFunctor extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ISortByDirectionFunctor {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SortByDirectionFunctor(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SortByDirectionFunctor(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SortByDirectionFunctor(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SortByDirectionFunctor(org.ogre4j.IVector3 dir) {
         super( new org.xbig.base.InstancePointer(__createSortByDirectionFunctor__Vector3R( dir.getInstancePointer().pointer)), false);
    }

    private native static long __createSortByDirectionFunctor__Vector3R(long dir);

    /** **/
    public float operatorFunctionCall(org.ogre4j.IParticle p) {
         return _operatorFunctionCall__Particlep_const(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native float _operatorFunctionCall__Particlep_const(long _pointer_, long p);

    /** **/
    public void getsortDir(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getsortDir(this.object.pointer)), false);
    }

    private native long _getsortDir(long _pointer_);

    /** **/
    public void setsortDir(org.ogre4j.IVector3 _jni_value_) {
        _setsortDir(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsortDir(long _pointer_, long _jni_value_);

}
protected static class SortByDistanceFunctor extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.ISortByDistanceFunctor {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SortByDistanceFunctor(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SortByDistanceFunctor(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SortByDistanceFunctor(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SortByDistanceFunctor(org.ogre4j.IVector3 pos) {
         super( new org.xbig.base.InstancePointer(__createSortByDistanceFunctor__Vector3R( pos.getInstancePointer().pointer)), false);
    }

    private native static long __createSortByDistanceFunctor__Vector3R(long pos);

    /** **/
    public float operatorFunctionCall(org.ogre4j.IParticle p) {
         return _operatorFunctionCall__Particlep_const(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native float _operatorFunctionCall__Particlep_const(long _pointer_, long p);

    /** **/
    public void getsortPos(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getsortPos(this.object.pointer)), false);
    }

    private native long _getsortPos(long _pointer_);

    /** **/
    public void setsortPos(org.ogre4j.IVector3 _jni_value_) {
        _setsortPos(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsortPos(long _pointer_, long _jni_value_);

}
protected static class ActiveParticleList extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IActiveParticleList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ActiveParticleList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ActiveParticleList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ActiveParticleList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ActiveParticleList() {
         super( new org.xbig.base.InstancePointer(__createActiveParticleList()), false);
    }

    private native static long __createActiveParticleList();

    /** **/
    public void assign(int num, org.ogre4j.IParticle val) {
        _assign__ivOgre_ParticleP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticle back() {
         return new org.ogre4j.Particle(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticle front() {
         return new org.ogre4j.Particle(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticle val) {
        _push_back__Ogre_ParticleP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IParticle val) {
        _push_front__Ogre_ParticleP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ParticleP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IParticle val) {
        _remove__Ogre_ParticleP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_ParticleP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class FreeParticleList extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IFreeParticleList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public FreeParticleList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected FreeParticleList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public FreeParticleList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public FreeParticleList() {
         super( new org.xbig.base.InstancePointer(__createFreeParticleList()), false);
    }

    private native static long __createFreeParticleList();

    /** **/
    public void assign(int num, org.ogre4j.IParticle val) {
        _assign__ivOgre_ParticleP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticle back() {
         return new org.ogre4j.Particle(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticle front() {
         return new org.ogre4j.Particle(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticle val) {
        _push_back__Ogre_ParticleP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IParticle val) {
        _push_front__Ogre_ParticleP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ParticleP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IParticle val) {
        _remove__Ogre_ParticleP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_ParticleP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class ParticlePool extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IParticlePool {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticlePool(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticlePool(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticlePool(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticlePool() {
         super( new org.xbig.base.InstancePointer(__createParticlePool()), false);
    }

    private native static long __createParticlePool();

    /** **/
    public void assign(int num, org.ogre4j.IParticle val) {
        _assign__ivOgre_ParticleP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticle at(int loc) {
         return new org.ogre4j.Particle(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IParticle back() {
         return new org.ogre4j.Particle(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IParticle front() {
         return new org.ogre4j.Particle(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticle val) {
        _push_back__Ogre_ParticleP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class FreeEmittedEmitterList extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IFreeEmittedEmitterList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public FreeEmittedEmitterList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected FreeEmittedEmitterList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public FreeEmittedEmitterList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public FreeEmittedEmitterList() {
         super( new org.xbig.base.InstancePointer(__createFreeEmittedEmitterList()), false);
    }

    private native static long __createFreeEmittedEmitterList();

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val) {
        _assign__ivOgre_ParticleEmitterP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleEmitterP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticleEmitter back() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleEmitter front() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val) {
        _push_back__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IParticleEmitter val) {
        _push_front__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IParticleEmitter val) {
        _remove__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class ActiveEmittedEmitterList extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IActiveEmittedEmitterList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ActiveEmittedEmitterList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ActiveEmittedEmitterList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ActiveEmittedEmitterList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ActiveEmittedEmitterList() {
         super( new org.xbig.base.InstancePointer(__createActiveEmittedEmitterList()), false);
    }

    private native static long __createActiveEmittedEmitterList();

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val) {
        _assign__ivOgre_ParticleEmitterP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleEmitterP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticleEmitter back() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleEmitter front() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val) {
        _push_back__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IParticleEmitter val) {
        _push_front__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IParticleEmitter val) {
        _remove__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class EmittedEmitterList extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IEmittedEmitterList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EmittedEmitterList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EmittedEmitterList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EmittedEmitterList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EmittedEmitterList() {
         super( new org.xbig.base.InstancePointer(__createEmittedEmitterList()), false);
    }

    private native static long __createEmittedEmitterList();

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val) {
        _assign__ivOgre_ParticleEmitterP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleEmitterP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticleEmitter at(int loc) {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IParticleEmitter back() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IParticleEmitter front() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val) {
        _push_back__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class FreeEmittedEmitterMap extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IFreeEmittedEmitterMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public FreeEmittedEmitterMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected FreeEmittedEmitterMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public FreeEmittedEmitterMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public FreeEmittedEmitterMap() {
         super( new org.xbig.base.InstancePointer(__createFreeEmittedEmitterMap()), false);
    }

    private native static long __createFreeEmittedEmitterMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystem.IFreeEmittedEmitterList get(String key) {
         return new org.ogre4j.ParticleSystem.FreeEmittedEmitterList(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystem.IFreeEmittedEmitterList value) {
        _insert__sROgre_ParticleSystem_FreeEmittedEmitterListr(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ParticleSystem_FreeEmittedEmitterListr(long _pointer_, String key, long value);

}
protected static class EmittedEmitterPool extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IEmittedEmitterPool {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EmittedEmitterPool(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EmittedEmitterPool(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EmittedEmitterPool(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EmittedEmitterPool() {
         super( new org.xbig.base.InstancePointer(__createEmittedEmitterPool()), false);
    }

    private native static long __createEmittedEmitterPool();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystem.IEmittedEmitterList get(String key) {
         return new org.ogre4j.ParticleSystem.EmittedEmitterList(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystem.IEmittedEmitterList value) {
        _insert__sROgre_ParticleSystem_EmittedEmitterListr(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ParticleSystem_EmittedEmitterListr(long _pointer_, String key, long value);

}
protected static class ParticleEmitterList extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IParticleEmitterList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleEmitterList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleEmitterList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleEmitterList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleEmitterList() {
         super( new org.xbig.base.InstancePointer(__createParticleEmitterList()), false);
    }

    private native static long __createParticleEmitterList();

    /** **/
    public void assign(int num, org.ogre4j.IParticleEmitter val) {
        _assign__ivOgre_ParticleEmitterP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleEmitterP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticleEmitter at(int loc) {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IParticleEmitter back() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IParticleEmitter front() {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticleEmitter val) {
        _push_back__Ogre_ParticleEmitterP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleEmitterP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class ParticleAffectorList extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystem.IParticleAffectorList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleAffectorList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleAffectorList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleAffectorList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleAffectorList() {
         super( new org.xbig.base.InstancePointer(__createParticleAffectorList()), false);
    }

    private native static long __createParticleAffectorList();

    /** **/
    public void assign(int num, org.ogre4j.IParticleAffector val) {
        _assign__ivOgre_ParticleAffectorP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ParticleAffectorP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IParticleAffector at(int loc) {
         return new org.ogre4j.ParticleAffector(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IParticleAffector back() {
         return new org.ogre4j.ParticleAffector(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IParticleAffector front() {
         return new org.ogre4j.ParticleAffector(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IParticleAffector val) {
        _push_back__Ogre_ParticleAffectorP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ParticleAffectorP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleSystem(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleSystem(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleSystem(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleSystem() {
         super( new org.xbig.base.InstancePointer(__createParticleSystem()), false);
    }

    private native static long __createParticleSystem();

    /** 
    Creates a particle system with no emitters or affectors. **/
    public ParticleSystem(String name, String resourceGroupName) {
         super( new org.xbig.base.InstancePointer(__createParticleSystem__StringRStringR( name,  resourceGroupName)), false);
    }

    private native static long __createParticleSystem__StringRStringR(String name, String resourceGroupName);

    /** 
    Sets the ParticleRenderer to be used to render this particle system. **/
    public void setRenderer(String typeName) {
        _setRenderer__StringR(this.object.pointer, typeName);
    }

    private native void _setRenderer__StringR(long _pointer_, String typeName);

    /** 
    Gets the ParticleRenderer to be used to render this particle system. **/
    public org.ogre4j.IParticleSystemRenderer getRenderer() {
         return new org.ogre4j.ParticleSystemRenderer(new InstancePointer(_getRenderer_const(this.object.pointer)));
    }

    private native long _getRenderer_const(long _pointer_);

    /** 
    Gets the name of the ParticleRenderer to be used to render this particle system. **/
    public String getRendererName() {
         return _getRendererName_const(this.object.pointer);
    }

    private native String _getRendererName_const(long _pointer_);

    /** 
    Adds an emitter to this particle system. **/
    public org.ogre4j.IParticleEmitter addEmitter(String emitterType) {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_addEmitter__StringR(this.object.pointer, emitterType)));
    }

    private native long _addEmitter__StringR(long _pointer_, String emitterType);

    /** 
    Retrieves an emitter by it's index (zero-based). **/
    public org.ogre4j.IParticleEmitter getEmitter(int index) {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(_getEmitter__Hv_const(this.object.pointer, index)));
    }

    private native long _getEmitter__Hv_const(long _pointer_, int index);

    /** 
    Returns the number of emitters for this particle system. **/
    public int getNumEmitters() {
         return _getNumEmitters_const(this.object.pointer);
    }

    private native int _getNumEmitters_const(long _pointer_);

    /** 
    Removes an emitter from the system. **/
    public void removeEmitter(int index) {
        _removeEmitter__Hv(this.object.pointer, index);
    }

    private native void _removeEmitter__Hv(long _pointer_, int index);

    /** 
    Removes all the emitters from this system. **/
    public void removeAllEmitters() {
        _removeAllEmitters(this.object.pointer);
    }

    private native void _removeAllEmitters(long _pointer_);

    /** 
    Adds an affector to this particle system. **/
    public org.ogre4j.IParticleAffector addAffector(String affectorType) {
         return new org.ogre4j.ParticleAffector(new InstancePointer(_addAffector__StringR(this.object.pointer, affectorType)));
    }

    private native long _addAffector__StringR(long _pointer_, String affectorType);

    /** 
    Retrieves an affector by it's index (zero-based). **/
    public org.ogre4j.IParticleAffector getAffector(int index) {
         return new org.ogre4j.ParticleAffector(new InstancePointer(_getAffector__Hv_const(this.object.pointer, index)));
    }

    private native long _getAffector__Hv_const(long _pointer_, int index);

    /** 
    Returns the number of affectors for this particle system. **/
    public int getNumAffectors() {
         return _getNumAffectors_const(this.object.pointer);
    }

    private native int _getNumAffectors_const(long _pointer_);

    /** 
    Removes an affector from the system. **/
    public void removeAffector(int index) {
        _removeAffector__Hv(this.object.pointer, index);
    }

    private native void _removeAffector__Hv(long _pointer_, int index);

    /** 
    Removes all the affectors from this system. **/
    public void removeAllAffectors() {
        _removeAllAffectors(this.object.pointer);
    }

    private native void _removeAllAffectors(long _pointer_);

    /** 
    Empties this set of all particles. **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** 
    Gets the number of individual particles in the system right now. **/
    public int getNumParticles() {
         return _getNumParticles_const(this.object.pointer);
    }

    private native int _getNumParticles_const(long _pointer_);

    /** 
    Manually add a particle to the system. **/
    public org.ogre4j.IParticle createParticle() {
         return new org.ogre4j.Particle(new InstancePointer(_createParticle(this.object.pointer)));
    }

    private native long _createParticle(long _pointer_);

    /** 
    Manually add an emitter particle to the system. **/
    public org.ogre4j.IParticle createEmitterParticle(String emitterName) {
         return new org.ogre4j.Particle(new InstancePointer(_createEmitterParticle__StringR(this.object.pointer, emitterName)));
    }

    private native long _createEmitterParticle__StringR(long _pointer_, String emitterName);

    /** 
    Retrieve a particle from the system for manual tweaking. **/
    public org.ogre4j.IParticle getParticle(int index) {
         return new org.ogre4j.Particle(new InstancePointer(_getParticle__iv(this.object.pointer, index)));
    }

    private native long _getParticle__iv(long _pointer_, int index);

    /** 
    Returns the maximum number of particles this system is allowed to have active at once. **/
    public int getParticleQuota() {
         return _getParticleQuota_const(this.object.pointer);
    }

    private native int _getParticleQuota_const(long _pointer_);

    /** 
    Sets the maximum number of particles this system is allowed to have active at once. **/
    public void setParticleQuota(int quota) {
        _setParticleQuota__iv(this.object.pointer, quota);
    }

    private native void _setParticleQuota__iv(long _pointer_, int quota);

    /** 
    Returns the maximum number of emitted emitters this system is allowed to have active at once. **/
    public int getEmittedEmitterQuota() {
         return _getEmittedEmitterQuota_const(this.object.pointer);
    }

    private native int _getEmittedEmitterQuota_const(long _pointer_);

    /** 
    Sets the maximum number of emitted emitters this system is allowed to have active at once. **/
    public void setEmittedEmitterQuota(int quota) {
        _setEmittedEmitterQuota__iv(this.object.pointer, quota);
    }

    private native void _setEmittedEmitterQuota__iv(long _pointer_, int quota);

    /** 
    Assignment operator for copying. **/
    public org.ogre4j.IParticleSystem operatorAssignment(org.ogre4j.IParticleSystem rhs) {
         return new org.ogre4j.ParticleSystem(new InstancePointer(_operatorAssignment__ParticleSystemR(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__ParticleSystemR(long _pointer_, long rhs);

    /** 
    Updates the particles in the system based on time elapsed. **/
    public void _update(float timeElapsed) {
        __update__Realv(this.object.pointer, timeElapsed);
    }

    private native void __update__Realv(long _pointer_, float timeElapsed);

    /** 
    Returns an iterator for stepping through all particles in this system. **/
    public void _getIterator(org.ogre4j.IParticleIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(__getIterator(this.object.pointer)), false);
    }

    private native long __getIterator(long _pointer_);

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public void setMaterialName(String name) {
        _setMaterialName__StringR(this.object.pointer, name);
    }

    private native void _setMaterialName__StringR(long _pointer_, String name);

    /** 
    Sets the name of the material to be used for this billboard set. **/
    public String getMaterialName() {
         return _getMaterialName_const(this.object.pointer);
    }

    private native String _getMaterialName_const(long _pointer_);

    /** 
    Overridden from **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** 
    Overridden from **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** 
    Overridden from **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Fast-forwards this system by the required number of seconds. **/
    public void fastForward(float time, float interval) {
        _fastForward__RealvRealv(this.object.pointer, time,  interval);
    }

    private native void _fastForward__RealvRealv(long _pointer_, float time, float interval);

    /** 
    Sets a 'speed factor' on this particle system, which means it scales the elapsed real time which has passed by this factor before passing it to the emitters, affectors, and the particle life calculation. **/
    public void setSpeedFactor(float speedFactor) {
        _setSpeedFactor__Realv(this.object.pointer, speedFactor);
    }

    private native void _setSpeedFactor__Realv(long _pointer_, float speedFactor);

    /** 
    Gets the 'speed factor' on this particle system. **/
    public float getSpeedFactor() {
         return _getSpeedFactor_const(this.object.pointer);
    }

    private native float _getSpeedFactor_const(long _pointer_);

    /** 
    Sets a 'iteration interval' on this particle system. **/
    public void setIterationInterval(float iterationInterval) {
        _setIterationInterval__Realv(this.object.pointer, iterationInterval);
    }

    private native void _setIterationInterval__Realv(long _pointer_, float iterationInterval);

    /** 
    Gets a 'iteration interval' on this particle system. **/
    public float getIterationInterval() {
         return _getIterationInterval_const(this.object.pointer);
    }

    private native float _getIterationInterval_const(long _pointer_);

    /** 
    Sets when the particle system should stop updating after it hasn't been visible for a while. **/
    public void setNonVisibleUpdateTimeout(float timeout) {
        _setNonVisibleUpdateTimeout__Realv(this.object.pointer, timeout);
    }

    private native void _setNonVisibleUpdateTimeout__Realv(long _pointer_, float timeout);

    /** 
    Gets when the particle system should stop updating after it hasn't been visible for a while. **/
    public float getNonVisibleUpdateTimeout() {
         return _getNonVisibleUpdateTimeout_const(this.object.pointer);
    }

    private native float _getNonVisibleUpdateTimeout_const(long _pointer_);

    /** 
    Overridden from **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** 
    Internal callback used by Particles to notify their parent that they have been resized. **/
    public void _notifyParticleResized() {
        __notifyParticleResized(this.object.pointer);
    }

    private native void __notifyParticleResized(long _pointer_);

    /** 
    Internal callback used by Particles to notify their parent that they have been rotated. **/
    public void _notifyParticleRotated() {
        __notifyParticleRotated(this.object.pointer);
    }

    private native void __notifyParticleRotated(long _pointer_);

    /** 
    Sets the default dimensions of the particles in this set. **/
    public void setDefaultDimensions(float width, float height) {
        _setDefaultDimensions__RealvRealv(this.object.pointer, width,  height);
    }

    private native void _setDefaultDimensions__RealvRealv(long _pointer_, float width, float height);

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultWidth(float width) {
        _setDefaultWidth__Realv(this.object.pointer, width);
    }

    private native void _setDefaultWidth__Realv(long _pointer_, float width);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultWidth() {
         return _getDefaultWidth_const(this.object.pointer);
    }

    private native float _getDefaultWidth_const(long _pointer_);

    /** 
    See setDefaultDimensions - this sets 1 component individually. **/
    public void setDefaultHeight(float height) {
        _setDefaultHeight__Realv(this.object.pointer, height);
    }

    private native void _setDefaultHeight__Realv(long _pointer_, float height);

    /** 
    See setDefaultDimensions - this gets 1 component individually. **/
    public float getDefaultHeight() {
         return _getDefaultHeight_const(this.object.pointer);
    }

    private native float _getDefaultHeight_const(long _pointer_);

    /** 
    Returns whether or not particles in this are tested individually for culling. **/
    public boolean getCullIndividually() {
         return _getCullIndividually_const(this.object.pointer);
    }

    private native boolean _getCullIndividually_const(long _pointer_);

    /** 
    Sets whether culling tests particles in this individually as well as in a group. **/
    public void setCullIndividually(boolean cullIndividual) {
        _setCullIndividually__bv(this.object.pointer, cullIndividual);
    }

    private native void _setCullIndividually__bv(long _pointer_, boolean cullIndividual);

    /** **/
    public String getResourceGroupName() {
         return _getResourceGroupName_const(this.object.pointer);
    }

    private native String _getResourceGroupName_const(long _pointer_);

    /** 
    Get the origin of this particle system, e.g. a script file name. **/
    public String getOrigin() {
         return _getOrigin_const(this.object.pointer);
    }

    private native String _getOrigin_const(long _pointer_);

    /** **/
    public void _notifyOrigin(String origin) {
        __notifyOrigin__StringR(this.object.pointer, origin);
    }

    private native void __notifyOrigin__StringR(long _pointer_, String origin);

    /** 
    **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Set whether or not particles are sorted according to the camera. **/
    public void setSortingEnabled(boolean enabled) {
        _setSortingEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setSortingEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean getSortingEnabled() {
         return _getSortingEnabled_const(this.object.pointer);
    }

    private native boolean _getSortingEnabled_const(long _pointer_);

    /** 
    Set the (initial) bounds of the particle system manually. **/
    public void setBounds(org.ogre4j.IAxisAlignedBox aabb) {
        _setBounds__AxisAlignedBoxR(this.object.pointer, aabb.getInstancePointer().pointer);
    }

    private native void _setBounds__AxisAlignedBoxR(long _pointer_, long aabb);

    /** 
    Sets whether the bounds will be automatically updated for the life of the particle system **/
    public void setBoundsAutoUpdated(boolean autoUpdate, float stopIn) {
        _setBoundsAutoUpdated__bvRealv(this.object.pointer, autoUpdate,  stopIn);
    }

    private native void _setBoundsAutoUpdated__bvRealv(long _pointer_, boolean autoUpdate, float stopIn);

    /** 
    Sets whether particles (and any affector effects) remain relative to the node the particle system is attached to. **/
    public void setKeepParticlesInLocalSpace(boolean keepLocal) {
        _setKeepParticlesInLocalSpace__bv(this.object.pointer, keepLocal);
    }

    private native void _setKeepParticlesInLocalSpace__bv(long _pointer_, boolean keepLocal);

    /** 
    Gets whether particles (and any affector effects) remain relative to the node the particle system is attached to. **/
    public boolean getKeepParticlesInLocalSpace() {
         return _getKeepParticlesInLocalSpace_const(this.object.pointer);
    }

    private native boolean _getKeepParticlesInLocalSpace_const(long _pointer_);

    /** 
    Internal method for updating the bounds of the particle system. **/
    public void _updateBounds() {
        __updateBounds(this.object.pointer);
    }

    private native void __updateBounds(long _pointer_);

    /** **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** 
    Set the default iteration interval for all  instances. **/
    public static void setDefaultIterationInterval(float iterationInterval) {
        _setDefaultIterationInterval__Realv( iterationInterval);
    }

    private native static void _setDefaultIterationInterval__Realv(float iterationInterval);

    /** 
    Get the default iteration interval for all  instances. **/
    public static float getDefaultIterationInterval() {
         return _getDefaultIterationInterval();
    }

    private native static float _getDefaultIterationInterval();

    /** 
    Set the default nonvisible timeout for all  instances. **/
    public static void setDefaultNonVisibleUpdateTimeout(float timeout) {
        _setDefaultNonVisibleUpdateTimeout__Realv( timeout);
    }

    private native static void _setDefaultNonVisibleUpdateTimeout__Realv(float timeout);

    /** 
    Get the default nonvisible timeout for all  instances. **/
    public static float getDefaultNonVisibleUpdateTimeout() {
         return _getDefaultNonVisibleUpdateTimeout();
    }

    private native static float _getDefaultNonVisibleUpdateTimeout();

    /** 
    Retrieves the parameter dictionary for this class. **/
    public org.ogre4j.IParamDictionary getParamDictionary() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary(this.object.pointer)));
    }

    private native long _getParamDictionary(long _pointer_);

    /** **/
    public org.ogre4j.IParamDictionary getParamDictionary_const() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary_const_const(this.object.pointer)));
    }

    private native long _getParamDictionary_const_const(long _pointer_);

    /** 
    Retrieves a list of parameters valid for this object. **/
    public org.ogre4j.IParameterList getParameters() {
         return new org.ogre4j.ParameterList(new InstancePointer(_getParameters_const(this.object.pointer)));
    }

    private native long _getParameters_const(long _pointer_);

    /** 
    Generic parameter setting method. **/
    public boolean setParameter(String name, String value) {
         return _setParameter__StringRStringR(this.object.pointer, name,  value);
    }

    private native boolean _setParameter__StringRStringR(long _pointer_, String name, String value);

    /** 
    Generic multiple parameter setting method. **/
    public void setParameterList(org.ogre4j.INameValuePairList paramList) {
        _setParameterList__NameValuePairListR(this.object.pointer, paramList.getInstancePointer().pointer);
    }

    private native void _setParameterList__NameValuePairListR(long _pointer_, long paramList);

    /** 
    Generic parameter retrieval method. **/
    public String getParameter(String name) {
         return _getParameter__StringR_const(this.object.pointer, name);
    }

    private native String _getParameter__StringR_const(long _pointer_, String name);

    /** 
    Method for copying this object's parameters to another object. **/
    public void copyParametersTo(org.ogre4j.IStringInterface dest) {
        _copyParametersTo__StringInterfacep_const(this.object.pointer, dest.getInstancePointer().pointer);
    }

    private native void _copyParametersTo__StringInterfacep_const(long _pointer_, long dest);

    /** 
    Cleans up the static 'msDictionary' required to reset , otherwise the containers are left with invalid pointers, which will lead to a crash as soon as one of the  implementers (e.g. ) initializes. **/
    public static void cleanupDictionary() {
        _cleanupDictionary();
    }

    private native static void _cleanupDictionary();

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the name of this object. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** 
    Create a reference-counted AnimableValuePtr for the named value. **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

}
