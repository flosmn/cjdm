/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class HardwareBufferManager extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager {
static { System.loadLibrary("ogre4j");}
protected static class VertexBufferLicense extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager.IVertexBufferLicense {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexBufferLicense(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexBufferLicense(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexBufferLicense(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexBufferLicense(org.ogre4j.IHardwareVertexBuffer orig, org.ogre4j.HardwareBufferManager.BufferLicenseType ltype, int delay, org.ogre4j.IHardwareVertexBufferSharedPtr buf, org.ogre4j.IHardwareBufferLicensee lic) {
         super( new org.xbig.base.InstancePointer(__createVertexBufferLicense__HardwareVertexBufferpBufferLicenseTypevivHardwareVertexBufferSharedPtrvHardwareBufferLicenseep( orig.getInstancePointer().pointer,  ltype.getValue(),  delay,  buf.getInstancePointer().pointer,  lic.getInstancePointer().pointer)), false);
    }

    private native static long __createVertexBufferLicense__HardwareVertexBufferpBufferLicenseTypevivHardwareVertexBufferSharedPtrvHardwareBufferLicenseep(long orig, int ltype, int delay, long buf, long lic);

    /** **/
    public org.ogre4j.IHardwareVertexBuffer getoriginalBufferPtr() {
         return new org.ogre4j.HardwareVertexBuffer(new InstancePointer(_getoriginalBufferPtr(this.object.pointer)));
    }

    private native long _getoriginalBufferPtr(long _pointer_);

    /** **/
    public void setoriginalBufferPtr(org.ogre4j.IHardwareVertexBuffer _jni_value_) {
        _setoriginalBufferPtr(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setoriginalBufferPtr(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.HardwareBufferManager.BufferLicenseType getlicenseType() {
         return org.ogre4j.HardwareBufferManager.BufferLicenseType.toEnum(_getlicenseType(this.object.pointer));
    }

    private native int _getlicenseType(long _pointer_);

    /** **/
    public void setlicenseType(org.ogre4j.HardwareBufferManager.BufferLicenseType _jni_value_) {
        _setlicenseType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setlicenseType(long _pointer_, int _jni_value_);

    /** **/
    public int getexpiredDelay() {
         return _getexpiredDelay(this.object.pointer);
    }

    private native int _getexpiredDelay(long _pointer_);

    /** **/
    public void setexpiredDelay(int _jni_value_) {
        _setexpiredDelay(this.object.pointer, _jni_value_);
    }

    private native void _setexpiredDelay(long _pointer_, int _jni_value_);

    /** **/
    public void getbuffer(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getbuffer(this.object.pointer)), false);
    }

    private native long _getbuffer(long _pointer_);

    /** **/
    public void setbuffer(org.ogre4j.IHardwareVertexBufferSharedPtr _jni_value_) {
        _setbuffer(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setbuffer(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.IHardwareBufferLicensee getlicensee() {
         return new org.ogre4j.HardwareBufferLicensee(new InstancePointer(_getlicensee(this.object.pointer)));
    }

    private native long _getlicensee(long _pointer_);

    /** **/
    public void setlicensee(org.ogre4j.IHardwareBufferLicensee _jni_value_) {
        _setlicensee(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setlicensee(long _pointer_, long _jni_value_);

}
public enum BufferLicenseType implements INativeEnum < BufferLicenseType > {
    BLT_MANUAL_RELEASE(BufferLicenseTypeHelper.ENUM_VALUES[0]),
    BLT_AUTOMATIC_RELEASE(BufferLicenseTypeHelper.ENUM_VALUES[1]);

    private int value;

    BufferLicenseType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public BufferLicenseType getEnum(int val) {
        return toEnum(val);
    }

    public static final BufferLicenseType toEnum(int retval) {
    if (retval ==BLT_MANUAL_RELEASE.value)
        return BufferLicenseType.BLT_MANUAL_RELEASE;
    else if (retval ==BLT_AUTOMATIC_RELEASE.value)
        return BufferLicenseType.BLT_AUTOMATIC_RELEASE;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class BufferLicenseTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

protected static class VertexBufferList extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager.IVertexBufferList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexBufferList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexBufferList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexBufferList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexBufferList() {
         super( new org.xbig.base.InstancePointer(__createVertexBufferList()), false);
    }

    private native static long __createVertexBufferList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IHardwareVertexBuffer key) {
         return _count__Ogre_HardwareVertexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_HardwareVertexBufferP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IHardwareVertexBuffer key) {
         return _erase__Ogre_HardwareVertexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_HardwareVertexBufferP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
protected static class IndexBufferList extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager.IIndexBufferList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public IndexBufferList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected IndexBufferList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public IndexBufferList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public IndexBufferList() {
         super( new org.xbig.base.InstancePointer(__createIndexBufferList()), false);
    }

    private native static long __createIndexBufferList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IHardwareIndexBuffer key) {
         return _count__Ogre_HardwareIndexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_HardwareIndexBufferP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IHardwareIndexBuffer key) {
         return _erase__Ogre_HardwareIndexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_HardwareIndexBufferP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
protected static class VertexDeclarationList extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager.IVertexDeclarationList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexDeclarationList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexDeclarationList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexDeclarationList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexDeclarationList() {
         super( new org.xbig.base.InstancePointer(__createVertexDeclarationList()), false);
    }

    private native static long __createVertexDeclarationList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IVertexDeclaration key) {
         return _count__Ogre_VertexDeclarationP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_VertexDeclarationP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IVertexDeclaration key) {
         return _erase__Ogre_VertexDeclarationP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_VertexDeclarationP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
protected static class VertexBufferBindingList extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager.IVertexBufferBindingList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexBufferBindingList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexBufferBindingList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexBufferBindingList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexBufferBindingList() {
         super( new org.xbig.base.InstancePointer(__createVertexBufferBindingList()), false);
    }

    private native static long __createVertexBufferBindingList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IVertexBufferBinding key) {
         return _count__Ogre_VertexBufferBindingP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_VertexBufferBindingP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IVertexBufferBinding key) {
         return _erase__Ogre_VertexBufferBindingP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_VertexBufferBindingP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
protected static class FreeTemporaryVertexBufferMap extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager.IFreeTemporaryVertexBufferMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public FreeTemporaryVertexBufferMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected FreeTemporaryVertexBufferMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public FreeTemporaryVertexBufferMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public FreeTemporaryVertexBufferMap() {
         super( new org.xbig.base.InstancePointer(__createFreeTemporaryVertexBufferMap()), false);
    }

    private native static long __createFreeTemporaryVertexBufferMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IHardwareVertexBuffer key) {
         return _count__Ogre_HardwareVertexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_HardwareVertexBufferP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IHardwareVertexBuffer key) {
         return _erase__Ogre_HardwareVertexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_HardwareVertexBufferP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
protected static class TemporaryVertexBufferLicenseMap extends org.xbig.base.NativeObject implements org.ogre4j.IHardwareBufferManager.ITemporaryVertexBufferLicenseMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TemporaryVertexBufferLicenseMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TemporaryVertexBufferLicenseMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TemporaryVertexBufferLicenseMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TemporaryVertexBufferLicenseMap() {
         super( new org.xbig.base.InstancePointer(__createTemporaryVertexBufferLicenseMap()), false);
    }

    private native static long __createTemporaryVertexBufferLicenseMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IHardwareVertexBuffer key) {
         return _count__Ogre_HardwareVertexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_HardwareVertexBufferP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IHardwareVertexBuffer key) {
         return _erase__Ogre_HardwareVertexBufferP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_HardwareVertexBufferP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IHardwareBufferManager.IVertexBufferLicense get(org.ogre4j.IHardwareVertexBuffer key) {
         return new org.ogre4j.HardwareBufferManager.VertexBufferLicense(new InstancePointer(_get__Ogre_HardwareVertexBufferP(this.object.pointer, key.getInstancePointer().pointer)));
    }

    private native long _get__Ogre_HardwareVertexBufferP(long _pointer_, long key);

    /** **/
    public void insert(org.ogre4j.IHardwareVertexBuffer key, org.ogre4j.IHardwareBufferManager.IVertexBufferLicense value) {
        _insert__Ogre_HardwareVertexBufferPOgre_HardwareBufferManager_VertexBufferLicenser(this.object.pointer, key.getInstancePointer().pointer,  value.getInstancePointer().pointer);
    }

    private native void _insert__Ogre_HardwareVertexBufferPOgre_HardwareBufferManager_VertexBufferLicenser(long _pointer_, long key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public HardwareBufferManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected HardwareBufferManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public HardwareBufferManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Create a hardware vertex buffer. **/
    public void createVertexBuffer(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue, int vertexSize, int numVerts, org.ogre4j.HardwareBuffer.Usage usage, boolean useShadowBuffer) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createVertexBuffer__ivivHardwareBuffer_Usagevbv(this.object.pointer, vertexSize,  numVerts,  usage.getValue(),  useShadowBuffer)), false);
    }

    private native long _createVertexBuffer__ivivHardwareBuffer_Usagevbv(long _pointer_, int vertexSize, int numVerts, int usage, boolean useShadowBuffer);

    /** 
    Create a hardware index buffer. **/
    public void createIndexBuffer(org.ogre4j.IHardwareIndexBufferSharedPtr returnValue, org.ogre4j.HardwareIndexBuffer.IndexType itype, int numIndexes, org.ogre4j.HardwareBuffer.Usage usage, boolean useShadowBuffer) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createIndexBuffer__HardwareIndexBuffer_IndexTypevivHardwareBuffer_Usagevbv(this.object.pointer, itype.getValue(),  numIndexes,  usage.getValue(),  useShadowBuffer)), false);
    }

    private native long _createIndexBuffer__HardwareIndexBuffer_IndexTypevivHardwareBuffer_Usagevbv(long _pointer_, int itype, int numIndexes, int usage, boolean useShadowBuffer);

    /** 
    Create a render to vertex buffer. **/
    public void createRenderToVertexBuffer(org.ogre4j.IRenderToVertexBufferSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createRenderToVertexBuffer(this.object.pointer)), false);
    }

    private native long _createRenderToVertexBuffer(long _pointer_);

    /** 
    Creates a new vertex declaration. **/
    public org.ogre4j.IVertexDeclaration createVertexDeclaration() {
         return new org.ogre4j.VertexDeclaration(new InstancePointer(_createVertexDeclaration(this.object.pointer)));
    }

    private native long _createVertexDeclaration(long _pointer_);

    /** 
    Destroys a vertex declaration. **/
    public void destroyVertexDeclaration(org.ogre4j.IVertexDeclaration decl) {
        _destroyVertexDeclaration__VertexDeclarationp(this.object.pointer, decl.getInstancePointer().pointer);
    }

    private native void _destroyVertexDeclaration__VertexDeclarationp(long _pointer_, long decl);

    /** 
    Creates a new . **/
    public org.ogre4j.IVertexBufferBinding createVertexBufferBinding() {
         return new org.ogre4j.VertexBufferBinding(new InstancePointer(_createVertexBufferBinding(this.object.pointer)));
    }

    private native long _createVertexBufferBinding(long _pointer_);

    /** 
    Destroys a . **/
    public void destroyVertexBufferBinding(org.ogre4j.IVertexBufferBinding binding) {
        _destroyVertexBufferBinding__VertexBufferBindingp(this.object.pointer, binding.getInstancePointer().pointer);
    }

    private native void _destroyVertexBufferBinding__VertexBufferBindingp(long _pointer_, long binding);

    /** 
    Registers a vertex buffer as a copy of another. **/
    public void registerVertexBufferSourceAndCopy(org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer, org.ogre4j.IHardwareVertexBufferSharedPtr copy) {
        _registerVertexBufferSourceAndCopy__HardwareVertexBufferSharedPtrRHardwareVertexBufferSharedPtrR(this.object.pointer, sourceBuffer.getInstancePointer().pointer,  copy.getInstancePointer().pointer);
    }

    private native void _registerVertexBufferSourceAndCopy__HardwareVertexBufferSharedPtrRHardwareVertexBufferSharedPtrR(long _pointer_, long sourceBuffer, long copy);

    /** 
    Allocates a copy of a given vertex buffer. **/
    public void allocateVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue, org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer, org.ogre4j.HardwareBufferManager.BufferLicenseType licenseType, org.ogre4j.IHardwareBufferLicensee licensee, boolean copyData) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_allocateVertexBufferCopy__HardwareVertexBufferSharedPtrRBufferLicenseTypevHardwareBufferLicenseepbv(this.object.pointer, sourceBuffer.getInstancePointer().pointer,  licenseType.getValue(),  licensee.getInstancePointer().pointer,  copyData)), false);
    }

    private native long _allocateVertexBufferCopy__HardwareVertexBufferSharedPtrRBufferLicenseTypevHardwareBufferLicenseepbv(long _pointer_, long sourceBuffer, int licenseType, long licensee, boolean copyData);

    /** 
    Manually release a vertex buffer copy for others to subsequently use. **/
    public void releaseVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr bufferCopy) {
        _releaseVertexBufferCopy__HardwareVertexBufferSharedPtrR(this.object.pointer, bufferCopy.getInstancePointer().pointer);
    }

    private native void _releaseVertexBufferCopy__HardwareVertexBufferSharedPtrR(long _pointer_, long bufferCopy);

    /** 
    Tell engine that the vertex buffer copy intent to reuse. **/
    public void touchVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr bufferCopy) {
        _touchVertexBufferCopy__HardwareVertexBufferSharedPtrR(this.object.pointer, bufferCopy.getInstancePointer().pointer);
    }

    private native void _touchVertexBufferCopy__HardwareVertexBufferSharedPtrR(long _pointer_, long bufferCopy);

    /** 
    Free all unused vertex buffer copies. **/
    public void _freeUnusedBufferCopies() {
        __freeUnusedBufferCopies(this.object.pointer);
    }

    private native void __freeUnusedBufferCopies(long _pointer_);

    /** 
    Internal method for releasing all temporary buffers which have been allocated using BLT_AUTOMATIC_RELEASE; is called by OGRE. **/
    public void _releaseBufferCopies(boolean forceFreeUnused) {
        __releaseBufferCopies__bv(this.object.pointer, forceFreeUnused);
    }

    private native void __releaseBufferCopies__bv(long _pointer_, boolean forceFreeUnused);

    /** 
    Internal method that forces the release of copies of a given buffer. **/
    public void _forceReleaseBufferCopies(org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer) {
        __forceReleaseBufferCopies__HardwareVertexBufferSharedPtrR(this.object.pointer, sourceBuffer.getInstancePointer().pointer);
    }

    private native void __forceReleaseBufferCopies__HardwareVertexBufferSharedPtrR(long _pointer_, long sourceBuffer);

    /** 
    Internal method that forces the release of copies of a given buffer. **/
    public void _forceReleaseBufferCopies(org.ogre4j.IHardwareVertexBuffer sourceBuffer) {
        __forceReleaseBufferCopies__HardwareVertexBufferp(this.object.pointer, sourceBuffer.getInstancePointer().pointer);
    }

    private native void __forceReleaseBufferCopies__HardwareVertexBufferp(long _pointer_, long sourceBuffer);

    /** **/
    public void _notifyVertexBufferDestroyed(org.ogre4j.IHardwareVertexBuffer buf) {
        __notifyVertexBufferDestroyed__HardwareVertexBufferp(this.object.pointer, buf.getInstancePointer().pointer);
    }

    private native void __notifyVertexBufferDestroyed__HardwareVertexBufferp(long _pointer_, long buf);

    /** **/
    public void _notifyIndexBufferDestroyed(org.ogre4j.IHardwareIndexBuffer buf) {
        __notifyIndexBufferDestroyed__HardwareIndexBufferp(this.object.pointer, buf.getInstancePointer().pointer);
    }

    private native void __notifyIndexBufferDestroyed__HardwareIndexBufferp(long _pointer_, long buf);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IHardwareBufferManager getSingleton() {
         return new org.ogre4j.HardwareBufferManager(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IHardwareBufferManager getSingletonPtr() {
         return new org.ogre4j.HardwareBufferManager(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

}
