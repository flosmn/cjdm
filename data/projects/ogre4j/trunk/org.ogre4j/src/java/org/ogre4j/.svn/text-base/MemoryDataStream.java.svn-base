/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class MemoryDataStream extends org.xbig.base.NativeObject implements org.ogre4j.IMemoryDataStream {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public MemoryDataStream(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected MemoryDataStream(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public MemoryDataStream(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Wrap an existing memory chunk in a stream. **/
    public MemoryDataStream(VoidPointer pMem, int size, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__vpivbv( pMem.object.pointer,  size,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__vpivbv(long pMem, int size, boolean freeOnClose);

    /** 
    Wrap an existing memory chunk in a named stream. **/
    public MemoryDataStream(String name, VoidPointer pMem, int size, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__StringRvpivbv( name,  pMem.object.pointer,  size,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__StringRvpivbv(String name, long pMem, int size, boolean freeOnClose);

    /** 
    Create a stream which pre-buffers the contents of another stream. **/
    public MemoryDataStream(org.ogre4j.IDataStream sourceStream, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__DataStreamrbv( sourceStream.getInstancePointer().pointer,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__DataStreamrbv(long sourceStream, boolean freeOnClose);

    /** 
    Create a stream which pre-buffers the contents of another stream. **/
    public MemoryDataStream(org.ogre4j.IDataStreamPtr sourceStream, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__DataStreamPtrrbv( sourceStream.getInstancePointer().pointer,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__DataStreamPtrrbv(long sourceStream, boolean freeOnClose);

    /** 
    Create a named stream which pre-buffers the contents of another stream. **/
    public MemoryDataStream(String name, org.ogre4j.IDataStream sourceStream, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__StringRDataStreamrbv( name,  sourceStream.getInstancePointer().pointer,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__StringRDataStreamrbv(String name, long sourceStream, boolean freeOnClose);

    /** 
    Create a named stream which pre-buffers the contents of another stream. **/
    public MemoryDataStream(String name, org.ogre4j.IDataStreamPtr sourceStream, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__StringRDataStreamPtrRbv( name,  sourceStream.getInstancePointer().pointer,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__StringRDataStreamPtrRbv(String name, long sourceStream, boolean freeOnClose);

    /** 
    Create a stream with a brand new empty memory chunk. **/
    public MemoryDataStream(int size, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__ivbv( size,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__ivbv(int size, boolean freeOnClose);

    /** 
    Create a named stream with a brand new empty memory chunk. **/
    public MemoryDataStream(String name, int size, boolean freeOnClose) {
         super( new org.xbig.base.InstancePointer(__createMemoryDataStream__StringRivbv( name,  size,  freeOnClose)), false);
    }

    private native static long __createMemoryDataStream__StringRivbv(String name, int size, boolean freeOnClose);

    /** 
    Get a pointer to the start of the memory block this stream holds. **/
    public ShortPointer getPtr() {
         return new ShortPointer(new InstancePointer(_getPtr(this.object.pointer)));
    }

    private native long _getPtr(long _pointer_);

    /** 
    Get a pointer to the current position in the memory block this stream holds. **/
    public ShortPointer getCurrentPtr() {
         return new ShortPointer(new InstancePointer(_getCurrentPtr(this.object.pointer)));
    }

    private native long _getCurrentPtr(long _pointer_);

    /** 
    **/
    public int read(VoidPointer buf, int count) {
         return _read__vpiv(this.object.pointer, buf.object.pointer,  count);
    }

    private native int _read__vpiv(long _pointer_, long buf, int count);

    /** 
    **/
    public int readLine(BytePointer buf, int maxCount, String delim) {
         return _readLine__cpivStringR(this.object.pointer, buf.object.pointer,  maxCount,  delim);
    }

    private native int _readLine__cpivStringR(long _pointer_, long buf, int maxCount, String delim);

    /** 
    **/
    public int skipLine(String delim) {
         return _skipLine__StringR(this.object.pointer, delim);
    }

    private native int _skipLine__StringR(long _pointer_, String delim);

    /** 
    **/
    public void skip(long count) {
        _skip__lv(this.object.pointer, count);
    }

    private native void _skip__lv(long _pointer_, long count);

    /** 
    **/
    public void seek(int pos) {
        _seek__iv(this.object.pointer, pos);
    }

    private native void _seek__iv(long _pointer_, int pos);

    /** 
    **/
    public int tell() {
         return _tell_const(this.object.pointer);
    }

    private native int _tell_const(long _pointer_);

    /** 
    **/
    public boolean eof() {
         return _eof_const(this.object.pointer);
    }

    private native boolean _eof_const(long _pointer_);

    /** 
    **/
    public void close() {
        _close(this.object.pointer);
    }

    private native void _close(long _pointer_);

    /** 
    Sets whether or not to free the encapsulated memory on close. **/
    public void setFreeOnClose(boolean free) {
        _setFreeOnClose__bv(this.object.pointer, free);
    }

    private native void _setFreeOnClose__bv(long _pointer_, boolean free);

    /** **/
    public String getName() {
         return _getName(this.object.pointer);
    }

    private native String _getName(long _pointer_);

    /** 
    Returns a String containing the next line of data, optionally trimmed for whitespace. **/
    public String getLine(boolean trimAfter) {
         return _getLine__bv(this.object.pointer, trimAfter);
    }

    private native String _getLine__bv(long _pointer_, boolean trimAfter);

    /** 
    Returns a String containing the entire stream. **/
    public String getAsString() {
         return _getAsString(this.object.pointer);
    }

    private native String _getAsString(long _pointer_);

    /** 
    Returns the total size of the data to be read from the stream, or 0 if this is indeterminate for this stream. **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
