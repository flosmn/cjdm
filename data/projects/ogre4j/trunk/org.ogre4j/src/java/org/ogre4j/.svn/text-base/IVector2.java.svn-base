/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IVector2 extends INativeObject {

    /** **/
    public float operatorIndex_const(int i);

    /** **/
    public FloatPointer operatorIndex(int i);

    /** **/
    public FloatPointer ptr();

    /** **/
    public FloatPointer ptr_const();

    /** 
    Assigns the value of the other vector. **/
    public org.ogre4j.IVector2 operatorAssignment(org.ogre4j.IVector2 rkVector);

    /** **/
    public org.ogre4j.IVector2 operatorAssignment(float fScalar);

    /** **/
    public boolean operatorEqual(org.ogre4j.IVector2 rkVector);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IVector2 rkVector);

    /** **/
    public void operatorAddition(org.ogre4j.IVector2 returnValue, org.ogre4j.IVector2 rkVector);

    /** **/
    public void operatorSubtraction(org.ogre4j.IVector2 returnValue, org.ogre4j.IVector2 rkVector);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector2 returnValue, float fScalar);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector2 returnValue, org.ogre4j.IVector2 rhs);

    /** **/
    public void operatorDivision(org.ogre4j.IVector2 returnValue, float fScalar);

    /** **/
    public void operatorDivision(org.ogre4j.IVector2 returnValue, org.ogre4j.IVector2 rhs);

    /** **/
    public org.ogre4j.IVector2 operatorAddition();

    /** **/
    public void operatorSubtraction(org.ogre4j.IVector2 returnValue);

    /** **/
    public org.ogre4j.IVector2 operatorIncrementAndAssign(org.ogre4j.IVector2 rkVector);

    /** **/
    public org.ogre4j.IVector2 operatorIncrementAndAssign(float fScaler);

    /** **/
    public org.ogre4j.IVector2 operatorDecrementAndAssign(org.ogre4j.IVector2 rkVector);

    /** **/
    public org.ogre4j.IVector2 operatorDecrementAndAssign(float fScaler);

    /** **/
    public org.ogre4j.IVector2 operatorMultiplyAndAssign(float fScalar);

    /** **/
    public org.ogre4j.IVector2 operatorMultiplyAndAssign(org.ogre4j.IVector2 rkVector);

    /** **/
    public org.ogre4j.IVector2 operatorDivideAndAssign(float fScalar);

    /** **/
    public org.ogre4j.IVector2 operatorDivideAndAssign(org.ogre4j.IVector2 rkVector);

    /** 
    Returns the length (magnitude) of the vector. **/
    public float length();

    /** 
    Returns the square of the length(magnitude) of the vector. **/
    public float squaredLength();

    /** 
    Calculates the dot (scalar) product of this vector with another. **/
    public float dotProduct(org.ogre4j.IVector2 vec);

    /** 
    Normalises the vector. **/
    public float normalise();

    /** 
    Returns a vector at a point half way between this and the passed in vector. **/
    public void midPoint(org.ogre4j.IVector2 returnValue, org.ogre4j.IVector2 vec);

    /** 
    Returns true if the vector's scalar components are all greater that the ones of the vector it is compared against. **/
    public boolean operatorLessThan(org.ogre4j.IVector2 rhs);

    /** 
    Returns true if the vector's scalar components are all smaller that the ones of the vector it is compared against. **/
    public boolean operatorGreaterThan(org.ogre4j.IVector2 rhs);

    /** 
    Sets this vector's components to the minimum of its own and the ones of the passed in vector. **/
    public void makeFloor(org.ogre4j.IVector2 cmp);

    /** 
    Sets this vector's components to the maximum of its own and the ones of the passed in vector. **/
    public void makeCeil(org.ogre4j.IVector2 cmp);

    /** 
    Generates a vector perpendicular to this vector (eg an 'up' vector). **/
    public void perpendicular(org.ogre4j.IVector2 returnValue);

    /** 
    Calculates the 2 dimensional cross-product of 2 vectors, which results in a single floating point value which is 2 times the area of the triangle. **/
    public float crossProduct(org.ogre4j.IVector2 rkVector);

    /** 
    Generates a new random vector which deviates from this vector by a given angle in a random direction. **/
    public void randomDeviant(org.ogre4j.IVector2 returnValue, float angle);

    /** 
    Returns true if this vector is zero length. **/
    public boolean isZeroLength();

    /** 
    As normalise, except that this vector is unaffected and the normalised vector is returned as a copy. **/
    public void normalisedCopy(org.ogre4j.IVector2 returnValue);

    /** 
    Calculates a reflection vector to the plane with the given normal . **/
    public void reflect(org.ogre4j.IVector2 returnValue, org.ogre4j.IVector2 normal);

    /** **/
    public float getx();

    /** **/
    public void setx(float _jni_value_);

    /** **/
    public float gety();

    /** **/
    public void sety(float _jni_value_);

}
