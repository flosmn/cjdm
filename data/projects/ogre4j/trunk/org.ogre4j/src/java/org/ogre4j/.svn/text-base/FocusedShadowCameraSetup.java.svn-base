/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class FocusedShadowCameraSetup extends org.xbig.base.NativeObject implements org.ogre4j.IFocusedShadowCameraSetup {
static { System.loadLibrary("ogre4j");}
protected static class PointListBody extends org.xbig.base.NativeObject implements org.ogre4j.IFocusedShadowCameraSetup.IPointListBody {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PointListBody(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PointListBody(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PointListBody(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PointListBody() {
         super( new org.xbig.base.InstancePointer(__createPointListBody()), false);
    }

    private native static long __createPointListBody();

    /** **/
    public PointListBody(org.ogre4j.IConvexBody body) {
         super( new org.xbig.base.InstancePointer(__createPointListBody__ConvexBodyR( body.getInstancePointer().pointer)), false);
    }

    private native static long __createPointListBody__ConvexBodyR(long body);

    /** 
    Merges a second  into this one. **/
    public void merge(org.ogre4j.IFocusedShadowCameraSetup.IPointListBody plb) {
        _merge__PointListBodyR(this.object.pointer, plb.getInstancePointer().pointer);
    }

    private native void _merge__PointListBodyR(long _pointer_, long plb);

    /** 
    Builds a point list body from a 'real' body. **/
    public void build(org.ogre4j.IConvexBody body, boolean filterDuplicates) {
        _build__ConvexBodyRbv(this.object.pointer, body.getInstancePointer().pointer,  filterDuplicates);
    }

    private native void _build__ConvexBodyRbv(long _pointer_, long body, boolean filterDuplicates);

    /** 
    Builds a  from a Body and includes all the space in a given direction. **/
    public void buildAndIncludeDirection(org.ogre4j.IConvexBody body, org.ogre4j.IAxisAlignedBox aabMax, org.ogre4j.IVector3 dir) {
        _buildAndIncludeDirection__ConvexBodyRAxisAlignedBoxRVector3R(this.object.pointer, body.getInstancePointer().pointer,  aabMax.getInstancePointer().pointer,  dir.getInstancePointer().pointer);
    }

    private native void _buildAndIncludeDirection__ConvexBodyRAxisAlignedBoxRVector3R(long _pointer_, long body, long aabMax, long dir);

    /** 
    Returns the bounding box representation. **/
    public org.ogre4j.IAxisAlignedBox getAAB() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getAAB_const(this.object.pointer)));
    }

    private native long _getAAB_const(long _pointer_);

    /** 
    Adds a specific point to the body list. **/
    public void addPoint(org.ogre4j.IVector3 point) {
        _addPoint__Vector3R(this.object.pointer, point.getInstancePointer().pointer);
    }

    private native void _addPoint__Vector3R(long _pointer_, long point);

    /** 
    Adds all points of an AAB. **/
    public void addAAB(org.ogre4j.IAxisAlignedBox aab) {
        _addAAB__AxisAlignedBoxR(this.object.pointer, aab.getInstancePointer().pointer);
    }

    private native void _addAAB__AxisAlignedBoxR(long _pointer_, long aab);

    /** 
    Returns a point. **/
    public org.ogre4j.IVector3 getPoint(int cnt) {
         return new org.ogre4j.Vector3(new InstancePointer(_getPoint__iv_const(this.object.pointer, cnt)));
    }

    private native long _getPoint__iv_const(long _pointer_, int cnt);

    /** 
    Returns the point count. **/
    public int getPointCount() {
         return _getPointCount_const(this.object.pointer);
    }

    private native int _getPointCount_const(long _pointer_);

    /** 
    Resets the body. **/
    public void reset() {
        _reset(this.object.pointer);
    }

    private native void _reset(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public FocusedShadowCameraSetup(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected FocusedShadowCameraSetup(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public FocusedShadowCameraSetup(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Default constructor. **/
    public FocusedShadowCameraSetup() {
         super( new org.xbig.base.InstancePointer(__createFocusedShadowCameraSetup()), false);
    }

    private native static long __createFocusedShadowCameraSetup();

    /** 
    Returns a uniform shadow camera with a focused view. **/
    public void getShadowCamera(org.ogre4j.ISceneManager sm, org.ogre4j.ICamera cam, org.ogre4j.IViewport vp, org.ogre4j.ILight light, org.ogre4j.ICamera texCam, int iteration) {
        _getShadowCamera__SceneManagerPCameraPViewportPLightPCamerapiv_const(this.object.pointer, sm.getInstancePointer().pointer,  cam.getInstancePointer().pointer,  vp.getInstancePointer().pointer,  light.getInstancePointer().pointer,  texCam.getInstancePointer().pointer,  iteration);
    }

    private native void _getShadowCamera__SceneManagerPCameraPViewportPLightPCamerapiv_const(long _pointer_, long sm, long cam, long vp, long light, long texCam, int iteration);

    /** 
    Sets whether or not to use the more aggressive approach to deciding on the focus region or not. **/
    public void setUseAggressiveFocusRegion(boolean aggressive) {
        _setUseAggressiveFocusRegion__bv(this.object.pointer, aggressive);
    }

    private native void _setUseAggressiveFocusRegion__bv(long _pointer_, boolean aggressive);

    /** **/
    public boolean getUseAggressiveFocusRegion() {
         return _getUseAggressiveFocusRegion_const(this.object.pointer);
    }

    private native boolean _getUseAggressiveFocusRegion_const(long _pointer_);

}
