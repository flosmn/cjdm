/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IControllerManager extends INativeObject, org.ogre4j.IGeneralAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.IControllerManager > {

public interface IControllerList extends INativeObject, org.std.Iset< org.ogre4j.IController< Float > > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IController< Float > key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IController< Float > key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
    /** 
    Creates a new controller and registers it with the manager. **/
    public void createController(org.ogre4j.IController< Float > returnValue, org.ogre4j.IControllerValueRealPtr src, org.ogre4j.IControllerValueRealPtr dest, org.ogre4j.IControllerFunctionRealPtr func);

    /** 
    Creates a new controller use frame time source and passthrough controller function. **/
    public void createFrameTimePassthroughController(org.ogre4j.IController< Float > returnValue, org.ogre4j.IControllerValueRealPtr dest);

    /** 
    Destroys all the controllers in existence. **/
    public void clearControllers();

    /** 
    Updates all the registered controllers. **/
    public void updateAllControllers();

    /** 
    Returns a  which provides the time since the last frame as a control value source. **/
    public org.ogre4j.IControllerValueRealPtr getFrameTimeSource();

    /** 
    Retrieve a simple passthrough controller function. **/
    public org.ogre4j.IControllerFunctionRealPtr getPassthroughControllerFunction();

    /** 
    Creates a texture layer animator controller. **/
    public void createTextureAnimator(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float sequenceTime);

    /** 
    Creates a basic time-based texture uv coordinate modifier designed for creating scrolling textures. **/
    public void createTextureUVScroller(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float speed);

    /** 
    Creates a basic time-based texture u coordinate modifier designed for creating scrolling textures. **/
    public void createTextureUScroller(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float uSpeed);

    /** 
    Creates a basic time-based texture v coordinate modifier designed for creating scrolling textures. **/
    public void createTextureVScroller(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float vSpeed);

    /** 
    Creates a basic time-based texture coordinate modifier designed for creating rotating textures. **/
    public void createTextureRotater(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, float speed);

    /** 
    Creates a very flexible time-based texture transformation which can alter the scale, position or rotation of a texture based on a wave function. **/
    public void createTextureWaveTransformer(org.ogre4j.IController< Float > returnValue, org.ogre4j.ITextureUnitState layer, org.ogre4j.TextureUnitState.TextureTransformType ttype, org.ogre4j.WaveformType waveType, float base, float frequency, float phase, float amplitude);

    /** 
    Creates a controller for passing a frame time value through to a vertex / fragment program parameter. **/
    public void createGpuProgramTimerParam(org.ogre4j.IController< Float > returnValue, org.ogre4j.IGpuProgramParameters params, int paramIndex, float timeFactor);

    /** 
    Removes & destroys the controller passed in as a pointer. **/
    public void destroyController(org.ogre4j.IController< Float > controller);

    /** 
    Return relative speed of time as perceived by time based controllers. **/
    public float getTimeFactor();

    /** 
    Set the relative speed to update frame time based controllers. **/
    public void setTimeFactor(float tf);

    /** 
    Gets the constant that is added to time lapsed between each frame. **/
    public float getFrameDelay();

    /** 
    Sets a constant frame rate. **/
    public void setFrameDelay(float fd);

    /** 
    Return the elapsed time. **/
    public float getElapsedTime();

    /** 
    Set the elapsed time. **/
    public void setElapsedTime(float elapsedTime);

}
