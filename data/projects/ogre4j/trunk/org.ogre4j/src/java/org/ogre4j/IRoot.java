/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IRoot extends INativeObject, org.ogre4j.IGeneralAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.IRoot > {

public interface IMovableObjectFactoryMap extends INativeObject, org.std.Imap< String, org.ogre4j.IMovableObjectFactory > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IMovableObjectFactory get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IMovableObjectFactory value);

}
public interface IRenderQueueInvocationSequenceMap extends INativeObject, org.std.Imap< String, org.ogre4j.IRenderQueueInvocationSequence > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IRenderQueueInvocationSequence get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IRenderQueueInvocationSequence value);

}
public interface IPluginLibList extends INativeObject, org.std.Ivector< org.ogre4j.IDynLib > {

    /** **/
    public void assign(int num, org.ogre4j.IDynLib val);

    /** **/
    public org.ogre4j.IDynLib at(int loc);

    /** **/
    public org.ogre4j.IDynLib back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IDynLib front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IDynLib val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IPluginInstanceList extends INativeObject, org.std.Ivector< org.ogre4j.IPlugin > {

    /** **/
    public void assign(int num, org.ogre4j.IPlugin val);

    /** **/
    public org.ogre4j.IPlugin at(int loc);

    /** **/
    public org.ogre4j.IPlugin back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IPlugin front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IPlugin val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IMovableObjectFactoryIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.IRoot.IMovableObjectFactoryMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IMovableObjectFactory getNext();

    /** **/
    public org.ogre4j.IMovableObjectFactory peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IRoot.IMovableObjectFactoryIterator operatorAssignment(org.ogre4j.IRoot.IMovableObjectFactoryIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IMovableObjectFactory> peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** 
    Saves the details of the current configuration **/
    public void saveConfig();

    /** 
    Checks for saved video/sound/etc settings **/
    public boolean restoreConfig();

    /** 
    Displays a dialog asking the user to choose system settings. **/
    public boolean showConfigDialog();

    /** 
    Adds a new rendering subsystem to the list of available renderers. **/
    public void addRenderSystem(org.ogre4j.IRenderSystem newRend);

    /** 
    Retrieve a list of the available render systems. **/
    public org.ogre4j.IRenderSystemList getAvailableRenderers();

    /** 
    Retrieve a pointer to the render system by the given name **/
    public org.ogre4j.IRenderSystem getRenderSystemByName(String name);

    /** 
    Sets the rendering subsystem to be used. **/
    public void setRenderSystem(org.ogre4j.IRenderSystem system);

    /** 
    Retrieve a pointer to the currently selected render system. **/
    public org.ogre4j.IRenderSystem getRenderSystem();

    /** 
    Initialises the renderer. **/
    public org.ogre4j.IRenderWindow initialise(boolean autoCreateWindow, String windowTitle, String customCapabilitiesConfig);

    /** 
    Returns whether the system is initialised or not. **/
    public boolean isInitialised();

    /** 
    Requests active  to use custom **/
    public void useCustomRenderSystemCapabilities(org.ogre4j.IRenderSystemCapabilities capabilities);

    /** 
    Register a new , a factory object for creating instances of specific SceneManagers. **/
    public void addSceneManagerFactory(org.ogre4j.ISceneManagerFactory fact);

    /** 
    Unregister a . **/
    public void removeSceneManagerFactory(org.ogre4j.ISceneManagerFactory fact);

    /** 
    Get more information about a given type of . **/
    public org.ogre4j.ISceneManagerMetaData getSceneManagerMetaData(String typeName);

    /** 
    Iterate over all types of  available for construction, providing some information about each one. **/
    public void getSceneManagerMetaDataIterator(org.ogre4j.ISceneManagerEnumerator.IMetaDataIterator returnValue);

    /** 
    Create a  instance of a given type. **/
    public org.ogre4j.ISceneManager createSceneManager(String typeName, String instanceName);

    /** 
    Create a  instance based on scene type support. **/
    public org.ogre4j.ISceneManager createSceneManager(int typeMask, String instanceName);

    /** 
    Destroy an instance of a . **/
    public void destroySceneManager(org.ogre4j.ISceneManager sm);

    /** 
    Get an existing  instance that has already been created, identified by the instance name. **/
    public org.ogre4j.ISceneManager getSceneManager(String instanceName);

    /** 
    Get an iterator over all the existing  instances. **/
    public void getSceneManagerIterator(org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator returnValue);

    /** 
    Retrieves a reference to the current . **/
    public org.ogre4j.ITextureManager getTextureManager();

    /** 
    Retrieves a reference to the current . **/
    public org.ogre4j.IMeshManager getMeshManager();

    /** 
    Utility function for getting a better description of an error code. **/
    public String getErrorDescription(long errorNumber);

    /** 
    Registers a  which will be called back every frame. **/
    public void addFrameListener(org.ogre4j.IFrameListener newListener);

    /** 
    Removes a  from the list of listening classes. **/
    public void removeFrameListener(org.ogre4j.IFrameListener oldListener);

    /** 
    Queues the end of rendering. **/
    public void queueEndRendering();

    /** 
    Starts / restarts the automatic rendering cycle. **/
    public void startRendering();

    /** 
    Render one frame. **/
    public boolean renderOneFrame();

    /** 
    Shuts down the system manually. **/
    public void shutdown();

    /** 
    Adds a location to the list of searchable locations for a  type. **/
    public void addResourceLocation(String name, String locType, String groupName, boolean recursive);

    /** 
    Removes a resource location from the list. **/
    public void removeResourceLocation(String name, String groupName);

    /** 
    Generates a packed data version of the passed in  suitable for use with the current . **/
    public void convertColourValue(org.ogre4j.IColourValue colour, LongPointer pDest);

    /** 
    Retrieves a pointer to the window that was created automatically **/
    public org.ogre4j.IRenderWindow getAutoCreatedWindow();

    /** 
    **/
    public org.ogre4j.IRenderWindow createRenderWindow(String name, long width, long height, boolean fullScreen, org.ogre4j.INameValuePairList miscParams);

    /** 
    Destroys a rendering window. **/
    public void detachRenderTarget(org.ogre4j.IRenderTarget pWin);

    /** 
    Destroys a named rendering window. **/
    public void detachRenderTarget(String name);

    /** 
    Retrieves a pointer to the a named render window. **/
    public org.ogre4j.IRenderTarget getRenderTarget(String name);

    /** 
    Manually load a  contained in a DLL / DSO. **/
    public void loadPlugin(String pluginName);

    /** 
    Manually unloads a  contained in a DLL / DSO. **/
    public void unloadPlugin(String pluginName);

    /** 
    Install a new plugin. **/
    public void installPlugin(org.ogre4j.IPlugin plugin);

    /** 
    Uninstall an existing plugin. **/
    public void uninstallPlugin(org.ogre4j.IPlugin plugin);

    /** 
    Gets a read-only list of the currently installed plugins. **/
    public org.ogre4j.IRoot.IPluginInstanceList getInstalledPlugins();

    /** 
    Gets a pointer to the central timer used for all OGRE timings **/
    public org.ogre4j.ITimer getTimer();

    /** 
    Method for raising frame started events. **/
    public boolean _fireFrameStarted(org.ogre4j.IFrameEvent evt);

    /** 
    Method for raising frame rendering queued events. **/
    public boolean _fireFrameRenderingQueued(org.ogre4j.IFrameEvent evt);

    /** 
    Method for raising frame ended events. **/
    public boolean _fireFrameEnded(org.ogre4j.IFrameEvent evt);

    /** 
    Method for raising frame started events. **/
    public boolean _fireFrameStarted();

    /** 
    Method for raising frame rendering queued events. **/
    public boolean _fireFrameRenderingQueued();

    /** 
    Method for raising frame ended events. **/
    public boolean _fireFrameEnded();

    /** 
    Gets the number of the next frame to be rendered. **/
    public long getNextFrameNumber();

    /** 
    Returns the scene manager currently being used to render a frame. **/
    public org.ogre4j.ISceneManager _getCurrentSceneManager();

    /** 
    Sets the scene manager currently being used to render a frame. **/
    public void _setCurrentSceneManager(org.ogre4j.ISceneManager sm);

    /** 
    Internal method used for updating all  objects (windows, renderable textures etc) which are set to auto-update. **/
    public boolean _updateAllRenderTargets();

    /** 
    Create a new , useful for linking to  instances to perform custom rendering. **/
    public org.ogre4j.IRenderQueueInvocationSequence createRenderQueueInvocationSequence(String name);

    /** 
    Get a . **/
    public org.ogre4j.IRenderQueueInvocationSequence getRenderQueueInvocationSequence(String name);

    /** 
    Destroy a . **/
    public void destroyRenderQueueInvocationSequence(String name);

    /** 
    Destroy all RenderQueueInvocationSequences. **/
    public void destroyAllRenderQueueInvocationSequences();

    /** 
    Clears the history of all event times. **/
    public void clearEventTimes();

    /** 
    Sets the period over which OGRE smooths out fluctuations in frame times. **/
    public void setFrameSmoothingPeriod(float period);

    /** 
    Gets the period over which OGRE smooths out fluctuations in frame times. **/
    public float getFrameSmoothingPeriod();

    /** 
    Register a new  which will create new  instances of a particular type, as identified by the getType() method. **/
    public void addMovableObjectFactory(org.ogre4j.IMovableObjectFactory fact, boolean overrideExisting);

    /** 
    Removes a previously registered . **/
    public void removeMovableObjectFactory(org.ogre4j.IMovableObjectFactory fact);

    /** **/
    public boolean hasMovableObjectFactory(String typeName);

    /** **/
    public org.ogre4j.IMovableObjectFactory getMovableObjectFactory(String typeName);

    /** 
    Allocate the next  type flag. **/
    public long _allocateNextMovableObjectTypeFlag();

    /** 
    Return an iterator over all the  instances currently registered. **/
    public void getMovableObjectFactoryIterator(org.ogre4j.IRoot.IMovableObjectFactoryIterator returnValue);

}
