/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ParticleSystemManager extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager {
static { System.loadLibrary("ogre4j");}
public static class ParticleTemplateMap extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleTemplateMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleTemplateMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleTemplateMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleTemplateMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleTemplateMap() {
         super( new org.xbig.base.InstancePointer(__createParticleTemplateMap()), false);
    }

    private native static long __createParticleTemplateMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystem get(String key) {
         return new org.ogre4j.ParticleSystem(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystem value) {
        _insert__sROgre_ParticleSystemp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ParticleSystemp(long _pointer_, String key, long value);

}
public static class ParticleAffectorFactoryMap extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleAffectorFactoryMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleAffectorFactoryMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleAffectorFactoryMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleAffectorFactoryMap() {
         super( new org.xbig.base.InstancePointer(__createParticleAffectorFactoryMap()), false);
    }

    private native static long __createParticleAffectorFactoryMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleAffectorFactory get(String key) {
         return new org.ogre4j.ParticleAffectorFactory(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleAffectorFactory value) {
        _insert__sROgre_ParticleAffectorFactoryp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ParticleAffectorFactoryp(long _pointer_, String key, long value);

}
public static class ParticleEmitterFactoryMap extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleEmitterFactoryMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleEmitterFactoryMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleEmitterFactoryMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleEmitterFactoryMap() {
         super( new org.xbig.base.InstancePointer(__createParticleEmitterFactoryMap()), false);
    }

    private native static long __createParticleEmitterFactoryMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleEmitterFactory get(String key) {
         return new org.ogre4j.ParticleEmitterFactory(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleEmitterFactory value) {
        _insert__sROgre_ParticleEmitterFactoryp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ParticleEmitterFactoryp(long _pointer_, String key, long value);

}
public static class ParticleSystemRendererFactoryMap extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleSystemRendererFactoryMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleSystemRendererFactoryMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleSystemRendererFactoryMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleSystemRendererFactoryMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleSystemRendererFactoryMap() {
         super( new org.xbig.base.InstancePointer(__createParticleSystemRendererFactoryMap()), false);
    }

    private native static long __createParticleSystemRendererFactoryMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystemRendererFactory get(String key) {
         return new org.ogre4j.ParticleSystemRendererFactory(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IParticleSystemRendererFactory value) {
        _insert__sROgre_ParticleSystemRendererFactoryp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_ParticleSystemRendererFactoryp(long _pointer_, String key, long value);

}
public static class ParticleAffectorFactoryIterator extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleAffectorFactoryIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleAffectorFactoryIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleAffectorFactoryIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleAffectorFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryMap c) {
         super( new org.xbig.base.InstancePointer(__createParticleAffectorFactoryIterator__Ogre_ParticleSystemManager_ParticleAffectorFactoryMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createParticleAffectorFactoryIterator__Ogre_ParticleSystemManager_ParticleAffectorFactoryMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleAffectorFactory getNext() {
         return new org.ogre4j.ParticleAffectorFactory(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IParticleAffectorFactory peekNextValue() {
         return new org.ogre4j.ParticleAffectorFactory(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryIterator rhs) {
         return new org.ogre4j.ParticleSystemManager.ParticleAffectorFactoryIterator(new InstancePointer(_operatorAssignment___Ogre_ParticleSystemManager_ParticleAffectorFactoryIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_ParticleSystemManager_ParticleAffectorFactoryIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleAffectorFactory> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IParticleAffectorFactory>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class ParticleEmitterFactoryIterator extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleEmitterFactoryIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleEmitterFactoryIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleEmitterFactoryIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleEmitterFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryMap c) {
         super( new org.xbig.base.InstancePointer(__createParticleEmitterFactoryIterator__Ogre_ParticleSystemManager_ParticleEmitterFactoryMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createParticleEmitterFactoryIterator__Ogre_ParticleSystemManager_ParticleEmitterFactoryMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleEmitterFactory getNext() {
         return new org.ogre4j.ParticleEmitterFactory(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IParticleEmitterFactory peekNextValue() {
         return new org.ogre4j.ParticleEmitterFactory(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryIterator rhs) {
         return new org.ogre4j.ParticleSystemManager.ParticleEmitterFactoryIterator(new InstancePointer(_operatorAssignment___Ogre_ParticleSystemManager_ParticleEmitterFactoryIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_ParticleSystemManager_ParticleEmitterFactoryIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleEmitterFactory> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IParticleEmitterFactory>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class ParticleRendererFactoryIterator extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleRendererFactoryIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleRendererFactoryIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleRendererFactoryIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleRendererFactoryIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleRendererFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleSystemRendererFactoryMap c) {
         super( new org.xbig.base.InstancePointer(__createParticleRendererFactoryIterator__Ogre_ParticleSystemManager_ParticleSystemRendererFactoryMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createParticleRendererFactoryIterator__Ogre_ParticleSystemManager_ParticleSystemRendererFactoryMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystemRendererFactory getNext() {
         return new org.ogre4j.ParticleSystemRendererFactory(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystemRendererFactory peekNextValue() {
         return new org.ogre4j.ParticleSystemRendererFactory(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleRendererFactoryIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleRendererFactoryIterator rhs) {
         return new org.ogre4j.ParticleSystemManager.ParticleRendererFactoryIterator(new InstancePointer(_operatorAssignment___Ogre_ParticleSystemManager_ParticleRendererFactoryIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_ParticleSystemManager_ParticleRendererFactoryIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleSystemRendererFactory> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IParticleSystemRendererFactory>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class ParticleSystemTemplateIterator extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemManager.IParticleSystemTemplateIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleSystemTemplateIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleSystemTemplateIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleSystemTemplateIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleSystemTemplateIterator(org.ogre4j.IParticleSystemManager.IParticleTemplateMap c) {
         super( new org.xbig.base.InstancePointer(__createParticleSystemTemplateIterator__Ogre_ParticleSystemManager_ParticleTemplateMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createParticleSystemTemplateIterator__Ogre_ParticleSystemManager_ParticleTemplateMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystem getNext() {
         return new org.ogre4j.ParticleSystem(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystem peekNextValue() {
         return new org.ogre4j.ParticleSystem(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IParticleSystemManager.IParticleSystemTemplateIterator operatorAssignment(org.ogre4j.IParticleSystemManager.IParticleSystemTemplateIterator rhs) {
         return new org.ogre4j.ParticleSystemManager.ParticleSystemTemplateIterator(new InstancePointer(_operatorAssignment___Ogre_ParticleSystemManager_ParticleSystemTemplateIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_ParticleSystemManager_ParticleSystemTemplateIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IParticleSystem> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IParticleSystem>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleSystemManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleSystemManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleSystemManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ParticleSystemManager() {
         super( new org.xbig.base.InstancePointer(__createParticleSystemManager()), false);
    }

    private native static long __createParticleSystemManager();

    /** 
    Adds a new 'factory' object for emitters to the list of available emitter types. **/
    public void addEmitterFactory(org.ogre4j.IParticleEmitterFactory factory) {
        _addEmitterFactory__ParticleEmitterFactoryp(this.object.pointer, factory.getInstancePointer().pointer);
    }

    private native void _addEmitterFactory__ParticleEmitterFactoryp(long _pointer_, long factory);

    /** 
    Adds a new 'factory' object for affectors to the list of available affector types. **/
    public void addAffectorFactory(org.ogre4j.IParticleAffectorFactory factory) {
        _addAffectorFactory__ParticleAffectorFactoryp(this.object.pointer, factory.getInstancePointer().pointer);
    }

    private native void _addAffectorFactory__ParticleAffectorFactoryp(long _pointer_, long factory);

    /** 
    Registers a factory class for creating  instances. **/
    public void addRendererFactory(org.ogre4j.IParticleSystemRendererFactory factory) {
        _addRendererFactory__ParticleSystemRendererFactoryp(this.object.pointer, factory.getInstancePointer().pointer);
    }

    private native void _addRendererFactory__ParticleSystemRendererFactoryp(long _pointer_, long factory);

    /** 
    Adds a new particle system template to the list of available templates. **/
    public void addTemplate(String name, org.ogre4j.IParticleSystem sysTemplate) {
        _addTemplate__StringRParticleSystemp(this.object.pointer, name,  sysTemplate.getInstancePointer().pointer);
    }

    private native void _addTemplate__StringRParticleSystemp(long _pointer_, String name, long sysTemplate);

    /** 
    Removes a specified template from the . **/
    public void removeTemplate(String name, boolean deleteTemplate) {
        _removeTemplate__StringRbv(this.object.pointer, name,  deleteTemplate);
    }

    private native void _removeTemplate__StringRbv(long _pointer_, String name, boolean deleteTemplate);

    /** 
    Removes a specified template from the . **/
    public void removeAllTemplates(boolean deleteTemplate) {
        _removeAllTemplates__bv(this.object.pointer, deleteTemplate);
    }

    private native void _removeAllTemplates__bv(long _pointer_, boolean deleteTemplate);

    /** 
    Create a new particle system template. **/
    public org.ogre4j.IParticleSystem createTemplate(String name, String resourceGroup) {
         return new org.ogre4j.ParticleSystem(new InstancePointer(_createTemplate__StringRStringR(this.object.pointer, name,  resourceGroup)));
    }

    private native long _createTemplate__StringRStringR(long _pointer_, String name, String resourceGroup);

    /** 
    Retrieves a particle system template for possible modification. **/
    public org.ogre4j.IParticleSystem getTemplate(String name) {
         return new org.ogre4j.ParticleSystem(new InstancePointer(_getTemplate__StringR(this.object.pointer, name)));
    }

    private native long _getTemplate__StringR(long _pointer_, String name);

    /** 
    Internal method for creating a new emitter from a factory. **/
    public org.ogre4j.IParticleEmitter _createEmitter(String emitterType, org.ogre4j.IParticleSystem psys) {
         return new org.ogre4j.ParticleEmitter(new InstancePointer(__createEmitter__StringRParticleSystemp(this.object.pointer, emitterType,  psys.getInstancePointer().pointer)));
    }

    private native long __createEmitter__StringRParticleSystemp(long _pointer_, String emitterType, long psys);

    /** 
    Internal method for destroying an emitter. **/
    public void _destroyEmitter(org.ogre4j.IParticleEmitter emitter) {
        __destroyEmitter__ParticleEmitterp(this.object.pointer, emitter.getInstancePointer().pointer);
    }

    private native void __destroyEmitter__ParticleEmitterp(long _pointer_, long emitter);

    /** 
    Internal method for creating a new affector from a factory. **/
    public org.ogre4j.IParticleAffector _createAffector(String affectorType, org.ogre4j.IParticleSystem psys) {
         return new org.ogre4j.ParticleAffector(new InstancePointer(__createAffector__StringRParticleSystemp(this.object.pointer, affectorType,  psys.getInstancePointer().pointer)));
    }

    private native long __createAffector__StringRParticleSystemp(long _pointer_, String affectorType, long psys);

    /** 
    Internal method for destroying an affector. **/
    public void _destroyAffector(org.ogre4j.IParticleAffector affector) {
        __destroyAffector__ParticleAffectorp(this.object.pointer, affector.getInstancePointer().pointer);
    }

    private native void __destroyAffector__ParticleAffectorp(long _pointer_, long affector);

    /** 
    Internal method for creating a new renderer from a factory. **/
    public org.ogre4j.IParticleSystemRenderer _createRenderer(String rendererType) {
         return new org.ogre4j.ParticleSystemRenderer(new InstancePointer(__createRenderer__StringR(this.object.pointer, rendererType)));
    }

    private native long __createRenderer__StringR(long _pointer_, String rendererType);

    /** 
    Internal method for destroying a renderer. **/
    public void _destroyRenderer(org.ogre4j.IParticleSystemRenderer renderer) {
        __destroyRenderer__ParticleSystemRendererp(this.object.pointer, renderer.getInstancePointer().pointer);
    }

    private native void __destroyRenderer__ParticleSystemRendererp(long _pointer_, long renderer);

    /** 
    Init method to be called by OGRE system. **/
    public void _initialise() {
        __initialise(this.object.pointer);
    }

    private native void __initialise(long _pointer_);

    /** **/
    public org.ogre4j.IStringVector getScriptPatterns() {
         return new org.ogre4j.StringVector(new InstancePointer(_getScriptPatterns_const(this.object.pointer)));
    }

    private native long _getScriptPatterns_const(long _pointer_);

    /** **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream, String groupName) {
        _parseScript__DataStreamPtrrStringR(this.object.pointer, stream.getInstancePointer().pointer,  groupName);
    }

    private native void _parseScript__DataStreamPtrrStringR(long _pointer_, long stream, String groupName);

    /** **/
    public float getLoadingOrder() {
         return _getLoadingOrder_const(this.object.pointer);
    }

    private native float _getLoadingOrder_const(long _pointer_);

    /** 
    Return an iterator over the affector factories currently registered **/
    public void getAffectorFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleAffectorFactoryIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getAffectorFactoryIterator(this.object.pointer)), false);
    }

    private native long _getAffectorFactoryIterator(long _pointer_);

    /** 
    Return an iterator over the emitter factories currently registered **/
    public void getEmitterFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleEmitterFactoryIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getEmitterFactoryIterator(this.object.pointer)), false);
    }

    private native long _getEmitterFactoryIterator(long _pointer_);

    /** 
    Return an iterator over the renderer factories currently registered **/
    public void getRendererFactoryIterator(org.ogre4j.IParticleSystemManager.IParticleRendererFactoryIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getRendererFactoryIterator(this.object.pointer)), false);
    }

    private native long _getRendererFactoryIterator(long _pointer_);

    /** 
    Gets an iterator over the list of particle system templates. **/
    public void getTemplateIterator(org.ogre4j.IParticleSystemManager.IParticleSystemTemplateIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTemplateIterator(this.object.pointer)), false);
    }

    private native long _getTemplateIterator(long _pointer_);

    /** 
    Get an instance of  (internal use). **/
    public org.ogre4j.IParticleSystemFactory _getFactory() {
         return new org.ogre4j.ParticleSystemFactory(new InstancePointer(__getFactory(this.object.pointer)));
    }

    private native long __getFactory(long _pointer_);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IParticleSystemManager getSingleton() {
         return new org.ogre4j.ParticleSystemManager(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IParticleSystemManager getSingletonPtr() {
         return new org.ogre4j.ParticleSystemManager(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

}
