/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Profiler extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler {
static { System.loadLibrary("ogre4j");}
protected static class ProfileFrame extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileFrame {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileFrame(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileFrame(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileFrame(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ProfileFrame() {
         super( new org.xbig.base.InstancePointer(__createProfileFrame()), false);
    }

    private native static long __createProfileFrame();

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public long getframeTime() {
         return _getframeTime(this.object.pointer);
    }

    private native long _getframeTime(long _pointer_);

    /** **/
    public void setframeTime(long _jni_value_) {
        _setframeTime(this.object.pointer, _jni_value_);
    }

    private native void _setframeTime(long _pointer_, long _jni_value_);

    /** **/
    public long getcalls() {
         return _getcalls(this.object.pointer);
    }

    private native long _getcalls(long _pointer_);

    /** **/
    public void setcalls(long _jni_value_) {
        _setcalls(this.object.pointer, _jni_value_);
    }

    private native void _setcalls(long _pointer_, long _jni_value_);

    /** **/
    public long gethierarchicalLvl() {
         return _gethierarchicalLvl(this.object.pointer);
    }

    private native long _gethierarchicalLvl(long _pointer_);

    /** **/
    public void sethierarchicalLvl(long _jni_value_) {
        _sethierarchicalLvl(this.object.pointer, _jni_value_);
    }

    private native void _sethierarchicalLvl(long _pointer_, long _jni_value_);

}
protected static class ProfileHistory extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileHistory {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileHistory(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileHistory(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileHistory(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ProfileHistory() {
         super( new org.xbig.base.InstancePointer(__createProfileHistory()), false);
    }

    private native static long __createProfileHistory();

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public float getcurrentTime() {
         return _getcurrentTime(this.object.pointer);
    }

    private native float _getcurrentTime(long _pointer_);

    /** **/
    public void setcurrentTime(float _jni_value_) {
        _setcurrentTime(this.object.pointer, _jni_value_);
    }

    private native void _setcurrentTime(long _pointer_, float _jni_value_);

    /** **/
    public float getmaxTime() {
         return _getmaxTime(this.object.pointer);
    }

    private native float _getmaxTime(long _pointer_);

    /** **/
    public void setmaxTime(float _jni_value_) {
        _setmaxTime(this.object.pointer, _jni_value_);
    }

    private native void _setmaxTime(long _pointer_, float _jni_value_);

    /** **/
    public float getminTime() {
         return _getminTime(this.object.pointer);
    }

    private native float _getminTime(long _pointer_);

    /** **/
    public void setminTime(float _jni_value_) {
        _setminTime(this.object.pointer, _jni_value_);
    }

    private native void _setminTime(long _pointer_, float _jni_value_);

    /** **/
    public long getnumCallsThisFrame() {
         return _getnumCallsThisFrame(this.object.pointer);
    }

    private native long _getnumCallsThisFrame(long _pointer_);

    /** **/
    public void setnumCallsThisFrame(long _jni_value_) {
        _setnumCallsThisFrame(this.object.pointer, _jni_value_);
    }

    private native void _setnumCallsThisFrame(long _pointer_, long _jni_value_);

    /** **/
    public float gettotalTime() {
         return _gettotalTime(this.object.pointer);
    }

    private native float _gettotalTime(long _pointer_);

    /** **/
    public void settotalTime(float _jni_value_) {
        _settotalTime(this.object.pointer, _jni_value_);
    }

    private native void _settotalTime(long _pointer_, float _jni_value_);

    /** **/
    public long gettotalCalls() {
         return _gettotalCalls(this.object.pointer);
    }

    private native long _gettotalCalls(long _pointer_);

    /** **/
    public void settotalCalls(long _jni_value_) {
        _settotalCalls(this.object.pointer, _jni_value_);
    }

    private native void _settotalCalls(long _pointer_, long _jni_value_);

    /** **/
    public long gethierarchicalLvl() {
         return _gethierarchicalLvl(this.object.pointer);
    }

    private native long _gethierarchicalLvl(long _pointer_);

    /** **/
    public void sethierarchicalLvl(long _jni_value_) {
        _sethierarchicalLvl(this.object.pointer, _jni_value_);
    }

    private native void _sethierarchicalLvl(long _pointer_, long _jni_value_);

}
protected static class ProfileInstance extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileInstance {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileInstance(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileInstance(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileInstance(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ProfileInstance() {
         super( new org.xbig.base.InstancePointer(__createProfileInstance()), false);
    }

    private native static long __createProfileInstance();

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public String getparent() {
         return _getparent(this.object.pointer);
    }

    private native String _getparent(long _pointer_);

    /** **/
    public void setparent(String _jni_value_) {
        _setparent(this.object.pointer, _jni_value_);
    }

    private native void _setparent(long _pointer_, String _jni_value_);

    /** **/
    public long getcurrTime() {
         return _getcurrTime(this.object.pointer);
    }

    private native long _getcurrTime(long _pointer_);

    /** **/
    public void setcurrTime(long _jni_value_) {
        _setcurrTime(this.object.pointer, _jni_value_);
    }

    private native void _setcurrTime(long _pointer_, long _jni_value_);

    /** **/
    public long getaccum() {
         return _getaccum(this.object.pointer);
    }

    private native long _getaccum(long _pointer_);

    /** **/
    public void setaccum(long _jni_value_) {
        _setaccum(this.object.pointer, _jni_value_);
    }

    private native void _setaccum(long _pointer_, long _jni_value_);

    /** **/
    public long gethierarchicalLvl() {
         return _gethierarchicalLvl(this.object.pointer);
    }

    private native long _gethierarchicalLvl(long _pointer_);

    /** **/
    public void sethierarchicalLvl(long _jni_value_) {
        _sethierarchicalLvl(this.object.pointer, _jni_value_);
    }

    private native void _sethierarchicalLvl(long _pointer_, long _jni_value_);

}
protected static class ProfileStack extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileStack {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileStack(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileStack(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileStack(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ProfileStack() {
         super( new org.xbig.base.InstancePointer(__createProfileStack()), false);
    }

    private native static long __createProfileStack();

    /** **/
    public void assign(int num, org.ogre4j.IProfiler.IProfileInstance val) {
        _assign__ivOgre_Profiler_ProfileInstanceR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_Profiler_ProfileInstanceR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IProfiler.IProfileInstance back() {
         return new org.ogre4j.Profiler.ProfileInstance(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IProfiler.IProfileInstance front() {
         return new org.ogre4j.Profiler.ProfileInstance(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IProfiler.IProfileInstance val) {
        _push_back__Ogre_Profiler_ProfileInstanceR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_Profiler_ProfileInstanceR(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IProfiler.IProfileInstance val) {
        _push_front__Ogre_Profiler_ProfileInstanceR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_Profiler_ProfileInstanceR(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IProfiler.IProfileInstance val) {
        _remove__Ogre_Profiler_ProfileInstanceR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_Profiler_ProfileInstanceR(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class ProfileFrameList extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileFrameList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileFrameList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileFrameList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileFrameList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ProfileFrameList() {
         super( new org.xbig.base.InstancePointer(__createProfileFrameList()), false);
    }

    private native static long __createProfileFrameList();

    /** **/
    public void assign(int num, org.ogre4j.IProfiler.IProfileFrame val) {
        _assign__ivOgre_Profiler_ProfileFrameR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_Profiler_ProfileFrameR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IProfiler.IProfileFrame back() {
         return new org.ogre4j.Profiler.ProfileFrame(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IProfiler.IProfileFrame front() {
         return new org.ogre4j.Profiler.ProfileFrame(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IProfiler.IProfileFrame val) {
        _push_back__Ogre_Profiler_ProfileFrameR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_Profiler_ProfileFrameR(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IProfiler.IProfileFrame val) {
        _push_front__Ogre_Profiler_ProfileFrameR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_Profiler_ProfileFrameR(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IProfiler.IProfileFrame val) {
        _remove__Ogre_Profiler_ProfileFrameR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_Profiler_ProfileFrameR(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class ProfileHistoryList extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileHistoryList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileHistoryList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileHistoryList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileHistoryList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ProfileHistoryList() {
         super( new org.xbig.base.InstancePointer(__createProfileHistoryList()), false);
    }

    private native static long __createProfileHistoryList();

    /** **/
    public void assign(int num, org.ogre4j.IProfiler.IProfileHistory val) {
        _assign__ivOgre_Profiler_ProfileHistoryR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_Profiler_ProfileHistoryR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IProfiler.IProfileHistory back() {
         return new org.ogre4j.Profiler.ProfileHistory(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IProfiler.IProfileHistory front() {
         return new org.ogre4j.Profiler.ProfileHistory(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IProfiler.IProfileHistory val) {
        _push_back__Ogre_Profiler_ProfileHistoryR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_Profiler_ProfileHistoryR(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IProfiler.IProfileHistory val) {
        _push_front__Ogre_Profiler_ProfileHistoryR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_Profiler_ProfileHistoryR(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IProfiler.IProfileHistory val) {
        _remove__Ogre_Profiler_ProfileHistoryR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_Profiler_ProfileHistoryR(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
protected static class ProfileHistoryMap extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileHistoryMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileHistoryMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileHistoryMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileHistoryMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



      }
protected static class DisabledProfileMap extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IDisabledProfileMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public DisabledProfileMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected DisabledProfileMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public DisabledProfileMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public DisabledProfileMap() {
         super( new org.xbig.base.InstancePointer(__createDisabledProfileMap()), false);
    }

    private native static long __createDisabledProfileMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public BooleanPointer get(String key) {
         return new BooleanPointer(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, BooleanPointer value) {
        _insert__sRbr(this.object.pointer, key,  value.object.pointer);
    }

    private native void _insert__sRbr(long _pointer_, String key, long value);

}
protected static class ProfileBarList extends org.xbig.base.NativeObject implements org.ogre4j.IProfiler.IProfileBarList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ProfileBarList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ProfileBarList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ProfileBarList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ProfileBarList() {
         super( new org.xbig.base.InstancePointer(__createProfileBarList()), false);
    }

    private native static long __createProfileBarList();

    /** **/
    public void assign(int num, org.ogre4j.IOverlayElement val) {
        _assign__ivOgre_OverlayElementP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_OverlayElementP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IOverlayElement back() {
         return new org.ogre4j.OverlayElement(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IOverlayElement front() {
         return new org.ogre4j.OverlayElement(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IOverlayElement val) {
        _push_back__Ogre_OverlayElementP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_OverlayElementP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IOverlayElement val) {
        _push_front__Ogre_OverlayElementP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_OverlayElementP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IOverlayElement val) {
        _remove__Ogre_OverlayElementP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_OverlayElementP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Profiler(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Profiler(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Profiler(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Profiler() {
         super( new org.xbig.base.InstancePointer(__createProfiler()), false);
    }

    private native static long __createProfiler();

    /** 
    Sets the timer for the profiler **/
    public void setTimer(org.ogre4j.ITimer t) {
        _setTimer__Timerp(this.object.pointer, t.getInstancePointer().pointer);
    }

    private native void _setTimer__Timerp(long _pointer_, long t);

    /** 
    Retrieves the timer for the profiler **/
    public org.ogre4j.ITimer getTimer() {
         return new org.ogre4j.Timer(new InstancePointer(_getTimer(this.object.pointer)));
    }

    private native long _getTimer(long _pointer_);

    /** 
    Begins a profile **/
    public void beginProfile(String profileName) {
        _beginProfile__StringR(this.object.pointer, profileName);
    }

    private native void _beginProfile__StringR(long _pointer_, String profileName);

    /** 
    Ends a profile **/
    public void endProfile(String profileName) {
        _endProfile__StringR(this.object.pointer, profileName);
    }

    private native void _endProfile__StringR(long _pointer_, String profileName);

    /** 
    Sets whether this profiler is enabled. Only takes effect after the the frame has ended. **/
    public void setEnabled(boolean enabled) {
        _setEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Gets whether this profiler is enabled **/
    public boolean getEnabled() {
         return _getEnabled_const(this.object.pointer);
    }

    private native boolean _getEnabled_const(long _pointer_);

    /** 
    Enables a previously disabled profile **/
    public void enableProfile(String profileName) {
        _enableProfile__StringR(this.object.pointer, profileName);
    }

    private native void _enableProfile__StringR(long _pointer_, String profileName);

    /** 
    Disables a profile **/
    public void disableProfile(String profileName) {
        _disableProfile__StringR(this.object.pointer, profileName);
    }

    private native void _disableProfile__StringR(long _pointer_, String profileName);

    /** 
    Returns true if the specified profile reaches a new frame time maximum **/
    public boolean watchForMax(String profileName) {
         return _watchForMax__StringR(this.object.pointer, profileName);
    }

    private native boolean _watchForMax__StringR(long _pointer_, String profileName);

    /** 
    Returns true if the specified profile reaches a new frame time minimum **/
    public boolean watchForMin(String profileName) {
         return _watchForMin__StringR(this.object.pointer, profileName);
    }

    private native boolean _watchForMin__StringR(long _pointer_, String profileName);

    /** 
    Returns true if the specified profile goes over or under the given limit frame time **/
    public boolean watchForLimit(String profileName, float limit, boolean greaterThan) {
         return _watchForLimit__StringRRealvbv(this.object.pointer, profileName,  limit,  greaterThan);
    }

    private native boolean _watchForLimit__StringRRealvbv(long _pointer_, String profileName, float limit, boolean greaterThan);

    /** 
    Outputs current profile statistics to the log **/
    public void logResults() {
        _logResults(this.object.pointer);
    }

    private native void _logResults(long _pointer_);

    /** 
    Clears the profiler statistics **/
    public void reset() {
        _reset(this.object.pointer);
    }

    private native void _reset(long _pointer_);

    /** 
    Sets the  so the display of results are updated ever n frames **/
    public void setUpdateDisplayFrequency(long freq) {
        _setUpdateDisplayFrequency__uintv(this.object.pointer, freq);
    }

    private native void _setUpdateDisplayFrequency__uintv(long _pointer_, long freq);

    /** 
    Gets the frequency that the  display is updated **/
    public long getUpdateDisplayFrequency() {
         return _getUpdateDisplayFrequency_const(this.object.pointer);
    }

    private native long _getUpdateDisplayFrequency_const(long _pointer_);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IProfiler getSingleton() {
         return new org.ogre4j.Profiler(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.IProfiler getSingletonPtr() {
         return new org.ogre4j.Profiler(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

}
