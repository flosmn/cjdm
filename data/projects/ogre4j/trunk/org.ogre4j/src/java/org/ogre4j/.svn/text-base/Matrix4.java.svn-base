/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Matrix4 extends org.xbig.base.NativeObject implements org.ogre4j.IMatrix4 {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Matrix4(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Matrix4(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Matrix4(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Default constructor. **/
    public Matrix4() {
         super( new org.xbig.base.InstancePointer(__createMatrix4()), false);
    }

    private native static long __createMatrix4();

    /** **/
    public Matrix4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) {
         super( new org.xbig.base.InstancePointer(__createMatrix4__RealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealv( m00,  m01,  m02,  m03,  m10,  m11,  m12,  m13,  m20,  m21,  m22,  m23,  m30,  m31,  m32,  m33)), false);
    }

    private native static long __createMatrix4__RealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealv(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33);

    /** 
    Creates a standard 4x4 transformation matrix with a zero translation part from a rotation/scaling 3x3 matrix. **/
    public Matrix4(org.ogre4j.IMatrix3 m3x3) {
         super( new org.xbig.base.InstancePointer(__createMatrix4__Matrix3R( m3x3.getInstancePointer().pointer)), false);
    }

    private native static long __createMatrix4__Matrix3R(long m3x3);

    /** 
    Creates a standard 4x4 transformation matrix with a zero translation part from a rotation/scaling . **/
    public Matrix4(org.ogre4j.IQuaternion rot) {
         super( new org.xbig.base.InstancePointer(__createMatrix4__QuaternionR( rot.getInstancePointer().pointer)), false);
    }

    private native static long __createMatrix4__QuaternionR(long rot);

    /** **/
    public FloatPointer operatorIndex(int iRow) {
         return new FloatPointer(new InstancePointer(_operatorIndex__iv(this.object.pointer, iRow)));
    }

    private native long _operatorIndex__iv(long _pointer_, int iRow);

    /** **/
    public FloatPointer operatorIndex_const(int iRow) {
         return new FloatPointer(new InstancePointer(_operatorIndex_const__iv_const(this.object.pointer, iRow)));
    }

    private native long _operatorIndex_const__iv_const(long _pointer_, int iRow);

    /** **/
    public void concatenate(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_concatenate__Matrix4R_const(this.object.pointer, m2.getInstancePointer().pointer)), false);
    }

    private native long _concatenate__Matrix4R_const(long _pointer_, long m2);

    /** 
    Matrix concatenation using '*'. **/
    public void operatorMultiplication(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Matrix4R_const(this.object.pointer, m2.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__Matrix4R_const(long _pointer_, long m2);

    /** 
    Vector transformation using '*'. **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 v) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Vector3R_const(this.object.pointer, v.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__Vector3R_const(long _pointer_, long v);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector4 returnValue, org.ogre4j.IVector4 v) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Vector4R_const(this.object.pointer, v.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__Vector4R_const(long _pointer_, long v);

    /** **/
    public void operatorMultiplication(org.ogre4j.IPlane returnValue, org.ogre4j.IPlane p) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__PlaneR_const(this.object.pointer, p.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__PlaneR_const(long _pointer_, long p);

    /** 
    Matrix addition. **/
    public void operatorAddition(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorAddition__Matrix4R_const(this.object.pointer, m2.getInstancePointer().pointer)), false);
    }

    private native long _operatorAddition__Matrix4R_const(long _pointer_, long m2);

    /** 
    Matrix subtraction. **/
    public void operatorSubtraction(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction__Matrix4R_const(this.object.pointer, m2.getInstancePointer().pointer)), false);
    }

    private native long _operatorSubtraction__Matrix4R_const(long _pointer_, long m2);

    /** 
    Tests 2 matrices for equality. **/
    public boolean operatorEqual(org.ogre4j.IMatrix4 m2) {
         return _operatorEqual__Matrix4R_const(this.object.pointer, m2.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__Matrix4R_const(long _pointer_, long m2);

    /** 
    Tests 2 matrices for inequality. **/
    public boolean operatorNotEqual(org.ogre4j.IMatrix4 m2) {
         return _operatorNotEqual__Matrix4R_const(this.object.pointer, m2.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__Matrix4R_const(long _pointer_, long m2);

    /** 
    Assignment from 3x3 matrix. **/
    public void operatorAssignment(org.ogre4j.IMatrix3 mat3) {
        _operatorAssignment__Matrix3R(this.object.pointer, mat3.getInstancePointer().pointer);
    }

    private native void _operatorAssignment__Matrix3R(long _pointer_, long mat3);

    /** **/
    public void transpose(org.ogre4j.IMatrix4 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_transpose_const(this.object.pointer)), false);
    }

    private native long _transpose_const(long _pointer_);

    /** 
    Sets the translation transformation part of the matrix. **/
    public void setTrans(org.ogre4j.IVector3 v) {
        _setTrans__Vector3R(this.object.pointer, v.getInstancePointer().pointer);
    }

    private native void _setTrans__Vector3R(long _pointer_, long v);

    /** 
    Extracts the translation transformation part of the matrix. **/
    public void getTrans(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTrans_const(this.object.pointer)), false);
    }

    private native long _getTrans_const(long _pointer_);

    /** 
    Builds a translation matrix **/
    public void makeTrans(org.ogre4j.IVector3 v) {
        _makeTrans__Vector3R(this.object.pointer, v.getInstancePointer().pointer);
    }

    private native void _makeTrans__Vector3R(long _pointer_, long v);

    /** **/
    public void makeTrans(float tx, float ty, float tz) {
        _makeTrans__RealvRealvRealv(this.object.pointer, tx,  ty,  tz);
    }

    private native void _makeTrans__RealvRealvRealv(long _pointer_, float tx, float ty, float tz);

    /** 
    Sets the scale part of the matrix. **/
    public void setScale(org.ogre4j.IVector3 v) {
        _setScale__Vector3R(this.object.pointer, v.getInstancePointer().pointer);
    }

    private native void _setScale__Vector3R(long _pointer_, long v);

    /** 
    Extracts the rotation / scaling part of the Matrix as a 3x3 matrix. **/
    public void extract3x3Matrix(org.ogre4j.IMatrix3 m3x3) {
        _extract3x3Matrix__Matrix3r_const(this.object.pointer, m3x3.getInstancePointer().pointer);
    }

    private native void _extract3x3Matrix__Matrix3r_const(long _pointer_, long m3x3);

    /** 
    Determines if this matrix involves a scaling. **/
    public boolean hasScale() {
         return _hasScale_const(this.object.pointer);
    }

    private native boolean _hasScale_const(long _pointer_);

    /** 
    Determines if this matrix involves a negative scaling. **/
    public boolean hasNegativeScale() {
         return _hasNegativeScale_const(this.object.pointer);
    }

    private native boolean _hasNegativeScale_const(long _pointer_);

    /** 
    Extracts the rotation / scaling part as a quaternion from the Matrix. **/
    public void extractQuaternion(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_extractQuaternion_const(this.object.pointer)), false);
    }

    private native long _extractQuaternion_const(long _pointer_);

    /** **/
    public void operatorMultiplication(org.ogre4j.IMatrix4 returnValue, float scalar) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Realv_const(this.object.pointer, scalar)), false);
    }

    private native long _operatorMultiplication__Realv_const(long _pointer_, float scalar);

    /** **/
    public void adjoint(org.ogre4j.IMatrix4 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_adjoint_const(this.object.pointer)), false);
    }

    private native long _adjoint_const(long _pointer_);

    /** **/
    public float determinant() {
         return _determinant_const(this.object.pointer);
    }

    private native float _determinant_const(long _pointer_);

    /** **/
    public void inverse(org.ogre4j.IMatrix4 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_inverse_const(this.object.pointer)), false);
    }

    private native long _inverse_const(long _pointer_);

    /** 
    Building a  from orientation / scale / position. **/
    public void makeTransform(org.ogre4j.IVector3 position, org.ogre4j.IVector3 scale, org.ogre4j.IQuaternion orientation) {
        _makeTransform__Vector3RVector3RQuaternionR(this.object.pointer, position.getInstancePointer().pointer,  scale.getInstancePointer().pointer,  orientation.getInstancePointer().pointer);
    }

    private native void _makeTransform__Vector3RVector3RQuaternionR(long _pointer_, long position, long scale, long orientation);

    /** 
    Building an inverse  from orientation / scale / position. **/
    public void makeInverseTransform(org.ogre4j.IVector3 position, org.ogre4j.IVector3 scale, org.ogre4j.IQuaternion orientation) {
        _makeInverseTransform__Vector3RVector3RQuaternionR(this.object.pointer, position.getInstancePointer().pointer,  scale.getInstancePointer().pointer,  orientation.getInstancePointer().pointer);
    }

    private native void _makeInverseTransform__Vector3RVector3RQuaternionR(long _pointer_, long position, long scale, long orientation);

    /** 
    Check whether or not the matrix is affine matrix. **/
    public boolean isAffine() {
         return _isAffine_const(this.object.pointer);
    }

    private native boolean _isAffine_const(long _pointer_);

    /** 
    Returns the inverse of the affine matrix. **/
    public void inverseAffine(org.ogre4j.IMatrix4 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_inverseAffine_const(this.object.pointer)), false);
    }

    private native long _inverseAffine_const(long _pointer_);

    /** 
    Concatenate two affine matrix. **/
    public void concatenateAffine(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_concatenateAffine__Matrix4R_const(this.object.pointer, m2.getInstancePointer().pointer)), false);
    }

    private native long _concatenateAffine__Matrix4R_const(long _pointer_, long m2);

    /** 
    3-D Vector transformation specially for affine matrix. **/
    public void transformAffine(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 v) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_transformAffine__Vector3R_const(this.object.pointer, v.getInstancePointer().pointer)), false);
    }

    private native long _transformAffine__Vector3R_const(long _pointer_, long v);

    /** 
    4-D Vector transformation specially for affine matrix. **/
    public void transformAffine(org.ogre4j.IVector4 returnValue, org.ogre4j.IVector4 v) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_transformAffine__Vector4R_const(this.object.pointer, v.getInstancePointer().pointer)), false);
    }

    private native long _transformAffine__Vector4R_const(long _pointer_, long v);

    /** 
    Gets a translation matrix. **/
    public static void getTrans(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IVector3 v) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTrans__Vector3R( v.getInstancePointer().pointer)), false);
    }

    private native static long _getTrans__Vector3R(long v);

    /** 
    Gets a translation matrix - variation for not using a vector. **/
    public static void getTrans(org.ogre4j.IMatrix4 returnValue, float t_x, float t_y, float t_z) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTrans__RealvRealvRealv( t_x,  t_y,  t_z)), false);
    }

    private native static long _getTrans__RealvRealvRealv(float t_x, float t_y, float t_z);

    /** 
    Gets a scale matrix. **/
    public static void getScale(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IVector3 v) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getScale__Vector3R( v.getInstancePointer().pointer)), false);
    }

    private native static long _getScale__Vector3R(long v);

    /** 
    Gets a scale matrix - variation for not using a vector. **/
    public static void getScale(org.ogre4j.IMatrix4 returnValue, float s_x, float s_y, float s_z) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getScale__RealvRealvRealv( s_x,  s_y,  s_z)), false);
    }

    private native static long _getScale__RealvRealvRealv(float s_x, float s_y, float s_z);

















    /** **/
    public static org.ogre4j.IMatrix4 getZERO() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getZERO()));
    }

    private native static long _getZERO();

    /** **/
    public static org.ogre4j.IMatrix4 getIDENTITY() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getIDENTITY()));
    }

    private native static long _getIDENTITY();

    /** **/
    public static org.ogre4j.IMatrix4 getCLIPSPACE2DTOIMAGESPACE() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getCLIPSPACE2DTOIMAGESPACE()));
    }

    private native static long _getCLIPSPACE2DTOIMAGESPACE();

}
