/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IEdgeListBuilder extends INativeObject {

public static interface ICommonVertex extends INativeObject {

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public int getindex();

    /** **/
    public void setindex(int _jni_value_);

    /** **/
    public int getvertexSet();

    /** **/
    public void setvertexSet(int _jni_value_);

    /** **/
    public int getindexSet();

    /** **/
    public void setindexSet(int _jni_value_);

    /** **/
    public int getoriginalIndex();

    /** **/
    public void setoriginalIndex(int _jni_value_);

}
public static interface IGeometry extends INativeObject {

    /** **/
    public int getvertexSet();

    /** **/
    public void setvertexSet(int _jni_value_);

    /** **/
    public int getindexSet();

    /** **/
    public void setindexSet(int _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData();

    /** **/
    public org.ogre4j.RenderOperation.OperationType getopType();

    /** **/
    public void setopType(org.ogre4j.RenderOperation.OperationType _jni_value_);

}
public static interface IgeometryLess extends INativeObject {

    /** **/
    public boolean operatorFunctionCall(org.ogre4j.IEdgeListBuilder.IGeometry a, org.ogre4j.IEdgeListBuilder.IGeometry b);

}
public static interface IvectorLess extends INativeObject {

    /** **/
    public boolean operatorFunctionCall(org.ogre4j.IVector3 a, org.ogre4j.IVector3 b);

}
public interface IVertexDataList extends INativeObject, org.std.Ivector< org.ogre4j.IVertexData > {

    /** **/
    public void assign(int num, org.ogre4j.IVertexData val);

    /** **/
    public org.ogre4j.IVertexData at(int loc);

    /** **/
    public org.ogre4j.IVertexData back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IVertexData front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IVertexData val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IGeometryList extends INativeObject, org.std.Ivector< org.ogre4j.IEdgeListBuilder.IGeometry > {

    /** **/
    public void assign(int num, org.ogre4j.IEdgeListBuilder.IGeometry val);

    /** **/
    public org.ogre4j.IEdgeListBuilder.IGeometry at(int loc);

    /** **/
    public org.ogre4j.IEdgeListBuilder.IGeometry back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IEdgeListBuilder.IGeometry front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IEdgeListBuilder.IGeometry val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ICommonVertexList extends INativeObject, org.std.Ivector< org.ogre4j.IEdgeListBuilder.ICommonVertex > {

    /** **/
    public void assign(int num, org.ogre4j.IEdgeListBuilder.ICommonVertex val);

    /** **/
    public org.ogre4j.IEdgeListBuilder.ICommonVertex at(int loc);

    /** **/
    public org.ogre4j.IEdgeListBuilder.ICommonVertex back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IEdgeListBuilder.ICommonVertex front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IEdgeListBuilder.ICommonVertex val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ICommonVertexMap extends INativeObject, org.std.Imap< org.ogre4j.IVector3, Integer > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IVector3 key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IVector3 key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public IntegerPointer get(org.ogre4j.IVector3 key);

    /** **/
    public void insert(org.ogre4j.IVector3 key, IntegerPointer value);

}
public interface IEdgeMap extends INativeObject, org.std.Imultimap< org.std.Ipair< Integer, Integer >, org.std.Ipair< Integer, Integer > > {

    /** **/
    public void clear();

    /** **/
    public int count(org.std.Ipair< Integer, Integer > key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.std.Ipair< Integer, Integer > key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
    /** 
    Add a set of vertex geometry data to the edge builder. **/
    public void addVertexData(org.ogre4j.IVertexData vertexData);

    /** 
    Add a set of index geometry data to the edge builder. **/
    public void addIndexData(org.ogre4j.IIndexData indexData, int vertexSet, org.ogre4j.RenderOperation.OperationType opType);

    /** 
    Builds the edge information based on the information built up so far. **/
    public org.ogre4j.IEdgeData build();

    /** **/
    public void log(org.ogre4j.ILog l);

}
