/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Camera extends org.xbig.base.NativeObject implements org.ogre4j.ICamera {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Camera(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Camera(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Camera(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Standard constructor. **/
    public Camera(String name, org.ogre4j.ISceneManager sm) {
         super( new org.xbig.base.InstancePointer(__createCamera__StringRSceneManagerp( name,  sm.getInstancePointer().pointer)), false);
    }

    private native static long __createCamera__StringRSceneManagerp(String name, long sm);

    /** 
    Returns a pointer to the  this camera is rendering through. **/
    public org.ogre4j.ISceneManager getSceneManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(_getSceneManager_const(this.object.pointer)));
    }

    private native long _getSceneManager_const(long _pointer_);

    /** 
    Gets the camera's name. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Sets the level of rendering detail required from this camera. **/
    public void setPolygonMode(org.ogre4j.PolygonMode sd) {
        _setPolygonMode__PolygonModev(this.object.pointer, sd.getValue());
    }

    private native void _setPolygonMode__PolygonModev(long _pointer_, int sd);

    /** 
    Retrieves the level of detail that the camera will render. **/
    public org.ogre4j.PolygonMode getPolygonMode() {
         return org.ogre4j.PolygonMode.toEnum(_getPolygonMode_const(this.object.pointer));
    }

    private native int _getPolygonMode_const(long _pointer_);

    /** 
    Sets the camera's position. **/
    public void setPosition(float x, float y, float z) {
        _setPosition__RealvRealvRealv(this.object.pointer, x,  y,  z);
    }

    private native void _setPosition__RealvRealvRealv(long _pointer_, float x, float y, float z);

    /** 
    Sets the camera's position. **/
    public void setPosition(org.ogre4j.IVector3 vec) {
        _setPosition__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _setPosition__Vector3R(long _pointer_, long vec);

    /** 
    Retrieves the camera's position. **/
    public org.ogre4j.IVector3 getPosition() {
         return new org.ogre4j.Vector3(new InstancePointer(_getPosition_const(this.object.pointer)));
    }

    private native long _getPosition_const(long _pointer_);

    /** 
    Moves the camera's position by the vector offset provided along world axes. **/
    public void move(org.ogre4j.IVector3 vec) {
        _move__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _move__Vector3R(long _pointer_, long vec);

    /** 
    Moves the camera's position by the vector offset provided along it's own axes (relative to orientation). **/
    public void moveRelative(org.ogre4j.IVector3 vec) {
        _moveRelative__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _moveRelative__Vector3R(long _pointer_, long vec);

    /** 
    Sets the camera's direction vector. **/
    public void setDirection(float x, float y, float z) {
        _setDirection__RealvRealvRealv(this.object.pointer, x,  y,  z);
    }

    private native void _setDirection__RealvRealvRealv(long _pointer_, float x, float y, float z);

    /** 
    Sets the camera's direction vector. **/
    public void setDirection(org.ogre4j.IVector3 vec) {
        _setDirection__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _setDirection__Vector3R(long _pointer_, long vec);

    /** **/
    public void getDirection(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getDirection_const(this.object.pointer)), false);
    }

    private native long _getDirection_const(long _pointer_);

    /** 
    Gets the camera's up vector. **/
    public void getUp(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getUp_const(this.object.pointer)), false);
    }

    private native long _getUp_const(long _pointer_);

    /** 
    Gets the camera's right vector. **/
    public void getRight(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getRight_const(this.object.pointer)), false);
    }

    private native long _getRight_const(long _pointer_);

    /** 
    Points the camera at a location in worldspace. **/
    public void lookAt(org.ogre4j.IVector3 targetPoint) {
        _lookAt__Vector3R(this.object.pointer, targetPoint.getInstancePointer().pointer);
    }

    private native void _lookAt__Vector3R(long _pointer_, long targetPoint);

    /** 
    Points the camera at a location in worldspace. **/
    public void lookAt(float x, float y, float z) {
        _lookAt__RealvRealvRealv(this.object.pointer, x,  y,  z);
    }

    private native void _lookAt__RealvRealvRealv(long _pointer_, float x, float y, float z);

    /** 
    Rolls the camera anticlockwise, around its local z axis. **/
    public void roll(org.ogre4j.IRadian angle) {
        _roll__RadianR(this.object.pointer, angle.getInstancePointer().pointer);
    }

    private native void _roll__RadianR(long _pointer_, long angle);

    /** 
    Rotates the camera anticlockwise around it's local y axis. **/
    public void yaw(org.ogre4j.IRadian angle) {
        _yaw__RadianR(this.object.pointer, angle.getInstancePointer().pointer);
    }

    private native void _yaw__RadianR(long _pointer_, long angle);

    /** 
    Pitches the camera up/down anticlockwise around it's local z axis. **/
    public void pitch(org.ogre4j.IRadian angle) {
        _pitch__RadianR(this.object.pointer, angle.getInstancePointer().pointer);
    }

    private native void _pitch__RadianR(long _pointer_, long angle);

    /** 
    Rotate the camera around an arbitrary axis. **/
    public void rotate(org.ogre4j.IVector3 axis, org.ogre4j.IRadian angle) {
        _rotate__Vector3RRadianR(this.object.pointer, axis.getInstancePointer().pointer,  angle.getInstancePointer().pointer);
    }

    private native void _rotate__Vector3RRadianR(long _pointer_, long axis, long angle);

    /** 
    Rotate the camera around an arbitrary axis using a . **/
    public void rotate(org.ogre4j.IQuaternion q) {
        _rotate__QuaternionR(this.object.pointer, q.getInstancePointer().pointer);
    }

    private native void _rotate__QuaternionR(long _pointer_, long q);

    /** 
    Tells the camera whether to yaw around it's own local Y axis or a fixed axis of choice. **/
    public void setFixedYawAxis(boolean useFixed, org.ogre4j.IVector3 fixedAxis) {
        _setFixedYawAxis__bvVector3R(this.object.pointer, useFixed,  fixedAxis.getInstancePointer().pointer);
    }

    private native void _setFixedYawAxis__bvVector3R(long _pointer_, boolean useFixed, long fixedAxis);

    /** 
    Returns the camera's current orientation. **/
    public org.ogre4j.IQuaternion getOrientation() {
         return new org.ogre4j.Quaternion(new InstancePointer(_getOrientation_const(this.object.pointer)));
    }

    private native long _getOrientation_const(long _pointer_);

    /** 
    Sets the camera's orientation. **/
    public void setOrientation(org.ogre4j.IQuaternion q) {
        _setOrientation__QuaternionR(this.object.pointer, q.getInstancePointer().pointer);
    }

    private native void _setOrientation__QuaternionR(long _pointer_, long q);

    /** 
    Tells the  to contact the  to render from it's viewpoint. **/
    public void _renderScene(org.ogre4j.IViewport vp, boolean includeOverlays) {
        __renderScene__Viewportpbv(this.object.pointer, vp.getInstancePointer().pointer,  includeOverlays);
    }

    private native void __renderScene__Viewportpbv(long _pointer_, long vp, boolean includeOverlays);

    /** 
    Internal method to notify camera of the visible faces in the last render. **/
    public void _notifyRenderedFaces(long numfaces) {
        __notifyRenderedFaces__Iv(this.object.pointer, numfaces);
    }

    private native void __notifyRenderedFaces__Iv(long _pointer_, long numfaces);

    /** 
    Internal method to notify camera of the visible batches in the last render. **/
    public void _notifyRenderedBatches(long numbatches) {
        __notifyRenderedBatches__Iv(this.object.pointer, numbatches);
    }

    private native void __notifyRenderedBatches__Iv(long _pointer_, long numbatches);

    /** 
    Internal method to retrieve the number of visible faces in the last render. **/
    public long _getNumRenderedFaces() {
         return __getNumRenderedFaces_const(this.object.pointer);
    }

    private native long __getNumRenderedFaces_const(long _pointer_);

    /** 
    Internal method to retrieve the number of visible batches in the last render. **/
    public long _getNumRenderedBatches() {
         return __getNumRenderedBatches_const(this.object.pointer);
    }

    private native long __getNumRenderedBatches_const(long _pointer_);

    /** 
    Gets the derived orientation of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public org.ogre4j.IQuaternion getDerivedOrientation() {
         return new org.ogre4j.Quaternion(new InstancePointer(_getDerivedOrientation_const(this.object.pointer)));
    }

    private native long _getDerivedOrientation_const(long _pointer_);

    /** 
    Gets the derived position of the camera, including any translation inherited from a node attachment and reflection matrix. **/
    public org.ogre4j.IVector3 getDerivedPosition() {
         return new org.ogre4j.Vector3(new InstancePointer(_getDerivedPosition_const(this.object.pointer)));
    }

    private native long _getDerivedPosition_const(long _pointer_);

    /** 
    Gets the derived direction vector of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public void getDerivedDirection(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getDerivedDirection_const(this.object.pointer)), false);
    }

    private native long _getDerivedDirection_const(long _pointer_);

    /** 
    Gets the derived up vector of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public void getDerivedUp(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getDerivedUp_const(this.object.pointer)), false);
    }

    private native long _getDerivedUp_const(long _pointer_);

    /** 
    Gets the derived right vector of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public void getDerivedRight(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getDerivedRight_const(this.object.pointer)), false);
    }

    private native long _getDerivedRight_const(long _pointer_);

    /** 
    Gets the real world orientation of the camera, including any rotation inherited from a node attachment **/
    public org.ogre4j.IQuaternion getRealOrientation() {
         return new org.ogre4j.Quaternion(new InstancePointer(_getRealOrientation_const(this.object.pointer)));
    }

    private native long _getRealOrientation_const(long _pointer_);

    /** 
    Gets the real world position of the camera, including any translation inherited from a node attachment. **/
    public org.ogre4j.IVector3 getRealPosition() {
         return new org.ogre4j.Vector3(new InstancePointer(_getRealPosition_const(this.object.pointer)));
    }

    private native long _getRealPosition_const(long _pointer_);

    /** 
    Gets the real world direction vector of the camera, including any rotation inherited from a node attachment. **/
    public void getRealDirection(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getRealDirection_const(this.object.pointer)), false);
    }

    private native long _getRealDirection_const(long _pointer_);

    /** 
    Gets the real world up vector of the camera, including any rotation inherited from a node attachment. **/
    public void getRealUp(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getRealUp_const(this.object.pointer)), false);
    }

    private native long _getRealUp_const(long _pointer_);

    /** 
    Gets the real world right vector of the camera, including any rotation inherited from a node attachment. **/
    public void getRealRight(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getRealRight_const(this.object.pointer)), false);
    }

    private native long _getRealRight_const(long _pointer_);

    /** 
    Overridden from **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** 
    Enables / disables automatic tracking of a . **/
    public void setAutoTracking(boolean enabled, org.ogre4j.ISceneNode target, org.ogre4j.IVector3 offset) {
        _setAutoTracking__bvSceneNodepVector3R(this.object.pointer, enabled,  target.getInstancePointer().pointer,  offset.getInstancePointer().pointer);
    }

    private native void _setAutoTracking__bvSceneNodepVector3R(long _pointer_, boolean enabled, long target, long offset);

    /** 
    Sets the level-of-detail factor for this . **/
    public void setLodBias(float factor) {
        _setLodBias__Realv(this.object.pointer, factor);
    }

    private native void _setLodBias__Realv(long _pointer_, float factor);

    /** 
    Returns the level-of-detail bias factor currently applied to this camera. **/
    public float getLodBias() {
         return _getLodBias_const(this.object.pointer);
    }

    private native float _getLodBias_const(long _pointer_);

    /** 
    Get a pointer to the camera which should be used to determine LOD settings. **/
    public void setLodCamera(org.ogre4j.ICamera lodCam) {
        _setLodCamera__CameraP(this.object.pointer, lodCam.getInstancePointer().pointer);
    }

    private native void _setLodCamera__CameraP(long _pointer_, long lodCam);

    /** 
    Get a pointer to the camera which should be used to determine LOD settings. **/
    public org.ogre4j.ICamera getLodCamera() {
         return new org.ogre4j.Camera(new InstancePointer(_getLodCamera_const(this.object.pointer)));
    }

    private native long _getLodCamera_const(long _pointer_);

    /** 
    Gets a world space ray as cast from the camera through a viewport position. **/
    public void getCameraToViewportRay(org.ogre4j.IRay returnValue, float screenx, float screeny) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getCameraToViewportRay__RealvRealv_const(this.object.pointer, screenx,  screeny)), false);
    }

    private native long _getCameraToViewportRay__RealvRealv_const(long _pointer_, float screenx, float screeny);

    /** 
    Gets a world space ray as cast from the camera through a viewport position. **/
    public void getCameraToViewportRay(float screenx, float screeny, org.ogre4j.IRay outRay) {
        _getCameraToViewportRay__RealvRealvRayp_const(this.object.pointer, screenx,  screeny,  outRay.getInstancePointer().pointer);
    }

    private native void _getCameraToViewportRay__RealvRealvRayp_const(long _pointer_, float screenx, float screeny, long outRay);

    /** 
    Gets a world-space list of planes enclosing a volume based on a viewport rectangle. **/
    public void getCameraToViewportBoxVolume(org.ogre4j.IPlaneBoundedVolume returnValue, float screenLeft, float screenTop, float screenRight, float screenBottom, boolean includeFarPlane) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getCameraToViewportBoxVolume__RealvRealvRealvRealvbv(this.object.pointer, screenLeft,  screenTop,  screenRight,  screenBottom,  includeFarPlane)), false);
    }

    private native long _getCameraToViewportBoxVolume__RealvRealvRealvRealvbv(long _pointer_, float screenLeft, float screenTop, float screenRight, float screenBottom, boolean includeFarPlane);

    /** 
    Gets a world-space list of planes enclosing a volume based on a viewport rectangle. **/
    public void getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, org.ogre4j.IPlaneBoundedVolume outVolume, boolean includeFarPlane) {
        _getCameraToViewportBoxVolume__RealvRealvRealvRealvPlaneBoundedVolumepbv(this.object.pointer, screenLeft,  screenTop,  screenRight,  screenBottom,  outVolume.getInstancePointer().pointer,  includeFarPlane);
    }

    private native void _getCameraToViewportBoxVolume__RealvRealvRealvRealvPlaneBoundedVolumepbv(long _pointer_, float screenLeft, float screenTop, float screenRight, float screenBottom, long outVolume, boolean includeFarPlane);

    /** 
    Internal method for OGRE to use for LOD calculations. **/
    public float _getLodBiasInverse() {
         return __getLodBiasInverse_const(this.object.pointer);
    }

    private native float __getLodBiasInverse_const(long _pointer_);

    /** 
    Internal method used by OGRE to update auto-tracking cameras. **/
    public void _autoTrack() {
        __autoTrack(this.object.pointer);
    }

    private native void __autoTrack(long _pointer_);

    /** 
    Sets the viewing window inside of viewport. **/
    public void setWindow(float Left, float Top, float Right, float Bottom) {
        _setWindow__RealvRealvRealvRealv(this.object.pointer, Left,  Top,  Right,  Bottom);
    }

    private native void _setWindow__RealvRealvRealvRealv(long _pointer_, float Left, float Top, float Right, float Bottom);

    /** **/
    public void resetWindow() {
        _resetWindow(this.object.pointer);
    }

    private native void _resetWindow(long _pointer_);

    /** **/
    public boolean isWindowSet() {
         return _isWindowSet_const(this.object.pointer);
    }

    private native boolean _isWindowSet_const(long _pointer_);

    /** **/
    public void getWindowPlanes(org.std.Ivector< org.ogre4j.IPlane > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getWindowPlanes_const(this.object.pointer)), true);
    }

    private native long _getWindowPlanes_const(long _pointer_);

    /** 
    Overridden from **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** 
    Get the auto tracking target for this camera, if any. **/
    public org.ogre4j.ISceneNode getAutoTrackTarget() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getAutoTrackTarget_const(this.object.pointer)));
    }

    private native long _getAutoTrackTarget_const(long _pointer_);

    /** 
    Get the auto tracking offset for this camera, if it is auto tracking. **/
    public org.ogre4j.IVector3 getAutoTrackOffset() {
         return new org.ogre4j.Vector3(new InstancePointer(_getAutoTrackOffset_const(this.object.pointer)));
    }

    private native long _getAutoTrackOffset_const(long _pointer_);

    /** 
    Get the last viewport which was attached to this camera. **/
    public org.ogre4j.IViewport getViewport() {
         return new org.ogre4j.Viewport(new InstancePointer(_getViewport_const(this.object.pointer)));
    }

    private native long _getViewport_const(long _pointer_);

    /** 
    Notifies this camera that a viewport is using it. **/
    public void _notifyViewport(org.ogre4j.IViewport viewport) {
        __notifyViewport__Viewportp(this.object.pointer, viewport.getInstancePointer().pointer);
    }

    private native void __notifyViewport__Viewportp(long _pointer_, long viewport);

    /** 
    If set to true a viewport that owns this frustum will be able to recalculate the aspect ratio whenever the frustum is resized. **/
    public void setAutoAspectRatio(boolean autoratio) {
        _setAutoAspectRatio__bv(this.object.pointer, autoratio);
    }

    private native void _setAutoAspectRatio__bv(long _pointer_, boolean autoratio);

    /** 
    Retrieves if AutoAspectRatio is currently set or not **/
    public boolean getAutoAspectRatio() {
         return _getAutoAspectRatio_const(this.object.pointer);
    }

    private native boolean _getAutoAspectRatio_const(long _pointer_);

    /** 
    Tells the camera to use a separate  instance to perform culling. **/
    public void setCullingFrustum(org.ogre4j.IFrustum frustum) {
        _setCullingFrustum__Frustump(this.object.pointer, frustum.getInstancePointer().pointer);
    }

    private native void _setCullingFrustum__Frustump(long _pointer_, long frustum);

    /** 
    Returns the custom culling frustum in use. **/
    public org.ogre4j.IFrustum getCullingFrustum() {
         return new org.ogre4j.Frustum(new InstancePointer(_getCullingFrustum_const(this.object.pointer)));
    }

    private native long _getCullingFrustum_const(long _pointer_);

    /** 
    Forward projects frustum rays to find forward intersection with plane. **/
    public void forwardIntersect(org.ogre4j.IPlane worldPlane, org.std.Ivector< org.ogre4j.IVector4 > intersect3d) {
        _forwardIntersect__PlaneRstd_vector__Vector4__p_const(this.object.pointer, worldPlane.getInstancePointer().pointer,  intersect3d.getInstancePointer().pointer);
    }

    private native void _forwardIntersect__PlaneRstd_vector__Vector4__p_const(long _pointer_, long worldPlane, long intersect3d);

    /** **/
    public boolean isVisible(org.ogre4j.IAxisAlignedBox bound, EnumPointer < org.ogre4j.FrustumPlane > culledBy) {
         return _isVisible__AxisAlignedBoxRFrustumPlanep_const(this.object.pointer, bound.getInstancePointer().pointer,  culledBy.getInstancePointer().pointer);
    }

    private native boolean _isVisible__AxisAlignedBoxRFrustumPlanep_const(long _pointer_, long bound, long culledBy);

    /** **/
    public boolean isVisible(org.ogre4j.ISphere bound, EnumPointer < org.ogre4j.FrustumPlane > culledBy) {
         return _isVisible__SphereRFrustumPlanep_const(this.object.pointer, bound.getInstancePointer().pointer,  culledBy.getInstancePointer().pointer);
    }

    private native boolean _isVisible__SphereRFrustumPlanep_const(long _pointer_, long bound, long culledBy);

    /** **/
    public boolean isVisible(org.ogre4j.IVector3 vert, EnumPointer < org.ogre4j.FrustumPlane > culledBy) {
         return _isVisible__Vector3RFrustumPlanep_const(this.object.pointer, vert.getInstancePointer().pointer,  culledBy.getInstancePointer().pointer);
    }

    private native boolean _isVisible__Vector3RFrustumPlanep_const(long _pointer_, long vert, long culledBy);

    /** **/
    public org.ogre4j.IVector3 getWorldSpaceCorners() {
         return new org.ogre4j.Vector3(new InstancePointer(_getWorldSpaceCorners_const(this.object.pointer)));
    }

    private native long _getWorldSpaceCorners_const(long _pointer_);

    /** **/
    public org.ogre4j.IPlane getFrustumPlane(int plane) {
         return new org.ogre4j.Plane(new InstancePointer(_getFrustumPlane__Hv_const(this.object.pointer, plane)));
    }

    private native long _getFrustumPlane__Hv_const(long _pointer_, int plane);

    /** **/
    public boolean projectSphere(org.ogre4j.ISphere sphere, FloatPointer left, FloatPointer top, FloatPointer right, FloatPointer bottom) {
         return _projectSphere__SphereRRealpRealpRealpRealp_const(this.object.pointer, sphere.getInstancePointer().pointer,  left.object.pointer,  top.object.pointer,  right.object.pointer,  bottom.object.pointer);
    }

    private native boolean _projectSphere__SphereRRealpRealpRealpRealp_const(long _pointer_, long sphere, long left, long top, long right, long bottom);

    /** **/
    public float getNearClipDistance() {
         return _getNearClipDistance_const(this.object.pointer);
    }

    private native float _getNearClipDistance_const(long _pointer_);

    /** **/
    public float getFarClipDistance() {
         return _getFarClipDistance_const(this.object.pointer);
    }

    private native float _getFarClipDistance_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 getViewMatrix() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getViewMatrix_const(this.object.pointer)));
    }

    private native long _getViewMatrix_const(long _pointer_);

    /** 
    Specialised version of getViewMatrix allowing caller to differentiate whether the custom culling frustum should be allowed or not. **/
    public org.ogre4j.IMatrix4 getViewMatrix(boolean ownFrustumOnly) {
         return new org.ogre4j.Matrix4(new InstancePointer(_getViewMatrix__bv_const(this.object.pointer, ownFrustumOnly)));
    }

    private native long _getViewMatrix__bv_const(long _pointer_, boolean ownFrustumOnly);

    /** 
    Set whether this camera should use the 'rendering distance' on objects to exclude distant objects from the final image. The default behaviour is to use it. **/
    public void setUseRenderingDistance(boolean use) {
        _setUseRenderingDistance__bv(this.object.pointer, use);
    }

    private native void _setUseRenderingDistance__bv(long _pointer_, boolean use);

    /** 
    Get whether this camera should use the 'rendering distance' on objects to exclude distant objects from the final image. **/
    public boolean getUseRenderingDistance() {
         return _getUseRenderingDistance_const(this.object.pointer);
    }

    private native boolean _getUseRenderingDistance_const(long _pointer_);

    /** 
    Synchronise core camera settings with another. **/
    public void synchroniseBaseSettingsWith(org.ogre4j.ICamera cam) {
        _synchroniseBaseSettingsWith__CameraP(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void _synchroniseBaseSettingsWith__CameraP(long _pointer_, long cam);

    /** 
    Get the derived position of this frustum. **/
    public org.ogre4j.IVector3 getPositionForViewUpdate() {
         return new org.ogre4j.Vector3(new InstancePointer(_getPositionForViewUpdate_const(this.object.pointer)));
    }

    private native long _getPositionForViewUpdate_const(long _pointer_);

    /** 
    Get the derived orientation of this frustum. **/
    public org.ogre4j.IQuaternion getOrientationForViewUpdate() {
         return new org.ogre4j.Quaternion(new InstancePointer(_getOrientationForViewUpdate_const(this.object.pointer)));
    }

    private native long _getOrientationForViewUpdate_const(long _pointer_);

    /** 
    Sets the Y-dimension Field Of View (FOV) of the frustum. **/
    public void setFOVy(org.ogre4j.IRadian fovy) {
        _setFOVy__RadianR(this.object.pointer, fovy.getInstancePointer().pointer);
    }

    private native void _setFOVy__RadianR(long _pointer_, long fovy);

    /** 
    Retrieves the frustums Y-dimension Field Of View (FOV). **/
    public org.ogre4j.IRadian getFOVy() {
         return new org.ogre4j.Radian(new InstancePointer(_getFOVy_const(this.object.pointer)));
    }

    private native long _getFOVy_const(long _pointer_);

    /** 
    Sets the position of the near clipping plane. **/
    public void setNearClipDistance(float nearDist) {
        _setNearClipDistance__Realv(this.object.pointer, nearDist);
    }

    private native void _setNearClipDistance__Realv(long _pointer_, float nearDist);

    /** 
    Sets the distance to the far clipping plane. **/
    public void setFarClipDistance(float farDist) {
        _setFarClipDistance__Realv(this.object.pointer, farDist);
    }

    private native void _setFarClipDistance__Realv(long _pointer_, float farDist);

    /** 
    Sets the aspect ratio for the frustum viewport. **/
    public void setAspectRatio(float ratio) {
        _setAspectRatio__Realv(this.object.pointer, ratio);
    }

    private native void _setAspectRatio__Realv(long _pointer_, float ratio);

    /** 
    Retreives the current aspect ratio. **/
    public float getAspectRatio() {
         return _getAspectRatio_const(this.object.pointer);
    }

    private native float _getAspectRatio_const(long _pointer_);

    /** 
    Sets frustum offsets, used in stereo rendering. **/
    public void setFrustumOffset(org.ogre4j.IVector2 offset) {
        _setFrustumOffset__Vector2R(this.object.pointer, offset.getInstancePointer().pointer);
    }

    private native void _setFrustumOffset__Vector2R(long _pointer_, long offset);

    /** 
    Sets frustum offsets, used in stereo rendering. **/
    public void setFrustumOffset(float horizontal, float vertical) {
        _setFrustumOffset__RealvRealv(this.object.pointer, horizontal,  vertical);
    }

    private native void _setFrustumOffset__RealvRealv(long _pointer_, float horizontal, float vertical);

    /** 
    Retrieves the frustum offsets. **/
    public org.ogre4j.IVector2 getFrustumOffset() {
         return new org.ogre4j.Vector2(new InstancePointer(_getFrustumOffset_const(this.object.pointer)));
    }

    private native long _getFrustumOffset_const(long _pointer_);

    /** 
    Sets frustum focal length (used in stereo rendering). **/
    public void setFocalLength(float focalLength) {
        _setFocalLength__Realv(this.object.pointer, focalLength);
    }

    private native void _setFocalLength__Realv(long _pointer_, float focalLength);

    /** 
    Returns focal length of frustum. **/
    public float getFocalLength() {
         return _getFocalLength_const(this.object.pointer);
    }

    private native float _getFocalLength_const(long _pointer_);

    /** 
    Manually set the extents of the frustum. **/
    public void setFrustumExtents(float left, float right, float top, float bottom) {
        _setFrustumExtents__RealvRealvRealvRealv(this.object.pointer, left,  right,  top,  bottom);
    }

    private native void _setFrustumExtents__RealvRealvRealvRealv(long _pointer_, float left, float right, float top, float bottom);

    /** 
    Reset the frustum extents to be automatically derived from other params. **/
    public void resetFrustumExtents() {
        _resetFrustumExtents(this.object.pointer);
    }

    private native void _resetFrustumExtents(long _pointer_);

    /** 
    Get the extents of the frustum in view space. **/
    public void getFrustumExtents(FloatPointer outleft, FloatPointer outright, FloatPointer outtop, FloatPointer outbottom) {
        _getFrustumExtents__RealrRealrRealrRealr_const(this.object.pointer, outleft.object.pointer,  outright.object.pointer,  outtop.object.pointer,  outbottom.object.pointer);
    }

    private native void _getFrustumExtents__RealrRealrRealrRealr_const(long _pointer_, long outleft, long outright, long outtop, long outbottom);

    /** 
    Gets the projection matrix for this frustum adjusted for the current rendersystem specifics (may be right or left-handed, depth range may vary). **/
    public org.ogre4j.IMatrix4 getProjectionMatrixRS() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getProjectionMatrixRS_const(this.object.pointer)));
    }

    private native long _getProjectionMatrixRS_const(long _pointer_);

    /** 
    Gets the depth-adjusted projection matrix for the current rendersystem, but one which still conforms to right-hand rules. **/
    public org.ogre4j.IMatrix4 getProjectionMatrixWithRSDepth() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getProjectionMatrixWithRSDepth_const(this.object.pointer)));
    }

    private native long _getProjectionMatrixWithRSDepth_const(long _pointer_);

    /** 
    Gets the normal projection matrix for this frustum, ie the projection matrix which conforms to standard right-handed rules and uses depth range [-1,+1]. **/
    public org.ogre4j.IMatrix4 getProjectionMatrix() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getProjectionMatrix_const(this.object.pointer)));
    }

    private native long _getProjectionMatrix_const(long _pointer_);

    /** 
    Calculate a view matrix for this frustum, relative to a potentially dynamic point. Mainly for use by OGRE internally when using camera-relative rendering for frustums that are not the centre (e.g. texture projection) **/
    public void calcViewMatrixRelative(org.ogre4j.IVector3 relPos, org.ogre4j.IMatrix4 matToUpdate) {
        _calcViewMatrixRelative__Vector3RMatrix4r_const(this.object.pointer, relPos.getInstancePointer().pointer,  matToUpdate.getInstancePointer().pointer);
    }

    private native void _calcViewMatrixRelative__Vector3RMatrix4r_const(long _pointer_, long relPos, long matToUpdate);

    /** 
    Set whether to use a custom view matrix on this frustum. **/
    public void setCustomViewMatrix(boolean enable, org.ogre4j.IMatrix4 viewMatrix) {
        _setCustomViewMatrix__bvMatrix4R(this.object.pointer, enable,  viewMatrix.getInstancePointer().pointer);
    }

    private native void _setCustomViewMatrix__bvMatrix4R(long _pointer_, boolean enable, long viewMatrix);

    /** **/
    public boolean isCustomViewMatrixEnabled() {
         return _isCustomViewMatrixEnabled_const(this.object.pointer);
    }

    private native boolean _isCustomViewMatrixEnabled_const(long _pointer_);

    /** 
    Set whether to use a custom projection matrix on this frustum. **/
    public void setCustomProjectionMatrix(boolean enable, org.ogre4j.IMatrix4 projectionMatrix) {
        _setCustomProjectionMatrix__bvMatrix4R(this.object.pointer, enable,  projectionMatrix.getInstancePointer().pointer);
    }

    private native void _setCustomProjectionMatrix__bvMatrix4R(long _pointer_, boolean enable, long projectionMatrix);

    /** **/
    public boolean isCustomProjectionMatrixEnabled() {
         return _isCustomProjectionMatrixEnabled_const(this.object.pointer);
    }

    private native boolean _isCustomProjectionMatrixEnabled_const(long _pointer_);

    /** 
    Retrieves the clipping planes of the frustum (world space). **/
    public org.ogre4j.IPlane getFrustumPlanes() {
         return new org.ogre4j.Plane(new InstancePointer(_getFrustumPlanes_const(this.object.pointer)));
    }

    private native long _getFrustumPlanes_const(long _pointer_);

    /** **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** 
    Overridden from **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** 
    Overridden from **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** 
    Overridden from **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op) {
        _getRenderOperation__RenderOperationr(this.object.pointer, op.getInstancePointer().pointer);
    }

    private native void _getRenderOperation__RenderOperationr(long _pointer_, long op);

    /** 
    Overridden from **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform) {
        _getWorldTransforms__Matrix4p_const(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void _getWorldTransforms__Matrix4p_const(long _pointer_, long xform);

    /** 
    Overridden from **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam) {
         return _getSquaredViewDepth__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native float _getSquaredViewDepth__CameraP_const(long _pointer_, long cam);

    /** 
    Overridden from **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** 
    Sets the type of projection to use (orthographic or perspective). Default is perspective. **/
    public void setProjectionType(org.ogre4j.ProjectionType pt) {
        _setProjectionType__ProjectionTypev(this.object.pointer, pt.getValue());
    }

    private native void _setProjectionType__ProjectionTypev(long _pointer_, int pt);

    /** 
    Retrieves info on the type of projection used (orthographic or perspective). **/
    public org.ogre4j.ProjectionType getProjectionType() {
         return org.ogre4j.ProjectionType.toEnum(_getProjectionType_const(this.object.pointer));
    }

    private native int _getProjectionType_const(long _pointer_);

    /** 
    Sets the orthographic window settings, for use with orthographic rendering only. **/
    public void setOrthoWindow(float w, float h) {
        _setOrthoWindow__RealvRealv(this.object.pointer, w,  h);
    }

    private native void _setOrthoWindow__RealvRealv(long _pointer_, float w, float h);

    /** 
    Sets the orthographic window height, for use with orthographic rendering only. **/
    public void setOrthoWindowHeight(float h) {
        _setOrthoWindowHeight__Realv(this.object.pointer, h);
    }

    private native void _setOrthoWindowHeight__Realv(long _pointer_, float h);

    /** 
    Sets the orthographic window width, for use with orthographic rendering only. **/
    public void setOrthoWindowWidth(float w) {
        _setOrthoWindowWidth__Realv(this.object.pointer, w);
    }

    private native void _setOrthoWindowWidth__Realv(long _pointer_, float w);

    /** 
    Gets the orthographic window height, for use with orthographic rendering only. **/
    public float getOrthoWindowHeight() {
         return _getOrthoWindowHeight_const(this.object.pointer);
    }

    private native float _getOrthoWindowHeight_const(long _pointer_);

    /** 
    Gets the orthographic window width, for use with orthographic rendering only. **/
    public float getOrthoWindowWidth() {
         return _getOrthoWindowWidth_const(this.object.pointer);
    }

    private native float _getOrthoWindowWidth_const(long _pointer_);

    /** 
    Modifies this frustum so it always renders from the reflection of itself through the plane specified. **/
    public void enableReflection(org.ogre4j.IPlane p) {
        _enableReflection__PlaneR(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native void _enableReflection__PlaneR(long _pointer_, long p);

    /** 
    Modifies this frustum so it always renders from the reflection of itself through the plane specified. Note that this version of the method links to a plane so that changes to it are picked up automatically. It is important that this plane continues to exist whilst this object does; do not destroy the plane before the frustum. **/
    public void enableReflection(org.ogre4j.IMovablePlane p) {
        _enableReflection__MovablePlaneP(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native void _enableReflection__MovablePlaneP(long _pointer_, long p);

    /** 
    Disables reflection modification previously turned on with enableReflection **/
    public void disableReflection() {
        _disableReflection(this.object.pointer);
    }

    private native void _disableReflection(long _pointer_);

    /** **/
    public boolean isReflected() {
         return _isReflected_const(this.object.pointer);
    }

    private native boolean _isReflected_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 getReflectionMatrix() {
         return new org.ogre4j.Matrix4(new InstancePointer(_getReflectionMatrix_const(this.object.pointer)));
    }

    private native long _getReflectionMatrix_const(long _pointer_);

    /** **/
    public org.ogre4j.IPlane getReflectionPlane() {
         return new org.ogre4j.Plane(new InstancePointer(_getReflectionPlane_const(this.object.pointer)));
    }

    private native long _getReflectionPlane_const(long _pointer_);

    /** 
    Links the frustum to a custom near clip plane, which can be used to clip geometry in a custom manner without using user clip planes. **/
    public void enableCustomNearClipPlane(org.ogre4j.IMovablePlane plane) {
        _enableCustomNearClipPlane__MovablePlaneP(this.object.pointer, plane.getInstancePointer().pointer);
    }

    private native void _enableCustomNearClipPlane__MovablePlaneP(long _pointer_, long plane);

    /** 
    Links the frustum to a custom near clip plane, which can be used to clip geometry in a custom manner without using user clip planes. **/
    public void enableCustomNearClipPlane(org.ogre4j.IPlane plane) {
        _enableCustomNearClipPlane__PlaneR(this.object.pointer, plane.getInstancePointer().pointer);
    }

    private native void _enableCustomNearClipPlane__PlaneR(long _pointer_, long plane);

    /** 
    Disables any custom near clip plane. **/
    public void disableCustomNearClipPlane() {
        _disableCustomNearClipPlane(this.object.pointer);
    }

    private native void _disableCustomNearClipPlane(long _pointer_);

    /** 
    Is a custom near clip plane in use? **/
    public boolean isCustomNearClipPlaneEnabled() {
         return _isCustomNearClipPlaneEnabled_const(this.object.pointer);
    }

    private native boolean _isCustomNearClipPlaneEnabled_const(long _pointer_);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been attached to a node. **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** 
    Create a reference-counted AnimableValuePtr for the named value. **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

    /** 
    Retrieves a pointer to the  this renderable object uses. **/
    public org.ogre4j.ITechnique getTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getTechnique_const(this.object.pointer)));
    }

    private native long _getTechnique_const(long _pointer_);

    /** 
    Called just prior to the  being rendered. **/
    public boolean preRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
         return _preRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native boolean _preRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Called immediately after the  has been rendered. **/
    public void postRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
        _postRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native void _postRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Returns the number of world transform matrices this renderable requires. **/
    public int getNumWorldTransforms() {
         return _getNumWorldTransforms_const(this.object.pointer);
    }

    private native int _getNumWorldTransforms_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Method which reports whether this renderable would normally cast a shadow. **/
    public boolean getCastsShadows() {
         return _getCastsShadows_const(this.object.pointer);
    }

    private native boolean _getCastsShadows_const(long _pointer_);

    /** 
    Sets a custom parameter for this , which may be used to drive calculations for this specific , like GPU program parameters. **/
    public void setCustomParameter(int index, org.ogre4j.IVector4 value) {
        _setCustomParameter__ivVector4R(this.object.pointer, index,  value.getInstancePointer().pointer);
    }

    private native void _setCustomParameter__ivVector4R(long _pointer_, int index, long value);

    /** 
    Gets the custom value associated with this  at the given index. **/
    public org.ogre4j.IVector4 getCustomParameter(int index) {
         return new org.ogre4j.Vector4(new InstancePointer(_getCustomParameter__iv_const(this.object.pointer, index)));
    }

    private native long _getCustomParameter__iv_const(long _pointer_, int index);

    /** 
    Update a custom  constant which is derived from information only this  knows. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params) {
        __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(this.object.pointer, constantEntry.getInstancePointer().pointer,  params.getInstancePointer().pointer);
    }

    private native void __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(long _pointer_, long constantEntry, long params);

    /** 
    Sets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets render system private data **/
    public org.ogre4j.IRenderable.IRenderSystemData getRenderSystemData() {
         return new org.ogre4j.Renderable.RenderSystemData(new InstancePointer(_getRenderSystemData_const(this.object.pointer)));
    }

    private native long _getRenderSystemData_const(long _pointer_);

    /** 
    gets render system private data **/
    public void setRenderSystemData(org.ogre4j.IRenderable.IRenderSystemData val) {
        _setRenderSystemData__RenderSystemDatap_const(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setRenderSystemData__RenderSystemDatap_const(long _pointer_, long val);

    /** **/
    public static float getINFINITE_FAR_PLANE_ADJUST() {
         return _getINFINITE_FAR_PLANE_ADJUST();
    }

    private native static float _getINFINITE_FAR_PLANE_ADJUST();

}
