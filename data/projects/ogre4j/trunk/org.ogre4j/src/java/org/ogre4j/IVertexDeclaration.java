/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IVertexDeclaration extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

public interface IVertexElementList extends INativeObject, org.std.Ilist< org.ogre4j.IVertexElement > {

    /** **/
    public void assign(int num, org.ogre4j.IVertexElement val);

    /** **/
    public org.ogre4j.IVertexElement back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IVertexElement front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IVertexElement val);

    /** **/
    public void push_front(org.ogre4j.IVertexElement val);

    /** **/
    public void remove(org.ogre4j.IVertexElement val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
    /** 
    Get the number of elements in the declaration. **/
    public int getElementCount();

    /** 
    Gets read-only access to the list of vertex elements. **/
    public org.ogre4j.IVertexDeclaration.IVertexElementList getElements();

    /** 
    Get a single element. **/
    public org.ogre4j.IVertexElement getElement(int index);

    /** 
    Sorts the elements in this list to be compatible with the maximum number of rendering APIs / graphics cards. **/
    public void sort();

    /** 
    Remove any gaps in the source buffer list used by this declaration. **/
    public void closeGapsInSource();

    /** 
    Generates a new  for optimal usage based on the current vertex declaration, which can be used with  later if you wish, or simply used as a template. **/
    public org.ogre4j.IVertexDeclaration getAutoOrganisedDeclaration(boolean skeletalAnimation, boolean vertexAnimation);

    /** 
    Gets the index of the highest source value referenced by this declaration. **/
    public int getMaxSource();

    /** 
    Adds a new  to this declaration. **/
    public org.ogre4j.IVertexElement addElement(int source, int offset, org.ogre4j.VertexElementType theType, org.ogre4j.VertexElementSemantic semantic, int index);

    /** 
    Inserts a new  at a given position in this declaration. **/
    public org.ogre4j.IVertexElement insertElement(int atPosition, int source, int offset, org.ogre4j.VertexElementType theType, org.ogre4j.VertexElementSemantic semantic, int index);

    /** 
    Remove the element at the given index from this declaration. **/
    public void removeElement(int elem_index);

    /** 
    Remove the element with the given semantic and usage index. **/
    public void removeElement(org.ogre4j.VertexElementSemantic semantic, int index);

    /** 
    Remove all elements. **/
    public void removeAllElements();

    /** 
    Modify an element in-place, params as addElement. **/
    public void modifyElement(int elem_index, int source, int offset, org.ogre4j.VertexElementType theType, org.ogre4j.VertexElementSemantic semantic, int index);

    /** 
    Finds a  with the given semantic, and index if there is more than one element with the same semantic. **/
    public org.ogre4j.IVertexElement findElementBySemantic(org.ogre4j.VertexElementSemantic sem, int index);

    /** 
    Gets a list of elements which use a given source. **/
    public void findElementsBySource(org.ogre4j.IVertexDeclaration.IVertexElementList returnValue, int source);

    /** 
    Gets the vertex size defined by this declaration for a given source. **/
    public int getVertexSize(int source);

    /** 
    Clones this declaration. **/
    public org.ogre4j.IVertexDeclaration clone();

    /** **/
    public boolean operatorEqual(org.ogre4j.IVertexDeclaration rhs);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IVertexDeclaration rhs);

}
