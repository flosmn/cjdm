/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IShadowCaster extends INativeObject {

public interface IShadowRenderableList extends INativeObject, org.std.Ivector< org.ogre4j.IShadowRenderable > {

    /** **/
    public void assign(int num, org.ogre4j.IShadowRenderable val);

    /** **/
    public org.ogre4j.IShadowRenderable at(int loc);

    /** **/
    public org.ogre4j.IShadowRenderable back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IShadowRenderable front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IShadowRenderable val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IShadowRenderableListIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.IShadowCaster.IShadowRenderableList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IShadowRenderable getNext();

    /** **/
    public org.ogre4j.IShadowRenderable peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.IShadowRenderable> peekNextPtr();

    /** **/
    public void moveNext();

}
    /** 
    Returns whether or not this object currently casts a shadow. **/
    public boolean getCastShadows();

    /** 
    Returns details of the edges which might be used to determine a silhouette. **/
    public org.ogre4j.IEdgeData getEdgeList();

    /** 
    Returns whether the object has a valid edge list. **/
    public boolean hasEdgeList();

    /** 
    Get the world bounding box of the caster. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive);

    /** 
    Gets the world space bounding box of the light cap **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds();

    /** 
    Gets the world space bounding box of the dark cap, as extruded using the light provided **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist);

    /** 
    Gets an iterator over the renderables required to render the shadow volume. **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDistance, long flags);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l);

}
