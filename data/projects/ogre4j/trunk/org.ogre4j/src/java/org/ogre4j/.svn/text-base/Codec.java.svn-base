/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Codec extends org.xbig.base.NativeObject implements org.ogre4j.ICodec {
static { System.loadLibrary("ogre4j");}
public static class CodecData extends org.xbig.base.NativeObject implements org.ogre4j.ICodec.ICodecData {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CodecData(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CodecData(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CodecData(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Returns the type of the data. **/
    public String dataType() {
         return _dataType_const(this.object.pointer);
    }

    private native String _dataType_const(long _pointer_);

    /** **/
    public CodecData() {
         super( new org.xbig.base.InstancePointer(__createCodecData()), false);
    }

    private native static long __createCodecData();

}
protected static class CodecList extends org.xbig.base.NativeObject implements org.ogre4j.ICodec.ICodecList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CodecList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CodecList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CodecList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CodecList() {
         super( new org.xbig.base.InstancePointer(__createCodecList()), false);
    }

    private native static long __createCodecList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.ICodec get(String key) {
         return new org.ogre4j.Codec(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.ICodec value) {
        _insert__sROgre_Codecp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_Codecp(long _pointer_, String key, long value);

}
public static class CodecDataPtr extends org.xbig.base.NativeObject implements org.ogre4j.ICodec.ICodecDataPtr {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CodecDataPtr(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CodecDataPtr(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CodecDataPtr(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CodecDataPtr() {
         super( new org.xbig.base.InstancePointer(__createCodecDataPtr()), false);
    }

    private native static long __createCodecDataPtr();

    /** **/
    public org.ogre4j.ICodec.ICodecDataPtr operatorAssignment(org.ogre4j.ICodec.ICodecDataPtr r) {
         return new org.ogre4j.Codec.CodecDataPtr(new InstancePointer(_operatorAssignment___Ogre_SharedPtrR(this.object.pointer, r.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_SharedPtrR(long _pointer_, long r);

    /** **/
    public org.ogre4j.ICodec.ICodecData operatorMultiplication() {
         return new org.ogre4j.Codec.CodecData(new InstancePointer(_operatorMultiplication_const(this.object.pointer)));
    }

    private native long _operatorMultiplication_const(long _pointer_);

    /** **/
    public org.ogre4j.ICodec.ICodecData operatorMemberAccessFromAPointer() {
         return new org.ogre4j.Codec.CodecData(new InstancePointer(_operatorMemberAccessFromAPointer_const(this.object.pointer)));
    }

    private native long _operatorMemberAccessFromAPointer_const(long _pointer_);

    /** **/
    public org.ogre4j.ICodec.ICodecData get() {
         return new org.ogre4j.Codec.CodecData(new InstancePointer(_get_const(this.object.pointer)));
    }

    private native long _get_const(long _pointer_);

    /** **/
    public void bind(org.ogre4j.ICodec.ICodecData rep, org.ogre4j.SharedPtrFreeMethod freeMethod) {
        _bind__Ogre_Codec_CodecDatap_Ogre_SharedPtrFreeMethodv(this.object.pointer, rep.getInstancePointer().pointer,  freeMethod.getValue());
    }

    private native void _bind__Ogre_Codec_CodecDatap_Ogre_SharedPtrFreeMethodv(long _pointer_, long rep, int freeMethod);

    /** **/
    public boolean unique() {
         return _unique_const(this.object.pointer);
    }

    private native boolean _unique_const(long _pointer_);

    /** **/
    public long useCount() {
         return _useCount_const(this.object.pointer);
    }

    private native long _useCount_const(long _pointer_);

    /** **/
    public LongPointer useCountPointer() {
         return new LongPointer(new InstancePointer(_useCountPointer_const(this.object.pointer)));
    }

    private native long _useCountPointer_const(long _pointer_);

    /** **/
    public org.ogre4j.ICodec.ICodecData getPointer() {
         return new org.ogre4j.Codec.CodecData(new InstancePointer(_getPointer_const(this.object.pointer)));
    }

    private native long _getPointer_const(long _pointer_);

    /** **/
    public org.ogre4j.SharedPtrFreeMethod freeMethod() {
         return org.ogre4j.SharedPtrFreeMethod.toEnum(_freeMethod_const(this.object.pointer));
    }

    private native int _freeMethod_const(long _pointer_);

    /** **/
    public boolean isNull() {
         return _isNull_const(this.object.pointer);
    }

    private native boolean _isNull_const(long _pointer_);

    /** **/
    public void setNull() {
        _setNull(this.object.pointer);
    }

    private native void _setNull(long _pointer_);

}
public static class CodecIterator extends org.xbig.base.NativeObject implements org.ogre4j.ICodec.ICodecIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CodecIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CodecIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CodecIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ICodec getNext() {
         return new org.ogre4j.Codec(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ICodec peekNextValue() {
         return new org.ogre4j.Codec(new InstancePointer(_peekNextValue_const(this.object.pointer)));
    }

    private native long _peekNextValue_const(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey_const(this.object.pointer);
    }

    private native String _peekNextKey_const(long _pointer_);

    /** **/
    public org.ogre4j.ICodec.ICodecIterator operatorAssignment(org.ogre4j.ICodec.ICodecIterator rhs) {
         return new org.ogre4j.Codec.CodecIterator(new InstancePointer(_operatorAssignment___Ogre_Codec_CodecIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_Codec_CodecIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.ICodec> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.ICodec>(new InstancePointer(_peekNextValuePtr_const(this.object.pointer)));
    }

    private native long _peekNextValuePtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
public static class DecodeResult extends org.xbig.base.NativeObject implements org.ogre4j.ICodec.IDecodeResult {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public DecodeResult(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected DecodeResult(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public DecodeResult(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public void getfirst(org.ogre4j.IMemoryDataStreamPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getfirst(this.object.pointer)), false);
    }

    private native long _getfirst(long _pointer_);

    /** **/
    public void setfirst(org.ogre4j.IMemoryDataStreamPtr _jni_value_) {
        _setfirst(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setfirst(long _pointer_, long _jni_value_);

    /** **/
    public void getsecond(org.ogre4j.ICodec.ICodecDataPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getsecond(this.object.pointer)), false);
    }

    private native long _getsecond(long _pointer_);

    /** **/
    public void setsecond(org.ogre4j.ICodec.ICodecDataPtr _jni_value_) {
        _setsecond(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsecond(long _pointer_, long _jni_value_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Codec(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Codec(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Codec(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Codes the data in the input stream and saves the result in the output stream. **/
    public void code(org.ogre4j.IDataStreamPtr returnValue, org.ogre4j.IMemoryDataStreamPtr input, org.ogre4j.ICodec.ICodecDataPtr pData) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_code__MemoryDataStreamPtrrCodecDataPtrr_const(this.object.pointer, input.getInstancePointer().pointer,  pData.getInstancePointer().pointer)), false);
    }

    private native long _code__MemoryDataStreamPtrrCodecDataPtrr_const(long _pointer_, long input, long pData);

    /** 
    Codes the data in the input chunk and saves the result in the output filename provided. Provided for efficiency since coding to memory is progressive therefore memory required is unknown leading to reallocations. **/
    public void codeToFile(org.ogre4j.IMemoryDataStreamPtr input, String outFileName, org.ogre4j.ICodec.ICodecDataPtr pData) {
        _codeToFile__MemoryDataStreamPtrrStringRCodecDataPtrr_const(this.object.pointer, input.getInstancePointer().pointer,  outFileName,  pData.getInstancePointer().pointer);
    }

    private native void _codeToFile__MemoryDataStreamPtrrStringRCodecDataPtrr_const(long _pointer_, long input, String outFileName, long pData);

    /** 
    Codes the data from the input chunk into the output chunk. **/
    public void decode(org.ogre4j.ICodec.IDecodeResult returnValue, org.ogre4j.IDataStreamPtr input) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_decode__DataStreamPtrr_const(this.object.pointer, input.getInstancePointer().pointer)), false);
    }

    private native long _decode__DataStreamPtrr_const(long _pointer_, long input);

    /** 
    Returns the type of the codec as a String **/
    public String getType() {
         return _getType_const(this.object.pointer);
    }

    private native String _getType_const(long _pointer_);

    /** 
    Returns the type of the data that supported by this codec as a String **/
    public String getDataType() {
         return _getDataType_const(this.object.pointer);
    }

    private native String _getDataType_const(long _pointer_);

    /** 
    Returns whether a magic number header matches this codec. **/
    public boolean magicNumberMatch(String magicNumberPtr, int maxbytes) {
         return _magicNumberMatch__cPiv_const(this.object.pointer, magicNumberPtr,  maxbytes);
    }

    private native boolean _magicNumberMatch__cPiv_const(long _pointer_, String magicNumberPtr, int maxbytes);

    /** 
    Maps a magic number header to a file extension, if this codec recognises it. **/
    public String magicNumberToFileExt(String magicNumberPtr, int maxbytes) {
         return _magicNumberToFileExt__cPiv_const(this.object.pointer, magicNumberPtr,  maxbytes);
    }

    private native String _magicNumberToFileExt__cPiv_const(long _pointer_, String magicNumberPtr, int maxbytes);

    /** 
    Registers a new codec in the database. **/
    public static void registerCodec(org.ogre4j.ICodec pCodec) {
        _registerCodec__Codecp( pCodec.getInstancePointer().pointer);
    }

    private native static void _registerCodec__Codecp(long pCodec);

    /** 
    Unregisters a codec from the database. **/
    public static void unRegisterCodec(org.ogre4j.ICodec pCodec) {
        _unRegisterCodec__Codecp( pCodec.getInstancePointer().pointer);
    }

    private native static void _unRegisterCodec__Codecp(long pCodec);

    /** 
    Gets the iterator for the registered codecs. **/
    public static void getCodecIterator(org.ogre4j.ICodec.ICodecIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getCodecIterator()), false);
    }

    private native static long _getCodecIterator();

    /** 
    Gets the file extension list for the registered codecs. **/
    public static void getExtensions(org.ogre4j.IStringVector returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getExtensions()), false);
    }

    private native static long _getExtensions();

    /** 
    Gets the codec registered for the passed in file extension. **/
    public static org.ogre4j.ICodec getCodec(String extension) {
         return new org.ogre4j.Codec(new InstancePointer(_getCodec__StringR( extension)));
    }

    private native static long _getCodec__StringR(String extension);

    /** 
    Gets the codec that can handle the given 'magic' identifier. **/
    public static org.ogre4j.ICodec getCodec(BytePointer magicNumberPtr, int maxbytes) {
         return new org.ogre4j.Codec(new InstancePointer(_getCodec__cpiv( magicNumberPtr.object.pointer,  maxbytes)));
    }

    private native static long _getCodec__cpiv(long magicNumberPtr, int maxbytes);

}
