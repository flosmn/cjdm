/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class VertexElement extends org.xbig.base.NativeObject implements org.ogre4j.IVertexElement {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexElement(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexElement(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexElement(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexElement(int source, int offset, org.ogre4j.VertexElementType theType, org.ogre4j.VertexElementSemantic semantic, int index) {
         super( new org.xbig.base.InstancePointer(__createVertexElement__HvivVertexElementTypevVertexElementSemanticvHv( source,  offset,  theType.getValue(),  semantic.getValue(),  index)), false);
    }

    private native static long __createVertexElement__HvivVertexElementTypevVertexElementSemanticvHv(int source, int offset, int theType, int semantic, int index);

    /** **/
    public int getSource() {
         return _getSource_const(this.object.pointer);
    }

    private native int _getSource_const(long _pointer_);

    /** **/
    public int getOffset() {
         return _getOffset_const(this.object.pointer);
    }

    private native int _getOffset_const(long _pointer_);

    /** **/
    public org.ogre4j.VertexElementType getType() {
         return org.ogre4j.VertexElementType.toEnum(_getType_const(this.object.pointer));
    }

    private native int _getType_const(long _pointer_);

    /** **/
    public org.ogre4j.VertexElementSemantic getSemantic() {
         return org.ogre4j.VertexElementSemantic.toEnum(_getSemantic_const(this.object.pointer));
    }

    private native int _getSemantic_const(long _pointer_);

    /** **/
    public int getIndex() {
         return _getIndex_const(this.object.pointer);
    }

    private native int _getIndex_const(long _pointer_);

    /** **/
    public int getSize() {
         return _getSize_const(this.object.pointer);
    }

    private native int _getSize_const(long _pointer_);

    /** **/
    public boolean operatorEqual(org.ogre4j.IVertexElement rhs) {
         return _operatorEqual__VertexElementR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__VertexElementR_const(long _pointer_, long rhs);

    /** 
    Adjusts a pointer to the base of a vertex to point at this element. **/
    public void baseVertexPointerToElement_a(VoidPointer pBase, NativeObjectPointer<VoidPointer> pElem) {
        _baseVertexPointerToElement__vpvp_const(this.object.pointer, pBase.object.pointer,  pElem.object.pointer);
    }

    private native void _baseVertexPointerToElement__vpvp_const(long _pointer_, long pBase, long pElem);

    /** 
    Adjusts a pointer to the base of a vertex to point at this element. **/
    public void baseVertexPointerToElement_b(VoidPointer pBase, NativeObjectPointer<FloatPointer> pElem) {
        _baseVertexPointerToElement__vpFp_const(this.object.pointer, pBase.object.pointer,  pElem.object.pointer);
    }

    private native void _baseVertexPointerToElement__vpFp_const(long _pointer_, long pBase, long pElem);

    /** 
    Adjusts a pointer to the base of a vertex to point at this element. **/
    public void baseVertexPointerToElement_c(VoidPointer pBase, NativeObjectPointer<LongPointer> pElem) {
        _baseVertexPointerToElement__vpRGBAp_const(this.object.pointer, pBase.object.pointer,  pElem.object.pointer);
    }

    private native void _baseVertexPointerToElement__vpRGBAp_const(long _pointer_, long pBase, long pElem);

    /** 
    Adjusts a pointer to the base of a vertex to point at this element. **/
    public void baseVertexPointerToElement_d(VoidPointer pBase, NativeObjectPointer<ShortPointer> pElem) {
        _baseVertexPointerToElement__vpBp_const(this.object.pointer, pBase.object.pointer,  pElem.object.pointer);
    }

    private native void _baseVertexPointerToElement__vpBp_const(long _pointer_, long pBase, long pElem);

    /** 
    Adjusts a pointer to the base of a vertex to point at this element. **/
    public void baseVertexPointerToElement_e(VoidPointer pBase, NativeObjectPointer<IntegerPointer> pElem) {
        _baseVertexPointerToElement__vpHp_const(this.object.pointer, pBase.object.pointer,  pElem.object.pointer);
    }

    private native void _baseVertexPointerToElement__vpHp_const(long _pointer_, long pBase, long pElem);

    /** **/
    public static int getTypeSize(org.ogre4j.VertexElementType etype) {
         return _getTypeSize__VertexElementTypev( etype.getValue());
    }

    private native static int _getTypeSize__VertexElementTypev(int etype);

    /** **/
    public static int getTypeCount(org.ogre4j.VertexElementType etype) {
         return _getTypeCount__VertexElementTypev( etype.getValue());
    }

    private native static int _getTypeCount__VertexElementTypev(int etype);

    /** 
    Simple converter function which will turn a single-value type into a multi-value type based on a parameter. **/
    public static org.ogre4j.VertexElementType multiplyTypeCount(org.ogre4j.VertexElementType baseType, int count) {
         return org.ogre4j.VertexElementType.toEnum(_multiplyTypeCount__VertexElementTypevHv( baseType.getValue(),  count));
    }

    private native static int _multiplyTypeCount__VertexElementTypevHv(int baseType, int count);

    /** 
    Simple converter function which will a type into it's single-value equivalent - makes switches on type easier. **/
    public static org.ogre4j.VertexElementType getBaseType(org.ogre4j.VertexElementType multiType) {
         return org.ogre4j.VertexElementType.toEnum(_getBaseType__VertexElementTypev( multiType.getValue()));
    }

    private native static int _getBaseType__VertexElementTypev(int multiType);

    /** 
    Utility method for converting colour from one packed 32-bit colour type to another. **/
    public static void convertColourValue(org.ogre4j.VertexElementType srcType, org.ogre4j.VertexElementType dstType, LongPointer ptr) {
        _convertColourValue__VertexElementTypevVertexElementTypevuint32p( srcType.getValue(),  dstType.getValue(),  ptr.object.pointer);
    }

    private native static void _convertColourValue__VertexElementTypevVertexElementTypevuint32p(int srcType, int dstType, long ptr);

    /** 
    Utility method for converting colour to a packed 32-bit colour type. **/
    public static long convertColourValue(org.ogre4j.IColourValue src, org.ogre4j.VertexElementType dst) {
         return _convertColourValue__ColourValueRVertexElementTypev( src.getInstancePointer().pointer,  dst.getValue());
    }

    private native static long _convertColourValue__ColourValueRVertexElementTypev(long src, int dst);

    /** 
    Utility method to get the most appropriate packed colour vertex element format. **/
    public static org.ogre4j.VertexElementType getBestColourVertexElementType() {
         return org.ogre4j.VertexElementType.toEnum(_getBestColourVertexElementType());
    }

    private native static int _getBestColourVertexElementType();

}
