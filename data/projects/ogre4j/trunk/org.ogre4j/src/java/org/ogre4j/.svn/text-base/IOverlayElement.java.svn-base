/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IOverlayElement extends INativeObject, org.ogre4j.IStringInterface, org.ogre4j.IRenderable, org.ogre4j.ISceneObjAllocatedObject {

    /** 
    Initialise gui element **/
    public void initialise();

    /** 
    Gets the name of this overlay. **/
    public String getName();

    /** 
    Shows this element if it was hidden. **/
    public void show();

    /** 
    Hides this element if it was visible. **/
    public void hide();

    /** 
    Returns whether or not the element is visible. **/
    public boolean isVisible();

    /** **/
    public boolean isEnabled();

    /** **/
    public void setEnabled(boolean b);

    /** 
    Sets the dimensions of this element in relation to the screen (1.0 = screen width/height). **/
    public void setDimensions(float width, float height);

    /** 
    Sets the position of the top-left corner of the element, relative to the screen size (1.0 = screen width / height) **/
    public void setPosition(float left, float top);

    /** 
    Sets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public void setWidth(float width);

    /** 
    Gets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public float getWidth();

    /** 
    Sets the height of this element in relation to the screen (where 1.0 = screen height) **/
    public void setHeight(float height);

    /** 
    Gets the height of this element in relation to the screen (where 1.0 = screen height) **/
    public float getHeight();

    /** 
    Sets the left of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public void setLeft(float left);

    /** 
    Gets the left of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public float getLeft();

    /** 
    Sets the top of this element in relation to the screen (where 0 = top, 1.0 = bottom) **/
    public void setTop(float Top);

    /** 
    Gets the top of this element in relation to the screen (where 0 = top, 1.0 = bottom) **/
    public float getTop();

    /** 
    Gets the left of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public float _getLeft();

    /** 
    Gets the top of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public float _getTop();

    /** 
    Gets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public float _getWidth();

    /** 
    Gets the height of this element in relation to the screen (where 1.0 = screen height) **/
    public float _getHeight();

    /** 
    Sets the left of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setLeft(float left);

    /** 
    Sets the top of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setTop(float top);

    /** 
    Sets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setWidth(float width);

    /** 
    Sets the height of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setHeight(float height);

    /** 
    Sets the left and top of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setPosition(float left, float top);

    /** 
    Sets the width and height of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setDimensions(float width, float height);

    /** 
    Gets the name of the material this element uses. **/
    public String getMaterialName();

    /** 
    Sets the name of the material this element will use. **/
    public void setMaterialName(String matName);

    /** 
    See **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** 
    See **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** 
    Tell the object to recalculate **/
    public void _positionsOutOfDate();

    /** 
    Internal method to update the element based on transforms applied. **/
    public void _update();

    /** 
    Updates this elements transform based on it's parent. **/
    public void _updateFromParent();

    /** 
    Internal method for notifying the GUI element of it's parent and ultimate overlay. **/
    public void _notifyParent(org.ogre4j.IOverlayContainer parent, org.ogre4j.IOverlay overlay);

    /** 
    Gets the 'left' position as derived from own left and that of parents. **/
    public float _getDerivedLeft();

    /** 
    Gets the 'top' position as derived from own left and that of parents. **/
    public float _getDerivedTop();

    /** 
    Gets the 'width' as derived from own width and metrics mode. **/
    public float _getRelativeWidth();

    /** 
    Gets the 'height' as derived from own height and metrics mode. **/
    public float _getRelativeHeight();

    /** 
    Gets the clipping region of the element **/
    public void _getClippingRegion(org.ogre4j.IRectangle clippingRegion);

    /** 
    Internal method to notify the element when Zorder of parent overlay has changed. **/
    public int _notifyZOrder(int newZOrder);

    /** 
    Internal method to notify the element when it's world transform of parent overlay has changed. **/
    public void _notifyWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** 
    Internal method to notify the element when the viewport of parent overlay has changed. **/
    public void _notifyViewport();

    /** 
    Internal method to put the contents onto the render queue. **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** 
    Gets the type name of the element. All concrete subclasses must implement this. **/
    public String getTypeName();

    /** 
    Sets the caption on elements that support it. **/
    public void setCaption(org.ogre4j.IUTFString text);

    /** 
    Gets the caption for this element. **/
    public org.ogre4j.IUTFString getCaption();

    /** 
    Sets the colour on elements that support it. **/
    public void setColour(org.ogre4j.IColourValue col);

    /** 
    Gets the colour for this element. **/
    public org.ogre4j.IColourValue getColour();

    /** 
    Tells this element how to interpret the position and dimension values it is given. **/
    public void setMetricsMode(org.ogre4j.GuiMetricsMode gmm);

    /** 
    Retrieves the current settings of how the element metrics are interpreted. **/
    public org.ogre4j.GuiMetricsMode getMetricsMode();

    /** 
    Sets the horizontal origin for this element. **/
    public void setHorizontalAlignment(org.ogre4j.GuiHorizontalAlignment gha);

    /** 
    Gets the horizontal alignment for this element. **/
    public org.ogre4j.GuiHorizontalAlignment getHorizontalAlignment();

    /** 
    Sets the vertical origin for this element. **/
    public void setVerticalAlignment(org.ogre4j.GuiVerticalAlignment gva);

    /** 
    Gets the vertical alignment for this element. **/
    public org.ogre4j.GuiVerticalAlignment getVerticalAlignment();

    /** 
    Returns true if xy is within the constraints of the component **/
    public boolean contains(float x, float y);

    /** 
    Returns true if xy is within the constraints of the component **/
    public org.ogre4j.IOverlayElement findElementAt(float x, float y);

    /** 
    returns false as this class is not a container type **/
    public boolean isContainer();

    /** **/
    public boolean isKeyEnabled();

    /** **/
    public boolean isCloneable();

    /** **/
    public void setCloneable(boolean c);

    /** 
    Returns the parent container. **/
    public org.ogre4j.IOverlayContainer getParent();

    /** **/
    public void _setParent(org.ogre4j.IOverlayContainer parent);

    /** 
    Returns the zOrder of the element **/
    public int getZOrder();

    /** 
    Overridden from **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam);

    /** 
    **/
    public org.ogre4j.ILightList getLights();

    /** **/
    public void copyFromTemplate(org.ogre4j.IOverlayElement templateOverlay);

    /** **/
    public org.ogre4j.IOverlayElement clone(String instanceName);

    /** **/
    public org.ogre4j.IOverlayElement getSourceTemplate();

}
