/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Texture extends org.xbig.base.NativeObject implements org.ogre4j.ITexture {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Texture(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Texture(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Texture(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Sets the type of texture; can only be changed before **/
    public void setTextureType(org.ogre4j.TextureType ttype) {
        _setTextureType__TextureTypev(this.object.pointer, ttype.getValue());
    }

    private native void _setTextureType__TextureTypev(long _pointer_, int ttype);

    /** 
    Gets the type of texture **/
    public org.ogre4j.TextureType getTextureType() {
         return org.ogre4j.TextureType.toEnum(_getTextureType_const(this.object.pointer));
    }

    private native int _getTextureType_const(long _pointer_);

    /** 
    Gets the number of mipmaps to be used for this texture. **/
    public int getNumMipmaps() {
         return _getNumMipmaps_const(this.object.pointer);
    }

    private native int _getNumMipmaps_const(long _pointer_);

    /** 
    Sets the number of mipmaps to be used for this texture. **/
    public void setNumMipmaps(int num) {
        _setNumMipmaps__iv(this.object.pointer, num);
    }

    private native void _setNumMipmaps__iv(long _pointer_, int num);

    /** 
    Are mipmaps hardware generated? **/
    public boolean getMipmapsHardwareGenerated() {
         return _getMipmapsHardwareGenerated_const(this.object.pointer);
    }

    private native boolean _getMipmapsHardwareGenerated_const(long _pointer_);

    /** 
    Returns the gamma adjustment factor applied to this texture on loading. **/
    public float getGamma() {
         return _getGamma_const(this.object.pointer);
    }

    private native float _getGamma_const(long _pointer_);

    /** 
    Sets the gamma adjustment factor applied to this texture on loading the data. **/
    public void setGamma(float g) {
        _setGamma__Fv(this.object.pointer, g);
    }

    private native void _setGamma__Fv(long _pointer_, float g);

    /** 
    Sets whether this texture will be set up so that on sampling it, hardware gamma correction is applied. **/
    public void setHardwareGammaEnabled(boolean enabled) {
        _setHardwareGammaEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setHardwareGammaEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Gets whether this texture will be set up so that on sampling it, hardware gamma correction is applied. **/
    public boolean isHardwareGammaEnabled() {
         return _isHardwareGammaEnabled_const(this.object.pointer);
    }

    private native boolean _isHardwareGammaEnabled_const(long _pointer_);

    /** 
    Set the level of multisample AA to be used if this texture is a rendertarget. **/
    public void setFSAA(long fsaa) {
        _setFSAA__uintv(this.object.pointer, fsaa);
    }

    private native void _setFSAA__uintv(long _pointer_, long fsaa);

    /** 
    Get the level of multisample AA to be used if this texture is a rendertarget. **/
    public long getFSAA() {
         return _getFSAA_const(this.object.pointer);
    }

    private native long _getFSAA_const(long _pointer_);

    /** 
    Returns the height of the texture. **/
    public int getHeight() {
         return _getHeight_const(this.object.pointer);
    }

    private native int _getHeight_const(long _pointer_);

    /** 
    Returns the width of the texture. **/
    public int getWidth() {
         return _getWidth_const(this.object.pointer);
    }

    private native int _getWidth_const(long _pointer_);

    /** 
    Returns the depth of the texture (only applicable for 3D textures). **/
    public int getDepth() {
         return _getDepth_const(this.object.pointer);
    }

    private native int _getDepth_const(long _pointer_);

    /** 
    Returns the height of the original input texture (may differ due to hardware requirements). **/
    public int getSrcHeight() {
         return _getSrcHeight_const(this.object.pointer);
    }

    private native int _getSrcHeight_const(long _pointer_);

    /** 
    Returns the width of the original input texture (may differ due to hardware requirements). **/
    public int getSrcWidth() {
         return _getSrcWidth_const(this.object.pointer);
    }

    private native int _getSrcWidth_const(long _pointer_);

    /** 
    Returns the original depth of the input texture (only applicable for 3D textures). **/
    public int getSrcDepth() {
         return _getSrcDepth_const(this.object.pointer);
    }

    private native int _getSrcDepth_const(long _pointer_);

    /** 
    Set the height of the texture; can only do this before ; **/
    public void setHeight(int h) {
        _setHeight__iv(this.object.pointer, h);
    }

    private native void _setHeight__iv(long _pointer_, int h);

    /** 
    Set the width of the texture; can only do this before ; **/
    public void setWidth(int w) {
        _setWidth__iv(this.object.pointer, w);
    }

    private native void _setWidth__iv(long _pointer_, int w);

    /** 
    Set the depth of the texture (only applicable for 3D textures); ; can only do this before ; **/
    public void setDepth(int d) {
        _setDepth__iv(this.object.pointer, d);
    }

    private native void _setDepth__iv(long _pointer_, int d);

    /** 
    Returns the TextureUsage indentifier for this **/
    public int getUsage() {
         return _getUsage_const(this.object.pointer);
    }

    private native int _getUsage_const(long _pointer_);

    /** 
    Sets the TextureUsage indentifier for this ; only useful before 
    **/
    public void setUsage(int u) {
        _setUsage__iv(this.object.pointer, u);
    }

    private native void _setUsage__iv(long _pointer_, int u);

    /** 
    Creates the internal texture resources for this texture. **/
    public void createInternalResources() {
        _createInternalResources(this.object.pointer);
    }

    private native void _createInternalResources(long _pointer_);

    /** 
    Frees internal texture resources for this texture. **/
    public void freeInternalResources() {
        _freeInternalResources(this.object.pointer);
    }

    private native void _freeInternalResources(long _pointer_);

    /** 
    Copies (and maybe scales to fit) the contents of this texture to another texture. **/
    public void copyToTexture(org.ogre4j.ITexturePtr target) {
        _copyToTexture__TexturePtrr(this.object.pointer, target.getInstancePointer().pointer);
    }

    private native void _copyToTexture__TexturePtrr(long _pointer_, long target);

    /** 
    Loads the data from an image. **/
    public void loadImage(org.ogre4j.IImage img) {
        _loadImage__ImageR(this.object.pointer, img.getInstancePointer().pointer);
    }

    private native void _loadImage__ImageR(long _pointer_, long img);

    /** 
    Loads the data from a raw stream. **/
    public void loadRawData(org.ogre4j.IDataStreamPtr stream, int uWidth, int uHeight, org.ogre4j.PixelFormat eFormat) {
        _loadRawData__DataStreamPtrrushortvushortvPixelFormatv(this.object.pointer, stream.getInstancePointer().pointer,  uWidth,  uHeight,  eFormat.getValue());
    }

    private native void _loadRawData__DataStreamPtrrushortvushortvPixelFormatv(long _pointer_, long stream, int uWidth, int uHeight, int eFormat);

    /** 
    Internal method to load the texture from a set of images. **/
    public void _loadImages(org.ogre4j.IConstImagePtrList images) {
        __loadImages__ConstImagePtrListR(this.object.pointer, images.getInstancePointer().pointer);
    }

    private native void __loadImages__ConstImagePtrListR(long _pointer_, long images);

    /** 
    Returns the pixel format for the texture surface. **/
    public org.ogre4j.PixelFormat getFormat() {
         return org.ogre4j.PixelFormat.toEnum(_getFormat_const(this.object.pointer));
    }

    private native int _getFormat_const(long _pointer_);

    /** 
    Returns the desired pixel format for the texture surface. **/
    public org.ogre4j.PixelFormat getDesiredFormat() {
         return org.ogre4j.PixelFormat.toEnum(_getDesiredFormat_const(this.object.pointer));
    }

    private native int _getDesiredFormat_const(long _pointer_);

    /** 
    Returns the pixel format of the original input texture (may differ due to hardware requirements and pixel format convertion). **/
    public org.ogre4j.PixelFormat getSrcFormat() {
         return org.ogre4j.PixelFormat.toEnum(_getSrcFormat_const(this.object.pointer));
    }

    private native int _getSrcFormat_const(long _pointer_);

    /** 
    Sets the pixel format for the texture surface; can only be set before . **/
    public void setFormat(org.ogre4j.PixelFormat pf) {
        _setFormat__PixelFormatv(this.object.pointer, pf.getValue());
    }

    private native void _setFormat__PixelFormatv(long _pointer_, int pf);

    /** 
    Returns true if the texture has an alpha layer. **/
    public boolean hasAlpha() {
         return _hasAlpha_const(this.object.pointer);
    }

    private native boolean _hasAlpha_const(long _pointer_);

    /** 
    Sets desired bit depth for integer pixel format textures. **/
    public void setDesiredIntegerBitDepth(int bits) {
        _setDesiredIntegerBitDepth__ushortv(this.object.pointer, bits);
    }

    private native void _setDesiredIntegerBitDepth__ushortv(long _pointer_, int bits);

    /** 
    gets desired bit depth for integer pixel format textures. **/
    public int getDesiredIntegerBitDepth() {
         return _getDesiredIntegerBitDepth_const(this.object.pointer);
    }

    private native int _getDesiredIntegerBitDepth_const(long _pointer_);

    /** 
    Sets desired bit depth for float pixel format textures. **/
    public void setDesiredFloatBitDepth(int bits) {
        _setDesiredFloatBitDepth__ushortv(this.object.pointer, bits);
    }

    private native void _setDesiredFloatBitDepth__ushortv(long _pointer_, int bits);

    /** 
    gets desired bit depth for float pixel format textures. **/
    public int getDesiredFloatBitDepth() {
         return _getDesiredFloatBitDepth_const(this.object.pointer);
    }

    private native int _getDesiredFloatBitDepth_const(long _pointer_);

    /** 
    Sets desired bit depth for integer and float pixel format. **/
    public void setDesiredBitDepths(int integerBits, int floatBits) {
        _setDesiredBitDepths__ushortvushortv(this.object.pointer, integerBits,  floatBits);
    }

    private native void _setDesiredBitDepths__ushortvushortv(long _pointer_, int integerBits, int floatBits);

    /** 
    Sets whether luminace pixel format will treated as alpha format when load this texture. **/
    public void setTreatLuminanceAsAlpha(boolean asAlpha) {
        _setTreatLuminanceAsAlpha__bv(this.object.pointer, asAlpha);
    }

    private native void _setTreatLuminanceAsAlpha__bv(long _pointer_, boolean asAlpha);

    /** 
    Gets whether luminace pixel format will treated as alpha format when load this texture. **/
    public boolean getTreatLuminanceAsAlpha() {
         return _getTreatLuminanceAsAlpha_const(this.object.pointer);
    }

    private native boolean _getTreatLuminanceAsAlpha_const(long _pointer_);

    /** 
    Return the number of faces this texture has. This will be 6 for a cubemap texture and 1 for a 1D, 2D or 3D one. **/
    public int getNumFaces() {
         return _getNumFaces_const(this.object.pointer);
    }

    private native int _getNumFaces_const(long _pointer_);

    /** 
    Return hardware pixel buffer for a surface. This buffer can then be used to copy data from and to a particular level of the texture. **/
    public void getBuffer(org.ogre4j.IHardwarePixelBufferSharedPtr returnValue, int face, int mipmap) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getBuffer__iviv(this.object.pointer, face,  mipmap)), false);
    }

    private native long _getBuffer__iviv(long _pointer_, int face, int mipmap);

    /** 
    Prepares the resource for load, if it is not already. One can call  before , but this is not required as  will call  itself, if needed. When OGRE_THREAD_SUPPORT==1 both  and  are thread-safe. When OGRE_THREAD_SUPPORT==2 however, only  is thread-safe. The reason for this function is to allow a background thread to do some of the loading work, without requiring the whole render system to be thread-safe. The background thread would call  while the main render loop would later call . So long as  remains thread-safe, subclasses can arbitrarily split the work of loading a resource between  and . It is best to try and do as much work in , however, since this will leave less work for the main render thread to do and thus increase FPS. **/
    public void prepare() {
        _prepare(this.object.pointer);
    }

    private native void _prepare(long _pointer_);

    /** 
    Loads the resource, if it is not already. **/
    public void load(boolean backgroundThread) {
        _load__bv(this.object.pointer, backgroundThread);
    }

    private native void _load__bv(long _pointer_, boolean backgroundThread);

    /** 
    Reloads the resource, if it is already loaded. **/
    public void reload() {
        _reload(this.object.pointer);
    }

    private native void _reload(long _pointer_);

    /** 
    Returns true if the  is reloadable, false otherwise. **/
    public boolean isReloadable() {
         return _isReloadable_const(this.object.pointer);
    }

    private native boolean _isReloadable_const(long _pointer_);

    /** 
    Is this resource manually loaded? **/
    public boolean isManuallyLoaded() {
         return _isManuallyLoaded_const(this.object.pointer);
    }

    private native boolean _isManuallyLoaded_const(long _pointer_);

    /** 
    Unloads the resource; this is not permanent, the resource can be reloaded later if required. **/
    public void unload() {
        _unload(this.object.pointer);
    }

    private native void _unload(long _pointer_);

    /** 
    Retrieves info about the size of the resource. **/
    public int getSize() {
         return _getSize_const(this.object.pointer);
    }

    private native int _getSize_const(long _pointer_);

    /** 
    'Touches' the resource to indicate it has been used. **/
    public void touch() {
        _touch(this.object.pointer);
    }

    private native void _touch(long _pointer_);

    /** 
    Gets resource name. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** **/
    public long getHandle() {
         return _getHandle_const(this.object.pointer);
    }

    private native long _getHandle_const(long _pointer_);

    /** 
    Returns true if the  has been prepared, false otherwise. **/
    public boolean isPrepared() {
         return _isPrepared_const(this.object.pointer);
    }

    private native boolean _isPrepared_const(long _pointer_);

    /** 
    Returns true if the  has been loaded, false otherwise. **/
    public boolean isLoaded() {
         return _isLoaded_const(this.object.pointer);
    }

    private native boolean _isLoaded_const(long _pointer_);

    /** 
    Returns whether the resource is currently in the process of background loading. **/
    public boolean isLoading() {
         return _isLoading_const(this.object.pointer);
    }

    private native boolean _isLoading_const(long _pointer_);

    /** 
    Returns the current loading state. **/
    public org.ogre4j.Resource.LoadingState getLoadingState() {
         return org.ogre4j.Resource.LoadingState.toEnum(_getLoadingState_const(this.object.pointer));
    }

    private native int _getLoadingState_const(long _pointer_);

    /** 
    Returns whether this  has been earmarked for background loading. **/
    public boolean isBackgroundLoaded() {
         return _isBackgroundLoaded_const(this.object.pointer);
    }

    private native boolean _isBackgroundLoaded_const(long _pointer_);

    /** 
    Tells the resource whether it is background loaded or not. **/
    public void setBackgroundLoaded(boolean bl) {
        _setBackgroundLoaded__bv(this.object.pointer, bl);
    }

    private native void _setBackgroundLoaded__bv(long _pointer_, boolean bl);

    /** 
    Escalates the loading of a background loaded resource. **/
    public void escalateLoading() {
        _escalateLoading(this.object.pointer);
    }

    private native void _escalateLoading(long _pointer_);

    /** 
    Register a listener on this resource. **/
    public void addListener(org.ogre4j.IResource.IListener lis) {
        _addListener__Listenerp(this.object.pointer, lis.getInstancePointer().pointer);
    }

    private native void _addListener__Listenerp(long _pointer_, long lis);

    /** 
    Remove a listener on this resource. **/
    public void removeListener(org.ogre4j.IResource.IListener lis) {
        _removeListener__Listenerp(this.object.pointer, lis.getInstancePointer().pointer);
    }

    private native void _removeListener__Listenerp(long _pointer_, long lis);

    /** **/
    public String getGroup() {
         return _getGroup(this.object.pointer);
    }

    private native String _getGroup(long _pointer_);

    /** 
    Change the resource group ownership of a . **/
    public void changeGroupOwnership(String newGroup) {
        _changeGroupOwnership__StringR(this.object.pointer, newGroup);
    }

    private native void _changeGroupOwnership__StringR(long _pointer_, String newGroup);

    /** **/
    public org.ogre4j.IResourceManager getCreator() {
         return new org.ogre4j.ResourceManager(new InstancePointer(_getCreator(this.object.pointer)));
    }

    private native long _getCreator(long _pointer_);

    /** 
    Get the origin of this resource, e.g. a script file name. **/
    public String getOrigin() {
         return _getOrigin_const(this.object.pointer);
    }

    private native String _getOrigin_const(long _pointer_);

    /** **/
    public void _notifyOrigin(String origin) {
        __notifyOrigin__StringR(this.object.pointer, origin);
    }

    private native void __notifyOrigin__StringR(long _pointer_, String origin);

    /** 
    Returns the number of times this resource has changed state, which generally means the number of times it has been loaded. Objects that build derived data based on the resource can check this value against a copy they kept last time they built this derived data, in order to know whether it needs rebuilding. This is a nice way of monitoring changes without having a tightly-bound callback. **/
    public int getStateCount() {
         return _getStateCount_const(this.object.pointer);
    }

    private native int _getStateCount_const(long _pointer_);

    /** 
    Manually mark the state of this resource as having been changed. **/
    public void _dirtyState() {
        __dirtyState(this.object.pointer);
    }

    private native void __dirtyState(long _pointer_);

    /** 
    Firing of background loading complete event **/
    public void _fireBackgroundLoadingComplete() {
        __fireBackgroundLoadingComplete(this.object.pointer);
    }

    private native void __fireBackgroundLoadingComplete(long _pointer_);

    /** 
    Firing of background preparing complete event **/
    public void _fireBackgroundPreparingComplete() {
        __fireBackgroundPreparingComplete(this.object.pointer);
    }

    private native void __fireBackgroundPreparingComplete(long _pointer_);

    /** 
    Retrieves the parameter dictionary for this class. **/
    public org.ogre4j.IParamDictionary getParamDictionary() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary(this.object.pointer)));
    }

    private native long _getParamDictionary(long _pointer_);

    /** **/
    public org.ogre4j.IParamDictionary getParamDictionary_const() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary_const_const(this.object.pointer)));
    }

    private native long _getParamDictionary_const_const(long _pointer_);

    /** 
    Retrieves a list of parameters valid for this object. **/
    public org.ogre4j.IParameterList getParameters() {
         return new org.ogre4j.ParameterList(new InstancePointer(_getParameters_const(this.object.pointer)));
    }

    private native long _getParameters_const(long _pointer_);

    /** 
    Generic parameter setting method. **/
    public boolean setParameter(String name, String value) {
         return _setParameter__StringRStringR(this.object.pointer, name,  value);
    }

    private native boolean _setParameter__StringRStringR(long _pointer_, String name, String value);

    /** 
    Generic multiple parameter setting method. **/
    public void setParameterList(org.ogre4j.INameValuePairList paramList) {
        _setParameterList__NameValuePairListR(this.object.pointer, paramList.getInstancePointer().pointer);
    }

    private native void _setParameterList__NameValuePairListR(long _pointer_, long paramList);

    /** 
    Generic parameter retrieval method. **/
    public String getParameter(String name) {
         return _getParameter__StringR_const(this.object.pointer, name);
    }

    private native String _getParameter__StringR_const(long _pointer_, String name);

    /** 
    Method for copying this object's parameters to another object. **/
    public void copyParametersTo(org.ogre4j.IStringInterface dest) {
        _copyParametersTo__StringInterfacep_const(this.object.pointer, dest.getInstancePointer().pointer);
    }

    private native void _copyParametersTo__StringInterfacep_const(long _pointer_, long dest);

    /** 
    Cleans up the static 'msDictionary' required to reset , otherwise the containers are left with invalid pointers, which will lead to a crash as soon as one of the  implementers (e.g. ) initializes. **/
    public static void cleanupDictionary() {
        _cleanupDictionary();
    }

    private native static void _cleanupDictionary();

}
