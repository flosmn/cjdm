/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class CompositionTargetPass extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTargetPass {
static { System.loadLibrary("ogre4j");}
public enum InputMode implements INativeEnum < InputMode > {
    IM_NONE(InputModeHelper.ENUM_VALUES[0]),
    IM_PREVIOUS(InputModeHelper.ENUM_VALUES[1]);

    private int value;

    InputMode(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public InputMode getEnum(int val) {
        return toEnum(val);
    }

    public static final InputMode toEnum(int retval) {
    if (retval ==IM_NONE.value)
        return InputMode.IM_NONE;
    else if (retval ==IM_PREVIOUS.value)
        return InputMode.IM_PREVIOUS;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class InputModeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public static class Passes extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTargetPass.IPasses {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Passes(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Passes(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Passes(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Passes() {
         super( new org.xbig.base.InstancePointer(__createPasses()), false);
    }

    private native static long __createPasses();

    /** **/
    public void assign(int num, org.ogre4j.ICompositionPass val) {
        _assign__ivOgre_CompositionPassP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_CompositionPassP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ICompositionPass at(int loc) {
         return new org.ogre4j.CompositionPass(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ICompositionPass back() {
         return new org.ogre4j.CompositionPass(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionPass front() {
         return new org.ogre4j.CompositionPass(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ICompositionPass val) {
        _push_back__Ogre_CompositionPassP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_CompositionPassP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class PassIterator extends org.xbig.base.NativeObject implements org.ogre4j.ICompositionTargetPass.IPassIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PassIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PassIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PassIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PassIterator(org.ogre4j.ICompositionTargetPass.IPasses c) {
         super( new org.xbig.base.InstancePointer(__createPassIterator__Ogre_CompositionTargetPass_Passesr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createPassIterator__Ogre_CompositionTargetPass_Passesr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionPass getNext() {
         return new org.ogre4j.CompositionPass(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ICompositionPass peekNext() {
         return new org.ogre4j.CompositionPass(new InstancePointer(_peekNext(this.object.pointer)));
    }

    private native long _peekNext(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.ICompositionPass> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.ICompositionPass>(new InstancePointer(_peekNextPtr(this.object.pointer)));
    }

    private native long _peekNextPtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CompositionTargetPass(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CompositionTargetPass(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CompositionTargetPass(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CompositionTargetPass(org.ogre4j.ICompositionTechnique parent) {
         super( new org.xbig.base.InstancePointer(__createCompositionTargetPass__CompositionTechniquep( parent.getInstancePointer().pointer)), false);
    }

    private native static long __createCompositionTargetPass__CompositionTechniquep(long parent);

    /** 
    Set input mode of this TargetPass **/
    public void setInputMode(org.ogre4j.CompositionTargetPass.InputMode mode) {
        _setInputMode__InputModev(this.object.pointer, mode.getValue());
    }

    private native void _setInputMode__InputModev(long _pointer_, int mode);

    /** 
    Get input mode **/
    public org.ogre4j.CompositionTargetPass.InputMode getInputMode() {
         return org.ogre4j.CompositionTargetPass.InputMode.toEnum(_getInputMode_const(this.object.pointer));
    }

    private native int _getInputMode_const(long _pointer_);

    /** 
    Set output local texture name **/
    public void setOutputName(String out) {
        _setOutputName__StringR(this.object.pointer, out);
    }

    private native void _setOutputName__StringR(long _pointer_, String out);

    /** 
    Get output local texture name **/
    public String getOutputName() {
         return _getOutputName_const(this.object.pointer);
    }

    private native String _getOutputName_const(long _pointer_);

    /** 
    Set "only initial" flag. This makes that this target pass is only executed initially after the effect has been enabled. **/
    public void setOnlyInitial(boolean value) {
        _setOnlyInitial__bv(this.object.pointer, value);
    }

    private native void _setOnlyInitial__bv(long _pointer_, boolean value);

    /** 
    Get "only initial" flag. **/
    public boolean getOnlyInitial() {
         return _getOnlyInitial(this.object.pointer);
    }

    private native boolean _getOnlyInitial(long _pointer_);

    /** 
    Set the scene visibility mask used by this pass **/
    public void setVisibilityMask(long mask) {
        _setVisibilityMask__uint32v(this.object.pointer, mask);
    }

    private native void _setVisibilityMask__uint32v(long _pointer_, long mask);

    /** 
    Get the scene visibility mask used by this pass **/
    public long getVisibilityMask() {
         return _getVisibilityMask(this.object.pointer);
    }

    private native long _getVisibilityMask(long _pointer_);

    /** 
    Set the material scheme used by this target pass. **/
    public void setMaterialScheme(String schemeName) {
        _setMaterialScheme__StringR(this.object.pointer, schemeName);
    }

    private native void _setMaterialScheme__StringR(long _pointer_, String schemeName);

    /** 
    Get the material scheme used by this target pass. **/
    public String getMaterialScheme() {
         return _getMaterialScheme_const(this.object.pointer);
    }

    private native String _getMaterialScheme_const(long _pointer_);

    /** 
    Set whether shadows are enabled in this target pass. **/
    public void setShadowsEnabled(boolean enabled) {
        _setShadowsEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setShadowsEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Get whether shadows are enabled in this target pass. **/
    public boolean getShadowsEnabled() {
         return _getShadowsEnabled_const(this.object.pointer);
    }

    private native boolean _getShadowsEnabled_const(long _pointer_);

    /** 
    Set the scene LOD bias used by this pass. The default is 1.0, everything below that means lower quality, higher means higher quality. **/
    public void setLodBias(float bias) {
        _setLodBias__Fv(this.object.pointer, bias);
    }

    private native void _setLodBias__Fv(long _pointer_, float bias);

    /** 
    Get the scene LOD bias used by this pass **/
    public float getLodBias() {
         return _getLodBias(this.object.pointer);
    }

    private native float _getLodBias(long _pointer_);

    /** 
    Create a new pass, and return a pointer to it. **/
    public org.ogre4j.ICompositionPass createPass() {
         return new org.ogre4j.CompositionPass(new InstancePointer(_createPass(this.object.pointer)));
    }

    private native long _createPass(long _pointer_);

    /** 
    Remove a pass. It will also be destroyed. **/
    public void removePass(int idx) {
        _removePass__iv(this.object.pointer, idx);
    }

    private native void _removePass__iv(long _pointer_, int idx);

    /** 
    Get a pass. **/
    public org.ogre4j.ICompositionPass getPass(int idx) {
         return new org.ogre4j.CompositionPass(new InstancePointer(_getPass__iv(this.object.pointer, idx)));
    }

    private native long _getPass__iv(long _pointer_, int idx);

    /** 
    Get the number of passes. **/
    public int getNumPasses() {
         return _getNumPasses(this.object.pointer);
    }

    private native int _getNumPasses(long _pointer_);

    /** 
    Remove all passes **/
    public void removeAllPasses() {
        _removeAllPasses(this.object.pointer);
    }

    private native void _removeAllPasses(long _pointer_);

    /** 
    Get an iterator over the Passes in this TargetPass. **/
    public void getPassIterator(org.ogre4j.ICompositionTargetPass.IPassIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getPassIterator(this.object.pointer)), false);
    }

    private native long _getPassIterator(long _pointer_);

    /** 
    Get parent object **/
    public org.ogre4j.ICompositionTechnique getParent() {
         return new org.ogre4j.CompositionTechnique(new InstancePointer(_getParent(this.object.pointer)));
    }

    private native long _getParent(long _pointer_);

    /** 
    Determine if this target pass is supported on the current rendering device. **/
    public boolean _isSupported() {
         return __isSupported(this.object.pointer);
    }

    private native boolean __isSupported(long _pointer_);

}
