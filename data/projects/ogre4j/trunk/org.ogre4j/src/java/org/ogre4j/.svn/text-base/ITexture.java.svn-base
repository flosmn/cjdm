/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ITexture extends INativeObject, org.ogre4j.IResource {

    /** 
    Sets the type of texture; can only be changed before **/
    public void setTextureType(org.ogre4j.TextureType ttype);

    /** 
    Gets the type of texture **/
    public org.ogre4j.TextureType getTextureType();

    /** 
    Gets the number of mipmaps to be used for this texture. **/
    public int getNumMipmaps();

    /** 
    Sets the number of mipmaps to be used for this texture. **/
    public void setNumMipmaps(int num);

    /** 
    Are mipmaps hardware generated? **/
    public boolean getMipmapsHardwareGenerated();

    /** 
    Returns the gamma adjustment factor applied to this texture on loading. **/
    public float getGamma();

    /** 
    Sets the gamma adjustment factor applied to this texture on loading the data. **/
    public void setGamma(float g);

    /** 
    Sets whether this texture will be set up so that on sampling it, hardware gamma correction is applied. **/
    public void setHardwareGammaEnabled(boolean enabled);

    /** 
    Gets whether this texture will be set up so that on sampling it, hardware gamma correction is applied. **/
    public boolean isHardwareGammaEnabled();

    /** 
    Set the level of multisample AA to be used if this texture is a rendertarget. **/
    public void setFSAA(long fsaa);

    /** 
    Get the level of multisample AA to be used if this texture is a rendertarget. **/
    public long getFSAA();

    /** 
    Returns the height of the texture. **/
    public int getHeight();

    /** 
    Returns the width of the texture. **/
    public int getWidth();

    /** 
    Returns the depth of the texture (only applicable for 3D textures). **/
    public int getDepth();

    /** 
    Returns the height of the original input texture (may differ due to hardware requirements). **/
    public int getSrcHeight();

    /** 
    Returns the width of the original input texture (may differ due to hardware requirements). **/
    public int getSrcWidth();

    /** 
    Returns the original depth of the input texture (only applicable for 3D textures). **/
    public int getSrcDepth();

    /** 
    Set the height of the texture; can only do this before ; **/
    public void setHeight(int h);

    /** 
    Set the width of the texture; can only do this before ; **/
    public void setWidth(int w);

    /** 
    Set the depth of the texture (only applicable for 3D textures); ; can only do this before ; **/
    public void setDepth(int d);

    /** 
    Returns the TextureUsage indentifier for this **/
    public int getUsage();

    /** 
    Sets the TextureUsage indentifier for this ; only useful before 
    **/
    public void setUsage(int u);

    /** 
    Creates the internal texture resources for this texture. **/
    public void createInternalResources();

    /** 
    Frees internal texture resources for this texture. **/
    public void freeInternalResources();

    /** 
    Copies (and maybe scales to fit) the contents of this texture to another texture. **/
    public void copyToTexture(org.ogre4j.ITexturePtr target);

    /** 
    Loads the data from an image. **/
    public void loadImage(org.ogre4j.IImage img);

    /** 
    Loads the data from a raw stream. **/
    public void loadRawData(org.ogre4j.IDataStreamPtr stream, int uWidth, int uHeight, org.ogre4j.PixelFormat eFormat);

    /** 
    Internal method to load the texture from a set of images. **/
    public void _loadImages(org.ogre4j.IConstImagePtrList images);

    /** 
    Returns the pixel format for the texture surface. **/
    public org.ogre4j.PixelFormat getFormat();

    /** 
    Returns the desired pixel format for the texture surface. **/
    public org.ogre4j.PixelFormat getDesiredFormat();

    /** 
    Returns the pixel format of the original input texture (may differ due to hardware requirements and pixel format convertion). **/
    public org.ogre4j.PixelFormat getSrcFormat();

    /** 
    Sets the pixel format for the texture surface; can only be set before . **/
    public void setFormat(org.ogre4j.PixelFormat pf);

    /** 
    Returns true if the texture has an alpha layer. **/
    public boolean hasAlpha();

    /** 
    Sets desired bit depth for integer pixel format textures. **/
    public void setDesiredIntegerBitDepth(int bits);

    /** 
    gets desired bit depth for integer pixel format textures. **/
    public int getDesiredIntegerBitDepth();

    /** 
    Sets desired bit depth for float pixel format textures. **/
    public void setDesiredFloatBitDepth(int bits);

    /** 
    gets desired bit depth for float pixel format textures. **/
    public int getDesiredFloatBitDepth();

    /** 
    Sets desired bit depth for integer and float pixel format. **/
    public void setDesiredBitDepths(int integerBits, int floatBits);

    /** 
    Sets whether luminace pixel format will treated as alpha format when load this texture. **/
    public void setTreatLuminanceAsAlpha(boolean asAlpha);

    /** 
    Gets whether luminace pixel format will treated as alpha format when load this texture. **/
    public boolean getTreatLuminanceAsAlpha();

    /** 
    Return the number of faces this texture has. This will be 6 for a cubemap texture and 1 for a 1D, 2D or 3D one. **/
    public int getNumFaces();

    /** 
    Return hardware pixel buffer for a surface. This buffer can then be used to copy data from and to a particular level of the texture. **/
    public void getBuffer(org.ogre4j.IHardwarePixelBufferSharedPtr returnValue, int face, int mipmap);

}
