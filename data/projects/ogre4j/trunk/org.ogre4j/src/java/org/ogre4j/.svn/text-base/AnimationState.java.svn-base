/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class AnimationState extends org.xbig.base.NativeObject implements org.ogre4j.IAnimationState {
static { System.loadLibrary("ogre4j");}
public static class BoneBlendMask extends org.xbig.base.NativeObject implements org.ogre4j.IAnimationState.IBoneBlendMask {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public BoneBlendMask(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected BoneBlendMask(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public BoneBlendMask(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public BoneBlendMask() {
         super( new org.xbig.base.InstancePointer(__createBoneBlendMask()), false);
    }

    private native static long __createBoneBlendMask();

    /** **/
    public void assign(int num, float val) {
        _assign__ivFR(this.object.pointer, num,  val);
    }

    private native void _assign__ivFR(long _pointer_, int num, float val);

    /** **/
    public FloatPointer at(int loc) {
         return new FloatPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public FloatPointer back() {
         return new FloatPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public FloatPointer front() {
         return new FloatPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(float val) {
        _push_back__FR(this.object.pointer, val);
    }

    private native void _push_back__FR(long _pointer_, float val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AnimationState(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AnimationState(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AnimationState(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public AnimationState(String animName, org.ogre4j.IAnimationStateSet parent, float timePos, float length, float weight, boolean enabled) {
         super( new org.xbig.base.InstancePointer(__createAnimationState__StringRAnimationStateSetpRealvRealvRealvbv( animName,  parent.getInstancePointer().pointer,  timePos,  length,  weight,  enabled)), false);
    }

    private native static long __createAnimationState__StringRAnimationStateSetpRealvRealvRealvbv(String animName, long parent, float timePos, float length, float weight, boolean enabled);

    /** **/
    public AnimationState(org.ogre4j.IAnimationStateSet parent, org.ogre4j.IAnimationState rhs) {
         super( new org.xbig.base.InstancePointer(__createAnimationState__AnimationStateSetpAnimationStateR( parent.getInstancePointer().pointer,  rhs.getInstancePointer().pointer)), false);
    }

    private native static long __createAnimationState__AnimationStateSetpAnimationStateR(long parent, long rhs);

    /** **/
    public String getAnimationName() {
         return _getAnimationName_const(this.object.pointer);
    }

    private native String _getAnimationName_const(long _pointer_);

    /** **/
    public float getTimePosition() {
         return _getTimePosition_const(this.object.pointer);
    }

    private native float _getTimePosition_const(long _pointer_);

    /** **/
    public void setTimePosition(float timePos) {
        _setTimePosition__Realv(this.object.pointer, timePos);
    }

    private native void _setTimePosition__Realv(long _pointer_, float timePos);

    /** **/
    public float getLength() {
         return _getLength_const(this.object.pointer);
    }

    private native float _getLength_const(long _pointer_);

    /** **/
    public void setLength(float len) {
        _setLength__Realv(this.object.pointer, len);
    }

    private native void _setLength__Realv(long _pointer_, float len);

    /** **/
    public float getWeight() {
         return _getWeight_const(this.object.pointer);
    }

    private native float _getWeight_const(long _pointer_);

    /** **/
    public void setWeight(float weight) {
        _setWeight__Realv(this.object.pointer, weight);
    }

    private native void _setWeight__Realv(long _pointer_, float weight);

    /** 
    Modifies the time position, adjusting for animation length **/
    public void addTime(float offset) {
        _addTime__Realv(this.object.pointer, offset);
    }

    private native void _addTime__Realv(long _pointer_, float offset);

    /** **/
    public boolean hasEnded() {
         return _hasEnded_const(this.object.pointer);
    }

    private native boolean _hasEnded_const(long _pointer_);

    /** **/
    public boolean getEnabled() {
         return _getEnabled_const(this.object.pointer);
    }

    private native boolean _getEnabled_const(long _pointer_);

    /** **/
    public void setEnabled(boolean enabled) {
        _setEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean operatorEqual(org.ogre4j.IAnimationState rhs) {
         return _operatorEqual__AnimationStateR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__AnimationStateR_const(long _pointer_, long rhs);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IAnimationState rhs) {
         return _operatorNotEqual__AnimationStateR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__AnimationStateR_const(long _pointer_, long rhs);

    /** 
    Sets whether or not an animation loops at the start and end of the animation if the time continues to be altered. **/
    public void setLoop(boolean loop) {
        _setLoop__bv(this.object.pointer, loop);
    }

    private native void _setLoop__bv(long _pointer_, boolean loop);

    /** **/
    public boolean getLoop() {
         return _getLoop_const(this.object.pointer);
    }

    private native boolean _getLoop_const(long _pointer_);

    /** 
    Copies the states from another animation state, preserving the animation name (unlike operator=) but copying everything else. **/
    public void copyStateFrom(org.ogre4j.IAnimationState animState) {
        _copyStateFrom__AnimationStateR(this.object.pointer, animState.getInstancePointer().pointer);
    }

    private native void _copyStateFrom__AnimationStateR(long _pointer_, long animState);

    /** **/
    public org.ogre4j.IAnimationStateSet getParent() {
         return new org.ogre4j.AnimationStateSet(new InstancePointer(_getParent_const(this.object.pointer)));
    }

    private native long _getParent_const(long _pointer_);

    /** 
    In addition to assigning a single weight value to a skeletal animation, it may be desirable to assign animation weights per bone using a 'blend mask'.
    **/
    public void createBlendMask(int blendMaskSizeHint, float initialWeight) {
        _createBlendMask__ivFv(this.object.pointer, blendMaskSizeHint,  initialWeight);
    }

    private native void _createBlendMask__ivFv(long _pointer_, int blendMaskSizeHint, float initialWeight);

    /** **/
    public void destroyBlendMask() {
        _destroyBlendMask(this.object.pointer);
    }

    private native void _destroyBlendMask(long _pointer_);

    /** 
    **/
    public void _setBlendMaskData(FloatPointer blendMaskData) {
        __setBlendMaskData__FP(this.object.pointer, blendMaskData.object.pointer);
    }

    private native void __setBlendMaskData__FP(long _pointer_, long blendMaskData);

    /** 
    **/
    public void _setBlendMask(org.ogre4j.IAnimationState.IBoneBlendMask blendMask) {
        __setBlendMask__BoneBlendMaskP(this.object.pointer, blendMask.getInstancePointer().pointer);
    }

    private native void __setBlendMask__BoneBlendMaskP(long _pointer_, long blendMask);

    /** **/
    public org.ogre4j.IAnimationState.IBoneBlendMask getBlendMask() {
         return new org.ogre4j.AnimationState.BoneBlendMask(new InstancePointer(_getBlendMask_const(this.object.pointer)));
    }

    private native long _getBlendMask_const(long _pointer_);

    /** **/
    public boolean hasBlendMask() {
         return _hasBlendMask_const(this.object.pointer);
    }

    private native boolean _hasBlendMask_const(long _pointer_);

    /** **/
    public void setBlendMaskEntry(int boneHandle, float weight) {
        _setBlendMaskEntry__ivFv(this.object.pointer, boneHandle,  weight);
    }

    private native void _setBlendMaskEntry__ivFv(long _pointer_, int boneHandle, float weight);

    /** **/
    public float getBlendMaskEntry(int boneHandle) {
         return _getBlendMaskEntry__iv_const(this.object.pointer, boneHandle);
    }

    private native float _getBlendMaskEntry__iv_const(long _pointer_, int boneHandle);

}
