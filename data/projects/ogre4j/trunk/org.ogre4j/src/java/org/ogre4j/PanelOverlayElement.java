/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class PanelOverlayElement extends org.xbig.base.NativeObject implements org.ogre4j.IPanelOverlayElement {
static { System.loadLibrary("ogre4j");}
public static class CmdTiling extends org.xbig.base.NativeObject implements org.ogre4j.IPanelOverlayElement.ICmdTiling {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdTiling(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdTiling(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdTiling(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdTiling() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdTransparent extends org.xbig.base.NativeObject implements org.ogre4j.IPanelOverlayElement.ICmdTransparent {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdTransparent(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdTransparent(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdTransparent(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdTransparent() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdUVCoords extends org.xbig.base.NativeObject implements org.ogre4j.IPanelOverlayElement.ICmdUVCoords {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdUVCoords(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdUVCoords(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdUVCoords(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdUVCoords() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PanelOverlayElement(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PanelOverlayElement(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PanelOverlayElement(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Constructor. **/
    public PanelOverlayElement(String name) {
         super( new org.xbig.base.InstancePointer(__createPanelOverlayElement__StringR( name)), false);
    }

    private native static long __createPanelOverlayElement__StringR(String name);

    /** 
    Initialise **/
    public void initialise() {
        _initialise(this.object.pointer);
    }

    private native void _initialise(long _pointer_);

    /** 
    Sets the number of times textures should repeat. **/
    public void setTiling(float x, float y, int layer) {
        _setTiling__RealvRealvushortv(this.object.pointer, x,  y,  layer);
    }

    private native void _setTiling__RealvRealvushortv(long _pointer_, float x, float y, int layer);

    /** **/
    public float getTileX(int layer) {
         return _getTileX__ushortv_const(this.object.pointer, layer);
    }

    private native float _getTileX__ushortv_const(long _pointer_, int layer);

    /** 
    Gets the number of times the texture should repeat vertically. **/
    public float getTileY(int layer) {
         return _getTileY__ushortv_const(this.object.pointer, layer);
    }

    private native float _getTileY__ushortv_const(long _pointer_, int layer);

    /** 
    Sets the texture coordinates for the panel. **/
    public void setUV(float u1, float v1, float u2, float v2) {
        _setUV__RealvRealvRealvRealv(this.object.pointer, u1,  v1,  u2,  v2);
    }

    private native void _setUV__RealvRealvRealvRealv(long _pointer_, float u1, float v1, float u2, float v2);

    /** 
    Get the uv coordinates for the panel **/
    public void getUV(FloatPointer u1, FloatPointer v1, FloatPointer u2, FloatPointer v2) {
        _getUV__RealrRealrRealrRealr_const(this.object.pointer, u1.object.pointer,  v1.object.pointer,  u2.object.pointer,  v2.object.pointer);
    }

    private native void _getUV__RealrRealrRealrRealr_const(long _pointer_, long u1, long v1, long u2, long v2);

    /** 
    Sets whether this panel is transparent (used only as a grouping level), or if it is actually rendered. **/
    public void setTransparent(boolean isTransparent) {
        _setTransparent__bv(this.object.pointer, isTransparent);
    }

    private native void _setTransparent__bv(long _pointer_, boolean isTransparent);

    /** 
    Returns whether this panel is transparent. **/
    public boolean isTransparent() {
         return _isTransparent_const(this.object.pointer);
    }

    private native boolean _isTransparent_const(long _pointer_);

    /** 
    See . **/
    public String getTypeName() {
         return _getTypeName_const(this.object.pointer);
    }

    private native String _getTypeName_const(long _pointer_);

    /** 
    See . **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op) {
        _getRenderOperation__RenderOperationr(this.object.pointer, op.getInstancePointer().pointer);
    }

    private native void _getRenderOperation__RenderOperationr(long _pointer_, long op);

    /** 
    Overridden from **/
    public void setMaterialName(String matName) {
        _setMaterialName__StringR(this.object.pointer, matName);
    }

    private native void _setMaterialName__StringR(long _pointer_, String matName);

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** 
    Adds another  to this container. **/
    public void addChild(org.ogre4j.IOverlayElement elem) {
        _addChild__OverlayElementp(this.object.pointer, elem.getInstancePointer().pointer);
    }

    private native void _addChild__OverlayElementp(long _pointer_, long elem);

    /** 
    Adds another  to this container. **/
    public void addChildImpl(org.ogre4j.IOverlayElement elem) {
        _addChildImpl__OverlayElementp(this.object.pointer, elem.getInstancePointer().pointer);
    }

    private native void _addChildImpl__OverlayElementp(long _pointer_, long elem);

    /** 
    Add a nested container to this container. **/
    public void addChildImpl(org.ogre4j.IOverlayContainer cont) {
        _addChildImpl__OverlayContainerp(this.object.pointer, cont.getInstancePointer().pointer);
    }

    private native void _addChildImpl__OverlayContainerp(long _pointer_, long cont);

    /** 
    Removes a named element from this container. **/
    public void removeChild(String name) {
        _removeChild__StringR(this.object.pointer, name);
    }

    private native void _removeChild__StringR(long _pointer_, String name);

    /** 
    Gets the named child of this container. **/
    public org.ogre4j.IOverlayElement getChild(String name) {
         return new org.ogre4j.OverlayElement(new InstancePointer(_getChild__StringR(this.object.pointer, name)));
    }

    private native long _getChild__StringR(long _pointer_, String name);

    /** **/
    public void _addChild(org.ogre4j.IOverlayElement elem) {
        __addChild__OverlayElementp(this.object.pointer, elem.getInstancePointer().pointer);
    }

    private native void __addChild__OverlayElementp(long _pointer_, long elem);

    /** **/
    public void _removeChild(org.ogre4j.IOverlayElement elem) {
        __removeChild__OverlayElementp(this.object.pointer, elem.getInstancePointer().pointer);
    }

    private native void __removeChild__OverlayElementp(long _pointer_, long elem);

    /** **/
    public void _removeChild(String name) {
        __removeChild__StringR(this.object.pointer, name);
    }

    private native void __removeChild__StringR(long _pointer_, String name);

    /** 
    Gets an object for iterating over all the children of this object. **/
    public void getChildIterator(org.ogre4j.IOverlayContainer.IChildIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getChildIterator(this.object.pointer)), false);
    }

    private native long _getChildIterator(long _pointer_);

    /** 
    Gets an iterator for just the container children of this object. **/
    public void getChildContainerIterator(org.ogre4j.IOverlayContainer.IChildContainerIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getChildContainerIterator(this.object.pointer)), false);
    }

    private native long _getChildContainerIterator(long _pointer_);

    /** 
    Tell the object and its children to recalculate **/
    public void _positionsOutOfDate() {
        __positionsOutOfDate(this.object.pointer);
    }

    private native void __positionsOutOfDate(long _pointer_);

    /** 
    Overridden from . **/
    public void _update() {
        __update(this.object.pointer);
    }

    private native void __update(long _pointer_);

    /** 
    Overridden from . **/
    public int _notifyZOrder(int newZOrder) {
         return __notifyZOrder__ushortv(this.object.pointer, newZOrder);
    }

    private native int __notifyZOrder__ushortv(long _pointer_, int newZOrder);

    /** 
    Overridden from . **/
    public void _notifyViewport() {
        __notifyViewport(this.object.pointer);
    }

    private native void __notifyViewport(long _pointer_);

    /** 
    Overridden from . **/
    public void _notifyWorldTransforms(org.ogre4j.IMatrix4 xform) {
        __notifyWorldTransforms__Matrix4R(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void __notifyWorldTransforms__Matrix4R(long _pointer_, long xform);

    /** 
    Overridden from . **/
    public void _notifyParent(org.ogre4j.IOverlayContainer parent, org.ogre4j.IOverlay overlay) {
        __notifyParent__OverlayContainerpOverlayp(this.object.pointer, parent.getInstancePointer().pointer,  overlay.getInstancePointer().pointer);
    }

    private native void __notifyParent__OverlayContainerpOverlayp(long _pointer_, long parent, long overlay);

    /** 
    Overridden from . **/
    public boolean isContainer() {
         return _isContainer_const(this.object.pointer);
    }

    private native boolean _isContainer_const(long _pointer_);

    /** 
    Should this container pass events to their children **/
    public boolean isChildrenProcessEvents() {
         return _isChildrenProcessEvents_const(this.object.pointer);
    }

    private native boolean _isChildrenProcessEvents_const(long _pointer_);

    /** 
    Should this container pass events to their children **/
    public void setChildrenProcessEvents(boolean val) {
        _setChildrenProcessEvents__bv(this.object.pointer, val);
    }

    private native void _setChildrenProcessEvents__bv(long _pointer_, boolean val);

    /** 
    This returns a  at position x,y. **/
    public org.ogre4j.IOverlayElement findElementAt(float x, float y) {
         return new org.ogre4j.OverlayElement(new InstancePointer(_findElementAt__RealvRealv(this.object.pointer, x,  y)));
    }

    private native long _findElementAt__RealvRealv(long _pointer_, float x, float y);

    /** **/
    public void copyFromTemplate(org.ogre4j.IOverlayElement templateOverlay) {
        _copyFromTemplate__OverlayElementp(this.object.pointer, templateOverlay.getInstancePointer().pointer);
    }

    private native void _copyFromTemplate__OverlayElementp(long _pointer_, long templateOverlay);

    /** **/
    public org.ogre4j.IOverlayElement clone(String instanceName) {
         return new org.ogre4j.OverlayElement(new InstancePointer(_clone__StringR(this.object.pointer, instanceName)));
    }

    private native long _clone__StringR(long _pointer_, String instanceName);

    /** 
    Gets the name of this overlay. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Shows this element if it was hidden. **/
    public void show() {
        _show(this.object.pointer);
    }

    private native void _show(long _pointer_);

    /** 
    Hides this element if it was visible. **/
    public void hide() {
        _hide(this.object.pointer);
    }

    private native void _hide(long _pointer_);

    /** 
    Returns whether or not the element is visible. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** **/
    public boolean isEnabled() {
         return _isEnabled_const(this.object.pointer);
    }

    private native boolean _isEnabled_const(long _pointer_);

    /** **/
    public void setEnabled(boolean b) {
        _setEnabled__bv(this.object.pointer, b);
    }

    private native void _setEnabled__bv(long _pointer_, boolean b);

    /** 
    Sets the dimensions of this element in relation to the screen (1.0 = screen width/height). **/
    public void setDimensions(float width, float height) {
        _setDimensions__RealvRealv(this.object.pointer, width,  height);
    }

    private native void _setDimensions__RealvRealv(long _pointer_, float width, float height);

    /** 
    Sets the position of the top-left corner of the element, relative to the screen size (1.0 = screen width / height) **/
    public void setPosition(float left, float top) {
        _setPosition__RealvRealv(this.object.pointer, left,  top);
    }

    private native void _setPosition__RealvRealv(long _pointer_, float left, float top);

    /** 
    Sets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public void setWidth(float width) {
        _setWidth__Realv(this.object.pointer, width);
    }

    private native void _setWidth__Realv(long _pointer_, float width);

    /** 
    Gets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public float getWidth() {
         return _getWidth_const(this.object.pointer);
    }

    private native float _getWidth_const(long _pointer_);

    /** 
    Sets the height of this element in relation to the screen (where 1.0 = screen height) **/
    public void setHeight(float height) {
        _setHeight__Realv(this.object.pointer, height);
    }

    private native void _setHeight__Realv(long _pointer_, float height);

    /** 
    Gets the height of this element in relation to the screen (where 1.0 = screen height) **/
    public float getHeight() {
         return _getHeight_const(this.object.pointer);
    }

    private native float _getHeight_const(long _pointer_);

    /** 
    Sets the left of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public void setLeft(float left) {
        _setLeft__Realv(this.object.pointer, left);
    }

    private native void _setLeft__Realv(long _pointer_, float left);

    /** 
    Gets the left of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public float getLeft() {
         return _getLeft_const(this.object.pointer);
    }

    private native float _getLeft_const(long _pointer_);

    /** 
    Sets the top of this element in relation to the screen (where 0 = top, 1.0 = bottom) **/
    public void setTop(float Top) {
        _setTop__Realv(this.object.pointer, Top);
    }

    private native void _setTop__Realv(long _pointer_, float Top);

    /** 
    Gets the top of this element in relation to the screen (where 0 = top, 1.0 = bottom) **/
    public float getTop() {
         return _getTop_const(this.object.pointer);
    }

    private native float _getTop_const(long _pointer_);

    /** 
    Gets the left of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public float _getLeft() {
         return __getLeft_const(this.object.pointer);
    }

    private native float __getLeft_const(long _pointer_);

    /** 
    Gets the top of this element in relation to the screen (where 0 = far left, 1.0 = far right) **/
    public float _getTop() {
         return __getTop_const(this.object.pointer);
    }

    private native float __getTop_const(long _pointer_);

    /** 
    Gets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public float _getWidth() {
         return __getWidth_const(this.object.pointer);
    }

    private native float __getWidth_const(long _pointer_);

    /** 
    Gets the height of this element in relation to the screen (where 1.0 = screen height) **/
    public float _getHeight() {
         return __getHeight_const(this.object.pointer);
    }

    private native float __getHeight_const(long _pointer_);

    /** 
    Sets the left of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setLeft(float left) {
        __setLeft__Realv(this.object.pointer, left);
    }

    private native void __setLeft__Realv(long _pointer_, float left);

    /** 
    Sets the top of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setTop(float top) {
        __setTop__Realv(this.object.pointer, top);
    }

    private native void __setTop__Realv(long _pointer_, float top);

    /** 
    Sets the width of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setWidth(float width) {
        __setWidth__Realv(this.object.pointer, width);
    }

    private native void __setWidth__Realv(long _pointer_, float width);

    /** 
    Sets the height of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setHeight(float height) {
        __setHeight__Realv(this.object.pointer, height);
    }

    private native void __setHeight__Realv(long _pointer_, float height);

    /** 
    Sets the left and top of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setPosition(float left, float top) {
        __setPosition__RealvRealv(this.object.pointer, left,  top);
    }

    private native void __setPosition__RealvRealv(long _pointer_, float left, float top);

    /** 
    Sets the width and height of this element in relation to the screen (where 1.0 = screen width) **/
    public void _setDimensions(float width, float height) {
        __setDimensions__RealvRealv(this.object.pointer, width,  height);
    }

    private native void __setDimensions__RealvRealv(long _pointer_, float width, float height);

    /** 
    Gets the name of the material this element uses. **/
    public String getMaterialName() {
         return _getMaterialName_const(this.object.pointer);
    }

    private native String _getMaterialName_const(long _pointer_);

    /** 
    See **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** 
    See **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform) {
        _getWorldTransforms__Matrix4p_const(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void _getWorldTransforms__Matrix4p_const(long _pointer_, long xform);

    /** 
    Updates this elements transform based on it's parent. **/
    public void _updateFromParent() {
        __updateFromParent(this.object.pointer);
    }

    private native void __updateFromParent(long _pointer_);

    /** 
    Gets the 'left' position as derived from own left and that of parents. **/
    public float _getDerivedLeft() {
         return __getDerivedLeft(this.object.pointer);
    }

    private native float __getDerivedLeft(long _pointer_);

    /** 
    Gets the 'top' position as derived from own left and that of parents. **/
    public float _getDerivedTop() {
         return __getDerivedTop(this.object.pointer);
    }

    private native float __getDerivedTop(long _pointer_);

    /** 
    Gets the 'width' as derived from own width and metrics mode. **/
    public float _getRelativeWidth() {
         return __getRelativeWidth(this.object.pointer);
    }

    private native float __getRelativeWidth(long _pointer_);

    /** 
    Gets the 'height' as derived from own height and metrics mode. **/
    public float _getRelativeHeight() {
         return __getRelativeHeight(this.object.pointer);
    }

    private native float __getRelativeHeight(long _pointer_);

    /** 
    Gets the clipping region of the element **/
    public void _getClippingRegion(org.ogre4j.IRectangle clippingRegion) {
        __getClippingRegion__Rectangler(this.object.pointer, clippingRegion.getInstancePointer().pointer);
    }

    private native void __getClippingRegion__Rectangler(long _pointer_, long clippingRegion);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Sets the caption on elements that support it. **/
    public void setCaption(org.ogre4j.IUTFString text) {
        _setCaption__DisplayStringR(this.object.pointer, text.getInstancePointer().pointer);
    }

    private native void _setCaption__DisplayStringR(long _pointer_, long text);

    /** 
    Gets the caption for this element. **/
    public org.ogre4j.IUTFString getCaption() {
         return new org.ogre4j.UTFString(new InstancePointer(_getCaption_const(this.object.pointer)));
    }

    private native long _getCaption_const(long _pointer_);

    /** 
    Sets the colour on elements that support it. **/
    public void setColour(org.ogre4j.IColourValue col) {
        _setColour__ColourValueR(this.object.pointer, col.getInstancePointer().pointer);
    }

    private native void _setColour__ColourValueR(long _pointer_, long col);

    /** 
    Gets the colour for this element. **/
    public org.ogre4j.IColourValue getColour() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getColour_const(this.object.pointer)));
    }

    private native long _getColour_const(long _pointer_);

    /** 
    Tells this element how to interpret the position and dimension values it is given. **/
    public void setMetricsMode(org.ogre4j.GuiMetricsMode gmm) {
        _setMetricsMode__GuiMetricsModev(this.object.pointer, gmm.getValue());
    }

    private native void _setMetricsMode__GuiMetricsModev(long _pointer_, int gmm);

    /** 
    Retrieves the current settings of how the element metrics are interpreted. **/
    public org.ogre4j.GuiMetricsMode getMetricsMode() {
         return org.ogre4j.GuiMetricsMode.toEnum(_getMetricsMode_const(this.object.pointer));
    }

    private native int _getMetricsMode_const(long _pointer_);

    /** 
    Sets the horizontal origin for this element. **/
    public void setHorizontalAlignment(org.ogre4j.GuiHorizontalAlignment gha) {
        _setHorizontalAlignment__GuiHorizontalAlignmentv(this.object.pointer, gha.getValue());
    }

    private native void _setHorizontalAlignment__GuiHorizontalAlignmentv(long _pointer_, int gha);

    /** 
    Gets the horizontal alignment for this element. **/
    public org.ogre4j.GuiHorizontalAlignment getHorizontalAlignment() {
         return org.ogre4j.GuiHorizontalAlignment.toEnum(_getHorizontalAlignment_const(this.object.pointer));
    }

    private native int _getHorizontalAlignment_const(long _pointer_);

    /** 
    Sets the vertical origin for this element. **/
    public void setVerticalAlignment(org.ogre4j.GuiVerticalAlignment gva) {
        _setVerticalAlignment__GuiVerticalAlignmentv(this.object.pointer, gva.getValue());
    }

    private native void _setVerticalAlignment__GuiVerticalAlignmentv(long _pointer_, int gva);

    /** 
    Gets the vertical alignment for this element. **/
    public org.ogre4j.GuiVerticalAlignment getVerticalAlignment() {
         return org.ogre4j.GuiVerticalAlignment.toEnum(_getVerticalAlignment_const(this.object.pointer));
    }

    private native int _getVerticalAlignment_const(long _pointer_);

    /** 
    Returns true if xy is within the constraints of the component **/
    public boolean contains(float x, float y) {
         return _contains__RealvRealv_const(this.object.pointer, x,  y);
    }

    private native boolean _contains__RealvRealv_const(long _pointer_, float x, float y);

    /** **/
    public boolean isKeyEnabled() {
         return _isKeyEnabled_const(this.object.pointer);
    }

    private native boolean _isKeyEnabled_const(long _pointer_);

    /** **/
    public boolean isCloneable() {
         return _isCloneable_const(this.object.pointer);
    }

    private native boolean _isCloneable_const(long _pointer_);

    /** **/
    public void setCloneable(boolean c) {
        _setCloneable__bv(this.object.pointer, c);
    }

    private native void _setCloneable__bv(long _pointer_, boolean c);

    /** 
    Returns the parent container. **/
    public org.ogre4j.IOverlayContainer getParent() {
         return new org.ogre4j.OverlayContainer(new InstancePointer(_getParent(this.object.pointer)));
    }

    private native long _getParent(long _pointer_);

    /** **/
    public void _setParent(org.ogre4j.IOverlayContainer parent) {
        __setParent__OverlayContainerp(this.object.pointer, parent.getInstancePointer().pointer);
    }

    private native void __setParent__OverlayContainerp(long _pointer_, long parent);

    /** 
    Returns the zOrder of the element **/
    public int getZOrder() {
         return _getZOrder_const(this.object.pointer);
    }

    private native int _getZOrder_const(long _pointer_);

    /** 
    Overridden from **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam) {
         return _getSquaredViewDepth__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native float _getSquaredViewDepth__CameraP_const(long _pointer_, long cam);

    /** 
    **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** **/
    public org.ogre4j.IOverlayElement getSourceTemplate() {
         return new org.ogre4j.OverlayElement(new InstancePointer(_getSourceTemplate_const(this.object.pointer)));
    }

    private native long _getSourceTemplate_const(long _pointer_);

    /** 
    Retrieves the parameter dictionary for this class. **/
    public org.ogre4j.IParamDictionary getParamDictionary() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary(this.object.pointer)));
    }

    private native long _getParamDictionary(long _pointer_);

    /** **/
    public org.ogre4j.IParamDictionary getParamDictionary_const() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary_const_const(this.object.pointer)));
    }

    private native long _getParamDictionary_const_const(long _pointer_);

    /** 
    Retrieves a list of parameters valid for this object. **/
    public org.ogre4j.IParameterList getParameters() {
         return new org.ogre4j.ParameterList(new InstancePointer(_getParameters_const(this.object.pointer)));
    }

    private native long _getParameters_const(long _pointer_);

    /** 
    Generic parameter setting method. **/
    public boolean setParameter(String name, String value) {
         return _setParameter__StringRStringR(this.object.pointer, name,  value);
    }

    private native boolean _setParameter__StringRStringR(long _pointer_, String name, String value);

    /** 
    Generic multiple parameter setting method. **/
    public void setParameterList(org.ogre4j.INameValuePairList paramList) {
        _setParameterList__NameValuePairListR(this.object.pointer, paramList.getInstancePointer().pointer);
    }

    private native void _setParameterList__NameValuePairListR(long _pointer_, long paramList);

    /** 
    Generic parameter retrieval method. **/
    public String getParameter(String name) {
         return _getParameter__StringR_const(this.object.pointer, name);
    }

    private native String _getParameter__StringR_const(long _pointer_, String name);

    /** 
    Method for copying this object's parameters to another object. **/
    public void copyParametersTo(org.ogre4j.IStringInterface dest) {
        _copyParametersTo__StringInterfacep_const(this.object.pointer, dest.getInstancePointer().pointer);
    }

    private native void _copyParametersTo__StringInterfacep_const(long _pointer_, long dest);

    /** 
    Cleans up the static 'msDictionary' required to reset , otherwise the containers are left with invalid pointers, which will lead to a crash as soon as one of the  implementers (e.g. ) initializes. **/
    public static void cleanupDictionary() {
        _cleanupDictionary();
    }

    private native static void _cleanupDictionary();

    /** 
    Retrieves a pointer to the  this renderable object uses. **/
    public org.ogre4j.ITechnique getTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getTechnique_const(this.object.pointer)));
    }

    private native long _getTechnique_const(long _pointer_);

    /** 
    Called just prior to the  being rendered. **/
    public boolean preRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
         return _preRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native boolean _preRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Called immediately after the  has been rendered. **/
    public void postRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
        _postRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native void _postRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Returns the number of world transform matrices this renderable requires. **/
    public int getNumWorldTransforms() {
         return _getNumWorldTransforms_const(this.object.pointer);
    }

    private native int _getNumWorldTransforms_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Method which reports whether this renderable would normally cast a shadow. **/
    public boolean getCastsShadows() {
         return _getCastsShadows_const(this.object.pointer);
    }

    private native boolean _getCastsShadows_const(long _pointer_);

    /** 
    Sets a custom parameter for this , which may be used to drive calculations for this specific , like GPU program parameters. **/
    public void setCustomParameter(int index, org.ogre4j.IVector4 value) {
        _setCustomParameter__ivVector4R(this.object.pointer, index,  value.getInstancePointer().pointer);
    }

    private native void _setCustomParameter__ivVector4R(long _pointer_, int index, long value);

    /** 
    Gets the custom value associated with this  at the given index. **/
    public org.ogre4j.IVector4 getCustomParameter(int index) {
         return new org.ogre4j.Vector4(new InstancePointer(_getCustomParameter__iv_const(this.object.pointer, index)));
    }

    private native long _getCustomParameter__iv_const(long _pointer_, int index);

    /** 
    Update a custom  constant which is derived from information only this  knows. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params) {
        __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(this.object.pointer, constantEntry.getInstancePointer().pointer,  params.getInstancePointer().pointer);
    }

    private native void __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(long _pointer_, long constantEntry, long params);

    /** 
    Sets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets render system private data **/
    public org.ogre4j.IRenderable.IRenderSystemData getRenderSystemData() {
         return new org.ogre4j.Renderable.RenderSystemData(new InstancePointer(_getRenderSystemData_const(this.object.pointer)));
    }

    private native long _getRenderSystemData_const(long _pointer_);

    /** 
    gets render system private data **/
    public void setRenderSystemData(org.ogre4j.IRenderable.IRenderSystemData val) {
        _setRenderSystemData__RenderSystemDatap_const(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setRenderSystemData__RenderSystemDatap_const(long _pointer_, long val);

}
