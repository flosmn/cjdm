/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Pass extends org.xbig.base.NativeObject implements org.ogre4j.IPass {
static { System.loadLibrary("ogre4j");}
public static class HashFunc extends org.xbig.base.NativeObject implements org.ogre4j.IPass.IHashFunc {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public HashFunc(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected HashFunc(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public HashFunc(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public long operatorFunctionCall(org.ogre4j.IPass p) {
         return _operatorFunctionCall__PassP_const(this.object.pointer, p.getInstancePointer().pointer);
    }

    private native long _operatorFunctionCall__PassP_const(long _pointer_, long p);

}
public enum BuiltinHashFunction implements INativeEnum < BuiltinHashFunction > {
    MIN_TEXTURE_CHANGE(BuiltinHashFunctionHelper.ENUM_VALUES[0]),
    MIN_GPU_PROGRAM_CHANGE(BuiltinHashFunctionHelper.ENUM_VALUES[1]);

    private int value;

    BuiltinHashFunction(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public BuiltinHashFunction getEnum(int val) {
        return toEnum(val);
    }

    public static final BuiltinHashFunction toEnum(int retval) {
    if (retval ==MIN_TEXTURE_CHANGE.value)
        return BuiltinHashFunction.MIN_TEXTURE_CHANGE;
    else if (retval ==MIN_GPU_PROGRAM_CHANGE.value)
        return BuiltinHashFunction.MIN_GPU_PROGRAM_CHANGE;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class BuiltinHashFunctionHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public static class PassSet extends org.xbig.base.NativeObject implements org.ogre4j.IPass.IPassSet {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PassSet(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PassSet(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PassSet(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PassSet() {
         super( new org.xbig.base.InstancePointer(__createPassSet()), false);
    }

    private native static long __createPassSet();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IPass key) {
         return _count__Ogre_PassP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_PassP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IPass key) {
         return _erase__Ogre_PassP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_PassP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
public static class TextureUnitStateIterator extends org.xbig.base.NativeObject implements org.ogre4j.IPass.ITextureUnitStateIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TextureUnitStateIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TextureUnitStateIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TextureUnitStateIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ITextureUnitState getNext() {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ITextureUnitState peekNext() {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_peekNext(this.object.pointer)));
    }

    private native long _peekNext(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.ITextureUnitState> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.ITextureUnitState>(new InstancePointer(_peekNextPtr(this.object.pointer)));
    }

    private native long _peekNextPtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class ConstTextureUnitStateIterator extends org.xbig.base.NativeObject implements org.ogre4j.IPass.IConstTextureUnitStateIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ConstTextureUnitStateIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ConstTextureUnitStateIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ConstTextureUnitStateIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ITextureUnitState getNext() {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ITextureUnitState peekNext() {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_peekNext_const(this.object.pointer)));
    }

    private native long _peekNext_const(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.ITextureUnitState> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.ITextureUnitState>(new InstancePointer(_peekNextPtr_const(this.object.pointer)));
    }

    private native long _peekNextPtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
protected static class TextureUnitStates extends org.xbig.base.NativeObject implements org.ogre4j.IPass.ITextureUnitStates {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TextureUnitStates(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TextureUnitStates(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TextureUnitStates(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TextureUnitStates() {
         super( new org.xbig.base.InstancePointer(__createTextureUnitStates()), false);
    }

    private native static long __createTextureUnitStates();

    /** **/
    public void assign(int num, org.ogre4j.ITextureUnitState val) {
        _assign__ivOgre_TextureUnitStateP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_TextureUnitStateP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ITextureUnitState at(int loc) {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ITextureUnitState back() {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ITextureUnitState front() {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ITextureUnitState val) {
        _push_back__Ogre_TextureUnitStateP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_TextureUnitStateP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class ContentTypeLookup extends org.xbig.base.NativeObject implements org.ogre4j.IPass.IContentTypeLookup {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ContentTypeLookup(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ContentTypeLookup(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ContentTypeLookup(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ContentTypeLookup() {
         super( new org.xbig.base.InstancePointer(__createContentTypeLookup()), false);
    }

    private native static long __createContentTypeLookup();

    /** **/
    public void assign(int num, int val) {
        _assign__ivHR(this.object.pointer, num,  val);
    }

    private native void _assign__ivHR(long _pointer_, int num, int val);

    /** **/
    public IntegerPointer at(int loc) {
         return new IntegerPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public IntegerPointer back() {
         return new IntegerPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public IntegerPointer front() {
         return new IntegerPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(int val) {
        _push_back__HR(this.object.pointer, val);
    }

    private native void _push_back__HR(long _pointer_, int val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Pass(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Pass(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Pass(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Pass(org.ogre4j.ITechnique parent, int index) {
         super( new org.xbig.base.InstancePointer(__createPass__TechniquepHv( parent.getInstancePointer().pointer,  index)), false);
    }

    private native static long __createPass__TechniquepHv(long parent, int index);

    /** **/
    public Pass(org.ogre4j.ITechnique parent, int index, org.ogre4j.IPass oth) {
         super( new org.xbig.base.InstancePointer(__createPass__TechniquepHvPassR( parent.getInstancePointer().pointer,  index,  oth.getInstancePointer().pointer)), false);
    }

    private native static long __createPass__TechniquepHvPassR(long parent, int index, long oth);

    /** **/
    public org.ogre4j.IPass operatorAssignment(org.ogre4j.IPass oth) {
         return new org.ogre4j.Pass(new InstancePointer(_operatorAssignment__PassR(this.object.pointer, oth.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__PassR(long _pointer_, long oth);

    /** **/
    public boolean isProgrammable() {
         return _isProgrammable_const(this.object.pointer);
    }

    private native boolean _isProgrammable_const(long _pointer_);

    /** **/
    public boolean hasVertexProgram() {
         return _hasVertexProgram_const(this.object.pointer);
    }

    private native boolean _hasVertexProgram_const(long _pointer_);

    /** **/
    public boolean hasFragmentProgram() {
         return _hasFragmentProgram_const(this.object.pointer);
    }

    private native boolean _hasFragmentProgram_const(long _pointer_);

    /** **/
    public boolean hasGeometryProgram() {
         return _hasGeometryProgram_const(this.object.pointer);
    }

    private native boolean _hasGeometryProgram_const(long _pointer_);

    /** **/
    public boolean hasShadowCasterVertexProgram() {
         return _hasShadowCasterVertexProgram_const(this.object.pointer);
    }

    private native boolean _hasShadowCasterVertexProgram_const(long _pointer_);

    /** **/
    public boolean hasShadowReceiverVertexProgram() {
         return _hasShadowReceiverVertexProgram_const(this.object.pointer);
    }

    private native boolean _hasShadowReceiverVertexProgram_const(long _pointer_);

    /** **/
    public boolean hasShadowReceiverFragmentProgram() {
         return _hasShadowReceiverFragmentProgram_const(this.object.pointer);
    }

    private native boolean _hasShadowReceiverFragmentProgram_const(long _pointer_);

    /** **/
    public int getIndex() {
         return _getIndex_const(this.object.pointer);
    }

    private native int _getIndex_const(long _pointer_);

    /** **/
    public void setName(String name) {
        _setName__StringR(this.object.pointer, name);
    }

    private native void _setName__StringR(long _pointer_, String name);

    /** **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Sets the ambient colour reflectance properties of this pass. **/
    public void setAmbient(float red, float green, float blue) {
        _setAmbient__RealvRealvRealv(this.object.pointer, red,  green,  blue);
    }

    private native void _setAmbient__RealvRealvRealv(long _pointer_, float red, float green, float blue);

    /** 
    Sets the ambient colour reflectance properties of this pass. **/
    public void setAmbient(org.ogre4j.IColourValue ambient) {
        _setAmbient__ColourValueR(this.object.pointer, ambient.getInstancePointer().pointer);
    }

    private native void _setAmbient__ColourValueR(long _pointer_, long ambient);

    /** 
    Sets the diffuse colour reflectance properties of this pass. **/
    public void setDiffuse(float red, float green, float blue, float alpha) {
        _setDiffuse__RealvRealvRealvRealv(this.object.pointer, red,  green,  blue,  alpha);
    }

    private native void _setDiffuse__RealvRealvRealvRealv(long _pointer_, float red, float green, float blue, float alpha);

    /** 
    Sets the diffuse colour reflectance properties of this pass. **/
    public void setDiffuse(org.ogre4j.IColourValue diffuse) {
        _setDiffuse__ColourValueR(this.object.pointer, diffuse.getInstancePointer().pointer);
    }

    private native void _setDiffuse__ColourValueR(long _pointer_, long diffuse);

    /** 
    Sets the specular colour reflectance properties of this pass. **/
    public void setSpecular(float red, float green, float blue, float alpha) {
        _setSpecular__RealvRealvRealvRealv(this.object.pointer, red,  green,  blue,  alpha);
    }

    private native void _setSpecular__RealvRealvRealvRealv(long _pointer_, float red, float green, float blue, float alpha);

    /** 
    Sets the specular colour reflectance properties of this pass. **/
    public void setSpecular(org.ogre4j.IColourValue specular) {
        _setSpecular__ColourValueR(this.object.pointer, specular.getInstancePointer().pointer);
    }

    private native void _setSpecular__ColourValueR(long _pointer_, long specular);

    /** 
    Sets the shininess of the pass, affecting the size of specular highlights. **/
    public void setShininess(float val) {
        _setShininess__Realv(this.object.pointer, val);
    }

    private native void _setShininess__Realv(long _pointer_, float val);

    /** 
    Sets the amount of self-illumination an object has. **/
    public void setSelfIllumination(float red, float green, float blue) {
        _setSelfIllumination__RealvRealvRealv(this.object.pointer, red,  green,  blue);
    }

    private native void _setSelfIllumination__RealvRealvRealv(long _pointer_, float red, float green, float blue);

    /** 
    Sets the amount of self-illumination an object has. **/
    public void setSelfIllumination(org.ogre4j.IColourValue selfIllum) {
        _setSelfIllumination__ColourValueR(this.object.pointer, selfIllum.getInstancePointer().pointer);
    }

    private native void _setSelfIllumination__ColourValueR(long _pointer_, long selfIllum);

    /** 
    Sets which material properties follow the vertex colour **/
    public void setVertexColourTracking(int tracking) {
        _setVertexColourTracking__TrackVertexColourTypev(this.object.pointer, tracking);
    }

    private native void _setVertexColourTracking__TrackVertexColourTypev(long _pointer_, int tracking);

    /** 
    Gets the point size of the pass. **/
    public float getPointSize() {
         return _getPointSize_const(this.object.pointer);
    }

    private native float _getPointSize_const(long _pointer_);

    /** 
    Sets the point size of this pass. **/
    public void setPointSize(float ps) {
        _setPointSize__Realv(this.object.pointer, ps);
    }

    private native void _setPointSize__Realv(long _pointer_, float ps);

    /** 
    Sets whether or not rendering points using OT_POINT_LIST will render point sprites (textured quads) or plain points (dots). **/
    public void setPointSpritesEnabled(boolean enabled) {
        _setPointSpritesEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setPointSpritesEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether point sprites are enabled when rendering a point list. **/
    public boolean getPointSpritesEnabled() {
         return _getPointSpritesEnabled_const(this.object.pointer);
    }

    private native boolean _getPointSpritesEnabled_const(long _pointer_);

    /** 
    Sets how points are attenuated with distance. **/
    public void setPointAttenuation(boolean enabled, float constant, float linear, float quadratic) {
        _setPointAttenuation__bvRealvRealvRealv(this.object.pointer, enabled,  constant,  linear,  quadratic);
    }

    private native void _setPointAttenuation__bvRealvRealvRealv(long _pointer_, boolean enabled, float constant, float linear, float quadratic);

    /** 
    Returns whether points are attenuated with distance. **/
    public boolean isPointAttenuationEnabled() {
         return _isPointAttenuationEnabled_const(this.object.pointer);
    }

    private native boolean _isPointAttenuationEnabled_const(long _pointer_);

    /** 
    Returns the constant coefficient of point attenuation. **/
    public float getPointAttenuationConstant() {
         return _getPointAttenuationConstant_const(this.object.pointer);
    }

    private native float _getPointAttenuationConstant_const(long _pointer_);

    /** 
    Returns the linear coefficient of point attenuation. **/
    public float getPointAttenuationLinear() {
         return _getPointAttenuationLinear_const(this.object.pointer);
    }

    private native float _getPointAttenuationLinear_const(long _pointer_);

    /** 
    Returns the quadratic coefficient of point attenuation. **/
    public float getPointAttenuationQuadratic() {
         return _getPointAttenuationQuadratic_const(this.object.pointer);
    }

    private native float _getPointAttenuationQuadratic_const(long _pointer_);

    /** 
    Set the minimum point size, when point attenuation is in use. **/
    public void setPointMinSize(float _min) {
        _setPointMinSize__Realv(this.object.pointer, _min);
    }

    private native void _setPointMinSize__Realv(long _pointer_, float _min);

    /** 
    Get the minimum point size, when point attenuation is in use. **/
    public float getPointMinSize() {
         return _getPointMinSize_const(this.object.pointer);
    }

    private native float _getPointMinSize_const(long _pointer_);

    /** 
    Set the maximum point size, when point attenuation is in use. **/
    public void setPointMaxSize(float _max) {
        _setPointMaxSize__Realv(this.object.pointer, _max);
    }

    private native void _setPointMaxSize__Realv(long _pointer_, float _max);

    /** 
    Get the maximum point size, when point attenuation is in use. **/
    public float getPointMaxSize() {
         return _getPointMaxSize_const(this.object.pointer);
    }

    private native float _getPointMaxSize_const(long _pointer_);

    /** 
    Gets the ambient colour reflectance of the pass. **/
    public org.ogre4j.IColourValue getAmbient() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getAmbient_const(this.object.pointer)));
    }

    private native long _getAmbient_const(long _pointer_);

    /** 
    Gets the diffuse colour reflectance of the pass. **/
    public org.ogre4j.IColourValue getDiffuse() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getDiffuse_const(this.object.pointer)));
    }

    private native long _getDiffuse_const(long _pointer_);

    /** 
    Gets the specular colour reflectance of the pass. **/
    public org.ogre4j.IColourValue getSpecular() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getSpecular_const(this.object.pointer)));
    }

    private native long _getSpecular_const(long _pointer_);

    /** 
    Gets the self illumination colour of the pass. **/
    public org.ogre4j.IColourValue getSelfIllumination() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getSelfIllumination_const(this.object.pointer)));
    }

    private native long _getSelfIllumination_const(long _pointer_);

    /** 
    Gets the 'shininess' property of the pass (affects specular highlights). **/
    public float getShininess() {
         return _getShininess_const(this.object.pointer);
    }

    private native float _getShininess_const(long _pointer_);

    /** 
    Gets which material properties follow the vertex colour **/
    public int getVertexColourTracking() {
         return _getVertexColourTracking_const(this.object.pointer);
    }

    private native int _getVertexColourTracking_const(long _pointer_);

    /** 
    Inserts a new  object into the . **/
    public org.ogre4j.ITextureUnitState createTextureUnitState() {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_createTextureUnitState(this.object.pointer)));
    }

    private native long _createTextureUnitState(long _pointer_);

    /** 
    Inserts a new  object into the . **/
    public org.ogre4j.ITextureUnitState createTextureUnitState(String textureName, int texCoordSet) {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_createTextureUnitState__StringRHv(this.object.pointer, textureName,  texCoordSet)));
    }

    private native long _createTextureUnitState__StringRHv(long _pointer_, String textureName, int texCoordSet);

    /** 
    Adds the passed in , to the existing . **/
    public void addTextureUnitState(org.ogre4j.ITextureUnitState state) {
        _addTextureUnitState__TextureUnitStatep(this.object.pointer, state.getInstancePointer().pointer);
    }

    private native void _addTextureUnitState__TextureUnitStatep(long _pointer_, long state);

    /** 
    Retrieves a pointer to a texture unit state so it may be modified. **/
    public org.ogre4j.ITextureUnitState getTextureUnitState(int index) {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_getTextureUnitState__Hv(this.object.pointer, index)));
    }

    private native long _getTextureUnitState__Hv(long _pointer_, int index);

    /** 
    Retrieves the  Unit State matching name. Returns 0 if name match is not found. **/
    public org.ogre4j.ITextureUnitState getTextureUnitState(String name) {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_getTextureUnitState__StringR(this.object.pointer, name)));
    }

    private native long _getTextureUnitState__StringR(long _pointer_, String name);

    /** **/
    public org.ogre4j.ITextureUnitState getTextureUnitState_const(int index) {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_getTextureUnitState_const__Hv_const(this.object.pointer, index)));
    }

    private native long _getTextureUnitState_const__Hv_const(long _pointer_, int index);

    /** **/
    public org.ogre4j.ITextureUnitState getTextureUnitState_const(String name) {
         return new org.ogre4j.TextureUnitState(new InstancePointer(_getTextureUnitState_const__StringR_const(this.object.pointer, name)));
    }

    private native long _getTextureUnitState_const__StringR_const(long _pointer_, String name);

    /** 
    Retrieve the index of the  Unit State in the pass. **/
    public int getTextureUnitStateIndex(org.ogre4j.ITextureUnitState state) {
         return _getTextureUnitStateIndex__TextureUnitStateP_const(this.object.pointer, state.getInstancePointer().pointer);
    }

    private native int _getTextureUnitStateIndex__TextureUnitStateP_const(long _pointer_, long state);

    /** 
    Get an iterator over the TextureUnitStates contained in this . **/
    public void getTextureUnitStateIterator(org.ogre4j.IPass.ITextureUnitStateIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTextureUnitStateIterator(this.object.pointer)), false);
    }

    private native long _getTextureUnitStateIterator(long _pointer_);

    /** **/
    public void getTextureUnitStateIterator_const(org.ogre4j.IPass.IConstTextureUnitStateIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getTextureUnitStateIterator_const_const(this.object.pointer)), false);
    }

    private native long _getTextureUnitStateIterator_const_const(long _pointer_);

    /** 
    Removes the indexed texture unit state from this pass. **/
    public void removeTextureUnitState(int index) {
        _removeTextureUnitState__Hv(this.object.pointer, index);
    }

    private native void _removeTextureUnitState__Hv(long _pointer_, int index);

    /** 
    Removes all texture unit settings. **/
    public void removeAllTextureUnitStates() {
        _removeAllTextureUnitStates(this.object.pointer);
    }

    private native void _removeAllTextureUnitStates(long _pointer_);

    /** 
    Returns the number of texture unit settings. **/
    public int getNumTextureUnitStates() {
         return _getNumTextureUnitStates_const(this.object.pointer);
    }

    private native int _getNumTextureUnitStates_const(long _pointer_);

    /** 
    Sets the kind of blending this pass has with the existing contents of the scene. **/
    public void setSceneBlending(org.ogre4j.SceneBlendType sbt) {
        _setSceneBlending__SceneBlendTypeV(this.object.pointer, sbt.getValue());
    }

    private native void _setSceneBlending__SceneBlendTypeV(long _pointer_, int sbt);

    /** 
    Sets the kind of blending this pass has with the existing contents of the scene, separately for color and alpha channels **/
    public void setSeparateSceneBlending(org.ogre4j.SceneBlendType sbt, org.ogre4j.SceneBlendType sbta) {
        _setSeparateSceneBlending__SceneBlendTypeVSceneBlendTypeV(this.object.pointer, sbt.getValue(),  sbta.getValue());
    }

    private native void _setSeparateSceneBlending__SceneBlendTypeVSceneBlendTypeV(long _pointer_, int sbt, int sbta);

    /** 
    Allows very fine control of blending this  with the existing contents of the scene. **/
    public void setSceneBlending(org.ogre4j.SceneBlendFactor sourceFactor, org.ogre4j.SceneBlendFactor destFactor) {
        _setSceneBlending__SceneBlendFactorVSceneBlendFactorV(this.object.pointer, sourceFactor.getValue(),  destFactor.getValue());
    }

    private native void _setSceneBlending__SceneBlendFactorVSceneBlendFactorV(long _pointer_, int sourceFactor, int destFactor);

    /** 
    Allows very fine control of blending this  with the existing contents of the scene. **/
    public void setSeparateSceneBlending(org.ogre4j.SceneBlendFactor sourceFactor, org.ogre4j.SceneBlendFactor destFactor, org.ogre4j.SceneBlendFactor sourceFactorAlpha, org.ogre4j.SceneBlendFactor destFactorAlpha) {
        _setSeparateSceneBlending__SceneBlendFactorVSceneBlendFactorVSceneBlendFactorVSceneBlendFactorV(this.object.pointer, sourceFactor.getValue(),  destFactor.getValue(),  sourceFactorAlpha.getValue(),  destFactorAlpha.getValue());
    }

    private native void _setSeparateSceneBlending__SceneBlendFactorVSceneBlendFactorVSceneBlendFactorVSceneBlendFactorV(long _pointer_, int sourceFactor, int destFactor, int sourceFactorAlpha, int destFactorAlpha);

    /** 
    Return true if this pass uses separate scene blending **/
    public boolean hasSeparateSceneBlending() {
         return _hasSeparateSceneBlending_const(this.object.pointer);
    }

    private native boolean _hasSeparateSceneBlending_const(long _pointer_);

    /** 
    Retrieves the source blending factor for the material (as set using Materiall::setSceneBlending). **/
    public org.ogre4j.SceneBlendFactor getSourceBlendFactor() {
         return org.ogre4j.SceneBlendFactor.toEnum(_getSourceBlendFactor_const(this.object.pointer));
    }

    private native int _getSourceBlendFactor_const(long _pointer_);

    /** 
    Retrieves the destination blending factor for the material (as set using Materiall::setSceneBlending). **/
    public org.ogre4j.SceneBlendFactor getDestBlendFactor() {
         return org.ogre4j.SceneBlendFactor.toEnum(_getDestBlendFactor_const(this.object.pointer));
    }

    private native int _getDestBlendFactor_const(long _pointer_);

    /** 
    Retrieves the alpha source blending factor for the material (as set using Materiall::setSeparateSceneBlending). **/
    public org.ogre4j.SceneBlendFactor getSourceBlendFactorAlpha() {
         return org.ogre4j.SceneBlendFactor.toEnum(_getSourceBlendFactorAlpha_const(this.object.pointer));
    }

    private native int _getSourceBlendFactorAlpha_const(long _pointer_);

    /** 
    Retrieves the alpha destination blending factor for the material (as set using Materiall::setSeparateSceneBlending). **/
    public org.ogre4j.SceneBlendFactor getDestBlendFactorAlpha() {
         return org.ogre4j.SceneBlendFactor.toEnum(_getDestBlendFactorAlpha_const(this.object.pointer));
    }

    private native int _getDestBlendFactorAlpha_const(long _pointer_);

    /** 
    Returns true if this pass has some element of transparency. **/
    public boolean isTransparent() {
         return _isTransparent_const(this.object.pointer);
    }

    private native boolean _isTransparent_const(long _pointer_);

    /** 
    Sets whether or not this pass renders with depth-buffer checking on or not. **/
    public void setDepthCheckEnabled(boolean enabled) {
        _setDepthCheckEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDepthCheckEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether or not this pass renders with depth-buffer checking on or not. **/
    public boolean getDepthCheckEnabled() {
         return _getDepthCheckEnabled_const(this.object.pointer);
    }

    private native boolean _getDepthCheckEnabled_const(long _pointer_);

    /** 
    Sets whether or not this pass renders with depth-buffer writing on or not. **/
    public void setDepthWriteEnabled(boolean enabled) {
        _setDepthWriteEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDepthWriteEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether or not this pass renders with depth-buffer writing on or not. **/
    public boolean getDepthWriteEnabled() {
         return _getDepthWriteEnabled_const(this.object.pointer);
    }

    private native boolean _getDepthWriteEnabled_const(long _pointer_);

    /** 
    Sets the function used to compare depth values when depth checking is on. **/
    public void setDepthFunction(org.ogre4j.CompareFunction func) {
        _setDepthFunction__CompareFunctionv(this.object.pointer, func.getValue());
    }

    private native void _setDepthFunction__CompareFunctionv(long _pointer_, int func);

    /** 
    Returns the function used to compare depth values when depth checking is on. **/
    public org.ogre4j.CompareFunction getDepthFunction() {
         return org.ogre4j.CompareFunction.toEnum(_getDepthFunction_const(this.object.pointer));
    }

    private native int _getDepthFunction_const(long _pointer_);

    /** 
    Sets whether or not colour buffer writing is enabled for this . **/
    public void setColourWriteEnabled(boolean enabled) {
        _setColourWriteEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setColourWriteEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Determines if colour buffer writing is enabled for this pass. **/
    public boolean getColourWriteEnabled() {
         return _getColourWriteEnabled_const(this.object.pointer);
    }

    private native boolean _getColourWriteEnabled_const(long _pointer_);

    /** 
    Sets the culling mode for this pass based on the 'vertex winding'. **/
    public void setCullingMode(org.ogre4j.CullingMode mode) {
        _setCullingMode__CullingModev(this.object.pointer, mode.getValue());
    }

    private native void _setCullingMode__CullingModev(long _pointer_, int mode);

    /** 
    Returns the culling mode for geometry rendered with this pass. See setCullingMode for more information. **/
    public org.ogre4j.CullingMode getCullingMode() {
         return org.ogre4j.CullingMode.toEnum(_getCullingMode_const(this.object.pointer));
    }

    private native int _getCullingMode_const(long _pointer_);

    /** 
    Sets the manual culling mode, performed by CPU rather than hardware. **/
    public void setManualCullingMode(org.ogre4j.ManualCullingMode mode) {
        _setManualCullingMode__ManualCullingModev(this.object.pointer, mode.getValue());
    }

    private native void _setManualCullingMode__ManualCullingModev(long _pointer_, int mode);

    /** 
    Retrieves the manual culling mode for this pass **/
    public org.ogre4j.ManualCullingMode getManualCullingMode() {
         return org.ogre4j.ManualCullingMode.toEnum(_getManualCullingMode_const(this.object.pointer));
    }

    private native int _getManualCullingMode_const(long _pointer_);

    /** 
    Sets whether or not dynamic lighting is enabled. **/
    public void setLightingEnabled(boolean enabled) {
        _setLightingEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setLightingEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether or not dynamic lighting is enabled. **/
    public boolean getLightingEnabled() {
         return _getLightingEnabled_const(this.object.pointer);
    }

    private native boolean _getLightingEnabled_const(long _pointer_);

    /** 
    Sets the maximum number of lights to be used by this pass. **/
    public void setMaxSimultaneousLights(int maxLights) {
        _setMaxSimultaneousLights__Hv(this.object.pointer, maxLights);
    }

    private native void _setMaxSimultaneousLights__Hv(long _pointer_, int maxLights);

    /** 
    Gets the maximum number of lights to be used by this pass. **/
    public int getMaxSimultaneousLights() {
         return _getMaxSimultaneousLights_const(this.object.pointer);
    }

    private native int _getMaxSimultaneousLights_const(long _pointer_);

    /** 
    Sets the light index that this pass will start at in the light list. **/
    public void setStartLight(int startLight) {
        _setStartLight__Hv(this.object.pointer, startLight);
    }

    private native void _setStartLight__Hv(long _pointer_, int startLight);

    /** 
    Gets the light index that this pass will start at in the light list. **/
    public int getStartLight() {
         return _getStartLight_const(this.object.pointer);
    }

    private native int _getStartLight_const(long _pointer_);

    /** 
    Sets the type of light shading required **/
    public void setShadingMode(org.ogre4j.ShadeOptions mode) {
        _setShadingMode__ShadeOptionsv(this.object.pointer, mode.getValue());
    }

    private native void _setShadingMode__ShadeOptionsv(long _pointer_, int mode);

    /** 
    Returns the type of light shading to be used. **/
    public org.ogre4j.ShadeOptions getShadingMode() {
         return org.ogre4j.ShadeOptions.toEnum(_getShadingMode_const(this.object.pointer));
    }

    private native int _getShadingMode_const(long _pointer_);

    /** 
    Sets the type of polygon rendering required **/
    public void setPolygonMode(org.ogre4j.PolygonMode mode) {
        _setPolygonMode__PolygonModev(this.object.pointer, mode.getValue());
    }

    private native void _setPolygonMode__PolygonModev(long _pointer_, int mode);

    /** 
    Returns the type of light shading to be used. **/
    public org.ogre4j.PolygonMode getPolygonMode() {
         return org.ogre4j.PolygonMode.toEnum(_getPolygonMode_const(this.object.pointer));
    }

    private native int _getPolygonMode_const(long _pointer_);

    /** 
    Sets whether this pass's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets the fogging mode applied to this pass. **/
    public void setFog(boolean overrideScene, org.ogre4j.FogMode mode, org.ogre4j.IColourValue colour, float expDensity, float linearStart, float linearEnd) {
        _setFog__bvFogModevColourValueRRealvRealvRealv(this.object.pointer, overrideScene,  mode.getValue(),  colour.getInstancePointer().pointer,  expDensity,  linearStart,  linearEnd);
    }

    private native void _setFog__bvFogModevColourValueRRealvRealvRealv(long _pointer_, boolean overrideScene, int mode, long colour, float expDensity, float linearStart, float linearEnd);

    /** 
    Returns true if this pass is to override the scene fog settings. **/
    public boolean getFogOverride() {
         return _getFogOverride_const(this.object.pointer);
    }

    private native boolean _getFogOverride_const(long _pointer_);

    /** 
    Returns the fog mode for this pass. **/
    public org.ogre4j.FogMode getFogMode() {
         return org.ogre4j.FogMode.toEnum(_getFogMode_const(this.object.pointer));
    }

    private native int _getFogMode_const(long _pointer_);

    /** 
    Returns the fog colour for the scene. **/
    public org.ogre4j.IColourValue getFogColour() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getFogColour_const(this.object.pointer)));
    }

    private native long _getFogColour_const(long _pointer_);

    /** 
    Returns the fog start distance for this pass. **/
    public float getFogStart() {
         return _getFogStart_const(this.object.pointer);
    }

    private native float _getFogStart_const(long _pointer_);

    /** 
    Returns the fog end distance for this pass. **/
    public float getFogEnd() {
         return _getFogEnd_const(this.object.pointer);
    }

    private native float _getFogEnd_const(long _pointer_);

    /** 
    Returns the fog density for this pass. **/
    public float getFogDensity() {
         return _getFogDensity_const(this.object.pointer);
    }

    private native float _getFogDensity_const(long _pointer_);

    /** 
    Sets the depth bias to be used for this material. **/
    public void setDepthBias(float constantBias, float slopeScaleBias) {
        _setDepthBias__FvFv(this.object.pointer, constantBias,  slopeScaleBias);
    }

    private native void _setDepthBias__FvFv(long _pointer_, float constantBias, float slopeScaleBias);

    /** 
    Retrieves the const depth bias value as set by setDepthBias. **/
    public float getDepthBiasConstant() {
         return _getDepthBiasConstant_const(this.object.pointer);
    }

    private native float _getDepthBiasConstant_const(long _pointer_);

    /** 
    Retrieves the slope-scale depth bias value as set by setDepthBias. **/
    public float getDepthBiasSlopeScale() {
         return _getDepthBiasSlopeScale_const(this.object.pointer);
    }

    private native float _getDepthBiasSlopeScale_const(long _pointer_);

    /** 
    Sets a factor which derives an additional depth bias from the number of times a pass is iterated. **/
    public void setIterationDepthBias(float biasPerIteration) {
        _setIterationDepthBias__Fv(this.object.pointer, biasPerIteration);
    }

    private native void _setIterationDepthBias__Fv(long _pointer_, float biasPerIteration);

    /** 
    Gets a factor which derives an additional depth bias from the number of times a pass is iterated. **/
    public float getIterationDepthBias() {
         return _getIterationDepthBias_const(this.object.pointer);
    }

    private native float _getIterationDepthBias_const(long _pointer_);

    /** 
    Sets the way the pass will have use alpha to totally reject pixels from the pipeline. **/
    public void setAlphaRejectSettings(org.ogre4j.CompareFunction func, short value, boolean alphaToCoverageEnabled) {
        _setAlphaRejectSettings__CompareFunctionvBvbv(this.object.pointer, func.getValue(),  value,  alphaToCoverageEnabled);
    }

    private native void _setAlphaRejectSettings__CompareFunctionvBvbv(long _pointer_, int func, short value, boolean alphaToCoverageEnabled);

    /** 
    Sets the alpha reject function. See setAlphaRejectSettings for more information. **/
    public void setAlphaRejectFunction(org.ogre4j.CompareFunction func) {
        _setAlphaRejectFunction__CompareFunctionv(this.object.pointer, func.getValue());
    }

    private native void _setAlphaRejectFunction__CompareFunctionv(long _pointer_, int func);

    /** 
    Gets the alpha reject value. See setAlphaRejectSettings for more information. **/
    public void setAlphaRejectValue(short val) {
        _setAlphaRejectValue__Bv(this.object.pointer, val);
    }

    private native void _setAlphaRejectValue__Bv(long _pointer_, short val);

    /** 
    Gets the alpha reject function. See setAlphaRejectSettings for more information. **/
    public org.ogre4j.CompareFunction getAlphaRejectFunction() {
         return org.ogre4j.CompareFunction.toEnum(_getAlphaRejectFunction_const(this.object.pointer));
    }

    private native int _getAlphaRejectFunction_const(long _pointer_);

    /** 
    Gets the alpha reject value. See setAlphaRejectSettings for more information. **/
    public short getAlphaRejectValue() {
         return _getAlphaRejectValue_const(this.object.pointer);
    }

    private native short _getAlphaRejectValue_const(long _pointer_);

    /** 
    Sets whether to use alpha to coverage (A2C) when blending alpha rejected values. **/
    public void setAlphaToCoverageEnabled(boolean enabled) {
        _setAlphaToCoverageEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setAlphaToCoverageEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Gets whether to use alpha to coverage (A2C) when blending alpha rejected values. **/
    public boolean isAlphaToCoverageEnabled() {
         return _isAlphaToCoverageEnabled_const(this.object.pointer);
    }

    private native boolean _isAlphaToCoverageEnabled_const(long _pointer_);

    /** 
    Sets whether or not transparent sorting is enabled. **/
    public void setTransparentSortingEnabled(boolean enabled) {
        _setTransparentSortingEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setTransparentSortingEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether or not transparent sorting is enabled. **/
    public boolean getTransparentSortingEnabled() {
         return _getTransparentSortingEnabled_const(this.object.pointer);
    }

    private native boolean _getTransparentSortingEnabled_const(long _pointer_);

    /** 
    Sets whether or not this pass should iterate per light or number of lights which can affect the object being rendered. **/
    public void setIteratePerLight(boolean enabled, boolean onlyForOneLightType, org.ogre4j.Light.LightTypes lightType) {
        _setIteratePerLight__bvbvLight_LightTypesv(this.object.pointer, enabled,  onlyForOneLightType,  lightType.getValue());
    }

    private native void _setIteratePerLight__bvbvLight_LightTypesv(long _pointer_, boolean enabled, boolean onlyForOneLightType, int lightType);

    /** 
    Does this pass run once for every light in range? **/
    public boolean getIteratePerLight() {
         return _getIteratePerLight_const(this.object.pointer);
    }

    private native boolean _getIteratePerLight_const(long _pointer_);

    /** 
    Does this pass run only for a single light type (if getIteratePerLight is true). **/
    public boolean getRunOnlyForOneLightType() {
         return _getRunOnlyForOneLightType_const(this.object.pointer);
    }

    private native boolean _getRunOnlyForOneLightType_const(long _pointer_);

    /** 
    Gets the single light type this pass runs for if getIteratePerLight and getRunOnlyForOneLightType are both true. **/
    public org.ogre4j.Light.LightTypes getOnlyLightType() {
         return org.ogre4j.Light.LightTypes.toEnum(_getOnlyLightType_const(this.object.pointer));
    }

    private native int _getOnlyLightType_const(long _pointer_);

    /** 
    If light iteration is enabled, determine the number of lights per iteration. **/
    public void setLightCountPerIteration(int c) {
        _setLightCountPerIteration__Hv(this.object.pointer, c);
    }

    private native void _setLightCountPerIteration__Hv(long _pointer_, int c);

    /** 
    If light iteration is enabled, determine the number of lights per iteration. **/
    public int getLightCountPerIteration() {
         return _getLightCountPerIteration_const(this.object.pointer);
    }

    private native int _getLightCountPerIteration_const(long _pointer_);

    /** **/
    public org.ogre4j.ITechnique getParent() {
         return new org.ogre4j.Technique(new InstancePointer(_getParent_const(this.object.pointer)));
    }

    private native long _getParent_const(long _pointer_);

    /** **/
    public String getResourceGroup() {
         return _getResourceGroup_const(this.object.pointer);
    }

    private native String _getResourceGroup_const(long _pointer_);

    /** 
    Sets the details of the vertex program to use. **/
    public void setVertexProgram(String name, boolean resetParams) {
        _setVertexProgram__StringRbv(this.object.pointer, name,  resetParams);
    }

    private native void _setVertexProgram__StringRbv(long _pointer_, String name, boolean resetParams);

    /** 
    Sets the vertex program parameters. **/
    public void setVertexProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr params) {
        _setVertexProgramParameters__GpuProgramParametersSharedPtrv(this.object.pointer, params.getInstancePointer().pointer);
    }

    private native void _setVertexProgramParameters__GpuProgramParametersSharedPtrv(long _pointer_, long params);

    /** 
    Gets the name of the vertex program used by this pass. **/
    public String getVertexProgramName() {
         return _getVertexProgramName_const(this.object.pointer);
    }

    private native String _getVertexProgramName_const(long _pointer_);

    /** 
    Gets the vertex program parameters used by this pass. **/
    public void getVertexProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getVertexProgramParameters_const(this.object.pointer)), false);
    }

    private native long _getVertexProgramParameters_const(long _pointer_);

    /** 
    Gets the vertex program used by this pass, only available after . **/
    public org.ogre4j.IGpuProgramPtr getVertexProgram() {
         return new org.ogre4j.GpuProgramPtr(new InstancePointer(_getVertexProgram_const(this.object.pointer)));
    }

    private native long _getVertexProgram_const(long _pointer_);

    /** 
    Sets the details of the vertex program to use when rendering as a shadow caster. **/
    public void setShadowCasterVertexProgram(String name) {
        _setShadowCasterVertexProgram__StringR(this.object.pointer, name);
    }

    private native void _setShadowCasterVertexProgram__StringR(long _pointer_, String name);

    /** 
    Sets the vertex program parameters for rendering as a shadow caster. **/
    public void setShadowCasterVertexProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr params) {
        _setShadowCasterVertexProgramParameters__GpuProgramParametersSharedPtrv(this.object.pointer, params.getInstancePointer().pointer);
    }

    private native void _setShadowCasterVertexProgramParameters__GpuProgramParametersSharedPtrv(long _pointer_, long params);

    /** 
    Gets the name of the vertex program used by this pass when rendering shadow casters. **/
    public String getShadowCasterVertexProgramName() {
         return _getShadowCasterVertexProgramName_const(this.object.pointer);
    }

    private native String _getShadowCasterVertexProgramName_const(long _pointer_);

    /** 
    Gets the vertex program parameters used by this pass when rendering shadow casters. **/
    public void getShadowCasterVertexProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowCasterVertexProgramParameters_const(this.object.pointer)), false);
    }

    private native long _getShadowCasterVertexProgramParameters_const(long _pointer_);

    /** 
    Gets the vertex program used by this pass when rendering shadow casters, only available after . **/
    public org.ogre4j.IGpuProgramPtr getShadowCasterVertexProgram() {
         return new org.ogre4j.GpuProgramPtr(new InstancePointer(_getShadowCasterVertexProgram_const(this.object.pointer)));
    }

    private native long _getShadowCasterVertexProgram_const(long _pointer_);

    /** 
    Sets the details of the vertex program to use when rendering as a shadow receiver. **/
    public void setShadowReceiverVertexProgram(String name) {
        _setShadowReceiverVertexProgram__StringR(this.object.pointer, name);
    }

    private native void _setShadowReceiverVertexProgram__StringR(long _pointer_, String name);

    /** 
    Sets the vertex program parameters for rendering as a shadow receiver. **/
    public void setShadowReceiverVertexProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr params) {
        _setShadowReceiverVertexProgramParameters__GpuProgramParametersSharedPtrv(this.object.pointer, params.getInstancePointer().pointer);
    }

    private native void _setShadowReceiverVertexProgramParameters__GpuProgramParametersSharedPtrv(long _pointer_, long params);

    /** 
    This method allows you to specify a fragment program for use when rendering a texture shadow receiver. **/
    public void setShadowReceiverFragmentProgram(String name) {
        _setShadowReceiverFragmentProgram__StringR(this.object.pointer, name);
    }

    private native void _setShadowReceiverFragmentProgram__StringR(long _pointer_, String name);

    /** 
    Sets the fragment program parameters for rendering as a shadow receiver. **/
    public void setShadowReceiverFragmentProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr params) {
        _setShadowReceiverFragmentProgramParameters__GpuProgramParametersSharedPtrv(this.object.pointer, params.getInstancePointer().pointer);
    }

    private native void _setShadowReceiverFragmentProgramParameters__GpuProgramParametersSharedPtrv(long _pointer_, long params);

    /** 
    Gets the name of the vertex program used by this pass when rendering shadow receivers. **/
    public String getShadowReceiverVertexProgramName() {
         return _getShadowReceiverVertexProgramName_const(this.object.pointer);
    }

    private native String _getShadowReceiverVertexProgramName_const(long _pointer_);

    /** 
    Gets the vertex program parameters used by this pass when rendering shadow receivers. **/
    public void getShadowReceiverVertexProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowReceiverVertexProgramParameters_const(this.object.pointer)), false);
    }

    private native long _getShadowReceiverVertexProgramParameters_const(long _pointer_);

    /** 
    Gets the vertex program used by this pass when rendering shadow receivers, only available after . **/
    public org.ogre4j.IGpuProgramPtr getShadowReceiverVertexProgram() {
         return new org.ogre4j.GpuProgramPtr(new InstancePointer(_getShadowReceiverVertexProgram_const(this.object.pointer)));
    }

    private native long _getShadowReceiverVertexProgram_const(long _pointer_);

    /** 
    Gets the name of the fragment program used by this pass when rendering shadow receivers. **/
    public String getShadowReceiverFragmentProgramName() {
         return _getShadowReceiverFragmentProgramName_const(this.object.pointer);
    }

    private native String _getShadowReceiverFragmentProgramName_const(long _pointer_);

    /** 
    Gets the fragment program parameters used by this pass when rendering shadow receivers. **/
    public void getShadowReceiverFragmentProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowReceiverFragmentProgramParameters_const(this.object.pointer)), false);
    }

    private native long _getShadowReceiverFragmentProgramParameters_const(long _pointer_);

    /** 
    Gets the fragment program used by this pass when rendering shadow receivers, only available after . **/
    public org.ogre4j.IGpuProgramPtr getShadowReceiverFragmentProgram() {
         return new org.ogre4j.GpuProgramPtr(new InstancePointer(_getShadowReceiverFragmentProgram_const(this.object.pointer)));
    }

    private native long _getShadowReceiverFragmentProgram_const(long _pointer_);

    /** 
    Sets the details of the fragment program to use. **/
    public void setFragmentProgram(String name, boolean resetParams) {
        _setFragmentProgram__StringRbv(this.object.pointer, name,  resetParams);
    }

    private native void _setFragmentProgram__StringRbv(long _pointer_, String name, boolean resetParams);

    /** 
    Sets the fragment program parameters. **/
    public void setFragmentProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr params) {
        _setFragmentProgramParameters__GpuProgramParametersSharedPtrv(this.object.pointer, params.getInstancePointer().pointer);
    }

    private native void _setFragmentProgramParameters__GpuProgramParametersSharedPtrv(long _pointer_, long params);

    /** 
    Gets the name of the fragment program used by this pass. **/
    public String getFragmentProgramName() {
         return _getFragmentProgramName_const(this.object.pointer);
    }

    private native String _getFragmentProgramName_const(long _pointer_);

    /** 
    Gets the fragment program parameters used by this pass. **/
    public void getFragmentProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getFragmentProgramParameters_const(this.object.pointer)), false);
    }

    private native long _getFragmentProgramParameters_const(long _pointer_);

    /** 
    Gets the fragment program used by this pass, only available after . **/
    public org.ogre4j.IGpuProgramPtr getFragmentProgram() {
         return new org.ogre4j.GpuProgramPtr(new InstancePointer(_getFragmentProgram_const(this.object.pointer)));
    }

    private native long _getFragmentProgram_const(long _pointer_);

    /** 
    Sets the details of the geometry program to use. **/
    public void setGeometryProgram(String name, boolean resetParams) {
        _setGeometryProgram__StringRbv(this.object.pointer, name,  resetParams);
    }

    private native void _setGeometryProgram__StringRbv(long _pointer_, String name, boolean resetParams);

    /** 
    Sets the geometry program parameters. **/
    public void setGeometryProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr params) {
        _setGeometryProgramParameters__GpuProgramParametersSharedPtrv(this.object.pointer, params.getInstancePointer().pointer);
    }

    private native void _setGeometryProgramParameters__GpuProgramParametersSharedPtrv(long _pointer_, long params);

    /** 
    Gets the name of the geometry program used by this pass. **/
    public String getGeometryProgramName() {
         return _getGeometryProgramName_const(this.object.pointer);
    }

    private native String _getGeometryProgramName_const(long _pointer_);

    /** 
    Gets the geometry program parameters used by this pass. **/
    public void getGeometryProgramParameters(org.ogre4j.IGpuProgramParametersSharedPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getGeometryProgramParameters_const(this.object.pointer)), false);
    }

    private native long _getGeometryProgramParameters_const(long _pointer_);

    /** 
    Gets the geometry program used by this pass, only available after . **/
    public org.ogre4j.IGpuProgramPtr getGeometryProgram() {
         return new org.ogre4j.GpuProgramPtr(new InstancePointer(_getGeometryProgram_const(this.object.pointer)));
    }

    private native long _getGeometryProgram_const(long _pointer_);

    /** 
    Splits this  to one which can be handled in the number of texture units specified. **/
    public org.ogre4j.IPass _split(int numUnits) {
         return new org.ogre4j.Pass(new InstancePointer(__split__Hv(this.object.pointer, numUnits)));
    }

    private native long __split__Hv(long _pointer_, int numUnits);

    /** 
    Internal method to adjust pass index. **/
    public void _notifyIndex(int index) {
        __notifyIndex__Hv(this.object.pointer, index);
    }

    private native void __notifyIndex__Hv(long _pointer_, int index);

    /** 
    Internal method for preparing to load this pass. **/
    public void _prepare() {
        __prepare(this.object.pointer);
    }

    private native void __prepare(long _pointer_);

    /** 
    Internal method for undoing the load preparartion for this pass. **/
    public void _unprepare() {
        __unprepare(this.object.pointer);
    }

    private native void __unprepare(long _pointer_);

    /** 
    Internal method for loading this pass. **/
    public void _load() {
        __load(this.object.pointer);
    }

    private native void __load(long _pointer_);

    /** 
    Internal method for unloading this pass. **/
    public void _unload() {
        __unload(this.object.pointer);
    }

    private native void __unload(long _pointer_);

    /** **/
    public boolean isLoaded() {
         return _isLoaded_const(this.object.pointer);
    }

    private native boolean _isLoaded_const(long _pointer_);

    /** 
    Gets the 'hash' of this pass, ie a precomputed number to use for sorting **/
    public long getHash() {
         return _getHash_const(this.object.pointer);
    }

    private native long _getHash_const(long _pointer_);

    /** **/
    public void _dirtyHash() {
        __dirtyHash(this.object.pointer);
    }

    private native void __dirtyHash(long _pointer_);

    /** 
    Internal method for recalculating the hash. **/
    public void _recalculateHash() {
        __recalculateHash(this.object.pointer);
    }

    private native void __recalculateHash(long _pointer_);

    /** 
    Tells the pass that it needs recompilation. **/
    public void _notifyNeedsRecompile() {
        __notifyNeedsRecompile(this.object.pointer);
    }

    private native void __notifyNeedsRecompile(long _pointer_);

    /** 
    Update any automatic parameters (except lights) on this pass **/
    public void _updateAutoParamsNoLights(org.ogre4j.IAutoParamDataSource source) {
        __updateAutoParamsNoLights__AutoParamDataSourceP_const(this.object.pointer, source.getInstancePointer().pointer);
    }

    private native void __updateAutoParamsNoLights__AutoParamDataSourceP_const(long _pointer_, long source);

    /** 
    Update any automatic light parameters on this pass **/
    public void _updateAutoParamsLightsOnly(org.ogre4j.IAutoParamDataSource source) {
        __updateAutoParamsLightsOnly__AutoParamDataSourceP_const(this.object.pointer, source.getInstancePointer().pointer);
    }

    private native void __updateAutoParamsLightsOnly__AutoParamDataSourceP_const(long _pointer_, long source);

    /** 
    Gets the 'nth' texture which references the given content type. **/
    public int _getTextureUnitWithContentTypeIndex(org.ogre4j.TextureUnitState.ContentType contentType, int index) {
         return __getTextureUnitWithContentTypeIndex__TextureUnitState_ContentTypevHv_const(this.object.pointer, contentType.getValue(),  index);
    }

    private native int __getTextureUnitWithContentTypeIndex__TextureUnitState_ContentTypevHv_const(long _pointer_, int contentType, int index);

    /** 
    Set texture filtering for every texture unit **/
    public void setTextureFiltering(org.ogre4j.TextureFilterOptions filterType) {
        _setTextureFiltering__TextureFilterOptionsv(this.object.pointer, filterType.getValue());
    }

    private native void _setTextureFiltering__TextureFilterOptionsv(long _pointer_, int filterType);

    /** 
    Sets the anisotropy level to be used for all textures. **/
    public void setTextureAnisotropy(long maxAniso) {
        _setTextureAnisotropy__Iv(this.object.pointer, maxAniso);
    }

    private native void _setTextureAnisotropy__Iv(long _pointer_, long maxAniso);

    /** 
    If set to true, this forces normals to be normalised dynamically by the hardware for this pass. **/
    public void setNormaliseNormals(boolean normalise) {
        _setNormaliseNormals__bv(this.object.pointer, normalise);
    }

    private native void _setNormaliseNormals__bv(long _pointer_, boolean normalise);

    /** 
    Returns true if this pass has auto-normalisation of normals set. **/
    public boolean getNormaliseNormals() {
         return _getNormaliseNormals_const(this.object.pointer);
    }

    private native boolean _getNormaliseNormals_const(long _pointer_);

    /** 
    Queue this pass for deletion when appropriate. **/
    public void queueForDeletion() {
        _queueForDeletion(this.object.pointer);
    }

    private native void _queueForDeletion(long _pointer_);

    /** 
    Returns whether this pass is ambient only. **/
    public boolean isAmbientOnly() {
         return _isAmbientOnly_const(this.object.pointer);
    }

    private native boolean _isAmbientOnly_const(long _pointer_);

    /** 
    set the number of iterations that this pass should perform when doing fast multi pass operation. **/
    public void setPassIterationCount(int count) {
        _setPassIterationCount__iV(this.object.pointer, count);
    }

    private native void _setPassIterationCount__iV(long _pointer_, int count);

    /** 
    Gets the pass iteration count value. **/
    public int getPassIterationCount() {
         return _getPassIterationCount_const(this.object.pointer);
    }

    private native int _getPassIterationCount_const(long _pointer_);

    /** 
    Applies texture names to  Unit State with matching texture name aliases. All  Unit States within the pass are checked. If matching texture aliases are found then true is returned.
    **/
    public boolean applyTextureAliases(org.ogre4j.IAliasTextureNamePairList aliasList, boolean apply) {
         return _applyTextureAliases__AliasTextureNamePairListRbV_const(this.object.pointer, aliasList.getInstancePointer().pointer,  apply);
    }

    private native boolean _applyTextureAliases__AliasTextureNamePairListRbV_const(long _pointer_, long aliasList, boolean apply);

    /** 
    Sets whether or not this pass will be clipped by a scissor rectangle encompassing the lights that are being used in it. **/
    public void setLightScissoringEnabled(boolean enabled) {
        _setLightScissoringEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setLightScissoringEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Gets whether or not this pass will be clipped by a scissor rectangle encompassing the lights that are being used in it. **/
    public boolean getLightScissoringEnabled() {
         return _getLightScissoringEnabled_const(this.object.pointer);
    }

    private native boolean _getLightScissoringEnabled_const(long _pointer_);

    /** 
    Gets whether or not this pass will be clipped by user clips planes bounding the area covered by the light. **/
    public void setLightClipPlanesEnabled(boolean enabled) {
        _setLightClipPlanesEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setLightClipPlanesEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Gets whether or not this pass will be clipped by user clips planes bounding the area covered by the light. **/
    public boolean getLightClipPlanesEnabled() {
         return _getLightClipPlanesEnabled_const(this.object.pointer);
    }

    private native boolean _getLightClipPlanesEnabled_const(long _pointer_);

    /** 
    Manually set which illumination stage this pass is a member of. **/
    public void setIlluminationStage(org.ogre4j.IlluminationStage is) {
        _setIlluminationStage__IlluminationStagev(this.object.pointer, is.getValue());
    }

    private native void _setIlluminationStage__IlluminationStagev(long _pointer_, int is);

    /** **/
    public org.ogre4j.IlluminationStage getIlluminationStage() {
         return org.ogre4j.IlluminationStage.toEnum(_getIlluminationStage_const(this.object.pointer));
    }

    private native int _getIlluminationStage_const(long _pointer_);

    /** 
    Static method to retrieve all the Passes which need their hash values recalculated. **/
    public static org.ogre4j.IPass.IPassSet getDirtyHashList() {
         return new org.ogre4j.Pass.PassSet(new InstancePointer(_getDirtyHashList()));
    }

    private native static long _getDirtyHashList();

    /** 
    Static method to retrieve all the Passes which are pending deletion. **/
    public static org.ogre4j.IPass.IPassSet getPassGraveyard() {
         return new org.ogre4j.Pass.PassSet(new InstancePointer(_getPassGraveyard()));
    }

    private native static long _getPassGraveyard();

    /** 
    Static method to reset the list of passes which need their hash values recalculated. **/
    public static void clearDirtyHashList() {
        _clearDirtyHashList();
    }

    private native static void _clearDirtyHashList();

    /** 
    Process all dirty and pending deletion passes. **/
    public static void processPendingPassUpdates() {
        _processPendingPassUpdates();
    }

    private native static void _processPendingPassUpdates();

    /** 
    Sets one of the default hash functions to be used. **/
    public static void setHashFunction(org.ogre4j.Pass.BuiltinHashFunction builtin) {
        _setHashFunction__BuiltinHashFunctionv( builtin.getValue());
    }

    private native static void _setHashFunction__BuiltinHashFunctionv(int builtin);

    /** 
    Set the hash function used for all passes. **/
    public static void setHashFunction(org.ogre4j.IPass.IHashFunc hashFunc) {
        _setHashFunction__HashFuncp( hashFunc.getInstancePointer().pointer);
    }

    private native static void _setHashFunction__HashFuncp(long hashFunc);

    /** 
    Get the hash function used for all passes. **/
    public static org.ogre4j.IPass.IHashFunc getHashFunction() {
         return new org.ogre4j.Pass.HashFunc(new InstancePointer(_getHashFunction()));
    }

    private native static long _getHashFunction();

}
