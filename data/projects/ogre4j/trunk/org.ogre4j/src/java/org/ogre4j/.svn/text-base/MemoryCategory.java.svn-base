/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public enum MemoryCategory implements INativeEnum < MemoryCategory > {
    MEMCATEGORY_GENERAL(MemoryCategoryHelper.ENUM_VALUES[0]),
    MEMCATEGORY_GEOMETRY(MemoryCategoryHelper.ENUM_VALUES[1]),
    MEMCATEGORY_ANIMATION(MemoryCategoryHelper.ENUM_VALUES[2]),
    MEMCATEGORY_SCENE_CONTROL(MemoryCategoryHelper.ENUM_VALUES[3]),
    MEMCATEGORY_SCENE_OBJECTS(MemoryCategoryHelper.ENUM_VALUES[4]),
    MEMCATEGORY_RESOURCE(MemoryCategoryHelper.ENUM_VALUES[5]),
    MEMCATEGORY_SCRIPTING(MemoryCategoryHelper.ENUM_VALUES[6]),
    MEMCATEGORY_RENDERSYS(MemoryCategoryHelper.ENUM_VALUES[7]),
    MEMCATEGORY_COUNT(MemoryCategoryHelper.ENUM_VALUES[8]);

    private int value;

    MemoryCategory(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public MemoryCategory getEnum(int val) {
        return toEnum(val);
    }

    public static final MemoryCategory toEnum(int retval) {
    if (retval ==MEMCATEGORY_GENERAL.value)
        return MemoryCategory.MEMCATEGORY_GENERAL;
    else if (retval ==MEMCATEGORY_GEOMETRY.value)
        return MemoryCategory.MEMCATEGORY_GEOMETRY;
    else if (retval ==MEMCATEGORY_ANIMATION.value)
        return MemoryCategory.MEMCATEGORY_ANIMATION;
    else if (retval ==MEMCATEGORY_SCENE_CONTROL.value)
        return MemoryCategory.MEMCATEGORY_SCENE_CONTROL;
    else if (retval ==MEMCATEGORY_SCENE_OBJECTS.value)
        return MemoryCategory.MEMCATEGORY_SCENE_OBJECTS;
    else if (retval ==MEMCATEGORY_RESOURCE.value)
        return MemoryCategory.MEMCATEGORY_RESOURCE;
    else if (retval ==MEMCATEGORY_SCRIPTING.value)
        return MemoryCategory.MEMCATEGORY_SCRIPTING;
    else if (retval ==MEMCATEGORY_RENDERSYS.value)
        return MemoryCategory.MEMCATEGORY_RENDERSYS;
    else if (retval ==MEMCATEGORY_COUNT.value)
        return MemoryCategory.MEMCATEGORY_COUNT;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

class MemoryCategoryHelper{
static { System.loadLibrary("ogre4j");}

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

