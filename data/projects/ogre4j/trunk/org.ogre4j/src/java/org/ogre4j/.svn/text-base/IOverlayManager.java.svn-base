/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IOverlayManager extends INativeObject, org.ogre4j.IScriptLoader, org.ogre4j.ISceneObjAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.IOverlayManager > {

public interface IOverlayMap extends INativeObject, org.std.Imap< String, org.ogre4j.IOverlay > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IOverlay get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IOverlay value);

}
public interface IElementMap extends INativeObject, org.std.Imap< String, org.ogre4j.IOverlayElement > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IOverlayElement get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IOverlayElement value);

}
public interface IOverlayMapIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IOverlayManager.IOverlayMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IOverlay getNext();

    /** **/
    public org.ogre4j.IOverlay peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IOverlayManager.IOverlayMapIterator operatorAssignment(org.ogre4j.IOverlayManager.IOverlayMapIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IOverlay> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface ITemplateIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IOverlayManager.IElementMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IOverlayElement getNext();

    /** **/
    public org.ogre4j.IOverlayElement peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IOverlayManager.ITemplateIterator operatorAssignment(org.ogre4j.IOverlayManager.ITemplateIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IOverlayElement> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IFactoryMap extends INativeObject, org.std.Imap< String, org.ogre4j.IOverlayElementFactory > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IOverlayElementFactory get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IOverlayElementFactory value);

}
public interface ILoadedScripts extends INativeObject, org.std.Iset< String > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
    /** **/
    public org.ogre4j.IStringVector getScriptPatterns();

    /** **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream, String groupName);

    /** **/
    public float getLoadingOrder();

    /** 
    Create a new . **/
    public org.ogre4j.IOverlay create(String name);

    /** 
    Retrieve an  by name **/
    public org.ogre4j.IOverlay getByName(String name);

    /** 
    Destroys an existing overlay by name **/
    public void destroy(String name);

    /** 
    Destroys an existing overlay **/
    public void destroy(org.ogre4j.IOverlay overlay);

    /** 
    Destroys all existing overlays **/
    public void destroyAll();

    /** **/
    public void getOverlayIterator(org.ogre4j.IOverlayManager.IOverlayMapIterator returnValue);

    /** 
    Internal method for queueing the visible overlays for rendering. **/
    public void _queueOverlaysForRendering(org.ogre4j.ICamera cam, org.ogre4j.IRenderQueue pQueue, org.ogre4j.IViewport vp);

    /** 
    Method for determining if the viewport has changed dimensions. **/
    public boolean hasViewportChanged();

    /** 
    Gets the height of the destination viewport in pixels. **/
    public int getViewportHeight();

    /** 
    Gets the width of the destination viewport in pixels. **/
    public int getViewportWidth();

    /** **/
    public float getViewportAspectRatio();

    /** 
    Creates a new  of the type requested. **/
    public org.ogre4j.IOverlayElement createOverlayElement(String typeName, String instanceName, boolean isTemplate);

    /** 
    Gets a reference to an existing element. **/
    public org.ogre4j.IOverlayElement getOverlayElement(String name, boolean isTemplate);

    /** 
    Destroys a . **/
    public void destroyOverlayElement(String instanceName, boolean isTemplate);

    /** 
    Destroys a . **/
    public void destroyOverlayElement(org.ogre4j.IOverlayElement pInstance, boolean isTemplate);

    /** 
    Destroys all the  created so far. **/
    public void destroyAllOverlayElements(boolean isTemplate);

    /** 
    Registers a new  with this manager. **/
    public void addOverlayElementFactory(org.ogre4j.IOverlayElementFactory elemFactory);

    /** **/
    public org.ogre4j.IOverlayElement createOverlayElementFromTemplate(String templateName, String typeName, String instanceName, boolean isTemplate);

    /** 
    **/
    public org.ogre4j.IOverlayElement cloneOverlayElementFromTemplate(String templateName, String instanceName);

    /** **/
    public org.ogre4j.IOverlayElement createOverlayElementFromFactory(String typeName, String instanceName);

    /** 
    Returns an iterator over all templates in this manager. **/
    public void getTemplateIterator(org.ogre4j.IOverlayManager.ITemplateIterator returnValue);

    /** **/
    public boolean isTemplate(String strName);

}
