/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Light extends org.xbig.base.NativeObject implements org.ogre4j.ILight {
static { System.loadLibrary("ogre4j");}
public enum LightTypes implements INativeEnum < LightTypes > {
    LT_POINT(LightTypesHelper.ENUM_VALUES[0]),
    LT_DIRECTIONAL(LightTypesHelper.ENUM_VALUES[1]),
    LT_SPOTLIGHT(LightTypesHelper.ENUM_VALUES[2]);

    private int value;

    LightTypes(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public LightTypes getEnum(int val) {
        return toEnum(val);
    }

    public static final LightTypes toEnum(int retval) {
    if (retval ==LT_POINT.value)
        return LightTypes.LT_POINT;
    else if (retval ==LT_DIRECTIONAL.value)
        return LightTypes.LT_DIRECTIONAL;
    else if (retval ==LT_SPOTLIGHT.value)
        return LightTypes.LT_SPOTLIGHT;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class LightTypesHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Light(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Light(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Light(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public void _calcTempSquareDist(org.ogre4j.IVector3 worldPos) {
        __calcTempSquareDist__Vector3R(this.object.pointer, worldPos.getInstancePointer().pointer);
    }

    private native void __calcTempSquareDist__Vector3R(long _pointer_, long worldPos);

    /** 
    Default constructor (for Python mainly). **/
    public Light() {
         super( new org.xbig.base.InstancePointer(__createLight()), false);
    }

    private native static long __createLight();

    /** 
    Normal constructor. Should not be called directly, but rather the  method should be used. **/
    public Light(String name) {
         super( new org.xbig.base.InstancePointer(__createLight__StringR( name)), false);
    }

    private native static long __createLight__StringR(String name);

    /** 
    Sets the type of light - see LightTypes for more info. **/
    public void setType(org.ogre4j.Light.LightTypes type) {
        _setType__LightTypesv(this.object.pointer, type.getValue());
    }

    private native void _setType__LightTypesv(long _pointer_, int type);

    /** 
    Returns the light type. **/
    public org.ogre4j.Light.LightTypes getType() {
         return org.ogre4j.Light.LightTypes.toEnum(_getType_const(this.object.pointer));
    }

    private native int _getType_const(long _pointer_);

    /** 
    Sets the colour of the diffuse light given off by this source. **/
    public void setDiffuseColour(float red, float green, float blue) {
        _setDiffuseColour__RealvRealvRealv(this.object.pointer, red,  green,  blue);
    }

    private native void _setDiffuseColour__RealvRealvRealv(long _pointer_, float red, float green, float blue);

    /** 
    Sets the colour of the diffuse light given off by this source. **/
    public void setDiffuseColour(org.ogre4j.IColourValue colour) {
        _setDiffuseColour__ColourValueR(this.object.pointer, colour.getInstancePointer().pointer);
    }

    private native void _setDiffuseColour__ColourValueR(long _pointer_, long colour);

    /** 
    Returns the colour of the diffuse light given off by this light source (see setDiffuseColour for more info). **/
    public org.ogre4j.IColourValue getDiffuseColour() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getDiffuseColour_const(this.object.pointer)));
    }

    private native long _getDiffuseColour_const(long _pointer_);

    /** 
    Sets the colour of the specular light given off by this source. **/
    public void setSpecularColour(float red, float green, float blue) {
        _setSpecularColour__RealvRealvRealv(this.object.pointer, red,  green,  blue);
    }

    private native void _setSpecularColour__RealvRealvRealv(long _pointer_, float red, float green, float blue);

    /** 
    Sets the colour of the specular light given off by this source. **/
    public void setSpecularColour(org.ogre4j.IColourValue colour) {
        _setSpecularColour__ColourValueR(this.object.pointer, colour.getInstancePointer().pointer);
    }

    private native void _setSpecularColour__ColourValueR(long _pointer_, long colour);

    /** 
    Returns the colour of specular light given off by this light source. **/
    public org.ogre4j.IColourValue getSpecularColour() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getSpecularColour_const(this.object.pointer)));
    }

    private native long _getSpecularColour_const(long _pointer_);

    /** 
    Sets the attenuation parameters of the light source i.e. how it diminishes with distance. **/
    public void setAttenuation(float range, float constant, float linear, float quadratic) {
        _setAttenuation__RealvRealvRealvRealv(this.object.pointer, range,  constant,  linear,  quadratic);
    }

    private native void _setAttenuation__RealvRealvRealvRealv(long _pointer_, float range, float constant, float linear, float quadratic);

    /** 
    Returns the absolute upper range of the light. **/
    public float getAttenuationRange() {
         return _getAttenuationRange_const(this.object.pointer);
    }

    private native float _getAttenuationRange_const(long _pointer_);

    /** 
    Returns the constant factor in the attenuation formula. **/
    public float getAttenuationConstant() {
         return _getAttenuationConstant_const(this.object.pointer);
    }

    private native float _getAttenuationConstant_const(long _pointer_);

    /** 
    Returns the linear factor in the attenuation formula. **/
    public float getAttenuationLinear() {
         return _getAttenuationLinear_const(this.object.pointer);
    }

    private native float _getAttenuationLinear_const(long _pointer_);

    /** 
    Returns the quadric factor in the attenuation formula. **/
    public float getAttenuationQuadric() {
         return _getAttenuationQuadric_const(this.object.pointer);
    }

    private native float _getAttenuationQuadric_const(long _pointer_);

    /** 
    Sets the position of the light. **/
    public void setPosition(float x, float y, float z) {
        _setPosition__RealvRealvRealv(this.object.pointer, x,  y,  z);
    }

    private native void _setPosition__RealvRealvRealv(long _pointer_, float x, float y, float z);

    /** 
    Sets the position of the light. **/
    public void setPosition(org.ogre4j.IVector3 vec) {
        _setPosition__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _setPosition__Vector3R(long _pointer_, long vec);

    /** 
    Returns the position of the light. **/
    public org.ogre4j.IVector3 getPosition() {
         return new org.ogre4j.Vector3(new InstancePointer(_getPosition_const(this.object.pointer)));
    }

    private native long _getPosition_const(long _pointer_);

    /** 
    Sets the direction in which a light points. **/
    public void setDirection(float x, float y, float z) {
        _setDirection__RealvRealvRealv(this.object.pointer, x,  y,  z);
    }

    private native void _setDirection__RealvRealvRealv(long _pointer_, float x, float y, float z);

    /** 
    Sets the direction in which a light points. **/
    public void setDirection(org.ogre4j.IVector3 vec) {
        _setDirection__Vector3R(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native void _setDirection__Vector3R(long _pointer_, long vec);

    /** 
    Returns the light's direction. **/
    public org.ogre4j.IVector3 getDirection() {
         return new org.ogre4j.Vector3(new InstancePointer(_getDirection_const(this.object.pointer)));
    }

    private native long _getDirection_const(long _pointer_);

    /** 
    Sets the range of a spotlight, i.e. the angle of the inner and outer cones and the rate of falloff between them. **/
    public void setSpotlightRange(org.ogre4j.IRadian innerAngle, org.ogre4j.IRadian outerAngle, float falloff) {
        _setSpotlightRange__RadianRRadianRRealv(this.object.pointer, innerAngle.getInstancePointer().pointer,  outerAngle.getInstancePointer().pointer,  falloff);
    }

    private native void _setSpotlightRange__RadianRRadianRRealv(long _pointer_, long innerAngle, long outerAngle, float falloff);

    /** 
    Returns the angle covered by the spotlights inner cone. **/
    public org.ogre4j.IRadian getSpotlightInnerAngle() {
         return new org.ogre4j.Radian(new InstancePointer(_getSpotlightInnerAngle_const(this.object.pointer)));
    }

    private native long _getSpotlightInnerAngle_const(long _pointer_);

    /** 
    Returns the angle covered by the spotlights outer cone. **/
    public org.ogre4j.IRadian getSpotlightOuterAngle() {
         return new org.ogre4j.Radian(new InstancePointer(_getSpotlightOuterAngle_const(this.object.pointer)));
    }

    private native long _getSpotlightOuterAngle_const(long _pointer_);

    /** 
    Returns the falloff between the inner and outer cones of the spotlight. **/
    public float getSpotlightFalloff() {
         return _getSpotlightFalloff_const(this.object.pointer);
    }

    private native float _getSpotlightFalloff_const(long _pointer_);

    /** 
    Sets the angle covered by the spotlights inner cone. **/
    public void setSpotlightInnerAngle(org.ogre4j.IRadian val) {
        _setSpotlightInnerAngle__RadianR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setSpotlightInnerAngle__RadianR(long _pointer_, long val);

    /** 
    Sets the angle covered by the spotlights outer cone. **/
    public void setSpotlightOuterAngle(org.ogre4j.IRadian val) {
        _setSpotlightOuterAngle__RadianR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setSpotlightOuterAngle__RadianR(long _pointer_, long val);

    /** 
    Sets the falloff between the inner and outer cones of the spotlight. **/
    public void setSpotlightFalloff(float val) {
        _setSpotlightFalloff__Realv(this.object.pointer, val);
    }

    private native void _setSpotlightFalloff__Realv(long _pointer_, float val);

    /** 
    Set a scaling factor to indicate the relative power of a light. **/
    public void setPowerScale(float power) {
        _setPowerScale__Realv(this.object.pointer, power);
    }

    private native void _setPowerScale__Realv(long _pointer_, float power);

    /** 
    Set the scaling factor which indicates the relative power of a light. **/
    public float getPowerScale() {
         return _getPowerScale_const(this.object.pointer);
    }

    private native float _getPowerScale_const(long _pointer_);

    /** 
    Overridden from **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Overridden from **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Overridden from **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** 
    Overridden from **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** 
    Overridden from **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** 
    Retrieves the position of the light including any transform from nodes it is attached to. **/
    public org.ogre4j.IVector3 getDerivedPosition(boolean cameraRelativeIfSet) {
         return new org.ogre4j.Vector3(new InstancePointer(_getDerivedPosition__bv_const(this.object.pointer, cameraRelativeIfSet)));
    }

    private native long _getDerivedPosition__bv_const(long _pointer_, boolean cameraRelativeIfSet);

    /** 
    Retrieves the direction of the light including any transform from nodes it is attached to. **/
    public org.ogre4j.IVector3 getDerivedDirection() {
         return new org.ogre4j.Vector3(new InstancePointer(_getDerivedDirection_const(this.object.pointer)));
    }

    private native long _getDerivedDirection_const(long _pointer_);

    /** 
    Overridden from . **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Overridden from **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** 
    Gets the details of this light as a 4D vector. **/
    public void getAs4DVector(org.ogre4j.IVector4 returnValue, boolean cameraRelativeIfSet) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getAs4DVector__bv_const(this.object.pointer, cameraRelativeIfSet)), false);
    }

    private native long _getAs4DVector__bv_const(long _pointer_, boolean cameraRelativeIfSet);

    /** 
    Internal method for calculating the 'near clip volume', which is the volume formed between the near clip rectangle of the camera and the light. **/
    public org.ogre4j.IPlaneBoundedVolume _getNearClipVolume(org.ogre4j.ICamera cam) {
         return new org.ogre4j.PlaneBoundedVolume(new InstancePointer(__getNearClipVolume__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer)));
    }

    private native long __getNearClipVolume__CameraP_const(long _pointer_, long cam);

    /** 
    Internal method for calculating the clip volumes outside of the frustum which can be used to determine which objects are casting shadow on the frustum as a whole. **/
    public org.ogre4j.IPlaneBoundedVolumeList _getFrustumClipVolumes(org.ogre4j.ICamera cam) {
         return new org.ogre4j.PlaneBoundedVolumeList(new InstancePointer(__getFrustumClipVolumes__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer)));
    }

    private native long __getFrustumClipVolumes__CameraP_const(long _pointer_, long cam);

    /** **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

    /** 
    Set this light to use a custom shadow camera when rendering texture shadows. **/
    public void setCustomShadowCameraSetup(org.ogre4j.IShadowCameraSetupPtr customShadowSetup) {
        _setCustomShadowCameraSetup__ShadowCameraSetupPtrR(this.object.pointer, customShadowSetup.getInstancePointer().pointer);
    }

    private native void _setCustomShadowCameraSetup__ShadowCameraSetupPtrR(long _pointer_, long customShadowSetup);

    /** 
    Reset the shadow camera setup to the default. **/
    public void resetCustomShadowCameraSetup() {
        _resetCustomShadowCameraSetup(this.object.pointer);
    }

    private native void _resetCustomShadowCameraSetup(long _pointer_);

    /** 
    return a pointer to the custom shadow camera setup (null means use  global version). **/
    public org.ogre4j.IShadowCameraSetupPtr getCustomShadowCameraSetup() {
         return new org.ogre4j.ShadowCameraSetupPtr(new InstancePointer(_getCustomShadowCameraSetup_const(this.object.pointer)));
    }

    private native long _getCustomShadowCameraSetup_const(long _pointer_);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Gets the index at which this light is in the current render. **/
    public int _getIndexInFrame() {
         return __getIndexInFrame_const(this.object.pointer);
    }

    private native int __getIndexInFrame_const(long _pointer_);

    /** **/
    public void _notifyIndexInFrame(int i) {
        __notifyIndexInFrame__iv(this.object.pointer, i);
    }

    private native void __notifyIndexInFrame__iv(long _pointer_, int i);

    /** 
    Sets the maximum distance away from the camera that shadows by this light will be visible. **/
    public void setShadowFarDistance(float distance) {
        _setShadowFarDistance__Realv(this.object.pointer, distance);
    }

    private native void _setShadowFarDistance__Realv(long _pointer_, float distance);

    /** 
    Tells the light to use the shadow far distance of the **/
    public void resetShadowFarDistance() {
        _resetShadowFarDistance(this.object.pointer);
    }

    private native void _resetShadowFarDistance(long _pointer_);

    /** 
    Gets the maximum distance away from the camera that shadows by this light will be visible. **/
    public float getShadowFarDistance() {
         return _getShadowFarDistance_const(this.object.pointer);
    }

    private native float _getShadowFarDistance_const(long _pointer_);

    /** **/
    public float getShadowFarDistanceSquared() {
         return _getShadowFarDistanceSquared_const(this.object.pointer);
    }

    private native float _getShadowFarDistanceSquared_const(long _pointer_);

    /** **/
    public void _setCameraRelative(org.ogre4j.ICamera cam) {
        __setCameraRelative__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __setCameraRelative__Camerap(long _pointer_, long cam);

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the name of this object. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method to notify the object of the camera to be used for the next rendering operation. **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** **/
    public float gettempSquareDist() {
         return _gettempSquareDist(this.object.pointer);
    }

    private native float _gettempSquareDist(long _pointer_);

    /** **/
    public void settempSquareDist(float _jni_value_) {
        _settempSquareDist(this.object.pointer, _jni_value_);
    }

    private native void _settempSquareDist(long _pointer_, float _jni_value_);

}
