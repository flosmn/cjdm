/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IHardwarePixelBuffer extends INativeObject, org.ogre4j.IHardwareBuffer {

    /** 
    Lock the buffer for (potentially) reading / writing. **/
    public org.ogre4j.IPixelBox lock(org.ogre4j.IBox lockBox, org.ogre4j.HardwareBuffer.LockOptions options);

    /** **/
    public VoidPointer lock(int offset, int length, org.ogre4j.HardwareBuffer.LockOptions options);

    /** 
    Get the current locked region. This is the same value as returned by lock(const Image::Box, LockOptions) **/
    public org.ogre4j.IPixelBox getCurrentLock();

    /** **/
    public void readData(int offset, int length, VoidPointer pDest);

    /** **/
    public void writeData(int offset, int length, VoidPointer pSource, boolean discardWholeBuffer);

    /** 
    Copies a box from another PixelBuffer to a region of the this PixelBuffer. **/
    public void blit(org.ogre4j.IHardwarePixelBufferSharedPtr src, org.ogre4j.IBox srcBox, org.ogre4j.IBox dstBox);

    /** 
    Convenience function that blits the entire source pixel buffer to this buffer. If source and destination dimensions don't match, scaling is done. **/
    public void blit(org.ogre4j.IHardwarePixelBufferSharedPtr src);

    /** 
    Copies a region from normal memory to a region of this pixelbuffer. The source image can be in any pixel format supported by OGRE, and in any size. **/
    public void blitFromMemory(org.ogre4j.IPixelBox src, org.ogre4j.IBox dstBox);

    /** 
    Convenience function that blits a pixelbox from memory to the entire buffer. The source image is scaled as needed. **/
    public void blitFromMemory(org.ogre4j.IPixelBox src);

    /** 
    Copies a region of this pixelbuffer to normal memory. **/
    public void blitToMemory(org.ogre4j.IBox srcBox, org.ogre4j.IPixelBox dst);

    /** 
    Convience function that blits this entire buffer to a pixelbox. The image is scaled as needed. **/
    public void blitToMemory(org.ogre4j.IPixelBox dst);

    /** 
    Get a render target for this PixelBuffer, or a slice of it. The texture this was acquired from must have TU_RENDERTARGET set, otherwise it is possible to render to it and this method will throw an ERR_RENDERSYSTEM exception. **/
    public org.ogre4j.IRenderTexture getRenderTarget(int slice);

    /** **/
    public int getWidth();

    /** **/
    public int getHeight();

    /** **/
    public int getDepth();

    /** **/
    public org.ogre4j.PixelFormat getFormat();

}
