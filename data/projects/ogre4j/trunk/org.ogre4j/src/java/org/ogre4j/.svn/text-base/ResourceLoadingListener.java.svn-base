/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ResourceLoadingListener extends org.xbig.base.NativeObject implements org.ogre4j.IResourceLoadingListener {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceLoadingListener(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceLoadingListener(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceLoadingListener(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    This event is called when a resource beings loading. **/
    public void resourceLoading(org.ogre4j.IDataStreamPtr returnValue, String name, String group, org.ogre4j.IResource resource) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_resourceLoading__StringRStringRResourcep(this.object.pointer, name,  group,  resource.getInstancePointer().pointer)), false);
    }

    private native long _resourceLoading__StringRStringRResourcep(long _pointer_, String name, String group, long resource);

    /** 
    This event is called when a resource stream has been opened, but not processed yet. **/
    public void resourceStreamOpened(String name, String group, org.ogre4j.IResource resource, org.ogre4j.IDataStreamPtr dataStream) {
        _resourceStreamOpened__StringRStringRResourcepDataStreamPtrr(this.object.pointer, name,  group,  resource.getInstancePointer().pointer,  dataStream.getInstancePointer().pointer);
    }

    private native void _resourceStreamOpened__StringRStringRResourcepDataStreamPtrr(long _pointer_, String name, String group, long resource, long dataStream);

    /** 
    This event is called when a resource collides with another existing one in a resource manager **/
    public boolean resourceCollision(org.ogre4j.IResource resource, org.ogre4j.IResourceManager resourceManager) {
         return _resourceCollision__ResourcepResourceManagerp(this.object.pointer, resource.getInstancePointer().pointer,  resourceManager.getInstancePointer().pointer);
    }

    private native boolean _resourceCollision__ResourcepResourceManagerp(long _pointer_, long resource, long resourceManager);

}
