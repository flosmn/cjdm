/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ICodec extends INativeObject, org.ogre4j.IGeneralAllocatedObject {

public static interface ICodecData extends INativeObject, org.ogre4j.IGeneralAllocatedObject {

    /** 
    Returns the type of the data. **/
    public String dataType();

}
public interface ICodecList extends INativeObject, org.std.Imap< String, org.ogre4j.ICodec > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.ICodec get(String key);

    /** **/
    public void insert(String key, org.ogre4j.ICodec value);

}
public interface ICodecDataPtr extends INativeObject, org.ogre4j.ISharedPtr< org.ogre4j.ICodec.ICodecData > {

    /** **/
    public org.ogre4j.ICodec.ICodecDataPtr operatorAssignment(org.ogre4j.ICodec.ICodecDataPtr r);

    /** **/
    public org.ogre4j.ICodec.ICodecData operatorMultiplication();

    /** **/
    public org.ogre4j.ICodec.ICodecData operatorMemberAccessFromAPointer();

    /** **/
    public org.ogre4j.ICodec.ICodecData get();

    /** **/
    public void bind(org.ogre4j.ICodec.ICodecData rep, org.ogre4j.SharedPtrFreeMethod freeMethod);

    /** **/
    public boolean unique();

    /** **/
    public long useCount();

    /** **/
    public LongPointer useCountPointer();

    /** **/
    public org.ogre4j.ICodec.ICodecData getPointer();

    /** **/
    public org.ogre4j.SharedPtrFreeMethod freeMethod();

    /** **/
    public boolean isNull();

    /** **/
    public void setNull();

}
public interface ICodecIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.ICodec.ICodecList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.ICodec getNext();

    /** **/
    public org.ogre4j.ICodec peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.ICodec.ICodecIterator operatorAssignment(org.ogre4j.ICodec.ICodecIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.ICodec> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IDecodeResult extends INativeObject, org.std.Ipair< org.ogre4j.IMemoryDataStreamPtr, org.ogre4j.ICodec.ICodecDataPtr > {

    /** **/
    public void getfirst(org.ogre4j.IMemoryDataStreamPtr returnValue);

    /** **/
    public void setfirst(org.ogre4j.IMemoryDataStreamPtr _jni_value_);

    /** **/
    public void getsecond(org.ogre4j.ICodec.ICodecDataPtr returnValue);

    /** **/
    public void setsecond(org.ogre4j.ICodec.ICodecDataPtr _jni_value_);

}
    /** 
    Codes the data in the input stream and saves the result in the output stream. **/
    public void code(org.ogre4j.IDataStreamPtr returnValue, org.ogre4j.IMemoryDataStreamPtr input, org.ogre4j.ICodec.ICodecDataPtr pData);

    /** 
    Codes the data in the input chunk and saves the result in the output filename provided. Provided for efficiency since coding to memory is progressive therefore memory required is unknown leading to reallocations. **/
    public void codeToFile(org.ogre4j.IMemoryDataStreamPtr input, String outFileName, org.ogre4j.ICodec.ICodecDataPtr pData);

    /** 
    Codes the data from the input chunk into the output chunk. **/
    public void decode(org.ogre4j.ICodec.IDecodeResult returnValue, org.ogre4j.IDataStreamPtr input);

    /** 
    Returns the type of the codec as a String **/
    public String getType();

    /** 
    Returns the type of the data that supported by this codec as a String **/
    public String getDataType();

    /** 
    Returns whether a magic number header matches this codec. **/
    public boolean magicNumberMatch(String magicNumberPtr, int maxbytes);

    /** 
    Maps a magic number header to a file extension, if this codec recognises it. **/
    public String magicNumberToFileExt(String magicNumberPtr, int maxbytes);

}
