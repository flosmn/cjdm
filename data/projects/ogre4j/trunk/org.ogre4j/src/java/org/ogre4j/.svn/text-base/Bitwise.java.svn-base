/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Bitwise extends org.xbig.base.NativeObject implements org.ogre4j.IBitwise {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Bitwise(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Bitwise(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Bitwise(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Returns the most significant bit set in a value. **/
    public static long mostSignificantBitSet(long value) {
         return _mostSignificantBitSet__Iv( value);
    }

    private native static long _mostSignificantBitSet__Iv(long value);

    /** 
    Returns the closest power-of-two number greater or equal to value. **/
    public static long firstPO2From(long n) {
         return _firstPO2From__uint32v( n);
    }

    private native static long _firstPO2From__uint32v(long n);

    /** 
    Convert N bit colour channel value to P bits. It fills P bits with the bit pattern repeated. (this is /((1<<n)-1) in fixed point) **/
    public static long fixedToFixed(long value, long n, long p) {
         return _fixedToFixed__uint32vIvIv( value,  n,  p);
    }

    private native static long _fixedToFixed__uint32vIvIv(long value, long n, long p);

    /** 
    Convert floating point colour channel value between 0.0 and 1.0 (otherwise clamped) to integer of a certain number of bits. Works for any value of bits between 0 and 31. **/
    public static long floatToFixed(float value, long bits) {
         return _floatToFixed__FVIV( value,  bits);
    }

    private native static long _floatToFixed__FVIV(float value, long bits);

    /** 
    Fixed point to float **/
    public static float fixedToFloat(long value, long bits) {
         return _fixedToFloat__IvIv( value,  bits);
    }

    private native static float _fixedToFloat__IvIv(long value, long bits);

    /** 
    Write a n*8 bits integer value to memory in native endian. **/
    public static void intWrite(VoidPointer dest, int n, long value) {
        _intWrite__vpiVIV( dest.object.pointer,  n,  value);
    }

    private native static void _intWrite__vpiVIV(long dest, int n, long value);

    /** 
    Read a n*8 bits integer value to memory in native endian. **/
    public static long intRead(VoidPointer src, int n) {
         return _intRead__vPiv( src.object.pointer,  n);
    }

    private native static long _intRead__vPiv(long src, int n);

    /** 
    Convert a float32 to a float16 (NV_half_float) Courtesy of OpenEXR **/
    public static int floatToHalf(float i) {
         return _floatToHalf__Fv( i);
    }

    private native static int _floatToHalf__Fv(float i);

    /** 
    Converts float in uint32 format to a a half in uint16 format **/
    public static int floatToHalfI(long i) {
         return _floatToHalfI__uint32v( i);
    }

    private native static int _floatToHalfI__uint32v(long i);

    /** 
    Convert a float16 (NV_half_float) to a float32 Courtesy of OpenEXR **/
    public static float halfToFloat(int y) {
         return _halfToFloat__uint16v( y);
    }

    private native static float _halfToFloat__uint16v(int y);

    /** 
    Converts a half in uint16 format to a float in uint32 format **/
    public static long halfToFloatI(int y) {
         return _halfToFloatI__uint16v( y);
    }

    private native static long _halfToFloatI__uint16v(int y);

    /** **/
    public Bitwise() {
         super( new org.xbig.base.InstancePointer(__createBitwise()), false);
    }

    private native static long __createBitwise();

}
