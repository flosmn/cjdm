/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class SceneManagerEnumerator extends org.xbig.base.NativeObject implements org.ogre4j.ISceneManagerEnumerator {
static { System.loadLibrary("ogre4j");}
public static class Instances extends org.xbig.base.NativeObject implements org.ogre4j.ISceneManagerEnumerator.IInstances {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Instances(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Instances(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Instances(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Instances() {
         super( new org.xbig.base.InstancePointer(__createInstances()), false);
    }

    private native static long __createInstances();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManager get(String key) {
         return new org.ogre4j.SceneManager(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.ISceneManager value) {
        _insert__sROgre_SceneManagerp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_SceneManagerp(long _pointer_, String key, long value);

}
public static class MetaDataList extends org.xbig.base.NativeObject implements org.ogre4j.ISceneManagerEnumerator.IMetaDataList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public MetaDataList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected MetaDataList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public MetaDataList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public MetaDataList() {
         super( new org.xbig.base.InstancePointer(__createMetaDataList()), false);
    }

    private native static long __createMetaDataList();

    /** **/
    public void assign(int num, org.ogre4j.ISceneManagerMetaData val) {
        _assign__ivOgre_SceneManagerMetaDataP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_SceneManagerMetaDataP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ISceneManagerMetaData at(int loc) {
         return new org.ogre4j.SceneManagerMetaData(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ISceneManagerMetaData back() {
         return new org.ogre4j.SceneManagerMetaData(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManagerMetaData front() {
         return new org.ogre4j.SceneManagerMetaData(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ISceneManagerMetaData val) {
        _push_back__Ogre_SceneManagerMetaDataP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_SceneManagerMetaDataP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class MetaDataIterator extends org.xbig.base.NativeObject implements org.ogre4j.ISceneManagerEnumerator.IMetaDataIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public MetaDataIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected MetaDataIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public MetaDataIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public MetaDataIterator(org.ogre4j.ISceneManagerEnumerator.IMetaDataList c) {
         super( new org.xbig.base.InstancePointer(__createMetaDataIterator__Ogre_SceneManagerEnumerator_MetaDataListR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createMetaDataIterator__Ogre_SceneManagerEnumerator_MetaDataListR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManagerMetaData getNext() {
         return new org.ogre4j.SceneManagerMetaData(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManagerMetaData peekNext() {
         return new org.ogre4j.SceneManagerMetaData(new InstancePointer(_peekNext_const(this.object.pointer)));
    }

    private native long _peekNext_const(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.ISceneManagerMetaData> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.ISceneManagerMetaData>(new InstancePointer(_peekNextPtr_const(this.object.pointer)));
    }

    private native long _peekNextPtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
public static class SceneManagerIterator extends org.xbig.base.NativeObject implements org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SceneManagerIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SceneManagerIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SceneManagerIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SceneManagerIterator(org.ogre4j.ISceneManagerEnumerator.IInstances c) {
         super( new org.xbig.base.InstancePointer(__createSceneManagerIterator__Ogre_SceneManagerEnumerator_Instancesr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createSceneManagerIterator__Ogre_SceneManagerEnumerator_Instancesr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManager getNext() {
         return new org.ogre4j.SceneManager(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManager peekNextValue() {
         return new org.ogre4j.SceneManager(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator operatorAssignment(org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator rhs) {
         return new org.ogre4j.SceneManagerEnumerator.SceneManagerIterator(new InstancePointer(_operatorAssignment___Ogre_SceneManagerEnumerator_SceneManagerIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_SceneManagerEnumerator_SceneManagerIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.ISceneManager> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.ISceneManager>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
private static class Factories extends org.xbig.base.NativeObject implements org.ogre4j.ISceneManagerEnumerator.IFactories {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Factories(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Factories(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Factories(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Factories() {
         super( new org.xbig.base.InstancePointer(__createFactories()), false);
    }

    private native static long __createFactories();

    /** **/
    public void assign(int num, org.ogre4j.ISceneManagerFactory val) {
        _assign__ivOgre_SceneManagerFactoryP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_SceneManagerFactoryP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ISceneManagerFactory back() {
         return new org.ogre4j.SceneManagerFactory(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.ISceneManagerFactory front() {
         return new org.ogre4j.SceneManagerFactory(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ISceneManagerFactory val) {
        _push_back__Ogre_SceneManagerFactoryP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_SceneManagerFactoryP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.ISceneManagerFactory val) {
        _push_front__Ogre_SceneManagerFactoryP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_SceneManagerFactoryP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.ISceneManagerFactory val) {
        _remove__Ogre_SceneManagerFactoryP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_SceneManagerFactoryP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SceneManagerEnumerator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SceneManagerEnumerator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SceneManagerEnumerator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SceneManagerEnumerator() {
         super( new org.xbig.base.InstancePointer(__createSceneManagerEnumerator()), false);
    }

    private native static long __createSceneManagerEnumerator();

    /** 
    Register a new . **/
    public void addFactory(org.ogre4j.ISceneManagerFactory fact) {
        _addFactory__SceneManagerFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void _addFactory__SceneManagerFactoryp(long _pointer_, long fact);

    /** 
    Remove a . **/
    public void removeFactory(org.ogre4j.ISceneManagerFactory fact) {
        _removeFactory__SceneManagerFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void _removeFactory__SceneManagerFactoryp(long _pointer_, long fact);

    /** 
    Get more information about a given type of . **/
    public org.ogre4j.ISceneManagerMetaData getMetaData(String typeName) {
         return new org.ogre4j.SceneManagerMetaData(new InstancePointer(_getMetaData__StringR_const(this.object.pointer, typeName)));
    }

    private native long _getMetaData__StringR_const(long _pointer_, String typeName);

    /** 
    Iterate over all types of  available for construction, providing some information about each one. **/
    public void getMetaDataIterator(org.ogre4j.ISceneManagerEnumerator.IMetaDataIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getMetaDataIterator_const(this.object.pointer)), false);
    }

    private native long _getMetaDataIterator_const(long _pointer_);

    /** 
    Create a  instance of a given type. **/
    public org.ogre4j.ISceneManager createSceneManager(String typeName, String instanceName) {
         return new org.ogre4j.SceneManager(new InstancePointer(_createSceneManager__StringRStringR(this.object.pointer, typeName,  instanceName)));
    }

    private native long _createSceneManager__StringRStringR(long _pointer_, String typeName, String instanceName);

    /** 
    Create a  instance based on scene type support. **/
    public org.ogre4j.ISceneManager createSceneManager(int typeMask, String instanceName) {
         return new org.ogre4j.SceneManager(new InstancePointer(_createSceneManager__SceneTypeMaskvStringR(this.object.pointer, typeMask,  instanceName)));
    }

    private native long _createSceneManager__SceneTypeMaskvStringR(long _pointer_, int typeMask, String instanceName);

    /** 
    Destroy an instance of a . **/
    public void destroySceneManager(org.ogre4j.ISceneManager sm) {
        _destroySceneManager__SceneManagerp(this.object.pointer, sm.getInstancePointer().pointer);
    }

    private native void _destroySceneManager__SceneManagerp(long _pointer_, long sm);

    /** 
    Get an existing  instance that has already been created, identified by the instance name. **/
    public org.ogre4j.ISceneManager getSceneManager(String instanceName) {
         return new org.ogre4j.SceneManager(new InstancePointer(_getSceneManager__StringR_const(this.object.pointer, instanceName)));
    }

    private native long _getSceneManager__StringR_const(long _pointer_, String instanceName);

    /** 
    Get an iterator over all the existing  instances. **/
    public void getSceneManagerIterator(org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getSceneManagerIterator(this.object.pointer)), false);
    }

    private native long _getSceneManagerIterator(long _pointer_);

    /** 
    Notifies all SceneManagers of the destination rendering system. **/
    public void setRenderSystem(org.ogre4j.IRenderSystem rs) {
        _setRenderSystem__RenderSystemp(this.object.pointer, rs.getInstancePointer().pointer);
    }

    private native void _setRenderSystem__RenderSystemp(long _pointer_, long rs);

    /** **/
    public void shutdownAll() {
        _shutdownAll(this.object.pointer);
    }

    private native void _shutdownAll(long _pointer_);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.ISceneManagerEnumerator getSingleton() {
         return new org.ogre4j.SceneManagerEnumerator(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.ISceneManagerEnumerator getSingletonPtr() {
         return new org.ogre4j.SceneManagerEnumerator(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

}
