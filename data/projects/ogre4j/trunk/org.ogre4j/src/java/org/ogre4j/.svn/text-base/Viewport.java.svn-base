/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Viewport extends org.xbig.base.NativeObject implements org.ogre4j.IViewport {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Viewport(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Viewport(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Viewport(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    The usual constructor. **/
    public Viewport(org.ogre4j.ICamera camera, org.ogre4j.IRenderTarget target, float left, float top, float width, float height, int ZOrder) {
         super( new org.xbig.base.InstancePointer(__createViewport__CamerapRenderTargetpRealvRealvRealvRealviv( camera.getInstancePointer().pointer,  target.getInstancePointer().pointer,  left,  top,  width,  height,  ZOrder)), false);
    }

    private native static long __createViewport__CamerapRenderTargetpRealvRealvRealvRealviv(long camera, long target, float left, float top, float width, float height, int ZOrder);

    /** 
    Notifies the viewport of a possible change in dimensions. **/
    public void _updateDimensions() {
        __updateDimensions(this.object.pointer);
    }

    private native void __updateDimensions(long _pointer_);

    /** 
    Instructs the viewport to updates its contents. **/
    public void update() {
        _update(this.object.pointer);
    }

    private native void _update(long _pointer_);

    /** 
    Retrieves a pointer to the render target for this viewport. **/
    public org.ogre4j.IRenderTarget getTarget() {
         return new org.ogre4j.RenderTarget(new InstancePointer(_getTarget_const(this.object.pointer)));
    }

    private native long _getTarget_const(long _pointer_);

    /** 
    Retrieves a pointer to the camera for this viewport. **/
    public org.ogre4j.ICamera getCamera() {
         return new org.ogre4j.Camera(new InstancePointer(_getCamera_const(this.object.pointer)));
    }

    private native long _getCamera_const(long _pointer_);

    /** 
    Sets the camera to use for rendering to this viewport. **/
    public void setCamera(org.ogre4j.ICamera cam) {
        _setCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void _setCamera__Camerap(long _pointer_, long cam);

    /** 
    Gets the Z-Order of this viewport. **/
    public int getZOrder() {
         return _getZOrder_const(this.object.pointer);
    }

    private native int _getZOrder_const(long _pointer_);

    /** 
    Gets one of the relative dimensions of the viewport, a value between 0.0 and 1.0. **/
    public float getLeft() {
         return _getLeft_const(this.object.pointer);
    }

    private native float _getLeft_const(long _pointer_);

    /** 
    Gets one of the relative dimensions of the viewport, a value between 0.0 and 1.0. **/
    public float getTop() {
         return _getTop_const(this.object.pointer);
    }

    private native float _getTop_const(long _pointer_);

    /** 
    Gets one of the relative dimensions of the viewport, a value between 0.0 and 1.0. **/
    public float getWidth() {
         return _getWidth_const(this.object.pointer);
    }

    private native float _getWidth_const(long _pointer_);

    /** 
    Gets one of the relative dimensions of the viewport, a value between 0.0 and 1.0. **/
    public float getHeight() {
         return _getHeight_const(this.object.pointer);
    }

    private native float _getHeight_const(long _pointer_);

    /** 
    Gets one of the actual dimensions of the viewport, a value in pixels. **/
    public int getActualLeft() {
         return _getActualLeft_const(this.object.pointer);
    }

    private native int _getActualLeft_const(long _pointer_);

    /** 
    Gets one of the actual dimensions of the viewport, a value in pixels. **/
    public int getActualTop() {
         return _getActualTop_const(this.object.pointer);
    }

    private native int _getActualTop_const(long _pointer_);

    /** 
    Gets one of the actual dimensions of the viewport, a value in pixels. **/
    public int getActualWidth() {
         return _getActualWidth_const(this.object.pointer);
    }

    private native int _getActualWidth_const(long _pointer_);

    /** 
    Gets one of the actual dimensions of the viewport, a value in pixels. **/
    public int getActualHeight() {
         return _getActualHeight_const(this.object.pointer);
    }

    private native int _getActualHeight_const(long _pointer_);

    /** 
    Sets the dimensions (after creation). **/
    public void setDimensions(float left, float top, float width, float height) {
        _setDimensions__RealvRealvRealvRealv(this.object.pointer, left,  top,  width,  height);
    }

    private native void _setDimensions__RealvRealvRealvRealv(long _pointer_, float left, float top, float width, float height);

    /** 
    Sets the initial background colour of the viewport (before rendering). **/
    public void setBackgroundColour(org.ogre4j.IColourValue colour) {
        _setBackgroundColour__ColourValueR(this.object.pointer, colour.getInstancePointer().pointer);
    }

    private native void _setBackgroundColour__ColourValueR(long _pointer_, long colour);

    /** 
    Gets the background colour. **/
    public org.ogre4j.IColourValue getBackgroundColour() {
         return new org.ogre4j.ColourValue(new InstancePointer(_getBackgroundColour_const(this.object.pointer)));
    }

    private native long _getBackgroundColour_const(long _pointer_);

    /** 
    Determines whether to clear the viewport before rendering. **/
    public void setClearEveryFrame(boolean clear, long buffers) {
        _setClearEveryFrame__bvIv(this.object.pointer, clear,  buffers);
    }

    private native void _setClearEveryFrame__bvIv(long _pointer_, boolean clear, long buffers);

    /** 
    Determines if the viewport is cleared before every frame. **/
    public boolean getClearEveryFrame() {
         return _getClearEveryFrame_const(this.object.pointer);
    }

    private native boolean _getClearEveryFrame_const(long _pointer_);

    /** 
    Gets which buffers are to be cleared each frame. **/
    public long getClearBuffers() {
         return _getClearBuffers_const(this.object.pointer);
    }

    private native long _getClearBuffers_const(long _pointer_);

    /** 
    Set the material scheme which the viewport should use. **/
    public void setMaterialScheme(String schemeName) {
        _setMaterialScheme__StringR(this.object.pointer, schemeName);
    }

    private native void _setMaterialScheme__StringR(long _pointer_, String schemeName);

    /** 
    Get the material scheme which the viewport should use. **/
    public String getMaterialScheme() {
         return _getMaterialScheme_const(this.object.pointer);
    }

    private native String _getMaterialScheme_const(long _pointer_);

    /** 
    Access to actual dimensions (based on target size). **/
    public void getActualDimensions(IntegerPointer left, IntegerPointer top, IntegerPointer width, IntegerPointer height) {
        _getActualDimensions__iriririr_const(this.object.pointer, left.object.pointer,  top.object.pointer,  width.object.pointer,  height.object.pointer);
    }

    private native void _getActualDimensions__iriririr_const(long _pointer_, long left, long top, long width, long height);

    /** **/
    public boolean _isUpdated() {
         return __isUpdated_const(this.object.pointer);
    }

    private native boolean __isUpdated_const(long _pointer_);

    /** **/
    public void _clearUpdatedFlag() {
        __clearUpdatedFlag(this.object.pointer);
    }

    private native void __clearUpdatedFlag(long _pointer_);

    /** 
    Gets the number of rendered faces in the last update. **/
    public long _getNumRenderedFaces() {
         return __getNumRenderedFaces_const(this.object.pointer);
    }

    private native long __getNumRenderedFaces_const(long _pointer_);

    /** 
    Gets the number of rendered batches in the last update. **/
    public long _getNumRenderedBatches() {
         return __getNumRenderedBatches_const(this.object.pointer);
    }

    private native long __getNumRenderedBatches_const(long _pointer_);

    /** 
    Tells this viewport whether it should display  objects. **/
    public void setOverlaysEnabled(boolean enabled) {
        _setOverlaysEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setOverlaysEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether or not  objects (created in the ) are displayed in this viewport. **/
    public boolean getOverlaysEnabled() {
         return _getOverlaysEnabled_const(this.object.pointer);
    }

    private native boolean _getOverlaysEnabled_const(long _pointer_);

    /** 
    Tells this viewport whether it should display skies. **/
    public void setSkiesEnabled(boolean enabled) {
        _setSkiesEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setSkiesEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether or not skies (created in the ) are displayed in this viewport. **/
    public boolean getSkiesEnabled() {
         return _getSkiesEnabled_const(this.object.pointer);
    }

    private native boolean _getSkiesEnabled_const(long _pointer_);

    /** 
    Tells this viewport whether it should display shadows. **/
    public void setShadowsEnabled(boolean enabled) {
        _setShadowsEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setShadowsEnabled__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether or not shadows (defined in the ) are displayed in this viewport. **/
    public boolean getShadowsEnabled() {
         return _getShadowsEnabled_const(this.object.pointer);
    }

    private native boolean _getShadowsEnabled_const(long _pointer_);

    /** 
    Sets a per-viewport visibility mask. **/
    public void setVisibilityMask(long mask) {
        _setVisibilityMask__uint32v(this.object.pointer, mask);
    }

    private native void _setVisibilityMask__uint32v(long _pointer_, long mask);

    /** 
    Gets a per-viewport visibility mask. **/
    public long getVisibilityMask() {
         return _getVisibilityMask_const(this.object.pointer);
    }

    private native long _getVisibilityMask_const(long _pointer_);

    /** 
    Sets the use of a custom  for rendering this target. **/
    public void setRenderQueueInvocationSequenceName(String sequenceName) {
        _setRenderQueueInvocationSequenceName__StringR(this.object.pointer, sequenceName);
    }

    private native void _setRenderQueueInvocationSequenceName__StringR(long _pointer_, String sequenceName);

    /** 
    Gets the name of the render queue invocation sequence for this target. **/
    public String getRenderQueueInvocationSequenceName() {
         return _getRenderQueueInvocationSequenceName_const(this.object.pointer);
    }

    private native String _getRenderQueueInvocationSequenceName_const(long _pointer_);

    /** **/
    public org.ogre4j.IRenderQueueInvocationSequence _getRenderQueueInvocationSequence() {
         return new org.ogre4j.RenderQueueInvocationSequence(new InstancePointer(__getRenderQueueInvocationSequence(this.object.pointer)));
    }

    private native long __getRenderQueueInvocationSequence(long _pointer_);

}
