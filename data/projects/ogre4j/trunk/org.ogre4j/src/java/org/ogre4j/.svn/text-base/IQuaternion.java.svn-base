/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IQuaternion extends INativeObject {

    /** **/
    public float operatorIndex_const(int i);

    /** **/
    public FloatPointer operatorIndex(int i);

    /** **/
    public FloatPointer ptr();

    /** **/
    public FloatPointer ptr_const();

    /** **/
    public void FromRotationMatrix(org.ogre4j.IMatrix3 kRot);

    /** **/
    public void ToRotationMatrix(org.ogre4j.IMatrix3 kRot);

    /** **/
    public void FromAngleAxis(org.ogre4j.IRadian rfAngle, org.ogre4j.IVector3 rkAxis);

    /** **/
    public void ToAngleAxis(org.ogre4j.IRadian rfAngle, org.ogre4j.IVector3 rkAxis);

    /** **/
    public void ToAngleAxis(org.ogre4j.IDegree dAngle, org.ogre4j.IVector3 rkAxis);

    /** **/
    public void FromAxes(org.ogre4j.IVector3 akAxis);

    /** **/
    public void FromAxes(org.ogre4j.IVector3 xAxis, org.ogre4j.IVector3 yAxis, org.ogre4j.IVector3 zAxis);

    /** **/
    public void ToAxes(org.ogre4j.IVector3 akAxis);

    /** **/
    public void ToAxes(org.ogre4j.IVector3 xAxis, org.ogre4j.IVector3 yAxis, org.ogre4j.IVector3 zAxis);

    /** **/
    public void xAxis(org.ogre4j.IVector3 returnValue);

    /** **/
    public void yAxis(org.ogre4j.IVector3 returnValue);

    /** **/
    public void zAxis(org.ogre4j.IVector3 returnValue);

    /** **/
    public org.ogre4j.IQuaternion operatorAssignment(org.ogre4j.IQuaternion rkQ);

    /** **/
    public void operatorAddition(org.ogre4j.IQuaternion returnValue, org.ogre4j.IQuaternion rkQ);

    /** **/
    public void operatorSubtraction(org.ogre4j.IQuaternion returnValue, org.ogre4j.IQuaternion rkQ);

    /** **/
    public void operatorMultiplication(org.ogre4j.IQuaternion returnValue, org.ogre4j.IQuaternion rkQ);

    /** **/
    public void operatorMultiplication(org.ogre4j.IQuaternion returnValue, float fScalar);

    /** **/
    public void operatorSubtraction(org.ogre4j.IQuaternion returnValue);

    /** **/
    public boolean operatorEqual(org.ogre4j.IQuaternion rhs);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IQuaternion rhs);

    /** **/
    public float Dot(org.ogre4j.IQuaternion rkQ);

    /** **/
    public float Norm();

    /** **/
    public float normalise();

    /** **/
    public void Inverse(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void UnitInverse(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void Exp(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void Log(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rkVector);

    /** 
    Calculate the local roll element of this quaternion. **/
    public void getRoll(org.ogre4j.IRadian returnValue, boolean reprojectAxis);

    /** 
    Calculate the local pitch element of this quaternion **/
    public void getPitch(org.ogre4j.IRadian returnValue, boolean reprojectAxis);

    /** 
    Calculate the local yaw element of this quaternion **/
    public void getYaw(org.ogre4j.IRadian returnValue, boolean reprojectAxis);

    /** **/
    public boolean equals(org.ogre4j.IQuaternion rhs, org.ogre4j.IRadian tolerance);

    /** **/
    public float getw();

    /** **/
    public void setw(float _jni_value_);

    /** **/
    public float getx();

    /** **/
    public void setx(float _jni_value_);

    /** **/
    public float gety();

    /** **/
    public void sety(float _jni_value_);

    /** **/
    public float getz();

    /** **/
    public void setz(float _jni_value_);

}
