/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class RibbonTrail extends org.xbig.base.NativeObject implements org.ogre4j.IRibbonTrail {
static { System.loadLibrary("ogre4j");}
public static class NodeList extends org.xbig.base.NativeObject implements org.ogre4j.IRibbonTrail.INodeList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NodeList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NodeList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NodeList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NodeList() {
         super( new org.xbig.base.InstancePointer(__createNodeList()), false);
    }

    private native static long __createNodeList();

    /** **/
    public void assign(int num, org.ogre4j.INode val) {
        _assign__ivOgre_NodeP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_NodeP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.INode at(int loc) {
         return new org.ogre4j.Node(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.INode back() {
         return new org.ogre4j.Node(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.INode front() {
         return new org.ogre4j.Node(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.INode val) {
        _push_back__Ogre_NodeP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_NodeP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class NodeIterator extends org.xbig.base.NativeObject implements org.ogre4j.IRibbonTrail.INodeIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NodeIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NodeIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NodeIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NodeIterator(org.ogre4j.IRibbonTrail.INodeList c) {
         super( new org.xbig.base.InstancePointer(__createNodeIterator__Ogre_RibbonTrail_NodeListR( c.getInstancePointer().pointer)), false);
    }

    private native static long __createNodeIterator__Ogre_RibbonTrail_NodeListR(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.INode getNext() {
         return new org.ogre4j.Node(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.INode peekNext() {
         return new org.ogre4j.Node(new InstancePointer(_peekNext_const(this.object.pointer)));
    }

    private native long _peekNext_const(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.INode> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.INode>(new InstancePointer(_peekNextPtr_const(this.object.pointer)));
    }

    private native long _peekNextPtr_const(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext_const(this.object.pointer);
    }

    private native void _moveNext_const(long _pointer_);

}
protected static class IndexVector extends org.xbig.base.NativeObject implements org.ogre4j.IRibbonTrail.IIndexVector {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public IndexVector(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected IndexVector(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public IndexVector(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public IndexVector() {
         super( new org.xbig.base.InstancePointer(__createIndexVector()), false);
    }

    private native static long __createIndexVector();

    /** **/
    public void assign(int num, int val) {
        _assign__iviR(this.object.pointer, num,  val);
    }

    private native void _assign__iviR(long _pointer_, int num, int val);

    /** **/
    public IntegerPointer at(int loc) {
         return new IntegerPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public IntegerPointer back() {
         return new IntegerPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public IntegerPointer front() {
         return new IntegerPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(int val) {
        _push_back__iR(this.object.pointer, val);
    }

    private native void _push_back__iR(long _pointer_, int val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class NodeToChainSegmentMap extends org.xbig.base.NativeObject implements org.ogre4j.IRibbonTrail.INodeToChainSegmentMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NodeToChainSegmentMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NodeToChainSegmentMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NodeToChainSegmentMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NodeToChainSegmentMap() {
         super( new org.xbig.base.InstancePointer(__createNodeToChainSegmentMap()), false);
    }

    private native static long __createNodeToChainSegmentMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.INode key) {
         return _count__Ogre_NodeP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_NodeP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.INode key) {
         return _erase__Ogre_NodeP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_NodeP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public IntegerPointer get(org.ogre4j.INode key) {
         return new IntegerPointer(new InstancePointer(_get__Ogre_NodeP(this.object.pointer, key.getInstancePointer().pointer)));
    }

    private native long _get__Ogre_NodeP(long _pointer_, long key);

    /** **/
    public void insert(org.ogre4j.INode key, IntegerPointer value) {
        _insert__Ogre_NodePir(this.object.pointer, key.getInstancePointer().pointer,  value.object.pointer);
    }

    private native void _insert__Ogre_NodePir(long _pointer_, long key, long value);

}
protected static class ColourValueList extends org.xbig.base.NativeObject implements org.ogre4j.IRibbonTrail.IColourValueList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ColourValueList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ColourValueList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ColourValueList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ColourValueList() {
         super( new org.xbig.base.InstancePointer(__createColourValueList()), false);
    }

    private native static long __createColourValueList();

    /** **/
    public void assign(int num, org.ogre4j.IColourValue val) {
        _assign__ivOgre_ColourValueR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_ColourValueR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IColourValue at(int loc) {
         return new org.ogre4j.ColourValue(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IColourValue back() {
         return new org.ogre4j.ColourValue(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IColourValue front() {
         return new org.ogre4j.ColourValue(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IColourValue val) {
        _push_back__Ogre_ColourValueR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_ColourValueR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
protected static class RealList extends org.xbig.base.NativeObject implements org.ogre4j.IRibbonTrail.IRealList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RealList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RealList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RealList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RealList() {
         super( new org.xbig.base.InstancePointer(__createRealList()), false);
    }

    private native static long __createRealList();

    /** **/
    public void assign(int num, float val) {
        _assign__ivFR(this.object.pointer, num,  val);
    }

    private native void _assign__ivFR(long _pointer_, int num, float val);

    /** **/
    public FloatPointer at(int loc) {
         return new FloatPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public FloatPointer back() {
         return new FloatPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public FloatPointer front() {
         return new FloatPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(float val) {
        _push_back__FR(this.object.pointer, val);
    }

    private native void _push_back__FR(long _pointer_, float val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RibbonTrail(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RibbonTrail(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RibbonTrail(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Constructor (don't use directly, use factory) **/
    public RibbonTrail(String name, int maxElements, int numberOfChains, boolean useTextureCoords, boolean useColours) {
         super( new org.xbig.base.InstancePointer(__createRibbonTrail__StringRivivbvbv( name,  maxElements,  numberOfChains,  useTextureCoords,  useColours)), false);
    }

    private native static long __createRibbonTrail__StringRivivbvbv(String name, int maxElements, int numberOfChains, boolean useTextureCoords, boolean useColours);

    /** 
    Add a node to be tracked. **/
    public void addNode(org.ogre4j.INode n) {
        _addNode__Nodep(this.object.pointer, n.getInstancePointer().pointer);
    }

    private native void _addNode__Nodep(long _pointer_, long n);

    /** 
    Remove tracking on a given node. **/
    public void removeNode(org.ogre4j.INode n) {
        _removeNode__Nodep(this.object.pointer, n.getInstancePointer().pointer);
    }

    private native void _removeNode__Nodep(long _pointer_, long n);

    /** 
    Get an iterator over the nodes which are being tracked. **/
    public void getNodeIterator(org.ogre4j.IRibbonTrail.INodeIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getNodeIterator_const(this.object.pointer)), false);
    }

    private native long _getNodeIterator_const(long _pointer_);

    /** 
    Get the chain index for a given  being tracked. **/
    public int getChainIndexForNode(org.ogre4j.INode n) {
         return _getChainIndexForNode__NodeP(this.object.pointer, n.getInstancePointer().pointer);
    }

    private native int _getChainIndexForNode__NodeP(long _pointer_, long n);

    /** 
    Set the length of the trail. **/
    public void setTrailLength(float len) {
        _setTrailLength__Realv(this.object.pointer, len);
    }

    private native void _setTrailLength__Realv(long _pointer_, float len);

    /** 
    Get the length of the trail. **/
    public float getTrailLength() {
         return _getTrailLength_const(this.object.pointer);
    }

    private native float _getTrailLength_const(long _pointer_);

    /** 
    **/
    public void setMaxChainElements(int maxElements) {
        _setMaxChainElements__iv(this.object.pointer, maxElements);
    }

    private native void _setMaxChainElements__iv(long _pointer_, int maxElements);

    /** 
    **/
    public void setNumberOfChains(int numChains) {
        _setNumberOfChains__iv(this.object.pointer, numChains);
    }

    private native void _setNumberOfChains__iv(long _pointer_, int numChains);

    /** 
    **/
    public void clearChain(int chainIndex) {
        _clearChain__iv(this.object.pointer, chainIndex);
    }

    private native void _clearChain__iv(long _pointer_, int chainIndex);

    /** 
    Set the starting ribbon colour for a given segment. **/
    public void setInitialColour(int chainIndex, org.ogre4j.IColourValue col) {
        _setInitialColour__ivColourValueR(this.object.pointer, chainIndex,  col.getInstancePointer().pointer);
    }

    private native void _setInitialColour__ivColourValueR(long _pointer_, int chainIndex, long col);

    /** 
    Set the starting ribbon colour. **/
    public void setInitialColour(int chainIndex, float r, float g, float b, float a) {
        _setInitialColour__ivRealvRealvRealvRealv(this.object.pointer, chainIndex,  r,  g,  b,  a);
    }

    private native void _setInitialColour__ivRealvRealvRealvRealv(long _pointer_, int chainIndex, float r, float g, float b, float a);

    /** 
    Get the starting ribbon colour. **/
    public org.ogre4j.IColourValue getInitialColour(int chainIndex) {
         return new org.ogre4j.ColourValue(new InstancePointer(_getInitialColour__iv_const(this.object.pointer, chainIndex)));
    }

    private native long _getInitialColour__iv_const(long _pointer_, int chainIndex);

    /** 
    Enables / disables fading the trail using colour. **/
    public void setColourChange(int chainIndex, org.ogre4j.IColourValue valuePerSecond) {
        _setColourChange__ivColourValueR(this.object.pointer, chainIndex,  valuePerSecond.getInstancePointer().pointer);
    }

    private native void _setColourChange__ivColourValueR(long _pointer_, int chainIndex, long valuePerSecond);

    /** 
    Set the starting ribbon width in world units. **/
    public void setInitialWidth(int chainIndex, float width) {
        _setInitialWidth__ivRealv(this.object.pointer, chainIndex,  width);
    }

    private native void _setInitialWidth__ivRealv(long _pointer_, int chainIndex, float width);

    /** 
    Get the starting ribbon width in world units. **/
    public float getInitialWidth(int chainIndex) {
         return _getInitialWidth__iv_const(this.object.pointer, chainIndex);
    }

    private native float _getInitialWidth__iv_const(long _pointer_, int chainIndex);

    /** 
    Set the change in ribbon width per second. **/
    public void setWidthChange(int chainIndex, float widthDeltaPerSecond) {
        _setWidthChange__ivRealv(this.object.pointer, chainIndex,  widthDeltaPerSecond);
    }

    private native void _setWidthChange__ivRealv(long _pointer_, int chainIndex, float widthDeltaPerSecond);

    /** 
    Get the change in ribbon width per second. **/
    public float getWidthChange(int chainIndex) {
         return _getWidthChange__iv_const(this.object.pointer, chainIndex);
    }

    private native float _getWidthChange__iv_const(long _pointer_, int chainIndex);

    /** 
    Enables / disables fading the trail using colour. **/
    public void setColourChange(int chainIndex, float r, float g, float b, float a) {
        _setColourChange__ivRealvRealvRealvRealv(this.object.pointer, chainIndex,  r,  g,  b,  a);
    }

    private native void _setColourChange__ivRealvRealvRealvRealv(long _pointer_, int chainIndex, float r, float g, float b, float a);

    /** 
    Get the per-second fading amount **/
    public org.ogre4j.IColourValue getColourChange(int chainIndex) {
         return new org.ogre4j.ColourValue(new InstancePointer(_getColourChange__iv_const(this.object.pointer, chainIndex)));
    }

    private native long _getColourChange__iv_const(long _pointer_, int chainIndex);

    /** **/
    public void nodeUpdated(org.ogre4j.INode node) {
        _nodeUpdated__NodeP(this.object.pointer, node.getInstancePointer().pointer);
    }

    private native void _nodeUpdated__NodeP(long _pointer_, long node);

    /** **/
    public void nodeDestroyed(org.ogre4j.INode node) {
        _nodeDestroyed__NodeP(this.object.pointer, node.getInstancePointer().pointer);
    }

    private native void _nodeDestroyed__NodeP(long _pointer_, long node);

    /** **/
    public void _timeUpdate(float time) {
        __timeUpdate__Realv(this.object.pointer, time);
    }

    private native void __timeUpdate__Realv(long _pointer_, float time);

    /** 
    Overridden from **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** 
    Get the maximum number of chain elements per chain **/
    public int getMaxChainElements() {
         return _getMaxChainElements_const(this.object.pointer);
    }

    private native int _getMaxChainElements_const(long _pointer_);

    /** 
    Get the number of chain segments (this class can render multiple chains at once using the same material). **/
    public int getNumberOfChains() {
         return _getNumberOfChains_const(this.object.pointer);
    }

    private native int _getNumberOfChains_const(long _pointer_);

    /** 
    Sets whether texture coordinate information should be included in the final buffers generated. **/
    public void setUseTextureCoords(boolean use) {
        _setUseTextureCoords__bv(this.object.pointer, use);
    }

    private native void _setUseTextureCoords__bv(long _pointer_, boolean use);

    /** 
    Gets whether texture coordinate information should be included in the final buffers generated. **/
    public boolean getUseTextureCoords() {
         return _getUseTextureCoords_const(this.object.pointer);
    }

    private native boolean _getUseTextureCoords_const(long _pointer_);

    /** 
    Sets the direction in which texture coords specified on each element are deemed to run along the length of the chain. **/
    public void setTextureCoordDirection(org.ogre4j.BillboardChain.TexCoordDirection dir) {
        _setTextureCoordDirection__TexCoordDirectionv(this.object.pointer, dir.getValue());
    }

    private native void _setTextureCoordDirection__TexCoordDirectionv(long _pointer_, int dir);

    /** 
    Gets the direction in which texture coords specified on each element are deemed to run. **/
    public org.ogre4j.BillboardChain.TexCoordDirection getTextureCoordDirection() {
         return org.ogre4j.BillboardChain.TexCoordDirection.toEnum(_getTextureCoordDirection(this.object.pointer));
    }

    private native int _getTextureCoordDirection(long _pointer_);

    /** 
    Set the range of the texture coordinates generated across the width of the chain elements. **/
    public void setOtherTextureCoordRange(float start, float end) {
        _setOtherTextureCoordRange__RealvRealv(this.object.pointer, start,  end);
    }

    private native void _setOtherTextureCoordRange__RealvRealv(long _pointer_, float start, float end);

    /** 
    Get the range of the texture coordinates generated across the width of the chain elements. **/
    public FloatPointer getOtherTextureCoordRange() {
         return new FloatPointer(new InstancePointer(_getOtherTextureCoordRange_const(this.object.pointer)));
    }

    private native long _getOtherTextureCoordRange_const(long _pointer_);

    /** 
    Sets whether vertex colour information should be included in the final buffers generated. **/
    public void setUseVertexColours(boolean use) {
        _setUseVertexColours__bv(this.object.pointer, use);
    }

    private native void _setUseVertexColours__bv(long _pointer_, boolean use);

    /** 
    Gets whether vertex colour information should be included in the final buffers generated. **/
    public boolean getUseVertexColours() {
         return _getUseVertexColours_const(this.object.pointer);
    }

    private native boolean _getUseVertexColours_const(long _pointer_);

    /** 
    Sets whether or not the buffers created for this object are suitable for dynamic alteration. **/
    public void setDynamic(boolean dyn) {
        _setDynamic__bv(this.object.pointer, dyn);
    }

    private native void _setDynamic__bv(long _pointer_, boolean dyn);

    /** 
    Gets whether or not the buffers created for this object are suitable for dynamic alteration. **/
    public boolean getDynamic() {
         return _getDynamic_const(this.object.pointer);
    }

    private native boolean _getDynamic_const(long _pointer_);

    /** 
    Add an element to the 'head' of a chain. **/
    public void addChainElement(int chainIndex, org.ogre4j.IBillboardChain.IElement billboardChainElement) {
        _addChainElement__ivElementR(this.object.pointer, chainIndex,  billboardChainElement.getInstancePointer().pointer);
    }

    private native void _addChainElement__ivElementR(long _pointer_, int chainIndex, long billboardChainElement);

    /** 
    Remove an element from the 'tail' of a chain. **/
    public void removeChainElement(int chainIndex) {
        _removeChainElement__iv(this.object.pointer, chainIndex);
    }

    private native void _removeChainElement__iv(long _pointer_, int chainIndex);

    /** 
    Update the details of an existing chain element. **/
    public void updateChainElement(int chainIndex, int elementIndex, org.ogre4j.IBillboardChain.IElement billboardChainElement) {
        _updateChainElement__ivivElementR(this.object.pointer, chainIndex,  elementIndex,  billboardChainElement.getInstancePointer().pointer);
    }

    private native void _updateChainElement__ivivElementR(long _pointer_, int chainIndex, int elementIndex, long billboardChainElement);

    /** 
    Get the detail of a chain element. **/
    public org.ogre4j.IBillboardChain.IElement getChainElement(int chainIndex, int elementIndex) {
         return new org.ogre4j.BillboardChain.Element(new InstancePointer(_getChainElement__iviv_const(this.object.pointer, chainIndex,  elementIndex)));
    }

    private native long _getChainElement__iviv_const(long _pointer_, int chainIndex, int elementIndex);

    /** 
    Returns the number of chain elements. **/
    public int getNumChainElements(int chainIndex) {
         return _getNumChainElements__iv_const(this.object.pointer, chainIndex);
    }

    private native int _getNumChainElements__iv_const(long _pointer_, int chainIndex);

    /** 
    Remove all elements from all chains (but leave the chains themselves intact). **/
    public void clearAllChains() {
        _clearAllChains(this.object.pointer);
    }

    private native void _clearAllChains(long _pointer_);

    /** **/
    public String getMaterialName() {
         return _getMaterialName_const(this.object.pointer);
    }

    private native String _getMaterialName_const(long _pointer_);

    /** **/
    public void setMaterialName(String name) {
        _setMaterialName__StringR(this.object.pointer, name);
    }

    private native void _setMaterialName__StringR(long _pointer_, String name);

    /** **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam) {
         return _getSquaredViewDepth__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native float _getSquaredViewDepth__CameraP_const(long _pointer_, long cam);

    /** **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue a1) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long a1);

    /** **/
    public void getRenderOperation(org.ogre4j.IRenderOperation a1) {
        _getRenderOperation__RenderOperationr(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _getRenderOperation__RenderOperationr(long _pointer_, long a1);

    /** **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 a1) {
        _getWorldTransforms__Matrix4p_const(this.object.pointer, a1.getInstancePointer().pointer);
    }

    private native void _getWorldTransforms__Matrix4p_const(long _pointer_, long a1);

    /** **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the name of this object. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been attached to a node. **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Get the 'type flags' for this . **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** 
    Create a reference-counted AnimableValuePtr for the named value. **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

    /** 
    Retrieves a pointer to the  this renderable object uses. **/
    public org.ogre4j.ITechnique getTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getTechnique_const(this.object.pointer)));
    }

    private native long _getTechnique_const(long _pointer_);

    /** 
    Called just prior to the  being rendered. **/
    public boolean preRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
         return _preRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native boolean _preRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Called immediately after the  has been rendered. **/
    public void postRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
        _postRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native void _postRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Returns the number of world transform matrices this renderable requires. **/
    public int getNumWorldTransforms() {
         return _getNumWorldTransforms_const(this.object.pointer);
    }

    private native int _getNumWorldTransforms_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Method which reports whether this renderable would normally cast a shadow. **/
    public boolean getCastsShadows() {
         return _getCastsShadows_const(this.object.pointer);
    }

    private native boolean _getCastsShadows_const(long _pointer_);

    /** 
    Sets a custom parameter for this , which may be used to drive calculations for this specific , like GPU program parameters. **/
    public void setCustomParameter(int index, org.ogre4j.IVector4 value) {
        _setCustomParameter__ivVector4R(this.object.pointer, index,  value.getInstancePointer().pointer);
    }

    private native void _setCustomParameter__ivVector4R(long _pointer_, int index, long value);

    /** 
    Gets the custom value associated with this  at the given index. **/
    public org.ogre4j.IVector4 getCustomParameter(int index) {
         return new org.ogre4j.Vector4(new InstancePointer(_getCustomParameter__iv_const(this.object.pointer, index)));
    }

    private native long _getCustomParameter__iv_const(long _pointer_, int index);

    /** 
    Update a custom  constant which is derived from information only this  knows. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params) {
        __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(this.object.pointer, constantEntry.getInstancePointer().pointer,  params.getInstancePointer().pointer);
    }

    private native void __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(long _pointer_, long constantEntry, long params);

    /** 
    Sets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets render system private data **/
    public org.ogre4j.IRenderable.IRenderSystemData getRenderSystemData() {
         return new org.ogre4j.Renderable.RenderSystemData(new InstancePointer(_getRenderSystemData_const(this.object.pointer)));
    }

    private native long _getRenderSystemData_const(long _pointer_);

    /** 
    gets render system private data **/
    public void setRenderSystemData(org.ogre4j.IRenderable.IRenderSystemData val) {
        _setRenderSystemData__RenderSystemDatap_const(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setRenderSystemData__RenderSystemDatap_const(long _pointer_, long val);

    /** 
     is being destroyed **/
    public void objectDestroyed(org.ogre4j.IMovableObject a1) {
            throw new UnsupportedOperationException("This method is on ignore list!");
    }



    /** 
     has been attached to a node **/
    public void objectAttached(org.ogre4j.IMovableObject a1) {
            throw new UnsupportedOperationException("This method is on ignore list!");
    }



    /** 
     has been detached from a node **/
    public void objectDetached(org.ogre4j.IMovableObject a1) {
            throw new UnsupportedOperationException("This method is on ignore list!");
    }



    /** 
     has been moved **/
    public void objectMoved(org.ogre4j.IMovableObject a1) {
            throw new UnsupportedOperationException("This method is on ignore list!");
    }



    /** 
    Called when the movable object of the camera to be used for rendering. **/
    public boolean objectRendering(org.ogre4j.IMovableObject a1, org.ogre4j.ICamera a2) {
            throw new UnsupportedOperationException("This method is on ignore list!");
    }



    /** 
    Called when the movable object needs to query a light list. **/
    public org.ogre4j.ILightList objectQueryLights(org.ogre4j.IMovableObject a1) {
            throw new UnsupportedOperationException("This method is on ignore list!");
    }



}
