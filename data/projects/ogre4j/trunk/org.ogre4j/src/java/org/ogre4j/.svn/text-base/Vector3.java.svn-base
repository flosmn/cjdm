/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Vector3 extends org.xbig.base.NativeObject implements org.ogre4j.IVector3 {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Vector3(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Vector3(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Vector3(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Vector3() {
         super( new org.xbig.base.InstancePointer(__createVector3()), false);
    }

    private native static long __createVector3();

    /** **/
    public Vector3(float fX, float fY, float fZ) {
         super( new org.xbig.base.InstancePointer(__createVector3__RealVRealVRealV( fX,  fY,  fZ)), false);
    }

    private native static long __createVector3__RealVRealVRealV(float fX, float fY, float fZ);

    /** **/
    public Vector3(int afCoordinate) {
         super( new org.xbig.base.InstancePointer(__createVector3__iV( afCoordinate)), false);
    }

    private native static long __createVector3__iV(int afCoordinate);

    /** **/
    public Vector3(FloatPointer r) {
         super( new org.xbig.base.InstancePointer(__createVector3__Realp( r.object.pointer)), false);
    }

    private native static long __createVector3__Realp(long r);

    /** **/
    public float operatorIndex_const(int i) {
         return _operatorIndex_const__iV_const(this.object.pointer, i);
    }

    private native float _operatorIndex_const__iV_const(long _pointer_, int i);

    /** **/
    public FloatPointer operatorIndex(int i) {
         return new FloatPointer(new InstancePointer(_operatorIndex__iV(this.object.pointer, i)));
    }

    private native long _operatorIndex__iV(long _pointer_, int i);

    /** **/
    public FloatPointer ptr() {
         return new FloatPointer(new InstancePointer(_ptr(this.object.pointer)));
    }

    private native long _ptr(long _pointer_);

    /** **/
    public FloatPointer ptr_const() {
         return new FloatPointer(new InstancePointer(_ptr_const_const(this.object.pointer)));
    }

    private native long _ptr_const_const(long _pointer_);

    /** 
    Assigns the value of the other vector. **/
    public org.ogre4j.IVector3 operatorAssignment(org.ogre4j.IVector3 rkVector) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorAssignment__Vector3R(this.object.pointer, rkVector.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment__Vector3R(long _pointer_, long rkVector);

    /** **/
    public org.ogre4j.IVector3 operatorAssignment(float fScaler) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorAssignment__RealV(this.object.pointer, fScaler)));
    }

    private native long _operatorAssignment__RealV(long _pointer_, float fScaler);

    /** **/
    public boolean operatorEqual(org.ogre4j.IVector3 rkVector) {
         return _operatorEqual__Vector3R_const(this.object.pointer, rkVector.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__Vector3R_const(long _pointer_, long rkVector);

    /** **/
    public boolean operatorNotEqual(org.ogre4j.IVector3 rkVector) {
         return _operatorNotEqual__Vector3R_const(this.object.pointer, rkVector.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__Vector3R_const(long _pointer_, long rkVector);

    /** **/
    public void operatorAddition(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rkVector) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorAddition__Vector3R_const(this.object.pointer, rkVector.getInstancePointer().pointer)), false);
    }

    private native long _operatorAddition__Vector3R_const(long _pointer_, long rkVector);

    /** **/
    public void operatorSubtraction(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rkVector) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction__Vector3R_const(this.object.pointer, rkVector.getInstancePointer().pointer)), false);
    }

    private native long _operatorSubtraction__Vector3R_const(long _pointer_, long rkVector);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, float fScalar) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__RealV_const(this.object.pointer, fScalar)), false);
    }

    private native long _operatorMultiplication__RealV_const(long _pointer_, float fScalar);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rhs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorMultiplication__Vector3R_const(this.object.pointer, rhs.getInstancePointer().pointer)), false);
    }

    private native long _operatorMultiplication__Vector3R_const(long _pointer_, long rhs);

    /** **/
    public void operatorDivision(org.ogre4j.IVector3 returnValue, float fScalar) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorDivision__RealV_const(this.object.pointer, fScalar)), false);
    }

    private native long _operatorDivision__RealV_const(long _pointer_, float fScalar);

    /** **/
    public void operatorDivision(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rhs) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorDivision__Vector3R_const(this.object.pointer, rhs.getInstancePointer().pointer)), false);
    }

    private native long _operatorDivision__Vector3R_const(long _pointer_, long rhs);

    /** **/
    public org.ogre4j.IVector3 operatorAddition() {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorAddition_const(this.object.pointer)));
    }

    private native long _operatorAddition_const(long _pointer_);

    /** **/
    public void operatorSubtraction(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_operatorSubtraction_const(this.object.pointer)), false);
    }

    private native long _operatorSubtraction_const(long _pointer_);

    /** **/
    public org.ogre4j.IVector3 operatorIncrementAndAssign(org.ogre4j.IVector3 rkVector) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorIncrementAndAssign__Vector3R(this.object.pointer, rkVector.getInstancePointer().pointer)));
    }

    private native long _operatorIncrementAndAssign__Vector3R(long _pointer_, long rkVector);

    /** **/
    public org.ogre4j.IVector3 operatorIncrementAndAssign(float fScalar) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorIncrementAndAssign__RealV(this.object.pointer, fScalar)));
    }

    private native long _operatorIncrementAndAssign__RealV(long _pointer_, float fScalar);

    /** **/
    public org.ogre4j.IVector3 operatorDecrementAndAssign(org.ogre4j.IVector3 rkVector) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorDecrementAndAssign__Vector3R(this.object.pointer, rkVector.getInstancePointer().pointer)));
    }

    private native long _operatorDecrementAndAssign__Vector3R(long _pointer_, long rkVector);

    /** **/
    public org.ogre4j.IVector3 operatorDecrementAndAssign(float fScalar) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorDecrementAndAssign__RealV(this.object.pointer, fScalar)));
    }

    private native long _operatorDecrementAndAssign__RealV(long _pointer_, float fScalar);

    /** **/
    public org.ogre4j.IVector3 operatorMultiplyAndAssign(float fScalar) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorMultiplyAndAssign__RealV(this.object.pointer, fScalar)));
    }

    private native long _operatorMultiplyAndAssign__RealV(long _pointer_, float fScalar);

    /** **/
    public org.ogre4j.IVector3 operatorMultiplyAndAssign(org.ogre4j.IVector3 rkVector) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorMultiplyAndAssign__Vector3R(this.object.pointer, rkVector.getInstancePointer().pointer)));
    }

    private native long _operatorMultiplyAndAssign__Vector3R(long _pointer_, long rkVector);

    /** **/
    public org.ogre4j.IVector3 operatorDivideAndAssign(float fScalar) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorDivideAndAssign__RealV(this.object.pointer, fScalar)));
    }

    private native long _operatorDivideAndAssign__RealV(long _pointer_, float fScalar);

    /** **/
    public org.ogre4j.IVector3 operatorDivideAndAssign(org.ogre4j.IVector3 rkVector) {
         return new org.ogre4j.Vector3(new InstancePointer(_operatorDivideAndAssign__Vector3R(this.object.pointer, rkVector.getInstancePointer().pointer)));
    }

    private native long _operatorDivideAndAssign__Vector3R(long _pointer_, long rkVector);

    /** 
    Returns the length (magnitude) of the vector. **/
    public float length() {
         return _length_const(this.object.pointer);
    }

    private native float _length_const(long _pointer_);

    /** 
    Returns the square of the length(magnitude) of the vector. **/
    public float squaredLength() {
         return _squaredLength_const(this.object.pointer);
    }

    private native float _squaredLength_const(long _pointer_);

    /** 
    Returns the distance to another vector. **/
    public float distance(org.ogre4j.IVector3 rhs) {
         return _distance__Vector3R_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native float _distance__Vector3R_const(long _pointer_, long rhs);

    /** 
    Returns the square of the distance to another vector. **/
    public float squaredDistance(org.ogre4j.IVector3 rhs) {
         return _squaredDistance__Vector3R_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native float _squaredDistance__Vector3R_const(long _pointer_, long rhs);

    /** 
    Calculates the dot (scalar) product of this vector with another. **/
    public float dotProduct(org.ogre4j.IVector3 vec) {
         return _dotProduct__Vector3R_const(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native float _dotProduct__Vector3R_const(long _pointer_, long vec);

    /** 
    Calculates the absolute dot (scalar) product of this vector with another. **/
    public float absDotProduct(org.ogre4j.IVector3 vec) {
         return _absDotProduct__Vector3R_const(this.object.pointer, vec.getInstancePointer().pointer);
    }

    private native float _absDotProduct__Vector3R_const(long _pointer_, long vec);

    /** 
    Normalises the vector. **/
    public float normalise() {
         return _normalise(this.object.pointer);
    }

    private native float _normalise(long _pointer_);

    /** 
    Calculates the cross-product of 2 vectors, i.e. the vector that lies perpendicular to them both. **/
    public void crossProduct(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 rkVector) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_crossProduct__Vector3R_const(this.object.pointer, rkVector.getInstancePointer().pointer)), false);
    }

    private native long _crossProduct__Vector3R_const(long _pointer_, long rkVector);

    /** 
    Returns a vector at a point half way between this and the passed in vector. **/
    public void midPoint(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 vec) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_midPoint__Vector3R_const(this.object.pointer, vec.getInstancePointer().pointer)), false);
    }

    private native long _midPoint__Vector3R_const(long _pointer_, long vec);

    /** 
    Returns true if the vector's scalar components are all greater that the ones of the vector it is compared against. **/
    public boolean operatorLessThan(org.ogre4j.IVector3 rhs) {
         return _operatorLessThan__Vector3R_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorLessThan__Vector3R_const(long _pointer_, long rhs);

    /** 
    Returns true if the vector's scalar components are all smaller that the ones of the vector it is compared against. **/
    public boolean operatorGreaterThan(org.ogre4j.IVector3 rhs) {
         return _operatorGreaterThan__Vector3R_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorGreaterThan__Vector3R_const(long _pointer_, long rhs);

    /** 
    Sets this vector's components to the minimum of its own and the ones of the passed in vector. **/
    public void makeFloor(org.ogre4j.IVector3 cmp) {
        _makeFloor__Vector3R(this.object.pointer, cmp.getInstancePointer().pointer);
    }

    private native void _makeFloor__Vector3R(long _pointer_, long cmp);

    /** 
    Sets this vector's components to the maximum of its own and the ones of the passed in vector. **/
    public void makeCeil(org.ogre4j.IVector3 cmp) {
        _makeCeil__Vector3R(this.object.pointer, cmp.getInstancePointer().pointer);
    }

    private native void _makeCeil__Vector3R(long _pointer_, long cmp);

    /** 
    Generates a vector perpendicular to this vector (eg an 'up' vector). **/
    public void perpendicular(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_perpendicular_const(this.object.pointer)), false);
    }

    private native long _perpendicular_const(long _pointer_);

    /** 
    Generates a new random vector which deviates from this vector by a given angle in a random direction. **/
    public void randomDeviant(org.ogre4j.IVector3 returnValue, org.ogre4j.IRadian angle, org.ogre4j.IVector3 up) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_randomDeviant__RadianRVector3R_const(this.object.pointer, angle.getInstancePointer().pointer,  up.getInstancePointer().pointer)), false);
    }

    private native long _randomDeviant__RadianRVector3R_const(long _pointer_, long angle, long up);

    /** 
    Gets the angle between 2 vectors. **/
    public void angleBetween(org.ogre4j.IRadian returnValue, org.ogre4j.IVector3 dest) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_angleBetween__Vector3R(this.object.pointer, dest.getInstancePointer().pointer)), false);
    }

    private native long _angleBetween__Vector3R(long _pointer_, long dest);

    /** 
    Gets the shortest arc quaternion to rotate this vector to the destination vector. **/
    public void getRotationTo(org.ogre4j.IQuaternion returnValue, org.ogre4j.IVector3 dest, org.ogre4j.IVector3 fallbackAxis) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getRotationTo__Vector3RVector3R_const(this.object.pointer, dest.getInstancePointer().pointer,  fallbackAxis.getInstancePointer().pointer)), false);
    }

    private native long _getRotationTo__Vector3RVector3R_const(long _pointer_, long dest, long fallbackAxis);

    /** 
    Returns true if this vector is zero length. **/
    public boolean isZeroLength() {
         return _isZeroLength_const(this.object.pointer);
    }

    private native boolean _isZeroLength_const(long _pointer_);

    /** 
    As normalise, except that this vector is unaffected and the normalised vector is returned as a copy. **/
    public void normalisedCopy(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_normalisedCopy_const(this.object.pointer)), false);
    }

    private native long _normalisedCopy_const(long _pointer_);

    /** 
    Calculates a reflection vector to the plane with the given normal . **/
    public void reflect(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 normal) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_reflect__Vector3R_const(this.object.pointer, normal.getInstancePointer().pointer)), false);
    }

    private native long _reflect__Vector3R_const(long _pointer_, long normal);

    /** 
    Returns whether this vector is within a positional tolerance of another vector. **/
    public boolean positionEquals(org.ogre4j.IVector3 rhs, float tolerance) {
         return _positionEquals__Vector3RRealv_const(this.object.pointer, rhs.getInstancePointer().pointer,  tolerance);
    }

    private native boolean _positionEquals__Vector3RRealv_const(long _pointer_, long rhs, float tolerance);

    /** 
    Returns whether this vector is within a positional tolerance of another vector, also take scale of the vectors into account. **/
    public boolean positionCloses(org.ogre4j.IVector3 rhs, float tolerance) {
         return _positionCloses__Vector3RRealv_const(this.object.pointer, rhs.getInstancePointer().pointer,  tolerance);
    }

    private native boolean _positionCloses__Vector3RRealv_const(long _pointer_, long rhs, float tolerance);

    /** 
    Returns whether this vector is within a directional tolerance of another vector. **/
    public boolean directionEquals(org.ogre4j.IVector3 rhs, org.ogre4j.IRadian tolerance) {
         return _directionEquals__Vector3RRadianR_const(this.object.pointer, rhs.getInstancePointer().pointer,  tolerance.getInstancePointer().pointer);
    }

    private native boolean _directionEquals__Vector3RRadianR_const(long _pointer_, long rhs, long tolerance);

    /** **/
    public float getx() {
         return _getx(this.object.pointer);
    }

    private native float _getx(long _pointer_);

    /** **/
    public void setx(float _jni_value_) {
        _setx(this.object.pointer, _jni_value_);
    }

    private native void _setx(long _pointer_, float _jni_value_);

    /** **/
    public float gety() {
         return _gety(this.object.pointer);
    }

    private native float _gety(long _pointer_);

    /** **/
    public void sety(float _jni_value_) {
        _sety(this.object.pointer, _jni_value_);
    }

    private native void _sety(long _pointer_, float _jni_value_);

    /** **/
    public float getz() {
         return _getz(this.object.pointer);
    }

    private native float _getz(long _pointer_);

    /** **/
    public void setz(float _jni_value_) {
        _setz(this.object.pointer, _jni_value_);
    }

    private native void _setz(long _pointer_, float _jni_value_);

    /** **/
    public static org.ogre4j.IVector3 getZERO() {
         return new org.ogre4j.Vector3(new InstancePointer(_getZERO()));
    }

    private native static long _getZERO();

    /** **/
    public static org.ogre4j.IVector3 getUNIT_X() {
         return new org.ogre4j.Vector3(new InstancePointer(_getUNIT_X()));
    }

    private native static long _getUNIT_X();

    /** **/
    public static org.ogre4j.IVector3 getUNIT_Y() {
         return new org.ogre4j.Vector3(new InstancePointer(_getUNIT_Y()));
    }

    private native static long _getUNIT_Y();

    /** **/
    public static org.ogre4j.IVector3 getUNIT_Z() {
         return new org.ogre4j.Vector3(new InstancePointer(_getUNIT_Z()));
    }

    private native static long _getUNIT_Z();

    /** **/
    public static org.ogre4j.IVector3 getNEGATIVE_UNIT_X() {
         return new org.ogre4j.Vector3(new InstancePointer(_getNEGATIVE_UNIT_X()));
    }

    private native static long _getNEGATIVE_UNIT_X();

    /** **/
    public static org.ogre4j.IVector3 getNEGATIVE_UNIT_Y() {
         return new org.ogre4j.Vector3(new InstancePointer(_getNEGATIVE_UNIT_Y()));
    }

    private native static long _getNEGATIVE_UNIT_Y();

    /** **/
    public static org.ogre4j.IVector3 getNEGATIVE_UNIT_Z() {
         return new org.ogre4j.Vector3(new InstancePointer(_getNEGATIVE_UNIT_Z()));
    }

    private native static long _getNEGATIVE_UNIT_Z();

    /** **/
    public static org.ogre4j.IVector3 getUNIT_SCALE() {
         return new org.ogre4j.Vector3(new InstancePointer(_getUNIT_SCALE()));
    }

    private native static long _getUNIT_SCALE();

}
