/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public enum ShadowRenderableFlags implements INativeEnum < ShadowRenderableFlags > {
    SRF_INCLUDE_LIGHT_CAP(ShadowRenderableFlagsHelper.ENUM_VALUES[0]),
    SRF_INCLUDE_DARK_CAP(ShadowRenderableFlagsHelper.ENUM_VALUES[1]),
    SRF_EXTRUDE_TO_INFINITY(ShadowRenderableFlagsHelper.ENUM_VALUES[2]);

    private int value;

    ShadowRenderableFlags(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public ShadowRenderableFlags getEnum(int val) {
        return toEnum(val);
    }

    public static final ShadowRenderableFlags toEnum(int retval) {
    if (retval ==SRF_INCLUDE_LIGHT_CAP.value)
        return ShadowRenderableFlags.SRF_INCLUDE_LIGHT_CAP;
    else if (retval ==SRF_INCLUDE_DARK_CAP.value)
        return ShadowRenderableFlags.SRF_INCLUDE_DARK_CAP;
    else if (retval ==SRF_EXTRUDE_TO_INFINITY.value)
        return ShadowRenderableFlags.SRF_EXTRUDE_TO_INFINITY;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

class ShadowRenderableFlagsHelper{
static { System.loadLibrary("ogre4j");}

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

