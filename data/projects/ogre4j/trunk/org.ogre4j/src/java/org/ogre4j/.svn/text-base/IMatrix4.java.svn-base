/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IMatrix4 extends INativeObject {

    /** **/
    public FloatPointer operatorIndex(int iRow);

    /** **/
    public FloatPointer operatorIndex_const(int iRow);

    /** **/
    public void concatenate(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2);

    /** 
    Matrix concatenation using '*'. **/
    public void operatorMultiplication(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2);

    /** 
    Vector transformation using '*'. **/
    public void operatorMultiplication(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 v);

    /** **/
    public void operatorMultiplication(org.ogre4j.IVector4 returnValue, org.ogre4j.IVector4 v);

    /** **/
    public void operatorMultiplication(org.ogre4j.IPlane returnValue, org.ogre4j.IPlane p);

    /** 
    Matrix addition. **/
    public void operatorAddition(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2);

    /** 
    Matrix subtraction. **/
    public void operatorSubtraction(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2);

    /** 
    Tests 2 matrices for equality. **/
    public boolean operatorEqual(org.ogre4j.IMatrix4 m2);

    /** 
    Tests 2 matrices for inequality. **/
    public boolean operatorNotEqual(org.ogre4j.IMatrix4 m2);

    /** 
    Assignment from 3x3 matrix. **/
    public void operatorAssignment(org.ogre4j.IMatrix3 mat3);

    /** **/
    public void transpose(org.ogre4j.IMatrix4 returnValue);

    /** 
    Sets the translation transformation part of the matrix. **/
    public void setTrans(org.ogre4j.IVector3 v);

    /** 
    Extracts the translation transformation part of the matrix. **/
    public void getTrans(org.ogre4j.IVector3 returnValue);

    /** 
    Builds a translation matrix **/
    public void makeTrans(org.ogre4j.IVector3 v);

    /** **/
    public void makeTrans(float tx, float ty, float tz);

    /** 
    Sets the scale part of the matrix. **/
    public void setScale(org.ogre4j.IVector3 v);

    /** 
    Extracts the rotation / scaling part of the Matrix as a 3x3 matrix. **/
    public void extract3x3Matrix(org.ogre4j.IMatrix3 m3x3);

    /** 
    Determines if this matrix involves a scaling. **/
    public boolean hasScale();

    /** 
    Determines if this matrix involves a negative scaling. **/
    public boolean hasNegativeScale();

    /** 
    Extracts the rotation / scaling part as a quaternion from the Matrix. **/
    public void extractQuaternion(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void operatorMultiplication(org.ogre4j.IMatrix4 returnValue, float scalar);

    /** **/
    public void adjoint(org.ogre4j.IMatrix4 returnValue);

    /** **/
    public float determinant();

    /** **/
    public void inverse(org.ogre4j.IMatrix4 returnValue);

    /** 
    Building a  from orientation / scale / position. **/
    public void makeTransform(org.ogre4j.IVector3 position, org.ogre4j.IVector3 scale, org.ogre4j.IQuaternion orientation);

    /** 
    Building an inverse  from orientation / scale / position. **/
    public void makeInverseTransform(org.ogre4j.IVector3 position, org.ogre4j.IVector3 scale, org.ogre4j.IQuaternion orientation);

    /** 
    Check whether or not the matrix is affine matrix. **/
    public boolean isAffine();

    /** 
    Returns the inverse of the affine matrix. **/
    public void inverseAffine(org.ogre4j.IMatrix4 returnValue);

    /** 
    Concatenate two affine matrix. **/
    public void concatenateAffine(org.ogre4j.IMatrix4 returnValue, org.ogre4j.IMatrix4 m2);

    /** 
    3-D Vector transformation specially for affine matrix. **/
    public void transformAffine(org.ogre4j.IVector3 returnValue, org.ogre4j.IVector3 v);

    /** 
    4-D Vector transformation specially for affine matrix. **/
    public void transformAffine(org.ogre4j.IVector4 returnValue, org.ogre4j.IVector4 v);

;

;

;

;

}
