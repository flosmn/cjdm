/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.std;


import org.xbig.base.*;
public class ios extends org.xbig.base.NativeObject implements org.std.Iios {
static { System.loadLibrary("ogre4j");}
public enum fmtflags implements INativeEnum < fmtflags > {
    boolalpha(fmtflagsHelper.ENUM_VALUES[0]),
    showbase(fmtflagsHelper.ENUM_VALUES[1]),
    showpoint(fmtflagsHelper.ENUM_VALUES[2]),
    showpos(fmtflagsHelper.ENUM_VALUES[3]),
    skipws(fmtflagsHelper.ENUM_VALUES[4]),
    unitbuf(fmtflagsHelper.ENUM_VALUES[5]),
    uppercase(fmtflagsHelper.ENUM_VALUES[6]),
    dec(fmtflagsHelper.ENUM_VALUES[7]),
    hex(fmtflagsHelper.ENUM_VALUES[8]),
    oct(fmtflagsHelper.ENUM_VALUES[9]),
    fixed(fmtflagsHelper.ENUM_VALUES[10]),
    scientific(fmtflagsHelper.ENUM_VALUES[11]),
    internal(fmtflagsHelper.ENUM_VALUES[12]),
    left(fmtflagsHelper.ENUM_VALUES[13]),
    right(fmtflagsHelper.ENUM_VALUES[14]);

    private int value;

    fmtflags(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public fmtflags getEnum(int val) {
        return toEnum(val);
    }

    public static final fmtflags toEnum(int retval) {
    if (retval ==boolalpha.value)
        return fmtflags.boolalpha;
    else if (retval ==showbase.value)
        return fmtflags.showbase;
    else if (retval ==showpoint.value)
        return fmtflags.showpoint;
    else if (retval ==showpos.value)
        return fmtflags.showpos;
    else if (retval ==skipws.value)
        return fmtflags.skipws;
    else if (retval ==unitbuf.value)
        return fmtflags.unitbuf;
    else if (retval ==uppercase.value)
        return fmtflags.uppercase;
    else if (retval ==dec.value)
        return fmtflags.dec;
    else if (retval ==hex.value)
        return fmtflags.hex;
    else if (retval ==oct.value)
        return fmtflags.oct;
    else if (retval ==fixed.value)
        return fmtflags.fixed;
    else if (retval ==scientific.value)
        return fmtflags.scientific;
    else if (retval ==internal.value)
        return fmtflags.internal;
    else if (retval ==left.value)
        return fmtflags.left;
    else if (retval ==right.value)
        return fmtflags.right;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class fmtflagsHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ios(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ios(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ios(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



      }
