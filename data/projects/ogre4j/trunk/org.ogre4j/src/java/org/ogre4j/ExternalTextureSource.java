/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ExternalTextureSource extends org.xbig.base.NativeObject implements org.ogre4j.IExternalTextureSource {
static { System.loadLibrary("ogre4j");}
public static class CmdFPS extends org.xbig.base.NativeObject implements org.ogre4j.IExternalTextureSource.ICmdFPS {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdFPS(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdFPS(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdFPS(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdFPS() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdInputFileName extends org.xbig.base.NativeObject implements org.ogre4j.IExternalTextureSource.ICmdInputFileName {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdInputFileName(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdInputFileName(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdInputFileName(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdInputFileName() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdPlayMode extends org.xbig.base.NativeObject implements org.ogre4j.IExternalTextureSource.ICmdPlayMode {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdPlayMode(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdPlayMode(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdPlayMode(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdPlayMode() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
public static class CmdTecPassState extends org.xbig.base.NativeObject implements org.ogre4j.IExternalTextureSource.ICmdTecPassState {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CmdTecPassState(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CmdTecPassState(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CmdTecPassState(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public String doGet(VoidPointer target) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public void doSet(VoidPointer target, String val) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public CmdTecPassState() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ExternalTextureSource(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ExternalTextureSource(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ExternalTextureSource(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public void setInputName(String sIN) {
        _setInputName__Stringv(this.object.pointer, sIN);
    }

    private native void _setInputName__Stringv(long _pointer_, String sIN);

    /** **/
    public String getInputName() {
         return _getInputName_const(this.object.pointer);
    }

    private native String _getInputName_const(long _pointer_);

    /** **/
    public void setFPS(int iFPS) {
        _setFPS__iv(this.object.pointer, iFPS);
    }

    private native void _setFPS__iv(long _pointer_, int iFPS);

    /** **/
    public int getFPS() {
         return _getFPS_const(this.object.pointer);
    }

    private native int _getFPS_const(long _pointer_);

    /** **/
    public void setPlayMode(org.ogre4j.eTexturePlayMode eMode) {
        _setPlayMode__eTexturePlayModev(this.object.pointer, eMode.getValue());
    }

    private native void _setPlayMode__eTexturePlayModev(long _pointer_, int eMode);

    /** **/
    public org.ogre4j.eTexturePlayMode getPlayMode() {
         return org.ogre4j.eTexturePlayMode.toEnum(_getPlayMode_const(this.object.pointer));
    }

    private native int _getPlayMode_const(long _pointer_);

    /** **/
    public void setTextureTecPassStateLevel(int t, int p, int s) {
        _setTextureTecPassStateLevel__iviviv(this.object.pointer, t,  p,  s);
    }

    private native void _setTextureTecPassStateLevel__iviviv(long _pointer_, int t, int p, int s);

    /** **/
    public void getTextureTecPassStateLevel(IntegerPointer t, IntegerPointer p, IntegerPointer s) {
        _getTextureTecPassStateLevel__iririr_const(this.object.pointer, t.object.pointer,  p.object.pointer,  s.object.pointer);
    }

    private native void _getTextureTecPassStateLevel__iririr_const(long _pointer_, long t, long p, long s);

    /** 
    Call from derived classes to ensure the dictionary is setup **/
    public void addBaseParams() {
        _addBaseParams(this.object.pointer);
    }

    private native void _addBaseParams(long _pointer_);

    /** 
    Returns the string name of this PlugIn (as set by the PlugIn) **/
    public String getPlugInStringName() {
         return _getPlugInStringName_const(this.object.pointer);
    }

    private native String _getPlugInStringName_const(long _pointer_);

    /** 
    Returns dictionary name **/
    public String getDictionaryStringName() {
         return _getDictionaryStringName_const(this.object.pointer);
    }

    private native String _getDictionaryStringName_const(long _pointer_);

    /** 
    Call this function from manager to init system **/
    public boolean initialise() {
         return _initialise(this.object.pointer);
    }

    private native boolean _initialise(long _pointer_);

    /** 
    Shuts down PlugIn **/
    public void shutDown() {
        _shutDown(this.object.pointer);
    }

    private native void _shutDown(long _pointer_);

    /** 
    Creates a texture into an already defined material or one that is created new (it's up to plugin to use a material or create one) Before calling, ensure that needed params have been defined via the stringInterface or regular methods **/
    public void createDefinedTexture(String sMaterialName, String groupName) {
        _createDefinedTexture__StringRStringR(this.object.pointer, sMaterialName,  groupName);
    }

    private native void _createDefinedTexture__StringRStringR(long _pointer_, String sMaterialName, String groupName);

    /** 
    What this destroys is dependent on the plugin... See specific plugin doc to know what is all destroyed (normally, plugins will destroy only what they created, or used directly - ie. just texture unit) **/
    public void destroyAdvancedTexture(String sTextureName, String groupName) {
        _destroyAdvancedTexture__StringRStringR(this.object.pointer, sTextureName,  groupName);
    }

    private native void _destroyAdvancedTexture__StringRStringR(long _pointer_, String sTextureName, String groupName);

    /** 
    Retrieves the parameter dictionary for this class. **/
    public org.ogre4j.IParamDictionary getParamDictionary() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary(this.object.pointer)));
    }

    private native long _getParamDictionary(long _pointer_);

    /** **/
    public org.ogre4j.IParamDictionary getParamDictionary_const() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary_const_const(this.object.pointer)));
    }

    private native long _getParamDictionary_const_const(long _pointer_);

    /** 
    Retrieves a list of parameters valid for this object. **/
    public org.ogre4j.IParameterList getParameters() {
         return new org.ogre4j.ParameterList(new InstancePointer(_getParameters_const(this.object.pointer)));
    }

    private native long _getParameters_const(long _pointer_);

    /** 
    Generic parameter setting method. **/
    public boolean setParameter(String name, String value) {
         return _setParameter__StringRStringR(this.object.pointer, name,  value);
    }

    private native boolean _setParameter__StringRStringR(long _pointer_, String name, String value);

    /** 
    Generic multiple parameter setting method. **/
    public void setParameterList(org.ogre4j.INameValuePairList paramList) {
        _setParameterList__NameValuePairListR(this.object.pointer, paramList.getInstancePointer().pointer);
    }

    private native void _setParameterList__NameValuePairListR(long _pointer_, long paramList);

    /** 
    Generic parameter retrieval method. **/
    public String getParameter(String name) {
         return _getParameter__StringR_const(this.object.pointer, name);
    }

    private native String _getParameter__StringR_const(long _pointer_, String name);

    /** 
    Method for copying this object's parameters to another object. **/
    public void copyParametersTo(org.ogre4j.IStringInterface dest) {
        _copyParametersTo__StringInterfacep_const(this.object.pointer, dest.getInstancePointer().pointer);
    }

    private native void _copyParametersTo__StringInterfacep_const(long _pointer_, long dest);

    /** 
    Cleans up the static 'msDictionary' required to reset , otherwise the containers are left with invalid pointers, which will lead to a crash as soon as one of the  implementers (e.g. ) initializes. **/
    public static void cleanupDictionary() {
        _cleanupDictionary();
    }

    private native static void _cleanupDictionary();

}
