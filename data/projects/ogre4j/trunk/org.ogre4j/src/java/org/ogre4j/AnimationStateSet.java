/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class AnimationStateSet extends org.xbig.base.NativeObject implements org.ogre4j.IAnimationStateSet {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public AnimationStateSet(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected AnimationStateSet(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public AnimationStateSet(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public AnimationStateSet() {
         super( new org.xbig.base.InstancePointer(__createAnimationStateSet()), false);
    }

    private native static long __createAnimationStateSet();

    /** **/
    public AnimationStateSet(org.ogre4j.IAnimationStateSet rhs) {
         super( new org.xbig.base.InstancePointer(__createAnimationStateSet__AnimationStateSetR( rhs.getInstancePointer().pointer)), false);
    }

    private native static long __createAnimationStateSet__AnimationStateSetR(long rhs);

    /** 
    Create a new  instance. **/
    public org.ogre4j.IAnimationState createAnimationState(String animName, float timePos, float length, float weight, boolean enabled) {
         return new org.ogre4j.AnimationState(new InstancePointer(_createAnimationState__StringRRealvRealvRealvbv(this.object.pointer, animName,  timePos,  length,  weight,  enabled)));
    }

    private native long _createAnimationState__StringRRealvRealvRealvbv(long _pointer_, String animName, float timePos, float length, float weight, boolean enabled);

    /** **/
    public org.ogre4j.IAnimationState getAnimationState(String name) {
         return new org.ogre4j.AnimationState(new InstancePointer(_getAnimationState__StringR_const(this.object.pointer, name)));
    }

    private native long _getAnimationState__StringR_const(long _pointer_, String name);

    /** **/
    public boolean hasAnimationState(String name) {
         return _hasAnimationState__StringR_const(this.object.pointer, name);
    }

    private native boolean _hasAnimationState__StringR_const(long _pointer_, String name);

    /** **/
    public void removeAnimationState(String name) {
        _removeAnimationState__StringR(this.object.pointer, name);
    }

    private native void _removeAnimationState__StringR(long _pointer_, String name);

    /** **/
    public void removeAllAnimationStates() {
        _removeAllAnimationStates(this.object.pointer);
    }

    private native void _removeAllAnimationStates(long _pointer_);

    /** 
    Get an iterator over all the animation states in this set. **/
    public void getAnimationStateIterator(org.ogre4j.IAnimationStateIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getAnimationStateIterator(this.object.pointer)), false);
    }

    private native long _getAnimationStateIterator(long _pointer_);

    /** **/
    public void getAnimationStateIterator_const(org.ogre4j.IConstAnimationStateIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getAnimationStateIterator_const_const(this.object.pointer)), false);
    }

    private native long _getAnimationStateIterator_const_const(long _pointer_);

    /** **/
    public void copyMatchingState(org.ogre4j.IAnimationStateSet target) {
        _copyMatchingState__AnimationStateSetp_const(this.object.pointer, target.getInstancePointer().pointer);
    }

    private native void _copyMatchingState__AnimationStateSetp_const(long _pointer_, long target);

    /** **/
    public void _notifyDirty() {
        __notifyDirty(this.object.pointer);
    }

    private native void __notifyDirty(long _pointer_);

    /** **/
    public long getDirtyFrameNumber() {
         return _getDirtyFrameNumber_const(this.object.pointer);
    }

    private native long _getDirtyFrameNumber_const(long _pointer_);

    /** **/
    public void _notifyAnimationStateEnabled(org.ogre4j.IAnimationState target, boolean enabled) {
        __notifyAnimationStateEnabled__AnimationStatepbv(this.object.pointer, target.getInstancePointer().pointer,  enabled);
    }

    private native void __notifyAnimationStateEnabled__AnimationStatepbv(long _pointer_, long target, boolean enabled);

    /** **/
    public boolean hasEnabledAnimationState() {
         return _hasEnabledAnimationState_const(this.object.pointer);
    }

    private native boolean _hasEnabledAnimationState_const(long _pointer_);

    /** 
    Get an iterator over all the enabled animation states in this set **/
    public void getEnabledAnimationStateIterator(org.ogre4j.IConstEnabledAnimationStateIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getEnabledAnimationStateIterator_const(this.object.pointer)), false);
    }

    private native long _getEnabledAnimationStateIterator_const(long _pointer_);

}
