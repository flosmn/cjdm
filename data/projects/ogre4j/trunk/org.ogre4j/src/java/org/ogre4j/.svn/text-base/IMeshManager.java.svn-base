/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IMeshManager extends INativeObject, org.ogre4j.IResourceManager, org.ogre4j.IManualResourceLoader, org.ogre4j.ISingleton< org.ogre4j.IMeshManager > {

public static interface IMeshBuildParams extends INativeObject {

    /** **/
    public org.ogre4j.MeshManager.MeshBuildType gettype();

    /** **/
    public void settype(org.ogre4j.MeshManager.MeshBuildType _jni_value_);

    /** **/
    public void getplane(org.ogre4j.IPlane returnValue);

    /** **/
    public void setplane(org.ogre4j.IPlane _jni_value_);

    /** **/
    public float getwidth();

    /** **/
    public void setwidth(float _jni_value_);

    /** **/
    public float getheight();

    /** **/
    public void setheight(float _jni_value_);

    /** **/
    public float getcurvature();

    /** **/
    public void setcurvature(float _jni_value_);

    /** **/
    public int getxsegments();

    /** **/
    public void setxsegments(int _jni_value_);

    /** **/
    public int getysegments();

    /** **/
    public void setysegments(int _jni_value_);

    /** **/
    public boolean getnormals();

    /** **/
    public void setnormals(boolean _jni_value_);

    /** **/
    public int getnumTexCoordSets();

    /** **/
    public void setnumTexCoordSets(int _jni_value_);

    /** **/
    public float getxTile();

    /** **/
    public void setxTile(float _jni_value_);

    /** **/
    public float getyTile();

    /** **/
    public void setyTile(float _jni_value_);

    /** **/
    public void getupVector(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setupVector(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getorientation(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void setorientation(org.ogre4j.IQuaternion _jni_value_);

    /** **/
    public org.ogre4j.HardwareBuffer.Usage getvertexBufferUsage();

    /** **/
    public void setvertexBufferUsage(org.ogre4j.HardwareBuffer.Usage _jni_value_);

    /** **/
    public org.ogre4j.HardwareBuffer.Usage getindexBufferUsage();

    /** **/
    public void setindexBufferUsage(org.ogre4j.HardwareBuffer.Usage _jni_value_);

    /** **/
    public boolean getvertexShadowBuffer();

    /** **/
    public void setvertexShadowBuffer(boolean _jni_value_);

    /** **/
    public boolean getindexShadowBuffer();

    /** **/
    public void setindexShadowBuffer(boolean _jni_value_);

    /** **/
    public int getySegmentsToKeep();

    /** **/
    public void setySegmentsToKeep(int _jni_value_);

}
public interface IMeshBuildParamsMap extends INativeObject, org.std.Imap< org.ogre4j.IResource, org.ogre4j.IMeshManager.IMeshBuildParams > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IResource key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IResource key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IMeshManager.IMeshBuildParams get(org.ogre4j.IResource key);

    /** **/
    public void insert(org.ogre4j.IResource key, org.ogre4j.IMeshManager.IMeshBuildParams value);

}
    /** 
    Initialises the manager, only to be called by OGRE internally. **/
    public void _initialise();

    /** 
    Create a new mesh, or retrieve an existing one with the same name if it already exists. **/
    public void createOrRetrieve(org.ogre4j.IResourceManager.IResourceCreateOrRetrieveResult returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList params, org.ogre4j.HardwareBuffer.Usage vertexBufferUsage, org.ogre4j.HardwareBuffer.Usage indexBufferUsage, boolean vertexBufferShadowed, boolean indexBufferShadowed);

    /** 
    Prepares a mesh for loading from a file. This does the IO in advance of the call to . **/
    public void prepare(org.ogre4j.IMeshPtr returnValue, String filename, String groupName, org.ogre4j.HardwareBuffer.Usage vertexBufferUsage, org.ogre4j.HardwareBuffer.Usage indexBufferUsage, boolean vertexBufferShadowed, boolean indexBufferShadowed);

    /** 
    Loads a mesh from a file, making it immediately available for use. **/
    public void load(org.ogre4j.IMeshPtr returnValue, String filename, String groupName, org.ogre4j.HardwareBuffer.Usage vertexBufferUsage, org.ogre4j.HardwareBuffer.Usage indexBufferUsage, boolean vertexBufferShadowed, boolean indexBufferShadowed);

    /** 
    Creates a new  specifically for manual definition rather than loading from an object file. **/
    public void createManual(org.ogre4j.IMeshPtr returnValue, String name, String groupName, org.ogre4j.IManualResourceLoader loader);

    /** 
    Creates a basic plane, by default majoring on the x/y axes facing positive Z. **/
    public void createPlane(org.ogre4j.IMeshPtr returnValue, String name, String groupName, org.ogre4j.IPlane plane, float width, float height, int xsegments, int ysegments, boolean normals, int numTexCoordSets, float uTile, float vTile, org.ogre4j.IVector3 upVector, org.ogre4j.HardwareBuffer.Usage vertexBufferUsage, org.ogre4j.HardwareBuffer.Usage indexBufferUsage, boolean vertexShadowBuffer, boolean indexShadowBuffer);

    /** 
    Creates a plane, which because of it's texture coordinates looks like a curved surface, useful for skies in a skybox. **/
    public void createCurvedIllusionPlane(org.ogre4j.IMeshPtr returnValue, String name, String groupName, org.ogre4j.IPlane plane, float width, float height, float curvature, int xsegments, int ysegments, boolean normals, int numTexCoordSets, float uTile, float vTile, org.ogre4j.IVector3 upVector, org.ogre4j.IQuaternion orientation, org.ogre4j.HardwareBuffer.Usage vertexBufferUsage, org.ogre4j.HardwareBuffer.Usage indexBufferUsage, boolean vertexShadowBuffer, boolean indexShadowBuffer, int ySegmentsToKeep);

    /** 
    Creates a genuinely curved plane, by default majoring on the x/y axes facing positive Z. **/
    public void createCurvedPlane(org.ogre4j.IMeshPtr returnValue, String name, String groupName, org.ogre4j.IPlane plane, float width, float height, float bow, int xsegments, int ysegments, boolean normals, int numTexCoordSets, float xTile, float yTile, org.ogre4j.IVector3 upVector, org.ogre4j.HardwareBuffer.Usage vertexBufferUsage, org.ogre4j.HardwareBuffer.Usage indexBufferUsage, boolean vertexShadowBuffer, boolean indexShadowBuffer);

    /** 
    Creates a Bezier patch based on an array of control vertices. **/
    public void createBezierPatch(org.ogre4j.IPatchMeshPtr returnValue, String name, String groupName, VoidPointer controlPointBuffer, org.ogre4j.IVertexDeclaration declaration, int width, int height, int uMaxSubdivisionLevel, int vMaxSubdivisionLevel, org.ogre4j.PatchSurface.VisibleSide visibleSide, org.ogre4j.HardwareBuffer.Usage vbUsage, org.ogre4j.HardwareBuffer.Usage ibUsage, boolean vbUseShadow, boolean ibUseShadow);

    /** 
    Tells the mesh manager that all future meshes should prepare themselves for shadow volumes on loading. **/
    public void setPrepareAllMeshesForShadowVolumes(boolean enable);

    /** 
    Retrieves whether all Meshes should prepare themselves for shadow volumes. **/
    public boolean getPrepareAllMeshesForShadowVolumes();

    /** 
    Gets the factor by which the bounding box of an entity is padded. Default is 0.01 **/
    public float getBoundsPaddingFactor();

    /** 
    Sets the factor by which the bounding box of an entity is padded **/
    public void setBoundsPaddingFactor(float paddingFactor);

    /** 
    Sets the listener used to control mesh loading through the serializer. **/
    public void setListener(org.ogre4j.IMeshSerializerListener listener);

    /** 
    Gets the listener used to control mesh loading through the serializer. **/
    public org.ogre4j.IMeshSerializerListener getListener();

    /** 
    **/
    public void loadResource(org.ogre4j.IResource res);

}
