/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface INode extends INativeObject, org.ogre4j.IRenderable, org.ogre4j.ISceneCtlAllocatedObject {

public static interface IListener extends INativeObject {

    /** 
    Called when a node gets updated. **/
    public void nodeUpdated(org.ogre4j.INode a1);

    /** 
     is being destroyed **/
    public void nodeDestroyed(org.ogre4j.INode a1);

    /** 
     has been attached to a parent **/
    public void nodeAttached(org.ogre4j.INode a1);

    /** 
     has been detached from a parent **/
    public void nodeDetached(org.ogre4j.INode a1);

}
public interface IChildNodeMap extends INativeObject, org.std.Ihash_map< String, org.ogre4j.INode > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.INode get(String key);

    /** **/
    public void insert(String key, org.ogre4j.INode value);

}
public interface IChildNodeIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.INode.IChildNodeMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.INode getNext();

    /** **/
    public org.ogre4j.INode peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.INode.IChildNodeIterator operatorAssignment(org.ogre4j.INode.IChildNodeIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.INode> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IConstChildNodeIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.INode.IChildNodeMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.INode getNext();

    /** **/
    public org.ogre4j.INode peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.INode.IConstChildNodeIterator operatorAssignment(org.ogre4j.INode.IConstChildNodeIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.INode> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IChildUpdateSet extends INativeObject, org.std.Iset< org.ogre4j.INode > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.INode key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.INode key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IQueuedUpdates extends INativeObject, org.std.Ivector< org.ogre4j.INode > {

    /** **/
    public void assign(int num, org.ogre4j.INode val);

    /** **/
    public org.ogre4j.INode at(int loc);

    /** **/
    public org.ogre4j.INode back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.INode front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.INode val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Returns the name of the node. **/
    public String getName();

    /** 
    Gets this node's parent (NULL if this is the root). **/
    public org.ogre4j.INode getParent();

    /** 
    Returns a quaternion representing the nodes orientation. **/
    public org.ogre4j.IQuaternion getOrientation();

    /** 
    Sets the orientation of this node via a quaternion. **/
    public void setOrientation(org.ogre4j.IQuaternion q);

    /** 
    Sets the orientation of this node via quaternion parameters. **/
    public void setOrientation(float w, float x, float y, float z);

    /** 
    Resets the nodes orientation (local axes as world axes, no rotation). **/
    public void resetOrientation();

    /** 
    Sets the position of the node relative to it's parent. **/
    public void setPosition(org.ogre4j.IVector3 pos);

    /** 
    Sets the position of the node relative to it's parent. **/
    public void setPosition(float x, float y, float z);

    /** 
    Gets the position of the node relative to it's parent. **/
    public org.ogre4j.IVector3 getPosition();

    /** 
    Sets the scaling factor applied to this node. **/
    public void setScale(org.ogre4j.IVector3 scale);

    /** 
    Sets the scaling factor applied to this node. **/
    public void setScale(float x, float y, float z);

    /** 
    Gets the scaling factor of this node. **/
    public org.ogre4j.IVector3 getScale();

    /** 
    Tells the node whether it should inherit orientation from it's parent node. **/
    public void setInheritOrientation(boolean inherit);

    /** 
    Returns true if this node is affected by orientation applied to the parent node. **/
    public boolean getInheritOrientation();

    /** 
    Tells the node whether it should inherit scaling factors from it's parent node. **/
    public void setInheritScale(boolean inherit);

    /** 
    Returns true if this node is affected by scaling factors applied to the parent node. **/
    public boolean getInheritScale();

    /** 
    Scales the node, combining it's current scale with the passed in scaling factor. **/
    public void scale(org.ogre4j.IVector3 scale);

    /** 
    Scales the node, combining it's current scale with the passed in scaling factor. **/
    public void scale(float x, float y, float z);

    /** 
    Moves the node along the Cartesian axes. **/
    public void translate(org.ogre4j.IVector3 d, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Moves the node along the Cartesian axes. **/
    public void translate(float x, float y, float z, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Moves the node along arbitrary axes. **/
    public void translate(org.ogre4j.IMatrix3 axes, org.ogre4j.IVector3 move, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Moves the node along arbitrary axes. **/
    public void translate(org.ogre4j.IMatrix3 axes, float x, float y, float z, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Rotate the node around the Z-axis. **/
    public void roll(org.ogre4j.IRadian angle, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Rotate the node around the X-axis. **/
    public void pitch(org.ogre4j.IRadian angle, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Rotate the node around the Y-axis. **/
    public void yaw(org.ogre4j.IRadian angle, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Rotate the node around an arbitrary axis. **/
    public void rotate(org.ogre4j.IVector3 axis, org.ogre4j.IRadian angle, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Rotate the node around an aritrary axis using a Quarternion. **/
    public void rotate(org.ogre4j.IQuaternion q, org.ogre4j.Node.TransformSpace relativeTo);

    /** 
    Gets a matrix whose columns are the local axes based on the nodes orientation relative to it's parent. **/
    public void getLocalAxes(org.ogre4j.IMatrix3 returnValue);

    /** 
    Creates an unnamed new  as a child of this node. **/
    public org.ogre4j.INode createChild(org.ogre4j.IVector3 translate, org.ogre4j.IQuaternion rotate);

    /** 
    Creates a new named  as a child of this node. **/
    public org.ogre4j.INode createChild(String name, org.ogre4j.IVector3 translate, org.ogre4j.IQuaternion rotate);

    /** 
    Adds a (precreated) child scene node to this node. If it is attached to another node, it must be detached first. **/
    public void addChild(org.ogre4j.INode child);

    /** 
    Reports the number of child nodes under this one. **/
    public int numChildren();

    /** 
    Gets a pointer to a child node. **/
    public org.ogre4j.INode getChild(int index);

    /** 
    Gets a pointer to a named child node. **/
    public org.ogre4j.INode getChild(String name);

    /** 
    Retrieves an iterator for efficiently looping through all children of this node. **/
    public void getChildIterator(org.ogre4j.INode.IChildNodeIterator returnValue);

    /** **/
    public void getChildIterator_const(org.ogre4j.INode.IConstChildNodeIterator returnValue);

    /** 
    Drops the specified child from this node. **/
    public org.ogre4j.INode removeChild(int index);

    /** 
    Drops the specified child from this node. **/
    public org.ogre4j.INode removeChild(org.ogre4j.INode child);

    /** 
    Drops the named child from this node. **/
    public org.ogre4j.INode removeChild(String name);

    /** 
    Removes all child Nodes attached to this node. Does not delete the nodes, just detaches them from this parent, potentially to be reattached elsewhere. **/
    public void removeAllChildren();

    /** 
    Gets the orientation of the node as derived from all parents. **/
    public org.ogre4j.IQuaternion _getDerivedOrientation();

    /** 
    Gets the position of the node as derived from all parents. **/
    public org.ogre4j.IVector3 _getDerivedPosition();

    /** 
    Gets the scaling factor of the node as derived from all parents. **/
    public org.ogre4j.IVector3 _getDerivedScale();

    /** 
    Gets the full transformation matrix for this node. **/
    public org.ogre4j.IMatrix4 _getFullTransform();

    /** 
    Internal method to update the . **/
    public void _update(boolean updateChildren, boolean parentHasChanged);

    /** 
    Sets a listener for this . **/
    public void setListener(org.ogre4j.INode.IListener listener);

    /** 
    Gets the current listener for this . **/
    public org.ogre4j.INode.IListener getListener();

    /** 
    Overridden from . **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** 
    Overridden from . **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op);

    /** 
    Overridden from . **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** 
    Sets the current transform of this node to be the 'initial state' ie that position / orientation / scale to be used as a basis for delta values used in keyframe animation. **/
    public void setInitialState();

    /** 
    Resets the position / orientation / scale of this node to it's initial state, see setInitialState for more info. **/
    public void resetToInitialState();

    /** 
    Gets the initial position of this node, see setInitialState for more info. **/
    public org.ogre4j.IVector3 getInitialPosition();

    /** 
    Gets the initial orientation of this node, see setInitialState for more info. **/
    public org.ogre4j.IQuaternion getInitialOrientation();

    /** 
    Gets the initial position of this node, see setInitialState for more info. **/
    public org.ogre4j.IVector3 getInitialScale();

    /** 
    Overridden, see **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam);

    /** 
    To be called in the event of transform changes to this node that require it's recalculation. **/
    public void needUpdate(boolean forceParentUpdate);

    /** 
    Called by children to notify their parent that they need an update. **/
    public void requestUpdate(org.ogre4j.INode child, boolean forceParentUpdate);

    /** 
    Called by children to notify their parent that they no longer need an update. **/
    public void cancelUpdate(org.ogre4j.INode child);

    /** 
    **/
    public org.ogre4j.ILightList getLights();

}
