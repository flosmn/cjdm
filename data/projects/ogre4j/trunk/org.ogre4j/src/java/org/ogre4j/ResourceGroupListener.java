/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ResourceGroupListener extends org.xbig.base.NativeObject implements org.ogre4j.IResourceGroupListener {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ResourceGroupListener(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ResourceGroupListener(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ResourceGroupListener(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    This event is fired when a resource group begins parsing scripts. **/
    public void resourceGroupScriptingStarted(String groupName, int scriptCount) {
        _resourceGroupScriptingStarted__StringRiv(this.object.pointer, groupName,  scriptCount);
    }

    private native void _resourceGroupScriptingStarted__StringRiv(long _pointer_, String groupName, int scriptCount);

    /** 
    This event is fired when a script is about to be parsed. **/
    public void scriptParseStarted(String scriptName, BooleanPointer skipThisScript) {
        _scriptParseStarted__StringRbr(this.object.pointer, scriptName,  skipThisScript.object.pointer);
    }

    private native void _scriptParseStarted__StringRbr(long _pointer_, String scriptName, long skipThisScript);

    /** 
    This event is fired when the script has been fully parsed. **/
    public void scriptParseEnded(String scriptName, boolean skipped) {
        _scriptParseEnded__StringRbv(this.object.pointer, scriptName,  skipped);
    }

    private native void _scriptParseEnded__StringRbv(long _pointer_, String scriptName, boolean skipped);

    /** 
    This event is fired when a resource group finished parsing scripts. **/
    public void resourceGroupScriptingEnded(String groupName) {
        _resourceGroupScriptingEnded__StringR(this.object.pointer, groupName);
    }

    private native void _resourceGroupScriptingEnded__StringR(long _pointer_, String groupName);

    /** 
    This event is fired when a resource group begins preparing. **/
    public void resourceGroupPrepareStarted(String groupName, int resourceCount) {
        _resourceGroupPrepareStarted__StringRiv(this.object.pointer, groupName,  resourceCount);
    }

    private native void _resourceGroupPrepareStarted__StringRiv(long _pointer_, String groupName, int resourceCount);

    /** 
    This event is fired when a declared resource is about to be prepared. **/
    public void resourcePrepareStarted(org.ogre4j.IResourcePtr resource) {
        _resourcePrepareStarted__ResourcePtrR(this.object.pointer, resource.getInstancePointer().pointer);
    }

    private native void _resourcePrepareStarted__ResourcePtrR(long _pointer_, long resource);

    /** 
    This event is fired when the resource has been prepared. **/
    public void resourcePrepareEnded() {
        _resourcePrepareEnded(this.object.pointer);
    }

    private native void _resourcePrepareEnded(long _pointer_);

    /** 
    This event is fired when a stage of preparing linked world geometry is about to start. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryPrepareStageStarted(String description) {
        _worldGeometryPrepareStageStarted__StringR(this.object.pointer, description);
    }

    private native void _worldGeometryPrepareStageStarted__StringR(long _pointer_, String description);

    /** 
    This event is fired when a stage of preparing linked world geometry has been completed. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryPrepareStageEnded() {
        _worldGeometryPrepareStageEnded(this.object.pointer);
    }

    private native void _worldGeometryPrepareStageEnded(long _pointer_);

    /** 
    This event is fired when a resource group finished preparing. **/
    public void resourceGroupPrepareEnded(String groupName) {
        _resourceGroupPrepareEnded__StringR(this.object.pointer, groupName);
    }

    private native void _resourceGroupPrepareEnded__StringR(long _pointer_, String groupName);

    /** 
    This event is fired when a resource group begins loading. **/
    public void resourceGroupLoadStarted(String groupName, int resourceCount) {
        _resourceGroupLoadStarted__StringRiv(this.object.pointer, groupName,  resourceCount);
    }

    private native void _resourceGroupLoadStarted__StringRiv(long _pointer_, String groupName, int resourceCount);

    /** 
    This event is fired when a declared resource is about to be loaded. **/
    public void resourceLoadStarted(org.ogre4j.IResourcePtr resource) {
        _resourceLoadStarted__ResourcePtrR(this.object.pointer, resource.getInstancePointer().pointer);
    }

    private native void _resourceLoadStarted__ResourcePtrR(long _pointer_, long resource);

    /** 
    This event is fired when the resource has been loaded. **/
    public void resourceLoadEnded() {
        _resourceLoadEnded(this.object.pointer);
    }

    private native void _resourceLoadEnded(long _pointer_);

    /** 
    This event is fired when a stage of loading linked world geometry is about to start. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryStageStarted(String description) {
        _worldGeometryStageStarted__StringR(this.object.pointer, description);
    }

    private native void _worldGeometryStageStarted__StringR(long _pointer_, String description);

    /** 
    This event is fired when a stage of loading linked world geometry has been completed. The number of stages required will have been included in the resourceCount passed in resourceGroupLoadStarted. **/
    public void worldGeometryStageEnded() {
        _worldGeometryStageEnded(this.object.pointer);
    }

    private native void _worldGeometryStageEnded(long _pointer_);

    /** 
    This event is fired when a resource group finished loading. **/
    public void resourceGroupLoadEnded(String groupName) {
        _resourceGroupLoadEnded__StringR(this.object.pointer, groupName);
    }

    private native void _resourceGroupLoadEnded__StringR(long _pointer_, String groupName);

}
