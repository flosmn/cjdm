/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ObjectAbstractNode extends org.xbig.base.NativeObject implements org.ogre4j.IObjectAbstractNode {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ObjectAbstractNode(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ObjectAbstractNode(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ObjectAbstractNode(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ObjectAbstractNode(org.ogre4j.IAbstractNode ptr) {
         super( new org.xbig.base.InstancePointer(__createObjectAbstractNode__AbstractNodep( ptr.getInstancePointer().pointer)), false);
    }

    private native static long __createObjectAbstractNode__AbstractNodep(long ptr);

    /** **/
    public org.ogre4j.IAbstractNode clone() {
         return new org.ogre4j.AbstractNode(new InstancePointer(_clone_const(this.object.pointer)));
    }

    private native long _clone_const(long _pointer_);

    /** **/
    public String getValue() {
         return _getValue_const(this.object.pointer);
    }

    private native String _getValue_const(long _pointer_);

    /** **/
    public void addVariable(String name) {
        _addVariable__StringR(this.object.pointer, name);
    }

    private native void _addVariable__StringR(long _pointer_, String name);

    /** **/
    public void setVariable(String name, String value) {
        _setVariable__StringRStringR(this.object.pointer, name,  value);
    }

    private native void _setVariable__StringRStringR(long _pointer_, String name, String value);

    /** **/
    public void getVariable(org.std.Ipair< Boolean, String > returnValue, String name) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getVariable__StringR_const(this.object.pointer, name)), false);
    }

    private native long _getVariable__StringR_const(long _pointer_, String name);

    /** **/
    public void getVariables(org.std.Imap< String, String > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getVariables_const(this.object.pointer)), true);
    }

    private native long _getVariables_const(long _pointer_);

    /** **/
    public String getname() {
         return _getname(this.object.pointer);
    }

    private native String _getname(long _pointer_);

    /** **/
    public void setname(String _jni_value_) {
        _setname(this.object.pointer, _jni_value_);
    }

    private native void _setname(long _pointer_, String _jni_value_);

    /** **/
    public String getcls() {
         return _getcls(this.object.pointer);
    }

    private native String _getcls(long _pointer_);

    /** **/
    public void setcls(String _jni_value_) {
        _setcls(this.object.pointer, _jni_value_);
    }

    private native void _setcls(long _pointer_, String _jni_value_);

    /** **/
    public String getbase() {
         return _getbase(this.object.pointer);
    }

    private native String _getbase(long _pointer_);

    /** **/
    public void setbase(String _jni_value_) {
        _setbase(this.object.pointer, _jni_value_);
    }

    private native void _setbase(long _pointer_, String _jni_value_);

    /** **/
    public long getid() {
         return _getid(this.object.pointer);
    }

    private native long _getid(long _pointer_);

    /** **/
    public void setid(long _jni_value_) {
        _setid(this.object.pointer, _jni_value_);
    }

    private native void _setid(long _pointer_, long _jni_value_);

    /** **/
    public boolean getabstract() {
         return _getabstract(this.object.pointer);
    }

    private native boolean _getabstract(long _pointer_);

    /** **/
    public void setabstract(boolean _jni_value_) {
        _setabstract(this.object.pointer, _jni_value_);
    }

    private native void _setabstract(long _pointer_, boolean _jni_value_);

    /** **/
    public void getchildren(org.ogre4j.IAbstractNodeList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getchildren(this.object.pointer)), false);
    }

    private native long _getchildren(long _pointer_);

    /** **/
    public void setchildren(org.ogre4j.IAbstractNodeList _jni_value_) {
        _setchildren(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setchildren(long _pointer_, long _jni_value_);

    /** **/
    public void getvalues(org.ogre4j.IAbstractNodeList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getvalues(this.object.pointer)), false);
    }

    private native long _getvalues(long _pointer_);

    /** **/
    public void setvalues(org.ogre4j.IAbstractNodeList _jni_value_) {
        _setvalues(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setvalues(long _pointer_, long _jni_value_);

    /** **/
    public void getoverrides(org.ogre4j.IAbstractNodeList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getoverrides(this.object.pointer)), false);
    }

    private native long _getoverrides(long _pointer_);

    /** **/
    public void setoverrides(org.ogre4j.IAbstractNodeList _jni_value_) {
        _setoverrides(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setoverrides(long _pointer_, long _jni_value_);

    /** **/
    public String getfile() {
         return _getfile(this.object.pointer);
    }

    private native String _getfile(long _pointer_);

    /** **/
    public void setfile(String _jni_value_) {
        _setfile(this.object.pointer, _jni_value_);
    }

    private native void _setfile(long _pointer_, String _jni_value_);

    /** **/
    public long getline() {
         return _getline(this.object.pointer);
    }

    private native long _getline(long _pointer_);

    /** **/
    public void setline(long _jni_value_) {
        _setline(this.object.pointer, _jni_value_);
    }

    private native void _setline(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.AbstractNodeType gettype() {
         return org.ogre4j.AbstractNodeType.toEnum(_gettype(this.object.pointer));
    }

    private native int _gettype(long _pointer_);

    /** **/
    public void settype(org.ogre4j.AbstractNodeType _jni_value_) {
        _settype(this.object.pointer, _jni_value_.getValue());
    }

    private native void _settype(long _pointer_, int _jni_value_);

    /** **/
    public org.ogre4j.IAbstractNode getparent() {
         return new org.ogre4j.AbstractNode(new InstancePointer(_getparent(this.object.pointer)));
    }

    private native long _getparent(long _pointer_);

    /** **/
    public void setparent(org.ogre4j.IAbstractNode _jni_value_) {
        _setparent(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setparent(long _pointer_, long _jni_value_);

    /** **/
    public void getcontext(org.ogre4j.IAny returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getcontext(this.object.pointer)), false);
    }

    private native long _getcontext(long _pointer_);

    /** **/
    public void setcontext(org.ogre4j.IAny _jni_value_) {
        _setcontext(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setcontext(long _pointer_, long _jni_value_);

}
