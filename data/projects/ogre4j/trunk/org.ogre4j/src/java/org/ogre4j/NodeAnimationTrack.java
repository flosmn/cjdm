/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class NodeAnimationTrack extends org.xbig.base.NativeObject implements org.ogre4j.INodeAnimationTrack {
static { System.loadLibrary("ogre4j");}
protected static class Splines extends org.xbig.base.NativeObject implements org.ogre4j.INodeAnimationTrack.ISplines {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Splines(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Splines(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Splines(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Splines() {
         super( new org.xbig.base.InstancePointer(__createSplines()), false);
    }

    private native static long __createSplines();

    /** **/
    public void getpositionSpline(org.ogre4j.ISimpleSpline returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getpositionSpline(this.object.pointer)), false);
    }

    private native long _getpositionSpline(long _pointer_);

    /** **/
    public void setpositionSpline(org.ogre4j.ISimpleSpline _jni_value_) {
        _setpositionSpline(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setpositionSpline(long _pointer_, long _jni_value_);

    /** **/
    public void getscaleSpline(org.ogre4j.ISimpleSpline returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getscaleSpline(this.object.pointer)), false);
    }

    private native long _getscaleSpline(long _pointer_);

    /** **/
    public void setscaleSpline(org.ogre4j.ISimpleSpline _jni_value_) {
        _setscaleSpline(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setscaleSpline(long _pointer_, long _jni_value_);

    /** **/
    public void getrotationSpline(org.ogre4j.IRotationalSpline returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getrotationSpline(this.object.pointer)), false);
    }

    private native long _getrotationSpline(long _pointer_);

    /** **/
    public void setrotationSpline(org.ogre4j.IRotationalSpline _jni_value_) {
        _setrotationSpline(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrotationSpline(long _pointer_, long _jni_value_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public NodeAnimationTrack(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected NodeAnimationTrack(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public NodeAnimationTrack(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public NodeAnimationTrack(org.ogre4j.IAnimation parent, int handle) {
         super( new org.xbig.base.InstancePointer(__createNodeAnimationTrack__AnimationpHv( parent.getInstancePointer().pointer,  handle)), false);
    }

    private native static long __createNodeAnimationTrack__AnimationpHv(long parent, int handle);

    /** **/
    public NodeAnimationTrack(org.ogre4j.IAnimation parent, int handle, org.ogre4j.INode targetNode) {
         super( new org.xbig.base.InstancePointer(__createNodeAnimationTrack__AnimationpHvNodep( parent.getInstancePointer().pointer,  handle,  targetNode.getInstancePointer().pointer)), false);
    }

    private native static long __createNodeAnimationTrack__AnimationpHvNodep(long parent, int handle, long targetNode);

    /** 
    Creates a new  and adds it to this animation at the given time index. **/
    public org.ogre4j.ITransformKeyFrame createNodeKeyFrame(float timePos) {
         return new org.ogre4j.TransformKeyFrame(new InstancePointer(_createNodeKeyFrame__Realv(this.object.pointer, timePos)));
    }

    private native long _createNodeKeyFrame__Realv(long _pointer_, float timePos);

    /** 
    Returns a pointer to the associated  object (if any). **/
    public org.ogre4j.INode getAssociatedNode() {
         return new org.ogre4j.Node(new InstancePointer(_getAssociatedNode_const(this.object.pointer)));
    }

    private native long _getAssociatedNode_const(long _pointer_);

    /** 
    Sets the associated  object which will be automatically affected by calls to 'apply'. **/
    public void setAssociatedNode(org.ogre4j.INode node) {
        _setAssociatedNode__Nodep(this.object.pointer, node.getInstancePointer().pointer);
    }

    private native void _setAssociatedNode__Nodep(long _pointer_, long node);

    /** 
    As the 'apply' method but applies to a specified  instead of associated node. **/
    public void applyToNode(org.ogre4j.INode node, org.ogre4j.ITimeIndex timeIndex, float weight, float scale) {
        _applyToNode__NodepTimeIndexRRealvRealv(this.object.pointer, node.getInstancePointer().pointer,  timeIndex.getInstancePointer().pointer,  weight,  scale);
    }

    private native void _applyToNode__NodepTimeIndexRRealvRealv(long _pointer_, long node, long timeIndex, float weight, float scale);

    /** 
    Sets the method of rotation calculation **/
    public void setUseShortestRotationPath(boolean useShortestPath) {
        _setUseShortestRotationPath__bv(this.object.pointer, useShortestPath);
    }

    private native void _setUseShortestRotationPath__bv(long _pointer_, boolean useShortestPath);

    /** 
    Gets the method of rotation calculation **/
    public boolean getUseShortestRotationPath() {
         return _getUseShortestRotationPath_const(this.object.pointer);
    }

    private native boolean _getUseShortestRotationPath_const(long _pointer_);

    /** **/
    public void getInterpolatedKeyFrame(org.ogre4j.ITimeIndex timeIndex, org.ogre4j.IKeyFrame kf) {
        _getInterpolatedKeyFrame__TimeIndexRKeyFramep_const(this.object.pointer, timeIndex.getInstancePointer().pointer,  kf.getInstancePointer().pointer);
    }

    private native void _getInterpolatedKeyFrame__TimeIndexRKeyFramep_const(long _pointer_, long timeIndex, long kf);

    /** **/
    public void apply(org.ogre4j.ITimeIndex timeIndex, float weight, float scale) {
        _apply__TimeIndexRRealvRealv(this.object.pointer, timeIndex.getInstancePointer().pointer,  weight,  scale);
    }

    private native void _apply__TimeIndexRRealvRealv(long _pointer_, long timeIndex, float weight, float scale);

    /** **/
    public void _keyFrameDataChanged() {
        __keyFrameDataChanged_const(this.object.pointer);
    }

    private native void __keyFrameDataChanged_const(long _pointer_);

    /** 
    Returns the  at the specified index. **/
    public org.ogre4j.ITransformKeyFrame getNodeKeyFrame(int index) {
         return new org.ogre4j.TransformKeyFrame(new InstancePointer(_getNodeKeyFrame__Hv_const(this.object.pointer, index)));
    }

    private native long _getNodeKeyFrame__Hv_const(long _pointer_, int index);

    /** 
    Method to determine if this track has any KeyFrames which are doing anything useful - can be used to determine if this track can be optimised out. **/
    public boolean hasNonZeroKeyFrames() {
         return _hasNonZeroKeyFrames_const(this.object.pointer);
    }

    private native boolean _hasNonZeroKeyFrames_const(long _pointer_);

    /** 
    Optimise the current track by removing any duplicate keyframes. **/
    public void optimise() {
        _optimise(this.object.pointer);
    }

    private native void _optimise(long _pointer_);

    /** 
    Clone this track (internal use only) **/
    public org.ogre4j.INodeAnimationTrack _clone(org.ogre4j.IAnimation newParent) {
         return new org.ogre4j.NodeAnimationTrack(new InstancePointer(__clone__Animationp_const(this.object.pointer, newParent.getInstancePointer().pointer)));
    }

    private native long __clone__Animationp_const(long _pointer_, long newParent);

    /** 
    Get the handle associated with this track. **/
    public int getHandle() {
         return _getHandle_const(this.object.pointer);
    }

    private native int _getHandle_const(long _pointer_);

    /** 
    Returns the number of keyframes in this animation. **/
    public int getNumKeyFrames() {
         return _getNumKeyFrames_const(this.object.pointer);
    }

    private native int _getNumKeyFrames_const(long _pointer_);

    /** 
    Returns the  at the specified index. **/
    public org.ogre4j.IKeyFrame getKeyFrame(int index) {
         return new org.ogre4j.KeyFrame(new InstancePointer(_getKeyFrame__Hv_const(this.object.pointer, index)));
    }

    private native long _getKeyFrame__Hv_const(long _pointer_, int index);

    /** 
    Gets the 2  objects which are active at the time given, and the blend value between them. **/
    public float getKeyFramesAtTime(org.ogre4j.ITimeIndex timeIndex, NativeObjectPointer<org.ogre4j.IKeyFrame> keyFrame1, NativeObjectPointer<org.ogre4j.IKeyFrame> keyFrame2, IntegerPointer firstKeyIndex) {
         return _getKeyFramesAtTime__TimeIndexRKeyFramepKeyFramepHp_const(this.object.pointer, timeIndex.getInstancePointer().pointer,  keyFrame1.getInstancePointer().pointer,  keyFrame2.getInstancePointer().pointer,  firstKeyIndex.object.pointer);
    }

    private native float _getKeyFramesAtTime__TimeIndexRKeyFramepKeyFramepHp_const(long _pointer_, long timeIndex, long keyFrame1, long keyFrame2, long firstKeyIndex);

    /** 
    Creates a new  and adds it to this animation at the given time index. **/
    public org.ogre4j.IKeyFrame createKeyFrame(float timePos) {
         return new org.ogre4j.KeyFrame(new InstancePointer(_createKeyFrame__Realv(this.object.pointer, timePos)));
    }

    private native long _createKeyFrame__Realv(long _pointer_, float timePos);

    /** 
    Removes a  by it's index. **/
    public void removeKeyFrame(int index) {
        _removeKeyFrame__Hv(this.object.pointer, index);
    }

    private native void _removeKeyFrame__Hv(long _pointer_, int index);

    /** 
    Removes all the KeyFrames from this track. **/
    public void removeAllKeyFrames() {
        _removeAllKeyFrames(this.object.pointer);
    }

    private native void _removeAllKeyFrames(long _pointer_);

    /** 
    Internal method to collect keyframe times, in unique, ordered format. **/
    public void _collectKeyFrameTimes(org.std.Ivector< Float > keyFrameTimes) {
        __collectKeyFrameTimes__std_vector__Real__r(this.object.pointer, keyFrameTimes.getInstancePointer().pointer);
    }

    private native void __collectKeyFrameTimes__std_vector__Real__r(long _pointer_, long keyFrameTimes);

    /** 
    Internal method to build keyframe time index map to translate global lower bound index to local lower bound index. **/
    public void _buildKeyFrameIndexMap(org.std.Ivector< Float > keyFrameTimes) {
        __buildKeyFrameIndexMap__std_vector__Real__r(this.object.pointer, keyFrameTimes.getInstancePointer().pointer);
    }

    private native void __buildKeyFrameIndexMap__std_vector__Real__r(long _pointer_, long keyFrameTimes);

    /** 
    Set a listener for this track. **/
    public void setListener(org.ogre4j.IAnimationTrack.IListener l) {
        _setListener__Listenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long l);

    /** 
    Returns the parent  object for this track. **/
    public org.ogre4j.IAnimation getParent() {
         return new org.ogre4j.Animation(new InstancePointer(_getParent_const(this.object.pointer)));
    }

    private native long _getParent_const(long _pointer_);

}
