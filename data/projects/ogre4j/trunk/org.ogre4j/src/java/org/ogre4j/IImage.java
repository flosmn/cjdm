/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IImage extends INativeObject, org.ogre4j.IGeneralAllocatedObject {

    /** 
    Assignment operator - copies all the data from the target image. **/
    public org.ogre4j.IImage operatorAssignment(org.ogre4j.IImage img);

    /** 
    Flips (mirrors) the image around the Y-axis. **/
    public org.ogre4j.IImage flipAroundY();

    /** 
    Flips (mirrors) the image around the X-axis. **/
    public org.ogre4j.IImage flipAroundX();

    /** 
    Stores a pointer to raw data in memory. The pixel format has to be specified. **/
    public org.ogre4j.IImage loadDynamicImage(ShortPointer pData, int uWidth, int uHeight, int depth, org.ogre4j.PixelFormat eFormat, boolean autoDelete, int numFaces, int numMipMaps);

    /** 
    Stores a pointer to raw data in memory. The pixel format has to be specified. **/
    public org.ogre4j.IImage loadDynamicImage(ShortPointer pData, int uWidth, int uHeight, org.ogre4j.PixelFormat eFormat);

    /** 
    Loads raw data from a stream. See the function loadDynamicImage for a description of the parameters. **/
    public org.ogre4j.IImage loadRawData(org.ogre4j.IDataStreamPtr stream, int uWidth, int uHeight, int uDepth, org.ogre4j.PixelFormat eFormat, int numFaces, int numMipMaps);

    /** 
    Loads raw data from a stream. The pixel format has to be specified. **/
    public org.ogre4j.IImage loadRawData(org.ogre4j.IDataStreamPtr stream, int uWidth, int uHeight, org.ogre4j.PixelFormat eFormat);

    /** 
    Loads an image file. **/
    public org.ogre4j.IImage load(String strFileName, String groupName);

    /** 
    Loads an image file from a stream. **/
    public org.ogre4j.IImage load(org.ogre4j.IDataStreamPtr stream, String type);

    /** 
    Save the image as a file. **/
    public void save(String filename);

    /** 
    Encode the image and return a stream to the data. **/
    public void encode(org.ogre4j.IDataStreamPtr returnValue, String formatextension);

    /** 
    Returns a pointer to the internal image buffer. **/
    public ShortPointer getData();

    /** **/
    public ShortPointer getData_const();

    /** 
    Returns the size of the data buffer. **/
    public int getSize();

    /** 
    Returns the number of mipmaps contained in the image. **/
    public int getNumMipmaps();

    /** 
    Returns true if the image has the appropriate flag set. **/
    public boolean hasFlag(org.ogre4j.ImageFlags imgFlag);

    /** 
    Gets the width of the image in pixels. **/
    public int getWidth();

    /** 
    Gets the height of the image in pixels. **/
    public int getHeight();

    /** 
    Gets the depth of the image. **/
    public int getDepth();

    /** 
    Get the number of faces of the image. This is usually 6 for a cubemap, and 1 for a normal image. **/
    public int getNumFaces();

    /** 
    Gets the physical width in bytes of each row of pixels. **/
    public int getRowSpan();

    /** 
    Returns the image format. **/
    public org.ogre4j.PixelFormat getFormat();

    /** 
    Returns the number of bits per pixel. **/
    public short getBPP();

    /** 
    Returns true if the image has an alpha component. **/
    public boolean getHasAlpha();

    /** 
    Get colour value from a certain location in the image. The z coordinate is only valid for cubemaps and volume textures. This uses the first (largest) mipmap. **/
    public void getColourAt(org.ogre4j.IColourValue returnValue, int x, int y, int z);

    /** 
    Get a  encapsulating the image data of a mipmap **/
    public void getPixelBox(org.ogre4j.IPixelBox returnValue, int face, int mipmap);

    /** 
    Resize a 2D image, applying the appropriate filter. **/
    public void resize(int width, int height, org.ogre4j.Image.Filter filter);

}
