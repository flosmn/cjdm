/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ParticleSystemRenderer extends org.xbig.base.NativeObject implements org.ogre4j.IParticleSystemRenderer {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ParticleSystemRenderer(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ParticleSystemRenderer(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ParticleSystemRenderer(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Gets the type of this renderer - must be implemented by subclasses **/
    public String getType() {
         return _getType_const(this.object.pointer);
    }

    private native String _getType_const(long _pointer_);

    /** 
    Delegated to by **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue, org.std.Ilist< org.ogre4j.IParticle > currentParticles, boolean cullIndividually) {
        __updateRenderQueue__RenderQueuepstd_list__Particle_ptr__rbv(this.object.pointer, queue.getInstancePointer().pointer,  currentParticles.getInstancePointer().pointer,  cullIndividually);
    }

    private native void __updateRenderQueue__RenderQueuepstd_list__Particle_ptr__rbv(long _pointer_, long queue, long currentParticles, boolean cullIndividually);

    /** 
    Sets the material this renderer must use; called by . **/
    public void _setMaterial(org.ogre4j.IMaterialPtr mat) {
        __setMaterial__MaterialPtrr(this.object.pointer, mat.getInstancePointer().pointer);
    }

    private native void __setMaterial__MaterialPtrr(long _pointer_, long mat);

    /** 
    Delegated to by **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** 
    Delegated to by **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Optional callback notified when particles are rotated **/
    public void _notifyParticleRotated() {
        __notifyParticleRotated(this.object.pointer);
    }

    private native void __notifyParticleRotated(long _pointer_);

    /** 
    Optional callback notified when particles are resized individually **/
    public void _notifyParticleResized() {
        __notifyParticleResized(this.object.pointer);
    }

    private native void __notifyParticleResized(long _pointer_);

    /** 
    Tells the renderer that the particle quota has changed **/
    public void _notifyParticleQuota(int quota) {
        __notifyParticleQuota__iv(this.object.pointer, quota);
    }

    private native void __notifyParticleQuota__iv(long _pointer_, int quota);

    /** 
    Tells the renderer that the particle default size has changed **/
    public void _notifyDefaultDimensions(float width, float height) {
        __notifyDefaultDimensions__RealvRealv(this.object.pointer, width,  height);
    }

    private native void __notifyDefaultDimensions__RealvRealv(long _pointer_, float width, float height);

    /** 
    Optional callback notified when particle emitted **/
    public void _notifyParticleEmitted(org.ogre4j.IParticle particle) {
        __notifyParticleEmitted__Particlep(this.object.pointer, particle.getInstancePointer().pointer);
    }

    private native void __notifyParticleEmitted__Particlep(long _pointer_, long particle);

    /** 
    Optional callback notified when particle expired **/
    public void _notifyParticleExpired(org.ogre4j.IParticle particle) {
        __notifyParticleExpired__Particlep(this.object.pointer, particle.getInstancePointer().pointer);
    }

    private native void __notifyParticleExpired__Particlep(long _pointer_, long particle);

    /** 
    Optional callback notified when particles moved **/
    public void _notifyParticleMoved(org.std.Ilist< org.ogre4j.IParticle > currentParticles) {
        __notifyParticleMoved__std_list__Particle_ptr__r(this.object.pointer, currentParticles.getInstancePointer().pointer);
    }

    private native void __notifyParticleMoved__std_list__Particle_ptr__r(long _pointer_, long currentParticles);

    /** 
    Optional callback notified when particles cleared **/
    public void _notifyParticleCleared(org.std.Ilist< org.ogre4j.IParticle > currentParticles) {
        __notifyParticleCleared__std_list__Particle_ptr__r(this.object.pointer, currentParticles.getInstancePointer().pointer);
    }

    private native void __notifyParticleCleared__std_list__Particle_ptr__r(long _pointer_, long currentParticles);

    /** 
    Create a new  instance for attachment to a particle. **/
    public org.ogre4j.IParticleVisualData _createVisualData() {
         return new org.ogre4j.ParticleVisualData(new InstancePointer(__createVisualData(this.object.pointer)));
    }

    private native long __createVisualData(long _pointer_);

    /** 
    Destroy a  instance. **/
    public void _destroyVisualData(org.ogre4j.IParticleVisualData vis) {
        __destroyVisualData__ParticleVisualDatap(this.object.pointer, vis.getInstancePointer().pointer);
    }

    private native void __destroyVisualData__ParticleVisualDatap(long _pointer_, long vis);

    /** 
    Sets which render queue group this renderer should target with it's output. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Setting carried over from . **/
    public void setKeepParticlesInLocalSpace(boolean keepLocal) {
        _setKeepParticlesInLocalSpace__bv(this.object.pointer, keepLocal);
    }

    private native void _setKeepParticlesInLocalSpace__bv(long _pointer_, boolean keepLocal);

    /** 
    Gets the desired particles sort mode of this renderer **/
    public org.ogre4j.SortMode _getSortMode() {
         return org.ogre4j.SortMode.toEnum(__getSortMode_const(this.object.pointer));
    }

    private native int __getSortMode_const(long _pointer_);

    /** 
    Required method to allow the renderer to communicate the Renderables it will be using to render the system to a visitor. **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Retrieves the parameter dictionary for this class. **/
    public org.ogre4j.IParamDictionary getParamDictionary() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary(this.object.pointer)));
    }

    private native long _getParamDictionary(long _pointer_);

    /** **/
    public org.ogre4j.IParamDictionary getParamDictionary_const() {
         return new org.ogre4j.ParamDictionary(new InstancePointer(_getParamDictionary_const_const(this.object.pointer)));
    }

    private native long _getParamDictionary_const_const(long _pointer_);

    /** 
    Retrieves a list of parameters valid for this object. **/
    public org.ogre4j.IParameterList getParameters() {
         return new org.ogre4j.ParameterList(new InstancePointer(_getParameters_const(this.object.pointer)));
    }

    private native long _getParameters_const(long _pointer_);

    /** 
    Generic parameter setting method. **/
    public boolean setParameter(String name, String value) {
         return _setParameter__StringRStringR(this.object.pointer, name,  value);
    }

    private native boolean _setParameter__StringRStringR(long _pointer_, String name, String value);

    /** 
    Generic multiple parameter setting method. **/
    public void setParameterList(org.ogre4j.INameValuePairList paramList) {
        _setParameterList__NameValuePairListR(this.object.pointer, paramList.getInstancePointer().pointer);
    }

    private native void _setParameterList__NameValuePairListR(long _pointer_, long paramList);

    /** 
    Generic parameter retrieval method. **/
    public String getParameter(String name) {
         return _getParameter__StringR_const(this.object.pointer, name);
    }

    private native String _getParameter__StringR_const(long _pointer_, String name);

    /** 
    Method for copying this object's parameters to another object. **/
    public void copyParametersTo(org.ogre4j.IStringInterface dest) {
        _copyParametersTo__StringInterfacep_const(this.object.pointer, dest.getInstancePointer().pointer);
    }

    private native void _copyParametersTo__StringInterfacep_const(long _pointer_, long dest);

    /** 
    Cleans up the static 'msDictionary' required to reset , otherwise the containers are left with invalid pointers, which will lead to a crash as soon as one of the  implementers (e.g. ) initializes. **/
    public static void cleanupDictionary() {
        _cleanupDictionary();
    }

    private native static void _cleanupDictionary();

}
