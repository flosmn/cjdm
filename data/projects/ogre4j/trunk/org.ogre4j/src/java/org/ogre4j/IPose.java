/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IPose extends INativeObject, org.ogre4j.IAnimationAllocatedObject {

public interface IVertexOffsetMap extends INativeObject, org.std.Imap< Integer, org.ogre4j.IVector3 > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IVector3 get(int key);

    /** **/
    public void insert(int key, org.ogre4j.IVector3 value);

}
public interface IVertexOffsetIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IPose.IVertexOffsetMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public void getNext(org.ogre4j.IVector3 returnValue);

    /** **/
    public void peekNextValue(org.ogre4j.IVector3 returnValue);

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.IPose.IVertexOffsetIterator operatorAssignment(org.ogre4j.IPose.IVertexOffsetIterator rhs);

    /** **/
    public org.ogre4j.IVector3 peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IConstVertexOffsetIterator extends INativeObject, org.ogre4j.IConstMapIterator< org.ogre4j.IPose.IVertexOffsetMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public void getNext(org.ogre4j.IVector3 returnValue);

    /** **/
    public void peekNextValue(org.ogre4j.IVector3 returnValue);

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.IPose.IConstVertexOffsetIterator operatorAssignment(org.ogre4j.IPose.IConstVertexOffsetIterator rhs);

    /** **/
    public org.ogre4j.IVector3 peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** **/
    public String getName();

    /** **/
    public int getTarget();

    /** 
    Adds an offset to a vertex for this pose. **/
    public void addVertex(int index, org.ogre4j.IVector3 offset);

    /** 
    Remove a vertex offset. **/
    public void removeVertex(int index);

    /** 
    Clear all vertex offsets. **/
    public void clearVertexOffsets();

    /** **/
    public void getVertexOffsetIterator_const(org.ogre4j.IPose.IConstVertexOffsetIterator returnValue);

    /** 
    Gets an iterator over all the vertex offsets. **/
    public void getVertexOffsetIterator(org.ogre4j.IPose.IVertexOffsetIterator returnValue);

    /** 
    Gets a const reference to the vertex offsets. **/
    public org.ogre4j.IPose.IVertexOffsetMap getVertexOffsets();

    /** 
    Get a hardware vertex buffer version of the vertex offsets. **/
    public org.ogre4j.IHardwareVertexBufferSharedPtr _getHardwareVertexBuffer(int numVertices);

    /** 
    Clone this pose and create another one configured exactly the same way (only really useful for cloning holders of this class). **/
    public org.ogre4j.IPose clone();

}
