/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ITextureManager extends INativeObject, org.ogre4j.IResourceManager, org.ogre4j.ISingleton< org.ogre4j.ITextureManager > {

    /** 
    Create a new texture, or retrieve an existing one with the same name if it already exists. **/
    public void createOrRetrieve(org.ogre4j.IResourceManager.IResourceCreateOrRetrieveResult returnValue, String name, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList createParams, org.ogre4j.TextureType texType, int numMipmaps, float gamma, boolean isAlpha, org.ogre4j.PixelFormat desiredFormat, boolean hwGammaCorrection);

    /** 
    Prepares to loads a texture from a file. **/
    public void prepare(org.ogre4j.ITexturePtr returnValue, String name, String group, org.ogre4j.TextureType texType, int numMipmaps, float gamma, boolean isAlpha, org.ogre4j.PixelFormat desiredFormat, boolean hwGammaCorrection);

    /** 
    Loads a texture from a file. **/
    public void load(org.ogre4j.ITexturePtr returnValue, String name, String group, org.ogre4j.TextureType texType, int numMipmaps, float gamma, boolean isAlpha, org.ogre4j.PixelFormat desiredFormat, boolean hwGammaCorrection);

    /** 
    Loads a texture from an  object. **/
    public void loadImage(org.ogre4j.ITexturePtr returnValue, String name, String group, org.ogre4j.IImage img, org.ogre4j.TextureType texType, int iNumMipmaps, float gamma, boolean isAlpha, org.ogre4j.PixelFormat desiredFormat, boolean hwGammaCorrection);

    /** 
    Loads a texture from a raw data stream. **/
    public void loadRawData(org.ogre4j.ITexturePtr returnValue, String name, String group, org.ogre4j.IDataStreamPtr stream, int uWidth, int uHeight, org.ogre4j.PixelFormat format, org.ogre4j.TextureType texType, int iNumMipmaps, float gamma, boolean hwGammaCorrection);

    /** 
    Create a manual texture with specified width, height and depth (not loaded from a file). **/
    public void createManual(org.ogre4j.ITexturePtr returnValue, String name, String group, org.ogre4j.TextureType texType, long width, long height, long depth, int num_mips, org.ogre4j.PixelFormat format, int usage, org.ogre4j.IManualResourceLoader loader, boolean hwGammaCorrection, long fsaa);

    /** 
    Create a manual texture with a depth of 1 (not loaded from a file). **/
    public void createManual(org.ogre4j.ITexturePtr returnValue, String name, String group, org.ogre4j.TextureType texType, long width, long height, int num_mips, org.ogre4j.PixelFormat format, int usage, org.ogre4j.IManualResourceLoader loader, boolean hwGammaCorrection, long fsaa);

    /** 
    Sets preferred bit depth for integer pixel format textures. **/
    public void setPreferredIntegerBitDepth(int bits, boolean reloadTextures);

    /** 
    gets preferred bit depth for integer pixel format textures. **/
    public int getPreferredIntegerBitDepth();

    /** 
    Sets preferred bit depth for float pixel format textures. **/
    public void setPreferredFloatBitDepth(int bits, boolean reloadTextures);

    /** 
    gets preferred bit depth for float pixel format textures. **/
    public int getPreferredFloatBitDepth();

    /** 
    Sets preferred bit depth for integer and float pixel format. **/
    public void setPreferredBitDepths(int integerBits, int floatBits, boolean reloadTextures);

    /** 
    Returns whether this render system can natively support the precise texture format requested with the given usage options. **/
    public boolean isFormatSupported(org.ogre4j.TextureType ttype, org.ogre4j.PixelFormat format, int usage);

    /** 
    Returns whether this render system can support the texture format requested with the given usage options, or another format with no quality reduction. **/
    public boolean isEquivalentFormatSupported(org.ogre4j.TextureType ttype, org.ogre4j.PixelFormat format, int usage);

    /** 
    Gets the format which will be natively used for a requested format given the constraints of the current device. **/
    public org.ogre4j.PixelFormat getNativeFormat(org.ogre4j.TextureType ttype, org.ogre4j.PixelFormat format, int usage);

    /** 
    Returns whether this render system has hardware filtering supported for the texture format requested with the given usage options. **/
    public boolean isHardwareFilteringSupported(org.ogre4j.TextureType ttype, org.ogre4j.PixelFormat format, int usage, boolean preciseFormatOnly);

    /** 
    Sets the default number of mipmaps to be used for loaded textures, for when textures are loaded automatically (e.g. by  class) or when 'load' is called with the default parameters by the application. If set to MIP_UNLIMITED mipmaps will be generated until the lowest possible level, 1x1x1. **/
    public void setDefaultNumMipmaps(int num);

    /** 
    Gets the default number of mipmaps to be used for loaded textures. **/
    public int getDefaultNumMipmaps();

}
