/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Sphere extends org.xbig.base.NativeObject implements org.ogre4j.ISphere {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Sphere(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Sphere(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Sphere(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Standard constructor - creates a unit sphere around the origin. **/
    public Sphere() {
         super( new org.xbig.base.InstancePointer(__createSphere()), false);
    }

    private native static long __createSphere();

    /** 
    Constructor allowing arbitrary spheres. **/
    public Sphere(org.ogre4j.IVector3 center, float radius) {
         super( new org.xbig.base.InstancePointer(__createSphere__Vector3RRealv( center.getInstancePointer().pointer,  radius)), false);
    }

    private native static long __createSphere__Vector3RRealv(long center, float radius);

    /** 
    Returns the radius of the sphere. **/
    public float getRadius() {
         return _getRadius_const(this.object.pointer);
    }

    private native float _getRadius_const(long _pointer_);

    /** 
    Sets the radius of the sphere. **/
    public void setRadius(float radius) {
        _setRadius__Realv(this.object.pointer, radius);
    }

    private native void _setRadius__Realv(long _pointer_, float radius);

    /** 
    Returns the center point of the sphere. **/
    public org.ogre4j.IVector3 getCenter() {
         return new org.ogre4j.Vector3(new InstancePointer(_getCenter_const(this.object.pointer)));
    }

    private native long _getCenter_const(long _pointer_);

    /** 
    Sets the center point of the sphere. **/
    public void setCenter(org.ogre4j.IVector3 center) {
        _setCenter__Vector3R(this.object.pointer, center.getInstancePointer().pointer);
    }

    private native void _setCenter__Vector3R(long _pointer_, long center);

    /** 
    Returns whether or not this sphere intersects another sphere. **/
    public boolean intersects(org.ogre4j.ISphere s) {
         return _intersects__SphereR_const(this.object.pointer, s.getInstancePointer().pointer);
    }

    private native boolean _intersects__SphereR_const(long _pointer_, long s);

    /** 
    Returns whether or not this sphere intersects a box. **/
    public boolean intersects(org.ogre4j.IAxisAlignedBox box) {
         return _intersects__AxisAlignedBoxR_const(this.object.pointer, box.getInstancePointer().pointer);
    }

    private native boolean _intersects__AxisAlignedBoxR_const(long _pointer_, long box);

    /** 
    Returns whether or not this sphere intersects a plane. **/
    public boolean intersects(org.ogre4j.IPlane plane) {
         return _intersects__PlaneR_const(this.object.pointer, plane.getInstancePointer().pointer);
    }

    private native boolean _intersects__PlaneR_const(long _pointer_, long plane);

    /** 
    Returns whether or not this sphere intersects a point. **/
    public boolean intersects(org.ogre4j.IVector3 v) {
         return _intersects__Vector3R_const(this.object.pointer, v.getInstancePointer().pointer);
    }

    private native boolean _intersects__Vector3R_const(long _pointer_, long v);

}
