/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IInstancedGeometry extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

public static interface IBatchInstance extends INativeObject, org.ogre4j.IMovableObject {

public interface ILODBucketList extends INativeObject, org.std.Ivector< org.ogre4j.IInstancedGeometry.ILODBucket > {

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.ILODBucket val);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket at(int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.ILODBucket val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IObjectsMap extends INativeObject, org.std.Imap< Integer, org.ogre4j.IInstancedGeometry.IInstancedObject > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject get(int key);

    /** **/
    public void insert(int key, org.ogre4j.IInstancedGeometry.IInstancedObject value);

}
public interface IInstancedObjectIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IInstancedGeometry.IBatchInstance.IObjectsMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject getNext();

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject peekNextValue();

    /** **/
    public int peekNextKey();

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance.IInstancedObjectIterator operatorAssignment(org.ogre4j.IInstancedGeometry.IBatchInstance.IInstancedObjectIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IInstancedObject> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface ILODIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.IInstancedGeometry.IBatchInstance.ILODBucketList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket getNext();

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.ILODBucket> peekNextPtr();

    /** **/
    public void moveNext();

}
    /** **/
    public org.ogre4j.IInstancedGeometry getParent();

    /** **/
    public void assign(org.ogre4j.IInstancedGeometry.IQueuedSubMesh qmesh);

    /** **/
    public void build();

    /** **/
    public long getID();

    /** **/
    public String getMovableType();

    /** **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox();

    /** **/
    public void setBoundingBox(org.ogre4j.IAxisAlignedBox box);

    /** **/
    public float getBoundingRadius();

    /** **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue);

    /** **/
    public boolean isVisible();

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** **/
    public void getLODIterator(org.ogre4j.IInstancedGeometry.IBatchInstance.ILODIterator returnValue);

    /** **/
    public org.ogre4j.ILightList getLights();

    /** **/
    public void updateBoundingBox();

    /** **/
    public void dump(org.std.Iofstream of);

    /** **/
    public void updateContainers(org.ogre4j.IInstancedGeometry.ILODBucket bucket);

    /** **/
    public void attachToScene();

    /** **/
    public void addInstancedObject(int index, org.ogre4j.IInstancedGeometry.IInstancedObject object);

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject isInstancedObjectPresent(int index);

    /** **/
    public void getObjectIterator(org.ogre4j.IInstancedGeometry.IBatchInstance.IInstancedObjectIterator returnValue);

    /** **/
    public org.ogre4j.ISceneNode getSceneNode();

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance.IObjectsMap getInstancesMap();

    /** **/
    public void getmLodSquaredDistances(org.std.Ivector< Float > returnValue);

    /** **/
    public void setmLodSquaredDistances(org.std.Ivector< Float > _jni_value_);

    /** **/
    public void getmAABB(org.ogre4j.IAxisAlignedBox returnValue);

    /** **/
    public void setmAABB(org.ogre4j.IAxisAlignedBox _jni_value_);

    /** **/
    public float getmBoundingRadius();

    /** **/
    public void setmBoundingRadius(float _jni_value_);

    /** **/
    public int getmCurrentLod();

    /** **/
    public void setmCurrentLod(int _jni_value_);

    /** **/
    public float getmCamDistanceSquared();

    /** **/
    public void setmCamDistanceSquared(float _jni_value_);

}
public static interface IGeometryBucket extends INativeObject, org.ogre4j.ISimpleRenderable {

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket getParent();

    /** **/
    public float getBoundingRadius();

    /** **/
    public org.ogre4j.IVertexData getVertexData();

    /** **/
    public org.ogre4j.IIndexData getIndexData();

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** **/
    public org.ogre4j.ITechnique getTechnique();

    /** **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform);

    /** **/
    public int getNumWorldTransforms();

    /** **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam);

    /** **/
    public org.ogre4j.ILightList getLights();

    /** **/
    public boolean getCastsShadows();

    /** **/
    public String getFormatString();

    /** 
    Try to assign geometry to this bucket. **/
    public boolean assign(org.ogre4j.IInstancedGeometry.IQueuedGeometry qsm);

    /** **/
    public void build();

    /** **/
    public void dump(org.std.Iofstream of);

    /** **/
    public org.ogre4j.IAxisAlignedBox getAABB();

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

}
public static interface IInstancedObject extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

public interface IGeometryBucketList extends INativeObject, org.std.Ivector< org.ogre4j.IInstancedGeometry.IGeometryBucket > {

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IGeometryBucket val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket at(int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IGeometryBucket val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** **/
    public void setPosition(org.ogre4j.IVector3 position);

    /** **/
    public org.ogre4j.IVector3 getPosition();

    /** **/
    public void yaw(org.ogre4j.IRadian angle);

    /** **/
    public void pitch(org.ogre4j.IRadian angle);

    /** **/
    public void roll(org.ogre4j.IRadian angle);

    /** **/
    public void rotate(org.ogre4j.IQuaternion q);

    /** **/
    public void setScale(org.ogre4j.IVector3 scale);

    /** **/
    public void setOrientation(org.ogre4j.IQuaternion q);

    /** **/
    public void setPositionAndOrientation(org.ogre4j.IVector3 p, org.ogre4j.IQuaternion q);

    /** **/
    public org.ogre4j.IQuaternion getOrientation();

    /** **/
    public void addBucketToList(org.ogre4j.IInstancedGeometry.IGeometryBucket bucket);

    /** **/
    public void needUpdate();

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject.IGeometryBucketList getGeometryBucketList();

    /** **/
    public void translate(org.ogre4j.IMatrix3 axes, org.ogre4j.IVector3 move);

    /** **/
    public void translate(org.ogre4j.IVector3 d);

    /** **/
    public void getLocalAxes(org.ogre4j.IMatrix3 returnValue);

    /** **/
    public void updateAnimation();

    /** **/
    public org.ogre4j.IAnimationState getAnimationState(String name);

    /** **/
    public org.ogre4j.ISkeletonInstance getSkeletonInstance();

}
public static interface ILODBucket extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

public interface IMaterialBucketMap extends INativeObject, org.std.Imap< String, org.ogre4j.IInstancedGeometry.IMaterialBucket > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IInstancedGeometry.IMaterialBucket value);

}
public interface IMaterialIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialBucketMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket getNext();

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialIterator operatorAssignment(org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IMaterialBucket> peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance getParent();

    /** **/
    public int getLod();

    /** **/
    public float getSquaredDistance();

    /** **/
    public void assign(org.ogre4j.IInstancedGeometry.IQueuedSubMesh qsm, int atLod);

    /** **/
    public void build();

    /** **/
    public void addRenderables(org.ogre4j.IRenderQueue queue, short group, float camSquaredDistance);

    /** **/
    public void getMaterialIterator(org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialIterator returnValue);

    /** **/
    public void dump(org.std.Iofstream of);

    /** **/
    public void updateContainers(org.ogre4j.IInstancedGeometry.IMaterialBucket bucket, StringPointer name);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

}
public static interface IMaterialBucket extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

public interface IGeometryBucketList extends INativeObject, org.std.Ivector< org.ogre4j.IInstancedGeometry.IGeometryBucket > {

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IGeometryBucket val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket at(int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IGeometryBucket val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IGeometryIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.IInstancedGeometry.IMaterialBucket.IGeometryBucketList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket getNext();

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IGeometryBucket> peekNextPtr();

    /** **/
    public void moveNext();

}
public interface ICurrentGeometryMap extends INativeObject, org.std.Imap< String, org.ogre4j.IInstancedGeometry.IGeometryBucket > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IInstancedGeometry.IGeometryBucket value);

}
    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket getParent();

    /** **/
    public String getMaterialName();

    /** **/
    public void assign(org.ogre4j.IInstancedGeometry.IQueuedGeometry qsm);

    /** **/
    public void build();

    /** **/
    public void addRenderables(org.ogre4j.IRenderQueue queue, short group, float camSquaredDist);

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** **/
    public void getGeometryIterator(org.ogre4j.IInstancedGeometry.IMaterialBucket.IGeometryIterator returnValue);

    /** **/
    public org.ogre4j.ITechnique getCurrentTechnique();

    /** **/
    public void dump(org.std.Iofstream of);

;

;

    /** **/
    public void updateContainers(org.ogre4j.IInstancedGeometry.IGeometryBucket bucket, String format);

    /** **/
    public void setLastIndex(int index);

    /** **/
    public int getLastIndex();

    /** **/
    public void setMaterial(String name);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

}
public static interface IOptimisedSubMeshGeometry extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

    /** **/
    public org.ogre4j.IVertexData getvertexData();

    /** **/
    public void setvertexData(org.ogre4j.IVertexData _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData();

    /** **/
    public void setindexData(org.ogre4j.IIndexData _jni_value_);

}
public static interface IQueuedGeometry extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink getgeometry();

    /** **/
    public void setgeometry(org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink _jni_value_);

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getorientation(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void setorientation(org.ogre4j.IQuaternion _jni_value_);

    /** **/
    public void getscale(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setscale(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public long getID();

    /** **/
    public void setID(long _jni_value_);

}
public static interface IQueuedSubMesh extends INativeObject, org.ogre4j.IGeometryAllocatedObject {

    /** **/
    public org.ogre4j.ISubMesh getsubmesh();

    /** **/
    public void setsubmesh(org.ogre4j.ISubMesh _jni_value_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList getgeometryLodList();

    /** **/
    public void setgeometryLodList(org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList _jni_value_);

    /** **/
    public String getmaterialName();

    /** **/
    public void setmaterialName(String _jni_value_);

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getorientation(org.ogre4j.IQuaternion returnValue);

    /** **/
    public void setorientation(org.ogre4j.IQuaternion _jni_value_);

    /** **/
    public void getscale(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setscale(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public void getworldBounds(org.ogre4j.IAxisAlignedBox returnValue);

    /** **/
    public void setworldBounds(org.ogre4j.IAxisAlignedBox _jni_value_);

    /** **/
    public long getID();

    /** **/
    public void setID(long _jni_value_);

}
public static interface ISubMeshLodGeometryLink extends INativeObject {

    /** **/
    public org.ogre4j.IVertexData getvertexData();

    /** **/
    public void setvertexData(org.ogre4j.IVertexData _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData();

    /** **/
    public void setindexData(org.ogre4j.IIndexData _jni_value_);

}
public interface IOptimisedSubMeshGeometryList extends INativeObject, org.std.Ilist< org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry > {

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val);

    /** **/
    public void push_front(org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val);

    /** **/
    public void remove(org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface ISubMeshLodGeometryLinkList extends INativeObject, org.std.Ivector< org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink > {

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink val);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink at(int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface ISubMeshGeometryLookup extends INativeObject, org.std.Imap< org.ogre4j.ISubMesh, org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.ISubMesh key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.ISubMesh key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList get(org.ogre4j.ISubMesh key);

    /** **/
    public void insert(org.ogre4j.ISubMesh key, org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList value);

}
public interface IQueuedSubMeshList extends INativeObject, org.std.Ivector< org.ogre4j.IInstancedGeometry.IQueuedSubMesh > {

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IQueuedSubMesh val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedSubMesh at(int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedSubMesh back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedSubMesh front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IQueuedSubMesh val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IQueuedSubMeshOriginList extends INativeObject, org.std.Ivector< String > {

    /** **/
    public void assign(int num, String val);

    /** **/
    public StringPointer at(int loc);

    /** **/
    public StringPointer back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public StringPointer front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(String val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IQueuedGeometryList extends INativeObject, org.std.Ivector< org.ogre4j.IInstancedGeometry.IQueuedGeometry > {

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IQueuedGeometry val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedGeometry at(int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedGeometry back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedGeometry front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IQueuedGeometry val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IBatchInstanceMap extends INativeObject, org.std.Imap< Long, org.ogre4j.IInstancedGeometry.IBatchInstance > {

    /** **/
    public void clear();

    /** **/
    public int count(long key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(long key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance get(long key);

    /** **/
    public void insert(long key, org.ogre4j.IInstancedGeometry.IBatchInstance value);

}
public interface IRenderOperationVector extends INativeObject, org.std.Ivector< org.ogre4j.IRenderOperation > {

    /** **/
    public void assign(int num, org.ogre4j.IRenderOperation val);

    /** **/
    public org.ogre4j.IRenderOperation at(int loc);

    /** **/
    public org.ogre4j.IRenderOperation back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IRenderOperation front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IRenderOperation val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IBatchInstanceIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IInstancedGeometry.IBatchInstanceMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance getNext();

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance peekNextValue();

    /** **/
    public long peekNextKey();

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstanceIterator operatorAssignment(org.ogre4j.IInstancedGeometry.IBatchInstanceIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IBatchInstance> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IIndexRemap extends INativeObject, org.std.Imap< Integer, Integer > {

    /** **/
    public void clear();

    /** **/
    public int count(int key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(int key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public IntegerPointer get(int key);

    /** **/
    public void insert(int key, IntegerPointer value);

}
    /** **/
    public String getName();

    /** 
    Adds an  to the static geometry. **/
    public void addEntity(org.ogre4j.IEntity ent, org.ogre4j.IVector3 position, org.ogre4j.IQuaternion orientation, org.ogre4j.IVector3 scale);

    /** 
    Adds all the  objects attached to a  and all it's children to the static geometry. **/
    public void addSceneNode(org.ogre4j.ISceneNode node);

    /** 
    Build the geometry. **/
    public void build();

    /** 
    Add a new batch instance **/
    public void addBatchInstance();

    /** 
    Destroys all the built geometry state (reverse of build). **/
    public void destroy();

    /** 
    Clears any of the entities / nodes added to this geometry and destroys anything which has already been built. **/
    public void reset();

    /** 
    Sets the distance at which batches are no longer rendered. **/
    public void setRenderingDistance(float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance();

    /** 
    Gets the squared distance at which batches are no longer rendered. **/
    public float getSquaredRenderingDistance();

    /** 
    Hides or shows all the batches. **/
    public void setVisible(boolean visible);

    /** 
    Are the batches visible? **/
    public boolean isVisible();

    /** 
    Sets whether this geometry should cast shadows. **/
    public void setCastShadows(boolean castShadows);

    /** **/
    public boolean getCastShadows();

    /** 
    Sets the size of a single  of geometry. **/
    public void setBatchInstanceDimensions(org.ogre4j.IVector3 size);

    /** 
    Gets the size of a single batch of geometry. **/
    public org.ogre4j.IVector3 getBatchInstanceDimensions();

    /** 
    Sets the origin of the geometry. **/
    public void setOrigin(org.ogre4j.IVector3 origin);

    /** 
    Gets the origin of this geometry. **/
    public org.ogre4j.IVector3 getOrigin();

    /** 
    Sets the render queue group this object will be rendered through. **/
    public void setRenderQueueGroup(short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup();

    /** **/
    public void getBatchInstanceIterator(org.ogre4j.IInstancedGeometry.IBatchInstanceIterator returnValue);

    /** **/
    public org.ogre4j.IInstancedGeometry.IRenderOperationVector getRenderOperationVector();

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

    /** 
    Dump the contents of this  to a file for diagnostic purposes. **/
    public void dump(String filename);

    /** 
    **/
    public org.ogre4j.ISkeletonInstance getBaseSkeletonInstance();

    /** 
    **/
    public void getBaseSkeleton(org.ogre4j.ISkeletonPtr returnValue);

    /** 
    **/
    public org.ogre4j.IAnimationStateSet getBaseAnimationState();

    /** 
    **/
    public long getObjectCount();

}
