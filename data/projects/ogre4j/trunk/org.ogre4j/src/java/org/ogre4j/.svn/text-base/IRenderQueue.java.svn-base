/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IRenderQueue extends INativeObject, org.ogre4j.ISceneCtlAllocatedObject {

public static interface IRenderableListener extends INativeObject {

    /** 
    Method called when a  is added to the queue. **/
    public boolean renderableQueued(org.ogre4j.IRenderable rend, short groupID, int priority, NativeObjectPointer<org.ogre4j.ITechnique> ppTech, org.ogre4j.IRenderQueue pQueue);

}
public interface IRenderQueueGroupMap extends INativeObject, org.std.Imap< Short, org.ogre4j.IRenderQueueGroup > {

    /** **/
    public void clear();

    /** **/
    public int count(short key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(short key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IRenderQueueGroup get(short key);

    /** **/
    public void insert(short key, org.ogre4j.IRenderQueueGroup value);

}
public interface IQueueGroupIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IRenderQueue.IRenderQueueGroupMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IRenderQueueGroup getNext();

    /** **/
    public org.ogre4j.IRenderQueueGroup peekNextValue();

    /** **/
    public short peekNextKey();

    /** **/
    public org.ogre4j.IRenderQueue.IQueueGroupIterator operatorAssignment(org.ogre4j.IRenderQueue.IQueueGroupIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IRenderQueueGroup> peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** 
    Empty the queue - should only be called by SceneManagers. **/
    public void clear(boolean destroyPassMaps);

    /** 
    Get a render queue group. **/
    public org.ogre4j.IRenderQueueGroup getQueueGroup(short qid);

    /** 
    Add a renderable object to the queue. **/
    public void addRenderable(org.ogre4j.IRenderable pRend, short groupID, int priority);

    /** 
    Add a renderable object to the queue. **/
    public void addRenderable(org.ogre4j.IRenderable pRend, short groupId);

    /** 
    Add a renderable object to the queue. **/
    public void addRenderable(org.ogre4j.IRenderable pRend);

    /** 
    Gets the current default queue group, which will be used for all renderable which do not specify which group they wish to be on. **/
    public short getDefaultQueueGroup();

    /** 
    Sets the current default renderable priority, which will be used for all renderables which do not specify which priority they wish to use. **/
    public void setDefaultRenderablePriority(int priority);

    /** 
    Gets the current default renderable priority, which will be used for all renderables which do not specify which priority they wish to use. **/
    public int getDefaultRenderablePriority();

    /** 
    Sets the current default queue group, which will be used for all renderable which do not specify which group they wish to be on. **/
    public void setDefaultQueueGroup(short grp);

    /** 
    Internal method, returns an iterator for the queue groups. **/
    public void _getQueueGroupIterator(org.ogre4j.IRenderQueue.IQueueGroupIterator returnValue);

    /** 
    Sets whether or not the queue will split passes by their lighting type, ie ambient, per-light and decal. **/
    public void setSplitPassesByLightingType(boolean split);

    /** 
    Sets whether or not the queue will split passes which have shadow receive turned off (in their parent material), which is needed when certain shadow techniques are used. **/
    public void setSplitNoShadowPasses(boolean split);

    /** 
    Sets whether or not objects which cast shadows should be treated as never receiving shadows. **/
    public void setShadowCastersCannotBeReceivers(boolean ind);

    /** 
    Set a renderable listener on the queue. **/
    public void setRenderableListener(org.ogre4j.IRenderQueue.IRenderableListener listener);

    /** **/
    public org.ogre4j.IRenderQueue.IRenderableListener getRenderableListener();

}
