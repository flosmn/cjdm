/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.std;


import org.xbig.base.*;
public class ifstream extends org.xbig.base.NativeObject implements org.std.Iifstream {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ifstream(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ifstream(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ifstream(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ifstream() {
         super( new org.xbig.base.InstancePointer(__createifstream()), false);
    }

    private native static long __createifstream();

    /** **/
    public ifstream(String filename) {
         super( new org.xbig.base.InstancePointer(__createifstream__cP( filename)), false);
    }

    private native static long __createifstream__cP(String filename);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean eof() {
         return _eof(this.object.pointer);
    }

    private native boolean _eof(long _pointer_);

    /** **/
    public boolean fail() {
         return _fail(this.object.pointer);
    }

    private native boolean _fail(long _pointer_);

    /** **/
    public short fill() {
         return _fill(this.object.pointer);
    }

    private native short _fill(long _pointer_);

    /** **/
    public short fill(short ch) {
         return _fill__cv(this.object.pointer, ch);
    }

    private native short _fill__cv(long _pointer_, short ch);

    /** **/
    public boolean good() {
         return _good(this.object.pointer);
    }

    private native boolean _good(long _pointer_);

    /** **/
    public static boolean sync_with_stdio() {
         return _sync_with_stdio();
    }

    private native static boolean _sync_with_stdio();

    /** **/
    public static boolean sync_with_stdio(boolean sync) {
         return _sync_with_stdio__bv( sync);
    }

    private native static boolean _sync_with_stdio__bv(boolean sync);

    /** **/
    public int width() {
         return _width(this.object.pointer);
    }

    private native int _width(long _pointer_);

    /** **/
    public int width(int w) {
         return _width__iv(this.object.pointer, w);
    }

    private native int _width__iv(long _pointer_, int w);

    /** **/
    public boolean is_open() {
         return _is_open(this.object.pointer);
    }

    private native boolean _is_open(long _pointer_);

    /** **/
    public void close() {
        _close(this.object.pointer);
    }

    private native void _close(long _pointer_);

    /** **/
    public void open(String filename) {
        _open__cP(this.object.pointer, filename);
    }

    private native void _open__cP(long _pointer_, String filename);

    /** **/
    public org.std.Iistream get(BytePointer c) {
         return new org.std.istream(new InstancePointer(_get__cr(this.object.pointer, c.object.pointer)));
    }

    private native long _get__cr(long _pointer_, long c);

}
