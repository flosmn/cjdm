/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IHardwareBufferManager extends INativeObject, org.ogre4j.ISingleton< org.ogre4j.IHardwareBufferManager > {

public static interface IVertexBufferLicense extends INativeObject {

    /** **/
    public org.ogre4j.IHardwareVertexBuffer getoriginalBufferPtr();

    /** **/
    public void setoriginalBufferPtr(org.ogre4j.IHardwareVertexBuffer _jni_value_);

    /** **/
    public org.ogre4j.HardwareBufferManager.BufferLicenseType getlicenseType();

    /** **/
    public void setlicenseType(org.ogre4j.HardwareBufferManager.BufferLicenseType _jni_value_);

    /** **/
    public int getexpiredDelay();

    /** **/
    public void setexpiredDelay(int _jni_value_);

    /** **/
    public void getbuffer(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue);

    /** **/
    public void setbuffer(org.ogre4j.IHardwareVertexBufferSharedPtr _jni_value_);

    /** **/
    public org.ogre4j.IHardwareBufferLicensee getlicensee();

    /** **/
    public void setlicensee(org.ogre4j.IHardwareBufferLicensee _jni_value_);

}
public interface IVertexBufferList extends INativeObject, org.std.Iset< org.ogre4j.IHardwareVertexBuffer > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IHardwareVertexBuffer key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IHardwareVertexBuffer key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IIndexBufferList extends INativeObject, org.std.Iset< org.ogre4j.IHardwareIndexBuffer > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IHardwareIndexBuffer key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IHardwareIndexBuffer key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IVertexDeclarationList extends INativeObject, org.std.Iset< org.ogre4j.IVertexDeclaration > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IVertexDeclaration key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IVertexDeclaration key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IVertexBufferBindingList extends INativeObject, org.std.Iset< org.ogre4j.IVertexBufferBinding > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IVertexBufferBinding key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IVertexBufferBinding key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IFreeTemporaryVertexBufferMap extends INativeObject, org.std.Imultimap< org.ogre4j.IHardwareVertexBuffer, org.ogre4j.IHardwareVertexBufferSharedPtr > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IHardwareVertexBuffer key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IHardwareVertexBuffer key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface ITemporaryVertexBufferLicenseMap extends INativeObject, org.std.Imap< org.ogre4j.IHardwareVertexBuffer, org.ogre4j.IHardwareBufferManager.IVertexBufferLicense > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IHardwareVertexBuffer key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IHardwareVertexBuffer key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IHardwareBufferManager.IVertexBufferLicense get(org.ogre4j.IHardwareVertexBuffer key);

    /** **/
    public void insert(org.ogre4j.IHardwareVertexBuffer key, org.ogre4j.IHardwareBufferManager.IVertexBufferLicense value);

}
    /** 
    Create a hardware vertex buffer. **/
    public void createVertexBuffer(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue, int vertexSize, int numVerts, org.ogre4j.HardwareBuffer.Usage usage, boolean useShadowBuffer);

    /** 
    Create a hardware index buffer. **/
    public void createIndexBuffer(org.ogre4j.IHardwareIndexBufferSharedPtr returnValue, org.ogre4j.HardwareIndexBuffer.IndexType itype, int numIndexes, org.ogre4j.HardwareBuffer.Usage usage, boolean useShadowBuffer);

    /** 
    Create a render to vertex buffer. **/
    public void createRenderToVertexBuffer(org.ogre4j.IRenderToVertexBufferSharedPtr returnValue);

    /** 
    Creates a new vertex declaration. **/
    public org.ogre4j.IVertexDeclaration createVertexDeclaration();

    /** 
    Destroys a vertex declaration. **/
    public void destroyVertexDeclaration(org.ogre4j.IVertexDeclaration decl);

    /** 
    Creates a new . **/
    public org.ogre4j.IVertexBufferBinding createVertexBufferBinding();

    /** 
    Destroys a . **/
    public void destroyVertexBufferBinding(org.ogre4j.IVertexBufferBinding binding);

    /** 
    Registers a vertex buffer as a copy of another. **/
    public void registerVertexBufferSourceAndCopy(org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer, org.ogre4j.IHardwareVertexBufferSharedPtr copy);

    /** 
    Allocates a copy of a given vertex buffer. **/
    public void allocateVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr returnValue, org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer, org.ogre4j.HardwareBufferManager.BufferLicenseType licenseType, org.ogre4j.IHardwareBufferLicensee licensee, boolean copyData);

    /** 
    Manually release a vertex buffer copy for others to subsequently use. **/
    public void releaseVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr bufferCopy);

    /** 
    Tell engine that the vertex buffer copy intent to reuse. **/
    public void touchVertexBufferCopy(org.ogre4j.IHardwareVertexBufferSharedPtr bufferCopy);

    /** 
    Free all unused vertex buffer copies. **/
    public void _freeUnusedBufferCopies();

    /** 
    Internal method for releasing all temporary buffers which have been allocated using BLT_AUTOMATIC_RELEASE; is called by OGRE. **/
    public void _releaseBufferCopies(boolean forceFreeUnused);

    /** 
    Internal method that forces the release of copies of a given buffer. **/
    public void _forceReleaseBufferCopies(org.ogre4j.IHardwareVertexBufferSharedPtr sourceBuffer);

    /** 
    Internal method that forces the release of copies of a given buffer. **/
    public void _forceReleaseBufferCopies(org.ogre4j.IHardwareVertexBuffer sourceBuffer);

    /** **/
    public void _notifyVertexBufferDestroyed(org.ogre4j.IHardwareVertexBuffer buf);

    /** **/
    public void _notifyIndexBufferDestroyed(org.ogre4j.IHardwareIndexBuffer buf);

}
