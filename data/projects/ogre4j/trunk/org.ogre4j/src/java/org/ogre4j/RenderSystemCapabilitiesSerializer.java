/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class RenderSystemCapabilitiesSerializer extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer {
static { System.loadLibrary("ogre4j");}
protected enum CapabilityKeywordType implements INativeEnum < CapabilityKeywordType > {
    UNDEFINED_CAPABILITY_TYPE(CapabilityKeywordTypeHelper.ENUM_VALUES[0]),
    SET_STRING_METHOD(CapabilityKeywordTypeHelper.ENUM_VALUES[1]),
    SET_INT_METHOD(CapabilityKeywordTypeHelper.ENUM_VALUES[2]),
    SET_BOOL_METHOD(CapabilityKeywordTypeHelper.ENUM_VALUES[3]),
    SET_REAL_METHOD(CapabilityKeywordTypeHelper.ENUM_VALUES[4]),
    SET_CAPABILITY_ENUM_BOOL(CapabilityKeywordTypeHelper.ENUM_VALUES[5]),
    ADD_SHADER_PROFILE_STRING(CapabilityKeywordTypeHelper.ENUM_VALUES[6]);

    private int value;

    CapabilityKeywordType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public CapabilityKeywordType getEnum(int val) {
        return toEnum(val);
    }

    public static final CapabilityKeywordType toEnum(int retval) {
    if (retval ==UNDEFINED_CAPABILITY_TYPE.value)
        return CapabilityKeywordType.UNDEFINED_CAPABILITY_TYPE;
    else if (retval ==SET_STRING_METHOD.value)
        return CapabilityKeywordType.SET_STRING_METHOD;
    else if (retval ==SET_INT_METHOD.value)
        return CapabilityKeywordType.SET_INT_METHOD;
    else if (retval ==SET_BOOL_METHOD.value)
        return CapabilityKeywordType.SET_BOOL_METHOD;
    else if (retval ==SET_REAL_METHOD.value)
        return CapabilityKeywordType.SET_REAL_METHOD;
    else if (retval ==SET_CAPABILITY_ENUM_BOOL.value)
        return CapabilityKeywordType.SET_CAPABILITY_ENUM_BOOL;
    else if (retval ==ADD_SHADER_PROFILE_STRING.value)
        return CapabilityKeywordType.ADD_SHADER_PROFILE_STRING;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class CapabilityKeywordTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

protected enum ParseAction implements INativeEnum < ParseAction > {
    PARSE_HEADER(ParseActionHelper.ENUM_VALUES[0]),
    FIND_OPEN_BRACE(ParseActionHelper.ENUM_VALUES[1]),
    COLLECT_LINES(ParseActionHelper.ENUM_VALUES[2]);

    private int value;

    ParseAction(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public ParseAction getEnum(int val) {
        return toEnum(val);
    }

    public static final ParseAction toEnum(int retval) {
    if (retval ==PARSE_HEADER.value)
        return ParseAction.PARSE_HEADER;
    else if (retval ==FIND_OPEN_BRACE.value)
        return ParseAction.FIND_OPEN_BRACE;
    else if (retval ==COLLECT_LINES.value)
        return ParseAction.COLLECT_LINES;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class ParseActionHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

protected static class KeywordTypeMap extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer.IKeywordTypeMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public KeywordTypeMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected KeywordTypeMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public KeywordTypeMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public KeywordTypeMap() {
         super( new org.xbig.base.InstancePointer(__createKeywordTypeMap()), false);
    }

    private native static long __createKeywordTypeMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.RenderSystemCapabilitiesSerializer.CapabilityKeywordType get(String key) {
         return org.ogre4j.RenderSystemCapabilitiesSerializer.CapabilityKeywordType.toEnum(_get__sR(this.object.pointer, key));
    }

    private native int _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.RenderSystemCapabilitiesSerializer.CapabilityKeywordType value) {
        _insert__sROgre_RenderSystemCapabilitiesSerializer_CapabilityKeywordTyper(this.object.pointer, key,  value.getValue());
    }

    private native void _insert__sROgre_RenderSystemCapabilitiesSerializer_CapabilityKeywordTyper(long _pointer_, String key, long value);

}
protected static class SetStringMethodDispatchTable extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer.ISetStringMethodDispatchTable {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SetStringMethodDispatchTable(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SetStringMethodDispatchTable(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SetStringMethodDispatchTable(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SetStringMethodDispatchTable() {
         super( new org.xbig.base.InstancePointer(__createSetStringMethodDispatchTable()), false);
    }

    private native static long __createSetStringMethodDispatchTable();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

//    /** **/
//    public void(RenderSystemCapabilities::*) get(String key) {
//         return _get__sR(this.object.pointer, key);
//    }
//
//    private native long _get__sR(long _pointer_, String key);
//
//    /** **/
//    public void insert(String key, void(RenderSystemCapabilities::*) value) {
//        _insert__sRSetStringMethodr(this.object.pointer, key,  value);
//    }
//
//    private native void _insert__sRSetStringMethodr(long _pointer_, String key, long value);

}
protected static class SetIntMethodDispatchTable extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer.ISetIntMethodDispatchTable {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SetIntMethodDispatchTable(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SetIntMethodDispatchTable(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SetIntMethodDispatchTable(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SetIntMethodDispatchTable() {
         super( new org.xbig.base.InstancePointer(__createSetIntMethodDispatchTable()), false);
    }

    private native static long __createSetIntMethodDispatchTable();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

//    /** **/
//    public void(RenderSystemCapabilities::*) get(String key) {
//         return _get__sR(this.object.pointer, key);
//    }
//
//    private native long _get__sR(long _pointer_, String key);
//
//    /** **/
//    public void insert(String key, void(RenderSystemCapabilities::*) value) {
//        _insert__sRSetIntMethodr(this.object.pointer, key,  value);
//    }
//
//    private native void _insert__sRSetIntMethodr(long _pointer_, String key, long value);

}
protected static class SetBoolMethodDispatchTable extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer.ISetBoolMethodDispatchTable {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SetBoolMethodDispatchTable(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SetBoolMethodDispatchTable(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SetBoolMethodDispatchTable(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SetBoolMethodDispatchTable() {
         super( new org.xbig.base.InstancePointer(__createSetBoolMethodDispatchTable()), false);
    }

    private native static long __createSetBoolMethodDispatchTable();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

//    /** **/
//    public void(RenderSystemCapabilities::*) get(String key) {
//         return _get__sR(this.object.pointer, key);
//    }
//
//    private native long _get__sR(long _pointer_, String key);
//
//    /** **/
//    public void insert(String key, void(RenderSystemCapabilities::*) value) {
//        _insert__sRSetBoolMethodr(this.object.pointer, key,  value);
//    }
//
//    private native void _insert__sRSetBoolMethodr(long _pointer_, String key, long value);

}
protected static class SetRealMethodDispatchTable extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer.ISetRealMethodDispatchTable {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SetRealMethodDispatchTable(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SetRealMethodDispatchTable(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SetRealMethodDispatchTable(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SetRealMethodDispatchTable() {
         super( new org.xbig.base.InstancePointer(__createSetRealMethodDispatchTable()), false);
    }

    private native static long __createSetRealMethodDispatchTable();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

//    /** **/
//    public void(RenderSystemCapabilities::*) get(String key) {
//         return _get__sR(this.object.pointer, key);
//    }
//
//    private native long _get__sR(long _pointer_, String key);
//
//    /** **/
//    public void insert(String key, void(RenderSystemCapabilities::*) value) {
//        _insert__sRSetRealMethodr(this.object.pointer, key,  value);
//    }
//
//    private native void _insert__sRSetRealMethodr(long _pointer_, String key, long value);

}
protected static class CapabilitiesMap extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer.ICapabilitiesMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CapabilitiesMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CapabilitiesMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CapabilitiesMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CapabilitiesMap() {
         super( new org.xbig.base.InstancePointer(__createCapabilitiesMap()), false);
    }

    private native static long __createCapabilitiesMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.Capabilities get(String key) {
         return org.ogre4j.Capabilities.toEnum(_get__sR(this.object.pointer, key));
    }

    private native int _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.Capabilities value) {
        _insert__sROgre_Capabilitiesr(this.object.pointer, key,  value.getValue());
    }

    private native void _insert__sROgre_Capabilitiesr(long _pointer_, String key, long value);

}
protected static class CapabilitiesLinesList extends org.xbig.base.NativeObject implements org.ogre4j.IRenderSystemCapabilitiesSerializer.ICapabilitiesLinesList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CapabilitiesLinesList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CapabilitiesLinesList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CapabilitiesLinesList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CapabilitiesLinesList() {
         super( new org.xbig.base.InstancePointer(__createCapabilitiesLinesList()), false);
    }

    private native static long __createCapabilitiesLinesList();

    /** **/
    public void assign(int num, org.std.Ipair< String, Integer > val) {
        _assign__ivstd_pair__std_string__int__R(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivstd_pair__std_string__int__R(long _pointer_, int num, long val);

    /** **/
    public void at(org.std.Ipair< String, Integer > returnValue, int loc) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_at__iv(this.object.pointer, loc)), true);
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public void back(org.std.Ipair< String, Integer > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_back(this.object.pointer)), true);
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public void front(org.std.Ipair< String, Integer > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_front(this.object.pointer)), true);
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.std.Ipair< String, Integer > val) {
        _push_back__std_pair__std_string__int__R(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__std_pair__std_string__int__R(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderSystemCapabilitiesSerializer(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderSystemCapabilitiesSerializer(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderSystemCapabilitiesSerializer(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    default constructor **/
    public RenderSystemCapabilitiesSerializer() {
         super( new org.xbig.base.InstancePointer(__createRenderSystemCapabilitiesSerializer()), false);
    }

    private native static long __createRenderSystemCapabilitiesSerializer();

    /** 
    Writes a  object to a data stream **/
    public void writeScript(org.ogre4j.IRenderSystemCapabilities caps, String name, String filename) {
        _writeScript__RenderSystemCapabilitiesPStringvStringv(this.object.pointer, caps.getInstancePointer().pointer,  name,  filename);
    }

    private native void _writeScript__RenderSystemCapabilitiesPStringvStringv(long _pointer_, long caps, String name, String filename);

    /** 
    Parses a  script file passed as a stream. Adds it to **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream) {
        _parseScript__DataStreamPtrr(this.object.pointer, stream.getInstancePointer().pointer);
    }

    private native void _parseScript__DataStreamPtrr(long _pointer_, long stream);

}
