/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class PlaneBoundedVolume extends org.xbig.base.NativeObject implements org.ogre4j.IPlaneBoundedVolume {
static { System.loadLibrary("ogre4j");}
public static class PlaneList extends org.xbig.base.NativeObject implements org.ogre4j.IPlaneBoundedVolume.IPlaneList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PlaneList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PlaneList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PlaneList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PlaneList() {
         super( new org.xbig.base.InstancePointer(__createPlaneList()), false);
    }

    private native static long __createPlaneList();

    /** **/
    public void assign(int num, org.ogre4j.IPlane val) {
        _assign__ivOgre_PlaneR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_PlaneR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IPlane at(int loc) {
         return new org.ogre4j.Plane(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IPlane back() {
         return new org.ogre4j.Plane(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IPlane front() {
         return new org.ogre4j.Plane(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IPlane val) {
        _push_back__Ogre_PlaneR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_PlaneR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PlaneBoundedVolume(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PlaneBoundedVolume(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PlaneBoundedVolume(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PlaneBoundedVolume() {
         super( new org.xbig.base.InstancePointer(__createPlaneBoundedVolume()), false);
    }

    private native static long __createPlaneBoundedVolume();

    /** 
    Constructor, determines which side is deemed to be 'outside' **/
    public PlaneBoundedVolume(org.ogre4j.Plane.Side theOutside) {
         super( new org.xbig.base.InstancePointer(__createPlaneBoundedVolume__Plane_Sidev( theOutside.getValue())), false);
    }

    private native static long __createPlaneBoundedVolume__Plane_Sidev(int theOutside);

    /** 
    Intersection test with AABB **/
    public boolean intersects(org.ogre4j.IAxisAlignedBox box) {
         return _intersects__AxisAlignedBoxR_const(this.object.pointer, box.getInstancePointer().pointer);
    }

    private native boolean _intersects__AxisAlignedBoxR_const(long _pointer_, long box);

    /** 
    Intersection test with **/
    public boolean intersects(org.ogre4j.ISphere sphere) {
         return _intersects__SphereR_const(this.object.pointer, sphere.getInstancePointer().pointer);
    }

    private native boolean _intersects__SphereR_const(long _pointer_, long sphere);

    /** 
    Intersection test with a **/
    public void intersects(org.std.Ipair< Boolean, Float > returnValue, org.ogre4j.IRay ray) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_intersects__RayR(this.object.pointer, ray.getInstancePointer().pointer)), false);
    }

    private native long _intersects__RayR(long _pointer_, long ray);

    /** **/
    public void getplanes(org.ogre4j.IPlaneBoundedVolume.IPlaneList returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getplanes(this.object.pointer)), false);
    }

    private native long _getplanes(long _pointer_);

    /** **/
    public void setplanes(org.ogre4j.IPlaneBoundedVolume.IPlaneList _jni_value_) {
        _setplanes(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setplanes(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.Plane.Side getoutside() {
         return org.ogre4j.Plane.Side.toEnum(_getoutside(this.object.pointer));
    }

    private native int _getoutside(long _pointer_);

    /** **/
    public void setoutside(org.ogre4j.Plane.Side _jni_value_) {
        _setoutside(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setoutside(long _pointer_, int _jni_value_);

}
