/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class VertexBufferBinding extends org.xbig.base.NativeObject implements org.ogre4j.IVertexBufferBinding {
static { System.loadLibrary("ogre4j");}
public static class VertexBufferBindingMap extends org.xbig.base.NativeObject implements org.ogre4j.IVertexBufferBinding.IVertexBufferBindingMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexBufferBindingMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexBufferBindingMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexBufferBindingMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexBufferBindingMap() {
         super( new org.xbig.base.InstancePointer(__createVertexBufferBindingMap()), false);
    }

    private native static long __createVertexBufferBindingMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__HR(this.object.pointer, key);
    }

    private native int _count__HR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__HR(this.object.pointer, key);
    }

    private native int _erase__HR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IHardwareVertexBufferSharedPtr get(int key) {
         return new org.ogre4j.HardwareVertexBufferSharedPtr(new InstancePointer(_get__HR(this.object.pointer, key)));
    }

    private native long _get__HR(long _pointer_, int key);

    /** **/
    public void insert(int key, org.ogre4j.IHardwareVertexBufferSharedPtr value) {
        _insert__HROgre_HardwareVertexBufferSharedPtrr(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__HROgre_HardwareVertexBufferSharedPtrr(long _pointer_, int key, long value);

}
public static class BindingIndexMap extends org.xbig.base.NativeObject implements org.ogre4j.IVertexBufferBinding.IBindingIndexMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public BindingIndexMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected BindingIndexMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public BindingIndexMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public BindingIndexMap() {
         super( new org.xbig.base.InstancePointer(__createBindingIndexMap()), false);
    }

    private native static long __createBindingIndexMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__HR(this.object.pointer, key);
    }

    private native int _count__HR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__HR(this.object.pointer, key);
    }

    private native int _erase__HR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public IntegerPointer get(int key) {
         return new IntegerPointer(new InstancePointer(_get__HR(this.object.pointer, key)));
    }

    private native long _get__HR(long _pointer_, int key);

    /** **/
    public void insert(int key, IntegerPointer value) {
        _insert__HRHr(this.object.pointer, key,  value.object.pointer);
    }

    private native void _insert__HRHr(long _pointer_, int key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexBufferBinding(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexBufferBinding(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexBufferBinding(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexBufferBinding() {
         super( new org.xbig.base.InstancePointer(__createVertexBufferBinding()), false);
    }

    private native static long __createVertexBufferBinding();

    /** 
    Set a binding, associating a vertex buffer with a given index. **/
    public void setBinding(int index, org.ogre4j.IHardwareVertexBufferSharedPtr buffer) {
        _setBinding__HvHardwareVertexBufferSharedPtrR(this.object.pointer, index,  buffer.getInstancePointer().pointer);
    }

    private native void _setBinding__HvHardwareVertexBufferSharedPtrR(long _pointer_, int index, long buffer);

    /** 
    Removes an existing binding. **/
    public void unsetBinding(int index) {
        _unsetBinding__Hv(this.object.pointer, index);
    }

    private native void _unsetBinding__Hv(long _pointer_, int index);

    /** 
    Removes all the bindings. **/
    public void unsetAllBindings() {
        _unsetAllBindings(this.object.pointer);
    }

    private native void _unsetAllBindings(long _pointer_);

    /** **/
    public org.ogre4j.IVertexBufferBinding.IVertexBufferBindingMap getBindings() {
         return new org.ogre4j.VertexBufferBinding.VertexBufferBindingMap(new InstancePointer(_getBindings_const(this.object.pointer)));
    }

    private native long _getBindings_const(long _pointer_);

    /** **/
    public org.ogre4j.IHardwareVertexBufferSharedPtr getBuffer(int index) {
         return new org.ogre4j.HardwareVertexBufferSharedPtr(new InstancePointer(_getBuffer__Hv_const(this.object.pointer, index)));
    }

    private native long _getBuffer__Hv_const(long _pointer_, int index);

    /** **/
    public boolean isBufferBound(int index) {
         return _isBufferBound__Hv_const(this.object.pointer, index);
    }

    private native boolean _isBufferBound__Hv_const(long _pointer_, int index);

    /** **/
    public int getBufferCount() {
         return _getBufferCount_const(this.object.pointer);
    }

    private native int _getBufferCount_const(long _pointer_);

    /** 
    Gets the highest index which has already been set, plus 1. **/
    public int getNextIndex() {
         return _getNextIndex_const(this.object.pointer);
    }

    private native int _getNextIndex_const(long _pointer_);

    /** 
    Gets the last bound index. **/
    public int getLastBoundIndex() {
         return _getLastBoundIndex_const(this.object.pointer);
    }

    private native int _getLastBoundIndex_const(long _pointer_);

    /** 
    Check whether any gaps in the bindings. **/
    public boolean hasGaps() {
         return _hasGaps_const(this.object.pointer);
    }

    private native boolean _hasGaps_const(long _pointer_);

    /** 
    Remove any gaps in the bindings. **/
    public void closeGaps(org.ogre4j.IVertexBufferBinding.IBindingIndexMap bindingIndexMap) {
        _closeGaps__BindingIndexMapr(this.object.pointer, bindingIndexMap.getInstancePointer().pointer);
    }

    private native void _closeGaps__BindingIndexMapr(long _pointer_, long bindingIndexMap);

}
