/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IArchiveManager extends INativeObject, org.ogre4j.IGeneralAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.IArchiveManager > {

public interface IArchiveFactoryMap extends INativeObject, org.std.Imap< String, org.ogre4j.IArchiveFactory > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IArchiveFactory get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IArchiveFactory value);

}
public interface IArchiveMap extends INativeObject, org.std.Imap< String, org.ogre4j.IArchive > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IArchive get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IArchive value);

}
public interface IArchiveMapIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IArchiveManager.IArchiveMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IArchive getNext();

    /** **/
    public org.ogre4j.IArchive peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IArchiveManager.IArchiveMapIterator operatorAssignment(org.ogre4j.IArchiveManager.IArchiveMapIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IArchive> peekNextValuePtr();

    /** **/
    public void moveNext();

}
    /** 
    Opens an archive for file reading. **/
    public org.ogre4j.IArchive load(String filename, String archiveType);

    /** 
    Unloads an archive. **/
    public void unload(org.ogre4j.IArchive arch);

    /** 
    Unloads an archive by name. **/
    public void unload(String filename);

    /** 
    Get an iterator over the Archives in this Manager. **/
    public void getArchiveIterator(org.ogre4j.IArchiveManager.IArchiveMapIterator returnValue);

    /** 
    Adds a new  to the list of available factories. **/
    public void addArchiveFactory(org.ogre4j.IArchiveFactory factory);

}
