/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IParticleEmitter extends INativeObject, org.ogre4j.IStringInterface, org.ogre4j.IParticle {

    /** 
    Sets the position of this emitter relative to the particle system center. **/
    public void setPosition(org.ogre4j.IVector3 pos);

    /** 
    Returns the position of this emitter relative to the center of the particle system. **/
    public org.ogre4j.IVector3 getPosition();

    /** 
    Sets the direction of the emitter. **/
    public void setDirection(org.ogre4j.IVector3 direction);

    /** 
    Returns the base direction of the emitter. **/
    public org.ogre4j.IVector3 getDirection();

    /** 
    Sets the maximum angle away from the emitter direction which particle will be emitted. **/
    public void setAngle(org.ogre4j.IRadian angle);

    /** 
    Returns the maximum angle which the initial particle direction can deviate from the emitters base direction. **/
    public org.ogre4j.IRadian getAngle();

    /** 
    Sets the initial velocity of particles emitted. **/
    public void setParticleVelocity(float speed);

    /** 
    Sets the initial velocity range of particles emitted. **/
    public void setParticleVelocity(float _min, float _max);

    /** 
    Returns the minimum particle velocity. **/
    public void setMinParticleVelocity(float _min);

    /** 
    Returns the maximum particle velocity. **/
    public void setMaxParticleVelocity(float _max);

    /** 
    Returns the initial velocity of particles emitted. **/
    public float getParticleVelocity();

    /** 
    Returns the minimum particle velocity. **/
    public float getMinParticleVelocity();

    /** 
    Returns the maximum particle velocity. **/
    public float getMaxParticleVelocity();

    /** 
    Sets the emission rate for this emitter. **/
    public void setEmissionRate(float particlesPerSecond);

    /** 
    Returns the emission rate set for this emitter. **/
    public float getEmissionRate();

    /** 
    Sets the lifetime of all particles emitted. **/
    public void setTimeToLive(float ttl);

    /** 
    Sets the range of lifetime for particles emitted. **/
    public void setTimeToLive(float minTtl, float maxTtl);

    /** 
    Sets the minimum time each particle will live for. **/
    public void setMinTimeToLive(float _min);

    /** 
    Sets the maximum time each particle will live for. **/
    public void setMaxTimeToLive(float _max);

    /** 
    Gets the time each particle will live for. **/
    public float getTimeToLive();

    /** 
    Gets the minimum time each particle will live for. **/
    public float getMinTimeToLive();

    /** 
    Gets the maximum time each particle will live for. **/
    public float getMaxTimeToLive();

    /** 
    Sets the initial colour of particles emitted. **/
    public void setColour(org.ogre4j.IColourValue colour);

    /** 
    Sets the range of colours for emitted particles. **/
    public void setColour(org.ogre4j.IColourValue colourStart, org.ogre4j.IColourValue colourEnd);

    /** 
    Sets the minimum colour of particles to be emitted. **/
    public void setColourRangeStart(org.ogre4j.IColourValue colour);

    /** 
    Sets the maximum colour of particles to be emitted. **/
    public void setColourRangeEnd(org.ogre4j.IColourValue colour);

    /** 
    Gets the colour of particles to be emitted. **/
    public org.ogre4j.IColourValue getColour();

    /** 
    Gets the minimum colour of particles to be emitted. **/
    public org.ogre4j.IColourValue getColourRangeStart();

    /** 
    Gets the maximum colour of particles to be emitted. **/
    public org.ogre4j.IColourValue getColourRangeEnd();

    /** 
    Gets the number of particles which this emitter would like to emit based on the time elapsed. **/
    public int _getEmissionCount(float timeElapsed);

    /** 
    Initialises a particle based on the emitter's approach and parameters. **/
    public void _initParticle(org.ogre4j.IParticle pParticle);

    /** 
    Returns the name of the type of emitter. **/
    public String getType();

    /** 
    Sets whether or not the emitter is enabled. **/
    public void setEnabled(boolean enabled);

    /** 
    Gets the flag indicating if this emitter is enabled or not. **/
    public boolean getEnabled();

    /** 
    Sets the 'start time' of this emitter. **/
    public void setStartTime(float startTime);

    /** 
    Gets the start time of the emitter. **/
    public float getStartTime();

    /** 
    Sets the duration of the emitter. **/
    public void setDuration(float duration);

    /** 
    Gets the duration of the emitter from when it is created or re-enabled. **/
    public float getDuration();

    /** 
    Sets the range of random duration for this emitter. **/
    public void setDuration(float _min, float _max);

    /** 
    Sets the minimum duration of this emitter in seconds (see setDuration for more details) **/
    public void setMinDuration(float _min);

    /** 
    Sets the maximum duration of this emitter in seconds (see setDuration for more details) **/
    public void setMaxDuration(float _max);

    /** 
    Gets the minimum duration of this emitter in seconds (see setDuration for more details) **/
    public float getMinDuration();

    /** 
    Gets the maximum duration of this emitter in seconds (see setDuration for more details) **/
    public float getMaxDuration();

    /** 
    Sets the time between repeats of the emitter. **/
    public void setRepeatDelay(float duration);

    /** 
    Gets the duration of the emitter from when it is created or re-enabled. **/
    public float getRepeatDelay();

    /** 
    Sets the range of random duration for this emitter. **/
    public void setRepeatDelay(float _min, float _max);

    /** 
    Sets the minimum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public void setMinRepeatDelay(float _min);

    /** 
    Sets the maximum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public void setMaxRepeatDelay(float _max);

    /** 
    Gets the minimum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public float getMinRepeatDelay();

    /** 
    Gets the maximum duration of this emitter in seconds (see setRepeatDelay for more details) **/
    public float getMaxRepeatDelay();

    /** 
    Returns the name of the emitter **/
    public String getName();

    /** 
    Sets the name of the emitter **/
    public void setName(String newName);

    /** 
    Returns the name of the emitter to be emitted **/
    public String getEmittedEmitter();

    /** 
    Sets the name of the emitter to be emitted **/
    public void setEmittedEmitter(String emittedEmitter);

    /** 
    Return 'true' if the emitter is emitted by another emitter **/
    public boolean isEmitted();

    /** 
    Set the indication (true/false) to indicate that the emitter is emitted by another emitter **/
    public void setEmitted(boolean emitted);

}
