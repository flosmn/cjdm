/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class LogManager extends org.xbig.base.NativeObject implements org.ogre4j.ILogManager {
static { System.loadLibrary("ogre4j");}
protected static class LogList extends org.xbig.base.NativeObject implements org.ogre4j.ILogManager.ILogList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LogList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LogList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LogList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LogList() {
         super( new org.xbig.base.InstancePointer(__createLogList()), false);
    }

    private native static long __createLogList();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.ILog get(String key) {
         return new org.ogre4j.Log(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.ILog value) {
        _insert__sROgre_Logp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_Logp(long _pointer_, String key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LogManager(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LogManager(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LogManager(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LogManager() {
         super( new org.xbig.base.InstancePointer(__createLogManager()), false);
    }

    private native static long __createLogManager();

    /** 
    Creates a new log with the given name. **/
    public org.ogre4j.ILog createLog(String name, boolean defaultLog, boolean debuggerOutput, boolean suppressFileOutput) {
         return new org.ogre4j.Log(new InstancePointer(_createLog__StringRbvbvbv(this.object.pointer, name,  defaultLog,  debuggerOutput,  suppressFileOutput)));
    }

    private native long _createLog__StringRbvbvbv(long _pointer_, String name, boolean defaultLog, boolean debuggerOutput, boolean suppressFileOutput);

    /** 
    Retrieves a log managed by this class. **/
    public org.ogre4j.ILog getLog(String name) {
         return new org.ogre4j.Log(new InstancePointer(_getLog__StringR(this.object.pointer, name)));
    }

    private native long _getLog__StringR(long _pointer_, String name);

    /** 
    Returns a pointer to the default log. **/
    public org.ogre4j.ILog getDefaultLog() {
         return new org.ogre4j.Log(new InstancePointer(_getDefaultLog(this.object.pointer)));
    }

    private native long _getDefaultLog(long _pointer_);

    /** 
    Closes and removes a named log. **/
    public void destroyLog(String name) {
        _destroyLog__StringR(this.object.pointer, name);
    }

    private native void _destroyLog__StringR(long _pointer_, String name);

    /** 
    Closes and removes a log. **/
    public void destroyLog(org.ogre4j.ILog log) {
        _destroyLog__Logp(this.object.pointer, log.getInstancePointer().pointer);
    }

    private native void _destroyLog__Logp(long _pointer_, long log);

    /** 
    Sets the passed in log as the default log. **/
    public org.ogre4j.ILog setDefaultLog(org.ogre4j.ILog newLog) {
         return new org.ogre4j.Log(new InstancePointer(_setDefaultLog__Logp(this.object.pointer, newLog.getInstancePointer().pointer)));
    }

    private native long _setDefaultLog__Logp(long _pointer_, long newLog);

    /** 
     a message to the default log. **/
    public void logMessage(String message, org.ogre4j.LogMessageLevel lml, boolean maskDebug) {
        _logMessage__StringRLogMessageLevelvbv(this.object.pointer, message,  lml.getValue(),  maskDebug);
    }

    private native void _logMessage__StringRLogMessageLevelvbv(long _pointer_, String message, int lml, boolean maskDebug);

    /** 
     a message to the default log (signature for backward compatibility). **/
    public void logMessage(org.ogre4j.LogMessageLevel lml, String message, boolean maskDebug) {
        _logMessage__LogMessageLevelvStringRbv(this.object.pointer, lml.getValue(),  message,  maskDebug);
    }

    private native void _logMessage__LogMessageLevelvStringRbv(long _pointer_, int lml, String message, boolean maskDebug);

    /** 
    Get a stream on the default log. **/
    public void stream(org.ogre4j.ILog.IStream returnValue, org.ogre4j.LogMessageLevel lml, boolean maskDebug) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_stream__LogMessageLevelvbv(this.object.pointer, lml.getValue(),  maskDebug)), false);
    }

    private native long _stream__LogMessageLevelvbv(long _pointer_, int lml, boolean maskDebug);

    /** 
    Sets the level of detail of the default log. **/
    public void setLogDetail(org.ogre4j.LoggingLevel ll) {
        _setLogDetail__LoggingLevelv(this.object.pointer, ll.getValue());
    }

    private native void _setLogDetail__LoggingLevelv(long _pointer_, int ll);

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.ILogManager getSingleton() {
         return new org.ogre4j.LogManager(new InstancePointer(_getSingleton()));
    }

    private native static long _getSingleton();

    /** 
    Override standard  retrieval. **/
    public static org.ogre4j.ILogManager getSingletonPtr() {
         return new org.ogre4j.LogManager(new InstancePointer(_getSingletonPtr()));
    }

    private native static long _getSingletonPtr();

}
