/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ICompositorManager extends INativeObject, org.ogre4j.IResourceManager, org.ogre4j.ISingleton< org.ogre4j.ICompositorManager > {

public interface IChains extends INativeObject, org.std.Imap< org.ogre4j.IViewport, org.ogre4j.ICompositorChain > {

    /** **/
    public void clear();

    /** **/
    public int count(org.ogre4j.IViewport key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(org.ogre4j.IViewport key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.ICompositorChain get(org.ogre4j.IViewport key);

    /** **/
    public void insert(org.ogre4j.IViewport key, org.ogre4j.ICompositorChain value);

}
    /** **/
    public org.ogre4j.IResource createImpl(String name, long handle, String group, boolean isManual, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList params);

    /** 
    Initialises the  manager, which also triggers it to parse all available .compositor scripts. **/
    public void initialise();

    /** 
    **/
    public void parseScript(org.ogre4j.IDataStreamPtr stream, String groupName);

    /** 
    Get the compositor chain for a . If there is none yet, a new compositor chain is registered. XXX We need a _notifyViewportRemoved to find out when this viewport disappears, so we can destroy its chain as well. **/
    public org.ogre4j.ICompositorChain getCompositorChain(org.ogre4j.IViewport vp);

    /** 
    Returns whether exists compositor chain for a viewport. **/
    public boolean hasCompositorChain(org.ogre4j.IViewport vp);

    /** 
    Remove the compositor chain from a viewport if exists. **/
    public void removeCompositorChain(org.ogre4j.IViewport vp);

    /** 
    Add a compositor to a viewport. By default, it is added to end of the chain, after the other compositors. **/
    public org.ogre4j.ICompositorInstance addCompositor(org.ogre4j.IViewport vp, String compositor, int addPosition);

    /** 
    Remove a compositor from a viewport **/
    public void removeCompositor(org.ogre4j.IViewport vp, String compositor);

    /** 
    Set the state of a compositor on a viewport to enabled or disabled. Disabling a compositor stops it from rendering but does not free any resources. This can be more efficient than using removeCompositor and addCompositor in cases the filter is switched on and off a lot. **/
    public void setCompositorEnabled(org.ogre4j.IViewport vp, String compositor, boolean value);

    /** 
    Get a textured fullscreen 2D rectangle, for internal use. **/
    public org.ogre4j.IRenderable _getTexturedRectangle2D();

    /** 
    Overridden from  since we have to clean up chains too. **/
    public void removeAll();

    /** 
    Internal method for forcing all active compositors to recreate their resources. **/
    public void _reconstructAllCompositorResources();

}
