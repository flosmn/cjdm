/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IResourceGroupManager extends INativeObject, org.ogre4j.IResourceAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.IResourceGroupManager > {

public static interface IResourceDeclaration extends INativeObject {

    /** **/
    public String getresourceName();

    /** **/
    public void setresourceName(String _jni_value_);

    /** **/
    public String getresourceType();

    /** **/
    public void setresourceType(String _jni_value_);

    /** **/
    public org.ogre4j.IManualResourceLoader getloader();

    /** **/
    public void setloader(org.ogre4j.IManualResourceLoader _jni_value_);

    /** **/
    public void getparameters(org.ogre4j.INameValuePairList returnValue);

    /** **/
    public void setparameters(org.ogre4j.INameValuePairList _jni_value_);

}
public static interface IResourceGroup extends INativeObject {

public interface ILoadResourceOrderMap extends INativeObject, org.std.Imap< Float, org.ogre4j.IResourceGroupManager.ILoadUnloadResourceList > {

    /** **/
    public void clear();

    /** **/
    public int count(float key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(float key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IResourceGroupManager.ILoadUnloadResourceList get(float key);

    /** **/
    public void insert(float key, org.ogre4j.IResourceGroupManager.ILoadUnloadResourceList value);

}
    /** **/
    public String getname();

    /** **/
    public void setname(String _jni_value_);

    /** **/
    public org.ogre4j.ResourceGroupManager.ResourceGroup.Status getgroupStatus();

    /** **/
    public void setgroupStatus(org.ogre4j.ResourceGroupManager.ResourceGroup.Status _jni_value_);

    /** **/
    public void getlocationList(org.ogre4j.IResourceGroupManager.ILocationList returnValue);

    /** **/
    public void setlocationList(org.ogre4j.IResourceGroupManager.ILocationList _jni_value_);

    /** **/
    public void getresourceIndexCaseSensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex returnValue);

    /** **/
    public void setresourceIndexCaseSensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex _jni_value_);

    /** **/
    public void getresourceIndexCaseInsensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex returnValue);

    /** **/
    public void setresourceIndexCaseInsensitive(org.ogre4j.IResourceGroupManager.IResourceLocationIndex _jni_value_);

    /** **/
    public void getresourceDeclarations(org.ogre4j.IResourceGroupManager.IResourceDeclarationList returnValue);

    /** **/
    public void setresourceDeclarations(org.ogre4j.IResourceGroupManager.IResourceDeclarationList _jni_value_);

    /** **/
    public void getloadResourceOrderMap(org.ogre4j.IResourceGroupManager.IResourceGroup.ILoadResourceOrderMap returnValue);

    /** **/
    public void setloadResourceOrderMap(org.ogre4j.IResourceGroupManager.IResourceGroup.ILoadResourceOrderMap _jni_value_);

    /** **/
    public String getworldGeometry();

    /** **/
    public void setworldGeometry(String _jni_value_);

    /** **/
    public org.ogre4j.ISceneManager getworldGeometrySceneManager();

    /** **/
    public void setworldGeometrySceneManager(org.ogre4j.ISceneManager _jni_value_);

}
public static interface IResourceLocation extends INativeObject {

    /** **/
    public org.ogre4j.IArchive getarchive();

    /** **/
    public void setarchive(org.ogre4j.IArchive _jni_value_);

    /** **/
    public boolean getrecursive();

    /** **/
    public void setrecursive(boolean _jni_value_);

}
public interface IResourceDeclarationList extends INativeObject, org.std.Ilist< org.ogre4j.IResourceGroupManager.IResourceDeclaration > {

    /** **/
    public void assign(int num, org.ogre4j.IResourceGroupManager.IResourceDeclaration val);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceDeclaration back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceDeclaration front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IResourceGroupManager.IResourceDeclaration val);

    /** **/
    public void push_front(org.ogre4j.IResourceGroupManager.IResourceDeclaration val);

;

    /** **/
    public void reverse();

    /** **/
    public int size();

;

}
public interface IResourceManagerMap extends INativeObject, org.std.Imap< String, org.ogre4j.IResourceManager > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IResourceManager get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IResourceManager value);

}
public interface IResourceManagerIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.IResourceGroupManager.IResourceManagerMap > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.IResourceManager getNext();

    /** **/
    public org.ogre4j.IResourceManager peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceManagerIterator operatorAssignment(org.ogre4j.IResourceGroupManager.IResourceManagerIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IResourceManager> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IScriptLoaderOrderMap extends INativeObject, org.std.Imultimap< Float, org.ogre4j.IScriptLoader > {

    /** **/
    public void clear();

    /** **/
    public int count(float key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(float key);

    /** **/
    public int max_size();

    /** **/
    public int size();

}
public interface IResourceGroupListenerList extends INativeObject, org.std.Ivector< org.ogre4j.IResourceGroupListener > {

    /** **/
    public void assign(int num, org.ogre4j.IResourceGroupListener val);

    /** **/
    public org.ogre4j.IResourceGroupListener at(int loc);

    /** **/
    public org.ogre4j.IResourceGroupListener back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IResourceGroupListener front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IResourceGroupListener val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IResourceLocationIndex extends INativeObject, org.std.Imap< String, org.ogre4j.IArchive > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IArchive get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IArchive value);

}
public interface ILocationList extends INativeObject, org.std.Ilist< org.ogre4j.IResourceGroupManager.IResourceLocation > {

    /** **/
    public void assign(int num, org.ogre4j.IResourceGroupManager.IResourceLocation val);

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceLocation back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceLocation front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IResourceGroupManager.IResourceLocation val);

    /** **/
    public void push_front(org.ogre4j.IResourceGroupManager.IResourceLocation val);

    /** **/
    public void remove(org.ogre4j.IResourceGroupManager.IResourceLocation val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface ILoadUnloadResourceList extends INativeObject, org.std.Ilist< org.ogre4j.IResourcePtr > {

    /** **/
    public void assign(int num, org.ogre4j.IResourcePtr val);

    /** **/
    public org.ogre4j.IResourcePtr back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IResourcePtr front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IResourcePtr val);

    /** **/
    public void push_front(org.ogre4j.IResourcePtr val);

    /** **/
    public void remove(org.ogre4j.IResourcePtr val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IResourceGroupMap extends INativeObject, org.std.Imap< String, org.ogre4j.IResourceGroupManager.IResourceGroup > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.IResourceGroupManager.IResourceGroup get(String key);

    /** **/
    public void insert(String key, org.ogre4j.IResourceGroupManager.IResourceGroup value);

}
    /** 
    Create a resource group. **/
    public void createResourceGroup(String name);

    /** 
    Initialises a resource group. **/
    public void initialiseResourceGroup(String name);

    /** 
    Initialise all resource groups which are yet to be initialised. **/
    public void initialiseAllResourceGroups();

    /** 
    Prepares a resource group. 
When this method is called, this class will callback any ResourceGroupListeners which have been registered to update them on progress. **/
    public void prepareResourceGroup(String name, boolean prepareMainResources, boolean prepareWorldGeom);

    /** 
    Loads a resource group. 
When this method is called, this class will callback any ResourceGroupListeners which have been registered to update them on progress. **/
    public void loadResourceGroup(String name, boolean loadMainResources, boolean loadWorldGeom);

    /** 
    Unloads a resource group. **/
    public void unloadResourceGroup(String name, boolean reloadableOnly);

    /** 
    Unload all resources which are not referenced by any other object. **/
    public void unloadUnreferencedResourcesInGroup(String name, boolean reloadableOnly);

    /** 
    Clears a resource group. **/
    public void clearResourceGroup(String name);

    /** 
    Destroys a resource group, clearing it first, destroying the resources which are part of it, and then removing it from the list of resource groups. **/
    public void destroyResourceGroup(String name);

    /** 
    Checks the status of a resource group. **/
    public boolean isResourceGroupInitialised(String name);

    /** 
    Checks the status of a resource group. **/
    public boolean isResourceGroupLoaded(String name);

    /** 
    Method to add a resource location to for a given resource group. **/
    public void addResourceLocation(String name, String locType, String resGroup, boolean recursive);

    /** 
    Removes a resource location from the search path. **/
    public void removeResourceLocation(String name, String resGroup);

    /** 
    Declares a resource to be a part of a resource group, allowing you to load and unload it as part of the group. **/
    public void declareResource(String name, String resourceType, String groupName, org.ogre4j.INameValuePairList loadParameters);

    /** 
    Declares a resource to be a part of a resource group, allowing you to load and unload it as part of the group. **/
    public void declareResource(String name, String resourceType, String groupName, org.ogre4j.IManualResourceLoader loader, org.ogre4j.INameValuePairList loadParameters);

    /** 
    Undeclare a resource. **/
    public void undeclareResource(String name, String groupName);

    /** 
    Open a single resource by name and return a  pointing at the source of the data. **/
    public void openResource(org.ogre4j.IDataStreamPtr returnValue, String resourceName, String groupName, boolean searchGroupsIfNotFound, org.ogre4j.IResource resourceBeingLoaded);

    /** 
    Open all resources matching a given pattern (which can contain the character '*' as a wildcard), and return a collection of  objects on them. **/
    public void openResources(org.ogre4j.IDataStreamListPtr returnValue, String pattern, String groupName);

    /** 
    List all file or directory names in a resource group. **/
    public void listResourceNames(org.ogre4j.IStringVectorPtr returnValue, String groupName, boolean dirs);

    /** 
    List all files in a resource group with accompanying information. **/
    public void listResourceFileInfo(org.ogre4j.IFileInfoListPtr returnValue, String groupName, boolean dirs);

    /** 
    Find all file or directory names matching a given pattern in a resource group. **/
    public void findResourceNames(org.ogre4j.IStringVectorPtr returnValue, String groupName, String pattern, boolean dirs);

    /** 
    Find out if the named file exists in a group. **/
    public boolean resourceExists(String group, String filename);

    /** 
    Find out if the named file exists in a group. **/
    public boolean resourceExists(org.ogre4j.IResourceGroupManager.IResourceGroup group, String filename);

    /** 
    Find the group in which a resource exists. **/
    public String findGroupContainingResource(String filename);

    /** 
    Find all files or directories matching a given pattern in a group and get some detailed information about them. **/
    public void findResourceFileInfo(org.ogre4j.IFileInfoListPtr returnValue, String group, String pattern, boolean dirs);

    /** 
    Retrieve the modification time of a given file **/
    public long resourceModifiedTime(String group, String filename);

    /** 
    Retrieve the modification time of a given file **/
    public long resourceModifiedTime(org.ogre4j.IResourceGroupManager.IResourceGroup group, String filename);

    /** 
    Adds a  which will be called back during resource loading events. **/
    public void addResourceGroupListener(org.ogre4j.IResourceGroupListener l);

    /** 
    Removes a **/
    public void removeResourceGroupListener(org.ogre4j.IResourceGroupListener l);

    /** 
    Sets the resource group that 'world' resources will use. **/
    public void setWorldResourceGroupName(String groupName);

    /** **/
    public String getWorldResourceGroupName();

    /** 
    Associates some world geometry with a resource group, causing it to be loaded / unloaded with the resource group. **/
    public void linkWorldGeometryToResourceGroup(String group, String worldGeometry, org.ogre4j.ISceneManager sceneManager);

    /** 
    Clear any link to world geometry from a resource group. **/
    public void unlinkWorldGeometryFromResourceGroup(String group);

    /** 
    Shutdown all ResourceManagers, performed as part of clean-up. **/
    public void shutdownAll();

    /** 
    Internal method for registering a  (which should be a singleton). Creators of plugins can register new ResourceManagers this way if they wish. **/
    public void _registerResourceManager(String resourceType, org.ogre4j.IResourceManager rm);

    /** 
    Internal method for unregistering a . **/
    public void _unregisterResourceManager(String resourceType);

    /** 
    Get an iterator over the registered resource managers. **/
    public void getResourceManagerIterator(org.ogre4j.IResourceGroupManager.IResourceManagerIterator returnValue);

    /** 
    Internal method for registering a . **/
    public void _registerScriptLoader(org.ogre4j.IScriptLoader su);

    /** 
    Internal method for unregistering a . **/
    public void _unregisterScriptLoader(org.ogre4j.IScriptLoader su);

    /** 
    Internal method for getting a registered . **/
    public org.ogre4j.IResourceManager _getResourceManager(String resourceType);

    /** 
    Internal method called by  when a resource is created. **/
    public void _notifyResourceCreated(org.ogre4j.IResourcePtr res);

    /** 
    Internal method called by  when a resource is removed. **/
    public void _notifyResourceRemoved(org.ogre4j.IResourcePtr res);

    /** 
    Internal method to notify the group manager that a resource has changed group (only applicable for autodetect group) **/
    public void _notifyResourceGroupChanged(String oldGroup, org.ogre4j.IResource res);

    /** 
    Internal method called by  when all resources for that manager are removed. **/
    public void _notifyAllResourcesRemoved(org.ogre4j.IResourceManager manager);

    /** 
    Notify this manager that one stage of world geometry loading has been started. **/
    public void _notifyWorldGeometryPrepareStageStarted(String description);

    /** 
    Notify this manager that one stage of world geometry loading has been completed. **/
    public void _notifyWorldGeometryPrepareStageEnded();

    /** 
    Notify this manager that one stage of world geometry loading has been started. **/
    public void _notifyWorldGeometryStageStarted(String description);

    /** 
    Notify this manager that one stage of world geometry loading has been completed. **/
    public void _notifyWorldGeometryStageEnded();

    /** 
    Get a list of the currently defined resource groups. **/
    public void getResourceGroups(org.ogre4j.IStringVector returnValue);

    /** 
    Get the list of resource declarations for the specified group name. **/
    public void getResourceDeclarationList(org.ogre4j.IResourceGroupManager.IResourceDeclarationList returnValue, String groupName);

    /** **/
    public void setLoadingListener(org.ogre4j.IResourceLoadingListener listener);

    /** **/
    public org.ogre4j.IResourceLoadingListener getLoadingListener();

}
