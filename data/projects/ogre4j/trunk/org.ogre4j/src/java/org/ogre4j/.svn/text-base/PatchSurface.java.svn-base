/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class PatchSurface extends org.xbig.base.NativeObject implements org.ogre4j.IPatchSurface {
static { System.loadLibrary("ogre4j");}
public enum PatchSurfaceType implements INativeEnum < PatchSurfaceType > {
    PST_BEZIER(PatchSurfaceTypeHelper.ENUM_VALUES[0]);

    private int value;

    PatchSurfaceType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public PatchSurfaceType getEnum(int val) {
        return toEnum(val);
    }

    public static final PatchSurfaceType toEnum(int retval) {
    if (retval ==PST_BEZIER.value)
        return PatchSurfaceType.PST_BEZIER;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class PatchSurfaceTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public enum VisibleSide implements INativeEnum < VisibleSide > {
    VS_FRONT(VisibleSideHelper.ENUM_VALUES[0]),
    VS_BACK(VisibleSideHelper.ENUM_VALUES[1]),
    VS_BOTH(VisibleSideHelper.ENUM_VALUES[2]);

    private int value;

    VisibleSide(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public VisibleSide getEnum(int val) {
        return toEnum(val);
    }

    public static final VisibleSide toEnum(int retval) {
    if (retval ==VS_FRONT.value)
        return VisibleSide.VS_FRONT;
    else if (retval ==VS_BACK.value)
        return VisibleSide.VS_BACK;
    else if (retval ==VS_BOTH.value)
        return VisibleSide.VS_BOTH;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class VisibleSideHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PatchSurface(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PatchSurface(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PatchSurface(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PatchSurface() {
         super( new org.xbig.base.InstancePointer(__createPatchSurface()), false);
    }

    private native static long __createPatchSurface();

    /** 
    Sets up the surface by defining it's control points, type and initial subdivision level. **/
    public void defineSurface(VoidPointer controlPointBuffer, org.ogre4j.IVertexDeclaration declaration, int width, int height, org.ogre4j.PatchSurface.PatchSurfaceType pType, int uMaxSubdivisionLevel, int vMaxSubdivisionLevel, org.ogre4j.PatchSurface.VisibleSide visibleSide) {
        _defineSurface__vpVertexDeclarationpivivPatchSurfaceTypevivivVisibleSidev(this.object.pointer, controlPointBuffer.object.pointer,  declaration.getInstancePointer().pointer,  width,  height,  pType.getValue(),  uMaxSubdivisionLevel,  vMaxSubdivisionLevel,  visibleSide.getValue());
    }

    private native void _defineSurface__vpVertexDeclarationpivivPatchSurfaceTypevivivVisibleSidev(long _pointer_, long controlPointBuffer, long declaration, int width, int height, int pType, int uMaxSubdivisionLevel, int vMaxSubdivisionLevel, int visibleSide);

    /** 
    Based on a previous call to defineSurface, establishes the number of vertices required to hold this patch at the maximum detail level. **/
    public int getRequiredVertexCount() {
         return _getRequiredVertexCount_const(this.object.pointer);
    }

    private native int _getRequiredVertexCount_const(long _pointer_);

    /** 
    Based on a previous call to defineSurface, establishes the number of indexes required to hold this patch at the maximum detail level. **/
    public int getRequiredIndexCount() {
         return _getRequiredIndexCount_const(this.object.pointer);
    }

    private native int _getRequiredIndexCount_const(long _pointer_);

    /** 
    Gets the current index count based on the current subdivision level. **/
    public int getCurrentIndexCount() {
         return _getCurrentIndexCount_const(this.object.pointer);
    }

    private native int _getCurrentIndexCount_const(long _pointer_);

    /** **/
    public int getIndexOffset() {
         return _getIndexOffset_const(this.object.pointer);
    }

    private native int _getIndexOffset_const(long _pointer_);

    /** **/
    public int getVertexOffset() {
         return _getVertexOffset_const(this.object.pointer);
    }

    private native int _getVertexOffset_const(long _pointer_);

    /** 
    Gets the bounds of this patch, only valid after calling defineSurface. **/
    public org.ogre4j.IAxisAlignedBox getBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBounds_const(this.object.pointer)));
    }

    private native long _getBounds_const(long _pointer_);

    /** 
    Gets the radius of the bounding sphere for this patch, only valid after defineSurface has been called. **/
    public float getBoundingSphereRadius() {
         return _getBoundingSphereRadius_const(this.object.pointer);
    }

    private native float _getBoundingSphereRadius_const(long _pointer_);

    /** 
    Tells the system to build the mesh relating to the surface into externally created buffers. **/
    public void build(org.ogre4j.IHardwareVertexBufferSharedPtr destVertexBuffer, int vertexStart, org.ogre4j.IHardwareIndexBufferSharedPtr destIndexBuffer, int indexStart) {
        _build__HardwareVertexBufferSharedPtrvivHardwareIndexBufferSharedPtrviv(this.object.pointer, destVertexBuffer.getInstancePointer().pointer,  vertexStart,  destIndexBuffer.getInstancePointer().pointer,  indexStart);
    }

    private native void _build__HardwareVertexBufferSharedPtrvivHardwareIndexBufferSharedPtrviv(long _pointer_, long destVertexBuffer, int vertexStart, long destIndexBuffer, int indexStart);

    /** 
    Alters the level of subdivision for this surface. **/
    public void setSubdivisionFactor(float factor) {
        _setSubdivisionFactor__Realv(this.object.pointer, factor);
    }

    private native void _setSubdivisionFactor__Realv(long _pointer_, float factor);

    /** 
    Gets the current level of subdivision. **/
    public float getSubdivisionFactor() {
         return _getSubdivisionFactor_const(this.object.pointer);
    }

    private native float _getSubdivisionFactor_const(long _pointer_);

    /** **/
    public VoidPointer getControlPointBuffer() {
         return new VoidPointer(new InstancePointer(_getControlPointBuffer_const(this.object.pointer)));
    }

    private native long _getControlPointBuffer_const(long _pointer_);

    /** 
    Convenience method for telling the patch that the control points have been deleted, since once the patch has been built they are not required. **/
    public void notifyControlPointBufferDeallocated() {
        _notifyControlPointBufferDeallocated(this.object.pointer);
    }

    private native void _notifyControlPointBufferDeallocated(long _pointer_);

}
