/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IRenderPriorityGroup extends INativeObject, org.ogre4j.ISceneCtlAllocatedObject {

    /** 
    Get the collection of basic solids currently queued, this includes all solids when there are no shadows, or all solids which have shadow receiving enabled when using modulative shadows, or all ambient passes of solids which have shadow receive enabled for additive shadows. **/
    public org.ogre4j.IQueuedRenderableCollection getSolidsBasic();

    /** 
    Get the collection of solids currently queued per light (only applicable in additive shadow modes). **/
    public org.ogre4j.IQueuedRenderableCollection getSolidsDiffuseSpecular();

    /** 
    Get the collection of solids currently queued for decal passes (only applicable in additive shadow modes). **/
    public org.ogre4j.IQueuedRenderableCollection getSolidsDecal();

    /** 
    Get the collection of solids for which shadow receipt is disabled (only applicable when shadows are enabled). **/
    public org.ogre4j.IQueuedRenderableCollection getSolidsNoShadowReceive();

    /** 
    Get the collection of transparent objects currently queued **/
    public org.ogre4j.IQueuedRenderableCollection getTransparentsUnsorted();

    /** 
    Get the collection of transparent objects currently queued **/
    public org.ogre4j.IQueuedRenderableCollection getTransparents();

    /** 
    Reset the organisation modes required for the solids in this group. **/
    public void resetOrganisationModes();

    /** 
    Add a required sorting / grouping mode for the solids in this group. **/
    public void addOrganisationMode(org.ogre4j.QueuedRenderableCollection.OrganisationMode om);

    /** 
    Set the sorting / grouping mode for the solids in this group to the default. **/
    public void defaultOrganisationMode();

    /** 
    Add a renderable to this group. **/
    public void addRenderable(org.ogre4j.IRenderable pRend, org.ogre4j.ITechnique pTech);

    /** 
    Sorts the objects which have been added to the queue; transparent objects by their depth in relation to the passed in . **/
    public void sort(org.ogre4j.ICamera cam);

    /** 
    Clears this group of renderables. **/
    public void clear();

    /** 
    Sets whether or not the queue will split passes by their lighting type, ie ambient, per-light and decal. **/
    public void setSplitPassesByLightingType(boolean split);

    /** 
    Sets whether or not passes which have shadow receive disabled should be separated. **/
    public void setSplitNoShadowPasses(boolean split);

    /** 
    Sets whether or not objects which cast shadows should be treated as never receiving shadows. **/
    public void setShadowCastersCannotBeReceivers(boolean ind);

}
