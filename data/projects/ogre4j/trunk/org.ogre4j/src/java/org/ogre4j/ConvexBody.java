/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class ConvexBody extends org.xbig.base.NativeObject implements org.ogre4j.IConvexBody {
static { System.loadLibrary("ogre4j");}
public static class PolygonList extends org.xbig.base.NativeObject implements org.ogre4j.IConvexBody.IPolygonList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public PolygonList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected PolygonList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public PolygonList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public PolygonList() {
         super( new org.xbig.base.InstancePointer(__createPolygonList()), false);
    }

    private native static long __createPolygonList();

    /** **/
    public void assign(int num, org.ogre4j.IPolygon val) {
        _assign__ivOgre_PolygonP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_PolygonP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IPolygon at(int loc) {
         return new org.ogre4j.Polygon(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IPolygon back() {
         return new org.ogre4j.Polygon(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IPolygon front() {
         return new org.ogre4j.Polygon(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IPolygon val) {
        _push_back__Ogre_PolygonP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_PolygonP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ConvexBody(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ConvexBody(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ConvexBody(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ConvexBody() {
         super( new org.xbig.base.InstancePointer(__createConvexBody()), false);
    }

    private native static long __createConvexBody();

    /** **/
    public ConvexBody(org.ogre4j.IConvexBody cpy) {
         super( new org.xbig.base.InstancePointer(__createConvexBody__ConvexBodyR( cpy.getInstancePointer().pointer)), false);
    }

    private native static long __createConvexBody__ConvexBodyR(long cpy);

    /** 
    Build a new polygon representation from a frustum. **/
    public void define(org.ogre4j.IFrustum frustum) {
        _define__FrustumR(this.object.pointer, frustum.getInstancePointer().pointer);
    }

    private native void _define__FrustumR(long _pointer_, long frustum);

    /** 
    Build a new polygon representation from an AAB. **/
    public void define(org.ogre4j.IAxisAlignedBox aab) {
        _define__AxisAlignedBoxR(this.object.pointer, aab.getInstancePointer().pointer);
    }

    private native void _define__AxisAlignedBoxR(long _pointer_, long aab);

    /** 
    Clips the body with a frustum. The resulting holes are filled with new polygons. **/
    public void clip(org.ogre4j.IFrustum frustum) {
        _clip__FrustumR(this.object.pointer, frustum.getInstancePointer().pointer);
    }

    private native void _clip__FrustumR(long _pointer_, long frustum);

    /** 
    Clips the body with an AAB. The resulting holes are filled with new polygons. **/
    public void clip(org.ogre4j.IAxisAlignedBox aab) {
        _clip__AxisAlignedBoxR(this.object.pointer, aab.getInstancePointer().pointer);
    }

    private native void _clip__AxisAlignedBoxR(long _pointer_, long aab);

    /** 
    Clips the body with another body. **/
    public void clip(org.ogre4j.IConvexBody body) {
        _clip__ConvexBodyR(this.object.pointer, body.getInstancePointer().pointer);
    }

    private native void _clip__ConvexBodyR(long _pointer_, long body);

    /** 
    Clips the object by the positive half space of a plane **/
    public void clip(org.ogre4j.IPlane pl, boolean keepNegative) {
        _clip__PlaneRbv(this.object.pointer, pl.getInstancePointer().pointer,  keepNegative);
    }

    private native void _clip__PlaneRbv(long _pointer_, long pl, boolean keepNegative);

    /** 
    Extends the existing body to incorporate the passed in point as a convex hull. **/
    public void extend(org.ogre4j.IVector3 pt) {
        _extend__Vector3R(this.object.pointer, pt.getInstancePointer().pointer);
    }

    private native void _extend__Vector3R(long _pointer_, long pt);

    /** 
    Resets the object. **/
    public void reset() {
        _reset(this.object.pointer);
    }

    private native void _reset(long _pointer_);

    /** 
    Returns the current number of polygons. **/
    public int getPolygonCount() {
         return _getPolygonCount_const(this.object.pointer);
    }

    private native int _getPolygonCount_const(long _pointer_);

    /** 
    Returns the number of vertices for a polygon **/
    public int getVertexCount(int poly) {
         return _getVertexCount__iv_const(this.object.pointer, poly);
    }

    private native int _getVertexCount__iv_const(long _pointer_, int poly);

    /** 
    Returns a polygon. **/
    public org.ogre4j.IPolygon getPolygon(int poly) {
         return new org.ogre4j.Polygon(new InstancePointer(_getPolygon__iv_const(this.object.pointer, poly)));
    }

    private native long _getPolygon__iv_const(long _pointer_, int poly);

    /** 
    Returns a specific vertex of a polygon. **/
    public org.ogre4j.IVector3 getVertex(int poly, int vertex) {
         return new org.ogre4j.Vector3(new InstancePointer(_getVertex__iviv_const(this.object.pointer, poly,  vertex)));
    }

    private native long _getVertex__iviv_const(long _pointer_, int poly, int vertex);

    /** 
    Returns the normal of a specified polygon. **/
    public org.ogre4j.IVector3 getNormal(int poly) {
         return new org.ogre4j.Vector3(new InstancePointer(_getNormal__iv(this.object.pointer, poly)));
    }

    private native long _getNormal__iv(long _pointer_, int poly);

    /** 
    Returns an AABB representation. **/
    public void getAABB(org.ogre4j.IAxisAlignedBox returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getAABB_const(this.object.pointer)), false);
    }

    private native long _getAABB_const(long _pointer_);

    /** 
    Checks if the body has a closed hull. **/
    public boolean hasClosedHull() {
         return _hasClosedHull_const(this.object.pointer);
    }

    private native boolean _hasClosedHull_const(long _pointer_);

    /** 
    Merges all neighboring polygons into one single polygon if they are lay in the same plane. **/
    public void mergePolygons() {
        _mergePolygons(this.object.pointer);
    }

    private native void _mergePolygons(long _pointer_);

    /** 
    Determines if the current object is equal to the compared one. **/
    public boolean operatorEqual(org.ogre4j.IConvexBody rhs) {
         return _operatorEqual__ConvexBodyR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__ConvexBodyR_const(long _pointer_, long rhs);

    /** 
    Determines if the current object is not equal to the compared one. **/
    public boolean operatorNotEqual(org.ogre4j.IConvexBody rhs) {
         return _operatorNotEqual__ConvexBodyR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__ConvexBodyR_const(long _pointer_, long rhs);

    /** 
     details of this body **/
    public void logInfo() {
        _logInfo_const(this.object.pointer);
    }

    private native void _logInfo_const(long _pointer_);

    /** **/
    public static void _initialisePool() {
        __initialisePool();
    }

    private native static void __initialisePool();

    /** **/
    public static void _destroyPool() {
        __destroyPool();
    }

    private native static void __destroyPool();

}
