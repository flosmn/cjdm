/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ICompositionTargetPass extends INativeObject, org.ogre4j.IResourceAllocatedObject {

public interface IPasses extends INativeObject, org.std.Ivector< org.ogre4j.ICompositionPass > {

    /** **/
    public void assign(int num, org.ogre4j.ICompositionPass val);

    /** **/
    public org.ogre4j.ICompositionPass at(int loc);

    /** **/
    public org.ogre4j.ICompositionPass back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ICompositionPass front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ICompositionPass val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IPassIterator extends INativeObject, org.ogre4j.IVectorIterator< org.ogre4j.ICompositionTargetPass.IPasses > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.ICompositionPass getNext();

    /** **/
    public org.ogre4j.ICompositionPass peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.ICompositionPass> peekNextPtr();

    /** **/
    public void moveNext();

}
    /** 
    Set input mode of this TargetPass **/
    public void setInputMode(org.ogre4j.CompositionTargetPass.InputMode mode);

    /** 
    Get input mode **/
    public org.ogre4j.CompositionTargetPass.InputMode getInputMode();

    /** 
    Set output local texture name **/
    public void setOutputName(String out);

    /** 
    Get output local texture name **/
    public String getOutputName();

    /** 
    Set "only initial" flag. This makes that this target pass is only executed initially after the effect has been enabled. **/
    public void setOnlyInitial(boolean value);

    /** 
    Get "only initial" flag. **/
    public boolean getOnlyInitial();

    /** 
    Set the scene visibility mask used by this pass **/
    public void setVisibilityMask(long mask);

    /** 
    Get the scene visibility mask used by this pass **/
    public long getVisibilityMask();

    /** 
    Set the material scheme used by this target pass. **/
    public void setMaterialScheme(String schemeName);

    /** 
    Get the material scheme used by this target pass. **/
    public String getMaterialScheme();

    /** 
    Set whether shadows are enabled in this target pass. **/
    public void setShadowsEnabled(boolean enabled);

    /** 
    Get whether shadows are enabled in this target pass. **/
    public boolean getShadowsEnabled();

    /** 
    Set the scene LOD bias used by this pass. The default is 1.0, everything below that means lower quality, higher means higher quality. **/
    public void setLodBias(float bias);

    /** 
    Get the scene LOD bias used by this pass **/
    public float getLodBias();

    /** 
    Create a new pass, and return a pointer to it. **/
    public org.ogre4j.ICompositionPass createPass();

    /** 
    Remove a pass. It will also be destroyed. **/
    public void removePass(int idx);

    /** 
    Get a pass. **/
    public org.ogre4j.ICompositionPass getPass(int idx);

    /** 
    Get the number of passes. **/
    public int getNumPasses();

    /** 
    Remove all passes **/
    public void removeAllPasses();

    /** 
    Get an iterator over the Passes in this TargetPass. **/
    public void getPassIterator(org.ogre4j.ICompositionTargetPass.IPassIterator returnValue);

    /** 
    Get parent object **/
    public org.ogre4j.ICompositionTechnique getParent();

    /** 
    Determine if this target pass is supported on the current rendering device. **/
    public boolean _isSupported();

}
