/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ISceneManagerEnumerator extends INativeObject, org.ogre4j.ISceneCtlAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.ISceneManagerEnumerator > {

public interface IInstances extends INativeObject, org.std.Imap< String, org.ogre4j.ISceneManager > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public org.ogre4j.ISceneManager get(String key);

    /** **/
    public void insert(String key, org.ogre4j.ISceneManager value);

}
public interface IMetaDataList extends INativeObject, org.std.Ivector< org.ogre4j.ISceneManagerMetaData > {

    /** **/
    public void assign(int num, org.ogre4j.ISceneManagerMetaData val);

    /** **/
    public org.ogre4j.ISceneManagerMetaData at(int loc);

    /** **/
    public org.ogre4j.ISceneManagerMetaData back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ISceneManagerMetaData front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.ISceneManagerMetaData val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IMetaDataIterator extends INativeObject, org.ogre4j.IConstVectorIterator< org.ogre4j.ISceneManagerEnumerator.IMetaDataList > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.ISceneManagerMetaData getNext();

    /** **/
    public org.ogre4j.ISceneManagerMetaData peekNext();

    /** **/
    public NativeObjectPointer<org.ogre4j.ISceneManagerMetaData> peekNextPtr();

    /** **/
    public void moveNext();

}
public interface ISceneManagerIterator extends INativeObject, org.ogre4j.IMapIterator< org.ogre4j.ISceneManagerEnumerator.IInstances > {

    /** **/
    public boolean hasMoreElements();

    /** **/
    public org.ogre4j.ISceneManager getNext();

    /** **/
    public org.ogre4j.ISceneManager peekNextValue();

    /** **/
    public String peekNextKey();

    /** **/
    public org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator operatorAssignment(org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.ISceneManager> peekNextValuePtr();

    /** **/
    public void moveNext();

}
public interface IFactories extends INativeObject, org.std.Ilist< org.ogre4j.ISceneManagerFactory > {

    /** **/
    public void assign(int num, org.ogre4j.ISceneManagerFactory val);

    /** **/
    public org.ogre4j.ISceneManagerFactory back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.ISceneManagerFactory front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.ISceneManagerFactory val);

    /** **/
    public void push_front(org.ogre4j.ISceneManagerFactory val);

    /** **/
    public void remove(org.ogre4j.ISceneManagerFactory val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
    /** 
    Register a new . **/
    public void addFactory(org.ogre4j.ISceneManagerFactory fact);

    /** 
    Remove a . **/
    public void removeFactory(org.ogre4j.ISceneManagerFactory fact);

    /** 
    Get more information about a given type of . **/
    public org.ogre4j.ISceneManagerMetaData getMetaData(String typeName);

    /** 
    Iterate over all types of  available for construction, providing some information about each one. **/
    public void getMetaDataIterator(org.ogre4j.ISceneManagerEnumerator.IMetaDataIterator returnValue);

    /** 
    Create a  instance of a given type. **/
    public org.ogre4j.ISceneManager createSceneManager(String typeName, String instanceName);

    /** 
    Create a  instance based on scene type support. **/
    public org.ogre4j.ISceneManager createSceneManager(int typeMask, String instanceName);

    /** 
    Destroy an instance of a . **/
    public void destroySceneManager(org.ogre4j.ISceneManager sm);

    /** 
    Get an existing  instance that has already been created, identified by the instance name. **/
    public org.ogre4j.ISceneManager getSceneManager(String instanceName);

    /** 
    Get an iterator over all the existing  instances. **/
    public void getSceneManagerIterator(org.ogre4j.ISceneManagerEnumerator.ISceneManagerIterator returnValue);

    /** 
    Notifies all SceneManagers of the destination rendering system. **/
    public void setRenderSystem(org.ogre4j.IRenderSystem rs);

    /** **/
    public void shutdownAll();

}
