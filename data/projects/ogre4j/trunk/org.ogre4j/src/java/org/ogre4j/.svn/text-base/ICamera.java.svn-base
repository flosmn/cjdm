/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface ICamera extends INativeObject, org.ogre4j.IFrustum {

    /** 
    Returns a pointer to the  this camera is rendering through. **/
    public org.ogre4j.ISceneManager getSceneManager();

    /** 
    Gets the camera's name. **/
    public String getName();

    /** 
    Sets the level of rendering detail required from this camera. **/
    public void setPolygonMode(org.ogre4j.PolygonMode sd);

    /** 
    Retrieves the level of detail that the camera will render. **/
    public org.ogre4j.PolygonMode getPolygonMode();

    /** 
    Sets the camera's position. **/
    public void setPosition(float x, float y, float z);

    /** 
    Sets the camera's position. **/
    public void setPosition(org.ogre4j.IVector3 vec);

    /** 
    Retrieves the camera's position. **/
    public org.ogre4j.IVector3 getPosition();

    /** 
    Moves the camera's position by the vector offset provided along world axes. **/
    public void move(org.ogre4j.IVector3 vec);

    /** 
    Moves the camera's position by the vector offset provided along it's own axes (relative to orientation). **/
    public void moveRelative(org.ogre4j.IVector3 vec);

    /** 
    Sets the camera's direction vector. **/
    public void setDirection(float x, float y, float z);

    /** 
    Sets the camera's direction vector. **/
    public void setDirection(org.ogre4j.IVector3 vec);

    /** **/
    public void getDirection(org.ogre4j.IVector3 returnValue);

    /** 
    Gets the camera's up vector. **/
    public void getUp(org.ogre4j.IVector3 returnValue);

    /** 
    Gets the camera's right vector. **/
    public void getRight(org.ogre4j.IVector3 returnValue);

    /** 
    Points the camera at a location in worldspace. **/
    public void lookAt(org.ogre4j.IVector3 targetPoint);

    /** 
    Points the camera at a location in worldspace. **/
    public void lookAt(float x, float y, float z);

    /** 
    Rolls the camera anticlockwise, around its local z axis. **/
    public void roll(org.ogre4j.IRadian angle);

    /** 
    Rotates the camera anticlockwise around it's local y axis. **/
    public void yaw(org.ogre4j.IRadian angle);

    /** 
    Pitches the camera up/down anticlockwise around it's local z axis. **/
    public void pitch(org.ogre4j.IRadian angle);

    /** 
    Rotate the camera around an arbitrary axis. **/
    public void rotate(org.ogre4j.IVector3 axis, org.ogre4j.IRadian angle);

    /** 
    Rotate the camera around an arbitrary axis using a . **/
    public void rotate(org.ogre4j.IQuaternion q);

    /** 
    Tells the camera whether to yaw around it's own local Y axis or a fixed axis of choice. **/
    public void setFixedYawAxis(boolean useFixed, org.ogre4j.IVector3 fixedAxis);

    /** 
    Returns the camera's current orientation. **/
    public org.ogre4j.IQuaternion getOrientation();

    /** 
    Sets the camera's orientation. **/
    public void setOrientation(org.ogre4j.IQuaternion q);

    /** 
    Tells the  to contact the  to render from it's viewpoint. **/
    public void _renderScene(org.ogre4j.IViewport vp, boolean includeOverlays);

    /** 
    Internal method to notify camera of the visible faces in the last render. **/
    public void _notifyRenderedFaces(long numfaces);

    /** 
    Internal method to notify camera of the visible batches in the last render. **/
    public void _notifyRenderedBatches(long numbatches);

    /** 
    Internal method to retrieve the number of visible faces in the last render. **/
    public long _getNumRenderedFaces();

    /** 
    Internal method to retrieve the number of visible batches in the last render. **/
    public long _getNumRenderedBatches();

    /** 
    Gets the derived orientation of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public org.ogre4j.IQuaternion getDerivedOrientation();

    /** 
    Gets the derived position of the camera, including any translation inherited from a node attachment and reflection matrix. **/
    public org.ogre4j.IVector3 getDerivedPosition();

    /** 
    Gets the derived direction vector of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public void getDerivedDirection(org.ogre4j.IVector3 returnValue);

    /** 
    Gets the derived up vector of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public void getDerivedUp(org.ogre4j.IVector3 returnValue);

    /** 
    Gets the derived right vector of the camera, including any rotation inherited from a node attachment and reflection matrix. **/
    public void getDerivedRight(org.ogre4j.IVector3 returnValue);

    /** 
    Gets the real world orientation of the camera, including any rotation inherited from a node attachment **/
    public org.ogre4j.IQuaternion getRealOrientation();

    /** 
    Gets the real world position of the camera, including any translation inherited from a node attachment. **/
    public org.ogre4j.IVector3 getRealPosition();

    /** 
    Gets the real world direction vector of the camera, including any rotation inherited from a node attachment. **/
    public void getRealDirection(org.ogre4j.IVector3 returnValue);

    /** 
    Gets the real world up vector of the camera, including any rotation inherited from a node attachment. **/
    public void getRealUp(org.ogre4j.IVector3 returnValue);

    /** 
    Gets the real world right vector of the camera, including any rotation inherited from a node attachment. **/
    public void getRealRight(org.ogre4j.IVector3 returnValue);

    /** 
    Overridden from **/
    public String getMovableType();

    /** 
    Enables / disables automatic tracking of a . **/
    public void setAutoTracking(boolean enabled, org.ogre4j.ISceneNode target, org.ogre4j.IVector3 offset);

    /** 
    Sets the level-of-detail factor for this . **/
    public void setLodBias(float factor);

    /** 
    Returns the level-of-detail bias factor currently applied to this camera. **/
    public float getLodBias();

    /** 
    Get a pointer to the camera which should be used to determine LOD settings. **/
    public void setLodCamera(org.ogre4j.ICamera lodCam);

    /** 
    Get a pointer to the camera which should be used to determine LOD settings. **/
    public org.ogre4j.ICamera getLodCamera();

    /** 
    Gets a world space ray as cast from the camera through a viewport position. **/
    public void getCameraToViewportRay(org.ogre4j.IRay returnValue, float screenx, float screeny);

    /** 
    Gets a world space ray as cast from the camera through a viewport position. **/
    public void getCameraToViewportRay(float screenx, float screeny, org.ogre4j.IRay outRay);

    /** 
    Gets a world-space list of planes enclosing a volume based on a viewport rectangle. **/
    public void getCameraToViewportBoxVolume(org.ogre4j.IPlaneBoundedVolume returnValue, float screenLeft, float screenTop, float screenRight, float screenBottom, boolean includeFarPlane);

    /** 
    Gets a world-space list of planes enclosing a volume based on a viewport rectangle. **/
    public void getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, org.ogre4j.IPlaneBoundedVolume outVolume, boolean includeFarPlane);

    /** 
    Internal method for OGRE to use for LOD calculations. **/
    public float _getLodBiasInverse();

    /** 
    Internal method used by OGRE to update auto-tracking cameras. **/
    public void _autoTrack();

    /** 
    Sets the viewing window inside of viewport. **/
    public void setWindow(float Left, float Top, float Right, float Bottom);

    /** **/
    public void resetWindow();

    /** **/
    public boolean isWindowSet();

    /** **/
    public void getWindowPlanes(org.std.Ivector< org.ogre4j.IPlane > returnValue);

    /** 
    Overridden from **/
    public float getBoundingRadius();

    /** 
    Get the auto tracking target for this camera, if any. **/
    public org.ogre4j.ISceneNode getAutoTrackTarget();

    /** 
    Get the auto tracking offset for this camera, if it is auto tracking. **/
    public org.ogre4j.IVector3 getAutoTrackOffset();

    /** 
    Get the last viewport which was attached to this camera. **/
    public org.ogre4j.IViewport getViewport();

    /** 
    Notifies this camera that a viewport is using it. **/
    public void _notifyViewport(org.ogre4j.IViewport viewport);

    /** 
    If set to true a viewport that owns this frustum will be able to recalculate the aspect ratio whenever the frustum is resized. **/
    public void setAutoAspectRatio(boolean autoratio);

    /** 
    Retrieves if AutoAspectRatio is currently set or not **/
    public boolean getAutoAspectRatio();

    /** 
    Tells the camera to use a separate  instance to perform culling. **/
    public void setCullingFrustum(org.ogre4j.IFrustum frustum);

    /** 
    Returns the custom culling frustum in use. **/
    public org.ogre4j.IFrustum getCullingFrustum();

    /** 
    Forward projects frustum rays to find forward intersection with plane. **/
    public void forwardIntersect(org.ogre4j.IPlane worldPlane, org.std.Ivector< org.ogre4j.IVector4 > intersect3d);

    /** **/
    public boolean isVisible(org.ogre4j.IAxisAlignedBox bound, EnumPointer < org.ogre4j.FrustumPlane > culledBy);

    /** **/
    public boolean isVisible(org.ogre4j.ISphere bound, EnumPointer < org.ogre4j.FrustumPlane > culledBy);

    /** **/
    public boolean isVisible(org.ogre4j.IVector3 vert, EnumPointer < org.ogre4j.FrustumPlane > culledBy);

    /** **/
    public org.ogre4j.IVector3 getWorldSpaceCorners();

    /** **/
    public org.ogre4j.IPlane getFrustumPlane(int plane);

    /** **/
    public boolean projectSphere(org.ogre4j.ISphere sphere, FloatPointer left, FloatPointer top, FloatPointer right, FloatPointer bottom);

    /** **/
    public float getNearClipDistance();

    /** **/
    public float getFarClipDistance();

    /** **/
    public org.ogre4j.IMatrix4 getViewMatrix();

    /** 
    Specialised version of getViewMatrix allowing caller to differentiate whether the custom culling frustum should be allowed or not. **/
    public org.ogre4j.IMatrix4 getViewMatrix(boolean ownFrustumOnly);

    /** 
    Set whether this camera should use the 'rendering distance' on objects to exclude distant objects from the final image. The default behaviour is to use it. **/
    public void setUseRenderingDistance(boolean use);

    /** 
    Get whether this camera should use the 'rendering distance' on objects to exclude distant objects from the final image. **/
    public boolean getUseRenderingDistance();

    /** 
    Synchronise core camera settings with another. **/
    public void synchroniseBaseSettingsWith(org.ogre4j.ICamera cam);

    /** 
    Get the derived position of this frustum. **/
    public org.ogre4j.IVector3 getPositionForViewUpdate();

    /** 
    Get the derived orientation of this frustum. **/
    public org.ogre4j.IQuaternion getOrientationForViewUpdate();

}
