/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class InstancedGeometry extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry {
static { System.loadLibrary("ogre4j");}
public static class BatchInstance extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IBatchInstance {
static { System.loadLibrary("ogre4j");}
public static class LODBucketList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IBatchInstance.ILODBucketList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LODBucketList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LODBucketList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LODBucketList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LODBucketList() {
         super( new org.xbig.base.InstancePointer(__createLODBucketList()), false);
    }

    private native static long __createLODBucketList();

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.ILODBucket val) {
        _assign__ivOgre_InstancedGeometry_LODBucketP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_InstancedGeometry_LODBucketP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket at(int loc) {
         return new org.ogre4j.InstancedGeometry.LODBucket(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket back() {
         return new org.ogre4j.InstancedGeometry.LODBucket(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket front() {
         return new org.ogre4j.InstancedGeometry.LODBucket(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.ILODBucket val) {
        _push_back__Ogre_InstancedGeometry_LODBucketP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_InstancedGeometry_LODBucketP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class ObjectsMap extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IBatchInstance.IObjectsMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public ObjectsMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected ObjectsMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public ObjectsMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public ObjectsMap() {
         super( new org.xbig.base.InstancePointer(__createObjectsMap()), false);
    }

    private native static long __createObjectsMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__iR(this.object.pointer, key);
    }

    private native int _count__iR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__iR(this.object.pointer, key);
    }

    private native int _erase__iR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject get(int key) {
         return new org.ogre4j.InstancedGeometry.InstancedObject(new InstancePointer(_get__iR(this.object.pointer, key)));
    }

    private native long _get__iR(long _pointer_, int key);

    /** **/
    public void insert(int key, org.ogre4j.IInstancedGeometry.IInstancedObject value) {
        _insert__iROgre_InstancedGeometry_InstancedObjectp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__iROgre_InstancedGeometry_InstancedObjectp(long _pointer_, int key, long value);

}
public static class InstancedObjectIterator extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IBatchInstance.IInstancedObjectIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public InstancedObjectIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected InstancedObjectIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public InstancedObjectIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public InstancedObjectIterator(org.ogre4j.IInstancedGeometry.IBatchInstance.IObjectsMap c) {
         super( new org.xbig.base.InstancePointer(__createInstancedObjectIterator__Ogre_InstancedGeometry_BatchInstance_ObjectsMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createInstancedObjectIterator__Ogre_InstancedGeometry_BatchInstance_ObjectsMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject getNext() {
         return new org.ogre4j.InstancedGeometry.InstancedObject(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject peekNextValue() {
         return new org.ogre4j.InstancedGeometry.InstancedObject(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public int peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native int _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance.IInstancedObjectIterator operatorAssignment(org.ogre4j.IInstancedGeometry.IBatchInstance.IInstancedObjectIterator rhs) {
         return new org.ogre4j.InstancedGeometry.BatchInstance.InstancedObjectIterator(new InstancePointer(_operatorAssignment___Ogre_InstancedGeometry_BatchInstance_InstancedObjectIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_InstancedGeometry_BatchInstance_InstancedObjectIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IInstancedObject> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IInstancedGeometry.IInstancedObject>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
public static class LODIterator extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IBatchInstance.ILODIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LODIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LODIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LODIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LODIterator(org.ogre4j.IInstancedGeometry.IBatchInstance.ILODBucketList c) {
         super( new org.xbig.base.InstancePointer(__createLODIterator__Ogre_InstancedGeometry_BatchInstance_LODBucketListr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createLODIterator__Ogre_InstancedGeometry_BatchInstance_LODBucketListr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket getNext() {
         return new org.ogre4j.InstancedGeometry.LODBucket(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket peekNext() {
         return new org.ogre4j.InstancedGeometry.LODBucket(new InstancePointer(_peekNext(this.object.pointer)));
    }

    private native long _peekNext(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.ILODBucket> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.IInstancedGeometry.ILODBucket>(new InstancePointer(_peekNextPtr(this.object.pointer)));
    }

    private native long _peekNextPtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public BatchInstance(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected BatchInstance(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public BatchInstance(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public BatchInstance(org.ogre4j.IInstancedGeometry parent, String name, org.ogre4j.ISceneManager mgr, long BatchInstanceID) {
         super( new org.xbig.base.InstancePointer(__createBatchInstance__InstancedGeometrypStringRSceneManagerpuint32v( parent.getInstancePointer().pointer,  name,  mgr.getInstancePointer().pointer,  BatchInstanceID)), false);
    }

    private native static long __createBatchInstance__InstancedGeometrypStringRSceneManagerpuint32v(long parent, String name, long mgr, long BatchInstanceID);

    /** **/
    public org.ogre4j.IInstancedGeometry getParent() {
         return new org.ogre4j.InstancedGeometry(new InstancePointer(_getParent_const(this.object.pointer)));
    }

    private native long _getParent_const(long _pointer_);

    /** **/
    public void assign(org.ogre4j.IInstancedGeometry.IQueuedSubMesh qmesh) {
        _assign__QueuedSubMeshp(this.object.pointer, qmesh.getInstancePointer().pointer);
    }

    private native void _assign__QueuedSubMeshp(long _pointer_, long qmesh);

    /** **/
    public void build() {
        _build(this.object.pointer);
    }

    private native void _build(long _pointer_);

    /** **/
    public long getID() {
         return _getID_const(this.object.pointer);
    }

    private native long _getID_const(long _pointer_);

    /** **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** **/
    public void setBoundingBox(org.ogre4j.IAxisAlignedBox box) {
        _setBoundingBox__AxisAlignedBoxr(this.object.pointer, box.getInstancePointer().pointer);
    }

    private native void _setBoundingBox__AxisAlignedBoxr(long _pointer_, long box);

    /** **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** **/
    public void getLODIterator(org.ogre4j.IInstancedGeometry.IBatchInstance.ILODIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getLODIterator(this.object.pointer)), false);
    }

    private native long _getLODIterator(long _pointer_);

    /** **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** **/
    public void updateBoundingBox() {
        _updateBoundingBox(this.object.pointer);
    }

    private native void _updateBoundingBox(long _pointer_);

    /** **/
    public void dump(org.std.Iofstream of) {
        _dump__std_ofstreamr_const(this.object.pointer, of.getInstancePointer().pointer);
    }

    private native void _dump__std_ofstreamr_const(long _pointer_, long of);

    /** **/
    public void updateContainers(org.ogre4j.IInstancedGeometry.ILODBucket bucket) {
        _updateContainers__LODBucketp(this.object.pointer, bucket.getInstancePointer().pointer);
    }

    private native void _updateContainers__LODBucketp(long _pointer_, long bucket);

    /** **/
    public void attachToScene() {
        _attachToScene(this.object.pointer);
    }

    private native void _attachToScene(long _pointer_);

    /** **/
    public void addInstancedObject(int index, org.ogre4j.IInstancedGeometry.IInstancedObject object) {
        _addInstancedObject__ivInstancedObjectp(this.object.pointer, index,  object.getInstancePointer().pointer);
    }

    private native void _addInstancedObject__ivInstancedObjectp(long _pointer_, int index, long object);

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject isInstancedObjectPresent(int index) {
         return new org.ogre4j.InstancedGeometry.InstancedObject(new InstancePointer(_isInstancedObjectPresent__iv(this.object.pointer, index)));
    }

    private native long _isInstancedObjectPresent__iv(long _pointer_, int index);

    /** **/
    public void getObjectIterator(org.ogre4j.IInstancedGeometry.IBatchInstance.IInstancedObjectIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getObjectIterator(this.object.pointer)), false);
    }

    private native long _getObjectIterator(long _pointer_);

    /** **/
    public org.ogre4j.ISceneNode getSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getSceneNode(this.object.pointer)));
    }

    private native long _getSceneNode(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance.IObjectsMap getInstancesMap() {
         return new org.ogre4j.InstancedGeometry.BatchInstance.ObjectsMap(new InstancePointer(_getInstancesMap(this.object.pointer)));
    }

    private native long _getInstancesMap(long _pointer_);

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the name of this object. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been attached to a node. **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Get the 'type flags' for this . **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** 
    Create a reference-counted AnimableValuePtr for the named value. **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

    /** **/
    public void getmLodSquaredDistances(org.std.Ivector< Float > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getmLodSquaredDistances(this.object.pointer)), false);
    }

    private native long _getmLodSquaredDistances(long _pointer_);

    /** **/
    public void setmLodSquaredDistances(org.std.Ivector< Float > _jni_value_) {
        _setmLodSquaredDistances(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setmLodSquaredDistances(long _pointer_, long _jni_value_);

    /** **/
    public void getmAABB(org.ogre4j.IAxisAlignedBox returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getmAABB(this.object.pointer)), false);
    }

    private native long _getmAABB(long _pointer_);

    /** **/
    public void setmAABB(org.ogre4j.IAxisAlignedBox _jni_value_) {
        _setmAABB(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setmAABB(long _pointer_, long _jni_value_);

    /** **/
    public float getmBoundingRadius() {
         return _getmBoundingRadius(this.object.pointer);
    }

    private native float _getmBoundingRadius(long _pointer_);

    /** **/
    public void setmBoundingRadius(float _jni_value_) {
        _setmBoundingRadius(this.object.pointer, _jni_value_);
    }

    private native void _setmBoundingRadius(long _pointer_, float _jni_value_);

    /** **/
    public int getmCurrentLod() {
         return _getmCurrentLod(this.object.pointer);
    }

    private native int _getmCurrentLod(long _pointer_);

    /** **/
    public void setmCurrentLod(int _jni_value_) {
        _setmCurrentLod(this.object.pointer, _jni_value_);
    }

    private native void _setmCurrentLod(long _pointer_, int _jni_value_);

    /** **/
    public float getmCamDistanceSquared() {
         return _getmCamDistanceSquared(this.object.pointer);
    }

    private native float _getmCamDistanceSquared(long _pointer_);

    /** **/
    public void setmCamDistanceSquared(float _jni_value_) {
        _setmCamDistanceSquared(this.object.pointer, _jni_value_);
    }

    private native void _setmCamDistanceSquared(long _pointer_, float _jni_value_);

}
public static class GeometryBucket extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IGeometryBucket {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GeometryBucket(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GeometryBucket(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GeometryBucket(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public GeometryBucket(org.ogre4j.IInstancedGeometry.IMaterialBucket parent, String formatString, org.ogre4j.IVertexData vData, org.ogre4j.IIndexData iData) {
         super( new org.xbig.base.InstancePointer(__createGeometryBucket__MaterialBucketpStringRVertexDataPIndexDataP( parent.getInstancePointer().pointer,  formatString,  vData.getInstancePointer().pointer,  iData.getInstancePointer().pointer)), false);
    }

    private native static long __createGeometryBucket__MaterialBucketpStringRVertexDataPIndexDataP(long parent, String formatString, long vData, long iData);

    /** **/
    public GeometryBucket(org.ogre4j.IInstancedGeometry.IMaterialBucket parent, String formatString, org.ogre4j.IInstancedGeometry.IGeometryBucket bucket) {
         super( new org.xbig.base.InstancePointer(__createGeometryBucket__MaterialBucketpStringRGeometryBucketp( parent.getInstancePointer().pointer,  formatString,  bucket.getInstancePointer().pointer)), false);
    }

    private native static long __createGeometryBucket__MaterialBucketpStringRGeometryBucketp(long parent, String formatString, long bucket);

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket getParent() {
         return new org.ogre4j.InstancedGeometry.MaterialBucket(new InstancePointer(_getParent(this.object.pointer)));
    }

    private native long _getParent(long _pointer_);

    /** **/
    public float getBoundingRadius() {
         return _getBoundingRadius_const(this.object.pointer);
    }

    private native float _getBoundingRadius_const(long _pointer_);

    /** **/
    public org.ogre4j.IVertexData getVertexData() {
         return new org.ogre4j.VertexData(new InstancePointer(_getVertexData_const(this.object.pointer)));
    }

    private native long _getVertexData_const(long _pointer_);

    /** **/
    public org.ogre4j.IIndexData getIndexData() {
         return new org.ogre4j.IndexData(new InstancePointer(_getIndexData_const(this.object.pointer)));
    }

    private native long _getIndexData_const(long _pointer_);

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** **/
    public org.ogre4j.ITechnique getTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getTechnique_const(this.object.pointer)));
    }

    private native long _getTechnique_const(long _pointer_);

    /** **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 xform) {
        _getWorldTransforms__Matrix4p_const(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void _getWorldTransforms__Matrix4p_const(long _pointer_, long xform);

    /** **/
    public int getNumWorldTransforms() {
         return _getNumWorldTransforms_const(this.object.pointer);
    }

    private native int _getNumWorldTransforms_const(long _pointer_);

    /** **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam) {
         return _getSquaredViewDepth__CameraP_const(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native float _getSquaredViewDepth__CameraP_const(long _pointer_, long cam);

    /** **/
    public org.ogre4j.ILightList getLights() {
         return new org.ogre4j.LightList(new InstancePointer(_getLights_const(this.object.pointer)));
    }

    private native long _getLights_const(long _pointer_);

    /** **/
    public boolean getCastsShadows() {
         return _getCastsShadows_const(this.object.pointer);
    }

    private native boolean _getCastsShadows_const(long _pointer_);

    /** **/
    public String getFormatString() {
         return _getFormatString_const(this.object.pointer);
    }

    private native String _getFormatString_const(long _pointer_);

    /** 
    Try to assign geometry to this bucket. **/
    public boolean assign(org.ogre4j.IInstancedGeometry.IQueuedGeometry qsm) {
         return _assign__QueuedGeometryp(this.object.pointer, qsm.getInstancePointer().pointer);
    }

    private native boolean _assign__QueuedGeometryp(long _pointer_, long qsm);

    /** **/
    public void build() {
        _build(this.object.pointer);
    }

    private native void _build(long _pointer_);

    /** **/
    public void dump(org.std.Iofstream of) {
        _dump__std_ofstreamr_const(this.object.pointer, of.getInstancePointer().pointer);
    }

    private native void _dump__std_ofstreamr_const(long _pointer_, long of);

    /** **/
    public org.ogre4j.IAxisAlignedBox getAABB() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getAABB(this.object.pointer)));
    }

    private native long _getAABB(long _pointer_);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** **/
    public void setMaterial(String matName) {
        _setMaterial__StringR(this.object.pointer, matName);
    }

    private native void _setMaterial__StringR(long _pointer_, String matName);

    /** **/
    public void setRenderOperation(org.ogre4j.IRenderOperation rend) {
        _setRenderOperation__RenderOperationR(this.object.pointer, rend.getInstancePointer().pointer);
    }

    private native void _setRenderOperation__RenderOperationR(long _pointer_, long rend);

    /** **/
    public void getRenderOperation(org.ogre4j.IRenderOperation op) {
        _getRenderOperation__RenderOperationr(this.object.pointer, op.getInstancePointer().pointer);
    }

    private native void _getRenderOperation__RenderOperationr(long _pointer_, long op);

    /** **/
    public void setWorldTransform(org.ogre4j.IMatrix4 xform) {
        _setWorldTransform__Matrix4R(this.object.pointer, xform.getInstancePointer().pointer);
    }

    private native void _setWorldTransform__Matrix4R(long _pointer_, long xform);

    /** **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam) {
        __notifyCurrentCamera__Camerap(this.object.pointer, cam.getInstancePointer().pointer);
    }

    private native void __notifyCurrentCamera__Camerap(long _pointer_, long cam);

    /** **/
    public void setBoundingBox(org.ogre4j.IAxisAlignedBox box) {
        _setBoundingBox__AxisAlignedBoxR(this.object.pointer, box.getInstancePointer().pointer);
    }

    private native void _setBoundingBox__AxisAlignedBoxR(long _pointer_, long box);

    /** **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getBoundingBox_const(this.object.pointer)));
    }

    private native long _getBoundingBox_const(long _pointer_);

    /** **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue queue) {
        __updateRenderQueue__RenderQueuep(this.object.pointer, queue.getInstancePointer().pointer);
    }

    private native void __updateRenderQueue__RenderQueuep(long _pointer_, long queue);

    /** 
    Overridden from **/
    public String getMovableType() {
         return _getMovableType_const(this.object.pointer);
    }

    private native String _getMovableType_const(long _pointer_);

    /** 
    Notify the object of it's creator (internal use only) **/
    public void _notifyCreator(org.ogre4j.IMovableObjectFactory fact) {
        __notifyCreator__MovableObjectFactoryp(this.object.pointer, fact.getInstancePointer().pointer);
    }

    private native void __notifyCreator__MovableObjectFactoryp(long _pointer_, long fact);

    /** 
    Get the creator of this object, if any (internal use only) **/
    public org.ogre4j.IMovableObjectFactory _getCreator() {
         return new org.ogre4j.MovableObjectFactory(new InstancePointer(__getCreator_const(this.object.pointer)));
    }

    private native long __getCreator_const(long _pointer_);

    /** 
    Notify the object of it's manager (internal use only) **/
    public void _notifyManager(org.ogre4j.ISceneManager man) {
        __notifyManager__SceneManagerp(this.object.pointer, man.getInstancePointer().pointer);
    }

    private native void __notifyManager__SceneManagerp(long _pointer_, long man);

    /** 
    Get the manager of this object, if any (internal use only) **/
    public org.ogre4j.ISceneManager _getManager() {
         return new org.ogre4j.SceneManager(new InstancePointer(__getManager_const(this.object.pointer)));
    }

    private native long __getManager_const(long _pointer_);

    /** 
    Returns the name of this object. **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Returns the node to which this object is attached. **/
    public org.ogre4j.INode getParentNode() {
         return new org.ogre4j.Node(new InstancePointer(_getParentNode_const(this.object.pointer)));
    }

    private native long _getParentNode_const(long _pointer_);

    /** 
    Returns the scene node to which this object is attached. **/
    public org.ogre4j.ISceneNode getParentSceneNode() {
         return new org.ogre4j.SceneNode(new InstancePointer(_getParentSceneNode_const(this.object.pointer)));
    }

    private native long _getParentSceneNode_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been attached to a node. **/
    public void _notifyAttached(org.ogre4j.INode parent, boolean isTagPoint) {
        __notifyAttached__Nodepbv(this.object.pointer, parent.getInstancePointer().pointer,  isTagPoint);
    }

    private native void __notifyAttached__Nodepbv(long _pointer_, long parent, boolean isTagPoint);

    /** 
    Returns true if this object is attached to a  or . **/
    public boolean isAttached() {
         return _isAttached_const(this.object.pointer);
    }

    private native boolean _isAttached_const(long _pointer_);

    /** 
    Detaches an object from a parent  or , if attached. **/
    public void detatchFromParent() {
        _detatchFromParent(this.object.pointer);
    }

    private native void _detatchFromParent(long _pointer_);

    /** 
    Returns true if this object is attached to a  or , and this  /  is currently in an active part of the scene graph. **/
    public boolean isInScene() {
         return _isInScene_const(this.object.pointer);
    }

    private native boolean _isInScene_const(long _pointer_);

    /** 
    Internal method called to notify the object that it has been moved. **/
    public void _notifyMoved() {
        __notifyMoved(this.object.pointer);
    }

    private native void __notifyMoved(long _pointer_);

    /** 
    Retrieves the axis-aligned bounding box for this object in world coordinates. **/
    public org.ogre4j.IAxisAlignedBox getWorldBoundingBox(boolean derive) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getWorldBoundingBox__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingBox__bv_const(long _pointer_, boolean derive);

    /** 
    Retrieves the worldspace bounding sphere for this object. **/
    public org.ogre4j.ISphere getWorldBoundingSphere(boolean derive) {
         return new org.ogre4j.Sphere(new InstancePointer(_getWorldBoundingSphere__bv_const(this.object.pointer, derive)));
    }

    private native long _getWorldBoundingSphere__bv_const(long _pointer_, boolean derive);

    /** 
    Tells this object whether to be visible or not, if it has a renderable component. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Gets this object whether to be visible or not, if it has a renderable component. **/
    public boolean getVisible() {
         return _getVisible_const(this.object.pointer);
    }

    private native boolean _getVisible_const(long _pointer_);

    /** 
    Returns whether or not this object is supposed to be visible or not. **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets the distance at which the object is no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Call this to associate your own custom user object instance with this . **/
    public void setUserObject(org.ogre4j.IUserDefinedObject obj) {
        _setUserObject__UserDefinedObjectp(this.object.pointer, obj.getInstancePointer().pointer);
    }

    private native void _setUserObject__UserDefinedObjectp(long _pointer_, long obj);

    /** 
    Retrieves a pointer to a custom application object associated with this movable by an earlier call to setUserObject. **/
    public org.ogre4j.IUserDefinedObject getUserObject() {
         return new org.ogre4j.UserDefinedObject(new InstancePointer(_getUserObject(this.object.pointer)));
    }

    private native long _getUserObject(long _pointer_);

    /** 
    Sets any kind of user value on this object. **/
    public void setUserAny(org.ogre4j.IAny anything) {
        _setUserAny__AnyR(this.object.pointer, anything.getInstancePointer().pointer);
    }

    private native void _setUserAny__AnyR(long _pointer_, long anything);

    /** 
    Retrieves the custom user value associated with this object. **/
    public org.ogre4j.IAny getUserAny() {
         return new org.ogre4j.Any(new InstancePointer(_getUserAny_const(this.object.pointer)));
    }

    private native long _getUserAny_const(long _pointer_);

    /** 
    Sets the render queue group this entity will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public org.ogre4j.IMatrix4 _getParentNodeFullTransform() {
         return new org.ogre4j.Matrix4(new InstancePointer(__getParentNodeFullTransform_const(this.object.pointer)));
    }

    private native long __getParentNodeFullTransform_const(long _pointer_);

    /** 
    Sets the query flags for this object. **/
    public void setQueryFlags(long flags) {
        _setQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addQueryFlags(long flags) {
        _addQueryFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addQueryFlags__uint32v(long _pointer_, long flags);

    /** 
    As setQueryFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeQueryFlags(long flags) {
        _removeQueryFlags__Lv(this.object.pointer, flags);
    }

    private native void _removeQueryFlags__Lv(long _pointer_, long flags);

    /** **/
    public long getQueryFlags() {
         return _getQueryFlags_const(this.object.pointer);
    }

    private native long _getQueryFlags_const(long _pointer_);

    /** 
    Sets the visiblity flags for this object. **/
    public void setVisibilityFlags(long flags) {
        _setVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _setVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are appended to the existing flags on this object. **/
    public void addVisibilityFlags(long flags) {
        _addVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _addVisibilityFlags__uint32v(long _pointer_, long flags);

    /** 
    As setVisibilityFlags, except the flags passed as parameters are removed from the existing flags on this object. **/
    public void removeVisibilityFlags(long flags) {
        _removeVisibilityFlags__uint32v(this.object.pointer, flags);
    }

    private native void _removeVisibilityFlags__uint32v(long _pointer_, long flags);

    /** **/
    public long getVisibilityFlags() {
         return _getVisibilityFlags_const(this.object.pointer);
    }

    private native long _getVisibilityFlags_const(long _pointer_);

    /** 
    Sets a listener for this object. **/
    public void setListener(org.ogre4j.IMovableObject.IListener listener) {
        _setListener__Listenerp(this.object.pointer, listener.getInstancePointer().pointer);
    }

    private native void _setListener__Listenerp(long _pointer_, long listener);

    /** 
    Gets the current listener for this object. **/
    public org.ogre4j.IMovableObject.IListener getListener() {
         return new org.ogre4j.MovableObject.Listener(new InstancePointer(_getListener_const(this.object.pointer)));
    }

    private native long _getListener_const(long _pointer_);

    /** 
    Gets a list of lights, ordered relative to how close they are to this movable object. **/
    public org.ogre4j.ILightList queryLights() {
         return new org.ogre4j.LightList(new InstancePointer(_queryLights_const(this.object.pointer)));
    }

    private native long _queryLights_const(long _pointer_);

    /** 
    Returns a pointer to the current list of lights for this object. **/
    public org.ogre4j.ILightList _getLightList() {
         return new org.ogre4j.LightList(new InstancePointer(__getLightList(this.object.pointer)));
    }

    private native long __getLightList(long _pointer_);

    /** **/
    public org.ogre4j.IEdgeData getEdgeList() {
         return new org.ogre4j.EdgeData(new InstancePointer(_getEdgeList(this.object.pointer)));
    }

    private native long _getEdgeList(long _pointer_);

    /** **/
    public boolean hasEdgeList() {
         return _hasEdgeList(this.object.pointer);
    }

    private native boolean _hasEdgeList(long _pointer_);

    /** **/
    public void getShadowVolumeRenderableIterator(org.ogre4j.IShadowCaster.IShadowRenderableListIterator returnValue, org.ogre4j.ShadowTechnique shadowTechnique, org.ogre4j.ILight light, org.ogre4j.IHardwareIndexBufferSharedPtr indexBuffer, boolean extrudeVertices, float extrusionDist, long flags) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(this.object.pointer, shadowTechnique.getValue(),  light.getInstancePointer().pointer,  indexBuffer.getInstancePointer().pointer,  extrudeVertices,  extrusionDist,  flags)), false);
    }

    private native long _getShadowVolumeRenderableIterator__ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv(long _pointer_, int shadowTechnique, long light, long indexBuffer, boolean extrudeVertices, float extrusionDist, long flags);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getLightCapBounds() {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getLightCapBounds_const(this.object.pointer)));
    }

    private native long _getLightCapBounds_const(long _pointer_);

    /** 
    Overridden member from . **/
    public org.ogre4j.IAxisAlignedBox getDarkCapBounds(org.ogre4j.ILight light, float dirLightExtrusionDist) {
         return new org.ogre4j.AxisAlignedBox(new InstancePointer(_getDarkCapBounds__LightRRealv_const(this.object.pointer, light.getInstancePointer().pointer,  dirLightExtrusionDist)));
    }

    private native long _getDarkCapBounds__LightRRealv_const(long _pointer_, long light, float dirLightExtrusionDist);

    /** 
    Sets whether or not this object will cast shadows. **/
    public void setCastShadows(boolean enabled) {
        _setCastShadows__bv(this.object.pointer, enabled);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean enabled);

    /** 
    Returns whether shadow casting is enabled for this object. **/
    public boolean getCastShadows() {
         return _getCastShadows_const(this.object.pointer);
    }

    private native boolean _getCastShadows_const(long _pointer_);

    /** 
    Get the distance to extrude for a point/spot light **/
    public float getPointExtrusionDistance(org.ogre4j.ILight l) {
         return _getPointExtrusionDistance__LightP_const(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native float _getPointExtrusionDistance__LightP_const(long _pointer_, long l);

    /** 
    Get the 'type flags' for this . **/
    public long getTypeFlags() {
         return _getTypeFlags_const(this.object.pointer);
    }

    private native long _getTypeFlags_const(long _pointer_);

    /** 
    Sets whether or not the debug display of this object is enabled. **/
    public void setDebugDisplayEnabled(boolean enabled) {
        _setDebugDisplayEnabled__bv(this.object.pointer, enabled);
    }

    private native void _setDebugDisplayEnabled__bv(long _pointer_, boolean enabled);

    /** **/
    public boolean isDebugDisplayEnabled() {
         return _isDebugDisplayEnabled_const(this.object.pointer);
    }

    private native boolean _isDebugDisplayEnabled_const(long _pointer_);

    /** 
    Set the default query flags for all future  instances. **/
    public static void setDefaultQueryFlags(long flags) {
        _setDefaultQueryFlags__uint32v( flags);
    }

    private native static void _setDefaultQueryFlags__uint32v(long flags);

    /** 
    Get the default query flags for all future  instances. **/
    public static long getDefaultQueryFlags() {
         return _getDefaultQueryFlags();
    }

    private native static long _getDefaultQueryFlags();

    /** 
    Set the default visibility flags for all future  instances. **/
    public static void setDefaultVisibilityFlags(long flags) {
        _setDefaultVisibilityFlags__uint32v( flags);
    }

    private native static void _setDefaultVisibilityFlags__uint32v(long flags);

    /** 
    Get the default visibility flags for all future  instances. **/
    public static long getDefaultVisibilityFlags() {
         return _getDefaultVisibilityFlags();
    }

    private native static long _getDefaultVisibilityFlags();

    /** 
    Utility method for extruding vertices based on a light. **/
    public static void extrudeVertices(org.ogre4j.IHardwareVertexBufferSharedPtr vertexBuffer, int originalVertexCount, org.ogre4j.IVector4 lightPos, float extrudeDist) {
        _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv( vertexBuffer.getInstancePointer().pointer,  originalVertexCount,  lightPos.getInstancePointer().pointer,  extrudeDist);
    }

    private native static void _extrudeVertices__HardwareVertexBufferSharedPtrRivVector4RRealv(long vertexBuffer, int originalVertexCount, long lightPos, float extrudeDist);

    /** 
    Gets a list of animable value names for this object. **/
    public org.ogre4j.IStringVector getAnimableValueNames() {
         return new org.ogre4j.StringVector(new InstancePointer(_getAnimableValueNames_const(this.object.pointer)));
    }

    private native long _getAnimableValueNames_const(long _pointer_);

    /** 
    Create a reference-counted AnimableValuePtr for the named value. **/
    public void createAnimableValue(org.ogre4j.IAnimableValuePtr returnValue, String valueName) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_createAnimableValue__StringR(this.object.pointer, valueName)), false);
    }

    private native long _createAnimableValue__StringR(long _pointer_, String valueName);

    /** 
    Called just prior to the  being rendered. **/
    public boolean preRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
         return _preRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native boolean _preRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Called immediately after the  has been rendered. **/
    public void postRender(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rsys) {
        _postRender__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rsys.getInstancePointer().pointer);
    }

    private native void _postRender__SceneManagerpRenderSystemp(long _pointer_, long sm, long rsys);

    /** 
    Sets whether or not to use an 'identity' projection. **/
    public void setUseIdentityProjection(boolean useIdentityProjection) {
        _setUseIdentityProjection__bv(this.object.pointer, useIdentityProjection);
    }

    private native void _setUseIdentityProjection__bv(long _pointer_, boolean useIdentityProjection);

    /** 
    Returns whether or not to use an 'identity' projection. **/
    public boolean getUseIdentityProjection() {
         return _getUseIdentityProjection_const(this.object.pointer);
    }

    private native boolean _getUseIdentityProjection_const(long _pointer_);

    /** 
    Sets whether or not to use an 'identity' view. **/
    public void setUseIdentityView(boolean useIdentityView) {
        _setUseIdentityView__bv(this.object.pointer, useIdentityView);
    }

    private native void _setUseIdentityView__bv(long _pointer_, boolean useIdentityView);

    /** 
    Returns whether or not to use an 'identity' view. **/
    public boolean getUseIdentityView() {
         return _getUseIdentityView_const(this.object.pointer);
    }

    private native boolean _getUseIdentityView_const(long _pointer_);

    /** 
    Sets a custom parameter for this , which may be used to drive calculations for this specific , like GPU program parameters. **/
    public void setCustomParameter(int index, org.ogre4j.IVector4 value) {
        _setCustomParameter__ivVector4R(this.object.pointer, index,  value.getInstancePointer().pointer);
    }

    private native void _setCustomParameter__ivVector4R(long _pointer_, int index, long value);

    /** 
    Gets the custom value associated with this  at the given index. **/
    public org.ogre4j.IVector4 getCustomParameter(int index) {
         return new org.ogre4j.Vector4(new InstancePointer(_getCustomParameter__iv_const(this.object.pointer, index)));
    }

    private native long _getCustomParameter__iv_const(long _pointer_, int index);

    /** 
    Update a custom  constant which is derived from information only this  knows. **/
    public void _updateCustomGpuParameter(org.ogre4j.IGpuProgramParameters.IAutoConstantEntry constantEntry, org.ogre4j.IGpuProgramParameters params) {
        __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(this.object.pointer, constantEntry.getInstancePointer().pointer,  params.getInstancePointer().pointer);
    }

    private native void __updateCustomGpuParameter__GpuProgramParameters_AutoConstantEntryRGpuProgramParametersp_const(long _pointer_, long constantEntry, long params);

    /** 
    Sets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public void setPolygonModeOverrideable(boolean override) {
        _setPolygonModeOverrideable__bv(this.object.pointer, override);
    }

    private native void _setPolygonModeOverrideable__bv(long _pointer_, boolean override);

    /** 
    Gets whether this renderable's chosen detail level can be overridden (downgraded) by the camera setting. **/
    public boolean getPolygonModeOverrideable() {
         return _getPolygonModeOverrideable_const(this.object.pointer);
    }

    private native boolean _getPolygonModeOverrideable_const(long _pointer_);

    /** 
    Sets render system private data **/
    public org.ogre4j.IRenderable.IRenderSystemData getRenderSystemData() {
         return new org.ogre4j.Renderable.RenderSystemData(new InstancePointer(_getRenderSystemData_const(this.object.pointer)));
    }

    private native long _getRenderSystemData_const(long _pointer_);

    /** 
    gets render system private data **/
    public void setRenderSystemData(org.ogre4j.IRenderable.IRenderSystemData val) {
        _setRenderSystemData__RenderSystemDatap_const(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _setRenderSystemData__RenderSystemDatap_const(long _pointer_, long val);

}
public static class InstancedObject extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IInstancedObject {
static { System.loadLibrary("ogre4j");}
public enum TransformSpace implements INativeEnum < TransformSpace > {
    TS_LOCAL(TransformSpaceHelper.ENUM_VALUES[0]),
    TS_PARENT(TransformSpaceHelper.ENUM_VALUES[1]),
    TS_WORLD(TransformSpaceHelper.ENUM_VALUES[2]);

    private int value;

    TransformSpace(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public TransformSpace getEnum(int val) {
        return toEnum(val);
    }

    public static final TransformSpace toEnum(int retval) {
    if (retval ==TS_LOCAL.value)
        return TransformSpace.TS_LOCAL;
    else if (retval ==TS_PARENT.value)
        return TransformSpace.TS_PARENT;
    else if (retval ==TS_WORLD.value)
        return TransformSpace.TS_WORLD;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class TransformSpaceHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

public static class GeometryBucketList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IInstancedObject.IGeometryBucketList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GeometryBucketList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GeometryBucketList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GeometryBucketList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public GeometryBucketList() {
         super( new org.xbig.base.InstancePointer(__createGeometryBucketList()), false);
    }

    private native static long __createGeometryBucketList();

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IGeometryBucket val) {
        _assign__ivOgre_InstancedGeometry_GeometryBucketP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_InstancedGeometry_GeometryBucketP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket at(int loc) {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket back() {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket front() {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IGeometryBucket val) {
        _push_back__Ogre_InstancedGeometry_GeometryBucketP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_InstancedGeometry_GeometryBucketP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public InstancedObject(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected InstancedObject(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public InstancedObject(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public InstancedObject(int index) {
         super( new org.xbig.base.InstancePointer(__createInstancedObject__iv( index)), false);
    }

    private native static long __createInstancedObject__iv(int index);

    /** **/
    public InstancedObject(int index, org.ogre4j.ISkeletonInstance skeleton, org.ogre4j.IAnimationStateSet animations) {
         super( new org.xbig.base.InstancePointer(__createInstancedObject__ivSkeletonInstancepAnimationStateSetp( index,  skeleton.getInstancePointer().pointer,  animations.getInstancePointer().pointer)), false);
    }

    private native static long __createInstancedObject__ivSkeletonInstancepAnimationStateSetp(int index, long skeleton, long animations);

    /** **/
    public void setPosition(org.ogre4j.IVector3 position) {
        _setPosition__Vector3v(this.object.pointer, position.getInstancePointer().pointer);
    }

    private native void _setPosition__Vector3v(long _pointer_, long position);

    /** **/
    public org.ogre4j.IVector3 getPosition() {
         return new org.ogre4j.Vector3(new InstancePointer(_getPosition(this.object.pointer)));
    }

    private native long _getPosition(long _pointer_);

    /** **/
    public void yaw(org.ogre4j.IRadian angle) {
        _yaw__RadianR(this.object.pointer, angle.getInstancePointer().pointer);
    }

    private native void _yaw__RadianR(long _pointer_, long angle);

    /** **/
    public void pitch(org.ogre4j.IRadian angle) {
        _pitch__RadianR(this.object.pointer, angle.getInstancePointer().pointer);
    }

    private native void _pitch__RadianR(long _pointer_, long angle);

    /** **/
    public void roll(org.ogre4j.IRadian angle) {
        _roll__RadianR(this.object.pointer, angle.getInstancePointer().pointer);
    }

    private native void _roll__RadianR(long _pointer_, long angle);

    /** **/
    public void rotate(org.ogre4j.IQuaternion q) {
        _rotate__QuaternionR(this.object.pointer, q.getInstancePointer().pointer);
    }

    private native void _rotate__QuaternionR(long _pointer_, long q);

    /** **/
    public void setScale(org.ogre4j.IVector3 scale) {
        _setScale__Vector3R(this.object.pointer, scale.getInstancePointer().pointer);
    }

    private native void _setScale__Vector3R(long _pointer_, long scale);

    /** **/
    public void setOrientation(org.ogre4j.IQuaternion q) {
        _setOrientation__QuaternionR(this.object.pointer, q.getInstancePointer().pointer);
    }

    private native void _setOrientation__QuaternionR(long _pointer_, long q);

    /** **/
    public void setPositionAndOrientation(org.ogre4j.IVector3 p, org.ogre4j.IQuaternion q) {
        _setPositionAndOrientation__Vector3vQuaternionR(this.object.pointer, p.getInstancePointer().pointer,  q.getInstancePointer().pointer);
    }

    private native void _setPositionAndOrientation__Vector3vQuaternionR(long _pointer_, long p, long q);

    /** **/
    public org.ogre4j.IQuaternion getOrientation() {
         return new org.ogre4j.Quaternion(new InstancePointer(_getOrientation(this.object.pointer)));
    }

    private native long _getOrientation(long _pointer_);

    /** **/
    public void addBucketToList(org.ogre4j.IInstancedGeometry.IGeometryBucket bucket) {
        _addBucketToList__GeometryBucketp(this.object.pointer, bucket.getInstancePointer().pointer);
    }

    private native void _addBucketToList__GeometryBucketp(long _pointer_, long bucket);

    /** **/
    public void needUpdate() {
        _needUpdate(this.object.pointer);
    }

    private native void _needUpdate(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IInstancedObject.IGeometryBucketList getGeometryBucketList() {
         return new org.ogre4j.InstancedGeometry.InstancedObject.GeometryBucketList(new InstancePointer(_getGeometryBucketList(this.object.pointer)));
    }

    private native long _getGeometryBucketList(long _pointer_);

    /** **/
    public void translate(org.ogre4j.IMatrix3 axes, org.ogre4j.IVector3 move) {
        _translate__Matrix3RVector3R(this.object.pointer, axes.getInstancePointer().pointer,  move.getInstancePointer().pointer);
    }

    private native void _translate__Matrix3RVector3R(long _pointer_, long axes, long move);

    /** **/
    public void translate(org.ogre4j.IVector3 d) {
        _translate__Vector3R(this.object.pointer, d.getInstancePointer().pointer);
    }

    private native void _translate__Vector3R(long _pointer_, long d);

    /** **/
    public void getLocalAxes(org.ogre4j.IMatrix3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getLocalAxes_const(this.object.pointer)), false);
    }

    private native long _getLocalAxes_const(long _pointer_);

    /** **/
    public void updateAnimation() {
        _updateAnimation(this.object.pointer);
    }

    private native void _updateAnimation(long _pointer_);

    /** **/
    public org.ogre4j.IAnimationState getAnimationState(String name) {
         return new org.ogre4j.AnimationState(new InstancePointer(_getAnimationState__StringR_const(this.object.pointer, name)));
    }

    private native long _getAnimationState__StringR_const(long _pointer_, String name);

    /** **/
    public org.ogre4j.ISkeletonInstance getSkeletonInstance() {
         return new org.ogre4j.SkeletonInstance(new InstancePointer(_getSkeletonInstance(this.object.pointer)));
    }

    private native long _getSkeletonInstance(long _pointer_);

}
public static class LODBucket extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.ILODBucket {
static { System.loadLibrary("ogre4j");}
public static class MaterialBucketMap extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialBucketMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public MaterialBucketMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected MaterialBucketMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public MaterialBucketMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public MaterialBucketMap() {
         super( new org.xbig.base.InstancePointer(__createMaterialBucketMap()), false);
    }

    private native static long __createMaterialBucketMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket get(String key) {
         return new org.ogre4j.InstancedGeometry.MaterialBucket(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IInstancedGeometry.IMaterialBucket value) {
        _insert__sROgre_InstancedGeometry_MaterialBucketp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_InstancedGeometry_MaterialBucketp(long _pointer_, String key, long value);

}
public static class MaterialIterator extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public MaterialIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected MaterialIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public MaterialIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public MaterialIterator(org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialBucketMap c) {
         super( new org.xbig.base.InstancePointer(__createMaterialIterator__Ogre_InstancedGeometry_LODBucket_MaterialBucketMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createMaterialIterator__Ogre_InstancedGeometry_LODBucket_MaterialBucketMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket getNext() {
         return new org.ogre4j.InstancedGeometry.MaterialBucket(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IMaterialBucket peekNextValue() {
         return new org.ogre4j.InstancedGeometry.MaterialBucket(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public String peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native String _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialIterator operatorAssignment(org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialIterator rhs) {
         return new org.ogre4j.InstancedGeometry.LODBucket.MaterialIterator(new InstancePointer(_operatorAssignment___Ogre_InstancedGeometry_LODBucket_MaterialIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_InstancedGeometry_LODBucket_MaterialIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IMaterialBucket> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IInstancedGeometry.IMaterialBucket>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LODBucket(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LODBucket(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LODBucket(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LODBucket(org.ogre4j.IInstancedGeometry.IBatchInstance parent, int lod, float lodDist) {
         super( new org.xbig.base.InstancePointer(__createLODBucket__BatchInstancepHvRealv( parent.getInstancePointer().pointer,  lod,  lodDist)), false);
    }

    private native static long __createLODBucket__BatchInstancepHvRealv(long parent, int lod, float lodDist);

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance getParent() {
         return new org.ogre4j.InstancedGeometry.BatchInstance(new InstancePointer(_getParent(this.object.pointer)));
    }

    private native long _getParent(long _pointer_);

    /** **/
    public int getLod() {
         return _getLod_const(this.object.pointer);
    }

    private native int _getLod_const(long _pointer_);

    /** **/
    public float getSquaredDistance() {
         return _getSquaredDistance_const(this.object.pointer);
    }

    private native float _getSquaredDistance_const(long _pointer_);

    /** **/
    public void assign(org.ogre4j.IInstancedGeometry.IQueuedSubMesh qsm, int atLod) {
        _assign__QueuedSubMeshpushortv(this.object.pointer, qsm.getInstancePointer().pointer,  atLod);
    }

    private native void _assign__QueuedSubMeshpushortv(long _pointer_, long qsm, int atLod);

    /** **/
    public void build() {
        _build(this.object.pointer);
    }

    private native void _build(long _pointer_);

    /** **/
    public void addRenderables(org.ogre4j.IRenderQueue queue, short group, float camSquaredDistance) {
        _addRenderables__RenderQueuepuint8vRealv(this.object.pointer, queue.getInstancePointer().pointer,  group,  camSquaredDistance);
    }

    private native void _addRenderables__RenderQueuepuint8vRealv(long _pointer_, long queue, short group, float camSquaredDistance);

    /** **/
    public void getMaterialIterator(org.ogre4j.IInstancedGeometry.ILODBucket.IMaterialIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getMaterialIterator(this.object.pointer)), false);
    }

    private native long _getMaterialIterator(long _pointer_);

    /** **/
    public void dump(org.std.Iofstream of) {
        _dump__std_ofstreamr_const(this.object.pointer, of.getInstancePointer().pointer);
    }

    private native void _dump__std_ofstreamr_const(long _pointer_, long of);

    /** **/
    public void updateContainers(org.ogre4j.IInstancedGeometry.IMaterialBucket bucket, StringPointer name) {
        _updateContainers__MaterialBucketpStringr(this.object.pointer, bucket.getInstancePointer().pointer,  name.object.pointer);
    }

    private native void _updateContainers__MaterialBucketpStringr(long _pointer_, long bucket, long name);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

}
public static class MaterialBucket extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IMaterialBucket {
static { System.loadLibrary("ogre4j");}
public static class GeometryBucketList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IMaterialBucket.IGeometryBucketList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GeometryBucketList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GeometryBucketList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GeometryBucketList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public GeometryBucketList() {
         super( new org.xbig.base.InstancePointer(__createGeometryBucketList()), false);
    }

    private native static long __createGeometryBucketList();

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IGeometryBucket val) {
        _assign__ivOgre_InstancedGeometry_GeometryBucketP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_InstancedGeometry_GeometryBucketP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket at(int loc) {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket back() {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket front() {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IGeometryBucket val) {
        _push_back__Ogre_InstancedGeometry_GeometryBucketP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_InstancedGeometry_GeometryBucketP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class GeometryIterator extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IMaterialBucket.IGeometryIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public GeometryIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected GeometryIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public GeometryIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public GeometryIterator(org.ogre4j.IInstancedGeometry.IMaterialBucket.IGeometryBucketList c) {
         super( new org.xbig.base.InstancePointer(__createGeometryIterator__Ogre_InstancedGeometry_MaterialBucket_GeometryBucketListr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createGeometryIterator__Ogre_InstancedGeometry_MaterialBucket_GeometryBucketListr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket getNext() {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket peekNext() {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_peekNext(this.object.pointer)));
    }

    private native long _peekNext(long _pointer_);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IGeometryBucket> peekNextPtr() {
         return new NativeObjectPointer<org.ogre4j.IInstancedGeometry.IGeometryBucket>(new InstancePointer(_peekNextPtr(this.object.pointer)));
    }

    private native long _peekNextPtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
protected static class CurrentGeometryMap extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IMaterialBucket.ICurrentGeometryMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CurrentGeometryMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CurrentGeometryMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CurrentGeometryMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CurrentGeometryMap() {
         super( new org.xbig.base.InstancePointer(__createCurrentGeometryMap()), false);
    }

    private native static long __createCurrentGeometryMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IGeometryBucket get(String key) {
         return new org.ogre4j.InstancedGeometry.GeometryBucket(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IInstancedGeometry.IGeometryBucket value) {
        _insert__sROgre_InstancedGeometry_GeometryBucketp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_InstancedGeometry_GeometryBucketp(long _pointer_, String key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public MaterialBucket(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected MaterialBucket(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public MaterialBucket(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public MaterialBucket(org.ogre4j.IInstancedGeometry.ILODBucket parent, String materialName) {
         super( new org.xbig.base.InstancePointer(__createMaterialBucket__LODBucketpStringR( parent.getInstancePointer().pointer,  materialName)), false);
    }

    private native static long __createMaterialBucket__LODBucketpStringR(long parent, String materialName);

    /** **/
    public org.ogre4j.IInstancedGeometry.ILODBucket getParent() {
         return new org.ogre4j.InstancedGeometry.LODBucket(new InstancePointer(_getParent(this.object.pointer)));
    }

    private native long _getParent(long _pointer_);

    /** **/
    public String getMaterialName() {
         return _getMaterialName_const(this.object.pointer);
    }

    private native String _getMaterialName_const(long _pointer_);

    /** **/
    public void assign(org.ogre4j.IInstancedGeometry.IQueuedGeometry qsm) {
        _assign__QueuedGeometryp(this.object.pointer, qsm.getInstancePointer().pointer);
    }

    private native void _assign__QueuedGeometryp(long _pointer_, long qsm);

    /** **/
    public void build() {
        _build(this.object.pointer);
    }

    private native void _build(long _pointer_);

    /** **/
    public void addRenderables(org.ogre4j.IRenderQueue queue, short group, float camSquaredDist) {
        _addRenderables__RenderQueuepuint8vRealv(this.object.pointer, queue.getInstancePointer().pointer,  group,  camSquaredDist);
    }

    private native void _addRenderables__RenderQueuepuint8vRealv(long _pointer_, long queue, short group, float camSquaredDist);

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial() {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_getMaterial_const(this.object.pointer)));
    }

    private native long _getMaterial_const(long _pointer_);

    /** **/
    public void getGeometryIterator(org.ogre4j.IInstancedGeometry.IMaterialBucket.IGeometryIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getGeometryIterator(this.object.pointer)), false);
    }

    private native long _getGeometryIterator(long _pointer_);

    /** **/
    public org.ogre4j.ITechnique getCurrentTechnique() {
         return new org.ogre4j.Technique(new InstancePointer(_getCurrentTechnique_const(this.object.pointer)));
    }

    private native long _getCurrentTechnique_const(long _pointer_);

    /** **/
    public void dump(org.std.Iofstream of) {
        _dump__std_ofstreamr_const(this.object.pointer, of.getInstancePointer().pointer);
    }

    private native void _dump__std_ofstreamr_const(long _pointer_, long of);









    /** **/
    public void updateContainers(org.ogre4j.IInstancedGeometry.IGeometryBucket bucket, String format) {
        _updateContainers__GeometryBucketpStringR(this.object.pointer, bucket.getInstancePointer().pointer,  format);
    }

    private native void _updateContainers__GeometryBucketpStringR(long _pointer_, long bucket, String format);

    /** **/
    public void setLastIndex(int index) {
        _setLastIndex__iv(this.object.pointer, index);
    }

    private native void _setLastIndex__iv(long _pointer_, int index);

    /** **/
    public int getLastIndex() {
         return _getLastIndex(this.object.pointer);
    }

    private native int _getLastIndex(long _pointer_);

    /** **/
    public void setMaterial(String name) {
        _setMaterial__StringR(this.object.pointer, name);
    }

    private native void _setMaterial__StringR(long _pointer_, String name);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

}
public static class OptimisedSubMeshGeometry extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public OptimisedSubMeshGeometry(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected OptimisedSubMeshGeometry(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public OptimisedSubMeshGeometry(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public OptimisedSubMeshGeometry() {
         super( new org.xbig.base.InstancePointer(__createOptimisedSubMeshGeometry()), false);
    }

    private native static long __createOptimisedSubMeshGeometry();

    /** **/
    public org.ogre4j.IVertexData getvertexData() {
         return new org.ogre4j.VertexData(new InstancePointer(_getvertexData(this.object.pointer)));
    }

    private native long _getvertexData(long _pointer_);

    /** **/
    public void setvertexData(org.ogre4j.IVertexData _jni_value_) {
        _setvertexData(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setvertexData(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData() {
         return new org.ogre4j.IndexData(new InstancePointer(_getindexData(this.object.pointer)));
    }

    private native long _getindexData(long _pointer_);

    /** **/
    public void setindexData(org.ogre4j.IIndexData _jni_value_) {
        _setindexData(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setindexData(long _pointer_, long _jni_value_);

}
public static class QueuedGeometry extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IQueuedGeometry {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QueuedGeometry(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QueuedGeometry(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QueuedGeometry(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QueuedGeometry() {
         super( new org.xbig.base.InstancePointer(__createQueuedGeometry()), false);
    }

    private native static long __createQueuedGeometry();

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink getgeometry() {
         return new org.ogre4j.InstancedGeometry.SubMeshLodGeometryLink(new InstancePointer(_getgeometry(this.object.pointer)));
    }

    private native long _getgeometry(long _pointer_);

    /** **/
    public void setgeometry(org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink _jni_value_) {
        _setgeometry(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setgeometry(long _pointer_, long _jni_value_);

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getposition(this.object.pointer)), false);
    }

    private native long _getposition(long _pointer_);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_) {
        _setposition(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setposition(long _pointer_, long _jni_value_);

    /** **/
    public void getorientation(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getorientation(this.object.pointer)), false);
    }

    private native long _getorientation(long _pointer_);

    /** **/
    public void setorientation(org.ogre4j.IQuaternion _jni_value_) {
        _setorientation(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setorientation(long _pointer_, long _jni_value_);

    /** **/
    public void getscale(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getscale(this.object.pointer)), false);
    }

    private native long _getscale(long _pointer_);

    /** **/
    public void setscale(org.ogre4j.IVector3 _jni_value_) {
        _setscale(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setscale(long _pointer_, long _jni_value_);

    /** **/
    public long getID() {
         return _getID(this.object.pointer);
    }

    private native long _getID(long _pointer_);

    /** **/
    public void setID(long _jni_value_) {
        _setID(this.object.pointer, _jni_value_);
    }

    private native void _setID(long _pointer_, long _jni_value_);

}
public static class QueuedSubMesh extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IQueuedSubMesh {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QueuedSubMesh(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QueuedSubMesh(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QueuedSubMesh(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QueuedSubMesh() {
         super( new org.xbig.base.InstancePointer(__createQueuedSubMesh()), false);
    }

    private native static long __createQueuedSubMesh();

    /** **/
    public org.ogre4j.ISubMesh getsubmesh() {
         return new org.ogre4j.SubMesh(new InstancePointer(_getsubmesh(this.object.pointer)));
    }

    private native long _getsubmesh(long _pointer_);

    /** **/
    public void setsubmesh(org.ogre4j.ISubMesh _jni_value_) {
        _setsubmesh(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsubmesh(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList getgeometryLodList() {
         return new org.ogre4j.InstancedGeometry.SubMeshLodGeometryLinkList(new InstancePointer(_getgeometryLodList(this.object.pointer)));
    }

    private native long _getgeometryLodList(long _pointer_);

    /** **/
    public void setgeometryLodList(org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList _jni_value_) {
        _setgeometryLodList(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setgeometryLodList(long _pointer_, long _jni_value_);

    /** **/
    public String getmaterialName() {
         return _getmaterialName(this.object.pointer);
    }

    private native String _getmaterialName(long _pointer_);

    /** **/
    public void setmaterialName(String _jni_value_) {
        _setmaterialName(this.object.pointer, _jni_value_);
    }

    private native void _setmaterialName(long _pointer_, String _jni_value_);

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getposition(this.object.pointer)), false);
    }

    private native long _getposition(long _pointer_);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_) {
        _setposition(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setposition(long _pointer_, long _jni_value_);

    /** **/
    public void getorientation(org.ogre4j.IQuaternion returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getorientation(this.object.pointer)), false);
    }

    private native long _getorientation(long _pointer_);

    /** **/
    public void setorientation(org.ogre4j.IQuaternion _jni_value_) {
        _setorientation(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setorientation(long _pointer_, long _jni_value_);

    /** **/
    public void getscale(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getscale(this.object.pointer)), false);
    }

    private native long _getscale(long _pointer_);

    /** **/
    public void setscale(org.ogre4j.IVector3 _jni_value_) {
        _setscale(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setscale(long _pointer_, long _jni_value_);

    /** **/
    public void getworldBounds(org.ogre4j.IAxisAlignedBox returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getworldBounds(this.object.pointer)), false);
    }

    private native long _getworldBounds(long _pointer_);

    /** **/
    public void setworldBounds(org.ogre4j.IAxisAlignedBox _jni_value_) {
        _setworldBounds(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setworldBounds(long _pointer_, long _jni_value_);

    /** **/
    public long getID() {
         return _getID(this.object.pointer);
    }

    private native long _getID(long _pointer_);

    /** **/
    public void setID(long _jni_value_) {
        _setID(this.object.pointer, _jni_value_);
    }

    private native void _setID(long _pointer_, long _jni_value_);

}
public static class SubMeshLodGeometryLink extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SubMeshLodGeometryLink(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SubMeshLodGeometryLink(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SubMeshLodGeometryLink(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SubMeshLodGeometryLink() {
         super( new org.xbig.base.InstancePointer(__createSubMeshLodGeometryLink()), false);
    }

    private native static long __createSubMeshLodGeometryLink();

    /** **/
    public org.ogre4j.IVertexData getvertexData() {
         return new org.ogre4j.VertexData(new InstancePointer(_getvertexData(this.object.pointer)));
    }

    private native long _getvertexData(long _pointer_);

    /** **/
    public void setvertexData(org.ogre4j.IVertexData _jni_value_) {
        _setvertexData(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setvertexData(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.IIndexData getindexData() {
         return new org.ogre4j.IndexData(new InstancePointer(_getindexData(this.object.pointer)));
    }

    private native long _getindexData(long _pointer_);

    /** **/
    public void setindexData(org.ogre4j.IIndexData _jni_value_) {
        _setindexData(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setindexData(long _pointer_, long _jni_value_);

}
public static class OptimisedSubMeshGeometryList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometryList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public OptimisedSubMeshGeometryList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected OptimisedSubMeshGeometryList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public OptimisedSubMeshGeometryList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public OptimisedSubMeshGeometryList() {
         super( new org.xbig.base.InstancePointer(__createOptimisedSubMeshGeometryList()), false);
    }

    private native static long __createOptimisedSubMeshGeometryList();

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val) {
        _assign__ivOgre_InstancedGeometry_OptimisedSubMeshGeometryP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_InstancedGeometry_OptimisedSubMeshGeometryP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry back() {
         return new org.ogre4j.InstancedGeometry.OptimisedSubMeshGeometry(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry front() {
         return new org.ogre4j.InstancedGeometry.OptimisedSubMeshGeometry(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void pop_front() {
        _pop_front(this.object.pointer);
    }

    private native void _pop_front(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val) {
        _push_back__Ogre_InstancedGeometry_OptimisedSubMeshGeometryP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_InstancedGeometry_OptimisedSubMeshGeometryP(long _pointer_, long val);

    /** **/
    public void push_front(org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val) {
        _push_front__Ogre_InstancedGeometry_OptimisedSubMeshGeometryP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_front__Ogre_InstancedGeometry_OptimisedSubMeshGeometryP(long _pointer_, long val);

    /** **/
    public void remove(org.ogre4j.IInstancedGeometry.IOptimisedSubMeshGeometry val) {
        _remove__Ogre_InstancedGeometry_OptimisedSubMeshGeometryP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _remove__Ogre_InstancedGeometry_OptimisedSubMeshGeometryP(long _pointer_, long val);

    /** **/
    public void reverse() {
        _reverse(this.object.pointer);
    }

    private native void _reverse(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public void unique() {
        _unique(this.object.pointer);
    }

    private native void _unique(long _pointer_);

}
public static class SubMeshLodGeometryLinkList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SubMeshLodGeometryLinkList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SubMeshLodGeometryLinkList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SubMeshLodGeometryLinkList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SubMeshLodGeometryLinkList() {
         super( new org.xbig.base.InstancePointer(__createSubMeshLodGeometryLinkList()), false);
    }

    private native static long __createSubMeshLodGeometryLinkList();

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink val) {
        _assign__ivOgre_InstancedGeometry_SubMeshLodGeometryLinkR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_InstancedGeometry_SubMeshLodGeometryLinkR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink at(int loc) {
         return new org.ogre4j.InstancedGeometry.SubMeshLodGeometryLink(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink back() {
         return new org.ogre4j.InstancedGeometry.SubMeshLodGeometryLink(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink front() {
         return new org.ogre4j.InstancedGeometry.SubMeshLodGeometryLink(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLink val) {
        _push_back__Ogre_InstancedGeometry_SubMeshLodGeometryLinkR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_InstancedGeometry_SubMeshLodGeometryLinkR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class SubMeshGeometryLookup extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.ISubMeshGeometryLookup {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SubMeshGeometryLookup(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SubMeshGeometryLookup(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SubMeshGeometryLookup(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public SubMeshGeometryLookup() {
         super( new org.xbig.base.InstancePointer(__createSubMeshGeometryLookup()), false);
    }

    private native static long __createSubMeshGeometryLookup();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.ISubMesh key) {
         return _count__Ogre_SubMeshP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_SubMeshP(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.ISubMesh key) {
         return _erase__Ogre_SubMeshP(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_SubMeshP(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList get(org.ogre4j.ISubMesh key) {
         return new org.ogre4j.InstancedGeometry.SubMeshLodGeometryLinkList(new InstancePointer(_get__Ogre_SubMeshP(this.object.pointer, key.getInstancePointer().pointer)));
    }

    private native long _get__Ogre_SubMeshP(long _pointer_, long key);

    /** **/
    public void insert(org.ogre4j.ISubMesh key, org.ogre4j.IInstancedGeometry.ISubMeshLodGeometryLinkList value) {
        _insert__Ogre_SubMeshPOgre_InstancedGeometry_SubMeshLodGeometryLinkListp(this.object.pointer, key.getInstancePointer().pointer,  value.getInstancePointer().pointer);
    }

    private native void _insert__Ogre_SubMeshPOgre_InstancedGeometry_SubMeshLodGeometryLinkListp(long _pointer_, long key, long value);

}
public static class QueuedSubMeshList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IQueuedSubMeshList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QueuedSubMeshList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QueuedSubMeshList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QueuedSubMeshList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QueuedSubMeshList() {
         super( new org.xbig.base.InstancePointer(__createQueuedSubMeshList()), false);
    }

    private native static long __createQueuedSubMeshList();

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IQueuedSubMesh val) {
        _assign__ivOgre_InstancedGeometry_QueuedSubMeshP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_InstancedGeometry_QueuedSubMeshP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedSubMesh at(int loc) {
         return new org.ogre4j.InstancedGeometry.QueuedSubMesh(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedSubMesh back() {
         return new org.ogre4j.InstancedGeometry.QueuedSubMesh(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedSubMesh front() {
         return new org.ogre4j.InstancedGeometry.QueuedSubMesh(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IQueuedSubMesh val) {
        _push_back__Ogre_InstancedGeometry_QueuedSubMeshP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_InstancedGeometry_QueuedSubMeshP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class QueuedSubMeshOriginList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IQueuedSubMeshOriginList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QueuedSubMeshOriginList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QueuedSubMeshOriginList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QueuedSubMeshOriginList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QueuedSubMeshOriginList() {
         super( new org.xbig.base.InstancePointer(__createQueuedSubMeshOriginList()), false);
    }

    private native static long __createQueuedSubMeshOriginList();

    /** **/
    public void assign(int num, String val) {
        _assign__ivsR(this.object.pointer, num,  val);
    }

    private native void _assign__ivsR(long _pointer_, int num, String val);

    /** **/
    public StringPointer at(int loc) {
         return new StringPointer(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public StringPointer back() {
         return new StringPointer(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public StringPointer front() {
         return new StringPointer(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(String val) {
        _push_back__sR(this.object.pointer, val);
    }

    private native void _push_back__sR(long _pointer_, String val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class QueuedGeometryList extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IQueuedGeometryList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QueuedGeometryList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QueuedGeometryList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QueuedGeometryList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QueuedGeometryList() {
         super( new org.xbig.base.InstancePointer(__createQueuedGeometryList()), false);
    }

    private native static long __createQueuedGeometryList();

    /** **/
    public void assign(int num, org.ogre4j.IInstancedGeometry.IQueuedGeometry val) {
        _assign__ivOgre_InstancedGeometry_QueuedGeometryP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_InstancedGeometry_QueuedGeometryP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedGeometry at(int loc) {
         return new org.ogre4j.InstancedGeometry.QueuedGeometry(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedGeometry back() {
         return new org.ogre4j.InstancedGeometry.QueuedGeometry(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IQueuedGeometry front() {
         return new org.ogre4j.InstancedGeometry.QueuedGeometry(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IInstancedGeometry.IQueuedGeometry val) {
        _push_back__Ogre_InstancedGeometry_QueuedGeometryP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_InstancedGeometry_QueuedGeometryP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class BatchInstanceMap extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IBatchInstanceMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public BatchInstanceMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected BatchInstanceMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public BatchInstanceMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public BatchInstanceMap() {
         super( new org.xbig.base.InstancePointer(__createBatchInstanceMap()), false);
    }

    private native static long __createBatchInstanceMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(long key) {
         return _count__IR(this.object.pointer, key);
    }

    private native int _count__IR(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(long key) {
         return _erase__IR(this.object.pointer, key);
    }

    private native int _erase__IR(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance get(long key) {
         return new org.ogre4j.InstancedGeometry.BatchInstance(new InstancePointer(_get__IR(this.object.pointer, key)));
    }

    private native long _get__IR(long _pointer_, long key);

    /** **/
    public void insert(long key, org.ogre4j.IInstancedGeometry.IBatchInstance value) {
        _insert__IROgre_InstancedGeometry_BatchInstancep(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__IROgre_InstancedGeometry_BatchInstancep(long _pointer_, long key, long value);

}
public static class RenderOperationVector extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IRenderOperationVector {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderOperationVector(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderOperationVector(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderOperationVector(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderOperationVector() {
         super( new org.xbig.base.InstancePointer(__createRenderOperationVector()), false);
    }

    private native static long __createRenderOperationVector();

    /** **/
    public void assign(int num, org.ogre4j.IRenderOperation val) {
        _assign__ivOgre_RenderOperationP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_RenderOperationP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IRenderOperation at(int loc) {
         return new org.ogre4j.RenderOperation(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IRenderOperation back() {
         return new org.ogre4j.RenderOperation(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IRenderOperation front() {
         return new org.ogre4j.RenderOperation(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IRenderOperation val) {
        _push_back__Ogre_RenderOperationP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_RenderOperationP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class BatchInstanceIterator extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IBatchInstanceIterator {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public BatchInstanceIterator(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected BatchInstanceIterator(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public BatchInstanceIterator(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public BatchInstanceIterator(org.ogre4j.IInstancedGeometry.IBatchInstanceMap c) {
         super( new org.xbig.base.InstancePointer(__createBatchInstanceIterator__Ogre_InstancedGeometry_BatchInstanceMapr( c.getInstancePointer().pointer)), false);
    }

    private native static long __createBatchInstanceIterator__Ogre_InstancedGeometry_BatchInstanceMapr(long c);

    /** **/
    public boolean hasMoreElements() {
         return _hasMoreElements_const(this.object.pointer);
    }

    private native boolean _hasMoreElements_const(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance getNext() {
         return new org.ogre4j.InstancedGeometry.BatchInstance(new InstancePointer(_getNext(this.object.pointer)));
    }

    private native long _getNext(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstance peekNextValue() {
         return new org.ogre4j.InstancedGeometry.BatchInstance(new InstancePointer(_peekNextValue(this.object.pointer)));
    }

    private native long _peekNextValue(long _pointer_);

    /** **/
    public long peekNextKey() {
         return _peekNextKey(this.object.pointer);
    }

    private native long _peekNextKey(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IBatchInstanceIterator operatorAssignment(org.ogre4j.IInstancedGeometry.IBatchInstanceIterator rhs) {
         return new org.ogre4j.InstancedGeometry.BatchInstanceIterator(new InstancePointer(_operatorAssignment___Ogre_InstancedGeometry_BatchInstanceIteratorr(this.object.pointer, rhs.getInstancePointer().pointer)));
    }

    private native long _operatorAssignment___Ogre_InstancedGeometry_BatchInstanceIteratorr(long _pointer_, long rhs);

    /** **/
    public NativeObjectPointer<org.ogre4j.IInstancedGeometry.IBatchInstance> peekNextValuePtr() {
         return new NativeObjectPointer<org.ogre4j.IInstancedGeometry.IBatchInstance>(new InstancePointer(_peekNextValuePtr(this.object.pointer)));
    }

    private native long _peekNextValuePtr(long _pointer_);

    /** **/
    public void moveNext() {
        _moveNext(this.object.pointer);
    }

    private native void _moveNext(long _pointer_);

}
protected static class IndexRemap extends org.xbig.base.NativeObject implements org.ogre4j.IInstancedGeometry.IIndexRemap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public IndexRemap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected IndexRemap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public IndexRemap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public IndexRemap() {
         super( new org.xbig.base.InstancePointer(__createIndexRemap()), false);
    }

    private native static long __createIndexRemap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__iR(this.object.pointer, key);
    }

    private native int _count__iR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__iR(this.object.pointer, key);
    }

    private native int _erase__iR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public IntegerPointer get(int key) {
         return new IntegerPointer(new InstancePointer(_get__iR(this.object.pointer, key)));
    }

    private native long _get__iR(long _pointer_, int key);

    /** **/
    public void insert(int key, IntegerPointer value) {
        _insert__iRir(this.object.pointer, key,  value.object.pointer);
    }

    private native void _insert__iRir(long _pointer_, int key, long value);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public InstancedGeometry(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected InstancedGeometry(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public InstancedGeometry(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    **/
    public InstancedGeometry(org.ogre4j.ISceneManager owner, String name) {
         super( new org.xbig.base.InstancePointer(__createInstancedGeometry__SceneManagerpStringR( owner.getInstancePointer().pointer,  name)), false);
    }

    private native static long __createInstancedGeometry__SceneManagerpStringR(long owner, String name);

    /** **/
    public String getName() {
         return _getName_const(this.object.pointer);
    }

    private native String _getName_const(long _pointer_);

    /** 
    Adds an  to the static geometry. **/
    public void addEntity(org.ogre4j.IEntity ent, org.ogre4j.IVector3 position, org.ogre4j.IQuaternion orientation, org.ogre4j.IVector3 scale) {
        _addEntity__EntitypVector3RQuaternionRVector3R(this.object.pointer, ent.getInstancePointer().pointer,  position.getInstancePointer().pointer,  orientation.getInstancePointer().pointer,  scale.getInstancePointer().pointer);
    }

    private native void _addEntity__EntitypVector3RQuaternionRVector3R(long _pointer_, long ent, long position, long orientation, long scale);

    /** 
    Adds all the  objects attached to a  and all it's children to the static geometry. **/
    public void addSceneNode(org.ogre4j.ISceneNode node) {
        _addSceneNode__SceneNodeP(this.object.pointer, node.getInstancePointer().pointer);
    }

    private native void _addSceneNode__SceneNodeP(long _pointer_, long node);

    /** 
    Build the geometry. **/
    public void build() {
        _build(this.object.pointer);
    }

    private native void _build(long _pointer_);

    /** 
    Add a new batch instance **/
    public void addBatchInstance() {
        _addBatchInstance(this.object.pointer);
    }

    private native void _addBatchInstance(long _pointer_);

    /** 
    Destroys all the built geometry state (reverse of build). **/
    public void destroy() {
        _destroy(this.object.pointer);
    }

    private native void _destroy(long _pointer_);

    /** 
    Clears any of the entities / nodes added to this geometry and destroys anything which has already been built. **/
    public void reset() {
        _reset(this.object.pointer);
    }

    private native void _reset(long _pointer_);

    /** 
    Sets the distance at which batches are no longer rendered. **/
    public void setRenderingDistance(float dist) {
        _setRenderingDistance__Realv(this.object.pointer, dist);
    }

    private native void _setRenderingDistance__Realv(long _pointer_, float dist);

    /** 
    Gets the distance at which batches are no longer rendered. **/
    public float getRenderingDistance() {
         return _getRenderingDistance_const(this.object.pointer);
    }

    private native float _getRenderingDistance_const(long _pointer_);

    /** 
    Gets the squared distance at which batches are no longer rendered. **/
    public float getSquaredRenderingDistance() {
         return _getSquaredRenderingDistance_const(this.object.pointer);
    }

    private native float _getSquaredRenderingDistance_const(long _pointer_);

    /** 
    Hides or shows all the batches. **/
    public void setVisible(boolean visible) {
        _setVisible__bv(this.object.pointer, visible);
    }

    private native void _setVisible__bv(long _pointer_, boolean visible);

    /** 
    Are the batches visible? **/
    public boolean isVisible() {
         return _isVisible_const(this.object.pointer);
    }

    private native boolean _isVisible_const(long _pointer_);

    /** 
    Sets whether this geometry should cast shadows. **/
    public void setCastShadows(boolean castShadows) {
        _setCastShadows__bv(this.object.pointer, castShadows);
    }

    private native void _setCastShadows__bv(long _pointer_, boolean castShadows);

    /** **/
    public boolean getCastShadows() {
         return _getCastShadows(this.object.pointer);
    }

    private native boolean _getCastShadows(long _pointer_);

    /** 
    Sets the size of a single  of geometry. **/
    public void setBatchInstanceDimensions(org.ogre4j.IVector3 size) {
        _setBatchInstanceDimensions__Vector3R(this.object.pointer, size.getInstancePointer().pointer);
    }

    private native void _setBatchInstanceDimensions__Vector3R(long _pointer_, long size);

    /** 
    Gets the size of a single batch of geometry. **/
    public org.ogre4j.IVector3 getBatchInstanceDimensions() {
         return new org.ogre4j.Vector3(new InstancePointer(_getBatchInstanceDimensions_const(this.object.pointer)));
    }

    private native long _getBatchInstanceDimensions_const(long _pointer_);

    /** 
    Sets the origin of the geometry. **/
    public void setOrigin(org.ogre4j.IVector3 origin) {
        _setOrigin__Vector3R(this.object.pointer, origin.getInstancePointer().pointer);
    }

    private native void _setOrigin__Vector3R(long _pointer_, long origin);

    /** 
    Gets the origin of this geometry. **/
    public org.ogre4j.IVector3 getOrigin() {
         return new org.ogre4j.Vector3(new InstancePointer(_getOrigin_const(this.object.pointer)));
    }

    private native long _getOrigin_const(long _pointer_);

    /** 
    Sets the render queue group this object will be rendered through. **/
    public void setRenderQueueGroup(short queueID) {
        _setRenderQueueGroup__uint8v(this.object.pointer, queueID);
    }

    private native void _setRenderQueueGroup__uint8v(long _pointer_, short queueID);

    /** 
    Gets the queue group for this entity, see setRenderQueueGroup for full details. **/
    public short getRenderQueueGroup() {
         return _getRenderQueueGroup_const(this.object.pointer);
    }

    private native short _getRenderQueueGroup_const(long _pointer_);

    /** **/
    public void getBatchInstanceIterator(org.ogre4j.IInstancedGeometry.IBatchInstanceIterator returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getBatchInstanceIterator(this.object.pointer)), false);
    }

    private native long _getBatchInstanceIterator(long _pointer_);

    /** **/
    public org.ogre4j.IInstancedGeometry.IRenderOperationVector getRenderOperationVector() {
         return new org.ogre4j.InstancedGeometry.RenderOperationVector(new InstancePointer(_getRenderOperationVector(this.object.pointer)));
    }

    private native long _getRenderOperationVector(long _pointer_);

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables) {
        _visitRenderables__Renderable_Visitorpbv(this.object.pointer, visitor.getInstancePointer().pointer,  debugRenderables);
    }

    private native void _visitRenderables__Renderable_Visitorpbv(long _pointer_, long visitor, boolean debugRenderables);

    /** 
    Dump the contents of this  to a file for diagnostic purposes. **/
    public void dump(String filename) {
        _dump__StringR_const(this.object.pointer, filename);
    }

    private native void _dump__StringR_const(long _pointer_, String filename);

    /** 
    **/
    public org.ogre4j.ISkeletonInstance getBaseSkeletonInstance() {
         return new org.ogre4j.SkeletonInstance(new InstancePointer(_getBaseSkeletonInstance(this.object.pointer)));
    }

    private native long _getBaseSkeletonInstance(long _pointer_);

    /** 
    **/
    public void getBaseSkeleton(org.ogre4j.ISkeletonPtr returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getBaseSkeleton(this.object.pointer)), false);
    }

    private native long _getBaseSkeleton(long _pointer_);

    /** 
    **/
    public org.ogre4j.IAnimationStateSet getBaseAnimationState() {
         return new org.ogre4j.AnimationStateSet(new InstancePointer(_getBaseAnimationState(this.object.pointer)));
    }

    private native long _getBaseAnimationState(long _pointer_);

    /** 
    **/
    public long getObjectCount() {
         return _getObjectCount(this.object.pointer);
    }

    private native long _getObjectCount(long _pointer_);

}
