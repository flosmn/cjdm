/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class Polygon extends org.xbig.base.NativeObject implements org.ogre4j.IPolygon {
static { System.loadLibrary("ogre4j");}
public static class VertexList extends org.xbig.base.NativeObject implements org.ogre4j.IPolygon.IVertexList {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public VertexList(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected VertexList(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public VertexList(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public VertexList() {
         super( new org.xbig.base.InstancePointer(__createVertexList()), false);
    }

    private native static long __createVertexList();

    /** **/
    public void assign(int num, org.ogre4j.IVector3 val) {
        _assign__ivOgre_Vector3R(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_Vector3R(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.IVector3 at(int loc) {
         return new org.ogre4j.Vector3(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.IVector3 back() {
         return new org.ogre4j.Vector3(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.IVector3 front() {
         return new org.ogre4j.Vector3(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.IVector3 val) {
        _push_back__Ogre_Vector3R(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_Vector3R(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class EdgeMap extends org.xbig.base.NativeObject implements org.ogre4j.IPolygon.IEdgeMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public EdgeMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected EdgeMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public EdgeMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public EdgeMap() {
         super( new org.xbig.base.InstancePointer(__createEdgeMap()), false);
    }

    private native static long __createEdgeMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(org.ogre4j.IVector3 key) {
         return _count__Ogre_Vector3R(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _count__Ogre_Vector3R(long _pointer_, long key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(org.ogre4j.IVector3 key) {
         return _erase__Ogre_Vector3R(this.object.pointer, key.getInstancePointer().pointer);
    }

    private native int _erase__Ogre_Vector3R(long _pointer_, long key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

}
public static class Edge extends org.xbig.base.NativeObject implements org.ogre4j.IPolygon.IEdge {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Edge(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Edge(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Edge(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public void getfirst(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getfirst(this.object.pointer)), false);
    }

    private native long _getfirst(long _pointer_);

    /** **/
    public void setfirst(org.ogre4j.IVector3 _jni_value_) {
        _setfirst(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setfirst(long _pointer_, long _jni_value_);

    /** **/
    public void getsecond(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getsecond(this.object.pointer)), false);
    }

    private native long _getsecond(long _pointer_);

    /** **/
    public void setsecond(org.ogre4j.IVector3 _jni_value_) {
        _setsecond(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsecond(long _pointer_, long _jni_value_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Polygon(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Polygon(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Polygon(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Polygon() {
         super( new org.xbig.base.InstancePointer(__createPolygon()), false);
    }

    private native static long __createPolygon();

    /** **/
    public Polygon(org.ogre4j.IPolygon cpy) {
         super( new org.xbig.base.InstancePointer(__createPolygon__PolygonR( cpy.getInstancePointer().pointer)), false);
    }

    private native static long __createPolygon__PolygonR(long cpy);

    /** 
    Inserts a vertex at a specific position. **/
    public void insertVertex(org.ogre4j.IVector3 vdata, int vertexIndex) {
        _insertVertex__Vector3Riv(this.object.pointer, vdata.getInstancePointer().pointer,  vertexIndex);
    }

    private native void _insertVertex__Vector3Riv(long _pointer_, long vdata, int vertexIndex);

    /** 
    Inserts a vertex at the end of the polygon. **/
    public void insertVertex(org.ogre4j.IVector3 vdata) {
        _insertVertex__Vector3R(this.object.pointer, vdata.getInstancePointer().pointer);
    }

    private native void _insertVertex__Vector3R(long _pointer_, long vdata);

    /** 
    Returns a vertex. **/
    public org.ogre4j.IVector3 getVertex(int vertex) {
         return new org.ogre4j.Vector3(new InstancePointer(_getVertex__iv_const(this.object.pointer, vertex)));
    }

    private native long _getVertex__iv_const(long _pointer_, int vertex);

    /** 
    Sets a specific vertex of a polygon. **/
    public void setVertex(org.ogre4j.IVector3 vdata, int vertexIndex) {
        _setVertex__Vector3Riv(this.object.pointer, vdata.getInstancePointer().pointer,  vertexIndex);
    }

    private native void _setVertex__Vector3Riv(long _pointer_, long vdata, int vertexIndex);

    /** 
    Removes duplicate vertices from a polygon. **/
    public void removeDuplicates() {
        _removeDuplicates(this.object.pointer);
    }

    private native void _removeDuplicates(long _pointer_);

    /** 
    Vertex count. **/
    public int getVertexCount() {
         return _getVertexCount_const(this.object.pointer);
    }

    private native int _getVertexCount_const(long _pointer_);

    /** 
    Returns the polygon normal. **/
    public org.ogre4j.IVector3 getNormal() {
         return new org.ogre4j.Vector3(new InstancePointer(_getNormal_const(this.object.pointer)));
    }

    private native long _getNormal_const(long _pointer_);

    /** 
    Deletes a specific vertex. **/
    public void deleteVertex(int vertex) {
        _deleteVertex__iv(this.object.pointer, vertex);
    }

    private native void _deleteVertex__iv(long _pointer_, int vertex);

    /** 
    Determines if a point is inside the polygon. **/
    public boolean isPointInside(org.ogre4j.IVector3 point) {
         return _isPointInside__Vector3R_const(this.object.pointer, point.getInstancePointer().pointer);
    }

    private native boolean _isPointInside__Vector3R_const(long _pointer_, long point);

    /** 
    Stores the edges of the polygon in ccw order. The vertices are copied so the user has to take the deletion into account. **/
    public void storeEdges(org.ogre4j.IPolygon.IEdgeMap edgeMap) {
        _storeEdges__EdgeMapp_const(this.object.pointer, edgeMap.getInstancePointer().pointer);
    }

    private native void _storeEdges__EdgeMapp_const(long _pointer_, long edgeMap);

    /** 
    Resets the object. **/
    public void reset() {
        _reset(this.object.pointer);
    }

    private native void _reset(long _pointer_);

    /** 
    Determines if the current object is equal to the compared one. **/
    public boolean operatorEqual(org.ogre4j.IPolygon rhs) {
         return _operatorEqual__PolygonR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorEqual__PolygonR_const(long _pointer_, long rhs);

    /** 
    Determines if the current object is not equal to the compared one. **/
    public boolean operatorNotEqual(org.ogre4j.IPolygon rhs) {
         return _operatorNotEqual__PolygonR_const(this.object.pointer, rhs.getInstancePointer().pointer);
    }

    private native boolean _operatorNotEqual__PolygonR_const(long _pointer_, long rhs);

}
