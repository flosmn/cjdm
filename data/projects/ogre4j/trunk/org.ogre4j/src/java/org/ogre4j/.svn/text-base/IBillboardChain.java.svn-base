/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IBillboardChain extends INativeObject, org.ogre4j.IMovableObject, org.ogre4j.IRenderable {

public static interface IElement extends INativeObject {

    /** **/
    public void getposition(org.ogre4j.IVector3 returnValue);

    /** **/
    public void setposition(org.ogre4j.IVector3 _jni_value_);

    /** **/
    public float getwidth();

    /** **/
    public void setwidth(float _jni_value_);

    /** **/
    public float gettexCoord();

    /** **/
    public void settexCoord(float _jni_value_);

    /** **/
    public void getcolour(org.ogre4j.IColourValue returnValue);

    /** **/
    public void setcolour(org.ogre4j.IColourValue _jni_value_);

}
public static interface IChainSegment extends INativeObject {

    /** **/
    public int getstart();

    /** **/
    public void setstart(int _jni_value_);

    /** **/
    public int gethead();

    /** **/
    public void sethead(int _jni_value_);

    /** **/
    public int gettail();

    /** **/
    public void settail(int _jni_value_);

}
public interface IElementList extends INativeObject, org.std.Ivector< org.ogre4j.IBillboardChain.IElement > {

    /** **/
    public void assign(int num, org.ogre4j.IBillboardChain.IElement val);

    /** **/
    public org.ogre4j.IBillboardChain.IElement at(int loc);

    /** **/
    public org.ogre4j.IBillboardChain.IElement back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IBillboardChain.IElement front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IBillboardChain.IElement val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
public interface IChainSegmentList extends INativeObject, org.std.Ivector< org.ogre4j.IBillboardChain.IChainSegment > {

    /** **/
    public void assign(int num, org.ogre4j.IBillboardChain.IChainSegment val);

    /** **/
    public org.ogre4j.IBillboardChain.IChainSegment at(int loc);

    /** **/
    public org.ogre4j.IBillboardChain.IChainSegment back();

    /** **/
    public int capacity();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IBillboardChain.IChainSegment front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void push_back(org.ogre4j.IBillboardChain.IChainSegment val);

    /** **/
    public void reserve(int size);

    /** **/
    public int size();

}
    /** 
    Set the maximum number of chain elements per chain **/
    public void setMaxChainElements(int maxElements);

    /** 
    Get the maximum number of chain elements per chain **/
    public int getMaxChainElements();

    /** 
    Set the number of chain segments (this class can render multiple chains at once using the same material). **/
    public void setNumberOfChains(int numChains);

    /** 
    Get the number of chain segments (this class can render multiple chains at once using the same material). **/
    public int getNumberOfChains();

    /** 
    Sets whether texture coordinate information should be included in the final buffers generated. **/
    public void setUseTextureCoords(boolean use);

    /** 
    Gets whether texture coordinate information should be included in the final buffers generated. **/
    public boolean getUseTextureCoords();

    /** 
    Sets the direction in which texture coords specified on each element are deemed to run along the length of the chain. **/
    public void setTextureCoordDirection(org.ogre4j.BillboardChain.TexCoordDirection dir);

    /** 
    Gets the direction in which texture coords specified on each element are deemed to run. **/
    public org.ogre4j.BillboardChain.TexCoordDirection getTextureCoordDirection();

    /** 
    Set the range of the texture coordinates generated across the width of the chain elements. **/
    public void setOtherTextureCoordRange(float start, float end);

    /** 
    Get the range of the texture coordinates generated across the width of the chain elements. **/
    public FloatPointer getOtherTextureCoordRange();

    /** 
    Sets whether vertex colour information should be included in the final buffers generated. **/
    public void setUseVertexColours(boolean use);

    /** 
    Gets whether vertex colour information should be included in the final buffers generated. **/
    public boolean getUseVertexColours();

    /** 
    Sets whether or not the buffers created for this object are suitable for dynamic alteration. **/
    public void setDynamic(boolean dyn);

    /** 
    Gets whether or not the buffers created for this object are suitable for dynamic alteration. **/
    public boolean getDynamic();

    /** 
    Add an element to the 'head' of a chain. **/
    public void addChainElement(int chainIndex, org.ogre4j.IBillboardChain.IElement billboardChainElement);

    /** 
    Remove an element from the 'tail' of a chain. **/
    public void removeChainElement(int chainIndex);

    /** 
    Update the details of an existing chain element. **/
    public void updateChainElement(int chainIndex, int elementIndex, org.ogre4j.IBillboardChain.IElement billboardChainElement);

    /** 
    Get the detail of a chain element. **/
    public org.ogre4j.IBillboardChain.IElement getChainElement(int chainIndex, int elementIndex);

    /** 
    Returns the number of chain elements. **/
    public int getNumChainElements(int chainIndex);

    /** 
    Remove all elements of a given chain (but leave the chain intact). **/
    public void clearChain(int chainIndex);

    /** 
    Remove all elements from all chains (but leave the chains themselves intact). **/
    public void clearAllChains();

    /** **/
    public String getMaterialName();

    /** **/
    public void setMaterialName(String name);

    /** **/
    public void _notifyCurrentCamera(org.ogre4j.ICamera cam);

    /** **/
    public float getSquaredViewDepth(org.ogre4j.ICamera cam);

    /** **/
    public float getBoundingRadius();

    /** **/
    public org.ogre4j.IAxisAlignedBox getBoundingBox();

    /** **/
    public org.ogre4j.IMaterialPtr getMaterial();

    /** **/
    public String getMovableType();

    /** **/
    public void _updateRenderQueue(org.ogre4j.IRenderQueue a1);

    /** **/
    public void getRenderOperation(org.ogre4j.IRenderOperation a1);

    /** **/
    public void getWorldTransforms(org.ogre4j.IMatrix4 a1);

    /** **/
    public org.ogre4j.ILightList getLights();

    /** **/
    public void visitRenderables(org.ogre4j.IRenderable.IVisitor visitor, boolean debugRenderables);

}
