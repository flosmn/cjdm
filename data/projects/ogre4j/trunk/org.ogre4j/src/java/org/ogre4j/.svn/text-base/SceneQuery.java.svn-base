/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class SceneQuery extends org.xbig.base.NativeObject implements org.ogre4j.ISceneQuery {
static { System.loadLibrary("ogre4j");}
public static class WorldFragment extends org.xbig.base.NativeObject implements org.ogre4j.ISceneQuery.IWorldFragment {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public WorldFragment(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected WorldFragment(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public WorldFragment(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public WorldFragment() {
         super( new org.xbig.base.InstancePointer(__createWorldFragment()), false);
    }

    private native static long __createWorldFragment();

    /** **/
    public org.ogre4j.SceneQuery.WorldFragmentType getfragmentType() {
         return org.ogre4j.SceneQuery.WorldFragmentType.toEnum(_getfragmentType(this.object.pointer));
    }

    private native int _getfragmentType(long _pointer_);

    /** **/
    public void setfragmentType(org.ogre4j.SceneQuery.WorldFragmentType _jni_value_) {
        _setfragmentType(this.object.pointer, _jni_value_.getValue());
    }

    private native void _setfragmentType(long _pointer_, int _jni_value_);

    /** **/
    public void getsingleIntersection(org.ogre4j.IVector3 returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getsingleIntersection(this.object.pointer)), false);
    }

    private native long _getsingleIntersection(long _pointer_);

    /** **/
    public void setsingleIntersection(org.ogre4j.IVector3 _jni_value_) {
        _setsingleIntersection(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsingleIntersection(long _pointer_, long _jni_value_);

    /** **/
    public void getplanes(org.std.Ilist< org.ogre4j.IPlane > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getplanes(this.object.pointer)), true);
    }

    private native long _getplanes(long _pointer_);

    /** **/
    public void setplanes(org.std.Ilist< org.ogre4j.IPlane > _jni_value_) {
        _setplanes(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setplanes(long _pointer_, long _jni_value_);

    /** **/
    public VoidPointer getgeometry() {
         return new VoidPointer(new InstancePointer(_getgeometry(this.object.pointer)));
    }

    private native long _getgeometry(long _pointer_);

    /** **/
    public void setgeometry(VoidPointer _jni_value_) {
        _setgeometry(this.object.pointer, _jni_value_.object.pointer);
    }

    private native void _setgeometry(long _pointer_, long _jni_value_);

    /** **/
    public org.ogre4j.IRenderOperation getrenderOp() {
         return new org.ogre4j.RenderOperation(new InstancePointer(_getrenderOp(this.object.pointer)));
    }

    private native long _getrenderOp(long _pointer_);

    /** **/
    public void setrenderOp(org.ogre4j.IRenderOperation _jni_value_) {
        _setrenderOp(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrenderOp(long _pointer_, long _jni_value_);

}
public enum WorldFragmentType implements INativeEnum < WorldFragmentType > {
    WFT_NONE(WorldFragmentTypeHelper.ENUM_VALUES[0]),
    WFT_PLANE_BOUNDED_REGION(WorldFragmentTypeHelper.ENUM_VALUES[1]),
    WFT_SINGLE_INTERSECTION(WorldFragmentTypeHelper.ENUM_VALUES[2]),
    WFT_CUSTOM_GEOMETRY(WorldFragmentTypeHelper.ENUM_VALUES[3]),
    WFT_RENDER_OPERATION(WorldFragmentTypeHelper.ENUM_VALUES[4]);

    private int value;

    WorldFragmentType(int i) {
        this.value = i;
    }

    public int getValue() {
        return value;
    }

    public WorldFragmentType getEnum(int val) {
        return toEnum(val);
    }

    public static final WorldFragmentType toEnum(int retval) {
    if (retval ==WFT_NONE.value)
        return WorldFragmentType.WFT_NONE;
    else if (retval ==WFT_PLANE_BOUNDED_REGION.value)
        return WorldFragmentType.WFT_PLANE_BOUNDED_REGION;
    else if (retval ==WFT_SINGLE_INTERSECTION.value)
        return WorldFragmentType.WFT_SINGLE_INTERSECTION;
    else if (retval ==WFT_CUSTOM_GEOMETRY.value)
        return WorldFragmentType.WFT_CUSTOM_GEOMETRY;
    else if (retval ==WFT_RENDER_OPERATION.value)
        return WorldFragmentType.WFT_RENDER_OPERATION;
    throw new RuntimeException("wrong number in jni call for an enum");
    }
}

static class WorldFragmentTypeHelper{

				public static final int[] ENUM_VALUES =
				getEnumValues();

			
				private static native int[] getEnumValues();

			
};

 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public SceneQuery(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected SceneQuery(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public SceneQuery(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Standard constructor, should be called by . **/
    public SceneQuery(org.ogre4j.ISceneManager mgr) {
         super( new org.xbig.base.InstancePointer(__createSceneQuery__SceneManagerp( mgr.getInstancePointer().pointer)), false);
    }

    private native static long __createSceneQuery__SceneManagerp(long mgr);

    /** 
    Sets the mask for results of this query. **/
    public void setQueryMask(long mask) {
        _setQueryMask__uint32v(this.object.pointer, mask);
    }

    private native void _setQueryMask__uint32v(long _pointer_, long mask);

    /** 
    Returns the current mask for this query. **/
    public long getQueryMask() {
         return _getQueryMask_const(this.object.pointer);
    }

    private native long _getQueryMask_const(long _pointer_);

    /** 
    Sets the type mask for results of this query. **/
    public void setQueryTypeMask(long mask) {
        _setQueryTypeMask__uint32v(this.object.pointer, mask);
    }

    private native void _setQueryTypeMask__uint32v(long _pointer_, long mask);

    /** 
    Returns the current mask for this query. **/
    public long getQueryTypeMask() {
         return _getQueryTypeMask_const(this.object.pointer);
    }

    private native long _getQueryTypeMask_const(long _pointer_);

    /** 
    Tells the query what kind of world geometry to return from queries; often the full renderable geometry is not what is needed. **/
    public void setWorldFragmentType(org.ogre4j.SceneQuery.WorldFragmentType wft) {
        _setWorldFragmentType__WorldFragmentTypev(this.object.pointer, wft.getValue());
    }

    private native void _setWorldFragmentType__WorldFragmentTypev(long _pointer_, int wft);

    /** 
    Gets the current world fragment types to be returned from the query. **/
    public org.ogre4j.SceneQuery.WorldFragmentType getWorldFragmentType() {
         return org.ogre4j.SceneQuery.WorldFragmentType.toEnum(_getWorldFragmentType_const(this.object.pointer));
    }

    private native int _getWorldFragmentType_const(long _pointer_);

    /** 
    Returns the types of world fragments this query supports. **/
    public void getSupportedWorldFragmentTypes(org.std.Iset< org.ogre4j.SceneQuery.WorldFragmentType > returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getSupportedWorldFragmentTypes_const(this.object.pointer)), true);
    }

    private native long _getSupportedWorldFragmentTypes_const(long _pointer_);

}
