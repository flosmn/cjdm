/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public interface IProfiler extends INativeObject, org.ogre4j.IGeneralAllocatedObject, org.ogre4j.ISingleton< org.ogre4j.IProfiler > {

public static interface IProfileFrame extends INativeObject {

    /** **/
    public String getname();

    /** **/
    public void setname(String _jni_value_);

    /** **/
    public long getframeTime();

    /** **/
    public void setframeTime(long _jni_value_);

    /** **/
    public long getcalls();

    /** **/
    public void setcalls(long _jni_value_);

    /** **/
    public long gethierarchicalLvl();

    /** **/
    public void sethierarchicalLvl(long _jni_value_);

}
public static interface IProfileHistory extends INativeObject {

    /** **/
    public String getname();

    /** **/
    public void setname(String _jni_value_);

    /** **/
    public float getcurrentTime();

    /** **/
    public void setcurrentTime(float _jni_value_);

    /** **/
    public float getmaxTime();

    /** **/
    public void setmaxTime(float _jni_value_);

    /** **/
    public float getminTime();

    /** **/
    public void setminTime(float _jni_value_);

    /** **/
    public long getnumCallsThisFrame();

    /** **/
    public void setnumCallsThisFrame(long _jni_value_);

    /** **/
    public float gettotalTime();

    /** **/
    public void settotalTime(float _jni_value_);

    /** **/
    public long gettotalCalls();

    /** **/
    public void settotalCalls(long _jni_value_);

    /** **/
    public long gethierarchicalLvl();

    /** **/
    public void sethierarchicalLvl(long _jni_value_);

}
public static interface IProfileInstance extends INativeObject {

    /** **/
    public String getname();

    /** **/
    public void setname(String _jni_value_);

    /** **/
    public String getparent();

    /** **/
    public void setparent(String _jni_value_);

    /** **/
    public long getcurrTime();

    /** **/
    public void setcurrTime(long _jni_value_);

    /** **/
    public long getaccum();

    /** **/
    public void setaccum(long _jni_value_);

    /** **/
    public long gethierarchicalLvl();

    /** **/
    public void sethierarchicalLvl(long _jni_value_);

}
public interface IProfileStack extends INativeObject, org.std.Ilist< org.ogre4j.IProfiler.IProfileInstance > {

    /** **/
    public void assign(int num, org.ogre4j.IProfiler.IProfileInstance val);

    /** **/
    public org.ogre4j.IProfiler.IProfileInstance back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IProfiler.IProfileInstance front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IProfiler.IProfileInstance val);

    /** **/
    public void push_front(org.ogre4j.IProfiler.IProfileInstance val);

    /** **/
    public void remove(org.ogre4j.IProfiler.IProfileInstance val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IProfileFrameList extends INativeObject, org.std.Ilist< org.ogre4j.IProfiler.IProfileFrame > {

    /** **/
    public void assign(int num, org.ogre4j.IProfiler.IProfileFrame val);

    /** **/
    public org.ogre4j.IProfiler.IProfileFrame back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IProfiler.IProfileFrame front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IProfiler.IProfileFrame val);

    /** **/
    public void push_front(org.ogre4j.IProfiler.IProfileFrame val);

    /** **/
    public void remove(org.ogre4j.IProfiler.IProfileFrame val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IProfileHistoryList extends INativeObject, org.std.Ilist< org.ogre4j.IProfiler.IProfileHistory > {

    /** **/
    public void assign(int num, org.ogre4j.IProfiler.IProfileHistory val);

    /** **/
    public org.ogre4j.IProfiler.IProfileHistory back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IProfiler.IProfileHistory front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IProfiler.IProfileHistory val);

    /** **/
    public void push_front(org.ogre4j.IProfiler.IProfileHistory val);

    /** **/
    public void remove(org.ogre4j.IProfiler.IProfileHistory val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
public interface IProfileHistoryMap extends INativeObject, org.std.Imap {

// this type is ignored
}
public interface IDisabledProfileMap extends INativeObject, org.std.Imap< String, Boolean > {

    /** **/
    public void clear();

    /** **/
    public int count(String key);

    /** **/
    public boolean empty();

    /** **/
    public int erase(String key);

    /** **/
    public int max_size();

    /** **/
    public int size();

    /** **/
    public BooleanPointer get(String key);

    /** **/
    public void insert(String key, BooleanPointer value);

}
public interface IProfileBarList extends INativeObject, org.std.Ilist< org.ogre4j.IOverlayElement > {

    /** **/
    public void assign(int num, org.ogre4j.IOverlayElement val);

    /** **/
    public org.ogre4j.IOverlayElement back();

    /** **/
    public void clear();

    /** **/
    public boolean empty();

    /** **/
    public org.ogre4j.IOverlayElement front();

    /** **/
    public int max_size();

    /** **/
    public void pop_back();

    /** **/
    public void pop_front();

    /** **/
    public void push_back(org.ogre4j.IOverlayElement val);

    /** **/
    public void push_front(org.ogre4j.IOverlayElement val);

    /** **/
    public void remove(org.ogre4j.IOverlayElement val);

    /** **/
    public void reverse();

    /** **/
    public int size();

    /** **/
    public void unique();

}
    /** 
    Sets the timer for the profiler **/
    public void setTimer(org.ogre4j.ITimer t);

    /** 
    Retrieves the timer for the profiler **/
    public org.ogre4j.ITimer getTimer();

    /** 
    Begins a profile **/
    public void beginProfile(String profileName);

    /** 
    Ends a profile **/
    public void endProfile(String profileName);

    /** 
    Sets whether this profiler is enabled. Only takes effect after the the frame has ended. **/
    public void setEnabled(boolean enabled);

    /** 
    Gets whether this profiler is enabled **/
    public boolean getEnabled();

    /** 
    Enables a previously disabled profile **/
    public void enableProfile(String profileName);

    /** 
    Disables a profile **/
    public void disableProfile(String profileName);

    /** 
    Returns true if the specified profile reaches a new frame time maximum **/
    public boolean watchForMax(String profileName);

    /** 
    Returns true if the specified profile reaches a new frame time minimum **/
    public boolean watchForMin(String profileName);

    /** 
    Returns true if the specified profile goes over or under the given limit frame time **/
    public boolean watchForLimit(String profileName, float limit, boolean greaterThan);

    /** 
    Outputs current profile statistics to the log **/
    public void logResults();

    /** 
    Clears the profiler statistics **/
    public void reset();

    /** 
    Sets the  so the display of results are updated ever n frames **/
    public void setUpdateDisplayFrequency(long freq);

    /** 
    Gets the frequency that the  display is updated **/
    public long getUpdateDisplayFrequency();

}
