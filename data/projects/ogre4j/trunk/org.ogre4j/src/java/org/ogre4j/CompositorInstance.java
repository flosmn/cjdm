/**
 *  This source file is generated by XBiG (The XSLT Bindings Generator)
 *  For the latest info, see http://sourceforge.net/projects/xbig/
 * 
 *  Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
 *  Also see acknowledgements in Readme.html
 * 
 *  This program is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
 *  http://www.gnu.org/copyleft/lesser.txt.
 * 
 *  Machine generated file
 */

        

package org.ogre4j;


import org.xbig.base.*;
public class CompositorInstance extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance {
static { System.loadLibrary("ogre4j");}
public static class Listener extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.IListener {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Listener(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Listener(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Listener(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** 
    Notification of when a render target operation involving a material (like rendering a quad) is compiled, so that miscellaneous parameters that are different per  instance can be set up. **/
    public void notifyMaterialSetup(long pass_id, org.ogre4j.IMaterialPtr mat) {
        _notifyMaterialSetup__uint32vMaterialPtrr(this.object.pointer, pass_id,  mat.getInstancePointer().pointer);
    }

    private native void _notifyMaterialSetup__uint32vMaterialPtrr(long _pointer_, long pass_id, long mat);

    /** 
    Notification before a render target operation involving a material (like rendering a quad), so that material parameters can be varied. **/
    public void notifyMaterialRender(long pass_id, org.ogre4j.IMaterialPtr mat) {
        _notifyMaterialRender__uint32vMaterialPtrr(this.object.pointer, pass_id,  mat.getInstancePointer().pointer);
    }

    private native void _notifyMaterialRender__uint32vMaterialPtrr(long _pointer_, long pass_id, long mat);

    /** **/
    public Listener() {
         super( new org.xbig.base.InstancePointer(__createListener()), false);
    }

    private native static long __createListener();

}
public static class RenderSystemOperation extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.IRenderSystemOperation {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderSystemOperation(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderSystemOperation(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderSystemOperation(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public void execute(org.ogre4j.ISceneManager sm, org.ogre4j.IRenderSystem rs) {
        _execute__SceneManagerpRenderSystemp(this.object.pointer, sm.getInstancePointer().pointer,  rs.getInstancePointer().pointer);
    }

    private native void _execute__SceneManagerpRenderSystemp(long _pointer_, long sm, long rs);

}
public static class TargetOperation extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.ITargetOperation {
static { System.loadLibrary("ogre4j");}
public static class RenderQueueBitSet extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.ITargetOperation.IRenderQueueBitSet {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderQueueBitSet(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderQueueBitSet(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderQueueBitSet(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderQueueBitSet() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public boolean any() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public int count() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public boolean none() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public int size() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public boolean test(int pos) {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public String to_string() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



    /** **/
    public long to_ulong() {
            throw new UnsupportedOperationException("This type is on ignore list!");
    }



}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public TargetOperation(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected TargetOperation(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public TargetOperation(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public TargetOperation() {
         super( new org.xbig.base.InstancePointer(__createTargetOperation()), false);
    }

    private native static long __createTargetOperation();

    /** **/
    public TargetOperation(org.ogre4j.IRenderTarget target) {
         super( new org.xbig.base.InstancePointer(__createTargetOperation__RenderTargetp( target.getInstancePointer().pointer)), false);
    }

    private native static long __createTargetOperation__RenderTargetp(long target);

    /** **/
    public org.ogre4j.IRenderTarget gettarget() {
         return new org.ogre4j.RenderTarget(new InstancePointer(_gettarget(this.object.pointer)));
    }

    private native long _gettarget(long _pointer_);

    /** **/
    public void settarget(org.ogre4j.IRenderTarget _jni_value_) {
        _settarget(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _settarget(long _pointer_, long _jni_value_);

    /** **/
    public int getcurrentQueueGroupID() {
         return _getcurrentQueueGroupID(this.object.pointer);
    }

    private native int _getcurrentQueueGroupID(long _pointer_);

    /** **/
    public void setcurrentQueueGroupID(int _jni_value_) {
        _setcurrentQueueGroupID(this.object.pointer, _jni_value_);
    }

    private native void _setcurrentQueueGroupID(long _pointer_, int _jni_value_);

    /** **/
    public void getrenderSystemOperations(org.ogre4j.ICompositorInstance.IRenderSystemOpPairs returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getrenderSystemOperations(this.object.pointer)), false);
    }

    private native long _getrenderSystemOperations(long _pointer_);

    /** **/
    public void setrenderSystemOperations(org.ogre4j.ICompositorInstance.IRenderSystemOpPairs _jni_value_) {
        _setrenderSystemOperations(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrenderSystemOperations(long _pointer_, long _jni_value_);

    /** **/
    public long getvisibilityMask() {
         return _getvisibilityMask(this.object.pointer);
    }

    private native long _getvisibilityMask(long _pointer_);

    /** **/
    public void setvisibilityMask(long _jni_value_) {
        _setvisibilityMask(this.object.pointer, _jni_value_);
    }

    private native void _setvisibilityMask(long _pointer_, long _jni_value_);

    /** **/
    public float getlodBias() {
         return _getlodBias(this.object.pointer);
    }

    private native float _getlodBias(long _pointer_);

    /** **/
    public void setlodBias(float _jni_value_) {
        _setlodBias(this.object.pointer, _jni_value_);
    }

    private native void _setlodBias(long _pointer_, float _jni_value_);

    /** **/
    public void getrenderQueues(org.ogre4j.ICompositorInstance.ITargetOperation.IRenderQueueBitSet returnValue) {
          returnValue.delete();
  returnValue.setInstancePointer(new InstancePointer(_getrenderQueues(this.object.pointer)), false);
    }

    private native long _getrenderQueues(long _pointer_);

    /** **/
    public void setrenderQueues(org.ogre4j.ICompositorInstance.ITargetOperation.IRenderQueueBitSet _jni_value_) {
        _setrenderQueues(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setrenderQueues(long _pointer_, long _jni_value_);

    /** **/
    public boolean getonlyInitial() {
         return _getonlyInitial(this.object.pointer);
    }

    private native boolean _getonlyInitial(long _pointer_);

    /** **/
    public void setonlyInitial(boolean _jni_value_) {
        _setonlyInitial(this.object.pointer, _jni_value_);
    }

    private native void _setonlyInitial(long _pointer_, boolean _jni_value_);

    /** **/
    public boolean gethasBeenRendered() {
         return _gethasBeenRendered(this.object.pointer);
    }

    private native boolean _gethasBeenRendered(long _pointer_);

    /** **/
    public void sethasBeenRendered(boolean _jni_value_) {
        _sethasBeenRendered(this.object.pointer, _jni_value_);
    }

    private native void _sethasBeenRendered(long _pointer_, boolean _jni_value_);

    /** **/
    public boolean getfindVisibleObjects() {
         return _getfindVisibleObjects(this.object.pointer);
    }

    private native boolean _getfindVisibleObjects(long _pointer_);

    /** **/
    public void setfindVisibleObjects(boolean _jni_value_) {
        _setfindVisibleObjects(this.object.pointer, _jni_value_);
    }

    private native void _setfindVisibleObjects(long _pointer_, boolean _jni_value_);

    /** **/
    public String getmaterialScheme() {
         return _getmaterialScheme(this.object.pointer);
    }

    private native String _getmaterialScheme(long _pointer_);

    /** **/
    public void setmaterialScheme(String _jni_value_) {
        _setmaterialScheme(this.object.pointer, _jni_value_);
    }

    private native void _setmaterialScheme(long _pointer_, String _jni_value_);

    /** **/
    public boolean getshadowsEnabled() {
         return _getshadowsEnabled(this.object.pointer);
    }

    private native boolean _getshadowsEnabled(long _pointer_);

    /** **/
    public void setshadowsEnabled(boolean _jni_value_) {
        _setshadowsEnabled(this.object.pointer, _jni_value_);
    }

    private native void _setshadowsEnabled(long _pointer_, boolean _jni_value_);

}
public static class QuadMaterialMap extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.IQuadMaterialMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public QuadMaterialMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected QuadMaterialMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public QuadMaterialMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public QuadMaterialMap() {
         super( new org.xbig.base.InstancePointer(__createQuadMaterialMap()), false);
    }

    private native static long __createQuadMaterialMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(int key) {
         return _count__iR(this.object.pointer, key);
    }

    private native int _count__iR(long _pointer_, int key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(int key) {
         return _erase__iR(this.object.pointer, key);
    }

    private native int _erase__iR(long _pointer_, int key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IMaterialPtr get(int key) {
         return new org.ogre4j.MaterialPtr(new InstancePointer(_get__iR(this.object.pointer, key)));
    }

    private native long _get__iR(long _pointer_, int key);

    /** **/
    public void insert(int key, org.ogre4j.IMaterialPtr value) {
        _insert__iROgre_MaterialPtrr(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__iROgre_MaterialPtrr(long _pointer_, int key, long value);

}
public static class RenderSystemOpPair extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.IRenderSystemOpPair {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderSystemOpPair(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderSystemOpPair(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderSystemOpPair(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public int getfirst() {
         return _getfirst(this.object.pointer);
    }

    private native int _getfirst(long _pointer_);

    /** **/
    public void setfirst(int _jni_value_) {
        _setfirst(this.object.pointer, _jni_value_);
    }

    private native void _setfirst(long _pointer_, int _jni_value_);

    /** **/
    public org.ogre4j.ICompositorInstance.IRenderSystemOperation getsecond() {
         return new org.ogre4j.CompositorInstance.RenderSystemOperation(new InstancePointer(_getsecond(this.object.pointer)));
    }

    private native long _getsecond(long _pointer_);

    /** **/
    public void setsecond(org.ogre4j.ICompositorInstance.IRenderSystemOperation _jni_value_) {
        _setsecond(this.object.pointer, _jni_value_.getInstancePointer().pointer);
    }

    private native void _setsecond(long _pointer_, long _jni_value_);

}
public static class RenderSystemOpPairs extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.IRenderSystemOpPairs {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public RenderSystemOpPairs(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected RenderSystemOpPairs(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public RenderSystemOpPairs(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public RenderSystemOpPairs() {
         super( new org.xbig.base.InstancePointer(__createRenderSystemOpPairs()), false);
    }

    private native static long __createRenderSystemOpPairs();

    /** **/
    public void assign(int num, org.ogre4j.ICompositorInstance.IRenderSystemOpPair val) {
        _assign__ivOgre_CompositorInstance_RenderSystemOpPairR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_CompositorInstance_RenderSystemOpPairR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ICompositorInstance.IRenderSystemOpPair at(int loc) {
         return new org.ogre4j.CompositorInstance.RenderSystemOpPair(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ICompositorInstance.IRenderSystemOpPair back() {
         return new org.ogre4j.CompositorInstance.RenderSystemOpPair(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ICompositorInstance.IRenderSystemOpPair front() {
         return new org.ogre4j.CompositorInstance.RenderSystemOpPair(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ICompositorInstance.IRenderSystemOpPair val) {
        _push_back__Ogre_CompositorInstance_RenderSystemOpPairR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_CompositorInstance_RenderSystemOpPairR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
public static class CompiledState extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.ICompiledState {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CompiledState(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CompiledState(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CompiledState(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CompiledState() {
         super( new org.xbig.base.InstancePointer(__createCompiledState()), false);
    }

    private native static long __createCompiledState();

    /** **/
    public void assign(int num, org.ogre4j.ICompositorInstance.ITargetOperation val) {
        _assign__ivOgre_CompositorInstance_TargetOperationR(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_CompositorInstance_TargetOperationR(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ICompositorInstance.ITargetOperation at(int loc) {
         return new org.ogre4j.CompositorInstance.TargetOperation(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ICompositorInstance.ITargetOperation back() {
         return new org.ogre4j.CompositorInstance.TargetOperation(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ICompositorInstance.ITargetOperation front() {
         return new org.ogre4j.CompositorInstance.TargetOperation(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ICompositorInstance.ITargetOperation val) {
        _push_back__Ogre_CompositorInstance_TargetOperationR(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_CompositorInstance_TargetOperationR(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
private static class LocalTextureMap extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.ILocalTextureMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LocalTextureMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LocalTextureMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LocalTextureMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LocalTextureMap() {
         super( new org.xbig.base.InstancePointer(__createLocalTextureMap()), false);
    }

    private native static long __createLocalTextureMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.ITexturePtr get(String key) {
         return new org.ogre4j.TexturePtr(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.ITexturePtr value) {
        _insert__sROgre_TexturePtrr(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_TexturePtrr(long _pointer_, String key, long value);

}
private static class LocalMRTMap extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.ILocalMRTMap {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public LocalMRTMap(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected LocalMRTMap(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public LocalMRTMap(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public LocalMRTMap() {
         super( new org.xbig.base.InstancePointer(__createLocalMRTMap()), false);
    }

    private native static long __createLocalMRTMap();

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public int count(String key) {
         return _count__sR(this.object.pointer, key);
    }

    private native int _count__sR(long _pointer_, String key);

    /** **/
    public boolean empty() {
         return _empty_const(this.object.pointer);
    }

    private native boolean _empty_const(long _pointer_);

    /** **/
    public int erase(String key) {
         return _erase__sR(this.object.pointer, key);
    }

    private native int _erase__sR(long _pointer_, String key);

    /** **/
    public int max_size() {
         return _max_size_const(this.object.pointer);
    }

    private native int _max_size_const(long _pointer_);

    /** **/
    public int size() {
         return _size_const(this.object.pointer);
    }

    private native int _size_const(long _pointer_);

    /** **/
    public org.ogre4j.IMultiRenderTarget get(String key) {
         return new org.ogre4j.MultiRenderTarget(new InstancePointer(_get__sR(this.object.pointer, key)));
    }

    private native long _get__sR(long _pointer_, String key);

    /** **/
    public void insert(String key, org.ogre4j.IMultiRenderTarget value) {
        _insert__sROgre_MultiRenderTargetp(this.object.pointer, key,  value.getInstancePointer().pointer);
    }

    private native void _insert__sROgre_MultiRenderTargetp(long _pointer_, String key, long value);

}
private static class Listeners extends org.xbig.base.NativeObject implements org.ogre4j.ICompositorInstance.IListeners {
static { System.loadLibrary("ogre4j");}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public Listeners(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected Listeners(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public Listeners(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public Listeners() {
         super( new org.xbig.base.InstancePointer(__createListeners()), false);
    }

    private native static long __createListeners();

    /** **/
    public void assign(int num, org.ogre4j.ICompositorInstance.IListener val) {
        _assign__ivOgre_CompositorInstance_ListenerP(this.object.pointer, num,  val.getInstancePointer().pointer);
    }

    private native void _assign__ivOgre_CompositorInstance_ListenerP(long _pointer_, int num, long val);

    /** **/
    public org.ogre4j.ICompositorInstance.IListener at(int loc) {
         return new org.ogre4j.CompositorInstance.Listener(new InstancePointer(_at__iv(this.object.pointer, loc)));
    }

    private native long _at__iv(long _pointer_, int loc);

    /** **/
    public org.ogre4j.ICompositorInstance.IListener back() {
         return new org.ogre4j.CompositorInstance.Listener(new InstancePointer(_back(this.object.pointer)));
    }

    private native long _back(long _pointer_);

    /** **/
    public int capacity() {
         return _capacity(this.object.pointer);
    }

    private native int _capacity(long _pointer_);

    /** **/
    public void clear() {
        _clear(this.object.pointer);
    }

    private native void _clear(long _pointer_);

    /** **/
    public boolean empty() {
         return _empty(this.object.pointer);
    }

    private native boolean _empty(long _pointer_);

    /** **/
    public org.ogre4j.ICompositorInstance.IListener front() {
         return new org.ogre4j.CompositorInstance.Listener(new InstancePointer(_front(this.object.pointer)));
    }

    private native long _front(long _pointer_);

    /** **/
    public int max_size() {
         return _max_size(this.object.pointer);
    }

    private native int _max_size(long _pointer_);

    /** **/
    public void pop_back() {
        _pop_back(this.object.pointer);
    }

    private native void _pop_back(long _pointer_);

    /** **/
    public void push_back(org.ogre4j.ICompositorInstance.IListener val) {
        _push_back__Ogre_CompositorInstance_ListenerP(this.object.pointer, val.getInstancePointer().pointer);
    }

    private native void _push_back__Ogre_CompositorInstance_ListenerP(long _pointer_, long val);

    /** **/
    public void reserve(int size) {
        _reserve__iV(this.object.pointer, size);
    }

    private native void _reserve__iV(long _pointer_, int size);

    /** **/
    public int size() {
         return _size(this.object.pointer);
    }

    private native int _size(long _pointer_);

}
 
        
	/**
	 * 
	 * This constructor is public for internal useage only!
	 * Do not use it!
	 * 
	 */
	public CompositorInstance(org.xbig.base.InstancePointer p) {
		super(p);
	}

	/**
	 * 
	 * Creates a Java wrapper object for an existing C++ object.
	 * If remote is set to 'true' this object cannot be deleted in Java.
	 * 
	 */
	protected CompositorInstance(org.xbig.base.InstancePointer p, boolean remote) {
		super(p, remote);
	}

    /**
     * Allows creation of Java objects without C++ objects.
     * 
     * @see org.xbig.base.WithoutNativeObject
     * @see org.xbig.base.INativeObject#disconnectFromNativeObject()
     */
	public CompositorInstance(org.xbig.base.WithoutNativeObject val) {
		super(val);
	}

	public void delete() {
		if (this.remote) {
	       throw new RuntimeException("can't dispose object created by native library");
	    }

		if(!this.deleted) {
		    __delete(object.pointer);
		    this.deleted = true;
		   	this.object.pointer = 0;
		}
	}

	public void finalize() {
		if(!this.remote && !this.deleted) {
			delete();
		}
	}
	
			
	private final native void __delete(long _pointer_);	



          /** **/
    public CompositorInstance(org.ogre4j.ICompositor filter, org.ogre4j.ICompositionTechnique technique, org.ogre4j.ICompositorChain chain) {
         super( new org.xbig.base.InstancePointer(__createCompositorInstance__CompositorpCompositionTechniquepCompositorChainp( filter.getInstancePointer().pointer,  technique.getInstancePointer().pointer,  chain.getInstancePointer().pointer)), false);
    }

    private native static long __createCompositorInstance__CompositorpCompositionTechniquepCompositorChainp(long filter, long technique, long chain);

    /** 
    Set enabled flag. The compositor instance will only render if it is enabled, otherwise it is pass-through. **/
    public void setEnabled(boolean value) {
        _setEnabled__bv(this.object.pointer, value);
    }

    private native void _setEnabled__bv(long _pointer_, boolean value);

    /** 
    Get enabled flag. **/
    public boolean getEnabled() {
         return _getEnabled(this.object.pointer);
    }

    private native boolean _getEnabled(long _pointer_);

    /** 
    Get the instance name for a local texture. **/
    public String getTextureInstanceName(String name, int mrtIndex) {
         return _getTextureInstanceName__StringRiv(this.object.pointer, name,  mrtIndex);
    }

    private native String _getTextureInstanceName__StringRiv(long _pointer_, String name, int mrtIndex);

    /** 
    Get the render target for a given render texture name. **/
    public org.ogre4j.IRenderTarget getRenderTarget(String name) {
         return new org.ogre4j.RenderTarget(new InstancePointer(_getRenderTarget__StringR(this.object.pointer, name)));
    }

    private native long _getRenderTarget__StringR(long _pointer_, String name);

    /** 
    Recursively collect target states (except for final ). **/
    public void _compileTargetOperations(org.ogre4j.ICompositorInstance.ICompiledState compiledState) {
        __compileTargetOperations__CompiledStater(this.object.pointer, compiledState.getInstancePointer().pointer);
    }

    private native void __compileTargetOperations__CompiledStater(long _pointer_, long compiledState);

    /** 
    Compile the final (output) operation. This is done separately because this is combined with the input in chained filters. **/
    public void _compileOutputOperation(org.ogre4j.ICompositorInstance.ITargetOperation finalState) {
        __compileOutputOperation__TargetOperationr(this.object.pointer, finalState.getInstancePointer().pointer);
    }

    private native void __compileOutputOperation__TargetOperationr(long _pointer_, long finalState);

    /** 
    Get  of which this is an instance **/
    public org.ogre4j.ICompositor getCompositor() {
         return new org.ogre4j.Compositor(new InstancePointer(_getCompositor(this.object.pointer)));
    }

    private native long _getCompositor(long _pointer_);

    /** 
    Get  used by this instance **/
    public org.ogre4j.ICompositionTechnique getTechnique() {
         return new org.ogre4j.CompositionTechnique(new InstancePointer(_getTechnique(this.object.pointer)));
    }

    private native long _getTechnique(long _pointer_);

    /** 
    Get Chain that this instance is part of **/
    public org.ogre4j.ICompositorChain getChain() {
         return new org.ogre4j.CompositorChain(new InstancePointer(_getChain(this.object.pointer)));
    }

    private native long _getChain(long _pointer_);

    /** 
    Add a listener. Listeners provide an interface to "listen in" to to render system operations executed by this  so that materials can be programmatically set up. **/
    public void addListener(org.ogre4j.ICompositorInstance.IListener l) {
        _addListener__Listenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _addListener__Listenerp(long _pointer_, long l);

    /** 
    Remove a listener. **/
    public void removeListener(org.ogre4j.ICompositorInstance.IListener l) {
        _removeListener__Listenerp(this.object.pointer, l.getInstancePointer().pointer);
    }

    private native void _removeListener__Listenerp(long _pointer_, long l);

    /** 
    Notify listeners of a material compilation. **/
    public void _fireNotifyMaterialSetup(long pass_id, org.ogre4j.IMaterialPtr mat) {
        __fireNotifyMaterialSetup__uint32vMaterialPtrr(this.object.pointer, pass_id,  mat.getInstancePointer().pointer);
    }

    private native void __fireNotifyMaterialSetup__uint32vMaterialPtrr(long _pointer_, long pass_id, long mat);

    /** 
    Notify listeners of a material render. **/
    public void _fireNotifyMaterialRender(long pass_id, org.ogre4j.IMaterialPtr mat) {
        __fireNotifyMaterialRender__uint32vMaterialPtrr(this.object.pointer, pass_id,  mat.getInstancePointer().pointer);
    }

    private native void __fireNotifyMaterialRender__uint32vMaterialPtrr(long _pointer_, long pass_id, long mat);

}
