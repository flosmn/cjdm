///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_InstancedGeometry_00024QueuedSubMesh.h"

// import header files of original library
#include <OgreInstancedGeometry.h>



/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     QueuedSubMesh()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::QueuedSubMesh::QueuedSubMesh
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1_1createQueuedSubMesh (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::InstancedGeometry::QueuedSubMesh 
   
   // parameter conversions 
   
   // create new instance of class Ogre::InstancedGeometry::QueuedSubMesh 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = new Ogre::InstancedGeometry::QueuedSubMesh(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::InstancedGeometry::QueuedSubMesh::QueuedSubMesh */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::InstancedGeometry::QueuedSubMesh::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::InstancedGeometry::QueuedSubMesh 
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::InstancedGeometry::QueuedSubMesh::__delete */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getsubmesh()
 * Type:       getter for public attribute
 * Definition: SubMesh* Ogre::InstancedGeometry::QueuedSubMesh::submesh
 * Signature:  ()Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getsubmesh (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh* _cpp_result = _cpp_this->submesh; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubMesh* Ogre::InstancedGeometry::QueuedSubMesh::submesh */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setsubmesh()
 * Type:       setter for public attribute
 * Definition: SubMesh* Ogre::InstancedGeometry::QueuedSubMesh::submesh
 * Signature:  (Ogre_SubMesh)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setsubmesh (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::SubMesh* _cpp__jni_value_ = reinterpret_cast< Ogre::SubMesh* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->submesh = _cpp__jni_value_;
} /* SubMesh* Ogre::InstancedGeometry::QueuedSubMesh::submesh */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getgeometryLodList()
 * Type:       getter for public attribute
 * Definition: SubMeshLodGeometryLinkList* Ogre::InstancedGeometry::QueuedSubMesh::geometryLodList
 * Signature:  ()Ogre_InstancedGeometry_SubMeshLodGeometryLinkList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getgeometryLodList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::SubMeshLodGeometryLinkList* _cpp_result = _cpp_this->geometryLodList; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubMeshLodGeometryLinkList* Ogre::InstancedGeometry::QueuedSubMesh::geometryLodList */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setgeometryLodList()
 * Type:       setter for public attribute
 * Definition: SubMeshLodGeometryLinkList* Ogre::InstancedGeometry::QueuedSubMesh::geometryLodList
 * Signature:  (Ogre_InstancedGeometry_SubMeshLodGeometryLinkList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setgeometryLodList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::InstancedGeometry::SubMeshLodGeometryLinkList* _cpp__jni_value_ = reinterpret_cast< Ogre::InstancedGeometry::SubMeshLodGeometryLinkList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->geometryLodList = _cpp__jni_value_;
} /* SubMeshLodGeometryLinkList* Ogre::InstancedGeometry::QueuedSubMesh::geometryLodList */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getmaterialName()
 * Type:       getter for public attribute
 * Definition: String Ogre::InstancedGeometry::QueuedSubMesh::materialName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getmaterialName (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->materialName; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::InstancedGeometry::QueuedSubMesh::materialName */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setmaterialName()
 * Type:       setter for public attribute
 * Definition: String Ogre::InstancedGeometry::QueuedSubMesh::materialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setmaterialName (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->materialName = _cpp__jni_value_;
} /* String Ogre::InstancedGeometry::QueuedSubMesh::materialName */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getposition()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::InstancedGeometry::QueuedSubMesh::position
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getposition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->position); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::InstancedGeometry::QueuedSubMesh::position */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setposition()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::InstancedGeometry::QueuedSubMesh::position
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setposition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->position = *_cpp__jni_value_;
} /* Vector3 Ogre::InstancedGeometry::QueuedSubMesh::position */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getorientation()
 * Type:       getter for public attribute
 * Definition: Quaternion Ogre::InstancedGeometry::QueuedSubMesh::orientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getorientation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->orientation); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::InstancedGeometry::QueuedSubMesh::orientation */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setorientation()
 * Type:       setter for public attribute
 * Definition: Quaternion Ogre::InstancedGeometry::QueuedSubMesh::orientation
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setorientation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Quaternion* _cpp__jni_value_ = reinterpret_cast< Ogre::Quaternion* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->orientation = *_cpp__jni_value_;
} /* Quaternion Ogre::InstancedGeometry::QueuedSubMesh::orientation */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getscale()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::InstancedGeometry::QueuedSubMesh::scale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getscale (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->scale); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::InstancedGeometry::QueuedSubMesh::scale */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setscale()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::InstancedGeometry::QueuedSubMesh::scale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setscale (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->scale = *_cpp__jni_value_;
} /* Vector3 Ogre::InstancedGeometry::QueuedSubMesh::scale */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getworldBounds()
 * Type:       getter for public attribute
 * Definition: AxisAlignedBox Ogre::InstancedGeometry::QueuedSubMesh::worldBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getworldBounds (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = new Ogre::AxisAlignedBox( _cpp_this->worldBounds); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AxisAlignedBox Ogre::InstancedGeometry::QueuedSubMesh::worldBounds */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setworldBounds()
 * Type:       setter for public attribute
 * Definition: AxisAlignedBox Ogre::InstancedGeometry::QueuedSubMesh::worldBounds
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setworldBounds (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::AxisAlignedBox* _cpp__jni_value_ = reinterpret_cast< Ogre::AxisAlignedBox* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->worldBounds = *_cpp__jni_value_;
} /* AxisAlignedBox Ogre::InstancedGeometry::QueuedSubMesh::worldBounds */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     getID()
 * Type:       getter for public attribute
 * Definition: unsigned int Ogre::InstancedGeometry::QueuedSubMesh::ID
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1getID (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->ID; 
   return _cpp_result;
} /* unsigned int Ogre::InstancedGeometry::QueuedSubMesh::ID */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024QueuedSubMesh
 * Method:     setID()
 * Type:       setter for public attribute
 * Definition: unsigned int Ogre::InstancedGeometry::QueuedSubMesh::ID
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024QueuedSubMesh__1setID (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::QueuedSubMesh* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::QueuedSubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ID = _cpp__jni_value_;
} /* unsigned int Ogre::InstancedGeometry::QueuedSubMesh::ID */
