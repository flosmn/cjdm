///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_FloatRect.h"

// import header files of original library
#include <OgreCommon.h>



/*
 * Class:      org.ogre4j.FloatRect
 * Method:     FloatRect()
 * Type:       constructor
 * Definition: Ogre::TRect< T >::TRect
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FloatRect__1_1createFloatRect (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::FloatRect 
   
   // parameter conversions 
   
   // create new instance of class Ogre::FloatRect 
   Ogre::FloatRect* _cpp_this = new Ogre::FloatRect(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TRect< T >::TRect */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     FloatRect()
 * Type:       constructor
 * Definition: Ogre::TRect< T >::TRect
 * Signature:  (FFFF)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FloatRect__1_1createFloatRect_1_1FrFrFrFr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong l, 
  jlong t, 
  jlong r, 
  jlong b
)
{
   // constructor of class Ogre::FloatRect 
   
   // parameter conversions 
  float* _cpp_l = reinterpret_cast<float*>(l);
  float* _cpp_t = reinterpret_cast<float*>(t);
  float* _cpp_r = reinterpret_cast<float*>(r);
  float* _cpp_b = reinterpret_cast<float*>(b); 
   
   // create new instance of class Ogre::FloatRect 
   Ogre::FloatRect* _cpp_this = new Ogre::FloatRect(*_cpp_l, *_cpp_t, *_cpp_r, *_cpp_b); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TRect< T >::TRect */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: TRect& Ogre::TRect< T >::operator=
 * Signature:  (Ogre_TRect)Ogre_TRect
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FloatRect__1operatorAssignment_1_1_1Ogre_1TRectr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong o
)
{
   // parameter conversions 
  Ogre::FloatRect* _cpp_o = reinterpret_cast< Ogre::FloatRect* >(o); 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this = reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FloatRect* _cpp_result = & _cpp_this->operator=(*_cpp_o) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TRect& Ogre::TRect< T >::operator= */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     width()
 * Type:       non-virtual method
 * Definition: T Ogre::TRect< T >::width
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_FloatRect__1width_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FloatRect* _cpp_this = reinterpret_cast<const Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->width() ; 
   return _cpp_result;
} /* T Ogre::TRect< T >::width */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     height()
 * Type:       non-virtual method
 * Definition: T Ogre::TRect< T >::height
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_FloatRect__1height_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FloatRect* _cpp_this = reinterpret_cast<const Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->height() ; 
   return _cpp_result;
} /* T Ogre::TRect< T >::height */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::FloatRect::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FloatRect__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::FloatRect 
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this = reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::FloatRect::__delete */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     getleft()
 * Type:       getter for public attribute
 * Definition: T Ogre::TRect< T >::left
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_FloatRect__1getleft (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this = reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->left; 
   return _cpp_result;
} /* T Ogre::TRect< T >::left */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     setleft()
 * Type:       setter for public attribute
 * Definition: T Ogre::TRect< T >::left
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FloatRect__1setleft (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this =reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->left = _cpp__jni_value_;
} /* T Ogre::TRect< T >::left */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     gettop()
 * Type:       getter for public attribute
 * Definition: T Ogre::TRect< T >::top
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_FloatRect__1gettop (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this = reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->top; 
   return _cpp_result;
} /* T Ogre::TRect< T >::top */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     settop()
 * Type:       setter for public attribute
 * Definition: T Ogre::TRect< T >::top
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FloatRect__1settop (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this =reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->top = _cpp__jni_value_;
} /* T Ogre::TRect< T >::top */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     getright()
 * Type:       getter for public attribute
 * Definition: T Ogre::TRect< T >::right
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_FloatRect__1getright (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this = reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->right; 
   return _cpp_result;
} /* T Ogre::TRect< T >::right */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     setright()
 * Type:       setter for public attribute
 * Definition: T Ogre::TRect< T >::right
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FloatRect__1setright (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this =reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->right = _cpp__jni_value_;
} /* T Ogre::TRect< T >::right */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     getbottom()
 * Type:       getter for public attribute
 * Definition: T Ogre::TRect< T >::bottom
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_FloatRect__1getbottom (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this = reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->bottom; 
   return _cpp_result;
} /* T Ogre::TRect< T >::bottom */


/*
 * Class:      org.ogre4j.FloatRect
 * Method:     setbottom()
 * Type:       setter for public attribute
 * Definition: T Ogre::TRect< T >::bottom
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FloatRect__1setbottom (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::FloatRect* _cpp_this =reinterpret_cast<Ogre::FloatRect*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bottom = _cpp__jni_value_;
} /* T Ogre::TRect< T >::bottom */
