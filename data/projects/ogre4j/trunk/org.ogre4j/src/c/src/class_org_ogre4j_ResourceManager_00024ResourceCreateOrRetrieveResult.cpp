///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ResourceManager_00024ResourceCreateOrRetrieveResult.h"

// import header files of original library
#include <map>
#include <OgreResourceManager.h>



/*
 * Class:      org.ogre4j.ResourceManager.00024ResourceCreateOrRetrieveResult
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ResourceManager::ResourceCreateOrRetrieveResult::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceManager_00024ResourceCreateOrRetrieveResult__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ResourceManager::ResourceCreateOrRetrieveResult 
   // cast pointer to C++ object 
   Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_this = reinterpret_cast<Ogre::ResourceManager::ResourceCreateOrRetrieveResult*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ResourceManager::ResourceCreateOrRetrieveResult::__delete */


/*
 * Class:      org.ogre4j.ResourceManager.00024ResourceCreateOrRetrieveResult
 * Method:     getfirst()
 * Type:       getter for public attribute
 * Definition: F std::pair::first
 * Signature:  ()Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceManager_00024ResourceCreateOrRetrieveResult__1getfirst (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_this = reinterpret_cast<Ogre::ResourceManager::ResourceCreateOrRetrieveResult*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->first); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* F std::pair::first */


/*
 * Class:      org.ogre4j.ResourceManager.00024ResourceCreateOrRetrieveResult
 * Method:     setfirst()
 * Type:       setter for public attribute
 * Definition: F std::pair::first
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceManager_00024ResourceCreateOrRetrieveResult__1setfirst (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::ResourcePtr* _cpp__jni_value_ = reinterpret_cast< Ogre::ResourcePtr* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_this =reinterpret_cast<Ogre::ResourceManager::ResourceCreateOrRetrieveResult*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->first = *_cpp__jni_value_;
} /* F std::pair::first */


/*
 * Class:      org.ogre4j.ResourceManager.00024ResourceCreateOrRetrieveResult
 * Method:     getsecond()
 * Type:       getter for public attribute
 * Definition: S std::pair::second
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ResourceManager_00024ResourceCreateOrRetrieveResult__1getsecond (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_this = reinterpret_cast<Ogre::ResourceManager::ResourceCreateOrRetrieveResult*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->second; 
   return _cpp_result ? 1 : 0;
} /* S std::pair::second */


/*
 * Class:      org.ogre4j.ResourceManager.00024ResourceCreateOrRetrieveResult
 * Method:     setsecond()
 * Type:       setter for public attribute
 * Definition: S std::pair::second
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceManager_00024ResourceCreateOrRetrieveResult__1setsecond (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_this =reinterpret_cast<Ogre::ResourceManager::ResourceCreateOrRetrieveResult*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->second = _cpp__jni_value_;
} /* S std::pair::second */
