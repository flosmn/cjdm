///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_TempBlendedBufferInfo.h"

// import header files of original library
#include <OgreHardwareBufferManager.h>



/*
 * Class:      org.ogre4j.TempBlendedBufferInfo
 * Method:     extractFrom()
 * Type:       non-virtual method
 * Definition: void Ogre::TempBlendedBufferInfo::extractFrom
 * Signature:  (Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TempBlendedBufferInfo__1extractFrom_1_1VertexDataP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceData
)
{
   // parameter conversions 
  const Ogre::VertexData* _cpp_sourceData = reinterpret_cast< const Ogre::VertexData* >(sourceData); 
   
   // cast pointer to C++ object 
   Ogre::TempBlendedBufferInfo* _cpp_this = reinterpret_cast<Ogre::TempBlendedBufferInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extractFrom(_cpp_sourceData);
} /* void Ogre::TempBlendedBufferInfo::extractFrom */


/*
 * Class:      org.ogre4j.TempBlendedBufferInfo
 * Method:     checkoutTempCopies()
 * Type:       non-virtual method
 * Definition: void Ogre::TempBlendedBufferInfo::checkoutTempCopies
 * Signature:  (ZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TempBlendedBufferInfo__1checkoutTempCopies_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean positions, 
  jboolean normals
)
{
   // parameter conversions 
  bool _cpp_positions = positions ? true : false;
  bool _cpp_normals = normals ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TempBlendedBufferInfo* _cpp_this = reinterpret_cast<Ogre::TempBlendedBufferInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->checkoutTempCopies(_cpp_positions, _cpp_normals);
} /* void Ogre::TempBlendedBufferInfo::checkoutTempCopies */


/*
 * Class:      org.ogre4j.TempBlendedBufferInfo
 * Method:     bindTempCopies()
 * Type:       non-virtual method
 * Definition: void Ogre::TempBlendedBufferInfo::bindTempCopies
 * Signature:  (Ogre_VertexDataZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TempBlendedBufferInfo__1bindTempCopies_1_1VertexDatapbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong targetData, 
  jboolean suppressHardwareUpload
)
{
   // parameter conversions 
  Ogre::VertexData* _cpp_targetData = reinterpret_cast< Ogre::VertexData* >(targetData);
  bool _cpp_suppressHardwareUpload = suppressHardwareUpload ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TempBlendedBufferInfo* _cpp_this = reinterpret_cast<Ogre::TempBlendedBufferInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bindTempCopies(_cpp_targetData, _cpp_suppressHardwareUpload);
} /* void Ogre::TempBlendedBufferInfo::bindTempCopies */


/*
 * Class:      org.ogre4j.TempBlendedBufferInfo
 * Method:     licenseExpired()
 * Type:       virtual method
 * Definition: void Ogre::TempBlendedBufferInfo::licenseExpired
 * Signature:  (Ogre_HardwareBuffer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TempBlendedBufferInfo__1licenseExpired_1_1HardwareBufferp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong buffer
)
{
   // parameter conversions 
  Ogre::HardwareBuffer* _cpp_buffer = reinterpret_cast< Ogre::HardwareBuffer* >(buffer); 
   
   // cast pointer to C++ object 
   Ogre::TempBlendedBufferInfo* _cpp_this = reinterpret_cast<Ogre::TempBlendedBufferInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->licenseExpired(_cpp_buffer);
} /* void Ogre::TempBlendedBufferInfo::licenseExpired */


/*
 * Class:      org.ogre4j.TempBlendedBufferInfo
 * Method:     buffersCheckedOut()
 * Type:       non-virtual method
 * Definition: bool Ogre::TempBlendedBufferInfo::buffersCheckedOut
 * Signature:  (ZZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TempBlendedBufferInfo__1buffersCheckedOut_1_1bvbv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean positions, 
  jboolean normals
)
{
   // parameter conversions 
  bool _cpp_positions = positions ? true : false;
  bool _cpp_normals = normals ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::TempBlendedBufferInfo* _cpp_this = reinterpret_cast<const Ogre::TempBlendedBufferInfo*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->buffersCheckedOut(_cpp_positions, _cpp_normals) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TempBlendedBufferInfo::buffersCheckedOut */


/*
 * Class:      org.ogre4j.TempBlendedBufferInfo
 * Method:     TempBlendedBufferInfo()
 * Type:       constructor
 * Definition: Ogre::TempBlendedBufferInfo::TempBlendedBufferInfo
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TempBlendedBufferInfo__1_1createTempBlendedBufferInfo (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::TempBlendedBufferInfo 
   
   // parameter conversions 
   
   // create new instance of class Ogre::TempBlendedBufferInfo 
   Ogre::TempBlendedBufferInfo* _cpp_this = new Ogre::TempBlendedBufferInfo(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TempBlendedBufferInfo::TempBlendedBufferInfo */


/*
 * Class:      org.ogre4j.TempBlendedBufferInfo
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::TempBlendedBufferInfo::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TempBlendedBufferInfo__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::TempBlendedBufferInfo 
   // cast pointer to C++ object 
   Ogre::TempBlendedBufferInfo* _cpp_this = reinterpret_cast<Ogre::TempBlendedBufferInfo*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::TempBlendedBufferInfo::__delete */
