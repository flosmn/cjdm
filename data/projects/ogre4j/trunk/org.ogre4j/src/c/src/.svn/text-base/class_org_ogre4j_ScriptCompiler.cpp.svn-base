///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ScriptCompiler.h"

// import header files of original library
#include <OgreScriptCompiler.h>



/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     ScriptCompiler()
 * Type:       constructor
 * Definition: Ogre::ScriptCompiler::ScriptCompiler
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompiler__1_1createScriptCompiler (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ScriptCompiler 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ScriptCompiler 
   Ogre::ScriptCompiler* _cpp_this = new Ogre::ScriptCompiler(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ScriptCompiler::ScriptCompiler */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     compile()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::compile
 * Signature:  (std_stringstd_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1compile_1_1StringRStringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring str, 
  jstring source, 
  jstring group
)
{
   // parameter conversions 
  std::string _cpp_str = ""; org::xbig::jni::to_stdstring(_jni_env_, str, _cpp_str); // calls c-tor only. Not operator= .;
  std::string _cpp_source = ""; org::xbig::jni::to_stdstring(_jni_env_, source, _cpp_source); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->compile(_cpp_str, _cpp_source, _cpp_group) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ScriptCompiler::compile */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     compile()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::compile
 * Signature:  (Ogre_ConcreteNodeListPtrstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1compile_1_1ConcreteNodeListPtrRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong nodes, 
  jstring group
)
{
   // parameter conversions 
  const Ogre::ConcreteNodeListPtr* _cpp_nodes = reinterpret_cast< const Ogre::ConcreteNodeListPtr* >(nodes);
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->compile(*_cpp_nodes, _cpp_group) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ScriptCompiler::compile */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     _compile()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::_compile
 * Signature:  (Ogre_AbstractNodeListPtrstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1_1compile_1_1AbstractNodeListPtrvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong nodes, 
  jstring group
)
{
   // parameter conversions 
  Ogre::AbstractNodeListPtr* _cpp_nodes = reinterpret_cast< Ogre::AbstractNodeListPtr* >(nodes);
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_compile(*_cpp_nodes, _cpp_group) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ScriptCompiler::_compile */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     addError()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::addError
 * Signature:  (unsigned_intstd_stringIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1addError_1_1uint32vStringRivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong code, 
  jstring file, 
  jint line, 
  jstring msg
)
{
   // parameter conversions 
  unsigned int _cpp_code = code;
  std::string _cpp_file = ""; org::xbig::jni::to_stdstring(_jni_env_, file, _cpp_file); // calls c-tor only. Not operator= .;
  int _cpp_line = line;
  std::string _cpp_msg = ""; org::xbig::jni::to_stdstring(_jni_env_, msg, _cpp_msg); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addError(_cpp_code, _cpp_file, _cpp_line, _cpp_msg);
} /* void Ogre::ScriptCompiler::addError */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     setListener()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::setListener
 * Signature:  (Ogre_ScriptCompilerListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1setListener_1_1ScriptCompilerListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::ScriptCompilerListener* _cpp_listener = reinterpret_cast< Ogre::ScriptCompilerListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* void Ogre::ScriptCompiler::setListener */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     getListener()
 * Type:       non-virtual method
 * Definition: ScriptCompilerListener* Ogre::ScriptCompiler::getListener
 * Signature:  ()Ogre_ScriptCompilerListener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompiler__1getListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ScriptCompilerListener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ScriptCompilerListener* Ogre::ScriptCompiler::getListener */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     getResourceGroup()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ScriptCompiler::getResourceGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ScriptCompiler__1getResourceGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<const Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getResourceGroup() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ScriptCompiler::getResourceGroup */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     addNameExclusion()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::addNameExclusion
 * Signature:  (std_string)V
 */

//JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1addNameExclusion_1_1StringR (
//  JNIEnv* _jni_env_, /* interface pointer */
//  jobject _jni_this_, /* Java object */
//  jlong _jni_pointer_, /* C++ pointer */
//  jstring type
//)
//{
//   // parameter conversions 
//  std::string _cpp_type = ""; org::xbig::jni::to_stdstring(_jni_env_, type, _cpp_type); // calls c-tor only. Not operator= .; 
//   
//   // cast pointer to C++ object 
//   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
//   
//   // call library method 
//   _cpp_this->addNameExclusion(_cpp_type);
//} /* void Ogre::ScriptCompiler::addNameExclusion */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     removeNameExclusion()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::removeNameExclusion
 * Signature:  (std_string)V
 */

//JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1removeNameExclusion_1_1StringR (
//  JNIEnv* _jni_env_, /* interface pointer */
//  jobject _jni_this_, /* Java object */
//  jlong _jni_pointer_, /* C++ pointer */
//  jstring type
//)
//{
//   // parameter conversions 
//  std::string _cpp_type = ""; org::xbig::jni::to_stdstring(_jni_env_, type, _cpp_type); // calls c-tor only. Not operator= .; 
//   
//   // cast pointer to C++ object 
//   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
//   
//   // call library method 
//   _cpp_this->removeNameExclusion(_cpp_type);
//} /* void Ogre::ScriptCompiler::removeNameExclusion */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     _fireEvent()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::_fireEvent
 * Signature:  (std_stringstd_vector__Any__Ogre_Any)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1_1fireEvent_1_1StringRstd_1vector_1_1Any_1_1rAnyp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong args, 
  jlong retval
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::vector< Ogre::Any >* _cpp_args = reinterpret_cast< std::vector< Ogre::Any >* >(args);
  Ogre::Any* _cpp_retval = reinterpret_cast< Ogre::Any* >(retval); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_fireEvent(_cpp_name, *_cpp_args, _cpp_retval) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ScriptCompiler::_fireEvent */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     _fireCreateObject()
 * Type:       non-virtual method
 * Definition: Any Ogre::ScriptCompiler::_fireCreateObject
 * Signature:  (std_stringstd_vector__Any__)Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompiler__1_1fireCreateObject_1_1StringRstd_1vector_1_1Any_1_1r (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring type, 
  jlong args
)
{
   // parameter conversions 
  std::string _cpp_type = ""; org::xbig::jni::to_stdstring(_jni_env_, type, _cpp_type); // calls c-tor only. Not operator= .;
  std::vector< Ogre::Any >* _cpp_args = reinterpret_cast< std::vector< Ogre::Any >* >(args); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = new Ogre::Any( _cpp_this->_fireCreateObject(_cpp_type, *_cpp_args) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Any Ogre::ScriptCompiler::_fireCreateObject */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     formatErrorCode()
 * Type:       static method
 * Definition: static String Ogre::ScriptCompiler::formatErrorCode
 * Signature:  (unsigned_int)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ScriptCompiler__1formatErrorCode_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong code
)
{
   // static method of class Ogre::ScriptCompiler with return value 
   // parameter conversions 
  unsigned int _cpp_code = code; 
   
   // call library method 
   const std::string _cpp_result = Ogre::ScriptCompiler::formatErrorCode(_cpp_code); 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* static String Ogre::ScriptCompiler::formatErrorCode */


/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ScriptCompiler::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ScriptCompiler 
   // cast pointer to C++ object 
   Ogre::ScriptCompiler* _cpp_this = reinterpret_cast<Ogre::ScriptCompiler*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ScriptCompiler::__delete */
