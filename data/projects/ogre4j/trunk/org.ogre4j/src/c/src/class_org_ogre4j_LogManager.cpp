///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_LogManager.h"

// import header files of original library
#include <OgreLogManager.h>



/*
 * Class:      org.ogre4j.LogManager
 * Method:     LogManager()
 * Type:       constructor
 * Definition: Ogre::LogManager::LogManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1_1createLogManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::LogManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::LogManager 
   Ogre::LogManager* _cpp_this = new Ogre::LogManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::LogManager::LogManager */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     createLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::createLog
 * Signature:  (std_stringZZZ)Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1createLog_1_1StringRbvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean defaultLog, 
  jboolean debuggerOutput, 
  jboolean suppressFileOutput
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_defaultLog = defaultLog ? true : false;
  bool _cpp_debuggerOutput = debuggerOutput ? true : false;
  bool _cpp_suppressFileOutput = suppressFileOutput ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Log* _cpp_result = _cpp_this->createLog(_cpp_name, _cpp_defaultLog, _cpp_debuggerOutput, _cpp_suppressFileOutput) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Log* Ogre::LogManager::createLog */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     getLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::getLog
 * Signature:  (std_string)Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getLog_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Log* _cpp_result = _cpp_this->getLog(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Log* Ogre::LogManager::getLog */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     getDefaultLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::getDefaultLog
 * Signature:  ()Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getDefaultLog (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Log* _cpp_result = _cpp_this->getDefaultLog() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Log* Ogre::LogManager::getDefaultLog */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     destroyLog()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::destroyLog
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1destroyLog_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyLog(_cpp_name);
} /* void Ogre::LogManager::destroyLog */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     destroyLog()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::destroyLog
 * Signature:  (Ogre_Log)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1destroyLog_1_1Logp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong log
)
{
   // parameter conversions 
  Ogre::Log* _cpp_log = reinterpret_cast< Ogre::Log* >(log); 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyLog(_cpp_log);
} /* void Ogre::LogManager::destroyLog */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     setDefaultLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::setDefaultLog
 * Signature:  (Ogre_Log)Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1setDefaultLog_1_1Logp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newLog
)
{
   // parameter conversions 
  Ogre::Log* _cpp_newLog = reinterpret_cast< Ogre::Log* >(newLog); 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Log* _cpp_result = _cpp_this->setDefaultLog(_cpp_newLog) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Log* Ogre::LogManager::setDefaultLog */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     logMessage()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::logMessage
 * Signature:  (std_stringOgre_LogMessageLevelZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1logMessage_1_1StringRLogMessageLevelvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring message, 
  jint lml, 
  jboolean maskDebug
)
{
   // parameter conversions 
  std::string _cpp_message = ""; org::xbig::jni::to_stdstring(_jni_env_, message, _cpp_message); // calls c-tor only. Not operator= .;
  Ogre::LogMessageLevel _cpp_lml = (Ogre::LogMessageLevel)lml;
  bool _cpp_maskDebug = maskDebug ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->logMessage(_cpp_message, _cpp_lml, _cpp_maskDebug);
} /* void Ogre::LogManager::logMessage */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     logMessage()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::logMessage
 * Signature:  (Ogre_LogMessageLevelstd_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1logMessage_1_1LogMessageLevelvStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint lml, 
  jstring message, 
  jboolean maskDebug
)
{
   // parameter conversions 
  Ogre::LogMessageLevel _cpp_lml = (Ogre::LogMessageLevel)lml;
  std::string _cpp_message = ""; org::xbig::jni::to_stdstring(_jni_env_, message, _cpp_message); // calls c-tor only. Not operator= .;
  bool _cpp_maskDebug = maskDebug ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->logMessage(_cpp_lml, _cpp_message, _cpp_maskDebug);
} /* void Ogre::LogManager::logMessage */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     stream()
 * Type:       non-virtual method
 * Definition: Log::Stream Ogre::LogManager::stream
 * Signature:  (Ogre_LogMessageLevelZ)Ogre_Log_Stream
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1stream_1_1LogMessageLevelvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint lml, 
  jboolean maskDebug
)
{
   // parameter conversions 
  Ogre::LogMessageLevel _cpp_lml = (Ogre::LogMessageLevel)lml;
  bool _cpp_maskDebug = maskDebug ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Log::Stream* _cpp_result = new Ogre::Log::Stream( _cpp_this->stream(_cpp_lml, _cpp_maskDebug) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Log::Stream Ogre::LogManager::stream */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     setLogDetail()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::setLogDetail
 * Signature:  (Ogre_LoggingLevel)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1setLogDetail_1_1LoggingLevelv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ll
)
{
   // parameter conversions 
  Ogre::LoggingLevel _cpp_ll = (Ogre::LoggingLevel)ll; 
   
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLogDetail(_cpp_ll);
} /* void Ogre::LogManager::setLogDetail */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static LogManager& Ogre::LogManager::getSingleton
 * Signature:  ()Ogre_LogManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::LogManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::LogManager* _cpp_result = & Ogre::LogManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static LogManager& Ogre::LogManager::getSingleton */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static LogManager* Ogre::LogManager::getSingletonPtr
 * Signature:  ()Ogre_LogManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::LogManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::LogManager* _cpp_result = Ogre::LogManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static LogManager* Ogre::LogManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.LogManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::LogManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::LogManager 
   // cast pointer to C++ object 
   Ogre::LogManager* _cpp_this = reinterpret_cast<Ogre::LogManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::LogManager::__delete */
