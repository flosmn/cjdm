///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_IntersectionSceneQuery.h"

// import header files of original library
#include <OgreSceneQuery.h>



/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     execute()
 * Type:       virtual method
 * Definition: virtual IntersectionSceneQueryResult& Ogre::IntersectionSceneQuery::execute
 * Signature:  ()Ogre_IntersectionSceneQueryResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IntersectionSceneQuery__1execute (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IntersectionSceneQueryResult* _cpp_result = & _cpp_this->execute() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual IntersectionSceneQueryResult& Ogre::IntersectionSceneQuery::execute */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     execute()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::IntersectionSceneQuery::execute
 * Signature:  (Ogre_IntersectionSceneQueryListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IntersectionSceneQuery__1execute_1_1IntersectionSceneQueryListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::IntersectionSceneQueryListener* _cpp_listener = reinterpret_cast< Ogre::IntersectionSceneQueryListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->execute(_cpp_listener);
} /* virtual void Ogre::IntersectionSceneQuery::execute */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     getLastResults()
 * Type:       virtual method
 * Definition: virtual IntersectionSceneQueryResult& Ogre::IntersectionSceneQuery::getLastResults
 * Signature:  ()Ogre_IntersectionSceneQueryResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IntersectionSceneQuery__1getLastResults_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<const Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IntersectionSceneQueryResult* _cpp_result = & _cpp_this->getLastResults() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual IntersectionSceneQueryResult& Ogre::IntersectionSceneQuery::getLastResults */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     clearResults()
 * Type:       virtual method
 * Definition: virtual void Ogre::IntersectionSceneQuery::clearResults
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IntersectionSceneQuery__1clearResults (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearResults();
} /* virtual void Ogre::IntersectionSceneQuery::clearResults */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     queryResult()
 * Type:       virtual method
 * Definition: bool Ogre::IntersectionSceneQuery::queryResult
 * Signature:  (Ogre_MovableObjectOgre_MovableObject)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_IntersectionSceneQuery__1queryResult_1_1MovableObjectpMovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong first, 
  jlong second
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_first = reinterpret_cast< Ogre::MovableObject* >(first);
  Ogre::MovableObject* _cpp_second = reinterpret_cast< Ogre::MovableObject* >(second); 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->queryResult(_cpp_first, _cpp_second) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::IntersectionSceneQuery::queryResult */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     queryResult()
 * Type:       virtual method
 * Definition: bool Ogre::IntersectionSceneQuery::queryResult
 * Signature:  (Ogre_MovableObjectOgre_SceneQuery_WorldFragment)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_IntersectionSceneQuery__1queryResult_1_1MovableObjectpSceneQuery_1WorldFragmentp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong movable, 
  jlong fragment
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_movable = reinterpret_cast< Ogre::MovableObject* >(movable);
  Ogre::SceneQuery::WorldFragment* _cpp_fragment = reinterpret_cast< Ogre::SceneQuery::WorldFragment* >(fragment); 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->queryResult(_cpp_movable, _cpp_fragment) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::IntersectionSceneQuery::queryResult */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     setQueryMask()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneQuery::setQueryMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IntersectionSceneQuery__1setQueryMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mask
)
{
   // parameter conversions 
  unsigned int _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryMask(_cpp_mask);
} /* virtual void Ogre::SceneQuery::setQueryMask */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     getQueryMask()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::SceneQuery::getQueryMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IntersectionSceneQuery__1getQueryMask_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<const Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryMask() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::SceneQuery::getQueryMask */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     setQueryTypeMask()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneQuery::setQueryTypeMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IntersectionSceneQuery__1setQueryTypeMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mask
)
{
   // parameter conversions 
  unsigned int _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryTypeMask(_cpp_mask);
} /* virtual void Ogre::SceneQuery::setQueryTypeMask */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     getQueryTypeMask()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::SceneQuery::getQueryTypeMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IntersectionSceneQuery__1getQueryTypeMask_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<const Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryTypeMask() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::SceneQuery::getQueryTypeMask */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     setWorldFragmentType()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneQuery::setWorldFragmentType
 * Signature:  (Ogre_SceneQuery_WorldFragmentType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IntersectionSceneQuery__1setWorldFragmentType_1_1WorldFragmentTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint wft
)
{
   // parameter conversions 
  Ogre::SceneQuery::WorldFragmentType _cpp_wft = (Ogre::SceneQuery::WorldFragmentType)wft; 
   
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWorldFragmentType(_cpp_wft);
} /* virtual void Ogre::SceneQuery::setWorldFragmentType */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     getWorldFragmentType()
 * Type:       virtual method
 * Definition: virtual WorldFragmentType Ogre::SceneQuery::getWorldFragmentType
 * Signature:  ()Ogre_SceneQuery_WorldFragmentType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_IntersectionSceneQuery__1getWorldFragmentType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<const Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneQuery::WorldFragmentType _cpp_result = _cpp_this->getWorldFragmentType() ; 
   return _cpp_result;
} /* virtual WorldFragmentType Ogre::SceneQuery::getWorldFragmentType */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     getSupportedWorldFragmentTypes()
 * Type:       virtual method
 * Definition: virtual const std::set<WorldFragmentType>* Ogre::SceneQuery::getSupportedWorldFragmentTypes
 * Signature:  ()std_set__WorldFragmentType__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IntersectionSceneQuery__1getSupportedWorldFragmentTypes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<const Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   
   // call library method 
   const std::set< Ogre::SceneQuery::WorldFragmentType >* _cpp_result = _cpp_this->getSupportedWorldFragmentTypes() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const std::set<WorldFragmentType>* Ogre::SceneQuery::getSupportedWorldFragmentTypes */


/*
 * Class:      org.ogre4j.IntersectionSceneQuery
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::IntersectionSceneQuery::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IntersectionSceneQuery__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::IntersectionSceneQuery 
   // cast pointer to C++ object 
   Ogre::IntersectionSceneQuery* _cpp_this = reinterpret_cast<Ogre::IntersectionSceneQuery*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::IntersectionSceneQuery::__delete */
