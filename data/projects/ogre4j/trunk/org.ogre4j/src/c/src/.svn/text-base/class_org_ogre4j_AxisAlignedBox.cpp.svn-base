///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_AxisAlignedBox.h"

// import header files of original library
#include <OgreAxisAlignedBox.h>



/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     AxisAlignedBox()
 * Type:       constructor
 * Definition: Ogre::AxisAlignedBox::AxisAlignedBox
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1_1createAxisAlignedBox (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::AxisAlignedBox 
   
   // parameter conversions 
   
   // create new instance of class Ogre::AxisAlignedBox 
   Ogre::AxisAlignedBox* _cpp_this = new Ogre::AxisAlignedBox(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AxisAlignedBox::AxisAlignedBox */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     AxisAlignedBox()
 * Type:       constructor
 * Definition: Ogre::AxisAlignedBox::AxisAlignedBox
 * Signature:  (Ogre_AxisAlignedBox_Extent)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1_1createAxisAlignedBox_1_1Extentv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint e
)
{
   // constructor of class Ogre::AxisAlignedBox 
   
   // parameter conversions 
  Ogre::AxisAlignedBox::Extent _cpp_e = (Ogre::AxisAlignedBox::Extent)e; 
   
   // create new instance of class Ogre::AxisAlignedBox 
   Ogre::AxisAlignedBox* _cpp_this = new Ogre::AxisAlignedBox(_cpp_e); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AxisAlignedBox::AxisAlignedBox */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     AxisAlignedBox()
 * Type:       constructor
 * Definition: Ogre::AxisAlignedBox::AxisAlignedBox
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1_1createAxisAlignedBox_1_1AxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkBox
)
{
   // constructor of class Ogre::AxisAlignedBox 
   
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_rkBox = reinterpret_cast< const Ogre::AxisAlignedBox* >(rkBox); 
   
   // create new instance of class Ogre::AxisAlignedBox 
   Ogre::AxisAlignedBox* _cpp_this = new Ogre::AxisAlignedBox(*_cpp_rkBox); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AxisAlignedBox::AxisAlignedBox */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     AxisAlignedBox()
 * Type:       constructor
 * Definition: Ogre::AxisAlignedBox::AxisAlignedBox
 * Signature:  (Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1_1createAxisAlignedBox_1_1Vector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _min, 
  jlong _max
)
{
   // constructor of class Ogre::AxisAlignedBox 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp__min = reinterpret_cast< const Ogre::Vector3* >(_min);
  const Ogre::Vector3* _cpp__max = reinterpret_cast< const Ogre::Vector3* >(_max); 
   
   // create new instance of class Ogre::AxisAlignedBox 
   Ogre::AxisAlignedBox* _cpp_this = new Ogre::AxisAlignedBox(*_cpp__min, *_cpp__max); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AxisAlignedBox::AxisAlignedBox */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     AxisAlignedBox()
 * Type:       constructor
 * Definition: Ogre::AxisAlignedBox::AxisAlignedBox
 * Signature:  (floatfloatfloatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1_1createAxisAlignedBox_1_1RealvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat mx, 
  jfloat my, 
  jfloat mz, 
  jfloat Mx, 
  jfloat My, 
  jfloat Mz
)
{
   // constructor of class Ogre::AxisAlignedBox 
   
   // parameter conversions 
  float _cpp_mx = mx;
  float _cpp_my = my;
  float _cpp_mz = mz;
  float _cpp_Mx = Mx;
  float _cpp_My = My;
  float _cpp_Mz = Mz; 
   
   // create new instance of class Ogre::AxisAlignedBox 
   Ogre::AxisAlignedBox* _cpp_this = new Ogre::AxisAlignedBox(_cpp_mx, _cpp_my, _cpp_mz, _cpp_Mx, _cpp_My, _cpp_Mz); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AxisAlignedBox::AxisAlignedBox */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: AxisAlignedBox& Ogre::AxisAlignedBox::operator=
 * Signature:  (Ogre_AxisAlignedBox)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1operatorAssignment_1_1AxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_rhs = reinterpret_cast< const Ogre::AxisAlignedBox* >(rhs); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->operator=(*_cpp_rhs) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AxisAlignedBox& Ogre::AxisAlignedBox::operator= */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getMinimum_const()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::AxisAlignedBox::getMinimum
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getMinimum_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getMinimum() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::AxisAlignedBox::getMinimum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getMinimum()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::AxisAlignedBox::getMinimum
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getMinimum (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getMinimum() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::AxisAlignedBox::getMinimum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getMaximum_const()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::AxisAlignedBox::getMaximum
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getMaximum_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getMaximum() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::AxisAlignedBox::getMaximum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getMaximum()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::AxisAlignedBox::getMaximum
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getMaximum (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getMaximum() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::AxisAlignedBox::getMaximum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMinimum()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMinimum
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMinimum_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinimum(*_cpp_vec);
} /* void Ogre::AxisAlignedBox::setMinimum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMinimum()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMinimum
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMinimum_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinimum(_cpp_x, _cpp_y, _cpp_z);
} /* void Ogre::AxisAlignedBox::setMinimum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMinimumX()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMinimumX
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMinimumX_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinimumX(_cpp_x);
} /* void Ogre::AxisAlignedBox::setMinimumX */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMinimumY()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMinimumY
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMinimumY_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat y
)
{
   // parameter conversions 
  float _cpp_y = y; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinimumY(_cpp_y);
} /* void Ogre::AxisAlignedBox::setMinimumY */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMinimumZ()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMinimumZ
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMinimumZ_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat z
)
{
   // parameter conversions 
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinimumZ(_cpp_z);
} /* void Ogre::AxisAlignedBox::setMinimumZ */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMaximum()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMaximum
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMaximum_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaximum(*_cpp_vec);
} /* void Ogre::AxisAlignedBox::setMaximum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMaximum()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMaximum
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMaximum_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaximum(_cpp_x, _cpp_y, _cpp_z);
} /* void Ogre::AxisAlignedBox::setMaximum */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMaximumX()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMaximumX
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMaximumX_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaximumX(_cpp_x);
} /* void Ogre::AxisAlignedBox::setMaximumX */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMaximumY()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMaximumY
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMaximumY_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat y
)
{
   // parameter conversions 
  float _cpp_y = y; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaximumY(_cpp_y);
} /* void Ogre::AxisAlignedBox::setMaximumY */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setMaximumZ()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setMaximumZ
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setMaximumZ_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat z
)
{
   // parameter conversions 
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaximumZ(_cpp_z);
} /* void Ogre::AxisAlignedBox::setMaximumZ */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setExtents()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setExtents
 * Signature:  (Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setExtents_1_1Vector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _min, 
  jlong _max
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp__min = reinterpret_cast< const Ogre::Vector3* >(_min);
  const Ogre::Vector3* _cpp__max = reinterpret_cast< const Ogre::Vector3* >(_max); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setExtents(*_cpp__min, *_cpp__max);
} /* void Ogre::AxisAlignedBox::setExtents */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setExtents()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setExtents
 * Signature:  (floatfloatfloatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setExtents_1_1RealvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat mx, 
  jfloat my, 
  jfloat mz, 
  jfloat Mx, 
  jfloat My, 
  jfloat Mz
)
{
   // parameter conversions 
  float _cpp_mx = mx;
  float _cpp_my = my;
  float _cpp_mz = mz;
  float _cpp_Mx = Mx;
  float _cpp_My = My;
  float _cpp_Mz = Mz; 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setExtents(_cpp_mx, _cpp_my, _cpp_mz, _cpp_Mx, _cpp_My, _cpp_Mz);
} /* void Ogre::AxisAlignedBox::setExtents */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getAllCorners()
 * Type:       non-virtual method
 * Definition: const Vector3* Ogre::AxisAlignedBox::getAllCorners
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getAllCorners_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = _cpp_this->getAllCorners() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3* Ogre::AxisAlignedBox::getAllCorners */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getCorner()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::AxisAlignedBox::getCorner
 * Signature:  (Ogre_AxisAlignedBox_CornerEnum)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getCorner_1_1CornerEnumv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint cornerToGet
)
{
   // parameter conversions 
  Ogre::AxisAlignedBox::CornerEnum _cpp_cornerToGet = (Ogre::AxisAlignedBox::CornerEnum)cornerToGet; 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getCorner(_cpp_cornerToGet) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::AxisAlignedBox::getCorner */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     merge()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::merge
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1merge_1_1AxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_rhs = reinterpret_cast< const Ogre::AxisAlignedBox* >(rhs); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->merge(*_cpp_rhs);
} /* void Ogre::AxisAlignedBox::merge */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     merge()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::merge
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1merge_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong point
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_point = reinterpret_cast< const Ogre::Vector3* >(point); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->merge(*_cpp_point);
} /* void Ogre::AxisAlignedBox::merge */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     transform()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::transform
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1transform_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong matrix
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_matrix = reinterpret_cast< const Ogre::Matrix4* >(matrix); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->transform(*_cpp_matrix);
} /* void Ogre::AxisAlignedBox::transform */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     transformAffine()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::transformAffine
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1transformAffine_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m = reinterpret_cast< const Ogre::Matrix4* >(m); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->transformAffine(*_cpp_m);
} /* void Ogre::AxisAlignedBox::transformAffine */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setNull()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setNull
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setNull (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNull();
} /* void Ogre::AxisAlignedBox::setNull */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     isNull()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::isNull
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1isNull_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isNull() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::isNull */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     isFinite()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::isFinite
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1isFinite_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isFinite() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::isFinite */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     setInfinite()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::setInfinite
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1setInfinite (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInfinite();
} /* void Ogre::AxisAlignedBox::setInfinite */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     isInfinite()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::isInfinite
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1isInfinite_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInfinite() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::isInfinite */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::intersects
 * Signature:  (Ogre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1intersects_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong b2
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_b2 = reinterpret_cast< const Ogre::AxisAlignedBox* >(b2); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_b2) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::intersects */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     intersection()
 * Type:       non-virtual method
 * Definition: AxisAlignedBox Ogre::AxisAlignedBox::intersection
 * Signature:  (Ogre_AxisAlignedBox)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1intersection_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong b2
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_b2 = reinterpret_cast< const Ogre::AxisAlignedBox* >(b2); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = new Ogre::AxisAlignedBox( _cpp_this->intersection(*_cpp_b2) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AxisAlignedBox Ogre::AxisAlignedBox::intersection */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     volume()
 * Type:       non-virtual method
 * Definition: Real Ogre::AxisAlignedBox::volume
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AxisAlignedBox__1volume_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->volume() ; 
   return _cpp_result;
} /* Real Ogre::AxisAlignedBox::volume */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     scale()
 * Type:       non-virtual method
 * Definition: void Ogre::AxisAlignedBox::scale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1scale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_s = reinterpret_cast< const Ogre::Vector3* >(s); 
   
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->scale(*_cpp_s);
} /* void Ogre::AxisAlignedBox::scale */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::intersects
 * Signature:  (Ogre_Sphere)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1intersects_1_1SphereR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
)
{
   // parameter conversions 
  const Ogre::Sphere* _cpp_s = reinterpret_cast< const Ogre::Sphere* >(s); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_s) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::intersects */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::intersects
 * Signature:  (Ogre_Plane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1intersects_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_p = reinterpret_cast< const Ogre::Plane* >(p); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_p) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::intersects */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::intersects
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1intersects_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_v) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::intersects */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getCenter()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::AxisAlignedBox::getCenter
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getCenter_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getCenter() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::AxisAlignedBox::getCenter */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getSize()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::AxisAlignedBox::getSize
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getSize() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::AxisAlignedBox::getSize */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getHalfSize()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::AxisAlignedBox::getHalfSize
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getHalfSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getHalfSize() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::AxisAlignedBox::getHalfSize */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     contains()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::contains
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1contains_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->contains(*_cpp_v) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::contains */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     contains()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::contains
 * Signature:  (Ogre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1contains_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong other
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_other = reinterpret_cast< const Ogre::AxisAlignedBox* >(other); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->contains(*_cpp_other) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::contains */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::operator==
 * Signature:  (Ogre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1operatorEqual_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_rhs = reinterpret_cast< const Ogre::AxisAlignedBox* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::operator== */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::AxisAlignedBox::operator!=
 * Signature:  (Ogre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AxisAlignedBox__1operatorNotEqual_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_rhs = reinterpret_cast< const Ogre::AxisAlignedBox* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<const Ogre::AxisAlignedBox*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AxisAlignedBox::operator!= */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::AxisAlignedBox::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AxisAlignedBox__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::AxisAlignedBox 
   // cast pointer to C++ object 
   Ogre::AxisAlignedBox* _cpp_this = reinterpret_cast<Ogre::AxisAlignedBox*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::AxisAlignedBox::__delete */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getBOX_NULL()
 * Type:       getter for public attribute
 * Definition: const AxisAlignedBox Ogre::AxisAlignedBox::BOX_NULL
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getBOX_1NULL (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & Ogre::AxisAlignedBox::BOX_NULL ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox Ogre::AxisAlignedBox::BOX_NULL */


/*
 * Class:      org.ogre4j.AxisAlignedBox
 * Method:     getBOX_INFINITE()
 * Type:       getter for public attribute
 * Definition: const AxisAlignedBox Ogre::AxisAlignedBox::BOX_INFINITE
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AxisAlignedBox__1getBOX_1INFINITE (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & Ogre::AxisAlignedBox::BOX_INFINITE ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox Ogre::AxisAlignedBox::BOX_INFINITE */
