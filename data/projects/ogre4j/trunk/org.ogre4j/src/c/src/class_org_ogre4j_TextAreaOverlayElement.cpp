///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_TextAreaOverlayElement.h"

// import header files of original library
#include <OgreTextAreaOverlayElement.h>



/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     TextAreaOverlayElement()
 * Type:       constructor
 * Definition: Ogre::TextAreaOverlayElement::TextAreaOverlayElement
 * Signature:  (std_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1createTextAreaOverlayElement_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name
)
{
   // constructor of class Ogre::TextAreaOverlayElement 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::TextAreaOverlayElement 
   Ogre::TextAreaOverlayElement* _cpp_this = new Ogre::TextAreaOverlayElement(_cpp_name); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TextAreaOverlayElement::TextAreaOverlayElement */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     initialise()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextAreaOverlayElement::initialise
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1initialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->initialise();
} /* virtual void Ogre::TextAreaOverlayElement::initialise */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCaption()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextAreaOverlayElement::setCaption
 * Signature:  (Ogre_UTFString)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCaption_1_1DisplayStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong text
)
{
   // parameter conversions 
  const Ogre::UTFString* _cpp_text = reinterpret_cast< const Ogre::UTFString* >(text); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCaption(*_cpp_text);
} /* virtual void Ogre::TextAreaOverlayElement::setCaption */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCharHeight()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setCharHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCharHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
)
{
   // parameter conversions 
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCharHeight(_cpp_height);
} /* void Ogre::TextAreaOverlayElement::setCharHeight */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCharHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextAreaOverlayElement::getCharHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCharHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getCharHeight() ; 
   return _cpp_result;
} /* Real Ogre::TextAreaOverlayElement::getCharHeight */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setSpaceWidth()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setSpaceWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setSpaceWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
)
{
   // parameter conversions 
  float _cpp_width = width; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpaceWidth(_cpp_width);
} /* void Ogre::TextAreaOverlayElement::setSpaceWidth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getSpaceWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextAreaOverlayElement::getSpaceWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getSpaceWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSpaceWidth() ; 
   return _cpp_result;
} /* Real Ogre::TextAreaOverlayElement::getSpaceWidth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setFontName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setFontName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setFontName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring font
)
{
   // parameter conversions 
  std::string _cpp_font = ""; org::xbig::jni::to_stdstring(_jni_env_, font, _cpp_font); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFontName(_cpp_font);
} /* void Ogre::TextAreaOverlayElement::setFontName */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getFontName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::TextAreaOverlayElement::getFontName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getFontName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getFontName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::TextAreaOverlayElement::getFontName */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getTypeName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::TextAreaOverlayElement::getTypeName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getTypeName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getTypeName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::TextAreaOverlayElement::getTypeName */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_op = reinterpret_cast< Ogre::RenderOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getRenderOperation(*_cpp_op);
} /* void Ogre::TextAreaOverlayElement::getRenderOperation */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setMaterialName()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring matName
)
{
   // parameter conversions 
  std::string _cpp_matName = ""; org::xbig::jni::to_stdstring(_jni_env_, matName, _cpp_matName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialName(_cpp_matName);
} /* void Ogre::TextAreaOverlayElement::setMaterialName */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setColour()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong col
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_col = reinterpret_cast< const Ogre::ColourValue* >(col); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColour(*_cpp_col);
} /* void Ogre::TextAreaOverlayElement::setColour */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getColour()
 * Type:       virtual method
 * Definition: const ColourValue& Ogre::TextAreaOverlayElement::getColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::TextAreaOverlayElement::getColour */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setColourBottom()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setColourBottom
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setColourBottom_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong col
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_col = reinterpret_cast< const Ogre::ColourValue* >(col); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourBottom(*_cpp_col);
} /* void Ogre::TextAreaOverlayElement::setColourBottom */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getColourBottom()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::TextAreaOverlayElement::getColourBottom
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getColourBottom_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getColourBottom() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::TextAreaOverlayElement::getColourBottom */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setColourTop()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setColourTop
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setColourTop_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong col
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_col = reinterpret_cast< const Ogre::ColourValue* >(col); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourTop(*_cpp_col);
} /* void Ogre::TextAreaOverlayElement::setColourTop */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getColourTop()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::TextAreaOverlayElement::getColourTop
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getColourTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getColourTop() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::TextAreaOverlayElement::getColourTop */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setAlignment()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setAlignment
 * Signature:  (Ogre_TextAreaOverlayElement_Alignment)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setAlignment_1_1Alignmentv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint a
)
{
   // parameter conversions 
  Ogre::TextAreaOverlayElement::Alignment _cpp_a = (Ogre::TextAreaOverlayElement::Alignment)a; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAlignment(_cpp_a);
} /* void Ogre::TextAreaOverlayElement::setAlignment */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getAlignment()
 * Type:       non-virtual method
 * Definition: Alignment Ogre::TextAreaOverlayElement::getAlignment
 * Signature:  ()Ogre_TextAreaOverlayElement_Alignment
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getAlignment_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextAreaOverlayElement::Alignment _cpp_result = _cpp_this->getAlignment() ; 
   return _cpp_result;
} /* Alignment Ogre::TextAreaOverlayElement::getAlignment */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setMetricsMode()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setMetricsMode
 * Signature:  (Ogre_GuiMetricsMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setMetricsMode_1_1GuiMetricsModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gmm
)
{
   // parameter conversions 
  Ogre::GuiMetricsMode _cpp_gmm = (Ogre::GuiMetricsMode)gmm; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMetricsMode(_cpp_gmm);
} /* void Ogre::TextAreaOverlayElement::setMetricsMode */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _update()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::_update
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1update (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_update();
} /* void Ogre::TextAreaOverlayElement::_update */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::OverlayElement::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::OverlayElement::getName */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     show()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::show
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1show (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->show();
} /* virtual void Ogre::OverlayElement::show */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     hide()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::hide
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1hide (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->hide();
} /* virtual void Ogre::OverlayElement::hide */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isVisible()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayElement::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::OverlayElement::isVisible */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayElement::isEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::OverlayElement::isEnabled */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean b
)
{
   // parameter conversions 
  bool _cpp_b = b ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEnabled(_cpp_b);
} /* virtual void Ogre::OverlayElement::setEnabled */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
)
{
   // parameter conversions 
  float _cpp_width = width;
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDimensions(_cpp_width, _cpp_height);
} /* void Ogre::OverlayElement::setDimensions */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setPosition
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setPosition_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat top
)
{
   // parameter conversions 
  float _cpp_left = left;
  float _cpp_top = top; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPosition(_cpp_left, _cpp_top);
} /* void Ogre::OverlayElement::setPosition */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setWidth()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
)
{
   // parameter conversions 
  float _cpp_width = width; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWidth(_cpp_width);
} /* void Ogre::OverlayElement::setWidth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getWidth() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::getWidth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setHeight()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
)
{
   // parameter conversions 
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setHeight(_cpp_height);
} /* void Ogre::OverlayElement::setHeight */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getHeight() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::getHeight */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setLeft()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setLeft
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setLeft_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left
)
{
   // parameter conversions 
  float _cpp_left = left; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLeft(_cpp_left);
} /* void Ogre::OverlayElement::setLeft */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getLeft()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getLeft
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getLeft_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLeft() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::getLeft */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setTop()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setTop
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setTop_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat Top
)
{
   // parameter conversions 
  float _cpp_Top = Top; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTop(_cpp_Top);
} /* void Ogre::OverlayElement::setTop */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getTop()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getTop
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTop() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::getTop */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getLeft()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getLeft
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getLeft_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getLeft() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::_getLeft */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getTop()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getTop
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getTop() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::_getTop */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getWidth() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::_getWidth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getHeight() ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::_getHeight */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setLeft()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setLeft
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setLeft_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left
)
{
   // parameter conversions 
  float _cpp_left = left; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setLeft(_cpp_left);
} /* void Ogre::OverlayElement::_setLeft */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setTop()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setTop
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setTop_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat top
)
{
   // parameter conversions 
  float _cpp_top = top; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTop(_cpp_top);
} /* void Ogre::OverlayElement::_setTop */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setWidth()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
)
{
   // parameter conversions 
  float _cpp_width = width; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setWidth(_cpp_width);
} /* void Ogre::OverlayElement::_setWidth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setHeight()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
)
{
   // parameter conversions 
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setHeight(_cpp_height);
} /* void Ogre::OverlayElement::_setHeight */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setPosition
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setPosition_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat top
)
{
   // parameter conversions 
  float _cpp_left = left;
  float _cpp_top = top; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setPosition(_cpp_left, _cpp_top);
} /* void Ogre::OverlayElement::_setPosition */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
)
{
   // parameter conversions 
  float _cpp_width = width;
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setDimensions(_cpp_width, _cpp_height);
} /* void Ogre::OverlayElement::_setDimensions */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getMaterialName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::OverlayElement::getMaterialName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getMaterialName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMaterialName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::OverlayElement::getMaterialName */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: const MaterialPtr& Ogre::OverlayElement::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = & _cpp_this->getMaterial() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MaterialPtr& Ogre::OverlayElement::getMaterial */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: void Ogre::OverlayElement::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_xform = reinterpret_cast< Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getWorldTransforms(_cpp_xform);
} /* void Ogre::OverlayElement::getWorldTransforms */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _positionsOutOfDate()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_positionsOutOfDate
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1positionsOutOfDate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_positionsOutOfDate();
} /* virtual void Ogre::OverlayElement::_positionsOutOfDate */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _updateFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_updateFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1updateFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateFromParent();
} /* virtual void Ogre::OverlayElement::_updateFromParent */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_notifyParent
 * Signature:  (Ogre_OverlayContainerOgre_Overlay)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyParent_1_1OverlayContainerpOverlayp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jlong overlay
)
{
   // parameter conversions 
  Ogre::OverlayContainer* _cpp_parent = reinterpret_cast< Ogre::OverlayContainer* >(parent);
  Ogre::Overlay* _cpp_overlay = reinterpret_cast< Ogre::Overlay* >(overlay); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParent(_cpp_parent, _cpp_overlay);
} /* virtual void Ogre::OverlayElement::_notifyParent */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getDerivedLeft()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getDerivedLeft
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getDerivedLeft (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getDerivedLeft() ; 
   return _cpp_result;
} /* virtual Real Ogre::OverlayElement::_getDerivedLeft */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getDerivedTop()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getDerivedTop
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getDerivedTop (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getDerivedTop() ; 
   return _cpp_result;
} /* virtual Real Ogre::OverlayElement::_getDerivedTop */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getRelativeWidth()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getRelativeWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getRelativeWidth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getRelativeWidth() ; 
   return _cpp_result;
} /* virtual Real Ogre::OverlayElement::_getRelativeWidth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getRelativeHeight()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getRelativeHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getRelativeHeight (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->_getRelativeHeight() ; 
   return _cpp_result;
} /* virtual Real Ogre::OverlayElement::_getRelativeHeight */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getClippingRegion()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_getClippingRegion
 * Signature:  (Ogre_Rectangle)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getClippingRegion_1_1Rectangler (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong clippingRegion
)
{
   // parameter conversions 
  Ogre::Rectangle* _cpp_clippingRegion = reinterpret_cast< Ogre::Rectangle* >(clippingRegion); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_getClippingRegion(*_cpp_clippingRegion);
} /* virtual void Ogre::OverlayElement::_getClippingRegion */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyZOrder()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::OverlayElement::_notifyZOrder
 * Signature:  (unsigned_short)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyZOrder_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint newZOrder
)
{
   // parameter conversions 
  unsigned short _cpp_newZOrder = newZOrder; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->_notifyZOrder(_cpp_newZOrder) ; 
   return _cpp_result;
} /* virtual ushort Ogre::OverlayElement::_notifyZOrder */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyWorldTransforms()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_notifyWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyWorldTransforms_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_xform = reinterpret_cast< const Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyWorldTransforms(*_cpp_xform);
} /* virtual void Ogre::OverlayElement::_notifyWorldTransforms */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyViewport()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_notifyViewport
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyViewport (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyViewport();
} /* virtual void Ogre::OverlayElement::_notifyViewport */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* virtual void Ogre::OverlayElement::_updateRenderQueue */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     visitRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::OverlayElement::visitRenderables */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCaption()
 * Type:       virtual method
 * Definition: virtual const DisplayString& Ogre::OverlayElement::getCaption
 * Signature:  ()Ogre_UTFString
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCaption_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UTFString* _cpp_result = & _cpp_this->getCaption() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const DisplayString& Ogre::OverlayElement::getCaption */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getMetricsMode()
 * Type:       virtual method
 * Definition: virtual GuiMetricsMode Ogre::OverlayElement::getMetricsMode
 * Signature:  ()Ogre_GuiMetricsMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getMetricsMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GuiMetricsMode _cpp_result = _cpp_this->getMetricsMode() ; 
   return _cpp_result;
} /* virtual GuiMetricsMode Ogre::OverlayElement::getMetricsMode */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setHorizontalAlignment()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setHorizontalAlignment
 * Signature:  (Ogre_GuiHorizontalAlignment)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setHorizontalAlignment_1_1GuiHorizontalAlignmentv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gha
)
{
   // parameter conversions 
  Ogre::GuiHorizontalAlignment _cpp_gha = (Ogre::GuiHorizontalAlignment)gha; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setHorizontalAlignment(_cpp_gha);
} /* virtual void Ogre::OverlayElement::setHorizontalAlignment */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getHorizontalAlignment()
 * Type:       virtual method
 * Definition: virtual GuiHorizontalAlignment Ogre::OverlayElement::getHorizontalAlignment
 * Signature:  ()Ogre_GuiHorizontalAlignment
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getHorizontalAlignment_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GuiHorizontalAlignment _cpp_result = _cpp_this->getHorizontalAlignment() ; 
   return _cpp_result;
} /* virtual GuiHorizontalAlignment Ogre::OverlayElement::getHorizontalAlignment */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setVerticalAlignment()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setVerticalAlignment
 * Signature:  (Ogre_GuiVerticalAlignment)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setVerticalAlignment_1_1GuiVerticalAlignmentv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gva
)
{
   // parameter conversions 
  Ogre::GuiVerticalAlignment _cpp_gva = (Ogre::GuiVerticalAlignment)gva; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVerticalAlignment(_cpp_gva);
} /* virtual void Ogre::OverlayElement::setVerticalAlignment */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getVerticalAlignment()
 * Type:       virtual method
 * Definition: virtual GuiVerticalAlignment Ogre::OverlayElement::getVerticalAlignment
 * Signature:  ()Ogre_GuiVerticalAlignment
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getVerticalAlignment_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GuiVerticalAlignment _cpp_result = _cpp_this->getVerticalAlignment() ; 
   return _cpp_result;
} /* virtual GuiVerticalAlignment Ogre::OverlayElement::getVerticalAlignment */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     contains()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::contains
 * Signature:  (floatfloat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1contains_1_1RealvRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y; 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->contains(_cpp_x, _cpp_y) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::OverlayElement::contains */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     findElementAt()
 * Type:       virtual method
 * Definition: virtual OverlayElement* Ogre::OverlayElement::findElementAt
 * Signature:  (floatfloat)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1findElementAt_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->findElementAt(_cpp_x, _cpp_y) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual OverlayElement* Ogre::OverlayElement::findElementAt */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isContainer()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::isContainer
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isContainer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isContainer() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::OverlayElement::isContainer */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isKeyEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::isKeyEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isKeyEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isKeyEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::OverlayElement::isKeyEnabled */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isCloneable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::isCloneable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isCloneable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCloneable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::OverlayElement::isCloneable */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCloneable()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setCloneable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCloneable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean c
)
{
   // parameter conversions 
  bool _cpp_c = c ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCloneable(_cpp_c);
} /* virtual void Ogre::OverlayElement::setCloneable */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: OverlayContainer* Ogre::OverlayElement::getParent
 * Signature:  ()Ogre_OverlayContainer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayContainer* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* OverlayContainer* Ogre::OverlayElement::getParent */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setParent()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setParent
 * Signature:  (Ogre_OverlayContainer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setParent_1_1OverlayContainerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent
)
{
   // parameter conversions 
  Ogre::OverlayContainer* _cpp_parent = reinterpret_cast< Ogre::OverlayContainer* >(parent); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setParent(_cpp_parent);
} /* void Ogre::OverlayElement::_setParent */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getZOrder()
 * Type:       non-virtual method
 * Definition: ushort Ogre::OverlayElement::getZOrder
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getZOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getZOrder() ; 
   return _cpp_result;
} /* ushort Ogre::OverlayElement::getZOrder */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::OverlayElement::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredViewDepth(_cpp_cam) ; 
   return _cpp_result;
} /* Real Ogre::OverlayElement::getSquaredViewDepth */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::OverlayElement::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->getLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LightList& Ogre::OverlayElement::getLights */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     copyFromTemplate()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::copyFromTemplate
 * Signature:  (Ogre_OverlayElement)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1copyFromTemplate_1_1OverlayElementp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong templateOverlay
)
{
   // parameter conversions 
  Ogre::OverlayElement* _cpp_templateOverlay = reinterpret_cast< Ogre::OverlayElement* >(templateOverlay); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyFromTemplate(_cpp_templateOverlay);
} /* virtual void Ogre::OverlayElement::copyFromTemplate */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     clone()
 * Type:       virtual method
 * Definition: virtual OverlayElement* Ogre::OverlayElement::clone
 * Signature:  (std_string)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1clone_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName
)
{
   // parameter conversions 
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->clone(_cpp_instanceName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual OverlayElement* Ogre::OverlayElement::clone */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getSourceTemplate()
 * Type:       non-virtual method
 * Definition: const OverlayElement* Ogre::OverlayElement::getSourceTemplate
 * Signature:  ()Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getSourceTemplate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->getSourceTemplate() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const OverlayElement* Ogre::OverlayElement::getSourceTemplate */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::TextAreaOverlayElement without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::TextAreaOverlayElement::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: virtual Technique* Ogre::Renderable::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Technique* Ogre::Renderable::getTechnique */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->preRender(_cpp_sm, _cpp_rsys) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::preRender */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postRender(_cpp_sm, _cpp_rsys);
} /* virtual void Ogre::Renderable::postRender */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumWorldTransforms() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Renderable::getNumWorldTransforms */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
)
{
   // parameter conversions 
  bool _cpp_useIdentityProjection = useIdentityProjection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityProjection(_cpp_useIdentityProjection);
} /* void Ogre::Renderable::setUseIdentityProjection */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityProjection() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityProjection */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
)
{
   // parameter conversions 
  bool _cpp_useIdentityView = useIdentityView ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityView(_cpp_useIdentityView);
} /* void Ogre::Renderable::setUseIdentityView */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityView() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityView */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastsShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getCastsShadows */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  size_t _cpp_index = index;
  const Ogre::Vector4* _cpp_value = reinterpret_cast< const Ogre::Vector4* >(value); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomParameter(_cpp_index, *_cpp_value);
} /* void Ogre::Renderable::setCustomParameter */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCustomParameter(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4& Ogre::Renderable::getCustomParameter */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
)
{
   // parameter conversions 
  const Ogre::GpuProgramParameters::AutoConstantEntry* _cpp_constantEntry = reinterpret_cast< const Ogre::GpuProgramParameters::AutoConstantEntry* >(constantEntry);
  Ogre::GpuProgramParameters* _cpp_params = reinterpret_cast< Ogre::GpuProgramParameters* >(params); 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateCustomGpuParameter(*_cpp_constantEntry, _cpp_params);
} /* virtual void Ogre::Renderable::_updateCustomGpuParameter */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
)
{
   // parameter conversions 
  bool _cpp_override = override ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_override);
} /* virtual void Ogre::Renderable::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPolygonModeOverrideable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::Renderable::setUserAny */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::Renderable::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::Renderable::getUserAny */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable::RenderSystemData* _cpp_result = _cpp_this->getRenderSystemData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderSystemData* Ogre::Renderable::getRenderSystemData */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  Ogre::Renderable::RenderSystemData* _cpp_val = reinterpret_cast< Ogre::Renderable::RenderSystemData* >(val); 
   
   // cast pointer to C++ object 
   const Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<const Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderSystemData(_cpp_val);
} /* virtual void Ogre::Renderable::setRenderSystemData */


/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::TextAreaOverlayElement::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::TextAreaOverlayElement 
   // cast pointer to C++ object 
   Ogre::TextAreaOverlayElement* _cpp_this = reinterpret_cast<Ogre::TextAreaOverlayElement*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::TextAreaOverlayElement::__delete */
