///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_VertexCacheProfiler.h"

// import header files of original library
#include <OgreVertexIndexData.h>



/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     VertexCacheProfiler()
 * Type:       constructor
 * Definition: Ogre::VertexCacheProfiler::VertexCacheProfiler
 * Signature:  (IOgre_VertexCacheProfiler_CacheType)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexCacheProfiler__1_1createVertexCacheProfiler_1_1IvCacheTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong cachesize, 
  jint cachetype
)
{
   // constructor of class Ogre::VertexCacheProfiler 
   
   // parameter conversions 
  unsigned int _cpp_cachesize = cachesize;
  Ogre::VertexCacheProfiler::CacheType _cpp_cachetype = (Ogre::VertexCacheProfiler::CacheType)cachetype; 
   
   // create new instance of class Ogre::VertexCacheProfiler 
   Ogre::VertexCacheProfiler* _cpp_this = new Ogre::VertexCacheProfiler(_cpp_cachesize, _cpp_cachetype); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::VertexCacheProfiler::VertexCacheProfiler */


/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     profile()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexCacheProfiler::profile
 * Signature:  (Ogre_HardwareIndexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexCacheProfiler__1profile_1_1HardwareIndexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong indexBuffer
)
{
   // parameter conversions 
  const Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< const Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer); 
   
   // cast pointer to C++ object 
   Ogre::VertexCacheProfiler* _cpp_this = reinterpret_cast<Ogre::VertexCacheProfiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->profile(*_cpp_indexBuffer);
} /* void Ogre::VertexCacheProfiler::profile */


/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     reset()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexCacheProfiler::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexCacheProfiler__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexCacheProfiler* _cpp_this = reinterpret_cast<Ogre::VertexCacheProfiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reset();
} /* void Ogre::VertexCacheProfiler::reset */


/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     flush()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexCacheProfiler::flush
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexCacheProfiler__1flush (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexCacheProfiler* _cpp_this = reinterpret_cast<Ogre::VertexCacheProfiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->flush();
} /* void Ogre::VertexCacheProfiler::flush */


/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     getHits()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::VertexCacheProfiler::getHits
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexCacheProfiler__1getHits (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexCacheProfiler* _cpp_this = reinterpret_cast<Ogre::VertexCacheProfiler*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getHits() ; 
   return _cpp_result;
} /* unsigned int Ogre::VertexCacheProfiler::getHits */


/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     getMisses()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::VertexCacheProfiler::getMisses
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexCacheProfiler__1getMisses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexCacheProfiler* _cpp_this = reinterpret_cast<Ogre::VertexCacheProfiler*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getMisses() ; 
   return _cpp_result;
} /* unsigned int Ogre::VertexCacheProfiler::getMisses */


/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     getSize()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::VertexCacheProfiler::getSize
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexCacheProfiler__1getSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexCacheProfiler* _cpp_this = reinterpret_cast<Ogre::VertexCacheProfiler*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getSize() ; 
   return _cpp_result;
} /* unsigned int Ogre::VertexCacheProfiler::getSize */


/*
 * Class:      org.ogre4j.VertexCacheProfiler
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::VertexCacheProfiler::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexCacheProfiler__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::VertexCacheProfiler 
   // cast pointer to C++ object 
   Ogre::VertexCacheProfiler* _cpp_this = reinterpret_cast<Ogre::VertexCacheProfiler*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::VertexCacheProfiler::__delete */
