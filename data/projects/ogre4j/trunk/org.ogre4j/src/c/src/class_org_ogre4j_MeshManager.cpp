///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_MeshManager.h"

// import header files of original library
#include <OgreMeshManager.h>



/*
 * Class:      org.ogre4j.MeshManager
 * Method:     MeshManager()
 * Type:       constructor
 * Definition: Ogre::MeshManager::MeshManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1_1createMeshManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::MeshManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::MeshManager 
   Ogre::MeshManager* _cpp_this = new Ogre::MeshManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::MeshManager::MeshManager */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     _initialise()
 * Type:       non-virtual method
 * Definition: void Ogre::MeshManager::_initialise
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1_1initialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_initialise();
} /* void Ogre::MeshManager::_initialise */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     createOrRetrieve()
 * Type:       non-virtual method
 * Definition: ResourceCreateOrRetrieveResult Ogre::MeshManager::createOrRetrieve
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairListOgre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZ)Ogre_ResourceManager_ResourceCreateOrRetrieveResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1createOrRetrieve_1_1StringRStringRbvManualResourceLoaderpNameValuePairListPHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong params, 
  jint vertexBufferUsage, 
  jint indexBufferUsage, 
  jboolean vertexBufferShadowed, 
  jboolean indexBufferShadowed
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_params = reinterpret_cast< const Ogre::NameValuePairList* >(params);
  Ogre::HardwareBuffer::Usage _cpp_vertexBufferUsage = (Ogre::HardwareBuffer::Usage)vertexBufferUsage;
  Ogre::HardwareBuffer::Usage _cpp_indexBufferUsage = (Ogre::HardwareBuffer::Usage)indexBufferUsage;
  bool _cpp_vertexBufferShadowed = vertexBufferShadowed ? true : false;
  bool _cpp_indexBufferShadowed = indexBufferShadowed ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_result = new Ogre::ResourceManager::ResourceCreateOrRetrieveResult( _cpp_this->createOrRetrieve(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_params, _cpp_vertexBufferUsage, _cpp_indexBufferUsage, _cpp_vertexBufferShadowed, _cpp_indexBufferShadowed) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceCreateOrRetrieveResult Ogre::MeshManager::createOrRetrieve */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     prepare()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::MeshManager::prepare
 * Signature:  (std_stringstd_stringOgre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZ)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1prepare_1_1StringRStringRHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename, 
  jstring groupName, 
  jint vertexBufferUsage, 
  jint indexBufferUsage, 
  jboolean vertexBufferShadowed, 
  jboolean indexBufferShadowed
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  Ogre::HardwareBuffer::Usage _cpp_vertexBufferUsage = (Ogre::HardwareBuffer::Usage)vertexBufferUsage;
  Ogre::HardwareBuffer::Usage _cpp_indexBufferUsage = (Ogre::HardwareBuffer::Usage)indexBufferUsage;
  bool _cpp_vertexBufferShadowed = vertexBufferShadowed ? true : false;
  bool _cpp_indexBufferShadowed = indexBufferShadowed ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->prepare(_cpp_filename, _cpp_groupName, _cpp_vertexBufferUsage, _cpp_indexBufferUsage, _cpp_vertexBufferShadowed, _cpp_indexBufferShadowed) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshPtr Ogre::MeshManager::prepare */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     load()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::MeshManager::load
 * Signature:  (std_stringstd_stringOgre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZ)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1load_1_1StringRStringRHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename, 
  jstring groupName, 
  jint vertexBufferUsage, 
  jint indexBufferUsage, 
  jboolean vertexBufferShadowed, 
  jboolean indexBufferShadowed
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  Ogre::HardwareBuffer::Usage _cpp_vertexBufferUsage = (Ogre::HardwareBuffer::Usage)vertexBufferUsage;
  Ogre::HardwareBuffer::Usage _cpp_indexBufferUsage = (Ogre::HardwareBuffer::Usage)indexBufferUsage;
  bool _cpp_vertexBufferShadowed = vertexBufferShadowed ? true : false;
  bool _cpp_indexBufferShadowed = indexBufferShadowed ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->load(_cpp_filename, _cpp_groupName, _cpp_vertexBufferUsage, _cpp_indexBufferUsage, _cpp_vertexBufferShadowed, _cpp_indexBufferShadowed) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshPtr Ogre::MeshManager::load */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     createManual()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::MeshManager::createManual
 * Signature:  (std_stringstd_stringOgre_ManualResourceLoader)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1createManual_1_1StringRStringRManualResourceLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName, 
  jlong loader
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->createManual(_cpp_name, _cpp_groupName, _cpp_loader) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshPtr Ogre::MeshManager::createManual */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     createPlane()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::MeshManager::createPlane
 * Signature:  (std_stringstd_stringOgre_PlanefloatfloatIIZIfloatfloatOgre_Vector3Ogre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZ)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1createPlane_1_1StringRStringRPlaneRRealvRealvivivbvivRealvRealvVector3RHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName, 
  jlong plane, 
  jfloat width, 
  jfloat height, 
  jint xsegments, 
  jint ysegments, 
  jboolean normals, 
  jint numTexCoordSets, 
  jfloat uTile, 
  jfloat vTile, 
  jlong upVector, 
  jint vertexBufferUsage, 
  jint indexBufferUsage, 
  jboolean vertexShadowBuffer, 
  jboolean indexShadowBuffer
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane);
  float _cpp_width = width;
  float _cpp_height = height;
  int _cpp_xsegments = xsegments;
  int _cpp_ysegments = ysegments;
  bool _cpp_normals = normals ? true : false;
  int _cpp_numTexCoordSets = numTexCoordSets;
  float _cpp_uTile = uTile;
  float _cpp_vTile = vTile;
  const Ogre::Vector3* _cpp_upVector = reinterpret_cast< const Ogre::Vector3* >(upVector);
  Ogre::HardwareBuffer::Usage _cpp_vertexBufferUsage = (Ogre::HardwareBuffer::Usage)vertexBufferUsage;
  Ogre::HardwareBuffer::Usage _cpp_indexBufferUsage = (Ogre::HardwareBuffer::Usage)indexBufferUsage;
  bool _cpp_vertexShadowBuffer = vertexShadowBuffer ? true : false;
  bool _cpp_indexShadowBuffer = indexShadowBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->createPlane(_cpp_name, _cpp_groupName, *_cpp_plane, _cpp_width, _cpp_height, _cpp_xsegments, _cpp_ysegments, _cpp_normals, _cpp_numTexCoordSets, _cpp_uTile, _cpp_vTile, *_cpp_upVector, _cpp_vertexBufferUsage, _cpp_indexBufferUsage, _cpp_vertexShadowBuffer, _cpp_indexShadowBuffer) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshPtr Ogre::MeshManager::createPlane */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     createCurvedIllusionPlane()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::MeshManager::createCurvedIllusionPlane
 * Signature:  (std_stringstd_stringOgre_PlanefloatfloatfloatIIZIfloatfloatOgre_Vector3Ogre_QuaternionOgre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZI)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1createCurvedIllusionPlane_1_1StringRStringRPlaneRRealvRealvRealvivivbvivRealvRealvVector3RQuaternionRHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName, 
  jlong plane, 
  jfloat width, 
  jfloat height, 
  jfloat curvature, 
  jint xsegments, 
  jint ysegments, 
  jboolean normals, 
  jint numTexCoordSets, 
  jfloat uTile, 
  jfloat vTile, 
  jlong upVector, 
  jlong orientation, 
  jint vertexBufferUsage, 
  jint indexBufferUsage, 
  jboolean vertexShadowBuffer, 
  jboolean indexShadowBuffer, 
  jint ySegmentsToKeep
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane);
  float _cpp_width = width;
  float _cpp_height = height;
  float _cpp_curvature = curvature;
  int _cpp_xsegments = xsegments;
  int _cpp_ysegments = ysegments;
  bool _cpp_normals = normals ? true : false;
  int _cpp_numTexCoordSets = numTexCoordSets;
  float _cpp_uTile = uTile;
  float _cpp_vTile = vTile;
  const Ogre::Vector3* _cpp_upVector = reinterpret_cast< const Ogre::Vector3* >(upVector);
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation);
  Ogre::HardwareBuffer::Usage _cpp_vertexBufferUsage = (Ogre::HardwareBuffer::Usage)vertexBufferUsage;
  Ogre::HardwareBuffer::Usage _cpp_indexBufferUsage = (Ogre::HardwareBuffer::Usage)indexBufferUsage;
  bool _cpp_vertexShadowBuffer = vertexShadowBuffer ? true : false;
  bool _cpp_indexShadowBuffer = indexShadowBuffer ? true : false;
  int _cpp_ySegmentsToKeep = ySegmentsToKeep; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->createCurvedIllusionPlane(_cpp_name, _cpp_groupName, *_cpp_plane, _cpp_width, _cpp_height, _cpp_curvature, _cpp_xsegments, _cpp_ysegments, _cpp_normals, _cpp_numTexCoordSets, _cpp_uTile, _cpp_vTile, *_cpp_upVector, *_cpp_orientation, _cpp_vertexBufferUsage, _cpp_indexBufferUsage, _cpp_vertexShadowBuffer, _cpp_indexShadowBuffer, _cpp_ySegmentsToKeep) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshPtr Ogre::MeshManager::createCurvedIllusionPlane */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     createCurvedPlane()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::MeshManager::createCurvedPlane
 * Signature:  (std_stringstd_stringOgre_PlanefloatfloatfloatIIZIfloatfloatOgre_Vector3Ogre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZ)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1createCurvedPlane_1_1StringRStringRPlaneRRealvRealvRealvivivbvivRealvRealvVector3RHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName, 
  jlong plane, 
  jfloat width, 
  jfloat height, 
  jfloat bow, 
  jint xsegments, 
  jint ysegments, 
  jboolean normals, 
  jint numTexCoordSets, 
  jfloat xTile, 
  jfloat yTile, 
  jlong upVector, 
  jint vertexBufferUsage, 
  jint indexBufferUsage, 
  jboolean vertexShadowBuffer, 
  jboolean indexShadowBuffer
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane);
  float _cpp_width = width;
  float _cpp_height = height;
  float _cpp_bow = bow;
  int _cpp_xsegments = xsegments;
  int _cpp_ysegments = ysegments;
  bool _cpp_normals = normals ? true : false;
  int _cpp_numTexCoordSets = numTexCoordSets;
  float _cpp_xTile = xTile;
  float _cpp_yTile = yTile;
  const Ogre::Vector3* _cpp_upVector = reinterpret_cast< const Ogre::Vector3* >(upVector);
  Ogre::HardwareBuffer::Usage _cpp_vertexBufferUsage = (Ogre::HardwareBuffer::Usage)vertexBufferUsage;
  Ogre::HardwareBuffer::Usage _cpp_indexBufferUsage = (Ogre::HardwareBuffer::Usage)indexBufferUsage;
  bool _cpp_vertexShadowBuffer = vertexShadowBuffer ? true : false;
  bool _cpp_indexShadowBuffer = indexShadowBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->createCurvedPlane(_cpp_name, _cpp_groupName, *_cpp_plane, _cpp_width, _cpp_height, _cpp_bow, _cpp_xsegments, _cpp_ysegments, _cpp_normals, _cpp_numTexCoordSets, _cpp_xTile, _cpp_yTile, *_cpp_upVector, _cpp_vertexBufferUsage, _cpp_indexBufferUsage, _cpp_vertexShadowBuffer, _cpp_indexShadowBuffer) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshPtr Ogre::MeshManager::createCurvedPlane */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     createBezierPatch()
 * Type:       non-virtual method
 * Definition: PatchMeshPtr Ogre::MeshManager::createBezierPatch
 * Signature:  (std_stringstd_stringVOgre_VertexDeclarationIIIIOgre_PatchSurface_VisibleSideOgre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZ)Ogre_PatchMeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1createBezierPatch_1_1StringRStringRvpVertexDeclarationpivivivivPatchSurface_1VisibleSidevHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName, 
  jlong controlPointBuffer, 
  jlong declaration, 
  jint width, 
  jint height, 
  jint uMaxSubdivisionLevel, 
  jint vMaxSubdivisionLevel, 
  jint visibleSide, 
  jint vbUsage, 
  jint ibUsage, 
  jboolean vbUseShadow, 
  jboolean ibUseShadow
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  void* _cpp_controlPointBuffer = reinterpret_cast<void*>(controlPointBuffer);
  Ogre::VertexDeclaration* _cpp_declaration = reinterpret_cast< Ogre::VertexDeclaration* >(declaration);
  size_t _cpp_width = width;
  size_t _cpp_height = height;
  size_t _cpp_uMaxSubdivisionLevel = uMaxSubdivisionLevel;
  size_t _cpp_vMaxSubdivisionLevel = vMaxSubdivisionLevel;
  Ogre::PatchSurface::VisibleSide _cpp_visibleSide = (Ogre::PatchSurface::VisibleSide)visibleSide;
  Ogre::HardwareBuffer::Usage _cpp_vbUsage = (Ogre::HardwareBuffer::Usage)vbUsage;
  Ogre::HardwareBuffer::Usage _cpp_ibUsage = (Ogre::HardwareBuffer::Usage)ibUsage;
  bool _cpp_vbUseShadow = vbUseShadow ? true : false;
  bool _cpp_ibUseShadow = ibUseShadow ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PatchMeshPtr* _cpp_result = new Ogre::PatchMeshPtr( _cpp_this->createBezierPatch(_cpp_name, _cpp_groupName, _cpp_controlPointBuffer, _cpp_declaration, _cpp_width, _cpp_height, _cpp_uMaxSubdivisionLevel, _cpp_vMaxSubdivisionLevel, _cpp_visibleSide, _cpp_vbUsage, _cpp_ibUsage, _cpp_vbUseShadow, _cpp_ibUseShadow) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* PatchMeshPtr Ogre::MeshManager::createBezierPatch */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     setPrepareAllMeshesForShadowVolumes()
 * Type:       non-virtual method
 * Definition: void Ogre::MeshManager::setPrepareAllMeshesForShadowVolumes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1setPrepareAllMeshesForShadowVolumes_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPrepareAllMeshesForShadowVolumes(_cpp_enable);
} /* void Ogre::MeshManager::setPrepareAllMeshesForShadowVolumes */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getPrepareAllMeshesForShadowVolumes()
 * Type:       non-virtual method
 * Definition: bool Ogre::MeshManager::getPrepareAllMeshesForShadowVolumes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MeshManager__1getPrepareAllMeshesForShadowVolumes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPrepareAllMeshesForShadowVolumes() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MeshManager::getPrepareAllMeshesForShadowVolumes */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getBoundsPaddingFactor()
 * Type:       non-virtual method
 * Definition: Real Ogre::MeshManager::getBoundsPaddingFactor
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_MeshManager__1getBoundsPaddingFactor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundsPaddingFactor() ; 
   return _cpp_result;
} /* Real Ogre::MeshManager::getBoundsPaddingFactor */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     setBoundsPaddingFactor()
 * Type:       non-virtual method
 * Definition: void Ogre::MeshManager::setBoundsPaddingFactor
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1setBoundsPaddingFactor_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat paddingFactor
)
{
   // parameter conversions 
  float _cpp_paddingFactor = paddingFactor; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBoundsPaddingFactor(_cpp_paddingFactor);
} /* void Ogre::MeshManager::setBoundsPaddingFactor */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     setListener()
 * Type:       non-virtual method
 * Definition: void Ogre::MeshManager::setListener
 * Signature:  (Ogre_MeshSerializerListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1setListener_1_1MeshSerializerListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MeshSerializerListener* _cpp_listener = reinterpret_cast< Ogre::MeshSerializerListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* void Ogre::MeshManager::setListener */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getListener()
 * Type:       non-virtual method
 * Definition: MeshSerializerListener* Ogre::MeshManager::getListener
 * Signature:  ()Ogre_MeshSerializerListener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1getListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshSerializerListener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshSerializerListener* Ogre::MeshManager::getListener */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     loadResource()
 * Type:       virtual method
 * Definition: void Ogre::MeshManager::loadResource
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1loadResource_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->loadResource(_cpp_res);
} /* void Ogre::MeshManager::loadResource */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static MeshManager& Ogre::MeshManager::getSingleton
 * Signature:  ()Ogre_MeshManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::MeshManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::MeshManager* _cpp_result = & Ogre::MeshManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static MeshManager& Ogre::MeshManager::getSingleton */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static MeshManager* Ogre::MeshManager::getSingletonPtr
 * Signature:  ()Ogre_MeshManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::MeshManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::MeshManager* _cpp_result = Ogre::MeshManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static MeshManager* Ogre::MeshManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     create()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::create
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1create_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong createParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_createParams = reinterpret_cast< const Ogre::NameValuePairList* >(createParams); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->create(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_createParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::create */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     createOrRetrieve()
 * Type:       virtual method
 * Definition: virtual ResourceCreateOrRetrieveResult Ogre::ResourceManager::createOrRetrieve
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourceManager_ResourceCreateOrRetrieveResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1createOrRetrieve_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong createParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_createParams = reinterpret_cast< const Ogre::NameValuePairList* >(createParams); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_result = new Ogre::ResourceManager::ResourceCreateOrRetrieveResult( _cpp_this->Ogre::ResourceManager::createOrRetrieve(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_createParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceCreateOrRetrieveResult Ogre::ResourceManager::createOrRetrieve */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     setMemoryBudget()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::setMemoryBudget
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1setMemoryBudget_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bytes
)
{
   // parameter conversions 
  size_t _cpp_bytes = bytes; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMemoryBudget(_cpp_bytes);
} /* virtual void Ogre::ResourceManager::setMemoryBudget */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getMemoryBudget()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::ResourceManager::getMemoryBudget
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MeshManager__1getMemoryBudget_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::MeshManager* _cpp_this = reinterpret_cast<const Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getMemoryBudget() ; 
   return _cpp_result;
} /* virtual size_t Ogre::ResourceManager::getMemoryBudget */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getMemoryUsage()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::ResourceManager::getMemoryUsage
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MeshManager__1getMemoryUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::MeshManager* _cpp_this = reinterpret_cast<const Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getMemoryUsage() ; 
   return _cpp_result;
} /* virtual size_t Ogre::ResourceManager::getMemoryUsage */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unload
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1unload_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::unload(_cpp_name);
} /* virtual void Ogre::ResourceManager::unload */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unload
 * Signature:  (unsigned_long)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1unload_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::unload(_cpp_handle);
} /* virtual void Ogre::ResourceManager::unload */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     unloadAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unloadAll
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1unloadAll_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadAll(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::unloadAll */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     reloadAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::reloadAll
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1reloadAll_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reloadAll(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::reloadAll */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     unloadUnreferencedResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unloadUnreferencedResources
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1unloadUnreferencedResources_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadUnreferencedResources(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::unloadUnreferencedResources */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     reloadUnreferencedResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::reloadUnreferencedResources
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1reloadUnreferencedResources_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reloadUnreferencedResources(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::reloadUnreferencedResources */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1remove_1_1ResourcePtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  Ogre::ResourcePtr* _cpp_r = reinterpret_cast< Ogre::ResourcePtr* >(r); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(*_cpp_r);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1remove_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(_cpp_name);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (unsigned_long)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1remove_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(_cpp_handle);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     removeAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::removeAll
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1removeAll (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAll();
} /* virtual void Ogre::ResourceManager::removeAll */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getByName()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::getByName
 * Signature:  (std_string)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1getByName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->getByName(_cpp_name) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::getByName */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getByHandle()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::getByHandle
 * Signature:  (unsigned_long)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1getByHandle_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->getByHandle(_cpp_handle) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::getByHandle */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     resourceExists()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::resourceExists
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MeshManager__1resourceExists_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Ogre::ResourceManager::resourceExists(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::resourceExists */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     resourceExists()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::resourceExists
 * Signature:  (unsigned_long)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MeshManager__1resourceExists_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Ogre::ResourceManager::resourceExists(_cpp_handle) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::resourceExists */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     _notifyResourceTouched()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceTouched
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1_1notifyResourceTouched_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceTouched(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceTouched */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     _notifyResourceLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceLoaded
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1_1notifyResourceLoaded_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceLoaded(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceLoaded */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     _notifyResourceUnloaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceUnloaded
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1_1notifyResourceUnloaded_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceUnloaded(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceUnloaded */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::prepare
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1prepare_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_loadParams = reinterpret_cast< const Ogre::NameValuePairList* >(loadParams); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->Ogre::ResourceManager::prepare(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_loadParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::prepare */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::load
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1load_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_loadParams = reinterpret_cast< const Ogre::NameValuePairList* >(loadParams); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->Ogre::ResourceManager::load(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_loadParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::load */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getScriptPatterns()
 * Type:       virtual method
 * Definition: virtual const StringVector& Ogre::ResourceManager::getScriptPatterns
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1getScriptPatterns_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::MeshManager* _cpp_this = reinterpret_cast<const Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getScriptPatterns() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const StringVector& Ogre::ResourceManager::getScriptPatterns */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     parseScript()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::parseScript
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1parseScript_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring groupName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parseScript(*_cpp_stream, _cpp_groupName);
} /* virtual void Ogre::ResourceManager::parseScript */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getLoadingOrder()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ResourceManager::getLoadingOrder
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_MeshManager__1getLoadingOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::MeshManager* _cpp_this = reinterpret_cast<const Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLoadingOrder() ; 
   return _cpp_result;
} /* virtual Real Ogre::ResourceManager::getLoadingOrder */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getResourceType()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ResourceManager::getResourceType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_MeshManager__1getResourceType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::MeshManager* _cpp_this = reinterpret_cast<const Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getResourceType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ResourceManager::getResourceType */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     setVerbose()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::setVerbose
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1setVerbose_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean v
)
{
   // parameter conversions 
  bool _cpp_v = v ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVerbose(_cpp_v);
} /* virtual void Ogre::ResourceManager::setVerbose */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getVerbose()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::getVerbose
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MeshManager__1getVerbose (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVerbose() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::getVerbose */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     getResourceIterator()
 * Type:       non-virtual method
 * Definition: ResourceMapIterator Ogre::ResourceManager::getResourceIterator
 * Signature:  ()Ogre_ResourceManager_ResourceMapIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshManager__1getResourceIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceMapIterator* _cpp_result = new Ogre::ResourceManager::ResourceMapIterator( _cpp_this->getResourceIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceMapIterator Ogre::ResourceManager::getResourceIterator */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     prepareResource()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualResourceLoader::prepareResource
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1prepareResource_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong resource
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_resource = reinterpret_cast< Ogre::Resource* >(resource); 
   
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepareResource(_cpp_resource);
} /* virtual void Ogre::ManualResourceLoader::prepareResource */


/*
 * Class:      org.ogre4j.MeshManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::MeshManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::MeshManager 
   // cast pointer to C++ object 
   Ogre::MeshManager* _cpp_this = reinterpret_cast<Ogre::MeshManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::MeshManager::__delete */
