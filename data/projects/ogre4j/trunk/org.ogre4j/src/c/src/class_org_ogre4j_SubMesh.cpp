///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_SubMesh.h"

// import header files of original library
#include <OgreSubMesh.h>



/*
 * Class:      org.ogre4j.SubMesh
 * Method:     SubMesh()
 * Type:       constructor
 * Definition: Ogre::SubMesh::SubMesh
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1_1createSubMesh (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::SubMesh 
   
   // parameter conversions 
   
   // create new instance of class Ogre::SubMesh 
   Ogre::SubMesh* _cpp_this = new Ogre::SubMesh(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::SubMesh::SubMesh */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setMaterialName()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::setMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring matName
)
{
   // parameter conversions 
  std::string _cpp_matName = ""; org::xbig::jni::to_stdstring(_jni_env_, matName, _cpp_matName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialName(_cpp_matName);
} /* void Ogre::SubMesh::setMaterialName */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getMaterialName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::SubMesh::getMaterialName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_SubMesh__1getMaterialName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SubMesh* _cpp_this = reinterpret_cast<const Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMaterialName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::SubMesh::getMaterialName */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     isMatInitialised()
 * Type:       non-virtual method
 * Definition: bool Ogre::SubMesh::isMatInitialised
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SubMesh__1isMatInitialised_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SubMesh* _cpp_this = reinterpret_cast<const Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isMatInitialised() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::SubMesh::isMatInitialised */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     _getRenderOperation()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::_getRenderOperation
 * Signature:  (Ogre_RenderOperationunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1_1getRenderOperation_1_1RenderOperationrushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rend, 
  jint lodIndex
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_rend = reinterpret_cast< Ogre::RenderOperation* >(rend);
  unsigned short _cpp_lodIndex = lodIndex; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_getRenderOperation(*_cpp_rend, _cpp_lodIndex);
} /* void Ogre::SubMesh::_getRenderOperation */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     addBoneAssignment()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::addBoneAssignment
 * Signature:  (Ogre_VertexBoneAssignment_s)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1addBoneAssignment_1_1VertexBoneAssignmentR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vertBoneAssign
)
{
   // parameter conversions 
  const Ogre::VertexBoneAssignment_s* _cpp_vertBoneAssign = reinterpret_cast< const Ogre::VertexBoneAssignment_s* >(vertBoneAssign); 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addBoneAssignment(*_cpp_vertBoneAssign);
} /* void Ogre::SubMesh::addBoneAssignment */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     clearBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::clearBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1clearBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearBoneAssignments();
} /* void Ogre::SubMesh::clearBoneAssignments */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getBoneAssignmentIterator()
 * Type:       non-virtual method
 * Definition: BoneAssignmentIterator Ogre::SubMesh::getBoneAssignmentIterator
 * Signature:  ()Ogre_SubMesh_BoneAssignmentIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getBoneAssignmentIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh::BoneAssignmentIterator* _cpp_result = new Ogre::SubMesh::BoneAssignmentIterator( _cpp_this->getBoneAssignmentIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* BoneAssignmentIterator Ogre::SubMesh::getBoneAssignmentIterator */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getBoneAssignments()
 * Type:       non-virtual method
 * Definition: const VertexBoneAssignmentList& Ogre::SubMesh::getBoneAssignments
 * Signature:  ()Ogre_SubMesh_VertexBoneAssignmentList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh::VertexBoneAssignmentList* _cpp_result = & _cpp_this->getBoneAssignments() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VertexBoneAssignmentList& Ogre::SubMesh::getBoneAssignments */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     _compileBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::_compileBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1_1compileBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_compileBoneAssignments();
} /* void Ogre::SubMesh::_compileBoneAssignments */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getAliasTextureIterator()
 * Type:       non-virtual method
 * Definition: AliasTextureIterator Ogre::SubMesh::getAliasTextureIterator
 * Signature:  ()Ogre_SubMesh_AliasTextureIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getAliasTextureIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SubMesh* _cpp_this = reinterpret_cast<const Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh::AliasTextureIterator* _cpp_result = new Ogre::SubMesh::AliasTextureIterator( _cpp_this->getAliasTextureIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AliasTextureIterator Ogre::SubMesh::getAliasTextureIterator */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     addTextureAlias()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::addTextureAlias
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1addTextureAlias_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring aliasName, 
  jstring textureName
)
{
   // parameter conversions 
  std::string _cpp_aliasName = ""; org::xbig::jni::to_stdstring(_jni_env_, aliasName, _cpp_aliasName); // calls c-tor only. Not operator= .;
  std::string _cpp_textureName = ""; org::xbig::jni::to_stdstring(_jni_env_, textureName, _cpp_textureName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addTextureAlias(_cpp_aliasName, _cpp_textureName);
} /* void Ogre::SubMesh::addTextureAlias */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     removeTextureAlias()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::removeTextureAlias
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1removeTextureAlias_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring aliasName
)
{
   // parameter conversions 
  std::string _cpp_aliasName = ""; org::xbig::jni::to_stdstring(_jni_env_, aliasName, _cpp_aliasName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeTextureAlias(_cpp_aliasName);
} /* void Ogre::SubMesh::removeTextureAlias */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     removeAllTextureAliases()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::removeAllTextureAliases
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1removeAllTextureAliases (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllTextureAliases();
} /* void Ogre::SubMesh::removeAllTextureAliases */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     hasTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::SubMesh::hasTextureAliases
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SubMesh__1hasTextureAliases_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SubMesh* _cpp_this = reinterpret_cast<const Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasTextureAliases() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::SubMesh::hasTextureAliases */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getTextureAliasCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::SubMesh::getTextureAliasCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SubMesh__1getTextureAliasCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SubMesh* _cpp_this = reinterpret_cast<const Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getTextureAliasCount() ; 
   return _cpp_result;
} /* size_t Ogre::SubMesh::getTextureAliasCount */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     updateMaterialUsingTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::SubMesh::updateMaterialUsingTextureAliases
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SubMesh__1updateMaterialUsingTextureAliases (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->updateMaterialUsingTextureAliases() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::SubMesh::updateMaterialUsingTextureAliases */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getVertexAnimationType()
 * Type:       non-virtual method
 * Definition: VertexAnimationType Ogre::SubMesh::getVertexAnimationType
 * Signature:  ()Ogre_VertexAnimationType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SubMesh__1getVertexAnimationType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SubMesh* _cpp_this = reinterpret_cast<const Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexAnimationType _cpp_result = _cpp_this->getVertexAnimationType() ; 
   return _cpp_result;
} /* VertexAnimationType Ogre::SubMesh::getVertexAnimationType */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     generateExtremes()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::generateExtremes
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1generateExtremes_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
)
{
   // parameter conversions 
  size_t _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->generateExtremes(_cpp_count);
} /* void Ogre::SubMesh::generateExtremes */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     isBuildEdgesEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::SubMesh::isBuildEdgesEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SubMesh__1isBuildEdgesEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SubMesh* _cpp_this = reinterpret_cast<const Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isBuildEdgesEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::SubMesh::isBuildEdgesEnabled */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setBuildEdgesEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::SubMesh::setBuildEdgesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setBuildEdgesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean b
)
{
   // parameter conversions 
  bool _cpp_b = b ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBuildEdgesEnabled(_cpp_b);
} /* void Ogre::SubMesh::setBuildEdgesEnabled */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SubMesh::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::SubMesh 
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::SubMesh::__delete */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getuseSharedVertices()
 * Type:       getter for public attribute
 * Definition: bool Ogre::SubMesh::useSharedVertices
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SubMesh__1getuseSharedVertices (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->useSharedVertices; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::SubMesh::useSharedVertices */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setuseSharedVertices()
 * Type:       setter for public attribute
 * Definition: bool Ogre::SubMesh::useSharedVertices
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setuseSharedVertices (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->useSharedVertices = _cpp__jni_value_;
} /* bool Ogre::SubMesh::useSharedVertices */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getoperationType()
 * Type:       getter for public attribute
 * Definition: RenderOperation::OperationType Ogre::SubMesh::operationType
 * Signature:  ()Ogre_RenderOperation_OperationType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SubMesh__1getoperationType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderOperation::OperationType _cpp_result = _cpp_this->operationType; 
   return _cpp_result;
} /* RenderOperation::OperationType Ogre::SubMesh::operationType */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setoperationType()
 * Type:       setter for public attribute
 * Definition: RenderOperation::OperationType Ogre::SubMesh::operationType
 * Signature:  (Ogre_RenderOperation_OperationType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setoperationType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::RenderOperation::OperationType _cpp__jni_value_ = (Ogre::RenderOperation::OperationType)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->operationType = _cpp__jni_value_;
} /* RenderOperation::OperationType Ogre::SubMesh::operationType */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getvertexData()
 * Type:       getter for public attribute
 * Definition: VertexData* Ogre::SubMesh::vertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getvertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->vertexData; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::SubMesh::vertexData */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setvertexData()
 * Type:       setter for public attribute
 * Definition: VertexData* Ogre::SubMesh::vertexData
 * Signature:  (Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setvertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::VertexData* _cpp__jni_value_ = reinterpret_cast< Ogre::VertexData* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->vertexData = _cpp__jni_value_;
} /* VertexData* Ogre::SubMesh::vertexData */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getindexData()
 * Type:       getter for public attribute
 * Definition: IndexData* Ogre::SubMesh::indexData
 * Signature:  ()Ogre_IndexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getindexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IndexData* _cpp_result = _cpp_this->indexData; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* IndexData* Ogre::SubMesh::indexData */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setindexData()
 * Type:       setter for public attribute
 * Definition: IndexData* Ogre::SubMesh::indexData
 * Signature:  (Ogre_IndexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setindexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::IndexData* _cpp__jni_value_ = reinterpret_cast< Ogre::IndexData* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->indexData = _cpp__jni_value_;
} /* IndexData* Ogre::SubMesh::indexData */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getblendIndexToBoneIndexMap()
 * Type:       getter for public attribute
 * Definition: IndexMap Ogre::SubMesh::blendIndexToBoneIndexMap
 * Signature:  ()Ogre_SubMesh_IndexMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getblendIndexToBoneIndexMap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh::IndexMap* _cpp_result = new Ogre::SubMesh::IndexMap( _cpp_this->blendIndexToBoneIndexMap); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* IndexMap Ogre::SubMesh::blendIndexToBoneIndexMap */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setblendIndexToBoneIndexMap()
 * Type:       setter for public attribute
 * Definition: IndexMap Ogre::SubMesh::blendIndexToBoneIndexMap
 * Signature:  (Ogre_SubMesh_IndexMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setblendIndexToBoneIndexMap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::SubMesh::IndexMap* _cpp__jni_value_ = reinterpret_cast< Ogre::SubMesh::IndexMap* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->blendIndexToBoneIndexMap = *_cpp__jni_value_;
} /* IndexMap Ogre::SubMesh::blendIndexToBoneIndexMap */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getmLodFaceList()
 * Type:       getter for public attribute
 * Definition: ProgressiveMesh::LODFaceList Ogre::SubMesh::mLodFaceList
 * Signature:  ()Ogre_ProgressiveMesh_LODFaceList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getmLodFaceList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ProgressiveMesh::LODFaceList* _cpp_result = new Ogre::ProgressiveMesh::LODFaceList( _cpp_this->mLodFaceList); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ProgressiveMesh::LODFaceList Ogre::SubMesh::mLodFaceList */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setmLodFaceList()
 * Type:       setter for public attribute
 * Definition: ProgressiveMesh::LODFaceList Ogre::SubMesh::mLodFaceList
 * Signature:  (Ogre_ProgressiveMesh_LODFaceList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setmLodFaceList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::ProgressiveMesh::LODFaceList* _cpp__jni_value_ = reinterpret_cast< Ogre::ProgressiveMesh::LODFaceList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mLodFaceList = *_cpp__jni_value_;
} /* ProgressiveMesh::LODFaceList Ogre::SubMesh::mLodFaceList */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getextremityPoints()
 * Type:       getter for public attribute
 * Definition: std::vector<Vector3> Ogre::SubMesh::extremityPoints
 * Signature:  ()std_vector__Vector3__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getextremityPoints (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const std::vector< Ogre::Vector3 >* _cpp_result = new std::vector< Ogre::Vector3 >( _cpp_this->extremityPoints); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* std::vector<Vector3> Ogre::SubMesh::extremityPoints */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setextremityPoints()
 * Type:       setter for public attribute
 * Definition: std::vector<Vector3> Ogre::SubMesh::extremityPoints
 * Signature:  (std_vector__Vector3__)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setextremityPoints (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  std::vector< Ogre::Vector3 >* _cpp__jni_value_ = reinterpret_cast< std::vector< Ogre::Vector3 >* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extremityPoints = *_cpp__jni_value_;
} /* std::vector<Vector3> Ogre::SubMesh::extremityPoints */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     getparent()
 * Type:       getter for public attribute
 * Definition: Mesh* Ogre::SubMesh::parent
 * Signature:  ()Ogre_Mesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SubMesh__1getparent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this = reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh* _cpp_result = _cpp_this->parent; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Mesh* Ogre::SubMesh::parent */


/*
 * Class:      org.ogre4j.SubMesh
 * Method:     setparent()
 * Type:       setter for public attribute
 * Definition: Mesh* Ogre::SubMesh::parent
 * Signature:  (Ogre_Mesh)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SubMesh__1setparent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Mesh* _cpp__jni_value_ = reinterpret_cast< Ogre::Mesh* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SubMesh* _cpp_this =reinterpret_cast<Ogre::SubMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parent = _cpp__jni_value_;
} /* Mesh* Ogre::SubMesh::parent */
