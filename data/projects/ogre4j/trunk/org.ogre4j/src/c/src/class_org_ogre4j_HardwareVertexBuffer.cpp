///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_HardwareVertexBuffer.h"

// import header files of original library
#include <OgreHardwareVertexBuffer.h>



/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     getVertexSize()
 * Type:       non-virtual method
 * Definition: size_t Ogre::HardwareVertexBuffer::getVertexSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_HardwareVertexBuffer__1getVertexSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<const Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getVertexSize() ; 
   return _cpp_result;
} /* size_t Ogre::HardwareVertexBuffer::getVertexSize */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     getNumVertices()
 * Type:       non-virtual method
 * Definition: size_t Ogre::HardwareVertexBuffer::getNumVertices
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_HardwareVertexBuffer__1getNumVertices_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<const Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumVertices() ; 
   return _cpp_result;
} /* size_t Ogre::HardwareVertexBuffer::getNumVertices */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     lock()
 * Type:       virtual method
 * Definition: virtual void* Ogre::HardwareBuffer::lock
 * Signature:  (IIOgre_HardwareBuffer_LockOptions)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareVertexBuffer__1lock_1_1ivivLockOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint offset, 
  jint length, 
  jint options
)
{
   // parameter conversions 
  size_t _cpp_offset = offset;
  size_t _cpp_length = length;
  Ogre::HardwareBuffer::LockOptions _cpp_options = (Ogre::HardwareBuffer::LockOptions)options; 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   void* _cpp_result = _cpp_this->Ogre::HardwareBuffer::lock(_cpp_offset, _cpp_length, _cpp_options) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual void* Ogre::HardwareBuffer::lock */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     lock()
 * Type:       non-virtual method
 * Definition: void* Ogre::HardwareBuffer::lock
 * Signature:  (Ogre_HardwareBuffer_LockOptions)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareVertexBuffer__1lock_1_1LockOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint options
)
{
   // parameter conversions 
  Ogre::HardwareBuffer::LockOptions _cpp_options = (Ogre::HardwareBuffer::LockOptions)options; 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   void* _cpp_result = _cpp_this->Ogre::HardwareBuffer::lock(_cpp_options) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* void* Ogre::HardwareBuffer::lock */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     unlock()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBuffer::unlock
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareVertexBuffer__1unlock (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unlock();
} /* virtual void Ogre::HardwareBuffer::unlock */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     readData()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::HardwareBuffer::readData
 * Signature:  (IIV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareVertexBuffer__1readData_1_1ivivvp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint offset, 
  jint length, 
  jlong pDest
)
{
   // parameter conversions 
  size_t _cpp_offset = offset;
  size_t _cpp_length = length;
  void* _cpp_pDest = reinterpret_cast<void*>(pDest); 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->readData(_cpp_offset, _cpp_length, _cpp_pDest);
} /* virtual void Ogre::HardwareBuffer::readData */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     writeData()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::HardwareBuffer::writeData
 * Signature:  (IIVZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareVertexBuffer__1writeData_1_1ivivvPbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint offset, 
  jint length, 
  jlong pSource, 
  jboolean discardWholeBuffer
)
{
   // parameter conversions 
  size_t _cpp_offset = offset;
  size_t _cpp_length = length;
  const void* _cpp_pSource = reinterpret_cast<void*>(pSource);
  bool _cpp_discardWholeBuffer = discardWholeBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->writeData(_cpp_offset, _cpp_length, _cpp_pSource, _cpp_discardWholeBuffer);
} /* virtual void Ogre::HardwareBuffer::writeData */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     copyData()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBuffer::copyData
 * Signature:  (Ogre_HardwareBufferIIIZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareVertexBuffer__1copyData_1_1HardwareBufferrivivivbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong srcBuffer, 
  jint srcOffset, 
  jint dstOffset, 
  jint length, 
  jboolean discardWholeBuffer
)
{
   // parameter conversions 
  Ogre::HardwareBuffer* _cpp_srcBuffer = reinterpret_cast< Ogre::HardwareBuffer* >(srcBuffer);
  size_t _cpp_srcOffset = srcOffset;
  size_t _cpp_dstOffset = dstOffset;
  size_t _cpp_length = length;
  bool _cpp_discardWholeBuffer = discardWholeBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyData(*_cpp_srcBuffer, _cpp_srcOffset, _cpp_dstOffset, _cpp_length, _cpp_discardWholeBuffer);
} /* virtual void Ogre::HardwareBuffer::copyData */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     _updateFromShadow()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBuffer::_updateFromShadow
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareVertexBuffer__1_1updateFromShadow (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateFromShadow();
} /* virtual void Ogre::HardwareBuffer::_updateFromShadow */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     getSizeInBytes()
 * Type:       non-virtual method
 * Definition: size_t Ogre::HardwareBuffer::getSizeInBytes
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_HardwareVertexBuffer__1getSizeInBytes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<const Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSizeInBytes() ; 
   return _cpp_result;
} /* size_t Ogre::HardwareBuffer::getSizeInBytes */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     getUsage()
 * Type:       non-virtual method
 * Definition: Usage Ogre::HardwareBuffer::getUsage
 * Signature:  ()Ogre_HardwareBuffer_Usage
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_HardwareVertexBuffer__1getUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<const Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareBuffer::Usage _cpp_result = _cpp_this->getUsage() ; 
   return _cpp_result;
} /* Usage Ogre::HardwareBuffer::getUsage */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     isSystemMemory()
 * Type:       non-virtual method
 * Definition: bool Ogre::HardwareBuffer::isSystemMemory
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_HardwareVertexBuffer__1isSystemMemory_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<const Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isSystemMemory() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::HardwareBuffer::isSystemMemory */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     hasShadowBuffer()
 * Type:       non-virtual method
 * Definition: bool Ogre::HardwareBuffer::hasShadowBuffer
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_HardwareVertexBuffer__1hasShadowBuffer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<const Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasShadowBuffer() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::HardwareBuffer::hasShadowBuffer */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     isLocked()
 * Type:       non-virtual method
 * Definition: bool Ogre::HardwareBuffer::isLocked
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_HardwareVertexBuffer__1isLocked_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<const Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLocked() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::HardwareBuffer::isLocked */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     suppressHardwareUpdate()
 * Type:       non-virtual method
 * Definition: void Ogre::HardwareBuffer::suppressHardwareUpdate
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareVertexBuffer__1suppressHardwareUpdate_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean suppress
)
{
   // parameter conversions 
  bool _cpp_suppress = suppress ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->suppressHardwareUpdate(_cpp_suppress);
} /* void Ogre::HardwareBuffer::suppressHardwareUpdate */


/*
 * Class:      org.ogre4j.HardwareVertexBuffer
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::HardwareVertexBuffer::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareVertexBuffer__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::HardwareVertexBuffer 
   // cast pointer to C++ object 
   Ogre::HardwareVertexBuffer* _cpp_this = reinterpret_cast<Ogre::HardwareVertexBuffer*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::HardwareVertexBuffer::__delete */
