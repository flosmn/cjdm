///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_SimpleSpline.h"

// import header files of original library
#include <OgreSimpleSpline.h>



/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     SimpleSpline()
 * Type:       constructor
 * Definition: Ogre::SimpleSpline::SimpleSpline
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1_1createSimpleSpline (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::SimpleSpline 
   
   // parameter conversions 
   
   // create new instance of class Ogre::SimpleSpline 
   Ogre::SimpleSpline* _cpp_this = new Ogre::SimpleSpline(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::SimpleSpline::SimpleSpline */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     addPoint()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::addPoint
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1addPoint_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_p = reinterpret_cast< const Ogre::Vector3* >(p); 
   
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addPoint(*_cpp_p);
} /* void Ogre::SimpleSpline::addPoint */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     getPoint()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::SimpleSpline::getPoint
 * Signature:  (S)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1getPoint_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::SimpleSpline* _cpp_this = reinterpret_cast<const Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getPoint(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::SimpleSpline::getPoint */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     getNumPoints()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::SimpleSpline::getNumPoints
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SimpleSpline__1getNumPoints_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SimpleSpline* _cpp_this = reinterpret_cast<const Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumPoints() ; 
   return _cpp_result;
} /* unsigned short Ogre::SimpleSpline::getNumPoints */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void Ogre::SimpleSpline::clear */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     updatePoint()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::updatePoint
 * Signature:  (SOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1updatePoint_1_1HvVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  unsigned short _cpp_index = index;
  const Ogre::Vector3* _cpp_value = reinterpret_cast< const Ogre::Vector3* >(value); 
   
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updatePoint(_cpp_index, *_cpp_value);
} /* void Ogre::SimpleSpline::updatePoint */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     interpolate()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::SimpleSpline::interpolate
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1interpolate_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat t
)
{
   // parameter conversions 
  float _cpp_t = t; 
   
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->interpolate(_cpp_t) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::SimpleSpline::interpolate */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     interpolate()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::SimpleSpline::interpolate
 * Signature:  (Ifloat)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1interpolate_1_1IvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fromIndex, 
  jfloat t
)
{
   // parameter conversions 
  unsigned int _cpp_fromIndex = fromIndex;
  float _cpp_t = t; 
   
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->interpolate(_cpp_fromIndex, _cpp_t) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::SimpleSpline::interpolate */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     setAutoCalculate()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::setAutoCalculate
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1setAutoCalculate_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoCalc
)
{
   // parameter conversions 
  bool _cpp_autoCalc = autoCalc ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAutoCalculate(_cpp_autoCalc);
} /* void Ogre::SimpleSpline::setAutoCalculate */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     recalcTangents()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::recalcTangents
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1recalcTangents (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->recalcTangents();
} /* void Ogre::SimpleSpline::recalcTangents */


/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SimpleSpline::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::SimpleSpline 
   // cast pointer to C++ object 
   Ogre::SimpleSpline* _cpp_this = reinterpret_cast<Ogre::SimpleSpline*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::SimpleSpline::__delete */
