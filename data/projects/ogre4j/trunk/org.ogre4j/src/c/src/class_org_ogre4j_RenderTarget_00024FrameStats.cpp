///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderTarget_00024FrameStats.h"

// import header files of original library
#include <OgreRenderTarget.h>



/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     FrameStats()
 * Type:       constructor
 * Definition: Ogre::RenderTarget::FrameStats::FrameStats
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1_1createFrameStats (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::RenderTarget::FrameStats 
   
   // parameter conversions 
   
   // create new instance of class Ogre::RenderTarget::FrameStats 
   Ogre::RenderTarget::FrameStats* _cpp_this = new Ogre::RenderTarget::FrameStats(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RenderTarget::FrameStats::FrameStats */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderTarget::FrameStats::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderTarget::FrameStats 
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderTarget::FrameStats::__delete */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     getlastFPS()
 * Type:       getter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::lastFPS
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1getlastFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->lastFPS; 
   return _cpp_result;
} /* float Ogre::RenderTarget::FrameStats::lastFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     setlastFPS()
 * Type:       setter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::lastFPS
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1setlastFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->lastFPS = _cpp__jni_value_;
} /* float Ogre::RenderTarget::FrameStats::lastFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     getavgFPS()
 * Type:       getter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::avgFPS
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1getavgFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->avgFPS; 
   return _cpp_result;
} /* float Ogre::RenderTarget::FrameStats::avgFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     setavgFPS()
 * Type:       setter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::avgFPS
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1setavgFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->avgFPS = _cpp__jni_value_;
} /* float Ogre::RenderTarget::FrameStats::avgFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     getbestFPS()
 * Type:       getter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::bestFPS
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1getbestFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->bestFPS; 
   return _cpp_result;
} /* float Ogre::RenderTarget::FrameStats::bestFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     setbestFPS()
 * Type:       setter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::bestFPS
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1setbestFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bestFPS = _cpp__jni_value_;
} /* float Ogre::RenderTarget::FrameStats::bestFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     getworstFPS()
 * Type:       getter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::worstFPS
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1getworstFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->worstFPS; 
   return _cpp_result;
} /* float Ogre::RenderTarget::FrameStats::worstFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     setworstFPS()
 * Type:       setter for public attribute
 * Definition: float Ogre::RenderTarget::FrameStats::worstFPS
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1setworstFPS (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->worstFPS = _cpp__jni_value_;
} /* float Ogre::RenderTarget::FrameStats::worstFPS */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     getbestFrameTime()
 * Type:       getter for public attribute
 * Definition: unsigned long Ogre::RenderTarget::FrameStats::bestFrameTime
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1getbestFrameTime (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->bestFrameTime; 
   return _cpp_result;
} /* unsigned long Ogre::RenderTarget::FrameStats::bestFrameTime */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     setbestFrameTime()
 * Type:       setter for public attribute
 * Definition: unsigned long Ogre::RenderTarget::FrameStats::bestFrameTime
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1setbestFrameTime (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned long _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bestFrameTime = _cpp__jni_value_;
} /* unsigned long Ogre::RenderTarget::FrameStats::bestFrameTime */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     getworstFrameTime()
 * Type:       getter for public attribute
 * Definition: unsigned long Ogre::RenderTarget::FrameStats::worstFrameTime
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1getworstFrameTime (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->worstFrameTime; 
   return _cpp_result;
} /* unsigned long Ogre::RenderTarget::FrameStats::worstFrameTime */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     setworstFrameTime()
 * Type:       setter for public attribute
 * Definition: unsigned long Ogre::RenderTarget::FrameStats::worstFrameTime
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1setworstFrameTime (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned long _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->worstFrameTime = _cpp__jni_value_;
} /* unsigned long Ogre::RenderTarget::FrameStats::worstFrameTime */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     gettriangleCount()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::RenderTarget::FrameStats::triangleCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1gettriangleCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->triangleCount; 
   return _cpp_result;
} /* size_t Ogre::RenderTarget::FrameStats::triangleCount */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     settriangleCount()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::RenderTarget::FrameStats::triangleCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1settriangleCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->triangleCount = _cpp__jni_value_;
} /* size_t Ogre::RenderTarget::FrameStats::triangleCount */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     getbatchCount()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::RenderTarget::FrameStats::batchCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1getbatchCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this = reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->batchCount; 
   return _cpp_result;
} /* size_t Ogre::RenderTarget::FrameStats::batchCount */


/*
 * Class:      org.ogre4j.RenderTarget.00024FrameStats
 * Method:     setbatchCount()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::RenderTarget::FrameStats::batchCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderTarget_00024FrameStats__1setbatchCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderTarget::FrameStats* _cpp_this =reinterpret_cast<Ogre::RenderTarget::FrameStats*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->batchCount = _cpp__jni_value_;
} /* size_t Ogre::RenderTarget::FrameStats::batchCount */
