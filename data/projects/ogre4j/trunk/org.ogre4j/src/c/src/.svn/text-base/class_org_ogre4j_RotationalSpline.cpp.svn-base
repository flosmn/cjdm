///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RotationalSpline.h"

// import header files of original library
#include <OgreRotationalSpline.h>



/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     RotationalSpline()
 * Type:       constructor
 * Definition: Ogre::RotationalSpline::RotationalSpline
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RotationalSpline__1_1createRotationalSpline (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::RotationalSpline 
   
   // parameter conversions 
   
   // create new instance of class Ogre::RotationalSpline 
   Ogre::RotationalSpline* _cpp_this = new Ogre::RotationalSpline(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RotationalSpline::RotationalSpline */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     addPoint()
 * Type:       non-virtual method
 * Definition: void Ogre::RotationalSpline::addPoint
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RotationalSpline__1addPoint_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_p = reinterpret_cast< const Ogre::Quaternion* >(p); 
   
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addPoint(*_cpp_p);
} /* void Ogre::RotationalSpline::addPoint */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     getPoint()
 * Type:       non-virtual method
 * Definition: const Quaternion& Ogre::RotationalSpline::getPoint
 * Signature:  (S)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RotationalSpline__1getPoint_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::RotationalSpline* _cpp_this = reinterpret_cast<const Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->getPoint(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Quaternion& Ogre::RotationalSpline::getPoint */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     getNumPoints()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::RotationalSpline::getNumPoints
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RotationalSpline__1getNumPoints_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RotationalSpline* _cpp_this = reinterpret_cast<const Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumPoints() ; 
   return _cpp_result;
} /* unsigned short Ogre::RotationalSpline::getNumPoints */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::RotationalSpline::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RotationalSpline__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void Ogre::RotationalSpline::clear */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     updatePoint()
 * Type:       non-virtual method
 * Definition: void Ogre::RotationalSpline::updatePoint
 * Signature:  (SOgre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RotationalSpline__1updatePoint_1_1HvQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  unsigned short _cpp_index = index;
  const Ogre::Quaternion* _cpp_value = reinterpret_cast< const Ogre::Quaternion* >(value); 
   
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updatePoint(_cpp_index, *_cpp_value);
} /* void Ogre::RotationalSpline::updatePoint */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     interpolate()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::RotationalSpline::interpolate
 * Signature:  (floatZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RotationalSpline__1interpolate_1_1Realvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat t, 
  jboolean useShortestPath
)
{
   // parameter conversions 
  float _cpp_t = t;
  bool _cpp_useShortestPath = useShortestPath ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->interpolate(_cpp_t, _cpp_useShortestPath) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::RotationalSpline::interpolate */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     interpolate()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::RotationalSpline::interpolate
 * Signature:  (IfloatZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RotationalSpline__1interpolate_1_1IvRealvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fromIndex, 
  jfloat t, 
  jboolean useShortestPath
)
{
   // parameter conversions 
  unsigned int _cpp_fromIndex = fromIndex;
  float _cpp_t = t;
  bool _cpp_useShortestPath = useShortestPath ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->interpolate(_cpp_fromIndex, _cpp_t, _cpp_useShortestPath) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::RotationalSpline::interpolate */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     setAutoCalculate()
 * Type:       non-virtual method
 * Definition: void Ogre::RotationalSpline::setAutoCalculate
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RotationalSpline__1setAutoCalculate_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoCalc
)
{
   // parameter conversions 
  bool _cpp_autoCalc = autoCalc ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAutoCalculate(_cpp_autoCalc);
} /* void Ogre::RotationalSpline::setAutoCalculate */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     recalcTangents()
 * Type:       non-virtual method
 * Definition: void Ogre::RotationalSpline::recalcTangents
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RotationalSpline__1recalcTangents (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->recalcTangents();
} /* void Ogre::RotationalSpline::recalcTangents */


/*
 * Class:      org.ogre4j.RotationalSpline
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RotationalSpline::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RotationalSpline__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RotationalSpline 
   // cast pointer to C++ object 
   Ogre::RotationalSpline* _cpp_this = reinterpret_cast<Ogre::RotationalSpline*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RotationalSpline::__delete */
