///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderSystem.h"

// import header files of original library
#include <OgreRenderSystem.h>



/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getName()
 * Type:       pure virtual method
 * Definition: virtual const String& Ogre::RenderSystem::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystem__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::RenderSystem::getName */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getConfigOptions()
 * Type:       pure virtual method
 * Definition: virtual ConfigOptionMap& Ogre::RenderSystem::getConfigOptions
 * Signature:  ()Ogre_ConfigOptionMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getConfigOptions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ConfigOptionMap* _cpp_result = & _cpp_this->getConfigOptions() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ConfigOptionMap& Ogre::RenderSystem::getConfigOptions */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setConfigOption()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setConfigOption
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setConfigOption_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setConfigOption(_cpp_name, _cpp_value);
} /* virtual void Ogre::RenderSystem::setConfigOption */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     createHardwareOcclusionQuery()
 * Type:       pure virtual method
 * Definition: virtual HardwareOcclusionQuery* Ogre::RenderSystem::createHardwareOcclusionQuery
 * Signature:  ()Ogre_HardwareOcclusionQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1createHardwareOcclusionQuery (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareOcclusionQuery* _cpp_result = _cpp_this->createHardwareOcclusionQuery() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual HardwareOcclusionQuery* Ogre::RenderSystem::createHardwareOcclusionQuery */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyHardwareOcclusionQuery()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyHardwareOcclusionQuery
 * Signature:  (Ogre_HardwareOcclusionQuery)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyHardwareOcclusionQuery_1_1HardwareOcclusionQueryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong hq
)
{
   // parameter conversions 
  Ogre::HardwareOcclusionQuery* _cpp_hq = reinterpret_cast< Ogre::HardwareOcclusionQuery* >(hq); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyHardwareOcclusionQuery(_cpp_hq);
} /* virtual void Ogre::RenderSystem::destroyHardwareOcclusionQuery */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     validateConfigOptions()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::RenderSystem::validateConfigOptions
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystem__1validateConfigOptions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->validateConfigOptions() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::RenderSystem::validateConfigOptions */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _initialise()
 * Type:       virtual method
 * Definition: virtual RenderWindow* Ogre::RenderSystem::_initialise
 * Signature:  (Zstd_string)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1initialise_1_1bvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoCreateWindow, 
  jstring windowTitle
)
{
   // parameter conversions 
  bool _cpp_autoCreateWindow = autoCreateWindow ? true : false;
  std::string _cpp_windowTitle = ""; org::xbig::jni::to_stdstring(_jni_env_, windowTitle, _cpp_windowTitle); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderWindow* _cpp_result = _cpp_this->_initialise(_cpp_autoCreateWindow, _cpp_windowTitle) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderWindow* Ogre::RenderSystem::_initialise */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     createRenderSystemCapabilities()
 * Type:       pure virtual method
 * Definition: virtual RenderSystemCapabilities* Ogre::RenderSystem::createRenderSystemCapabilities
 * Signature:  ()Ogre_RenderSystemCapabilities
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1createRenderSystemCapabilities_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderSystemCapabilities* _cpp_result = _cpp_this->createRenderSystemCapabilities() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderSystemCapabilities* Ogre::RenderSystem::createRenderSystemCapabilities */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     useCustomRenderSystemCapabilities()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::useCustomRenderSystemCapabilities
 * Signature:  (Ogre_RenderSystemCapabilities)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1useCustomRenderSystemCapabilities_1_1RenderSystemCapabilitiesp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong capabilities
)
{
   // parameter conversions 
  Ogre::RenderSystemCapabilities* _cpp_capabilities = reinterpret_cast< Ogre::RenderSystemCapabilities* >(capabilities); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->useCustomRenderSystemCapabilities(_cpp_capabilities);
} /* virtual void Ogre::RenderSystem::useCustomRenderSystemCapabilities */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     reinitialise()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::reinitialise
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1reinitialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reinitialise();
} /* virtual void Ogre::RenderSystem::reinitialise */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     shutdown()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::shutdown
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1shutdown (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shutdown();
} /* virtual void Ogre::RenderSystem::shutdown */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setAmbientLight()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setAmbientLight
 * Signature:  (FFF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setAmbientLight_1_1FvFvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat r, 
  jfloat g, 
  jfloat b
)
{
   // parameter conversions 
  float _cpp_r = r;
  float _cpp_g = g;
  float _cpp_b = b; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAmbientLight(_cpp_r, _cpp_g, _cpp_b);
} /* virtual void Ogre::RenderSystem::setAmbientLight */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setShadingType()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setShadingType
 * Signature:  (Ogre_ShadeOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setShadingType_1_1ShadeOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint so
)
{
   // parameter conversions 
  Ogre::ShadeOptions _cpp_so = (Ogre::ShadeOptions)so; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadingType(_cpp_so);
} /* virtual void Ogre::RenderSystem::setShadingType */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setLightingEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setLightingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setLightingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLightingEnabled(_cpp_enabled);
} /* virtual void Ogre::RenderSystem::setLightingEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setWBufferEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystem::setWBufferEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setWBufferEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWBufferEnabled(_cpp_enabled);
} /* void Ogre::RenderSystem::setWBufferEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getWBufferEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystem::getWBufferEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystem__1getWBufferEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getWBufferEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystem::getWBufferEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _createRenderWindow()
 * Type:       pure virtual method
 * Definition: virtual RenderWindow* Ogre::RenderSystem::_createRenderWindow
 * Signature:  (std_stringIIZOgre_NameValuePairList)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1createRenderWindow_1_1StringRIvIvbvNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong width, 
  jlong height, 
  jboolean fullScreen, 
  jlong miscParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned int _cpp_width = width;
  unsigned int _cpp_height = height;
  bool _cpp_fullScreen = fullScreen ? true : false;
  const Ogre::NameValuePairList* _cpp_miscParams = reinterpret_cast< const Ogre::NameValuePairList* >(miscParams); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderWindow* _cpp_result = _cpp_this->_createRenderWindow(_cpp_name, _cpp_width, _cpp_height, _cpp_fullScreen, _cpp_miscParams) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderWindow* Ogre::RenderSystem::_createRenderWindow */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     createMultiRenderTarget()
 * Type:       pure virtual method
 * Definition: virtual MultiRenderTarget* Ogre::RenderSystem::createMultiRenderTarget
 * Signature:  (std_string)Ogre_MultiRenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1createMultiRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MultiRenderTarget* _cpp_result = _cpp_this->createMultiRenderTarget(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MultiRenderTarget* Ogre::RenderSystem::createMultiRenderTarget */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyRenderWindow()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyRenderWindow
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyRenderWindow_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyRenderWindow(_cpp_name);
} /* virtual void Ogre::RenderSystem::destroyRenderWindow */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyRenderTexture()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyRenderTexture
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyRenderTexture_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyRenderTexture(_cpp_name);
} /* virtual void Ogre::RenderSystem::destroyRenderTexture */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyRenderTarget()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyRenderTarget
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyRenderTarget(_cpp_name);
} /* virtual void Ogre::RenderSystem::destroyRenderTarget */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     attachRenderTarget()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::attachRenderTarget
 * Signature:  (Ogre_RenderTarget)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1attachRenderTarget_1_1RenderTargetr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong target
)
{
   // parameter conversions 
  Ogre::RenderTarget* _cpp_target = reinterpret_cast< Ogre::RenderTarget* >(target); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->attachRenderTarget(*_cpp_target);
} /* virtual void Ogre::RenderSystem::attachRenderTarget */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getRenderTarget()
 * Type:       virtual method
 * Definition: virtual RenderTarget* Ogre::RenderSystem::getRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderTarget* _cpp_result = _cpp_this->getRenderTarget(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderTarget* Ogre::RenderSystem::getRenderTarget */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     detachRenderTarget()
 * Type:       virtual method
 * Definition: virtual RenderTarget* Ogre::RenderSystem::detachRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1detachRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderTarget* _cpp_result = _cpp_this->detachRenderTarget(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderTarget* Ogre::RenderSystem::detachRenderTarget */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getRenderTargetIterator()
 * Type:       virtual method
 * Definition: virtual RenderTargetIterator Ogre::RenderSystem::getRenderTargetIterator
 * Signature:  ()Ogre_RenderSystem_RenderTargetIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getRenderTargetIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderSystem::RenderTargetIterator* _cpp_result = new Ogre::RenderSystem::RenderTargetIterator( _cpp_this->getRenderTargetIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderTargetIterator Ogre::RenderSystem::getRenderTargetIterator */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getErrorDescription()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::RenderSystem::getErrorDescription
 * Signature:  (J)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystem__1getErrorDescription_1_1lv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong errorNumber
)
{
   // parameter conversions 
  long _cpp_errorNumber = errorNumber; 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getErrorDescription(_cpp_errorNumber) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::RenderSystem::getErrorDescription */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setWaitForVerticalBlank()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystem::setWaitForVerticalBlank
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setWaitForVerticalBlank_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWaitForVerticalBlank(_cpp_enabled);
} /* void Ogre::RenderSystem::setWaitForVerticalBlank */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getWaitForVerticalBlank()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystem::getWaitForVerticalBlank
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystem__1getWaitForVerticalBlank_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getWaitForVerticalBlank() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystem::getWaitForVerticalBlank */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _useLights()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_useLights
 * Signature:  (Ogre_LightListS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1useLights_1_1LightListRHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lights, 
  jint limit
)
{
   // parameter conversions 
  const Ogre::LightList* _cpp_lights = reinterpret_cast< const Ogre::LightList* >(lights);
  unsigned short _cpp_limit = limit; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_useLights(*_cpp_lights, _cpp_limit);
} /* virtual void Ogre::RenderSystem::_useLights */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setWorldMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setWorldMatrix
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setWorldMatrix_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m = reinterpret_cast< const Ogre::Matrix4* >(m); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setWorldMatrix(*_cpp_m);
} /* virtual void Ogre::RenderSystem::_setWorldMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setWorldMatrices()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setWorldMatrices
 * Signature:  (Ogre_Matrix4S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setWorldMatrices_1_1Matrix4PHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m, 
  jint count
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m = reinterpret_cast< const Ogre::Matrix4* >(m);
  unsigned short _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setWorldMatrices(_cpp_m, _cpp_count);
} /* virtual void Ogre::RenderSystem::_setWorldMatrices */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setViewMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setViewMatrix
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setViewMatrix_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m = reinterpret_cast< const Ogre::Matrix4* >(m); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setViewMatrix(*_cpp_m);
} /* virtual void Ogre::RenderSystem::_setViewMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setProjectionMatrix
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setProjectionMatrix_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m = reinterpret_cast< const Ogre::Matrix4* >(m); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setProjectionMatrix(*_cpp_m);
} /* virtual void Ogre::RenderSystem::_setProjectionMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureUnitSettings()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureUnitSettings
 * Signature:  (IOgre_TextureUnitState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureUnitSettings_1_1ivTextureUnitStater (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint texUnit, 
  jlong tl
)
{
   // parameter conversions 
  size_t _cpp_texUnit = texUnit;
  Ogre::TextureUnitState* _cpp_tl = reinterpret_cast< Ogre::TextureUnitState* >(tl); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureUnitSettings(_cpp_texUnit, *_cpp_tl);
} /* virtual void Ogre::RenderSystem::_setTextureUnitSettings */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _disableTextureUnit()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_disableTextureUnit
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1disableTextureUnit_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint texUnit
)
{
   // parameter conversions 
  size_t _cpp_texUnit = texUnit; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_disableTextureUnit(_cpp_texUnit);
} /* virtual void Ogre::RenderSystem::_disableTextureUnit */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _disableTextureUnitsFrom()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_disableTextureUnitsFrom
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1disableTextureUnitsFrom_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint texUnit
)
{
   // parameter conversions 
  size_t _cpp_texUnit = texUnit; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_disableTextureUnitsFrom(_cpp_texUnit);
} /* virtual void Ogre::RenderSystem::_disableTextureUnitsFrom */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setSurfaceParams()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setSurfaceParams
 * Signature:  (Ogre_ColourValueOgre_ColourValueOgre_ColourValueOgre_ColourValuefloatint)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setSurfaceParams_1_1ColourValueRColourValueRColourValueRColourValueRRealvTrackVertexColourTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient, 
  jlong diffuse, 
  jlong specular, 
  jlong emissive, 
  jfloat shininess, 
  jint tracking
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_ambient = reinterpret_cast< const Ogre::ColourValue* >(ambient);
  const Ogre::ColourValue* _cpp_diffuse = reinterpret_cast< const Ogre::ColourValue* >(diffuse);
  const Ogre::ColourValue* _cpp_specular = reinterpret_cast< const Ogre::ColourValue* >(specular);
  const Ogre::ColourValue* _cpp_emissive = reinterpret_cast< const Ogre::ColourValue* >(emissive);
  float _cpp_shininess = shininess;
  int _cpp_tracking = tracking; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setSurfaceParams(*_cpp_ambient, *_cpp_diffuse, *_cpp_specular, *_cpp_emissive, _cpp_shininess, _cpp_tracking);
} /* virtual void Ogre::RenderSystem::_setSurfaceParams */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setPointSpritesEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setPointSpritesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setPointSpritesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setPointSpritesEnabled(_cpp_enabled);
} /* virtual void Ogre::RenderSystem::_setPointSpritesEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setPointParameters()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setPointParameters
 * Signature:  (floatZfloatfloatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setPointParameters_1_1RealvbvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat size, 
  jboolean attenuationEnabled, 
  jfloat constant, 
  jfloat linear, 
  jfloat quadratic, 
  jfloat minSize, 
  jfloat maxSize
)
{
   // parameter conversions 
  float _cpp_size = size;
  bool _cpp_attenuationEnabled = attenuationEnabled ? true : false;
  float _cpp_constant = constant;
  float _cpp_linear = linear;
  float _cpp_quadratic = quadratic;
  float _cpp_minSize = minSize;
  float _cpp_maxSize = maxSize; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setPointParameters(_cpp_size, _cpp_attenuationEnabled, _cpp_constant, _cpp_linear, _cpp_quadratic, _cpp_minSize, _cpp_maxSize);
} /* virtual void Ogre::RenderSystem::_setPointParameters */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTexture()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTexture
 * Signature:  (IZOgre_TexturePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTexture_1_1ivbvTexturePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jboolean enabled, 
  jlong texPtr
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  bool _cpp_enabled = enabled ? true : false;
  const Ogre::TexturePtr* _cpp_texPtr = reinterpret_cast< const Ogre::TexturePtr* >(texPtr); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTexture(_cpp_unit, _cpp_enabled, *_cpp_texPtr);
} /* virtual void Ogre::RenderSystem::_setTexture */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTexture()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTexture
 * Signature:  (IZstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTexture_1_1ivbvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jboolean enabled, 
  jstring texname
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  bool _cpp_enabled = enabled ? true : false;
  std::string _cpp_texname = ""; org::xbig::jni::to_stdstring(_jni_env_, texname, _cpp_texname); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTexture(_cpp_unit, _cpp_enabled, _cpp_texname);
} /* virtual void Ogre::RenderSystem::_setTexture */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setVertexTexture()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setVertexTexture
 * Signature:  (IOgre_TexturePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setVertexTexture_1_1ivTexturePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong tex
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  const Ogre::TexturePtr* _cpp_tex = reinterpret_cast< const Ogre::TexturePtr* >(tex); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setVertexTexture(_cpp_unit, *_cpp_tex);
} /* virtual void Ogre::RenderSystem::_setVertexTexture */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureCoordSet()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureCoordSet
 * Signature:  (II)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureCoordSet_1_1iviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint index
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureCoordSet(_cpp_unit, _cpp_index);
} /* virtual void Ogre::RenderSystem::_setTextureCoordSet */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureCoordCalculation()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureCoordCalculation
 * Signature:  (IOgre_TexCoordCalcMethodOgre_Frustum)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureCoordCalculation_1_1ivTexCoordCalcMethodvFrustumP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint m, 
  jlong frustum
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  Ogre::TexCoordCalcMethod _cpp_m = (Ogre::TexCoordCalcMethod)m;
  const Ogre::Frustum* _cpp_frustum = reinterpret_cast< const Ogre::Frustum* >(frustum); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureCoordCalculation(_cpp_unit, _cpp_m, _cpp_frustum);
} /* virtual void Ogre::RenderSystem::_setTextureCoordCalculation */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureBlendMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureBlendMode
 * Signature:  (IOgre_LayerBlendModeEx)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureBlendMode_1_1ivLayerBlendModeExR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong bm
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  const Ogre::LayerBlendModeEx* _cpp_bm = reinterpret_cast< const Ogre::LayerBlendModeEx* >(bm); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureBlendMode(_cpp_unit, *_cpp_bm);
} /* virtual void Ogre::RenderSystem::_setTextureBlendMode */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureUnitFiltering()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureUnitFiltering
 * Signature:  (IOgre_FilterOptionsOgre_FilterOptionsOgre_FilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureUnitFiltering_1_1ivFilterOptionsvFilterOptionsvFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint minFilter, 
  jint magFilter, 
  jint mipFilter
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  Ogre::FilterOptions _cpp_minFilter = (Ogre::FilterOptions)minFilter;
  Ogre::FilterOptions _cpp_magFilter = (Ogre::FilterOptions)magFilter;
  Ogre::FilterOptions _cpp_mipFilter = (Ogre::FilterOptions)mipFilter; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureUnitFiltering(_cpp_unit, _cpp_minFilter, _cpp_magFilter, _cpp_mipFilter);
} /* virtual void Ogre::RenderSystem::_setTextureUnitFiltering */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureUnitFiltering()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureUnitFiltering
 * Signature:  (IOgre_FilterTypeOgre_FilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureUnitFiltering_1_1ivFilterTypevFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint ftype, 
  jint filter
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  Ogre::FilterType _cpp_ftype = (Ogre::FilterType)ftype;
  Ogre::FilterOptions _cpp_filter = (Ogre::FilterOptions)filter; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureUnitFiltering(_cpp_unit, _cpp_ftype, _cpp_filter);
} /* virtual void Ogre::RenderSystem::_setTextureUnitFiltering */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureLayerAnisotropy()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureLayerAnisotropy
 * Signature:  (II)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureLayerAnisotropy_1_1ivIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong maxAnisotropy
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  unsigned int _cpp_maxAnisotropy = maxAnisotropy; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureLayerAnisotropy(_cpp_unit, _cpp_maxAnisotropy);
} /* virtual void Ogre::RenderSystem::_setTextureLayerAnisotropy */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureAddressingMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureAddressingMode
 * Signature:  (IOgre_TextureUnitState_UVWAddressingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureAddressingMode_1_1ivTextureUnitState_1UVWAddressingModeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong uvw
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  const Ogre::TextureUnitState::UVWAddressingMode* _cpp_uvw = reinterpret_cast< const Ogre::TextureUnitState::UVWAddressingMode* >(uvw); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureAddressingMode(_cpp_unit, *_cpp_uvw);
} /* virtual void Ogre::RenderSystem::_setTextureAddressingMode */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureBorderColour()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureBorderColour
 * Signature:  (IOgre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureBorderColour_1_1ivColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong colour
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureBorderColour(_cpp_unit, *_cpp_colour);
} /* virtual void Ogre::RenderSystem::_setTextureBorderColour */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureMipmapBias()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureMipmapBias
 * Signature:  (IF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureMipmapBias_1_1ivFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jfloat bias
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  float _cpp_bias = bias; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureMipmapBias(_cpp_unit, _cpp_bias);
} /* virtual void Ogre::RenderSystem::_setTextureMipmapBias */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureMatrix
 * Signature:  (IOgre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureMatrix_1_1ivMatrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong xform
)
{
   // parameter conversions 
  size_t _cpp_unit = unit;
  const Ogre::Matrix4* _cpp_xform = reinterpret_cast< const Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureMatrix(_cpp_unit, *_cpp_xform);
} /* virtual void Ogre::RenderSystem::_setTextureMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setSceneBlending()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setSceneBlending_1_1SceneBlendFactorvSceneBlendFactorv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
)
{
   // parameter conversions 
  Ogre::SceneBlendFactor _cpp_sourceFactor = (Ogre::SceneBlendFactor)sourceFactor;
  Ogre::SceneBlendFactor _cpp_destFactor = (Ogre::SceneBlendFactor)destFactor; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setSceneBlending(_cpp_sourceFactor, _cpp_destFactor);
} /* virtual void Ogre::RenderSystem::_setSceneBlending */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setSeparateSceneBlending()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setSeparateSceneBlending_1_1SceneBlendFactorvSceneBlendFactorvSceneBlendFactorvSceneBlendFactorv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor, 
  jint sourceFactorAlpha, 
  jint destFactorAlpha
)
{
   // parameter conversions 
  Ogre::SceneBlendFactor _cpp_sourceFactor = (Ogre::SceneBlendFactor)sourceFactor;
  Ogre::SceneBlendFactor _cpp_destFactor = (Ogre::SceneBlendFactor)destFactor;
  Ogre::SceneBlendFactor _cpp_sourceFactorAlpha = (Ogre::SceneBlendFactor)sourceFactorAlpha;
  Ogre::SceneBlendFactor _cpp_destFactorAlpha = (Ogre::SceneBlendFactor)destFactorAlpha; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setSeparateSceneBlending(_cpp_sourceFactor, _cpp_destFactor, _cpp_sourceFactorAlpha, _cpp_destFactorAlpha);
} /* virtual void Ogre::RenderSystem::_setSeparateSceneBlending */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setAlphaRejectSettings()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setAlphaRejectSettings
 * Signature:  (Ogre_CompareFunctionCZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setAlphaRejectSettings_1_1CompareFunctionvBvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func, 
  jshort value, 
  jboolean alphaToCoverage
)
{
   // parameter conversions 
  Ogre::CompareFunction _cpp_func = (Ogre::CompareFunction)func;
  unsigned char _cpp_value = value;
  bool _cpp_alphaToCoverage = alphaToCoverage ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setAlphaRejectSettings(_cpp_func, _cpp_value, _cpp_alphaToCoverage);
} /* virtual void Ogre::RenderSystem::_setAlphaRejectSettings */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureProjectionRelativeTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureProjectionRelativeTo
 * Signature:  (ZOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureProjectionRelativeTo_1_1bvVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jlong pos
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false;
  const Ogre::Vector3* _cpp_pos = reinterpret_cast< const Ogre::Vector3* >(pos); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTextureProjectionRelativeTo(_cpp_enabled, *_cpp_pos);
} /* virtual void Ogre::RenderSystem::_setTextureProjectionRelativeTo */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _beginFrame()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_beginFrame
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1beginFrame (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_beginFrame();
} /* virtual void Ogre::RenderSystem::_beginFrame */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _endFrame()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_endFrame
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1endFrame (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_endFrame();
} /* virtual void Ogre::RenderSystem::_endFrame */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setViewport()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setViewport
 * Signature:  (Ogre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setViewport_1_1Viewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vp
)
{
   // parameter conversions 
  Ogre::Viewport* _cpp_vp = reinterpret_cast< Ogre::Viewport* >(vp); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setViewport(_cpp_vp);
} /* virtual void Ogre::RenderSystem::_setViewport */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getViewport()
 * Type:       virtual method
 * Definition: virtual Viewport* Ogre::RenderSystem::_getViewport
 * Signature:  ()Ogre_Viewport
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getViewport (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Viewport* _cpp_result = _cpp_this->_getViewport() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Viewport* Ogre::RenderSystem::_getViewport */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setCullingMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setCullingMode
 * Signature:  (Ogre_CullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setCullingMode_1_1CullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::CullingMode _cpp_mode = (Ogre::CullingMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setCullingMode(_cpp_mode);
} /* virtual void Ogre::RenderSystem::_setCullingMode */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getCullingMode()
 * Type:       virtual method
 * Definition: virtual CullingMode Ogre::RenderSystem::_getCullingMode
 * Signature:  ()Ogre_CullingMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystem__1_1getCullingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CullingMode _cpp_result = _cpp_this->_getCullingMode() ; 
   return _cpp_result;
} /* virtual CullingMode Ogre::RenderSystem::_getCullingMode */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferParams()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferParams
 * Signature:  (ZZOgre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferParams_1_1bvbvCompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean depthTest, 
  jboolean depthWrite, 
  jint depthFunction
)
{
   // parameter conversions 
  bool _cpp_depthTest = depthTest ? true : false;
  bool _cpp_depthWrite = depthWrite ? true : false;
  Ogre::CompareFunction _cpp_depthFunction = (Ogre::CompareFunction)depthFunction; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setDepthBufferParams(_cpp_depthTest, _cpp_depthWrite, _cpp_depthFunction);
} /* virtual void Ogre::RenderSystem::_setDepthBufferParams */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferCheckEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setDepthBufferCheckEnabled(_cpp_enabled);
} /* virtual void Ogre::RenderSystem::_setDepthBufferCheckEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferWriteEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setDepthBufferWriteEnabled(_cpp_enabled);
} /* virtual void Ogre::RenderSystem::_setDepthBufferWriteEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferFunction()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
)
{
   // parameter conversions 
  Ogre::CompareFunction _cpp_func = (Ogre::CompareFunction)func; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setDepthBufferFunction(_cpp_func);
} /* virtual void Ogre::RenderSystem::_setDepthBufferFunction */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setColourBufferWriteEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setColourBufferWriteEnabled
 * Signature:  (ZZZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setColourBufferWriteEnabled_1_1bvbvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean red, 
  jboolean green, 
  jboolean blue, 
  jboolean alpha
)
{
   // parameter conversions 
  bool _cpp_red = red ? true : false;
  bool _cpp_green = green ? true : false;
  bool _cpp_blue = blue ? true : false;
  bool _cpp_alpha = alpha ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setColourBufferWriteEnabled(_cpp_red, _cpp_green, _cpp_blue, _cpp_alpha);
} /* virtual void Ogre::RenderSystem::_setColourBufferWriteEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBias()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBias
 * Signature:  (FF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBias_1_1FvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat constantBias, 
  jfloat slopeScaleBias
)
{
   // parameter conversions 
  float _cpp_constantBias = constantBias;
  float _cpp_slopeScaleBias = slopeScaleBias; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setDepthBias(_cpp_constantBias, _cpp_slopeScaleBias);
} /* virtual void Ogre::RenderSystem::_setDepthBias */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setFog()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setFog
 * Signature:  (Ogre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setFog_1_1FogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
)
{
   // parameter conversions 
  Ogre::FogMode _cpp_mode = (Ogre::FogMode)mode;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  float _cpp_expDensity = expDensity;
  float _cpp_linearStart = linearStart;
  float _cpp_linearEnd = linearEnd; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setFog(_cpp_mode, *_cpp_colour, _cpp_expDensity, _cpp_linearStart, _cpp_linearEnd);
} /* virtual void Ogre::RenderSystem::_setFog */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _beginGeometryCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_beginGeometryCount
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1beginGeometryCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_beginGeometryCount();
} /* virtual void Ogre::RenderSystem::_beginGeometryCount */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getFaceCount()
 * Type:       virtual method
 * Definition: virtual unsigned int Ogre::RenderSystem::_getFaceCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getFaceCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->_getFaceCount() ; 
   return _cpp_result;
} /* virtual unsigned int Ogre::RenderSystem::_getFaceCount */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getBatchCount()
 * Type:       virtual method
 * Definition: virtual unsigned int Ogre::RenderSystem::_getBatchCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getBatchCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->_getBatchCount() ; 
   return _cpp_result;
} /* virtual unsigned int Ogre::RenderSystem::_getBatchCount */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getVertexCount()
 * Type:       virtual method
 * Definition: virtual unsigned int Ogre::RenderSystem::_getVertexCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getVertexCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->_getVertexCount() ; 
   return _cpp_result;
} /* virtual unsigned int Ogre::RenderSystem::_getVertexCount */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     convertColourValue()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::convertColourValue
 * Signature:  (Ogre_ColourValueunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1convertColourValue_1_1ColourValueRuint32p (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour, 
  jlong pDest
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  unsigned int* _cpp_pDest = reinterpret_cast<unsigned int*>(pDest); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->convertColourValue(*_cpp_colour, _cpp_pDest);
} /* virtual void Ogre::RenderSystem::convertColourValue */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getColourVertexElementType()
 * Type:       pure virtual method
 * Definition: virtual VertexElementType Ogre::RenderSystem::getColourVertexElementType
 * Signature:  ()Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystem__1getColourVertexElementType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexElementType _cpp_result = _cpp_this->getColourVertexElementType() ; 
   return _cpp_result;
} /* virtual VertexElementType Ogre::RenderSystem::getColourVertexElementType */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _convertProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_convertProjectionMatrix
 * Signature:  (Ogre_Matrix4Ogre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1convertProjectionMatrix_1_1Matrix4RMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong matrix, 
  jlong dest, 
  jboolean forGpuProgram
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_matrix = reinterpret_cast< const Ogre::Matrix4* >(matrix);
  Ogre::Matrix4* _cpp_dest = reinterpret_cast< Ogre::Matrix4* >(dest);
  bool _cpp_forGpuProgram = forGpuProgram ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_convertProjectionMatrix(*_cpp_matrix, *_cpp_dest, _cpp_forGpuProgram);
} /* virtual void Ogre::RenderSystem::_convertProjectionMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _makeProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_makeProjectionMatrix
 * Signature:  (Ogre_RadianfloatfloatfloatOgre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1makeProjectionMatrix_1_1RadianRRealvRealvRealvMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fovy, 
  jfloat aspect, 
  jfloat nearPlane, 
  jfloat farPlane, 
  jlong dest, 
  jboolean forGpuProgram
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fovy = reinterpret_cast< const Ogre::Radian* >(fovy);
  float _cpp_aspect = aspect;
  float _cpp_nearPlane = nearPlane;
  float _cpp_farPlane = farPlane;
  Ogre::Matrix4* _cpp_dest = reinterpret_cast< Ogre::Matrix4* >(dest);
  bool _cpp_forGpuProgram = forGpuProgram ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_makeProjectionMatrix(*_cpp_fovy, _cpp_aspect, _cpp_nearPlane, _cpp_farPlane, *_cpp_dest, _cpp_forGpuProgram);
} /* virtual void Ogre::RenderSystem::_makeProjectionMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _makeProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_makeProjectionMatrix
 * Signature:  (floatfloatfloatfloatfloatfloatOgre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1makeProjectionMatrix_1_1RealvRealvRealvRealvRealvRealvMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat right, 
  jfloat bottom, 
  jfloat top, 
  jfloat nearPlane, 
  jfloat farPlane, 
  jlong dest, 
  jboolean forGpuProgram
)
{
   // parameter conversions 
  float _cpp_left = left;
  float _cpp_right = right;
  float _cpp_bottom = bottom;
  float _cpp_top = top;
  float _cpp_nearPlane = nearPlane;
  float _cpp_farPlane = farPlane;
  Ogre::Matrix4* _cpp_dest = reinterpret_cast< Ogre::Matrix4* >(dest);
  bool _cpp_forGpuProgram = forGpuProgram ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_makeProjectionMatrix(_cpp_left, _cpp_right, _cpp_bottom, _cpp_top, _cpp_nearPlane, _cpp_farPlane, *_cpp_dest, _cpp_forGpuProgram);
} /* virtual void Ogre::RenderSystem::_makeProjectionMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _makeOrthoMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_makeOrthoMatrix
 * Signature:  (Ogre_RadianfloatfloatfloatOgre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1makeOrthoMatrix_1_1RadianRRealvRealvRealvMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fovy, 
  jfloat aspect, 
  jfloat nearPlane, 
  jfloat farPlane, 
  jlong dest, 
  jboolean forGpuProgram
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fovy = reinterpret_cast< const Ogre::Radian* >(fovy);
  float _cpp_aspect = aspect;
  float _cpp_nearPlane = nearPlane;
  float _cpp_farPlane = farPlane;
  Ogre::Matrix4* _cpp_dest = reinterpret_cast< Ogre::Matrix4* >(dest);
  bool _cpp_forGpuProgram = forGpuProgram ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_makeOrthoMatrix(*_cpp_fovy, _cpp_aspect, _cpp_nearPlane, _cpp_farPlane, *_cpp_dest, _cpp_forGpuProgram);
} /* virtual void Ogre::RenderSystem::_makeOrthoMatrix */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _applyObliqueDepthProjection()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_applyObliqueDepthProjection
 * Signature:  (Ogre_Matrix4Ogre_PlaneZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1applyObliqueDepthProjection_1_1Matrix4rPlaneRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong matrix, 
  jlong plane, 
  jboolean forGpuProgram
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_matrix = reinterpret_cast< Ogre::Matrix4* >(matrix);
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane);
  bool _cpp_forGpuProgram = forGpuProgram ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_applyObliqueDepthProjection(*_cpp_matrix, *_cpp_plane, _cpp_forGpuProgram);
} /* virtual void Ogre::RenderSystem::_applyObliqueDepthProjection */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setPolygonMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setPolygonMode
 * Signature:  (Ogre_PolygonMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setPolygonMode_1_1PolygonModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint level
)
{
   // parameter conversions 
  Ogre::PolygonMode _cpp_level = (Ogre::PolygonMode)level; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setPolygonMode(_cpp_level);
} /* virtual void Ogre::RenderSystem::_setPolygonMode */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setStencilCheckEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setStencilCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setStencilCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setStencilCheckEnabled(_cpp_enabled);
} /* virtual void Ogre::RenderSystem::setStencilCheckEnabled */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setStencilBufferParams()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setStencilBufferParams
 * Signature:  (Ogre_CompareFunctionunsigned_intunsigned_intOgre_StencilOperationOgre_StencilOperationOgre_StencilOperationZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setStencilBufferParams_1_1CompareFunctionvuint32vuint32vStencilOperationvStencilOperationvStencilOperationvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func, 
  jlong refValue, 
  jlong mask, 
  jint stencilFailOp, 
  jint depthFailOp, 
  jint passOp, 
  jboolean twoSidedOperation
)
{
   // parameter conversions 
  Ogre::CompareFunction _cpp_func = (Ogre::CompareFunction)func;
  unsigned int _cpp_refValue = refValue;
  unsigned int _cpp_mask = mask;
  Ogre::StencilOperation _cpp_stencilFailOp = (Ogre::StencilOperation)stencilFailOp;
  Ogre::StencilOperation _cpp_depthFailOp = (Ogre::StencilOperation)depthFailOp;
  Ogre::StencilOperation _cpp_passOp = (Ogre::StencilOperation)passOp;
  bool _cpp_twoSidedOperation = twoSidedOperation ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setStencilBufferParams(_cpp_func, _cpp_refValue, _cpp_mask, _cpp_stencilFailOp, _cpp_depthFailOp, _cpp_passOp, _cpp_twoSidedOperation);
} /* virtual void Ogre::RenderSystem::setStencilBufferParams */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setVertexDeclaration()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setVertexDeclaration
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setVertexDeclaration_1_1VertexDeclarationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong decl
)
{
   // parameter conversions 
  Ogre::VertexDeclaration* _cpp_decl = reinterpret_cast< Ogre::VertexDeclaration* >(decl); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexDeclaration(_cpp_decl);
} /* virtual void Ogre::RenderSystem::setVertexDeclaration */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setVertexBufferBinding()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setVertexBufferBinding
 * Signature:  (Ogre_VertexBufferBinding)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setVertexBufferBinding_1_1VertexBufferBindingp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong binding
)
{
   // parameter conversions 
  Ogre::VertexBufferBinding* _cpp_binding = reinterpret_cast< Ogre::VertexBufferBinding* >(binding); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexBufferBinding(_cpp_binding);
} /* virtual void Ogre::RenderSystem::setVertexBufferBinding */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setNormaliseNormals()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setNormaliseNormals
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setNormaliseNormals_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean normalise
)
{
   // parameter conversions 
  bool _cpp_normalise = normalise ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNormaliseNormals(_cpp_normalise);
} /* virtual void Ogre::RenderSystem::setNormaliseNormals */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _render()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_render
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1render_1_1RenderOperationR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  const Ogre::RenderOperation* _cpp_op = reinterpret_cast< const Ogre::RenderOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_render(*_cpp_op);
} /* virtual void Ogre::RenderSystem::_render */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getCapabilities()
 * Type:       non-virtual method
 * Definition: const RenderSystemCapabilities* Ogre::RenderSystem::getCapabilities
 * Signature:  ()Ogre_RenderSystemCapabilities
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getCapabilities_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderSystemCapabilities* _cpp_result = _cpp_this->getCapabilities() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const RenderSystemCapabilities* Ogre::RenderSystem::getCapabilities */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getDriverVersion()
 * Type:       virtual method
 * Definition: virtual const DriverVersion& Ogre::RenderSystem::getDriverVersion
 * Signature:  ()Ogre_DriverVersion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getDriverVersion_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::DriverVersion* _cpp_result = & _cpp_this->getDriverVersion() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const DriverVersion& Ogre::RenderSystem::getDriverVersion */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     bindGpuProgram()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::bindGpuProgram
 * Signature:  (Ogre_GpuProgram)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1bindGpuProgram_1_1GpuProgramp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong prg
)
{
   // parameter conversions 
  Ogre::GpuProgram* _cpp_prg = reinterpret_cast< Ogre::GpuProgram* >(prg); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bindGpuProgram(_cpp_prg);
} /* virtual void Ogre::RenderSystem::bindGpuProgram */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     bindGpuProgramParameters()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::bindGpuProgramParameters
 * Signature:  (Ogre_GpuProgramTypeOgre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1bindGpuProgramParameters_1_1GpuProgramTypevGpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype, 
  jlong params
)
{
   // parameter conversions 
  Ogre::GpuProgramType _cpp_gptype = (Ogre::GpuProgramType)gptype;
  Ogre::GpuProgramParametersSharedPtr* _cpp_params = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(params); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bindGpuProgramParameters(_cpp_gptype, *_cpp_params);
} /* virtual void Ogre::RenderSystem::bindGpuProgramParameters */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     bindGpuProgramPassIterationParameters()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::bindGpuProgramPassIterationParameters
 * Signature:  (Ogre_GpuProgramType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1bindGpuProgramPassIterationParameters_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype
)
{
   // parameter conversions 
  Ogre::GpuProgramType _cpp_gptype = (Ogre::GpuProgramType)gptype; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bindGpuProgramPassIterationParameters(_cpp_gptype);
} /* virtual void Ogre::RenderSystem::bindGpuProgramPassIterationParameters */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     unbindGpuProgram()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::unbindGpuProgram
 * Signature:  (Ogre_GpuProgramType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1unbindGpuProgram_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype
)
{
   // parameter conversions 
  Ogre::GpuProgramType _cpp_gptype = (Ogre::GpuProgramType)gptype; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unbindGpuProgram(_cpp_gptype);
} /* virtual void Ogre::RenderSystem::unbindGpuProgram */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     isGpuProgramBound()
 * Type:       virtual method
 * Definition: virtual bool Ogre::RenderSystem::isGpuProgramBound
 * Signature:  (Ogre_GpuProgramType)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystem__1isGpuProgramBound_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype
)
{
   // parameter conversions 
  Ogre::GpuProgramType _cpp_gptype = (Ogre::GpuProgramType)gptype; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isGpuProgramBound(_cpp_gptype) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::RenderSystem::isGpuProgramBound */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setClipPlanes()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setClipPlanes
 * Signature:  (Ogre_PlaneList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setClipPlanes_1_1PlaneListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong clipPlanes
)
{
   // parameter conversions 
  const Ogre::PlaneList* _cpp_clipPlanes = reinterpret_cast< const Ogre::PlaneList* >(clipPlanes); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setClipPlanes(*_cpp_clipPlanes);
} /* virtual void Ogre::RenderSystem::setClipPlanes */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     addClipPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::addClipPlane
 * Signature:  (Ogre_Plane)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1addClipPlane_1_1PlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_p = reinterpret_cast< const Ogre::Plane* >(p); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addClipPlane(*_cpp_p);
} /* virtual void Ogre::RenderSystem::addClipPlane */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     addClipPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::addClipPlane
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1addClipPlane_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat A, 
  jfloat B, 
  jfloat C, 
  jfloat D
)
{
   // parameter conversions 
  float _cpp_A = A;
  float _cpp_B = B;
  float _cpp_C = C;
  float _cpp_D = D; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addClipPlane(_cpp_A, _cpp_B, _cpp_C, _cpp_D);
} /* virtual void Ogre::RenderSystem::addClipPlane */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     resetClipPlanes()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::resetClipPlanes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1resetClipPlanes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetClipPlanes();
} /* virtual void Ogre::RenderSystem::resetClipPlanes */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _initRenderTargets()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_initRenderTargets
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1initRenderTargets (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_initRenderTargets();
} /* virtual void Ogre::RenderSystem::_initRenderTargets */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _notifyCameraRemoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_notifyCameraRemoved
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1notifyCameraRemoved_1_1CameraP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCameraRemoved(_cpp_cam);
} /* virtual void Ogre::RenderSystem::_notifyCameraRemoved */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _updateAllRenderTargets()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_updateAllRenderTargets
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1updateAllRenderTargets_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean swapBuffers
)
{
   // parameter conversions 
  bool _cpp_swapBuffers = swapBuffers ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateAllRenderTargets(_cpp_swapBuffers);
} /* virtual void Ogre::RenderSystem::_updateAllRenderTargets */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _swapAllRenderTargetBuffers()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_swapAllRenderTargetBuffers
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1swapAllRenderTargetBuffers_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean waitForVsync
)
{
   // parameter conversions 
  bool _cpp_waitForVsync = waitForVsync ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_swapAllRenderTargetBuffers(_cpp_waitForVsync);
} /* virtual void Ogre::RenderSystem::_swapAllRenderTargetBuffers */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setInvertVertexWinding()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setInvertVertexWinding
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setInvertVertexWinding_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean invert
)
{
   // parameter conversions 
  bool _cpp_invert = invert ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInvertVertexWinding(_cpp_invert);
} /* virtual void Ogre::RenderSystem::setInvertVertexWinding */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setScissorTest()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setScissorTest
 * Signature:  (ZIIII)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setScissorTest_1_1bviviviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jint left, 
  jint top, 
  jint right, 
  jint bottom
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false;
  size_t _cpp_left = left;
  size_t _cpp_top = top;
  size_t _cpp_right = right;
  size_t _cpp_bottom = bottom; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setScissorTest(_cpp_enabled, _cpp_left, _cpp_top, _cpp_right, _cpp_bottom);
} /* virtual void Ogre::RenderSystem::setScissorTest */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     clearFrameBuffer()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::clearFrameBuffer
 * Signature:  (IOgre_ColourValuefloatS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1clearFrameBuffer_1_1IvColourValueRRealvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong buffers, 
  jlong colour, 
  jfloat depth, 
  jint stencil
)
{
   // parameter conversions 
  unsigned int _cpp_buffers = buffers;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  float _cpp_depth = depth;
  unsigned short _cpp_stencil = stencil; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearFrameBuffer(_cpp_buffers, *_cpp_colour, _cpp_depth, _cpp_stencil);
} /* virtual void Ogre::RenderSystem::clearFrameBuffer */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getHorizontalTexelOffset()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getHorizontalTexelOffset
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getHorizontalTexelOffset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getHorizontalTexelOffset() ; 
   return _cpp_result;
} /* virtual Real Ogre::RenderSystem::getHorizontalTexelOffset */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getVerticalTexelOffset()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getVerticalTexelOffset
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getVerticalTexelOffset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getVerticalTexelOffset() ; 
   return _cpp_result;
} /* virtual Real Ogre::RenderSystem::getVerticalTexelOffset */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getMinimumDepthInputValue()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getMinimumDepthInputValue
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getMinimumDepthInputValue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMinimumDepthInputValue() ; 
   return _cpp_result;
} /* virtual Real Ogre::RenderSystem::getMinimumDepthInputValue */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getMaximumDepthInputValue()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getMaximumDepthInputValue
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getMaximumDepthInputValue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMaximumDepthInputValue() ; 
   return _cpp_result;
} /* virtual Real Ogre::RenderSystem::getMaximumDepthInputValue */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setCurrentPassIterationCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setCurrentPassIterationCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setCurrentPassIterationCount_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
)
{
   // parameter conversions 
  const size_t _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentPassIterationCount(_cpp_count);
} /* virtual void Ogre::RenderSystem::setCurrentPassIterationCount */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setDeriveDepthBias()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setDeriveDepthBias
 * Signature:  (ZFFF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setDeriveDepthBias_1_1bvFvFvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive, 
  jfloat baseValue, 
  jfloat multiplier, 
  jfloat slopeScale
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false;
  float _cpp_baseValue = baseValue;
  float _cpp_multiplier = multiplier;
  float _cpp_slopeScale = slopeScale; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDeriveDepthBias(_cpp_derive, _cpp_baseValue, _cpp_multiplier, _cpp_slopeScale);
} /* virtual void Ogre::RenderSystem::setDeriveDepthBias */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::addListener
 * Signature:  (Ogre_RenderSystem_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  Ogre::RenderSystem::Listener* _cpp_l = reinterpret_cast< Ogre::RenderSystem::Listener* >(l); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_l);
} /* virtual void Ogre::RenderSystem::addListener */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::removeListener
 * Signature:  (Ogre_RenderSystem_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  Ogre::RenderSystem::Listener* _cpp_l = reinterpret_cast< Ogre::RenderSystem::Listener* >(l); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_l);
} /* virtual void Ogre::RenderSystem::removeListener */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getRenderSystemEvents()
 * Type:       virtual method
 * Definition: virtual const StringVector& Ogre::RenderSystem::getRenderSystemEvents
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getRenderSystemEvents_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystem* _cpp_this = reinterpret_cast<const Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getRenderSystemEvents() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const StringVector& Ogre::RenderSystem::getRenderSystemEvents */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     preExtraThreadsStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::preExtraThreadsStarted
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1preExtraThreadsStarted (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->preExtraThreadsStarted();
} /* virtual void Ogre::RenderSystem::preExtraThreadsStarted */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     postExtraThreadsStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::postExtraThreadsStarted
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1postExtraThreadsStarted (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postExtraThreadsStarted();
} /* virtual void Ogre::RenderSystem::postExtraThreadsStarted */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     registerThread()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::registerThread
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1registerThread (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->registerThread();
} /* virtual void Ogre::RenderSystem::registerThread */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     unregisterThread()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::unregisterThread
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1unregisterThread (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unregisterThread();
} /* virtual void Ogre::RenderSystem::unregisterThread */


/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderSystem::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderSystem 
   // cast pointer to C++ object 
   Ogre::RenderSystem* _cpp_this = reinterpret_cast<Ogre::RenderSystem*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderSystem::__delete */
