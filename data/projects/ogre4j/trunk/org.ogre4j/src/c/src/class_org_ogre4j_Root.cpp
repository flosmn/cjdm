///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Root.h"

// import header files of original library
#include <OgreRoot.h>


#include "Ogre4JJNIFunctions.h"


/*
 * Class:      org.ogre4j.Root
 * Method:     Root()
 * Type:       constructor
 * Definition: Ogre::Root::Root
 * Signature:  (std_stringstd_stringstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1_1createRoot_1_1StringRStringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring pluginFileName, 
  jstring configFileName, 
  jstring logFileName
)
{
   // constructor of class Ogre::Root 
   
   // parameter conversions 
  std::string _cpp_pluginFileName = ""; org::xbig::jni::to_stdstring(_jni_env_, pluginFileName, _cpp_pluginFileName); // calls c-tor only. Not operator= .;
  std::string _cpp_configFileName = ""; org::xbig::jni::to_stdstring(_jni_env_, configFileName, _cpp_configFileName); // calls c-tor only. Not operator= .;
  std::string _cpp_logFileName = ""; org::xbig::jni::to_stdstring(_jni_env_, logFileName, _cpp_logFileName); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::Root 
   Ogre::Root* _cpp_this = new Ogre::Root(_cpp_pluginFileName, _cpp_configFileName, _cpp_logFileName); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Root::Root */


/*
 * Class:      org.ogre4j.Root
 * Method:     saveConfig()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::saveConfig
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1saveConfig (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->saveConfig();
} /* void Ogre::Root::saveConfig */


/*
 * Class:      org.ogre4j.Root
 * Method:     restoreConfig()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::restoreConfig
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1restoreConfig (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->restoreConfig() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::restoreConfig */


/*
 * Class:      org.ogre4j.Root
 * Method:     showConfigDialog()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::showConfigDialog
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1showConfigDialog (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->showConfigDialog() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::showConfigDialog */


/*
 * Class:      org.ogre4j.Root
 * Method:     addRenderSystem()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addRenderSystem
 * Signature:  (Ogre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addRenderSystem_1_1RenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newRend
)
{
   // parameter conversions 
  Ogre::RenderSystem* _cpp_newRend = reinterpret_cast< Ogre::RenderSystem* >(newRend); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderSystem(_cpp_newRend);
} /* void Ogre::Root::addRenderSystem */


/*
 * Class:      org.ogre4j.Root
 * Method:     getAvailableRenderers()
 * Type:       non-virtual method
 * Definition: RenderSystemList* Ogre::Root::getAvailableRenderers
 * Signature:  ()Ogre_RenderSystemList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getAvailableRenderers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   try
   {
       // call library method 
       const Ogre::RenderSystemList* _cpp_result = _cpp_this->getAvailableRenderers() ; 
       return reinterpret_cast<jlong>(_cpp_result);
   }
   catch (Ogre::Exception& e)
   {
       Ogre4j::handleOgreException(_jni_env_, e);
   }
   catch (...)
   {
       Ogre4j::handleUnknownException(_jni_env_, "Ogre::Root::getAvailableRenderers");
   }
   return 0;
} /* RenderSystemList* Ogre::Root::getAvailableRenderers */


/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderSystemByName()
 * Type:       non-virtual method
 * Definition: RenderSystem* Ogre::Root::getRenderSystemByName
 * Signature:  (std_string)Ogre_RenderSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderSystemByName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderSystem* _cpp_result = _cpp_this->getRenderSystemByName(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderSystem* Ogre::Root::getRenderSystemByName */


/*
 * Class:      org.ogre4j.Root
 * Method:     setRenderSystem()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::setRenderSystem
 * Signature:  (Ogre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1setRenderSystem_1_1RenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong system
)
{
   // parameter conversions 
  Ogre::RenderSystem* _cpp_system = reinterpret_cast< Ogre::RenderSystem* >(system); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   try {
       // call library method 
       _cpp_this->setRenderSystem(_cpp_system);
   }
   catch (Ogre::Exception& e)
   {
       Ogre4j::handleOgreException(_jni_env_, e);
   }
   catch (...)
   {
       Ogre4j::handleUnknownException(_jni_env_, "Ogre::Root::setRenderSystem");
   }
} /* void Ogre::Root::setRenderSystem */


/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderSystem()
 * Type:       non-virtual method
 * Definition: RenderSystem* Ogre::Root::getRenderSystem
 * Signature:  ()Ogre_RenderSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderSystem (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderSystem* _cpp_result = _cpp_this->getRenderSystem() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderSystem* Ogre::Root::getRenderSystem */


/*
 * Class:      org.ogre4j.Root
 * Method:     initialise()
 * Type:       non-virtual method
 * Definition: RenderWindow* Ogre::Root::initialise
 * Signature:  (Zstd_stringstd_string)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1initialise_1_1bvStringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoCreateWindow, 
  jstring windowTitle, 
  jstring customCapabilitiesConfig
)
{
   // parameter conversions 
  bool _cpp_autoCreateWindow = autoCreateWindow ? true : false;
  std::string _cpp_windowTitle = ""; org::xbig::jni::to_stdstring(_jni_env_, windowTitle, _cpp_windowTitle); // calls c-tor only. Not operator= .;
  std::string _cpp_customCapabilitiesConfig = ""; org::xbig::jni::to_stdstring(_jni_env_, customCapabilitiesConfig, _cpp_customCapabilitiesConfig); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   try
   {
       // call library method 
       const Ogre::RenderWindow* _cpp_result = _cpp_this->initialise(_cpp_autoCreateWindow, _cpp_windowTitle, _cpp_customCapabilitiesConfig) ; 
       return reinterpret_cast<jlong>(_cpp_result);
   }
   catch (Ogre::Exception& e)
   {
       Ogre4j::handleOgreException(_jni_env_, e);
   }
   catch (...)
   {
       Ogre4j::handleUnknownException(_jni_env_, "Ogre::Root::initialise");
   }
   return 0;
} /* RenderWindow* Ogre::Root::initialise */


/*
 * Class:      org.ogre4j.Root
 * Method:     isInitialised()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::isInitialised
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1isInitialised_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInitialised() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::isInitialised */


/*
 * Class:      org.ogre4j.Root
 * Method:     useCustomRenderSystemCapabilities()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::useCustomRenderSystemCapabilities
 * Signature:  (Ogre_RenderSystemCapabilities)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1useCustomRenderSystemCapabilities_1_1RenderSystemCapabilitiesp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong capabilities
)
{
   // parameter conversions 
  Ogre::RenderSystemCapabilities* _cpp_capabilities = reinterpret_cast< Ogre::RenderSystemCapabilities* >(capabilities); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->useCustomRenderSystemCapabilities(_cpp_capabilities);
} /* void Ogre::Root::useCustomRenderSystemCapabilities */


/*
 * Class:      org.ogre4j.Root
 * Method:     addSceneManagerFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addSceneManagerFactory
 * Signature:  (Ogre_SceneManagerFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addSceneManagerFactory_1_1SceneManagerFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::SceneManagerFactory* _cpp_fact = reinterpret_cast< Ogre::SceneManagerFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addSceneManagerFactory(_cpp_fact);
} /* void Ogre::Root::addSceneManagerFactory */


/*
 * Class:      org.ogre4j.Root
 * Method:     removeSceneManagerFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeSceneManagerFactory
 * Signature:  (Ogre_SceneManagerFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeSceneManagerFactory_1_1SceneManagerFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::SceneManagerFactory* _cpp_fact = reinterpret_cast< Ogre::SceneManagerFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeSceneManagerFactory(_cpp_fact);
} /* void Ogre::Root::removeSceneManagerFactory */


/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManagerMetaData()
 * Type:       non-virtual method
 * Definition: const SceneManagerMetaData* Ogre::Root::getSceneManagerMetaData
 * Signature:  (std_string)Ogre_SceneManagerMetaData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManagerMetaData_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManagerMetaData* _cpp_result = _cpp_this->getSceneManagerMetaData(_cpp_typeName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const SceneManagerMetaData* Ogre::Root::getSceneManagerMetaData */


/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManagerMetaDataIterator()
 * Type:       non-virtual method
 * Definition: SceneManagerEnumerator::MetaDataIterator Ogre::Root::getSceneManagerMetaDataIterator
 * Signature:  ()Ogre_SceneManagerEnumerator_MetaDataIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManagerMetaDataIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManagerEnumerator::MetaDataIterator* _cpp_result = new Ogre::SceneManagerEnumerator::MetaDataIterator( _cpp_this->getSceneManagerMetaDataIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SceneManagerEnumerator::MetaDataIterator Ogre::Root::getSceneManagerMetaDataIterator */


/*
 * Class:      org.ogre4j.Root
 * Method:     createSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::createSceneManager
 * Signature:  (std_stringstd_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createSceneManager_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName, 
  jstring instanceName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .;
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->createSceneManager(_cpp_typeName, _cpp_instanceName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SceneManager* Ogre::Root::createSceneManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     createSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::createSceneManager
 * Signature:  (unsigned_shortstd_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createSceneManager_1_1SceneTypeMaskvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint typeMask, 
  jstring instanceName
)
{
   // parameter conversions 
  unsigned short _cpp_typeMask = typeMask;
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->createSceneManager(_cpp_typeMask, _cpp_instanceName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SceneManager* Ogre::Root::createSceneManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     destroySceneManager()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::destroySceneManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1destroySceneManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroySceneManager(_cpp_sm);
} /* void Ogre::Root::destroySceneManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::getSceneManager
 * Signature:  (std_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManager_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName
)
{
   // parameter conversions 
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->getSceneManager(_cpp_instanceName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SceneManager* Ogre::Root::getSceneManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManagerIterator()
 * Type:       non-virtual method
 * Definition: SceneManagerEnumerator::SceneManagerIterator Ogre::Root::getSceneManagerIterator
 * Signature:  ()Ogre_SceneManagerEnumerator_SceneManagerIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManagerIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManagerEnumerator::SceneManagerIterator* _cpp_result = new Ogre::SceneManagerEnumerator::SceneManagerIterator( _cpp_this->getSceneManagerIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SceneManagerEnumerator::SceneManagerIterator Ogre::Root::getSceneManagerIterator */


/*
 * Class:      org.ogre4j.Root
 * Method:     getTextureManager()
 * Type:       non-virtual method
 * Definition: TextureManager* Ogre::Root::getTextureManager
 * Signature:  ()Ogre_TextureManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getTextureManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureManager* _cpp_result = _cpp_this->getTextureManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureManager* Ogre::Root::getTextureManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     getMeshManager()
 * Type:       non-virtual method
 * Definition: MeshManager* Ogre::Root::getMeshManager
 * Signature:  ()Ogre_MeshManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getMeshManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshManager* _cpp_result = _cpp_this->getMeshManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshManager* Ogre::Root::getMeshManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     getErrorDescription()
 * Type:       non-virtual method
 * Definition: String Ogre::Root::getErrorDescription
 * Signature:  (J)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Root__1getErrorDescription_1_1lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong errorNumber
)
{
   // parameter conversions 
  long _cpp_errorNumber = errorNumber; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getErrorDescription(_cpp_errorNumber) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::Root::getErrorDescription */


/*
 * Class:      org.ogre4j.Root
 * Method:     addFrameListener()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addFrameListener
 * Signature:  (Ogre_FrameListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addFrameListener_1_1FrameListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newListener
)
{
   // parameter conversions 
  Ogre::FrameListener* _cpp_newListener = reinterpret_cast< Ogre::FrameListener* >(newListener); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addFrameListener(_cpp_newListener);
} /* void Ogre::Root::addFrameListener */


/*
 * Class:      org.ogre4j.Root
 * Method:     removeFrameListener()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeFrameListener
 * Signature:  (Ogre_FrameListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeFrameListener_1_1FrameListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong oldListener
)
{
   // parameter conversions 
  Ogre::FrameListener* _cpp_oldListener = reinterpret_cast< Ogre::FrameListener* >(oldListener); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeFrameListener(_cpp_oldListener);
} /* void Ogre::Root::removeFrameListener */


/*
 * Class:      org.ogre4j.Root
 * Method:     queueEndRendering()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::queueEndRendering
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1queueEndRendering (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->queueEndRendering();
} /* void Ogre::Root::queueEndRendering */


/*
 * Class:      org.ogre4j.Root
 * Method:     startRendering()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::startRendering
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1startRendering (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->startRendering();
} /* void Ogre::Root::startRendering */


/*
 * Class:      org.ogre4j.Root
 * Method:     renderOneFrame()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::renderOneFrame
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1renderOneFrame (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->renderOneFrame() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::renderOneFrame */


/*
 * Class:      org.ogre4j.Root
 * Method:     shutdown()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::shutdown
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1shutdown (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shutdown();
} /* void Ogre::Root::shutdown */


/*
 * Class:      org.ogre4j.Root
 * Method:     addResourceLocation()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addResourceLocation
 * Signature:  (std_stringstd_stringstd_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addResourceLocation_1_1StringRStringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring locType, 
  jstring groupName, 
  jboolean recursive
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_locType = ""; org::xbig::jni::to_stdstring(_jni_env_, locType, _cpp_locType); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  bool _cpp_recursive = recursive ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addResourceLocation(_cpp_name, _cpp_locType, _cpp_groupName, _cpp_recursive);
} /* void Ogre::Root::addResourceLocation */


/*
 * Class:      org.ogre4j.Root
 * Method:     removeResourceLocation()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeResourceLocation
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeResourceLocation_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeResourceLocation(_cpp_name, _cpp_groupName);
} /* void Ogre::Root::removeResourceLocation */


/*
 * Class:      org.ogre4j.Root
 * Method:     convertColourValue()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::convertColourValue
 * Signature:  (Ogre_ColourValueunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1convertColourValue_1_1ColourValueRuint32p (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour, 
  jlong pDest
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  unsigned int* _cpp_pDest = reinterpret_cast<unsigned int*>(pDest); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->convertColourValue(*_cpp_colour, _cpp_pDest);
} /* void Ogre::Root::convertColourValue */


/*
 * Class:      org.ogre4j.Root
 * Method:     getAutoCreatedWindow()
 * Type:       non-virtual method
 * Definition: RenderWindow* Ogre::Root::getAutoCreatedWindow
 * Signature:  ()Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getAutoCreatedWindow (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderWindow* _cpp_result = _cpp_this->getAutoCreatedWindow() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderWindow* Ogre::Root::getAutoCreatedWindow */


/*
 * Class:      org.ogre4j.Root
 * Method:     createRenderWindow()
 * Type:       non-virtual method
 * Definition: RenderWindow* Ogre::Root::createRenderWindow
 * Signature:  (std_stringIIZOgre_NameValuePairList)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createRenderWindow_1_1StringRIvIvbvNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong width, 
  jlong height, 
  jboolean fullScreen, 
  jlong miscParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned int _cpp_width = width;
  unsigned int _cpp_height = height;
  bool _cpp_fullScreen = fullScreen ? true : false;
  const Ogre::NameValuePairList* _cpp_miscParams = reinterpret_cast< const Ogre::NameValuePairList* >(miscParams); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderWindow* _cpp_result = _cpp_this->createRenderWindow(_cpp_name, _cpp_width, _cpp_height, _cpp_fullScreen, _cpp_miscParams) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderWindow* Ogre::Root::createRenderWindow */


/*
 * Class:      org.ogre4j.Root
 * Method:     detachRenderTarget()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::detachRenderTarget
 * Signature:  (Ogre_RenderTarget)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1detachRenderTarget_1_1RenderTargetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pWin
)
{
   // parameter conversions 
  Ogre::RenderTarget* _cpp_pWin = reinterpret_cast< Ogre::RenderTarget* >(pWin); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detachRenderTarget(_cpp_pWin);
} /* void Ogre::Root::detachRenderTarget */


/*
 * Class:      org.ogre4j.Root
 * Method:     detachRenderTarget()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::detachRenderTarget
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1detachRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detachRenderTarget(_cpp_name);
} /* void Ogre::Root::detachRenderTarget */


/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderTarget()
 * Type:       non-virtual method
 * Definition: RenderTarget* Ogre::Root::getRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderTarget* _cpp_result = _cpp_this->getRenderTarget(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderTarget* Ogre::Root::getRenderTarget */


/*
 * Class:      org.ogre4j.Root
 * Method:     loadPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::loadPlugin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1loadPlugin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pluginName
)
{
   // parameter conversions 
  std::string _cpp_pluginName = ""; org::xbig::jni::to_stdstring(_jni_env_, pluginName, _cpp_pluginName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   try
   {
       // call library method 
       _cpp_this->loadPlugin(_cpp_pluginName);
   }
   catch (Ogre::Exception& e)
   {
       Ogre4j::handleOgreException(_jni_env_, e);
   }
   catch (...)
   {
       Ogre4j::handleUnknownException(_jni_env_, "Ogre::Root::loadPlugin");
   }
} /* void Ogre::Root::loadPlugin */


/*
 * Class:      org.ogre4j.Root
 * Method:     unloadPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::unloadPlugin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1unloadPlugin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pluginName
)
{
   // parameter conversions 
  std::string _cpp_pluginName = ""; org::xbig::jni::to_stdstring(_jni_env_, pluginName, _cpp_pluginName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadPlugin(_cpp_pluginName);
} /* void Ogre::Root::unloadPlugin */


/*
 * Class:      org.ogre4j.Root
 * Method:     installPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::installPlugin
 * Signature:  (Ogre_Plugin)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1installPlugin_1_1Pluginp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong plugin
)
{
   // parameter conversions 
  Ogre::Plugin* _cpp_plugin = reinterpret_cast< Ogre::Plugin* >(plugin); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->installPlugin(_cpp_plugin);
} /* void Ogre::Root::installPlugin */


/*
 * Class:      org.ogre4j.Root
 * Method:     uninstallPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::uninstallPlugin
 * Signature:  (Ogre_Plugin)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1uninstallPlugin_1_1Pluginp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong plugin
)
{
   // parameter conversions 
  Ogre::Plugin* _cpp_plugin = reinterpret_cast< Ogre::Plugin* >(plugin); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->uninstallPlugin(_cpp_plugin);
} /* void Ogre::Root::uninstallPlugin */


/*
 * Class:      org.ogre4j.Root
 * Method:     getInstalledPlugins()
 * Type:       non-virtual method
 * Definition: const PluginInstanceList& Ogre::Root::getInstalledPlugins
 * Signature:  ()Ogre_Root_PluginInstanceList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getInstalledPlugins_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Root::PluginInstanceList* _cpp_result = & _cpp_this->getInstalledPlugins() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const PluginInstanceList& Ogre::Root::getInstalledPlugins */


/*
 * Class:      org.ogre4j.Root
 * Method:     getTimer()
 * Type:       non-virtual method
 * Definition: Timer* Ogre::Root::getTimer
 * Signature:  ()Ogre_Timer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getTimer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Timer* _cpp_result = _cpp_this->getTimer() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Timer* Ogre::Root::getTimer */


/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameStarted()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameStarted
 * Signature:  (Ogre_FrameEvent)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameStarted_1_1FrameEventr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  Ogre::FrameEvent* _cpp_evt = reinterpret_cast< Ogre::FrameEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_fireFrameStarted(*_cpp_evt) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::_fireFrameStarted */


/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameRenderingQueued()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameRenderingQueued
 * Signature:  (Ogre_FrameEvent)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameRenderingQueued_1_1FrameEventr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  Ogre::FrameEvent* _cpp_evt = reinterpret_cast< Ogre::FrameEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_fireFrameRenderingQueued(*_cpp_evt) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::_fireFrameRenderingQueued */


/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameEnded()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameEnded
 * Signature:  (Ogre_FrameEvent)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameEnded_1_1FrameEventr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  Ogre::FrameEvent* _cpp_evt = reinterpret_cast< Ogre::FrameEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_fireFrameEnded(*_cpp_evt) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::_fireFrameEnded */


/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameStarted()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameStarted
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameStarted (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_fireFrameStarted() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::_fireFrameStarted */


/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameRenderingQueued()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameRenderingQueued
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameRenderingQueued (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_fireFrameRenderingQueued() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::_fireFrameRenderingQueued */


/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameEnded()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameEnded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameEnded (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_fireFrameEnded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::_fireFrameEnded */


/*
 * Class:      org.ogre4j.Root
 * Method:     getNextFrameNumber()
 * Type:       non-virtual method
 * Definition: unsigned long Ogre::Root::getNextFrameNumber
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getNextFrameNumber_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getNextFrameNumber() ; 
   return _cpp_result;
} /* unsigned long Ogre::Root::getNextFrameNumber */


/*
 * Class:      org.ogre4j.Root
 * Method:     _getCurrentSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::_getCurrentSceneManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1_1getCurrentSceneManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getCurrentSceneManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SceneManager* Ogre::Root::_getCurrentSceneManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     _setCurrentSceneManager()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::_setCurrentSceneManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1_1setCurrentSceneManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setCurrentSceneManager(_cpp_sm);
} /* void Ogre::Root::_setCurrentSceneManager */


/*
 * Class:      org.ogre4j.Root
 * Method:     _updateAllRenderTargets()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_updateAllRenderTargets
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1updateAllRenderTargets (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_updateAllRenderTargets() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::_updateAllRenderTargets */


/*
 * Class:      org.ogre4j.Root
 * Method:     createRenderQueueInvocationSequence()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocationSequence* Ogre::Root::createRenderQueueInvocationSequence
 * Signature:  (std_string)Ogre_RenderQueueInvocationSequence
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createRenderQueueInvocationSequence_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueueInvocationSequence* _cpp_result = _cpp_this->createRenderQueueInvocationSequence(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderQueueInvocationSequence* Ogre::Root::createRenderQueueInvocationSequence */


/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderQueueInvocationSequence()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocationSequence* Ogre::Root::getRenderQueueInvocationSequence
 * Signature:  (std_string)Ogre_RenderQueueInvocationSequence
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderQueueInvocationSequence_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueueInvocationSequence* _cpp_result = _cpp_this->getRenderQueueInvocationSequence(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderQueueInvocationSequence* Ogre::Root::getRenderQueueInvocationSequence */


/*
 * Class:      org.ogre4j.Root
 * Method:     destroyRenderQueueInvocationSequence()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::destroyRenderQueueInvocationSequence
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1destroyRenderQueueInvocationSequence_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyRenderQueueInvocationSequence(_cpp_name);
} /* void Ogre::Root::destroyRenderQueueInvocationSequence */


/*
 * Class:      org.ogre4j.Root
 * Method:     destroyAllRenderQueueInvocationSequences()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::destroyAllRenderQueueInvocationSequences
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1destroyAllRenderQueueInvocationSequences (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllRenderQueueInvocationSequences();
} /* void Ogre::Root::destroyAllRenderQueueInvocationSequences */


/*
 * Class:      org.ogre4j.Root
 * Method:     clearEventTimes()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::clearEventTimes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1clearEventTimes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearEventTimes();
} /* void Ogre::Root::clearEventTimes */


/*
 * Class:      org.ogre4j.Root
 * Method:     setFrameSmoothingPeriod()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::setFrameSmoothingPeriod
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1setFrameSmoothingPeriod_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat period
)
{
   // parameter conversions 
  float _cpp_period = period; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFrameSmoothingPeriod(_cpp_period);
} /* void Ogre::Root::setFrameSmoothingPeriod */


/*
 * Class:      org.ogre4j.Root
 * Method:     getFrameSmoothingPeriod()
 * Type:       non-virtual method
 * Definition: Real Ogre::Root::getFrameSmoothingPeriod
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Root__1getFrameSmoothingPeriod_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFrameSmoothingPeriod() ; 
   return _cpp_result;
} /* Real Ogre::Root::getFrameSmoothingPeriod */


/*
 * Class:      org.ogre4j.Root
 * Method:     addMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addMovableObjectFactory
 * Signature:  (Ogre_MovableObjectFactoryZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addMovableObjectFactory_1_1MovableObjectFactorypbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact, 
  jboolean overrideExisting
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact);
  bool _cpp_overrideExisting = overrideExisting ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addMovableObjectFactory(_cpp_fact, _cpp_overrideExisting);
} /* void Ogre::Root::addMovableObjectFactory */


/*
 * Class:      org.ogre4j.Root
 * Method:     removeMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeMovableObjectFactory
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeMovableObjectFactory_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeMovableObjectFactory(_cpp_fact);
} /* void Ogre::Root::removeMovableObjectFactory */


/*
 * Class:      org.ogre4j.Root
 * Method:     hasMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::hasMovableObjectFactory
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1hasMovableObjectFactory_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasMovableObjectFactory(_cpp_typeName) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Root::hasMovableObjectFactory */


/*
 * Class:      org.ogre4j.Root
 * Method:     getMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: MovableObjectFactory* Ogre::Root::getMovableObjectFactory
 * Signature:  (std_string)Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getMovableObjectFactory_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->getMovableObjectFactory(_cpp_typeName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MovableObjectFactory* Ogre::Root::getMovableObjectFactory */


/*
 * Class:      org.ogre4j.Root
 * Method:     _allocateNextMovableObjectTypeFlag()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::Root::_allocateNextMovableObjectTypeFlag
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1_1allocateNextMovableObjectTypeFlag (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->_allocateNextMovableObjectTypeFlag() ; 
   return _cpp_result;
} /* uint32 Ogre::Root::_allocateNextMovableObjectTypeFlag */


/*
 * Class:      org.ogre4j.Root
 * Method:     getMovableObjectFactoryIterator()
 * Type:       non-virtual method
 * Definition: MovableObjectFactoryIterator Ogre::Root::getMovableObjectFactoryIterator
 * Signature:  ()Ogre_Root_MovableObjectFactoryIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getMovableObjectFactoryIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Root* _cpp_this = reinterpret_cast<const Ogre::Root*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Root::MovableObjectFactoryIterator* _cpp_result = new Ogre::Root::MovableObjectFactoryIterator( _cpp_this->getMovableObjectFactoryIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MovableObjectFactoryIterator Ogre::Root::getMovableObjectFactoryIterator */


/*
 * Class:      org.ogre4j.Root
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static Root& Ogre::Root::getSingleton
 * Signature:  ()Ogre_Root
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Root with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Root* _cpp_result = & Ogre::Root::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Root& Ogre::Root::getSingleton */


/*
 * Class:      org.ogre4j.Root
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static Root* Ogre::Root::getSingletonPtr
 * Signature:  ()Ogre_Root
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Root with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Root* _cpp_result = Ogre::Root::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Root* Ogre::Root::getSingletonPtr */


/*
 * Class:      org.ogre4j.Root
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Root::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Root 
   // cast pointer to C++ object 
   Ogre::Root* _cpp_this = reinterpret_cast<Ogre::Root*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Root::__delete */
