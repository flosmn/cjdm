///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_CompositionTargetPass.h"

// import header files of original library
#include <OgreCompositionTargetPass.h>



/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     CompositionTargetPass()
 * Type:       constructor
 * Definition: Ogre::CompositionTargetPass::CompositionTargetPass
 * Signature:  (Ogre_CompositionTechnique)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1_1createCompositionTargetPass_1_1CompositionTechniquep (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent
)
{
   // constructor of class Ogre::CompositionTargetPass 
   
   // parameter conversions 
  Ogre::CompositionTechnique* _cpp_parent = reinterpret_cast< Ogre::CompositionTechnique* >(parent); 
   
   // create new instance of class Ogre::CompositionTargetPass 
   Ogre::CompositionTargetPass* _cpp_this = new Ogre::CompositionTargetPass(_cpp_parent); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::CompositionTargetPass::CompositionTargetPass */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setInputMode()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setInputMode
 * Signature:  (Ogre_CompositionTargetPass_InputMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setInputMode_1_1InputModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::CompositionTargetPass::InputMode _cpp_mode = (Ogre::CompositionTargetPass::InputMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInputMode(_cpp_mode);
} /* void Ogre::CompositionTargetPass::setInputMode */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getInputMode()
 * Type:       non-virtual method
 * Definition: InputMode Ogre::CompositionTargetPass::getInputMode
 * Signature:  ()Ogre_CompositionTargetPass_InputMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionTargetPass__1getInputMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<const Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositionTargetPass::InputMode _cpp_result = _cpp_this->getInputMode() ; 
   return _cpp_result;
} /* InputMode Ogre::CompositionTargetPass::getInputMode */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setOutputName()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setOutputName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setOutputName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring out
)
{
   // parameter conversions 
  std::string _cpp_out = ""; org::xbig::jni::to_stdstring(_jni_env_, out, _cpp_out); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setOutputName(_cpp_out);
} /* void Ogre::CompositionTargetPass::setOutputName */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getOutputName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::CompositionTargetPass::getOutputName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_CompositionTargetPass__1getOutputName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<const Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getOutputName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::CompositionTargetPass::getOutputName */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setOnlyInitial()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setOnlyInitial
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setOnlyInitial_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean value
)
{
   // parameter conversions 
  bool _cpp_value = value ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setOnlyInitial(_cpp_value);
} /* void Ogre::CompositionTargetPass::setOnlyInitial */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getOnlyInitial()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionTargetPass::getOnlyInitial
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionTargetPass__1getOnlyInitial (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getOnlyInitial() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::CompositionTargetPass::getOnlyInitial */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setVisibilityMask()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setVisibilityMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setVisibilityMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mask
)
{
   // parameter conversions 
  unsigned int _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityMask(_cpp_mask);
} /* void Ogre::CompositionTargetPass::setVisibilityMask */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getVisibilityMask()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::CompositionTargetPass::getVisibilityMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getVisibilityMask (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityMask() ; 
   return _cpp_result;
} /* uint32 Ogre::CompositionTargetPass::getVisibilityMask */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setMaterialScheme()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setMaterialScheme
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setMaterialScheme_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring schemeName
)
{
   // parameter conversions 
  std::string _cpp_schemeName = ""; org::xbig::jni::to_stdstring(_jni_env_, schemeName, _cpp_schemeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialScheme(_cpp_schemeName);
} /* void Ogre::CompositionTargetPass::setMaterialScheme */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getMaterialScheme()
 * Type:       non-virtual method
 * Definition: const String& Ogre::CompositionTargetPass::getMaterialScheme
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_CompositionTargetPass__1getMaterialScheme_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<const Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMaterialScheme() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::CompositionTargetPass::getMaterialScheme */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setShadowsEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setShadowsEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setShadowsEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowsEnabled(_cpp_enabled);
} /* void Ogre::CompositionTargetPass::setShadowsEnabled */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getShadowsEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionTargetPass::getShadowsEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionTargetPass__1getShadowsEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<const Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getShadowsEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::CompositionTargetPass::getShadowsEnabled */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setLodBias()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setLodBias
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setLodBias_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat bias
)
{
   // parameter conversions 
  float _cpp_bias = bias; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLodBias(_cpp_bias);
} /* void Ogre::CompositionTargetPass::setLodBias */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getLodBias()
 * Type:       non-virtual method
 * Definition: float Ogre::CompositionTargetPass::getLodBias
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_CompositionTargetPass__1getLodBias (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLodBias() ; 
   return _cpp_result;
} /* float Ogre::CompositionTargetPass::getLodBias */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     createPass()
 * Type:       non-virtual method
 * Definition: CompositionPass* Ogre::CompositionTargetPass::createPass
 * Signature:  ()Ogre_CompositionPass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1createPass (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositionPass* _cpp_result = _cpp_this->createPass() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositionPass* Ogre::CompositionTargetPass::createPass */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     removePass()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::removePass
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1removePass_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint idx
)
{
   // parameter conversions 
  size_t _cpp_idx = idx; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removePass(_cpp_idx);
} /* void Ogre::CompositionTargetPass::removePass */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getPass()
 * Type:       non-virtual method
 * Definition: CompositionPass* Ogre::CompositionTargetPass::getPass
 * Signature:  (I)Ogre_CompositionPass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getPass_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint idx
)
{
   // parameter conversions 
  size_t _cpp_idx = idx; 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositionPass* _cpp_result = _cpp_this->getPass(_cpp_idx) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositionPass* Ogre::CompositionTargetPass::getPass */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getNumPasses()
 * Type:       non-virtual method
 * Definition: size_t Ogre::CompositionTargetPass::getNumPasses
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionTargetPass__1getNumPasses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumPasses() ; 
   return _cpp_result;
} /* size_t Ogre::CompositionTargetPass::getNumPasses */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     removeAllPasses()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::removeAllPasses
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1removeAllPasses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllPasses();
} /* void Ogre::CompositionTargetPass::removeAllPasses */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getPassIterator()
 * Type:       non-virtual method
 * Definition: PassIterator Ogre::CompositionTargetPass::getPassIterator
 * Signature:  ()Ogre_CompositionTargetPass_PassIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getPassIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositionTargetPass::PassIterator* _cpp_result = new Ogre::CompositionTargetPass::PassIterator( _cpp_this->getPassIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* PassIterator Ogre::CompositionTargetPass::getPassIterator */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: CompositionTechnique* Ogre::CompositionTargetPass::getParent
 * Signature:  ()Ogre_CompositionTechnique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositionTechnique* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositionTechnique* Ogre::CompositionTargetPass::getParent */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     _isSupported()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionTargetPass::_isSupported
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionTargetPass__1_1isSupported (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_isSupported() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::CompositionTargetPass::_isSupported */


/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::CompositionTargetPass::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::CompositionTargetPass 
   // cast pointer to C++ object 
   Ogre::CompositionTargetPass* _cpp_this = reinterpret_cast<Ogre::CompositionTargetPass*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::CompositionTargetPass::__delete */
