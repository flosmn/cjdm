///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Plane.h"

// import header files of original library
#include <OgrePlane.h>



/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Plane 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Plane 
   Ogre::Plane* _cpp_this = new Ogre::Plane(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Plane::Plane */


/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Plane)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1PlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rhs
)
{
   // constructor of class Ogre::Plane 
   
   // parameter conversions 
  const Ogre::Plane* _cpp_rhs = reinterpret_cast< const Ogre::Plane* >(rhs); 
   
   // create new instance of class Ogre::Plane 
   Ogre::Plane* _cpp_this = new Ogre::Plane(*_cpp_rhs); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Plane::Plane */


/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Vector3float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1Vector3RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkNormal, 
  jfloat fConstant
)
{
   // constructor of class Ogre::Plane 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkNormal = reinterpret_cast< const Ogre::Vector3* >(rkNormal);
  float _cpp_fConstant = fConstant; 
   
   // create new instance of class Ogre::Plane 
   Ogre::Plane* _cpp_this = new Ogre::Plane(*_cpp_rkNormal, _cpp_fConstant); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Plane::Plane */


/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat a, 
  jfloat b, 
  jfloat c, 
  jfloat d
)
{
   // constructor of class Ogre::Plane 
   
   // parameter conversions 
  float _cpp_a = a;
  float _cpp_b = b;
  float _cpp_c = c;
  float _cpp_d = d; 
   
   // create new instance of class Ogre::Plane 
   Ogre::Plane* _cpp_this = new Ogre::Plane(_cpp_a, _cpp_b, _cpp_c, _cpp_d); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Plane::Plane */


/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1Vector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkNormal, 
  jlong rkPoint
)
{
   // constructor of class Ogre::Plane 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkNormal = reinterpret_cast< const Ogre::Vector3* >(rkNormal);
  const Ogre::Vector3* _cpp_rkPoint = reinterpret_cast< const Ogre::Vector3* >(rkPoint); 
   
   // create new instance of class Ogre::Plane 
   Ogre::Plane* _cpp_this = new Ogre::Plane(*_cpp_rkNormal, *_cpp_rkPoint); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Plane::Plane */


/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkPoint0, 
  jlong rkPoint1, 
  jlong rkPoint2
)
{
   // constructor of class Ogre::Plane 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkPoint0 = reinterpret_cast< const Ogre::Vector3* >(rkPoint0);
  const Ogre::Vector3* _cpp_rkPoint1 = reinterpret_cast< const Ogre::Vector3* >(rkPoint1);
  const Ogre::Vector3* _cpp_rkPoint2 = reinterpret_cast< const Ogre::Vector3* >(rkPoint2); 
   
   // create new instance of class Ogre::Plane 
   Ogre::Plane* _cpp_this = new Ogre::Plane(*_cpp_rkPoint0, *_cpp_rkPoint1, *_cpp_rkPoint2); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Plane::Plane */


/*
 * Class:      org.ogre4j.Plane
 * Method:     getSide()
 * Type:       non-virtual method
 * Definition: Side Ogre::Plane::getSide
 * Signature:  (Ogre_Vector3)Ogre_Plane_Side
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Plane__1getSide_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkPoint
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkPoint = reinterpret_cast< const Ogre::Vector3* >(rkPoint); 
   
   // cast pointer to C++ object 
   const Ogre::Plane* _cpp_this = reinterpret_cast<const Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane::Side _cpp_result = _cpp_this->getSide(*_cpp_rkPoint) ; 
   return _cpp_result;
} /* Side Ogre::Plane::getSide */


/*
 * Class:      org.ogre4j.Plane
 * Method:     getSide()
 * Type:       non-virtual method
 * Definition: Side Ogre::Plane::getSide
 * Signature:  (Ogre_AxisAlignedBox)Ogre_Plane_Side
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Plane__1getSide_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkBox
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_rkBox = reinterpret_cast< const Ogre::AxisAlignedBox* >(rkBox); 
   
   // cast pointer to C++ object 
   const Ogre::Plane* _cpp_this = reinterpret_cast<const Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane::Side _cpp_result = _cpp_this->getSide(*_cpp_rkBox) ; 
   return _cpp_result;
} /* Side Ogre::Plane::getSide */


/*
 * Class:      org.ogre4j.Plane
 * Method:     getSide()
 * Type:       non-virtual method
 * Definition: Side Ogre::Plane::getSide
 * Signature:  (Ogre_Vector3Ogre_Vector3)Ogre_Plane_Side
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Plane__1getSide_1_1Vector3RVector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong centre, 
  jlong halfSize
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_centre = reinterpret_cast< const Ogre::Vector3* >(centre);
  const Ogre::Vector3* _cpp_halfSize = reinterpret_cast< const Ogre::Vector3* >(halfSize); 
   
   // cast pointer to C++ object 
   const Ogre::Plane* _cpp_this = reinterpret_cast<const Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane::Side _cpp_result = _cpp_this->getSide(*_cpp_centre, *_cpp_halfSize) ; 
   return _cpp_result;
} /* Side Ogre::Plane::getSide */


/*
 * Class:      org.ogre4j.Plane
 * Method:     getDistance()
 * Type:       non-virtual method
 * Definition: Real Ogre::Plane::getDistance
 * Signature:  (Ogre_Vector3)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Plane__1getDistance_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkPoint
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkPoint = reinterpret_cast< const Ogre::Vector3* >(rkPoint); 
   
   // cast pointer to C++ object 
   const Ogre::Plane* _cpp_this = reinterpret_cast<const Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDistance(*_cpp_rkPoint) ; 
   return _cpp_result;
} /* Real Ogre::Plane::getDistance */


/*
 * Class:      org.ogre4j.Plane
 * Method:     redefine()
 * Type:       non-virtual method
 * Definition: void Ogre::Plane::redefine
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1redefine_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkPoint0, 
  jlong rkPoint1, 
  jlong rkPoint2
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkPoint0 = reinterpret_cast< const Ogre::Vector3* >(rkPoint0);
  const Ogre::Vector3* _cpp_rkPoint1 = reinterpret_cast< const Ogre::Vector3* >(rkPoint1);
  const Ogre::Vector3* _cpp_rkPoint2 = reinterpret_cast< const Ogre::Vector3* >(rkPoint2); 
   
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this = reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->redefine(*_cpp_rkPoint0, *_cpp_rkPoint1, *_cpp_rkPoint2);
} /* void Ogre::Plane::redefine */


/*
 * Class:      org.ogre4j.Plane
 * Method:     redefine()
 * Type:       non-virtual method
 * Definition: void Ogre::Plane::redefine
 * Signature:  (Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1redefine_1_1Vector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkNormal, 
  jlong rkPoint
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkNormal = reinterpret_cast< const Ogre::Vector3* >(rkNormal);
  const Ogre::Vector3* _cpp_rkPoint = reinterpret_cast< const Ogre::Vector3* >(rkPoint); 
   
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this = reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->redefine(*_cpp_rkNormal, *_cpp_rkPoint);
} /* void Ogre::Plane::redefine */


/*
 * Class:      org.ogre4j.Plane
 * Method:     projectVector()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Plane::projectVector
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1projectVector_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::Plane* _cpp_this = reinterpret_cast<const Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->projectVector(*_cpp_v) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Plane::projectVector */


/*
 * Class:      org.ogre4j.Plane
 * Method:     normalise()
 * Type:       non-virtual method
 * Definition: Real Ogre::Plane::normalise
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Plane__1normalise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this = reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->normalise() ; 
   return _cpp_result;
} /* Real Ogre::Plane::normalise */


/*
 * Class:      org.ogre4j.Plane
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Plane::operator==
 * Signature:  (Ogre_Plane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Plane__1operatorEqual_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_rhs = reinterpret_cast< const Ogre::Plane* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Plane* _cpp_this = reinterpret_cast<const Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Plane::operator== */


/*
 * Class:      org.ogre4j.Plane
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Plane::operator!=
 * Signature:  (Ogre_Plane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Plane__1operatorNotEqual_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_rhs = reinterpret_cast< const Ogre::Plane* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Plane* _cpp_this = reinterpret_cast<const Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Plane::operator!= */


/*
 * Class:      org.ogre4j.Plane
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Plane::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Plane 
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this = reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Plane::__delete */


/*
 * Class:      org.ogre4j.Plane
 * Method:     getnormal()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::Plane::normal
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1getnormal (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this = reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->normal); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Plane::normal */


/*
 * Class:      org.ogre4j.Plane
 * Method:     setnormal()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::Plane::normal
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1setnormal (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this =reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->normal = *_cpp__jni_value_;
} /* Vector3 Ogre::Plane::normal */


/*
 * Class:      org.ogre4j.Plane
 * Method:     getd()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Plane::d
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Plane__1getd (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this = reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->d; 
   return _cpp_result;
} /* Real Ogre::Plane::d */


/*
 * Class:      org.ogre4j.Plane
 * Method:     setd()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Plane::d
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1setd (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Plane* _cpp_this =reinterpret_cast<Ogre::Plane*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->d = _cpp__jni_value_;
} /* Real Ogre::Plane::d */
