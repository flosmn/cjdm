///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ParticleSystem.h"

// import header files of original library
#include <OgreParticleSystem.h>



/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     ParticleSystem()
 * Type:       constructor
 * Definition: Ogre::ParticleSystem::ParticleSystem
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1_1createParticleSystem (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ParticleSystem 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ParticleSystem 
   Ogre::ParticleSystem* _cpp_this = new Ogre::ParticleSystem(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ParticleSystem::ParticleSystem */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     ParticleSystem()
 * Type:       constructor
 * Definition: Ogre::ParticleSystem::ParticleSystem
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1_1createParticleSystem_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name, 
  jstring resourceGroupName
)
{
   // constructor of class Ogre::ParticleSystem 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_resourceGroupName = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceGroupName, _cpp_resourceGroupName); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::ParticleSystem 
   Ogre::ParticleSystem* _cpp_this = new Ogre::ParticleSystem(_cpp_name, _cpp_resourceGroupName); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ParticleSystem::ParticleSystem */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setRenderer()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setRenderer
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setRenderer_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderer(_cpp_typeName);
} /* void Ogre::ParticleSystem::setRenderer */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getRenderer()
 * Type:       non-virtual method
 * Definition: ParticleSystemRenderer* Ogre::ParticleSystem::getRenderer
 * Signature:  ()Ogre_ParticleSystemRenderer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getRenderer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleSystemRenderer* _cpp_result = _cpp_this->getRenderer() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleSystemRenderer* Ogre::ParticleSystem::getRenderer */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getRendererName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ParticleSystem::getRendererName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystem__1getRendererName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getRendererName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ParticleSystem::getRendererName */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     addEmitter()
 * Type:       non-virtual method
 * Definition: ParticleEmitter* Ogre::ParticleSystem::addEmitter
 * Signature:  (std_string)Ogre_ParticleEmitter
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1addEmitter_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring emitterType
)
{
   // parameter conversions 
  std::string _cpp_emitterType = ""; org::xbig::jni::to_stdstring(_jni_env_, emitterType, _cpp_emitterType); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleEmitter* _cpp_result = _cpp_this->addEmitter(_cpp_emitterType) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleEmitter* Ogre::ParticleSystem::addEmitter */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getEmitter()
 * Type:       non-virtual method
 * Definition: ParticleEmitter* Ogre::ParticleSystem::getEmitter
 * Signature:  (S)Ogre_ParticleEmitter
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getEmitter_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleEmitter* _cpp_result = _cpp_this->getEmitter(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleEmitter* Ogre::ParticleSystem::getEmitter */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getNumEmitters()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::ParticleSystem::getNumEmitters
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleSystem__1getNumEmitters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumEmitters() ; 
   return _cpp_result;
} /* unsigned short Ogre::ParticleSystem::getNumEmitters */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     removeEmitter()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::removeEmitter
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1removeEmitter_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeEmitter(_cpp_index);
} /* void Ogre::ParticleSystem::removeEmitter */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     removeAllEmitters()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::removeAllEmitters
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1removeAllEmitters (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllEmitters();
} /* void Ogre::ParticleSystem::removeAllEmitters */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     addAffector()
 * Type:       non-virtual method
 * Definition: ParticleAffector* Ogre::ParticleSystem::addAffector
 * Signature:  (std_string)Ogre_ParticleAffector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1addAffector_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring affectorType
)
{
   // parameter conversions 
  std::string _cpp_affectorType = ""; org::xbig::jni::to_stdstring(_jni_env_, affectorType, _cpp_affectorType); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleAffector* _cpp_result = _cpp_this->addAffector(_cpp_affectorType) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleAffector* Ogre::ParticleSystem::addAffector */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getAffector()
 * Type:       non-virtual method
 * Definition: ParticleAffector* Ogre::ParticleSystem::getAffector
 * Signature:  (S)Ogre_ParticleAffector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getAffector_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleAffector* _cpp_result = _cpp_this->getAffector(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleAffector* Ogre::ParticleSystem::getAffector */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getNumAffectors()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::ParticleSystem::getNumAffectors
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleSystem__1getNumAffectors_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumAffectors() ; 
   return _cpp_result;
} /* unsigned short Ogre::ParticleSystem::getNumAffectors */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     removeAffector()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::removeAffector
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1removeAffector_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAffector(_cpp_index);
} /* void Ogre::ParticleSystem::removeAffector */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     removeAllAffectors()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::removeAllAffectors
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1removeAllAffectors (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllAffectors();
} /* void Ogre::ParticleSystem::removeAllAffectors */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void Ogre::ParticleSystem::clear */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getNumParticles()
 * Type:       non-virtual method
 * Definition: size_t Ogre::ParticleSystem::getNumParticles
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleSystem__1getNumParticles_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumParticles() ; 
   return _cpp_result;
} /* size_t Ogre::ParticleSystem::getNumParticles */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     createParticle()
 * Type:       non-virtual method
 * Definition: Particle* Ogre::ParticleSystem::createParticle
 * Signature:  ()Ogre_Particle
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1createParticle (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Particle* _cpp_result = _cpp_this->createParticle() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Particle* Ogre::ParticleSystem::createParticle */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     createEmitterParticle()
 * Type:       non-virtual method
 * Definition: Particle* Ogre::ParticleSystem::createEmitterParticle
 * Signature:  (std_string)Ogre_Particle
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1createEmitterParticle_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring emitterName
)
{
   // parameter conversions 
  std::string _cpp_emitterName = ""; org::xbig::jni::to_stdstring(_jni_env_, emitterName, _cpp_emitterName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Particle* _cpp_result = _cpp_this->createEmitterParticle(_cpp_emitterName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Particle* Ogre::ParticleSystem::createEmitterParticle */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParticle()
 * Type:       non-virtual method
 * Definition: Particle* Ogre::ParticleSystem::getParticle
 * Signature:  (I)Ogre_Particle
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getParticle_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Particle* _cpp_result = _cpp_this->getParticle(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Particle* Ogre::ParticleSystem::getParticle */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParticleQuota()
 * Type:       non-virtual method
 * Definition: size_t Ogre::ParticleSystem::getParticleQuota
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleSystem__1getParticleQuota_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getParticleQuota() ; 
   return _cpp_result;
} /* size_t Ogre::ParticleSystem::getParticleQuota */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setParticleQuota()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setParticleQuota
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setParticleQuota_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint quota
)
{
   // parameter conversions 
  size_t _cpp_quota = quota; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParticleQuota(_cpp_quota);
} /* void Ogre::ParticleSystem::setParticleQuota */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getEmittedEmitterQuota()
 * Type:       non-virtual method
 * Definition: size_t Ogre::ParticleSystem::getEmittedEmitterQuota
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleSystem__1getEmittedEmitterQuota_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getEmittedEmitterQuota() ; 
   return _cpp_result;
} /* size_t Ogre::ParticleSystem::getEmittedEmitterQuota */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setEmittedEmitterQuota()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setEmittedEmitterQuota
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setEmittedEmitterQuota_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint quota
)
{
   // parameter conversions 
  size_t _cpp_quota = quota; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEmittedEmitterQuota(_cpp_quota);
} /* void Ogre::ParticleSystem::setEmittedEmitterQuota */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: ParticleSystem& Ogre::ParticleSystem::operator=
 * Signature:  (Ogre_ParticleSystem)Ogre_ParticleSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1operatorAssignment_1_1ParticleSystemR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::ParticleSystem* _cpp_rhs = reinterpret_cast< const Ogre::ParticleSystem* >(rhs); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleSystem* _cpp_result = & _cpp_this->operator=(*_cpp_rhs) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleSystem& Ogre::ParticleSystem::operator= */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _update()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::_update
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1update_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat timeElapsed
)
{
   // parameter conversions 
  float _cpp_timeElapsed = timeElapsed; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_update(_cpp_timeElapsed);
} /* void Ogre::ParticleSystem::_update */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _getIterator()
 * Type:       non-virtual method
 * Definition: ParticleIterator Ogre::ParticleSystem::_getIterator
 * Signature:  ()Ogre_ParticleIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1_1getIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleIterator* _cpp_result = new Ogre::ParticleIterator( _cpp_this->_getIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleIterator Ogre::ParticleSystem::_getIterator */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setMaterialName()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::setMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialName(_cpp_name);
} /* virtual void Ogre::ParticleSystem::setMaterialName */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getMaterialName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::ParticleSystem::getMaterialName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystem__1getMaterialName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMaterialName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::ParticleSystem::getMaterialName */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyCurrentCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* virtual void Ogre::ParticleSystem::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyAttached()
 * Type:       virtual method
 * Definition: void Ogre::ParticleSystem::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* void Ogre::ParticleSystem::_notifyAttached */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::ParticleSystem::getBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBoundingBox() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::ParticleSystem::getBoundingBox */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getBoundingRadius()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleSystem::getBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getBoundingRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingRadius() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleSystem::getBoundingRadius */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* virtual void Ogre::ParticleSystem::_updateRenderQueue */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     visitRenderables()
 * Type:       virtual method
 * Definition: void Ogre::ParticleSystem::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::ParticleSystem::visitRenderables */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     fastForward()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::fastForward
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1fastForward_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat time, 
  jfloat interval
)
{
   // parameter conversions 
  float _cpp_time = time;
  float _cpp_interval = interval; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->fastForward(_cpp_time, _cpp_interval);
} /* void Ogre::ParticleSystem::fastForward */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setSpeedFactor()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setSpeedFactor
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setSpeedFactor_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat speedFactor
)
{
   // parameter conversions 
  float _cpp_speedFactor = speedFactor; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpeedFactor(_cpp_speedFactor);
} /* void Ogre::ParticleSystem::setSpeedFactor */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getSpeedFactor()
 * Type:       non-virtual method
 * Definition: Real Ogre::ParticleSystem::getSpeedFactor
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getSpeedFactor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSpeedFactor() ; 
   return _cpp_result;
} /* Real Ogre::ParticleSystem::getSpeedFactor */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setIterationInterval()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setIterationInterval
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setIterationInterval_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat iterationInterval
)
{
   // parameter conversions 
  float _cpp_iterationInterval = iterationInterval; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setIterationInterval(_cpp_iterationInterval);
} /* void Ogre::ParticleSystem::setIterationInterval */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getIterationInterval()
 * Type:       non-virtual method
 * Definition: Real Ogre::ParticleSystem::getIterationInterval
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getIterationInterval_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getIterationInterval() ; 
   return _cpp_result;
} /* Real Ogre::ParticleSystem::getIterationInterval */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setNonVisibleUpdateTimeout()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setNonVisibleUpdateTimeout
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setNonVisibleUpdateTimeout_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat timeout
)
{
   // parameter conversions 
  float _cpp_timeout = timeout; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNonVisibleUpdateTimeout(_cpp_timeout);
} /* void Ogre::ParticleSystem::setNonVisibleUpdateTimeout */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getNonVisibleUpdateTimeout()
 * Type:       non-virtual method
 * Definition: Real Ogre::ParticleSystem::getNonVisibleUpdateTimeout
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getNonVisibleUpdateTimeout_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getNonVisibleUpdateTimeout() ; 
   return _cpp_result;
} /* Real Ogre::ParticleSystem::getNonVisibleUpdateTimeout */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getMovableType()
 * Type:       virtual method
 * Definition: const String& Ogre::ParticleSystem::getMovableType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystem__1getMovableType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMovableType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ParticleSystem::getMovableType */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyParticleResized()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::_notifyParticleResized
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyParticleResized (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleResized();
} /* virtual void Ogre::ParticleSystem::_notifyParticleResized */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyParticleRotated()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::_notifyParticleRotated
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyParticleRotated (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleRotated();
} /* virtual void Ogre::ParticleSystem::_notifyParticleRotated */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDefaultDimensions()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::setDefaultDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDefaultDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
)
{
   // parameter conversions 
  float _cpp_width = width;
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultDimensions(_cpp_width, _cpp_height);
} /* virtual void Ogre::ParticleSystem::setDefaultDimensions */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDefaultWidth()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::setDefaultWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDefaultWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
)
{
   // parameter conversions 
  float _cpp_width = width; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultWidth(_cpp_width);
} /* virtual void Ogre::ParticleSystem::setDefaultWidth */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getDefaultWidth()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleSystem::getDefaultWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getDefaultWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDefaultWidth() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleSystem::getDefaultWidth */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDefaultHeight()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::setDefaultHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDefaultHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
)
{
   // parameter conversions 
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultHeight(_cpp_height);
} /* virtual void Ogre::ParticleSystem::setDefaultHeight */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getDefaultHeight()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleSystem::getDefaultHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getDefaultHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDefaultHeight() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleSystem::getDefaultHeight */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getCullIndividually()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ParticleSystem::getCullIndividually
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1getCullIndividually_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCullIndividually() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ParticleSystem::getCullIndividually */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setCullIndividually()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystem::setCullIndividually
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setCullIndividually_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean cullIndividual
)
{
   // parameter conversions 
  bool _cpp_cullIndividual = cullIndividual ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCullIndividually(_cpp_cullIndividual);
} /* virtual void Ogre::ParticleSystem::setCullIndividually */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getResourceGroupName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::ParticleSystem::getResourceGroupName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystem__1getResourceGroupName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getResourceGroupName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::ParticleSystem::getResourceGroupName */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getOrigin()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ParticleSystem::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystem__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getOrigin() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ParticleSystem::getOrigin */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyOrigin()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
)
{
   // parameter conversions 
  std::string _cpp_origin = ""; org::xbig::jni::to_stdstring(_jni_env_, origin, _cpp_origin); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyOrigin(_cpp_origin);
} /* void Ogre::ParticleSystem::_notifyOrigin */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: void Ogre::ParticleSystem::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* void Ogre::ParticleSystem::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setSortingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setSortingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setSortingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSortingEnabled(_cpp_enabled);
} /* void Ogre::ParticleSystem::setSortingEnabled */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getSortingEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::ParticleSystem::getSortingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1getSortingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getSortingEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ParticleSystem::getSortingEnabled */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setBounds()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setBounds
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setBounds_1_1AxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aabb
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_aabb = reinterpret_cast< const Ogre::AxisAlignedBox* >(aabb); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBounds(*_cpp_aabb);
} /* void Ogre::ParticleSystem::setBounds */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setBoundsAutoUpdated()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setBoundsAutoUpdated
 * Signature:  (Zfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setBoundsAutoUpdated_1_1bvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoUpdate, 
  jfloat stopIn
)
{
   // parameter conversions 
  bool _cpp_autoUpdate = autoUpdate ? true : false;
  float _cpp_stopIn = stopIn; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBoundsAutoUpdated(_cpp_autoUpdate, _cpp_stopIn);
} /* void Ogre::ParticleSystem::setBoundsAutoUpdated */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setKeepParticlesInLocalSpace()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::setKeepParticlesInLocalSpace
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setKeepParticlesInLocalSpace_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean keepLocal
)
{
   // parameter conversions 
  bool _cpp_keepLocal = keepLocal ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setKeepParticlesInLocalSpace(_cpp_keepLocal);
} /* void Ogre::ParticleSystem::setKeepParticlesInLocalSpace */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getKeepParticlesInLocalSpace()
 * Type:       non-virtual method
 * Definition: bool Ogre::ParticleSystem::getKeepParticlesInLocalSpace
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1getKeepParticlesInLocalSpace_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getKeepParticlesInLocalSpace() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ParticleSystem::getKeepParticlesInLocalSpace */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _updateBounds()
 * Type:       non-virtual method
 * Definition: void Ogre::ParticleSystem::_updateBounds
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1updateBounds (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateBounds();
} /* void Ogre::ParticleSystem::_updateBounds */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getTypeFlags()
 * Type:       virtual method
 * Definition: uint32 Ogre::ParticleSystem::getTypeFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getTypeFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTypeFlags() ; 
   return _cpp_result;
} /* uint32 Ogre::ParticleSystem::getTypeFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDefaultIterationInterval()
 * Type:       static method
 * Definition: static void Ogre::ParticleSystem::setDefaultIterationInterval
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDefaultIterationInterval_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat iterationInterval
)
{
   // static method of class Ogre::ParticleSystem without return value 
   // parameter conversions 
  float _cpp_iterationInterval = iterationInterval; 
   
   // call library method 
   Ogre::ParticleSystem::setDefaultIterationInterval(_cpp_iterationInterval);
} /* static void Ogre::ParticleSystem::setDefaultIterationInterval */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getDefaultIterationInterval()
 * Type:       static method
 * Definition: static Real Ogre::ParticleSystem::getDefaultIterationInterval
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getDefaultIterationInterval (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ParticleSystem with return value 
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::ParticleSystem::getDefaultIterationInterval(); 
   return _cpp_result;
} /* static Real Ogre::ParticleSystem::getDefaultIterationInterval */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDefaultNonVisibleUpdateTimeout()
 * Type:       static method
 * Definition: static void Ogre::ParticleSystem::setDefaultNonVisibleUpdateTimeout
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDefaultNonVisibleUpdateTimeout_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat timeout
)
{
   // static method of class Ogre::ParticleSystem without return value 
   // parameter conversions 
  float _cpp_timeout = timeout; 
   
   // call library method 
   Ogre::ParticleSystem::setDefaultNonVisibleUpdateTimeout(_cpp_timeout);
} /* static void Ogre::ParticleSystem::setDefaultNonVisibleUpdateTimeout */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getDefaultNonVisibleUpdateTimeout()
 * Type:       static method
 * Definition: static Real Ogre::ParticleSystem::getDefaultNonVisibleUpdateTimeout
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getDefaultNonVisibleUpdateTimeout (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ParticleSystem with return value 
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::ParticleSystem::getDefaultNonVisibleUpdateTimeout(); 
   return _cpp_result;
} /* static Real Ogre::ParticleSystem::getDefaultNonVisibleUpdateTimeout */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystem__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ParticleSystem without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::ParticleSystem::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyCreator()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCreator
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyCreator_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCreator(_cpp_fact);
} /* virtual void Ogre::MovableObject::_notifyCreator */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _getCreator()
 * Type:       virtual method
 * Definition: virtual MovableObjectFactory* Ogre::MovableObject::_getCreator
 * Signature:  ()Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1_1getCreator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->_getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectFactory* Ogre::MovableObject::_getCreator */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_man = reinterpret_cast< Ogre::SceneManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyManager(_cpp_man);
} /* virtual void Ogre::MovableObject::_notifyManager */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _getManager()
 * Type:       virtual method
 * Definition: virtual SceneManager* Ogre::MovableObject::_getManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1_1getManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneManager* Ogre::MovableObject::_getManager */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::MovableObject::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystem__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::MovableObject::getName */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParentNode()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::MovableObject::getParentNode
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getParentNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParentNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::MovableObject::getParentNode */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getParentSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::MovableObject::getParentSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getParentSceneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getParentSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::MovableObject::getParentSceneNode */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     isAttached()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isAttached
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1isAttached_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAttached() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isAttached */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     detatchFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::detatchFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1detatchFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detatchFromParent();
} /* virtual void Ogre::MovableObject::detatchFromParent */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     isInScene()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isInScene
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1isInScene_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInScene() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isInScene */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _notifyMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyMoved
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1notifyMoved (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyMoved();
} /* virtual void Ogre::MovableObject::_notifyMoved */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getWorldBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox
 * Signature:  (Z)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getWorldBoundingBox_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getWorldBoundingBox(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getWorldBoundingSphere()
 * Type:       virtual method
 * Definition: virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere
 * Signature:  (Z)Ogre_Sphere
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getWorldBoundingSphere_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Sphere* _cpp_result = & _cpp_this->getWorldBoundingSphere(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* virtual void Ogre::MovableObject::setVisible */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::getVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1getVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::getVisible */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isVisible */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::MovableObject::setRenderingDistance */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::MovableObject::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::MovableObject::getRenderingDistance */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setUserObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserObject
 * Signature:  (Ogre_UserDefinedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setUserObject_1_1UserDefinedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::UserDefinedObject* _cpp_obj = reinterpret_cast< Ogre::UserDefinedObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserObject(_cpp_obj);
} /* virtual void Ogre::MovableObject::setUserObject */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getUserObject()
 * Type:       virtual method
 * Definition: virtual UserDefinedObject* Ogre::MovableObject::getUserObject
 * Signature:  ()Ogre_UserDefinedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getUserObject (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UserDefinedObject* _cpp_result = _cpp_this->getUserObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual UserDefinedObject* Ogre::MovableObject::getUserObject */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::MovableObject::setUserAny */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::MovableObject::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::MovableObject::getUserAny */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::MovableObject::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_ParticleSystem__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::MovableObject::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _getParentNodeFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1_1getParentNodeFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getParentNodeFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setQueryFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     addQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1addQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addQueryFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     removeQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeQueryFlags
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1removeQueryFlags_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeQueryFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getQueryFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getQueryFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getQueryFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setVisibilityFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     addVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1addVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addVisibilityFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     removeVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1removeVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeVisibilityFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getVisibilityFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getVisibilityFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setListener
 * Signature:  (Ogre_MovableObject_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MovableObject::Listener* _cpp_listener = reinterpret_cast< Ogre::MovableObject::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::MovableObject::setListener */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::MovableObject::getListener
 * Signature:  ()Ogre_MovableObject_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::MovableObject::getListener */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     queryLights()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::MovableObject::queryLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1queryLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->queryLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::MovableObject::queryLights */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     _getLightList()
 * Type:       virtual method
 * Definition: virtual LightList* Ogre::MovableObject::_getLightList
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1_1getLightList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->_getLightList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual LightList* Ogre::MovableObject::_getLightList */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getEdgeList()
 * Type:       virtual method
 * Definition: EdgeData* Ogre::MovableObject::getEdgeList
 * Signature:  ()Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::MovableObject::getEdgeList */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     hasEdgeList()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::hasEdgeList
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1hasEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEdgeList() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::hasEdgeList */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getShadowVolumeRenderableIterator()
 * Type:       virtual method
 * Definition: ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator
 * Signature:  (Ogre_ShadowTechniqueOgre_LightOgre_HardwareIndexBufferSharedPtrZfloatJ)Ogre_ShadowCaster_ShadowRenderableListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getShadowVolumeRenderableIterator_1_1ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowTechnique, 
  jlong light, 
  jlong indexBuffer, 
  jboolean extrudeVertices, 
  jfloat extrusionDist, 
  jlong flags
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_shadowTechnique = (Ogre::ShadowTechnique)shadowTechnique;
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  bool _cpp_extrudeVertices = extrudeVertices ? true : false;
  float _cpp_extrusionDist = extrusionDist;
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCaster::ShadowRenderableListIterator* _cpp_result = new Ogre::ShadowCaster::ShadowRenderableListIterator( _cpp_this->getShadowVolumeRenderableIterator(_cpp_shadowTechnique, _cpp_light, _cpp_indexBuffer, _cpp_extrudeVertices, _cpp_extrusionDist, _cpp_flags) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getLightCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getLightCapBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getLightCapBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getDarkCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds
 * Signature:  (Ogre_Lightfloat)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getDarkCapBounds_1_1LightRRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jfloat dirLightExtrusionDist
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  float _cpp_dirLightExtrusionDist = dirLightExtrusionDist; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getDarkCapBounds(*_cpp_light, _cpp_dirLightExtrusionDist) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setCastShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::MovableObject::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_enabled);
} /* void Ogre::MovableObject::setCastShadows */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1getCastShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::getCastShadows */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getPointExtrusionDistance()
 * Type:       virtual method
 * Definition: Real Ogre::MovableObject::getPointExtrusionDistance
 * Signature:  (Ogre_Light)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleSystem__1getPointExtrusionDistance_1_1LightP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_l = reinterpret_cast< const Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointExtrusionDistance(_cpp_l) ; 
   return _cpp_result;
} /* Real Ogre::MovableObject::getPointExtrusionDistance */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setDebugDisplayEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDebugDisplayEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugDisplayEnabled(_cpp_enabled);
} /* virtual void Ogre::MovableObject::setDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     isDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isDebugDisplayEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystem__1isDebugDisplayEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugDisplayEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDefaultQueryFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDefaultQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::ParticleSystem without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::ParticleSystem::setDefaultQueryFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultQueryFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getDefaultQueryFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getDefaultQueryFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ParticleSystem with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::ParticleSystem::getDefaultQueryFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultQueryFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     setDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1setDefaultVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::ParticleSystem without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::ParticleSystem::setDefaultVisibilityFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getDefaultVisibilityFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ParticleSystem with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::ParticleSystem::getDefaultVisibilityFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     extrudeVertices()
 * Type:       static method
 * Definition: static void Ogre::ShadowCaster::extrudeVertices
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrIOgre_Vector4float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1extrudeVertices_1_1HardwareVertexBufferSharedPtrRivVector4RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexBuffer, 
  jint originalVertexCount, 
  jlong lightPos, 
  jfloat extrudeDist
)
{
   // static method of class Ogre::ParticleSystem without return value 
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_vertexBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(vertexBuffer);
  size_t _cpp_originalVertexCount = originalVertexCount;
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist; 
   
   // call library method 
   Ogre::ParticleSystem::extrudeVertices(*_cpp_vertexBuffer, _cpp_originalVertexCount, *_cpp_lightPos, _cpp_extrudeDist);
} /* static void Ogre::ShadowCaster::extrudeVertices */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     getAnimableValueNames()
 * Type:       non-virtual method
 * Definition: const StringVector& Ogre::AnimableObject::getAnimableValueNames
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1getAnimableValueNames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystem* _cpp_this = reinterpret_cast<const Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getAnimableValueNames() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::AnimableObject::getAnimableValueNames */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     createAnimableValue()
 * Type:       virtual method
 * Definition: virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue
 * Signature:  (std_string)Ogre_AnimableValuePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystem__1createAnimableValue_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring valueName
)
{
   // parameter conversions 
  std::string _cpp_valueName = ""; org::xbig::jni::to_stdstring(_jni_env_, valueName, _cpp_valueName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimableValuePtr* _cpp_result = new Ogre::AnimableValuePtr( _cpp_this->createAnimableValue(_cpp_valueName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue */


/*
 * Class:      org.ogre4j.ParticleSystem
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ParticleSystem::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystem__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ParticleSystem 
   // cast pointer to C++ object 
   Ogre::ParticleSystem* _cpp_this = reinterpret_cast<Ogre::ParticleSystem*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ParticleSystem::__delete */
