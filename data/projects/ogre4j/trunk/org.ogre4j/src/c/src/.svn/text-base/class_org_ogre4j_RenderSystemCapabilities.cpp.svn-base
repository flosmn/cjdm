///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderSystemCapabilities.h"

// import header files of original library
#include <OgreRenderSystemCapabilities.h>



/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     RenderSystemCapabilities()
 * Type:       constructor
 * Definition: Ogre::RenderSystemCapabilities::RenderSystemCapabilities
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystemCapabilities__1_1createRenderSystemCapabilities (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::RenderSystemCapabilities 
   
   // parameter conversions 
   
   // create new instance of class Ogre::RenderSystemCapabilities 
   Ogre::RenderSystemCapabilities* _cpp_this = new Ogre::RenderSystemCapabilities(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RenderSystemCapabilities::RenderSystemCapabilities */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     calculateSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::RenderSystemCapabilities::calculateSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1calculateSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->calculateSize() ; 
   return _cpp_result;
} /* virtual size_t Ogre::RenderSystemCapabilities::calculateSize */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setDriverVersion()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setDriverVersion
 * Signature:  (Ogre_DriverVersion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setDriverVersion_1_1DriverVersionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong version
)
{
   // parameter conversions 
  const Ogre::DriverVersion* _cpp_version = reinterpret_cast< const Ogre::DriverVersion* >(version); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDriverVersion(*_cpp_version);
} /* void Ogre::RenderSystemCapabilities::setDriverVersion */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     parseDriverVersionFromString()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::parseDriverVersionFromString
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1parseDriverVersionFromString_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring versionString
)
{
   // parameter conversions 
  std::string _cpp_versionString = ""; org::xbig::jni::to_stdstring(_jni_env_, versionString, _cpp_versionString); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parseDriverVersionFromString(_cpp_versionString);
} /* void Ogre::RenderSystemCapabilities::parseDriverVersionFromString */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getDriverVersion()
 * Type:       non-virtual method
 * Definition: DriverVersion Ogre::RenderSystemCapabilities::getDriverVersion
 * Signature:  ()Ogre_DriverVersion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getDriverVersion_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::DriverVersion* _cpp_result = new Ogre::DriverVersion( _cpp_this->getDriverVersion() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* DriverVersion Ogre::RenderSystemCapabilities::getDriverVersion */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getVendor()
 * Type:       non-virtual method
 * Definition: GPUVendor Ogre::RenderSystemCapabilities::getVendor
 * Signature:  ()Ogre_GPUVendor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getVendor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GPUVendor _cpp_result = _cpp_this->getVendor() ; 
   return _cpp_result;
} /* GPUVendor Ogre::RenderSystemCapabilities::getVendor */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setVendor()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setVendor
 * Signature:  (Ogre_GPUVendor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setVendor_1_1GPUVendorv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint v
)
{
   // parameter conversions 
  Ogre::GPUVendor _cpp_v = (Ogre::GPUVendor)v; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVendor(_cpp_v);
} /* void Ogre::RenderSystemCapabilities::setVendor */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     parseVendorFromString()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::parseVendorFromString
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1parseVendorFromString_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring vendorString
)
{
   // parameter conversions 
  std::string _cpp_vendorString = ""; org::xbig::jni::to_stdstring(_jni_env_, vendorString, _cpp_vendorString); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parseVendorFromString(_cpp_vendorString);
} /* void Ogre::RenderSystemCapabilities::parseVendorFromString */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     isDriverOlderThanVersion()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystemCapabilities::isDriverOlderThanVersion
 * Signature:  (Ogre_DriverVersion)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystemCapabilities__1isDriverOlderThanVersion_1_1DriverVersionv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  Ogre::DriverVersion* _cpp_v = reinterpret_cast< Ogre::DriverVersion* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDriverOlderThanVersion(*_cpp_v) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystemCapabilities::isDriverOlderThanVersion */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setNumWorldMatrices()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setNumWorldMatrices
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setNumWorldMatrices_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint num
)
{
   // parameter conversions 
  unsigned short _cpp_num = num; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNumWorldMatrices(_cpp_num);
} /* void Ogre::RenderSystemCapabilities::setNumWorldMatrices */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setNumTextureUnits()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setNumTextureUnits
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setNumTextureUnits_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint num
)
{
   // parameter conversions 
  unsigned short _cpp_num = num; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNumTextureUnits(_cpp_num);
} /* void Ogre::RenderSystemCapabilities::setNumTextureUnits */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setStencilBufferBitDepth()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setStencilBufferBitDepth
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setStencilBufferBitDepth_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint num
)
{
   // parameter conversions 
  unsigned short _cpp_num = num; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setStencilBufferBitDepth(_cpp_num);
} /* void Ogre::RenderSystemCapabilities::setStencilBufferBitDepth */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setNumVertexBlendMatrices()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setNumVertexBlendMatrices
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setNumVertexBlendMatrices_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint num
)
{
   // parameter conversions 
  unsigned short _cpp_num = num; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNumVertexBlendMatrices(_cpp_num);
} /* void Ogre::RenderSystemCapabilities::setNumVertexBlendMatrices */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setNumMultiRenderTargets()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setNumMultiRenderTargets
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setNumMultiRenderTargets_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint num
)
{
   // parameter conversions 
  unsigned short _cpp_num = num; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNumMultiRenderTargets(_cpp_num);
} /* void Ogre::RenderSystemCapabilities::setNumMultiRenderTargets */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getNumWorldMatrices()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getNumWorldMatrices
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getNumWorldMatrices_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumWorldMatrices() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getNumWorldMatrices */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getNumTextureUnits()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getNumTextureUnits
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getNumTextureUnits_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumTextureUnits() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getNumTextureUnits */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getStencilBufferBitDepth()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getStencilBufferBitDepth
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getStencilBufferBitDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getStencilBufferBitDepth() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getStencilBufferBitDepth */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getNumVertexBlendMatrices()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getNumVertexBlendMatrices
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getNumVertexBlendMatrices_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumVertexBlendMatrices() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getNumVertexBlendMatrices */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getNumMultiRenderTargets()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getNumMultiRenderTargets
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getNumMultiRenderTargets_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumMultiRenderTargets() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getNumMultiRenderTargets */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     isCapabilityRenderSystemSpecific()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystemCapabilities::isCapabilityRenderSystemSpecific
 * Signature:  (Ogre_Capabilities)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystemCapabilities__1isCapabilityRenderSystemSpecific_1_1CapabilitiesV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  const Ogre::Capabilities _cpp_c = (Ogre::Capabilities)c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCapabilityRenderSystemSpecific(_cpp_c) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystemCapabilities::isCapabilityRenderSystemSpecific */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setCapability()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setCapability
 * Signature:  (Ogre_Capabilities)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setCapability_1_1CapabilitiesV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  const Ogre::Capabilities _cpp_c = (Ogre::Capabilities)c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCapability(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setCapability */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     unsetCapability()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::unsetCapability
 * Signature:  (Ogre_Capabilities)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1unsetCapability_1_1CapabilitiesV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  const Ogre::Capabilities _cpp_c = (Ogre::Capabilities)c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unsetCapability(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::unsetCapability */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     hasCapability()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystemCapabilities::hasCapability
 * Signature:  (Ogre_Capabilities)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystemCapabilities__1hasCapability_1_1CapabilitiesV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  const Ogre::Capabilities _cpp_c = (Ogre::Capabilities)c; 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasCapability(_cpp_c) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystemCapabilities::hasCapability */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     addShaderProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::addShaderProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1addShaderProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profile
)
{
   // parameter conversions 
  std::string _cpp_profile = ""; org::xbig::jni::to_stdstring(_jni_env_, profile, _cpp_profile); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addShaderProfile(_cpp_profile);
} /* void Ogre::RenderSystemCapabilities::addShaderProfile */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     removeShaderProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::removeShaderProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1removeShaderProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profile
)
{
   // parameter conversions 
  std::string _cpp_profile = ""; org::xbig::jni::to_stdstring(_jni_env_, profile, _cpp_profile); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeShaderProfile(_cpp_profile);
} /* void Ogre::RenderSystemCapabilities::removeShaderProfile */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     isShaderProfileSupported()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystemCapabilities::isShaderProfileSupported
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystemCapabilities__1isShaderProfileSupported_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profile
)
{
   // parameter conversions 
  std::string _cpp_profile = ""; org::xbig::jni::to_stdstring(_jni_env_, profile, _cpp_profile); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isShaderProfileSupported(_cpp_profile) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystemCapabilities::isShaderProfileSupported */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getSupportedShaderProfiles()
 * Type:       non-virtual method
 * Definition: const ShaderProfiles& Ogre::RenderSystemCapabilities::getSupportedShaderProfiles
 * Signature:  ()Ogre_RenderSystemCapabilities_ShaderProfiles
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getSupportedShaderProfiles_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderSystemCapabilities::ShaderProfiles* _cpp_result = & _cpp_this->getSupportedShaderProfiles() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ShaderProfiles& Ogre::RenderSystemCapabilities::getSupportedShaderProfiles */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getVertexProgramConstantFloatCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getVertexProgramConstantFloatCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getVertexProgramConstantFloatCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getVertexProgramConstantFloatCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getVertexProgramConstantFloatCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getVertexProgramConstantIntCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getVertexProgramConstantIntCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getVertexProgramConstantIntCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getVertexProgramConstantIntCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getVertexProgramConstantIntCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getVertexProgramConstantBoolCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getVertexProgramConstantBoolCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getVertexProgramConstantBoolCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getVertexProgramConstantBoolCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getVertexProgramConstantBoolCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getGeometryProgramConstantFloatCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getGeometryProgramConstantFloatCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getGeometryProgramConstantFloatCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getGeometryProgramConstantFloatCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getGeometryProgramConstantFloatCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getGeometryProgramConstantIntCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getGeometryProgramConstantIntCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getGeometryProgramConstantIntCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getGeometryProgramConstantIntCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getGeometryProgramConstantIntCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getGeometryProgramConstantBoolCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getGeometryProgramConstantBoolCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getGeometryProgramConstantBoolCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getGeometryProgramConstantBoolCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getGeometryProgramConstantBoolCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getFragmentProgramConstantFloatCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getFragmentProgramConstantFloatCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getFragmentProgramConstantFloatCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getFragmentProgramConstantFloatCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getFragmentProgramConstantFloatCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getFragmentProgramConstantIntCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getFragmentProgramConstantIntCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getFragmentProgramConstantIntCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getFragmentProgramConstantIntCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getFragmentProgramConstantIntCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getFragmentProgramConstantBoolCount()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getFragmentProgramConstantBoolCount
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getFragmentProgramConstantBoolCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getFragmentProgramConstantBoolCount() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getFragmentProgramConstantBoolCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setDeviceName()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setDeviceName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setDeviceName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDeviceName(_cpp_name);
} /* void Ogre::RenderSystemCapabilities::setDeviceName */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getDeviceName()
 * Type:       non-virtual method
 * Definition: String Ogre::RenderSystemCapabilities::getDeviceName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getDeviceName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getDeviceName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::RenderSystemCapabilities::getDeviceName */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setVertexProgramConstantFloatCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setVertexProgramConstantFloatCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setVertexProgramConstantFloatCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexProgramConstantFloatCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setVertexProgramConstantFloatCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setVertexProgramConstantIntCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setVertexProgramConstantIntCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setVertexProgramConstantIntCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexProgramConstantIntCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setVertexProgramConstantIntCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setVertexProgramConstantBoolCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setVertexProgramConstantBoolCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setVertexProgramConstantBoolCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexProgramConstantBoolCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setVertexProgramConstantBoolCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setGeometryProgramConstantFloatCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setGeometryProgramConstantFloatCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setGeometryProgramConstantFloatCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setGeometryProgramConstantFloatCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setGeometryProgramConstantFloatCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setGeometryProgramConstantIntCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setGeometryProgramConstantIntCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setGeometryProgramConstantIntCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setGeometryProgramConstantIntCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setGeometryProgramConstantIntCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setGeometryProgramConstantBoolCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setGeometryProgramConstantBoolCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setGeometryProgramConstantBoolCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setGeometryProgramConstantBoolCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setGeometryProgramConstantBoolCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setFragmentProgramConstantFloatCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setFragmentProgramConstantFloatCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setFragmentProgramConstantFloatCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFragmentProgramConstantFloatCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setFragmentProgramConstantFloatCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setFragmentProgramConstantIntCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setFragmentProgramConstantIntCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setFragmentProgramConstantIntCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFragmentProgramConstantIntCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setFragmentProgramConstantIntCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setFragmentProgramConstantBoolCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setFragmentProgramConstantBoolCount
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setFragmentProgramConstantBoolCount_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFragmentProgramConstantBoolCount(_cpp_c);
} /* void Ogre::RenderSystemCapabilities::setFragmentProgramConstantBoolCount */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setMaxPointSize()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setMaxPointSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setMaxPointSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat s
)
{
   // parameter conversions 
  float _cpp_s = s; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaxPointSize(_cpp_s);
} /* void Ogre::RenderSystemCapabilities::setMaxPointSize */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getMaxPointSize()
 * Type:       non-virtual method
 * Definition: Real Ogre::RenderSystemCapabilities::getMaxPointSize
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getMaxPointSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMaxPointSize() ; 
   return _cpp_result;
} /* Real Ogre::RenderSystemCapabilities::getMaxPointSize */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setNonPOW2TexturesLimited()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setNonPOW2TexturesLimited
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setNonPOW2TexturesLimited_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean l
)
{
   // parameter conversions 
  bool _cpp_l = l ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNonPOW2TexturesLimited(_cpp_l);
} /* void Ogre::RenderSystemCapabilities::setNonPOW2TexturesLimited */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getNonPOW2TexturesLimited()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystemCapabilities::getNonPOW2TexturesLimited
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getNonPOW2TexturesLimited_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getNonPOW2TexturesLimited() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystemCapabilities::getNonPOW2TexturesLimited */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setNumVertexTextureUnits()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setNumVertexTextureUnits
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setNumVertexTextureUnits_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint n
)
{
   // parameter conversions 
  unsigned short _cpp_n = n; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNumVertexTextureUnits(_cpp_n);
} /* void Ogre::RenderSystemCapabilities::setNumVertexTextureUnits */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getNumVertexTextureUnits()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderSystemCapabilities::getNumVertexTextureUnits
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getNumVertexTextureUnits_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumVertexTextureUnits() ; 
   return _cpp_result;
} /* ushort Ogre::RenderSystemCapabilities::getNumVertexTextureUnits */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setVertexTextureUnitsShared()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setVertexTextureUnitsShared
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setVertexTextureUnitsShared_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean shared
)
{
   // parameter conversions 
  bool _cpp_shared = shared ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexTextureUnitsShared(_cpp_shared);
} /* void Ogre::RenderSystemCapabilities::setVertexTextureUnitsShared */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getVertexTextureUnitsShared()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystemCapabilities::getVertexTextureUnitsShared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getVertexTextureUnitsShared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVertexTextureUnitsShared() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystemCapabilities::getVertexTextureUnitsShared */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setGeometryProgramNumOutputVertices()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setGeometryProgramNumOutputVertices
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setGeometryProgramNumOutputVertices_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numOutputVertices
)
{
   // parameter conversions 
  int _cpp_numOutputVertices = numOutputVertices; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setGeometryProgramNumOutputVertices(_cpp_numOutputVertices);
} /* void Ogre::RenderSystemCapabilities::setGeometryProgramNumOutputVertices */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getGeometryProgramNumOutputVertices()
 * Type:       non-virtual method
 * Definition: int Ogre::RenderSystemCapabilities::getGeometryProgramNumOutputVertices
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getGeometryProgramNumOutputVertices_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getGeometryProgramNumOutputVertices() ; 
   return _cpp_result;
} /* int Ogre::RenderSystemCapabilities::getGeometryProgramNumOutputVertices */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     getRenderSystemName()
 * Type:       non-virtual method
 * Definition: String Ogre::RenderSystemCapabilities::getRenderSystemName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystemCapabilities__1getRenderSystemName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<const Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getRenderSystemName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::RenderSystemCapabilities::getRenderSystemName */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setRenderSystemName()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setRenderSystemName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setRenderSystemName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring rs
)
{
   // parameter conversions 
  std::string _cpp_rs = ""; org::xbig::jni::to_stdstring(_jni_env_, rs, _cpp_rs); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderSystemName(_cpp_rs);
} /* void Ogre::RenderSystemCapabilities::setRenderSystemName */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     setCategoryRelevant()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::setCategoryRelevant
 * Signature:  (Ogre_CapabilitiesCategoryZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1setCategoryRelevant_1_1CapabilitiesCategoryvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint cat, 
  jboolean relevant
)
{
   // parameter conversions 
  Ogre::CapabilitiesCategory _cpp_cat = (Ogre::CapabilitiesCategory)cat;
  bool _cpp_relevant = relevant ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCategoryRelevant(_cpp_cat, _cpp_relevant);
} /* void Ogre::RenderSystemCapabilities::setCategoryRelevant */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     isCategoryRelevant()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystemCapabilities::isCategoryRelevant
 * Signature:  (Ogre_CapabilitiesCategory)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystemCapabilities__1isCategoryRelevant_1_1CapabilitiesCategoryv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint cat
)
{
   // parameter conversions 
  Ogre::CapabilitiesCategory _cpp_cat = (Ogre::CapabilitiesCategory)cat; 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCategoryRelevant(_cpp_cat) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderSystemCapabilities::isCategoryRelevant */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     log()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystemCapabilities::log
 * Signature:  (Ogre_Log)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1log_1_1Logp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pLog
)
{
   // parameter conversions 
  Ogre::Log* _cpp_pLog = reinterpret_cast< Ogre::Log* >(pLog); 
   
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->log(_cpp_pLog);
} /* void Ogre::RenderSystemCapabilities::log */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     vendorFromString()
 * Type:       static method
 * Definition: static GPUVendor Ogre::RenderSystemCapabilities::vendorFromString
 * Signature:  (std_string)Ogre_GPUVendor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystemCapabilities__1vendorFromString_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring vendorString
)
{
   // static method of class Ogre::RenderSystemCapabilities with return value 
   // parameter conversions 
  std::string _cpp_vendorString = ""; org::xbig::jni::to_stdstring(_jni_env_, vendorString, _cpp_vendorString); // calls c-tor only. Not operator= .; 
   
   // call library method 
   const Ogre::GPUVendor _cpp_result = Ogre::RenderSystemCapabilities::vendorFromString(_cpp_vendorString); 
   return _cpp_result;
} /* static GPUVendor Ogre::RenderSystemCapabilities::vendorFromString */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     vendorToString()
 * Type:       static method
 * Definition: static String Ogre::RenderSystemCapabilities::vendorToString
 * Signature:  (Ogre_GPUVendor)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystemCapabilities__1vendorToString_1_1GPUVendorv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint v
)
{
   // static method of class Ogre::RenderSystemCapabilities with return value 
   // parameter conversions 
  Ogre::GPUVendor _cpp_v = (Ogre::GPUVendor)v; 
   
   // call library method 
   const std::string _cpp_result = Ogre::RenderSystemCapabilities::vendorToString(_cpp_v); 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* static String Ogre::RenderSystemCapabilities::vendorToString */


/*
 * Class:      org.ogre4j.RenderSystemCapabilities
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderSystemCapabilities::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystemCapabilities__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderSystemCapabilities 
   // cast pointer to C++ object 
   Ogre::RenderSystemCapabilities* _cpp_this = reinterpret_cast<Ogre::RenderSystemCapabilities*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderSystemCapabilities::__delete */
