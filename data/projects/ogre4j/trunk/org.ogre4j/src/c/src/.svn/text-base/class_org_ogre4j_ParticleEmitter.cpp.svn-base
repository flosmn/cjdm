///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ParticleEmitter.h"

// import header files of original library
#include <OgreParticleEmitter.h>



/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setPosition()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setPosition_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pos
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_pos = reinterpret_cast< const Ogre::Vector3* >(pos); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPosition(*_cpp_pos);
} /* virtual void Ogre::ParticleEmitter::setPosition */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::ParticleEmitter::getPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::ParticleEmitter::getPosition */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setDirection()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setDirection
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setDirection_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong direction
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_direction = reinterpret_cast< const Ogre::Vector3* >(direction); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDirection(*_cpp_direction);
} /* virtual void Ogre::ParticleEmitter::setDirection */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getDirection()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::ParticleEmitter::getDirection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getDirection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getDirection() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::ParticleEmitter::getDirection */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setAngle()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setAngle
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setAngle_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAngle(*_cpp_angle);
} /* virtual void Ogre::ParticleEmitter::setAngle */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getAngle()
 * Type:       virtual method
 * Definition: virtual const Radian& Ogre::ParticleEmitter::getAngle
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getAngle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->getAngle() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Radian& Ogre::ParticleEmitter::getAngle */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setParticleVelocity()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setParticleVelocity
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setParticleVelocity_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat speed
)
{
   // parameter conversions 
  float _cpp_speed = speed; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParticleVelocity(_cpp_speed);
} /* virtual void Ogre::ParticleEmitter::setParticleVelocity */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setParticleVelocity()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setParticleVelocity
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setParticleVelocity_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min, 
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__min = _min;
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParticleVelocity(_cpp__min, _cpp__max);
} /* virtual void Ogre::ParticleEmitter::setParticleVelocity */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMinParticleVelocity()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMinParticleVelocity
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMinParticleVelocity_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min
)
{
   // parameter conversions 
  float _cpp__min = _min; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinParticleVelocity(_cpp__min);
} /* virtual void Ogre::ParticleEmitter::setMinParticleVelocity */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMaxParticleVelocity()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMaxParticleVelocity
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMaxParticleVelocity_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaxParticleVelocity(_cpp__max);
} /* virtual void Ogre::ParticleEmitter::setMaxParticleVelocity */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getParticleVelocity()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getParticleVelocity
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getParticleVelocity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getParticleVelocity() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getParticleVelocity */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMinParticleVelocity()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMinParticleVelocity
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMinParticleVelocity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMinParticleVelocity() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMinParticleVelocity */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMaxParticleVelocity()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMaxParticleVelocity
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMaxParticleVelocity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMaxParticleVelocity() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMaxParticleVelocity */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setEmissionRate()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setEmissionRate
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setEmissionRate_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat particlesPerSecond
)
{
   // parameter conversions 
  float _cpp_particlesPerSecond = particlesPerSecond; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEmissionRate(_cpp_particlesPerSecond);
} /* virtual void Ogre::ParticleEmitter::setEmissionRate */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getEmissionRate()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getEmissionRate
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getEmissionRate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getEmissionRate() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getEmissionRate */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setTimeToLive()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setTimeToLive
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setTimeToLive_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat ttl
)
{
   // parameter conversions 
  float _cpp_ttl = ttl; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTimeToLive(_cpp_ttl);
} /* virtual void Ogre::ParticleEmitter::setTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setTimeToLive()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setTimeToLive
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setTimeToLive_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat minTtl, 
  jfloat maxTtl
)
{
   // parameter conversions 
  float _cpp_minTtl = minTtl;
  float _cpp_maxTtl = maxTtl; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTimeToLive(_cpp_minTtl, _cpp_maxTtl);
} /* virtual void Ogre::ParticleEmitter::setTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMinTimeToLive()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMinTimeToLive
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMinTimeToLive_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min
)
{
   // parameter conversions 
  float _cpp__min = _min; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinTimeToLive(_cpp__min);
} /* virtual void Ogre::ParticleEmitter::setMinTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMaxTimeToLive()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMaxTimeToLive
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMaxTimeToLive_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaxTimeToLive(_cpp__max);
} /* virtual void Ogre::ParticleEmitter::setMaxTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getTimeToLive()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getTimeToLive
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getTimeToLive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTimeToLive() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMinTimeToLive()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMinTimeToLive
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMinTimeToLive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMinTimeToLive() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMinTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMaxTimeToLive()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMaxTimeToLive
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMaxTimeToLive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMaxTimeToLive() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMaxTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setColour()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColour(*_cpp_colour);
} /* virtual void Ogre::ParticleEmitter::setColour */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setColour()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setColour
 * Signature:  (Ogre_ColourValueOgre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setColour_1_1ColourValueRColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colourStart, 
  jlong colourEnd
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colourStart = reinterpret_cast< const Ogre::ColourValue* >(colourStart);
  const Ogre::ColourValue* _cpp_colourEnd = reinterpret_cast< const Ogre::ColourValue* >(colourEnd); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColour(*_cpp_colourStart, *_cpp_colourEnd);
} /* virtual void Ogre::ParticleEmitter::setColour */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setColourRangeStart()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setColourRangeStart
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setColourRangeStart_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourRangeStart(*_cpp_colour);
} /* virtual void Ogre::ParticleEmitter::setColourRangeStart */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setColourRangeEnd()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setColourRangeEnd
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setColourRangeEnd_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourRangeEnd(*_cpp_colour);
} /* virtual void Ogre::ParticleEmitter::setColourRangeEnd */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::ParticleEmitter::getColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::ParticleEmitter::getColour */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getColourRangeStart()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::ParticleEmitter::getColourRangeStart
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getColourRangeStart_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getColourRangeStart() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::ParticleEmitter::getColourRangeStart */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getColourRangeEnd()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::ParticleEmitter::getColourRangeEnd
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getColourRangeEnd_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getColourRangeEnd() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::ParticleEmitter::getColourRangeEnd */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     _getEmissionCount()
 * Type:       pure virtual method
 * Definition: virtual unsigned short Ogre::ParticleEmitter::_getEmissionCount
 * Signature:  (float)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleEmitter__1_1getEmissionCount_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat timeElapsed
)
{
   // parameter conversions 
  float _cpp_timeElapsed = timeElapsed; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->_getEmissionCount(_cpp_timeElapsed) ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::ParticleEmitter::_getEmissionCount */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     _initParticle()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::_initParticle
 * Signature:  (Ogre_Particle)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1_1initParticle_1_1Particlep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pParticle
)
{
   // parameter conversions 
  Ogre::Particle* _cpp_pParticle = reinterpret_cast< Ogre::Particle* >(pParticle); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_initParticle(_cpp_pParticle);
} /* virtual void Ogre::ParticleEmitter::_initParticle */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getType()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ParticleEmitter::getType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleEmitter__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ParticleEmitter::getType */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEnabled(_cpp_enabled);
} /* virtual void Ogre::ParticleEmitter::setEnabled */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ParticleEmitter::getEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleEmitter__1getEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ParticleEmitter::getEnabled */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setStartTime()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setStartTime
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setStartTime_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat startTime
)
{
   // parameter conversions 
  float _cpp_startTime = startTime; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setStartTime(_cpp_startTime);
} /* virtual void Ogre::ParticleEmitter::setStartTime */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getStartTime()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getStartTime
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getStartTime_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getStartTime() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getStartTime */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setDuration()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setDuration
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setDuration_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat duration
)
{
   // parameter conversions 
  float _cpp_duration = duration; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDuration(_cpp_duration);
} /* virtual void Ogre::ParticleEmitter::setDuration */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getDuration()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getDuration
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getDuration_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDuration() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getDuration */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setDuration()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setDuration
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setDuration_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min, 
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__min = _min;
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDuration(_cpp__min, _cpp__max);
} /* virtual void Ogre::ParticleEmitter::setDuration */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMinDuration()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMinDuration
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMinDuration_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min
)
{
   // parameter conversions 
  float _cpp__min = _min; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinDuration(_cpp__min);
} /* virtual void Ogre::ParticleEmitter::setMinDuration */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMaxDuration()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMaxDuration
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMaxDuration_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaxDuration(_cpp__max);
} /* virtual void Ogre::ParticleEmitter::setMaxDuration */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMinDuration()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMinDuration
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMinDuration_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMinDuration() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMinDuration */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMaxDuration()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMaxDuration
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMaxDuration_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMaxDuration() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMaxDuration */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setRepeatDelay()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setRepeatDelay
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setRepeatDelay_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat duration
)
{
   // parameter conversions 
  float _cpp_duration = duration; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRepeatDelay(_cpp_duration);
} /* virtual void Ogre::ParticleEmitter::setRepeatDelay */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getRepeatDelay()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getRepeatDelay
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getRepeatDelay_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRepeatDelay() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getRepeatDelay */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setRepeatDelay()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setRepeatDelay
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setRepeatDelay_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min, 
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__min = _min;
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRepeatDelay(_cpp__min, _cpp__max);
} /* virtual void Ogre::ParticleEmitter::setRepeatDelay */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMinRepeatDelay()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMinRepeatDelay
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMinRepeatDelay_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min
)
{
   // parameter conversions 
  float _cpp__min = _min; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMinRepeatDelay(_cpp__min);
} /* virtual void Ogre::ParticleEmitter::setMinRepeatDelay */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setMaxRepeatDelay()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setMaxRepeatDelay
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setMaxRepeatDelay_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaxRepeatDelay(_cpp__max);
} /* virtual void Ogre::ParticleEmitter::setMaxRepeatDelay */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMinRepeatDelay()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMinRepeatDelay
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMinRepeatDelay_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMinRepeatDelay() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMinRepeatDelay */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getMaxRepeatDelay()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ParticleEmitter::getMaxRepeatDelay
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getMaxRepeatDelay_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getMaxRepeatDelay() ; 
   return _cpp_result;
} /* virtual Real Ogre::ParticleEmitter::getMaxRepeatDelay */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ParticleEmitter::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleEmitter__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ParticleEmitter::getName */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setName()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newName
)
{
   // parameter conversions 
  std::string _cpp_newName = ""; org::xbig::jni::to_stdstring(_jni_env_, newName, _cpp_newName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setName(_cpp_newName);
} /* virtual void Ogre::ParticleEmitter::setName */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getEmittedEmitter()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ParticleEmitter::getEmittedEmitter
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleEmitter__1getEmittedEmitter_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getEmittedEmitter() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ParticleEmitter::getEmittedEmitter */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setEmittedEmitter()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setEmittedEmitter
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setEmittedEmitter_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring emittedEmitter
)
{
   // parameter conversions 
  std::string _cpp_emittedEmitter = ""; org::xbig::jni::to_stdstring(_jni_env_, emittedEmitter, _cpp_emittedEmitter); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEmittedEmitter(_cpp_emittedEmitter);
} /* virtual void Ogre::ParticleEmitter::setEmittedEmitter */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     isEmitted()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ParticleEmitter::isEmitted
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleEmitter__1isEmitted_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isEmitted() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ParticleEmitter::isEmitted */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setEmitted()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleEmitter::setEmitted
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setEmitted_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean emitted
)
{
   // parameter conversions 
  bool _cpp_emitted = emitted ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEmitted(_cpp_emitted);
} /* virtual void Ogre::ParticleEmitter::setEmitted */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleEmitter__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleEmitter__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ParticleEmitter without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::ParticleEmitter::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::Particle::setDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
)
{
   // parameter conversions 
  float _cpp_width = width;
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDimensions(_cpp_width, _cpp_height);
} /* void Ogre::Particle::setDimensions */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     hasOwnDimensions()
 * Type:       non-virtual method
 * Definition: bool Ogre::Particle::hasOwnDimensions
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleEmitter__1hasOwnDimensions_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasOwnDimensions() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Particle::hasOwnDimensions */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getOwnWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::Particle::getOwnWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getOwnWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getOwnWidth() ; 
   return _cpp_result;
} /* Real Ogre::Particle::getOwnWidth */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getOwnHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::Particle::getOwnHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getOwnHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getOwnHeight() ; 
   return _cpp_result;
} /* Real Ogre::Particle::getOwnHeight */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setRotation()
 * Type:       non-virtual method
 * Definition: void Ogre::Particle::setRotation
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setRotation_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rad
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_rad = reinterpret_cast< const Ogre::Radian* >(rad); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRotation(*_cpp_rad);
} /* void Ogre::Particle::setRotation */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getRotation()
 * Type:       non-virtual method
 * Definition: const Radian& Ogre::Particle::getRotation
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getRotation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->getRotation() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Radian& Ogre::Particle::getRotation */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     _notifyOwner()
 * Type:       non-virtual method
 * Definition: void Ogre::Particle::_notifyOwner
 * Signature:  (Ogre_ParticleSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1_1notifyOwner_1_1ParticleSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong owner
)
{
   // parameter conversions 
  Ogre::ParticleSystem* _cpp_owner = reinterpret_cast< Ogre::ParticleSystem* >(owner); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyOwner(_cpp_owner);
} /* void Ogre::Particle::_notifyOwner */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     _notifyVisualData()
 * Type:       non-virtual method
 * Definition: void Ogre::Particle::_notifyVisualData
 * Signature:  (Ogre_ParticleVisualData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1_1notifyVisualData_1_1ParticleVisualDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vis
)
{
   // parameter conversions 
  Ogre::ParticleVisualData* _cpp_vis = reinterpret_cast< Ogre::ParticleVisualData* >(vis); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyVisualData(_cpp_vis);
} /* void Ogre::Particle::_notifyVisualData */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getVisualData()
 * Type:       non-virtual method
 * Definition: ParticleVisualData* Ogre::Particle::getVisualData
 * Signature:  ()Ogre_ParticleVisualData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getVisualData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<const Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleVisualData* _cpp_result = _cpp_this->getVisualData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParticleVisualData* Ogre::Particle::getVisualData */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     resetDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::Particle::resetDimensions
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1resetDimensions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetDimensions();
} /* void Ogre::Particle::resetDimensions */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ParticleEmitter::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ParticleEmitter 
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ParticleEmitter::__delete */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getmOwnDimensions()
 * Type:       getter for public attribute
 * Definition: bool Ogre::Particle::mOwnDimensions
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleEmitter__1getmOwnDimensions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->mOwnDimensions; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Particle::mOwnDimensions */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setmOwnDimensions()
 * Type:       setter for public attribute
 * Definition: bool Ogre::Particle::mOwnDimensions
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setmOwnDimensions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mOwnDimensions = _cpp__jni_value_;
} /* bool Ogre::Particle::mOwnDimensions */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getmWidth()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Particle::mWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getmWidth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->mWidth; 
   return _cpp_result;
} /* Real Ogre::Particle::mWidth */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setmWidth()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Particle::mWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setmWidth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mWidth = _cpp__jni_value_;
} /* Real Ogre::Particle::mWidth */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getmHeight()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Particle::mHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1getmHeight (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->mHeight; 
   return _cpp_result;
} /* Real Ogre::Particle::mHeight */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setmHeight()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Particle::mHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setmHeight (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mHeight = _cpp__jni_value_;
} /* Real Ogre::Particle::mHeight */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getrotation()
 * Type:       getter for public attribute
 * Definition: Radian Ogre::Particle::rotation
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getrotation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->rotation); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Particle::rotation */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setrotation()
 * Type:       setter for public attribute
 * Definition: Radian Ogre::Particle::rotation
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setrotation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Radian* _cpp__jni_value_ = reinterpret_cast< Ogre::Radian* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->rotation = *_cpp__jni_value_;
} /* Radian Ogre::Particle::rotation */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getposition()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::Particle::position
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getposition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->position); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Particle::position */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setposition()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::Particle::position
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setposition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->position = *_cpp__jni_value_;
} /* Vector3 Ogre::Particle::position */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getdirection()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::Particle::direction
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getdirection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->direction); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Particle::direction */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setdirection()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::Particle::direction
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setdirection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->direction = *_cpp__jni_value_;
} /* Vector3 Ogre::Particle::direction */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getcolour()
 * Type:       getter for public attribute
 * Definition: ColourValue Ogre::Particle::colour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getcolour (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->colour); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::Particle::colour */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setcolour()
 * Type:       setter for public attribute
 * Definition: ColourValue Ogre::Particle::colour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setcolour (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::ColourValue* _cpp__jni_value_ = reinterpret_cast< Ogre::ColourValue* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->colour = *_cpp__jni_value_;
} /* ColourValue Ogre::Particle::colour */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     gettimeToLive()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Particle::timeToLive
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1gettimeToLive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->timeToLive; 
   return _cpp_result;
} /* Real Ogre::Particle::timeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     settimeToLive()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Particle::timeToLive
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1settimeToLive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->timeToLive = _cpp__jni_value_;
} /* Real Ogre::Particle::timeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     gettotalTimeToLive()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Particle::totalTimeToLive
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ParticleEmitter__1gettotalTimeToLive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->totalTimeToLive; 
   return _cpp_result;
} /* Real Ogre::Particle::totalTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     settotalTimeToLive()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Particle::totalTimeToLive
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1settotalTimeToLive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->totalTimeToLive = _cpp__jni_value_;
} /* Real Ogre::Particle::totalTimeToLive */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getrotationSpeed()
 * Type:       getter for public attribute
 * Definition: Radian Ogre::Particle::rotationSpeed
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleEmitter__1getrotationSpeed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->rotationSpeed); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Particle::rotationSpeed */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setrotationSpeed()
 * Type:       setter for public attribute
 * Definition: Radian Ogre::Particle::rotationSpeed
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setrotationSpeed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Radian* _cpp__jni_value_ = reinterpret_cast< Ogre::Radian* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->rotationSpeed = *_cpp__jni_value_;
} /* Radian Ogre::Particle::rotationSpeed */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     getparticleType()
 * Type:       getter for public attribute
 * Definition: ParticleType Ogre::Particle::particleType
 * Signature:  ()Ogre_Particle_ParticleType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleEmitter__1getparticleType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this = reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Particle::ParticleType _cpp_result = _cpp_this->particleType; 
   return _cpp_result;
} /* ParticleType Ogre::Particle::particleType */


/*
 * Class:      org.ogre4j.ParticleEmitter
 * Method:     setparticleType()
 * Type:       setter for public attribute
 * Definition: ParticleType Ogre::Particle::particleType
 * Signature:  (Ogre_Particle_ParticleType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleEmitter__1setparticleType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::Particle::ParticleType _cpp__jni_value_ = (Ogre::Particle::ParticleType)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ParticleEmitter* _cpp_this =reinterpret_cast<Ogre::ParticleEmitter*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->particleType = _cpp__jni_value_;
} /* ParticleType Ogre::Particle::particleType */
