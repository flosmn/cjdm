///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_TagPoint.h"

// import header files of original library
#include <OgreTagPoint.h>



/*
 * Class:      org.ogre4j.TagPoint
 * Method:     TagPoint()
 * Type:       constructor
 * Definition: Ogre::TagPoint::TagPoint
 * Signature:  (SOgre_Skeleton)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1createTagPoint_1_1HvSkeletonp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint handle, 
  jlong creator
)
{
   // constructor of class Ogre::TagPoint 
   
   // parameter conversions 
  unsigned short _cpp_handle = handle;
  Ogre::Skeleton* _cpp_creator = reinterpret_cast< Ogre::Skeleton* >(creator); 
   
   // create new instance of class Ogre::TagPoint 
   Ogre::TagPoint* _cpp_this = new Ogre::TagPoint(_cpp_handle, _cpp_creator); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TagPoint::TagPoint */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getParentEntity()
 * Type:       non-virtual method
 * Definition: Entity* Ogre::TagPoint::getParentEntity
 * Signature:  ()Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getParentEntity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity* _cpp_result = _cpp_this->getParentEntity() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Entity* Ogre::TagPoint::getParentEntity */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getChildObject()
 * Type:       non-virtual method
 * Definition: MovableObject* Ogre::TagPoint::getChildObject
 * Signature:  ()Ogre_MovableObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getChildObject_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject* _cpp_result = _cpp_this->getChildObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MovableObject* Ogre::TagPoint::getChildObject */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setParentEntity()
 * Type:       non-virtual method
 * Definition: void Ogre::TagPoint::setParentEntity
 * Signature:  (Ogre_Entity)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setParentEntity_1_1Entityp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pEntity
)
{
   // parameter conversions 
  Ogre::Entity* _cpp_pEntity = reinterpret_cast< Ogre::Entity* >(pEntity); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParentEntity(_cpp_pEntity);
} /* void Ogre::TagPoint::setParentEntity */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setChildObject()
 * Type:       non-virtual method
 * Definition: void Ogre::TagPoint::setChildObject
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setChildObject_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pObject
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_pObject = reinterpret_cast< Ogre::MovableObject* >(pObject); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setChildObject(_cpp_pObject);
} /* void Ogre::TagPoint::setChildObject */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setInheritParentEntityOrientation()
 * Type:       non-virtual method
 * Definition: void Ogre::TagPoint::setInheritParentEntityOrientation
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setInheritParentEntityOrientation_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean inherit
)
{
   // parameter conversions 
  bool _cpp_inherit = inherit ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInheritParentEntityOrientation(_cpp_inherit);
} /* void Ogre::TagPoint::setInheritParentEntityOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getInheritParentEntityOrientation()
 * Type:       non-virtual method
 * Definition: bool Ogre::TagPoint::getInheritParentEntityOrientation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getInheritParentEntityOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getInheritParentEntityOrientation() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TagPoint::getInheritParentEntityOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setInheritParentEntityScale()
 * Type:       non-virtual method
 * Definition: void Ogre::TagPoint::setInheritParentEntityScale
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setInheritParentEntityScale_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean inherit
)
{
   // parameter conversions 
  bool _cpp_inherit = inherit ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInheritParentEntityScale(_cpp_inherit);
} /* void Ogre::TagPoint::setInheritParentEntityScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getInheritParentEntityScale()
 * Type:       non-virtual method
 * Definition: bool Ogre::TagPoint::getInheritParentEntityScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getInheritParentEntityScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getInheritParentEntityScale() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TagPoint::getInheritParentEntityScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getParentEntityTransform()
 * Type:       non-virtual method
 * Definition: const Matrix4& Ogre::TagPoint::getParentEntityTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getParentEntityTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getParentEntityTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix4& Ogre::TagPoint::getParentEntityTransform */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getFullLocalTransform()
 * Type:       non-virtual method
 * Definition: const Matrix4& Ogre::TagPoint::_getFullLocalTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getFullLocalTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getFullLocalTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix4& Ogre::TagPoint::_getFullLocalTransform */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     needUpdate()
 * Type:       virtual method
 * Definition: void Ogre::TagPoint::needUpdate
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1needUpdate_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean forceParentUpdate
)
{
   // parameter conversions 
  bool _cpp_forceParentUpdate = forceParentUpdate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->needUpdate(_cpp_forceParentUpdate);
} /* void Ogre::TagPoint::needUpdate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     updateFromParentImpl()
 * Type:       virtual method
 * Definition: void Ogre::TagPoint::updateFromParentImpl
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1updateFromParentImpl_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateFromParentImpl();
} /* void Ogre::TagPoint::updateFromParentImpl */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::TagPoint::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->getLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LightList& Ogre::TagPoint::getLights */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     createChild()
 * Type:       non-virtual method
 * Definition: Bone* Ogre::Bone::createChild
 * Signature:  (SOgre_Vector3Ogre_Quaternion)Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1createChild_1_1HvVector3RQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle, 
  jlong translate, 
  jlong rotate
)
{
   // parameter conversions 
  unsigned short _cpp_handle = handle;
  const Ogre::Vector3* _cpp_translate = reinterpret_cast< const Ogre::Vector3* >(translate);
  const Ogre::Quaternion* _cpp_rotate = reinterpret_cast< const Ogre::Quaternion* >(rotate); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Bone* _cpp_result = _cpp_this->Ogre::Bone::createChild(_cpp_handle, *_cpp_translate, *_cpp_rotate) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Bone* Ogre::Bone::createChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getHandle()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Bone::getHandle
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TagPoint__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getHandle() ; 
   return _cpp_result;
} /* unsigned short Ogre::Bone::getHandle */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setBindingPose()
 * Type:       non-virtual method
 * Definition: void Ogre::Bone::setBindingPose
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setBindingPose (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBindingPose();
} /* void Ogre::Bone::setBindingPose */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     reset()
 * Type:       non-virtual method
 * Definition: void Ogre::Bone::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reset();
} /* void Ogre::Bone::reset */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setManuallyControlled()
 * Type:       non-virtual method
 * Definition: void Ogre::Bone::setManuallyControlled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setManuallyControlled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean manuallyControlled
)
{
   // parameter conversions 
  bool _cpp_manuallyControlled = manuallyControlled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setManuallyControlled(_cpp_manuallyControlled);
} /* void Ogre::Bone::setManuallyControlled */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     isManuallyControlled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Bone::isManuallyControlled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1isManuallyControlled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isManuallyControlled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Bone::isManuallyControlled */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getOffsetTransform()
 * Type:       non-virtual method
 * Definition: void Ogre::Bone::_getOffsetTransform
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1_1getOffsetTransform_1_1Matrix4r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_m = reinterpret_cast< Ogre::Matrix4* >(m); 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_getOffsetTransform(*_cpp_m);
} /* void Ogre::Bone::_getOffsetTransform */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getBindingPoseInverseScale()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Bone::_getBindingPoseInverseScale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getBindingPoseInverseScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->_getBindingPoseInverseScale() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Bone::_getBindingPoseInverseScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getBindingPoseInversePosition()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Bone::_getBindingPoseInversePosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getBindingPoseInversePosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->_getBindingPoseInversePosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Bone::_getBindingPoseInversePosition */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getBindingPoseInverseOrientation()
 * Type:       non-virtual method
 * Definition: const Quaternion& Ogre::Bone::_getBindingPoseInverseOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getBindingPoseInverseOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->_getBindingPoseInverseOrientation() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Quaternion& Ogre::Bone::_getBindingPoseInverseOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Node::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TagPoint__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Node::getName */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getParent()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::getParent
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::getParent */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getOrientation()
 * Type:       virtual method
 * Definition: virtual const Quaternion& Ogre::Node::getOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->getOrientation() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Quaternion& Ogre::Node::getOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setOrientation
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setOrientation_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_q = reinterpret_cast< const Ogre::Quaternion* >(q); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::setOrientation(*_cpp_q);
} /* virtual void Ogre::Node::setOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setOrientation
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setOrientation_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat w, 
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_w = w;
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::setOrientation(_cpp_w, _cpp_x, _cpp_y, _cpp_z);
} /* virtual void Ogre::Node::setOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     resetOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::resetOrientation
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1resetOrientation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetOrientation();
} /* virtual void Ogre::Node::resetOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setPosition()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setPosition_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pos
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_pos = reinterpret_cast< const Ogre::Vector3* >(pos); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::setPosition(*_cpp_pos);
} /* virtual void Ogre::Node::setPosition */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setPosition()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setPosition
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setPosition_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::setPosition(_cpp_x, _cpp_y, _cpp_z);
} /* virtual void Ogre::Node::setPosition */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::Node::getPosition */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setScale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setScale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong scale
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_scale = reinterpret_cast< const Ogre::Vector3* >(scale); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::setScale(*_cpp_scale);
} /* virtual void Ogre::Node::setScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setScale
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setScale_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::setScale(_cpp_x, _cpp_y, _cpp_z);
} /* virtual void Ogre::Node::setScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getScale()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getScale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getScale() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::Node::getScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setInheritOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setInheritOrientation
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setInheritOrientation_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean inherit
)
{
   // parameter conversions 
  bool _cpp_inherit = inherit ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInheritOrientation(_cpp_inherit);
} /* virtual void Ogre::Node::setInheritOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getInheritOrientation()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Node::getInheritOrientation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getInheritOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getInheritOrientation() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Node::getInheritOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setInheritScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setInheritScale
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setInheritScale_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean inherit
)
{
   // parameter conversions 
  bool _cpp_inherit = inherit ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInheritScale(_cpp_inherit);
} /* virtual void Ogre::Node::setInheritScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getInheritScale()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Node::getInheritScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getInheritScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getInheritScale() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Node::getInheritScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     scale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::scale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1scale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong scale
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_scale = reinterpret_cast< const Ogre::Vector3* >(scale); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::scale(*_cpp_scale);
} /* virtual void Ogre::Node::scale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     scale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::scale
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1scale_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::scale(_cpp_x, _cpp_y, _cpp_z);
} /* virtual void Ogre::Node::scale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (Ogre_Vector3Ogre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1translate_1_1Vector3RTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_d = reinterpret_cast< const Ogre::Vector3* >(d);
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::translate(*_cpp_d, _cpp_relativeTo);
} /* virtual void Ogre::Node::translate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (floatfloatfloatOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1translate_1_1RealvRealvRealvTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z, 
  jint relativeTo
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z;
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::translate(_cpp_x, _cpp_y, _cpp_z, _cpp_relativeTo);
} /* virtual void Ogre::Node::translate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1translate_1_1Matrix3RVector3RTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axes, 
  jlong move, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_axes = reinterpret_cast< const Ogre::Matrix3* >(axes);
  const Ogre::Vector3* _cpp_move = reinterpret_cast< const Ogre::Vector3* >(move);
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::translate(*_cpp_axes, *_cpp_move, _cpp_relativeTo);
} /* virtual void Ogre::Node::translate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (Ogre_Matrix3floatfloatfloatOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1translate_1_1Matrix3RRealvRealvRealvTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axes, 
  jfloat x, 
  jfloat y, 
  jfloat z, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_axes = reinterpret_cast< const Ogre::Matrix3* >(axes);
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z;
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::translate(*_cpp_axes, _cpp_x, _cpp_y, _cpp_z, _cpp_relativeTo);
} /* virtual void Ogre::Node::translate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     roll()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::roll
 * Signature:  (Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1roll_1_1RadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle);
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->roll(*_cpp_angle, _cpp_relativeTo);
} /* virtual void Ogre::Node::roll */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     pitch()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::pitch
 * Signature:  (Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1pitch_1_1RadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle);
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->pitch(*_cpp_angle, _cpp_relativeTo);
} /* virtual void Ogre::Node::pitch */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     yaw()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::yaw
 * Signature:  (Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1yaw_1_1RadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle);
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->yaw(*_cpp_angle, _cpp_relativeTo);
} /* virtual void Ogre::Node::yaw */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     rotate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::rotate
 * Signature:  (Ogre_Vector3Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1rotate_1_1Vector3RRadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axis, 
  jlong angle, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_axis = reinterpret_cast< const Ogre::Vector3* >(axis);
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle);
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::rotate(*_cpp_axis, *_cpp_angle, _cpp_relativeTo);
} /* virtual void Ogre::Node::rotate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     rotate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::rotate
 * Signature:  (Ogre_QuaternionOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1rotate_1_1QuaternionRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q, 
  jint relativeTo
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_q = reinterpret_cast< const Ogre::Quaternion* >(q);
  Ogre::Node::TransformSpace _cpp_relativeTo = (Ogre::Node::TransformSpace)relativeTo; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Node::rotate(*_cpp_q, _cpp_relativeTo);
} /* virtual void Ogre::Node::rotate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getLocalAxes()
 * Type:       virtual method
 * Definition: virtual Matrix3 Ogre::Node::getLocalAxes
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getLocalAxes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->getLocalAxes() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix3 Ogre::Node::getLocalAxes */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     createChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::createChild
 * Signature:  (Ogre_Vector3Ogre_Quaternion)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1createChild_1_1Vector3RQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong translate, 
  jlong rotate
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_translate = reinterpret_cast< const Ogre::Vector3* >(translate);
  const Ogre::Quaternion* _cpp_rotate = reinterpret_cast< const Ogre::Quaternion* >(rotate); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->Ogre::Node::createChild(*_cpp_translate, *_cpp_rotate) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::createChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     createChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::createChild
 * Signature:  (std_stringOgre_Vector3Ogre_Quaternion)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1createChild_1_1StringRVector3RQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong translate, 
  jlong rotate
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  const Ogre::Vector3* _cpp_translate = reinterpret_cast< const Ogre::Vector3* >(translate);
  const Ogre::Quaternion* _cpp_rotate = reinterpret_cast< const Ogre::Quaternion* >(rotate); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->Ogre::Node::createChild(_cpp_name, *_cpp_translate, *_cpp_rotate) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::createChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     addChild()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::addChild
 * Signature:  (Ogre_Node)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1addChild_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child
)
{
   // parameter conversions 
  Ogre::Node* _cpp_child = reinterpret_cast< Ogre::Node* >(child); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addChild(_cpp_child);
} /* virtual void Ogre::Node::addChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     numChildren()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Node::numChildren
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TagPoint__1numChildren_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->numChildren() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Node::numChildren */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::getChild
 * Signature:  (S)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getChild_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->Ogre::Node::getChild(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::getChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::getChild
 * Signature:  (std_string)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getChild_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->Ogre::Node::getChild(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::getChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getChildIterator()
 * Type:       virtual method
 * Definition: virtual ChildNodeIterator Ogre::Node::getChildIterator
 * Signature:  ()Ogre_Node_ChildNodeIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getChildIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node::ChildNodeIterator* _cpp_result = new Ogre::Node::ChildNodeIterator( _cpp_this->getChildIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ChildNodeIterator Ogre::Node::getChildIterator */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getChildIterator_const()
 * Type:       virtual method
 * Definition: virtual ConstChildNodeIterator Ogre::Node::getChildIterator
 * Signature:  ()Ogre_Node_ConstChildNodeIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getChildIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node::ConstChildNodeIterator* _cpp_result = new Ogre::Node::ConstChildNodeIterator( _cpp_this->getChildIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ConstChildNodeIterator Ogre::Node::getChildIterator */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     removeChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::removeChild
 * Signature:  (S)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1removeChild_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->Ogre::Node::removeChild(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::removeChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     removeChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::removeChild
 * Signature:  (Ogre_Node)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1removeChild_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child
)
{
   // parameter conversions 
  Ogre::Node* _cpp_child = reinterpret_cast< Ogre::Node* >(child); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->Ogre::Node::removeChild(_cpp_child) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::removeChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     removeChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::removeChild
 * Signature:  (std_string)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1removeChild_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->Ogre::Node::removeChild(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::Node::removeChild */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     removeAllChildren()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::removeAllChildren
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1removeAllChildren (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllChildren();
} /* virtual void Ogre::Node::removeAllChildren */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getDerivedOrientation()
 * Type:       virtual method
 * Definition: virtual const Quaternion& Ogre::Node::_getDerivedOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getDerivedOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->_getDerivedOrientation() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Quaternion& Ogre::Node::_getDerivedOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getDerivedPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::_getDerivedPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getDerivedPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->_getDerivedPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::Node::_getDerivedPosition */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getDerivedScale()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::_getDerivedScale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getDerivedScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->_getDerivedScale() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::Node::_getDerivedScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _getFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::Node::_getFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1_1getFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::Node::_getFullTransform */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _update()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::_update
 * Signature:  (ZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1_1update_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean updateChildren, 
  jboolean parentHasChanged
)
{
   // parameter conversions 
  bool _cpp_updateChildren = updateChildren ? true : false;
  bool _cpp_parentHasChanged = parentHasChanged ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_update(_cpp_updateChildren, _cpp_parentHasChanged);
} /* virtual void Ogre::Node::_update */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setListener
 * Signature:  (Ogre_Node_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::Node::Listener* _cpp_listener = reinterpret_cast< Ogre::Node::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::Node::setListener */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::Node::getListener
 * Signature:  ()Ogre_Node_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::Node::getListener */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: const MaterialPtr& Ogre::Node::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = & _cpp_this->getMaterial() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MaterialPtr& Ogre::Node::getMaterial */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: void Ogre::Node::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_op = reinterpret_cast< Ogre::RenderOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getRenderOperation(*_cpp_op);
} /* void Ogre::Node::getRenderOperation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: void Ogre::Node::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_xform = reinterpret_cast< Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getWorldTransforms(_cpp_xform);
} /* void Ogre::Node::getWorldTransforms */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setInitialState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setInitialState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setInitialState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInitialState();
} /* virtual void Ogre::Node::setInitialState */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     resetToInitialState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::resetToInitialState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1resetToInitialState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetToInitialState();
} /* virtual void Ogre::Node::resetToInitialState */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getInitialPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getInitialPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getInitialPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getInitialPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::Node::getInitialPosition */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getInitialOrientation()
 * Type:       virtual method
 * Definition: virtual const Quaternion& Ogre::Node::getInitialOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getInitialOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->getInitialOrientation() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Quaternion& Ogre::Node::getInitialOrientation */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getInitialScale()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getInitialScale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getInitialScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getInitialScale() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::Node::getInitialScale */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::Node::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TagPoint__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredViewDepth(_cpp_cam) ; 
   return _cpp_result;
} /* Real Ogre::Node::getSquaredViewDepth */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     requestUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::requestUpdate
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1requestUpdate_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child, 
  jboolean forceParentUpdate
)
{
   // parameter conversions 
  Ogre::Node* _cpp_child = reinterpret_cast< Ogre::Node* >(child);
  bool _cpp_forceParentUpdate = forceParentUpdate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->requestUpdate(_cpp_child, _cpp_forceParentUpdate);
} /* virtual void Ogre::Node::requestUpdate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     cancelUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::cancelUpdate
 * Signature:  (Ogre_Node)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1cancelUpdate_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child
)
{
   // parameter conversions 
  Ogre::Node* _cpp_child = reinterpret_cast< Ogre::Node* >(child); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->cancelUpdate(_cpp_child);
} /* virtual void Ogre::Node::cancelUpdate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     queueNeedUpdate()
 * Type:       static method
 * Definition: static void Ogre::Node::queueNeedUpdate
 * Signature:  (Ogre_Node)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1queueNeedUpdate_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong n
)
{
   // static method of class Ogre::TagPoint without return value 
   // parameter conversions 
  Ogre::Node* _cpp_n = reinterpret_cast< Ogre::Node* >(n); 
   
   // call library method 
   Ogre::TagPoint::queueNeedUpdate(_cpp_n);
} /* static void Ogre::Node::queueNeedUpdate */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     processQueuedUpdates()
 * Type:       static method
 * Definition: static void Ogre::Node::processQueuedUpdates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1processQueuedUpdates (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::TagPoint without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::TagPoint::processQueuedUpdates();
} /* static void Ogre::Node::processQueuedUpdates */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: virtual Technique* Ogre::Renderable::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Technique* Ogre::Renderable::getTechnique */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->preRender(_cpp_sm, _cpp_rsys) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::preRender */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postRender(_cpp_sm, _cpp_rsys);
} /* virtual void Ogre::Renderable::postRender */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TagPoint__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumWorldTransforms() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Renderable::getNumWorldTransforms */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
)
{
   // parameter conversions 
  bool _cpp_useIdentityProjection = useIdentityProjection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityProjection(_cpp_useIdentityProjection);
} /* void Ogre::Renderable::setUseIdentityProjection */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityProjection() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityProjection */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
)
{
   // parameter conversions 
  bool _cpp_useIdentityView = useIdentityView ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityView(_cpp_useIdentityView);
} /* void Ogre::Renderable::setUseIdentityView */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityView() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityView */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastsShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getCastsShadows */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  size_t _cpp_index = index;
  const Ogre::Vector4* _cpp_value = reinterpret_cast< const Ogre::Vector4* >(value); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomParameter(_cpp_index, *_cpp_value);
} /* void Ogre::Renderable::setCustomParameter */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCustomParameter(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4& Ogre::Renderable::getCustomParameter */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
)
{
   // parameter conversions 
  const Ogre::GpuProgramParameters::AutoConstantEntry* _cpp_constantEntry = reinterpret_cast< const Ogre::GpuProgramParameters::AutoConstantEntry* >(constantEntry);
  Ogre::GpuProgramParameters* _cpp_params = reinterpret_cast< Ogre::GpuProgramParameters* >(params); 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateCustomGpuParameter(*_cpp_constantEntry, _cpp_params);
} /* virtual void Ogre::Renderable::_updateCustomGpuParameter */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
)
{
   // parameter conversions 
  bool _cpp_override = override ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_override);
} /* virtual void Ogre::Renderable::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TagPoint__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPolygonModeOverrideable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::Renderable::setUserAny */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::Renderable::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::Renderable::getUserAny */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TagPoint__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable::RenderSystemData* _cpp_result = _cpp_this->getRenderSystemData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderSystemData* Ogre::Renderable::getRenderSystemData */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  Ogre::Renderable::RenderSystemData* _cpp_val = reinterpret_cast< Ogre::Renderable::RenderSystemData* >(val); 
   
   // cast pointer to C++ object 
   const Ogre::TagPoint* _cpp_this = reinterpret_cast<const Ogre::TagPoint*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderSystemData(_cpp_val);
} /* virtual void Ogre::Renderable::setRenderSystemData */


/*
 * Class:      org.ogre4j.TagPoint
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::TagPoint::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TagPoint__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::TagPoint 
   // cast pointer to C++ object 
   Ogre::TagPoint* _cpp_this = reinterpret_cast<Ogre::TagPoint*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::TagPoint::__delete */
