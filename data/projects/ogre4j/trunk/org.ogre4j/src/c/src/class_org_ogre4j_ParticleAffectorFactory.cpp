///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ParticleAffectorFactory.h"

// import header files of original library
#include <OgreParticleAffectorFactory.h>



/*
 * Class:      org.ogre4j.ParticleAffectorFactory
 * Method:     getName()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::ParticleAffectorFactory::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleAffectorFactory__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleAffectorFactory* _cpp_this = reinterpret_cast<const Ogre::ParticleAffectorFactory*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::ParticleAffectorFactory::getName */


/*
 * Class:      org.ogre4j.ParticleAffectorFactory
 * Method:     createAffector()
 * Type:       pure virtual method
 * Definition: virtual ParticleAffector* Ogre::ParticleAffectorFactory::createAffector
 * Signature:  (Ogre_ParticleSystem)Ogre_ParticleAffector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleAffectorFactory__1createAffector_1_1ParticleSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong psys
)
{
   // parameter conversions 
  Ogre::ParticleSystem* _cpp_psys = reinterpret_cast< Ogre::ParticleSystem* >(psys); 
   
   // cast pointer to C++ object 
   Ogre::ParticleAffectorFactory* _cpp_this = reinterpret_cast<Ogre::ParticleAffectorFactory*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleAffector* _cpp_result = _cpp_this->createAffector(_cpp_psys) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ParticleAffector* Ogre::ParticleAffectorFactory::createAffector */


/*
 * Class:      org.ogre4j.ParticleAffectorFactory
 * Method:     destroyAffector()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleAffectorFactory::destroyAffector
 * Signature:  (Ogre_ParticleAffector)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleAffectorFactory__1destroyAffector_1_1ParticleAffectorp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong e
)
{
   // parameter conversions 
  Ogre::ParticleAffector* _cpp_e = reinterpret_cast< Ogre::ParticleAffector* >(e); 
   
   // cast pointer to C++ object 
   Ogre::ParticleAffectorFactory* _cpp_this = reinterpret_cast<Ogre::ParticleAffectorFactory*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAffector(_cpp_e);
} /* virtual void Ogre::ParticleAffectorFactory::destroyAffector */


/*
 * Class:      org.ogre4j.ParticleAffectorFactory
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ParticleAffectorFactory::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleAffectorFactory__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ParticleAffectorFactory 
   // cast pointer to C++ object 
   Ogre::ParticleAffectorFactory* _cpp_this = reinterpret_cast<Ogre::ParticleAffectorFactory*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ParticleAffectorFactory::__delete */
