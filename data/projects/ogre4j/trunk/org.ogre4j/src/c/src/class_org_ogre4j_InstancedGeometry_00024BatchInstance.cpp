///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_InstancedGeometry_00024BatchInstance.h"

// import header files of original library
#include <OgreInstancedGeometry.h>



/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     BatchInstance()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::BatchInstance::BatchInstance
 * Signature:  (Ogre_InstancedGeometrystd_stringOgre_SceneManagerunsigned_int)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1createBatchInstance_1_1InstancedGeometrypStringRSceneManagerpuint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jstring name, 
  jlong mgr, 
  jlong BatchInstanceID
)
{
   // constructor of class Ogre::InstancedGeometry::BatchInstance 
   
   // parameter conversions 
  Ogre::InstancedGeometry* _cpp_parent = reinterpret_cast< Ogre::InstancedGeometry* >(parent);
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  Ogre::SceneManager* _cpp_mgr = reinterpret_cast< Ogre::SceneManager* >(mgr);
  unsigned int _cpp_BatchInstanceID = BatchInstanceID; 
   
   // create new instance of class Ogre::InstancedGeometry::BatchInstance 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = new Ogre::InstancedGeometry::BatchInstance(_cpp_parent, _cpp_name, _cpp_mgr, _cpp_BatchInstanceID); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::InstancedGeometry::BatchInstance::BatchInstance */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: InstancedGeometry* Ogre::InstancedGeometry::BatchInstance::getParent
 * Signature:  ()Ogre_InstancedGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* InstancedGeometry* Ogre::InstancedGeometry::BatchInstance::getParent */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     assign()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::assign
 * Signature:  (Ogre_InstancedGeometry_QueuedSubMesh)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1assign_1_1QueuedSubMeshp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong qmesh
)
{
   // parameter conversions 
  Ogre::InstancedGeometry::QueuedSubMesh* _cpp_qmesh = reinterpret_cast< Ogre::InstancedGeometry::QueuedSubMesh* >(qmesh); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->assign(_cpp_qmesh);
} /* void Ogre::InstancedGeometry::BatchInstance::assign */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     build()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::build
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1build (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->build();
} /* void Ogre::InstancedGeometry::BatchInstance::build */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getID()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::InstancedGeometry::BatchInstance::getID
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getID_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getID() ; 
   return _cpp_result;
} /* uint32 Ogre::InstancedGeometry::BatchInstance::getID */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getMovableType()
 * Type:       virtual method
 * Definition: const String& Ogre::InstancedGeometry::BatchInstance::getMovableType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getMovableType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMovableType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::InstancedGeometry::BatchInstance::getMovableType */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _notifyCurrentCamera()
 * Type:       virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* void Ogre::InstancedGeometry::BatchInstance::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getBoundingBox()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::InstancedGeometry::BatchInstance::getBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBoundingBox() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::InstancedGeometry::BatchInstance::getBoundingBox */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setBoundingBox()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::setBoundingBox
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setBoundingBox_1_1AxisAlignedBoxr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box
)
{
   // parameter conversions 
  Ogre::AxisAlignedBox* _cpp_box = reinterpret_cast< Ogre::AxisAlignedBox* >(box); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBoundingBox(*_cpp_box);
} /* void Ogre::InstancedGeometry::BatchInstance::setBoundingBox */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getBoundingRadius()
 * Type:       virtual method
 * Definition: Real Ogre::InstancedGeometry::BatchInstance::getBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getBoundingRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingRadius() ; 
   return _cpp_result;
} /* Real Ogre::InstancedGeometry::BatchInstance::getBoundingRadius */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* void Ogre::InstancedGeometry::BatchInstance::_updateRenderQueue */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: bool Ogre::InstancedGeometry::BatchInstance::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::InstancedGeometry::BatchInstance::isVisible */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     visitRenderables()
 * Type:       virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::InstancedGeometry::BatchInstance::visitRenderables */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getLODIterator()
 * Type:       non-virtual method
 * Definition: LODIterator Ogre::InstancedGeometry::BatchInstance::getLODIterator
 * Signature:  ()Ogre_InstancedGeometry_BatchInstance_LODIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getLODIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::BatchInstance::LODIterator* _cpp_result = new Ogre::InstancedGeometry::BatchInstance::LODIterator( _cpp_this->getLODIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* LODIterator Ogre::InstancedGeometry::BatchInstance::getLODIterator */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getLights()
 * Type:       non-virtual method
 * Definition: const LightList& Ogre::InstancedGeometry::BatchInstance::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->getLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LightList& Ogre::InstancedGeometry::BatchInstance::getLights */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     updateBoundingBox()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::updateBoundingBox
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1updateBoundingBox (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateBoundingBox();
} /* void Ogre::InstancedGeometry::BatchInstance::updateBoundingBox */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     dump()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::dump
 * Signature:  (std_ofstream)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1dump_1_1std_1ofstreamr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong of
)
{
   // parameter conversions 
  std::ofstream* _cpp_of = reinterpret_cast< std::ofstream* >(of); 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->dump(*_cpp_of);
} /* void Ogre::InstancedGeometry::BatchInstance::dump */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     updateContainers()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::updateContainers
 * Signature:  (Ogre_InstancedGeometry_LODBucket)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1updateContainers_1_1LODBucketp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bucket
)
{
   // parameter conversions 
  Ogre::InstancedGeometry::LODBucket* _cpp_bucket = reinterpret_cast< Ogre::InstancedGeometry::LODBucket* >(bucket); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateContainers(_cpp_bucket);
} /* void Ogre::InstancedGeometry::BatchInstance::updateContainers */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     attachToScene()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::attachToScene
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1attachToScene (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->attachToScene();
} /* void Ogre::InstancedGeometry::BatchInstance::attachToScene */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     addInstancedObject()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::BatchInstance::addInstancedObject
 * Signature:  (IOgre_InstancedGeometry_InstancedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1addInstancedObject_1_1ivInstancedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong object
)
{
   // parameter conversions 
  int _cpp_index = index;
  Ogre::InstancedGeometry::InstancedObject* _cpp_object = reinterpret_cast< Ogre::InstancedGeometry::InstancedObject* >(object); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addInstancedObject(_cpp_index, _cpp_object);
} /* void Ogre::InstancedGeometry::BatchInstance::addInstancedObject */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     isInstancedObjectPresent()
 * Type:       non-virtual method
 * Definition: InstancedObject* Ogre::InstancedGeometry::BatchInstance::isInstancedObjectPresent
 * Signature:  (I)Ogre_InstancedGeometry_InstancedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1isInstancedObjectPresent_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  int _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::InstancedObject* _cpp_result = _cpp_this->isInstancedObjectPresent(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* InstancedObject* Ogre::InstancedGeometry::BatchInstance::isInstancedObjectPresent */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getObjectIterator()
 * Type:       non-virtual method
 * Definition: InstancedObjectIterator Ogre::InstancedGeometry::BatchInstance::getObjectIterator
 * Signature:  ()Ogre_InstancedGeometry_BatchInstance_InstancedObjectIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getObjectIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::BatchInstance::InstancedObjectIterator* _cpp_result = new Ogre::InstancedGeometry::BatchInstance::InstancedObjectIterator( _cpp_this->getObjectIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* InstancedObjectIterator Ogre::InstancedGeometry::BatchInstance::getObjectIterator */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getSceneNode()
 * Type:       non-virtual method
 * Definition: SceneNode* Ogre::InstancedGeometry::BatchInstance::getSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getSceneNode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SceneNode* Ogre::InstancedGeometry::BatchInstance::getSceneNode */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getInstancesMap()
 * Type:       non-virtual method
 * Definition: ObjectsMap& Ogre::InstancedGeometry::BatchInstance::getInstancesMap
 * Signature:  ()Ogre_InstancedGeometry_BatchInstance_ObjectsMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getInstancesMap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::BatchInstance::ObjectsMap* _cpp_result = & _cpp_this->getInstancesMap() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ObjectsMap& Ogre::InstancedGeometry::BatchInstance::getInstancesMap */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _notifyCreator()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCreator
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1notifyCreator_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCreator(_cpp_fact);
} /* virtual void Ogre::MovableObject::_notifyCreator */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _getCreator()
 * Type:       virtual method
 * Definition: virtual MovableObjectFactory* Ogre::MovableObject::_getCreator
 * Signature:  ()Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1getCreator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->_getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectFactory* Ogre::MovableObject::_getCreator */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _notifyManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1notifyManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_man = reinterpret_cast< Ogre::SceneManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyManager(_cpp_man);
} /* virtual void Ogre::MovableObject::_notifyManager */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _getManager()
 * Type:       virtual method
 * Definition: virtual SceneManager* Ogre::MovableObject::_getManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1getManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneManager* Ogre::MovableObject::_getManager */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::MovableObject::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::MovableObject::getName */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getParentNode()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::MovableObject::getParentNode
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getParentNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParentNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::MovableObject::getParentNode */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getParentSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::MovableObject::getParentSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getParentSceneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getParentSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::MovableObject::getParentSceneNode */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _notifyAttached()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* virtual void Ogre::MovableObject::_notifyAttached */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     isAttached()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isAttached
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1isAttached_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAttached() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isAttached */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     detatchFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::detatchFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1detatchFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detatchFromParent();
} /* virtual void Ogre::MovableObject::detatchFromParent */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     isInScene()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isInScene
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1isInScene_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInScene() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isInScene */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _notifyMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyMoved
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1notifyMoved (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyMoved();
} /* virtual void Ogre::MovableObject::_notifyMoved */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getWorldBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox
 * Signature:  (Z)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getWorldBoundingBox_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getWorldBoundingBox(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getWorldBoundingSphere()
 * Type:       virtual method
 * Definition: virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere
 * Signature:  (Z)Ogre_Sphere
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getWorldBoundingSphere_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Sphere* _cpp_result = & _cpp_this->getWorldBoundingSphere(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* virtual void Ogre::MovableObject::setVisible */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::getVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::getVisible */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::MovableObject::setRenderingDistance */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::MovableObject::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::MovableObject::getRenderingDistance */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setUserObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserObject
 * Signature:  (Ogre_UserDefinedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setUserObject_1_1UserDefinedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::UserDefinedObject* _cpp_obj = reinterpret_cast< Ogre::UserDefinedObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserObject(_cpp_obj);
} /* virtual void Ogre::MovableObject::setUserObject */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getUserObject()
 * Type:       virtual method
 * Definition: virtual UserDefinedObject* Ogre::MovableObject::getUserObject
 * Signature:  ()Ogre_UserDefinedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getUserObject (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UserDefinedObject* _cpp_result = _cpp_this->getUserObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual UserDefinedObject* Ogre::MovableObject::getUserObject */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::MovableObject::setUserAny */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::MovableObject::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::MovableObject::getUserAny */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* virtual void Ogre::MovableObject::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::MovableObject::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::MovableObject::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _getParentNodeFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1getParentNodeFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getParentNodeFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setQueryFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     addQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1addQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addQueryFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     removeQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeQueryFlags
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1removeQueryFlags_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeQueryFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getQueryFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getQueryFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getQueryFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setVisibilityFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     addVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1addVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addVisibilityFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     removeVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1removeVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeVisibilityFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getVisibilityFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getVisibilityFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setListener
 * Signature:  (Ogre_MovableObject_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MovableObject::Listener* _cpp_listener = reinterpret_cast< Ogre::MovableObject::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::MovableObject::setListener */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::MovableObject::getListener
 * Signature:  ()Ogre_MovableObject_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::MovableObject::getListener */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     queryLights()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::MovableObject::queryLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1queryLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->queryLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::MovableObject::queryLights */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     _getLightList()
 * Type:       virtual method
 * Definition: virtual LightList* Ogre::MovableObject::_getLightList
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1getLightList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->_getLightList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual LightList* Ogre::MovableObject::_getLightList */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getEdgeList()
 * Type:       virtual method
 * Definition: EdgeData* Ogre::MovableObject::getEdgeList
 * Signature:  ()Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::MovableObject::getEdgeList */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     hasEdgeList()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::hasEdgeList
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1hasEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEdgeList() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::hasEdgeList */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getShadowVolumeRenderableIterator()
 * Type:       virtual method
 * Definition: ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator
 * Signature:  (Ogre_ShadowTechniqueOgre_LightOgre_HardwareIndexBufferSharedPtrZfloatJ)Ogre_ShadowCaster_ShadowRenderableListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getShadowVolumeRenderableIterator_1_1ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowTechnique, 
  jlong light, 
  jlong indexBuffer, 
  jboolean extrudeVertices, 
  jfloat extrusionDist, 
  jlong flags
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_shadowTechnique = (Ogre::ShadowTechnique)shadowTechnique;
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  bool _cpp_extrudeVertices = extrudeVertices ? true : false;
  float _cpp_extrusionDist = extrusionDist;
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCaster::ShadowRenderableListIterator* _cpp_result = new Ogre::ShadowCaster::ShadowRenderableListIterator( _cpp_this->getShadowVolumeRenderableIterator(_cpp_shadowTechnique, _cpp_light, _cpp_indexBuffer, _cpp_extrudeVertices, _cpp_extrusionDist, _cpp_flags) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getLightCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getLightCapBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getLightCapBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getDarkCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds
 * Signature:  (Ogre_Lightfloat)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getDarkCapBounds_1_1LightRRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jfloat dirLightExtrusionDist
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  float _cpp_dirLightExtrusionDist = dirLightExtrusionDist; 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getDarkCapBounds(*_cpp_light, _cpp_dirLightExtrusionDist) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setCastShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::MovableObject::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_enabled);
} /* void Ogre::MovableObject::setCastShadows */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getCastShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::getCastShadows */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getPointExtrusionDistance()
 * Type:       virtual method
 * Definition: Real Ogre::MovableObject::getPointExtrusionDistance
 * Signature:  (Ogre_Light)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getPointExtrusionDistance_1_1LightP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_l = reinterpret_cast< const Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointExtrusionDistance(_cpp_l) ; 
   return _cpp_result;
} /* Real Ogre::MovableObject::getPointExtrusionDistance */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getTypeFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getTypeFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getTypeFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTypeFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getTypeFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setDebugDisplayEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setDebugDisplayEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugDisplayEnabled(_cpp_enabled);
} /* virtual void Ogre::MovableObject::setDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     isDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isDebugDisplayEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1isDebugDisplayEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugDisplayEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setDefaultQueryFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setDefaultQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::InstancedGeometry::BatchInstance without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::InstancedGeometry::BatchInstance::setDefaultQueryFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultQueryFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getDefaultQueryFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getDefaultQueryFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::InstancedGeometry::BatchInstance with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::InstancedGeometry::BatchInstance::getDefaultQueryFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultQueryFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setDefaultVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::InstancedGeometry::BatchInstance without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::InstancedGeometry::BatchInstance::setDefaultVisibilityFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getDefaultVisibilityFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::InstancedGeometry::BatchInstance with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::InstancedGeometry::BatchInstance::getDefaultVisibilityFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     extrudeVertices()
 * Type:       static method
 * Definition: static void Ogre::ShadowCaster::extrudeVertices
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrIOgre_Vector4float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1extrudeVertices_1_1HardwareVertexBufferSharedPtrRivVector4RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexBuffer, 
  jint originalVertexCount, 
  jlong lightPos, 
  jfloat extrudeDist
)
{
   // static method of class Ogre::InstancedGeometry::BatchInstance without return value 
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_vertexBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(vertexBuffer);
  size_t _cpp_originalVertexCount = originalVertexCount;
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist; 
   
   // call library method 
   Ogre::InstancedGeometry::BatchInstance::extrudeVertices(*_cpp_vertexBuffer, _cpp_originalVertexCount, *_cpp_lightPos, _cpp_extrudeDist);
} /* static void Ogre::ShadowCaster::extrudeVertices */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getAnimableValueNames()
 * Type:       non-virtual method
 * Definition: const StringVector& Ogre::AnimableObject::getAnimableValueNames
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getAnimableValueNames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getAnimableValueNames() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::AnimableObject::getAnimableValueNames */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     createAnimableValue()
 * Type:       virtual method
 * Definition: virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue
 * Signature:  (std_string)Ogre_AnimableValuePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1createAnimableValue_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring valueName
)
{
   // parameter conversions 
  std::string _cpp_valueName = ""; org::xbig::jni::to_stdstring(_jni_env_, valueName, _cpp_valueName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimableValuePtr* _cpp_result = new Ogre::AnimableValuePtr( _cpp_this->createAnimableValue(_cpp_valueName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::InstancedGeometry::BatchInstance::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::InstancedGeometry::BatchInstance 
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::InstancedGeometry::BatchInstance::__delete */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getmLodSquaredDistances()
 * Type:       getter for public attribute
 * Definition: std::vector<Real> Ogre::InstancedGeometry::BatchInstance::mLodSquaredDistances
 * Signature:  ()std_vector__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getmLodSquaredDistances (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const std::vector< float >* _cpp_result = new std::vector< float >( _cpp_this->mLodSquaredDistances); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* std::vector<Real> Ogre::InstancedGeometry::BatchInstance::mLodSquaredDistances */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setmLodSquaredDistances()
 * Type:       setter for public attribute
 * Definition: std::vector<Real> Ogre::InstancedGeometry::BatchInstance::mLodSquaredDistances
 * Signature:  (std_vector__Real__)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setmLodSquaredDistances (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  std::vector< float >* _cpp__jni_value_ = reinterpret_cast< std::vector< float >* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mLodSquaredDistances = *_cpp__jni_value_;
} /* std::vector<Real> Ogre::InstancedGeometry::BatchInstance::mLodSquaredDistances */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getmAABB()
 * Type:       getter for public attribute
 * Definition: AxisAlignedBox Ogre::InstancedGeometry::BatchInstance::mAABB
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getmAABB (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = new Ogre::AxisAlignedBox( _cpp_this->mAABB); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AxisAlignedBox Ogre::InstancedGeometry::BatchInstance::mAABB */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setmAABB()
 * Type:       setter for public attribute
 * Definition: AxisAlignedBox Ogre::InstancedGeometry::BatchInstance::mAABB
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setmAABB (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::AxisAlignedBox* _cpp__jni_value_ = reinterpret_cast< Ogre::AxisAlignedBox* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mAABB = *_cpp__jni_value_;
} /* AxisAlignedBox Ogre::InstancedGeometry::BatchInstance::mAABB */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getmBoundingRadius()
 * Type:       getter for public attribute
 * Definition: Real Ogre::InstancedGeometry::BatchInstance::mBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getmBoundingRadius (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->mBoundingRadius; 
   return _cpp_result;
} /* Real Ogre::InstancedGeometry::BatchInstance::mBoundingRadius */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setmBoundingRadius()
 * Type:       setter for public attribute
 * Definition: Real Ogre::InstancedGeometry::BatchInstance::mBoundingRadius
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setmBoundingRadius (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mBoundingRadius = _cpp__jni_value_;
} /* Real Ogre::InstancedGeometry::BatchInstance::mBoundingRadius */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getmCurrentLod()
 * Type:       getter for public attribute
 * Definition: ushort Ogre::InstancedGeometry::BatchInstance::mCurrentLod
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getmCurrentLod (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->mCurrentLod; 
   return _cpp_result;
} /* ushort Ogre::InstancedGeometry::BatchInstance::mCurrentLod */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setmCurrentLod()
 * Type:       setter for public attribute
 * Definition: ushort Ogre::InstancedGeometry::BatchInstance::mCurrentLod
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setmCurrentLod (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  unsigned short _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mCurrentLod = _cpp__jni_value_;
} /* ushort Ogre::InstancedGeometry::BatchInstance::mCurrentLod */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     getmCamDistanceSquared()
 * Type:       getter for public attribute
 * Definition: Real Ogre::InstancedGeometry::BatchInstance::mCamDistanceSquared
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1getmCamDistanceSquared (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->mCamDistanceSquared; 
   return _cpp_result;
} /* Real Ogre::InstancedGeometry::BatchInstance::mCamDistanceSquared */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024BatchInstance
 * Method:     setmCamDistanceSquared()
 * Type:       setter for public attribute
 * Definition: Real Ogre::InstancedGeometry::BatchInstance::mCamDistanceSquared
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024BatchInstance__1setmCamDistanceSquared (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::BatchInstance* _cpp_this =reinterpret_cast<Ogre::InstancedGeometry::BatchInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mCamDistanceSquared = _cpp__jni_value_;
} /* Real Ogre::InstancedGeometry::BatchInstance::mCamDistanceSquared */
