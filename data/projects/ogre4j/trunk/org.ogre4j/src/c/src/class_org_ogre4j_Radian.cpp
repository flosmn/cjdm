///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Radian.h"

// import header files of original library
#include <OgreMath.h>



/*
 * Class:      org.ogre4j.Radian
 * Method:     Radian()
 * Type:       constructor
 * Definition: Ogre::Radian::Radian
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1_1createRadian_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // constructor of class Ogre::Radian 
   
   // parameter conversions 
  float _cpp_r = r; 
   
   // create new instance of class Ogre::Radian 
   Ogre::Radian* _cpp_this = new Ogre::Radian(_cpp_r); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Radian::Radian */


/*
 * Class:      org.ogre4j.Radian
 * Method:     Radian()
 * Type:       constructor
 * Definition: Ogre::Radian::Radian
 * Signature:  (Ogre_Degree)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1_1createRadian_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong d
)
{
   // constructor of class Ogre::Radian 
   
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // create new instance of class Ogre::Radian 
   Ogre::Radian* _cpp_this = new Ogre::Radian(*_cpp_d); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Radian::Radian */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Radian& Ogre::Radian::operator=
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorAssignment_1_1RealR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator=(_cpp_f) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian& Ogre::Radian::operator= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Radian& Ogre::Radian::operator=
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorAssignment_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian& Ogre::Radian::operator= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Radian & Ogre::Radian::operator=
 * Signature:  (Ogre_Degree)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorAssignment_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_d = reinterpret_cast< const Ogre::Radian* >(d); 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator=(*_cpp_d) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian & Ogre::Radian::operator= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     valueDegrees()
 * Type:       non-virtual method
 * Definition: Real Ogre::Radian::valueDegrees
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Radian__1valueDegrees_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->valueDegrees() ; 
   return _cpp_result;
} /* Real Ogre::Radian::valueDegrees */


/*
 * Class:      org.ogre4j.Radian
 * Method:     valueRadians()
 * Type:       non-virtual method
 * Definition: Real Ogre::Radian::valueRadians
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Radian__1valueRadians_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->valueRadians() ; 
   return _cpp_result;
} /* Real Ogre::Radian::valueRadians */


/*
 * Class:      org.ogre4j.Radian
 * Method:     valueAngleUnits()
 * Type:       non-virtual method
 * Definition: Real Ogre::Radian::valueAngleUnits
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Radian__1valueAngleUnits_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->valueAngleUnits() ; 
   return _cpp_result;
} /* Real Ogre::Radian::valueAngleUnits */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: const Radian& Ogre::Radian::operator+
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorAddition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator+() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Radian& Ogre::Radian::operator+ */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator+
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorAddition_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator+(*_cpp_r) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator+ */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator+
 * Signature:  (Ogre_Degree)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorAddition_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator+(*_cpp_d) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator+ */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Radian& Ogre::Radian::operator+=
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorIncrementAndAssign_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator+=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian& Ogre::Radian::operator+= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Radian & Ogre::Radian::operator+=
 * Signature:  (Ogre_Degree)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorIncrementAndAssign_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator+=(*_cpp_d) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian & Ogre::Radian::operator+= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator-
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator-() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator- */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator-
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorSubtraction_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator-(*_cpp_r) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator- */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator-
 * Signature:  (Ogre_Degree)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorSubtraction_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator-(*_cpp_d) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator- */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Radian& Ogre::Radian::operator-=
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorDecrementAndAssign_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator-=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian& Ogre::Radian::operator-= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Radian & Ogre::Radian::operator-=
 * Signature:  (Ogre_Degree)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorDecrementAndAssign_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator-=(*_cpp_d) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian & Ogre::Radian::operator-= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator *
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator *(_cpp_f) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator * */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator *
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorMultiplication_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong f
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_f = reinterpret_cast< const Ogre::Radian* >(f); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator *(*_cpp_f) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator * */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Radian& Ogre::Radian::operator *=
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorMultiplyAndAssign_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator *=(_cpp_f) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian& Ogre::Radian::operator *= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Radian::operator/
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorDivision_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->operator/(_cpp_f) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Radian::operator/ */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Radian& Ogre::Radian::operator/=
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Radian__1operatorDivideAndAssign_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->operator/=(_cpp_f) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian& Ogre::Radian::operator/= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator<()
 * Type:       non-virtual method
 * Definition: bool Ogre::Radian::operator<
 * Signature:  (Ogre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Radian__1operatorLessThan_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator<(*_cpp_r) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Radian::operator< */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator<=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Radian::operator<=
 * Signature:  (Ogre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Radian__1operatorLessThanOrEqual_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator<=(*_cpp_r) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Radian::operator<= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Radian::operator==
 * Signature:  (Ogre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Radian__1operatorEqual_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_r) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Radian::operator== */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Radian::operator!=
 * Signature:  (Ogre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Radian__1operatorNotEqual_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_r) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Radian::operator!= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator>=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Radian::operator>=
 * Signature:  (Ogre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Radian__1operatorGreaterThanOrEqual_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator>=(*_cpp_r) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Radian::operator>= */


/*
 * Class:      org.ogre4j.Radian
 * Method:     operator>()
 * Type:       non-virtual method
 * Definition: bool Ogre::Radian::operator>
 * Signature:  (Ogre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Radian__1operatorGreaterThan_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Radian* _cpp_this = reinterpret_cast<const Ogre::Radian*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator>(*_cpp_r) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Radian::operator> */


/*
 * Class:      org.ogre4j.Radian
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Radian::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Radian__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Radian 
   // cast pointer to C++ object 
   Ogre::Radian* _cpp_this = reinterpret_cast<Ogre::Radian*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Radian::__delete */
