///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_StringUtil.h"

// import header files of original library
#include <OgreString.h>



/*
 * Class:      org.ogre4j.StringUtil
 * Method:     trim()
 * Type:       static method
 * Definition: static void Ogre::StringUtil::trim
 * Signature:  (std_stringZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StringUtil__1trim_1_1Stringrbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong str, 
  jboolean left, 
  jboolean right
)
{
   // static method of class Ogre::StringUtil without return value 
   // parameter conversions 
  std::string* _cpp_str = reinterpret_cast<std::string*>(str);
  bool _cpp_left = left ? true : false;
  bool _cpp_right = right ? true : false; 
   
   // call library method 
   Ogre::StringUtil::trim(*_cpp_str, _cpp_left, _cpp_right);
} /* static void Ogre::StringUtil::trim */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     split()
 * Type:       static method
 * Definition: static std::vector< String > Ogre::StringUtil::split
 * Signature:  (std_stringstd_stringI)std_vector__String__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StringUtil__1split_1_1StringRStringRIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring str, 
  jstring delims, 
  jlong maxSplits
)
{
   // static method of class Ogre::StringUtil with return value 
   // parameter conversions 
  std::string _cpp_str = ""; org::xbig::jni::to_stdstring(_jni_env_, str, _cpp_str); // calls c-tor only. Not operator= .;
  std::string _cpp_delims = ""; org::xbig::jni::to_stdstring(_jni_env_, delims, _cpp_delims); // calls c-tor only. Not operator= .;
  unsigned int _cpp_maxSplits = maxSplits; 
   
   // call library method 
   const std::vector< std::string >* _cpp_result = new std::vector< std::string >( Ogre::StringUtil::split(_cpp_str, _cpp_delims, _cpp_maxSplits)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static std::vector< String > Ogre::StringUtil::split */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     toLowerCase()
 * Type:       static method
 * Definition: static void Ogre::StringUtil::toLowerCase
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StringUtil__1toLowerCase_1_1Stringr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong str
)
{
   // static method of class Ogre::StringUtil without return value 
   // parameter conversions 
  std::string* _cpp_str = reinterpret_cast<std::string*>(str); 
   
   // call library method 
   Ogre::StringUtil::toLowerCase(*_cpp_str);
} /* static void Ogre::StringUtil::toLowerCase */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     toUpperCase()
 * Type:       static method
 * Definition: static void Ogre::StringUtil::toUpperCase
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StringUtil__1toUpperCase_1_1Stringr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong str
)
{
   // static method of class Ogre::StringUtil without return value 
   // parameter conversions 
  std::string* _cpp_str = reinterpret_cast<std::string*>(str); 
   
   // call library method 
   Ogre::StringUtil::toUpperCase(*_cpp_str);
} /* static void Ogre::StringUtil::toUpperCase */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     startsWith()
 * Type:       static method
 * Definition: static bool Ogre::StringUtil::startsWith
 * Signature:  (std_stringstd_stringZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StringUtil__1startsWith_1_1StringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring str, 
  jstring pattern, 
  jboolean lowerCase
)
{
   // static method of class Ogre::StringUtil with return value 
   // parameter conversions 
  std::string _cpp_str = ""; org::xbig::jni::to_stdstring(_jni_env_, str, _cpp_str); // calls c-tor only. Not operator= .;
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  bool _cpp_lowerCase = lowerCase ? true : false; 
   
   // call library method 
   const bool _cpp_result = Ogre::StringUtil::startsWith(_cpp_str, _cpp_pattern, _cpp_lowerCase); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::StringUtil::startsWith */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     endsWith()
 * Type:       static method
 * Definition: static bool Ogre::StringUtil::endsWith
 * Signature:  (std_stringstd_stringZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StringUtil__1endsWith_1_1StringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring str, 
  jstring pattern, 
  jboolean lowerCase
)
{
   // static method of class Ogre::StringUtil with return value 
   // parameter conversions 
  std::string _cpp_str = ""; org::xbig::jni::to_stdstring(_jni_env_, str, _cpp_str); // calls c-tor only. Not operator= .;
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  bool _cpp_lowerCase = lowerCase ? true : false; 
   
   // call library method 
   const bool _cpp_result = Ogre::StringUtil::endsWith(_cpp_str, _cpp_pattern, _cpp_lowerCase); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::StringUtil::endsWith */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     standardisePath()
 * Type:       static method
 * Definition: static String Ogre::StringUtil::standardisePath
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_StringUtil__1standardisePath_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring init
)
{
   // static method of class Ogre::StringUtil with return value 
   // parameter conversions 
  std::string _cpp_init = ""; org::xbig::jni::to_stdstring(_jni_env_, init, _cpp_init); // calls c-tor only. Not operator= .; 
   
   // call library method 
   const std::string _cpp_result = Ogre::StringUtil::standardisePath(_cpp_init); 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* static String Ogre::StringUtil::standardisePath */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     splitFilename()
 * Type:       static method
 * Definition: static void Ogre::StringUtil::splitFilename
 * Signature:  (std_stringstd_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StringUtil__1splitFilename_1_1StringRStringrStringr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring qualifiedName, 
  jlong outBasename, 
  jlong outPath
)
{
   // static method of class Ogre::StringUtil without return value 
   // parameter conversions 
  std::string _cpp_qualifiedName = ""; org::xbig::jni::to_stdstring(_jni_env_, qualifiedName, _cpp_qualifiedName); // calls c-tor only. Not operator= .;
  std::string* _cpp_outBasename = reinterpret_cast<std::string*>(outBasename);
  std::string* _cpp_outPath = reinterpret_cast<std::string*>(outPath); 
   
   // call library method 
   Ogre::StringUtil::splitFilename(_cpp_qualifiedName, *_cpp_outBasename, *_cpp_outPath);
} /* static void Ogre::StringUtil::splitFilename */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     splitFullFilename()
 * Type:       static method
 * Definition: static void Ogre::StringUtil::splitFullFilename
 * Signature:  (std_stringstd_stringstd_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StringUtil__1splitFullFilename_1_1Ogre_1StringROgre_1StringrOgre_1StringrOgre_1Stringr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring qualifiedName, 
  jlong outBasename, 
  jlong outExtention, 
  jlong outPath
)
{
   // static method of class Ogre::StringUtil without return value 
   // parameter conversions 
  std::string _cpp_qualifiedName = ""; org::xbig::jni::to_stdstring(_jni_env_, qualifiedName, _cpp_qualifiedName); // calls c-tor only. Not operator= .;
  std::string* _cpp_outBasename = reinterpret_cast<std::string*>(outBasename);
  std::string* _cpp_outExtention = reinterpret_cast<std::string*>(outExtention);
  std::string* _cpp_outPath = reinterpret_cast<std::string*>(outPath); 
   
   // call library method 
   Ogre::StringUtil::splitFullFilename(_cpp_qualifiedName, *_cpp_outBasename, *_cpp_outExtention, *_cpp_outPath);
} /* static void Ogre::StringUtil::splitFullFilename */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     splitBaseFilename()
 * Type:       static method
 * Definition: static void Ogre::StringUtil::splitBaseFilename
 * Signature:  (std_stringstd_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StringUtil__1splitBaseFilename_1_1Ogre_1StringROgre_1StringrOgre_1Stringr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring fullName, 
  jlong outBasename, 
  jlong outExtention
)
{
   // static method of class Ogre::StringUtil without return value 
   // parameter conversions 
  std::string _cpp_fullName = ""; org::xbig::jni::to_stdstring(_jni_env_, fullName, _cpp_fullName); // calls c-tor only. Not operator= .;
  std::string* _cpp_outBasename = reinterpret_cast<std::string*>(outBasename);
  std::string* _cpp_outExtention = reinterpret_cast<std::string*>(outExtention); 
   
   // call library method 
   Ogre::StringUtil::splitBaseFilename(_cpp_fullName, *_cpp_outBasename, *_cpp_outExtention);
} /* static void Ogre::StringUtil::splitBaseFilename */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     match()
 * Type:       static method
 * Definition: static bool Ogre::StringUtil::match
 * Signature:  (std_stringstd_stringZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StringUtil__1match_1_1StringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring str, 
  jstring pattern, 
  jboolean caseSensitive
)
{
   // static method of class Ogre::StringUtil with return value 
   // parameter conversions 
  std::string _cpp_str = ""; org::xbig::jni::to_stdstring(_jni_env_, str, _cpp_str); // calls c-tor only. Not operator= .;
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  bool _cpp_caseSensitive = caseSensitive ? true : false; 
   
   // call library method 
   const bool _cpp_result = Ogre::StringUtil::match(_cpp_str, _cpp_pattern, _cpp_caseSensitive); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::StringUtil::match */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     StringUtil()
 * Type:       constructor
 * Definition: Ogre::StringUtil::StringUtil
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StringUtil__1_1createStringUtil (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::StringUtil 
   
   // parameter conversions 
   
   // create new instance of class Ogre::StringUtil 
   Ogre::StringUtil* _cpp_this = new Ogre::StringUtil(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::StringUtil::StringUtil */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::StringUtil::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StringUtil__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::StringUtil 
   // cast pointer to C++ object 
   Ogre::StringUtil* _cpp_this = reinterpret_cast<Ogre::StringUtil*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::StringUtil::__delete */


/*
 * Class:      org.ogre4j.StringUtil
 * Method:     getBLANK()
 * Type:       getter for public attribute
 * Definition: const String Ogre::StringUtil::BLANK
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_StringUtil__1getBLANK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const std::string _cpp_result = Ogre::StringUtil::BLANK ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String Ogre::StringUtil::BLANK */
