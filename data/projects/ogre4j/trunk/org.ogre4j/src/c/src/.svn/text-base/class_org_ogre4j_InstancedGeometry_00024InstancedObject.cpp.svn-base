///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_InstancedGeometry_00024InstancedObject.h"

// import header files of original library
#include <OgreInstancedGeometry.h>



/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     InstancedObject()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::InstancedObject::InstancedObject
 * Signature:  (I)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1_1createInstancedObject_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint index
)
{
   // constructor of class Ogre::InstancedGeometry::InstancedObject 
   
   // parameter conversions 
  int _cpp_index = index; 
   
   // create new instance of class Ogre::InstancedGeometry::InstancedObject 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = new Ogre::InstancedGeometry::InstancedObject(_cpp_index); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::InstancedGeometry::InstancedObject::InstancedObject */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     InstancedObject()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::InstancedObject::InstancedObject
 * Signature:  (IOgre_SkeletonInstanceOgre_AnimationStateSet)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1_1createInstancedObject_1_1ivSkeletonInstancepAnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint index, 
  jlong skeleton, 
  jlong animations
)
{
   // constructor of class Ogre::InstancedGeometry::InstancedObject 
   
   // parameter conversions 
  int _cpp_index = index;
  Ogre::SkeletonInstance* _cpp_skeleton = reinterpret_cast< Ogre::SkeletonInstance* >(skeleton);
  Ogre::AnimationStateSet* _cpp_animations = reinterpret_cast< Ogre::AnimationStateSet* >(animations); 
   
   // create new instance of class Ogre::InstancedGeometry::InstancedObject 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = new Ogre::InstancedGeometry::InstancedObject(_cpp_index, _cpp_skeleton, _cpp_animations); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::InstancedGeometry::InstancedObject::InstancedObject */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setPosition_1_1Vector3v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp_position = reinterpret_cast< Ogre::Vector3* >(position); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPosition(*_cpp_position);
} /* void Ogre::InstancedGeometry::InstancedObject::setPosition */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getPosition()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::InstancedGeometry::InstancedObject::getPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getPosition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::InstancedGeometry::InstancedObject::getPosition */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     yaw()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::yaw
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1yaw_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->yaw(*_cpp_angle);
} /* void Ogre::InstancedGeometry::InstancedObject::yaw */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     pitch()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::pitch
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1pitch_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->pitch(*_cpp_angle);
} /* void Ogre::InstancedGeometry::InstancedObject::pitch */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     roll()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::roll
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1roll_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->roll(*_cpp_angle);
} /* void Ogre::InstancedGeometry::InstancedObject::roll */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     rotate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::rotate
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1rotate_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_q = reinterpret_cast< const Ogre::Quaternion* >(q); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->rotate(*_cpp_q);
} /* void Ogre::InstancedGeometry::InstancedObject::rotate */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setScale()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setScale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setScale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong scale
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_scale = reinterpret_cast< const Ogre::Vector3* >(scale); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setScale(*_cpp_scale);
} /* void Ogre::InstancedGeometry::InstancedObject::setScale */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setOrientation()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setOrientation
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setOrientation_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_q = reinterpret_cast< const Ogre::Quaternion* >(q); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setOrientation(*_cpp_q);
} /* void Ogre::InstancedGeometry::InstancedObject::setOrientation */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setPositionAndOrientation()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setPositionAndOrientation
 * Signature:  (Ogre_Vector3Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setPositionAndOrientation_1_1Vector3vQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p, 
  jlong q
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp_p = reinterpret_cast< Ogre::Vector3* >(p);
  const Ogre::Quaternion* _cpp_q = reinterpret_cast< const Ogre::Quaternion* >(q); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPositionAndOrientation(*_cpp_p, *_cpp_q);
} /* void Ogre::InstancedGeometry::InstancedObject::setPositionAndOrientation */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getOrientation()
 * Type:       non-virtual method
 * Definition: Quaternion& Ogre::InstancedGeometry::InstancedObject::getOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getOrientation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->getOrientation() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion& Ogre::InstancedGeometry::InstancedObject::getOrientation */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     addBucketToList()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::addBucketToList
 * Signature:  (Ogre_InstancedGeometry_GeometryBucket)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1addBucketToList_1_1GeometryBucketp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bucket
)
{
   // parameter conversions 
  Ogre::InstancedGeometry::GeometryBucket* _cpp_bucket = reinterpret_cast< Ogre::InstancedGeometry::GeometryBucket* >(bucket); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addBucketToList(_cpp_bucket);
} /* void Ogre::InstancedGeometry::InstancedObject::addBucketToList */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     needUpdate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::needUpdate
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1needUpdate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->needUpdate();
} /* void Ogre::InstancedGeometry::InstancedObject::needUpdate */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getGeometryBucketList()
 * Type:       non-virtual method
 * Definition: GeometryBucketList& Ogre::InstancedGeometry::InstancedObject::getGeometryBucketList
 * Signature:  ()Ogre_InstancedGeometry_InstancedObject_GeometryBucketList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getGeometryBucketList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::InstancedObject::GeometryBucketList* _cpp_result = & _cpp_this->getGeometryBucketList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GeometryBucketList& Ogre::InstancedGeometry::InstancedObject::getGeometryBucketList */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     translate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::translate
 * Signature:  (Ogre_Matrix3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1translate_1_1Matrix3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axes, 
  jlong move
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_axes = reinterpret_cast< const Ogre::Matrix3* >(axes);
  const Ogre::Vector3* _cpp_move = reinterpret_cast< const Ogre::Vector3* >(move); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->translate(*_cpp_axes, *_cpp_move);
} /* void Ogre::InstancedGeometry::InstancedObject::translate */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     translate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::translate
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1translate_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_d = reinterpret_cast< const Ogre::Vector3* >(d); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->translate(*_cpp_d);
} /* void Ogre::InstancedGeometry::InstancedObject::translate */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getLocalAxes()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::InstancedGeometry::InstancedObject::getLocalAxes
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getLocalAxes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->getLocalAxes() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::InstancedGeometry::InstancedObject::getLocalAxes */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     updateAnimation()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::updateAnimation
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1updateAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateAnimation();
} /* void Ogre::InstancedGeometry::InstancedObject::updateAnimation */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getAnimationState()
 * Type:       non-virtual method
 * Definition: AnimationState* Ogre::InstancedGeometry::InstancedObject::getAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationState* _cpp_result = _cpp_this->getAnimationState(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationState* Ogre::InstancedGeometry::InstancedObject::getAnimationState */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getSkeletonInstance()
 * Type:       non-virtual method
 * Definition: SkeletonInstance* Ogre::InstancedGeometry::InstancedObject::getSkeletonInstance
 * Signature:  ()Ogre_SkeletonInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getSkeletonInstance (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SkeletonInstance* _cpp_result = _cpp_this->getSkeletonInstance() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SkeletonInstance* Ogre::InstancedGeometry::InstancedObject::getSkeletonInstance */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::InstancedGeometry::InstancedObject::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::InstancedGeometry::InstancedObject 
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::InstancedObject* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::InstancedObject*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::InstancedGeometry::InstancedObject::__delete */
