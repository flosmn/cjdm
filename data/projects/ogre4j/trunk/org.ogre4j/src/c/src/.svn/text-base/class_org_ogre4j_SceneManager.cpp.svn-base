///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_SceneManager.h"

// import header files of original library
#include <OgreSceneManager.h>



/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::SceneManager::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_SceneManager__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::SceneManager::getName */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getTypeName()
 * Type:       pure virtual method
 * Definition: virtual const String& Ogre::SceneManager::getTypeName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_SceneManager__1getTypeName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getTypeName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::SceneManager::getTypeName */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createCamera()
 * Type:       virtual method
 * Definition: virtual Camera* Ogre::SceneManager::createCamera
 * Signature:  (std_string)Ogre_Camera
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createCamera_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Camera* _cpp_result = _cpp_this->createCamera(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Camera* Ogre::SceneManager::createCamera */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCamera()
 * Type:       virtual method
 * Definition: virtual Camera* Ogre::SceneManager::getCamera
 * Signature:  (std_string)Ogre_Camera
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getCamera_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Camera* _cpp_result = _cpp_this->getCamera(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Camera* Ogre::SceneManager::getCamera */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasCamera()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasCamera
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasCamera_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasCamera(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasCamera */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyCamera(_cpp_cam);
} /* virtual void Ogre::SceneManager::destroyCamera */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyCamera
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyCamera_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyCamera(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyCamera */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllCameras()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllCameras
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllCameras (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllCameras();
} /* virtual void Ogre::SceneManager::destroyAllCameras */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createLight()
 * Type:       virtual method
 * Definition: virtual Light* Ogre::SceneManager::createLight
 * Signature:  (std_string)Ogre_Light
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createLight_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Light* _cpp_result = _cpp_this->createLight(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Light* Ogre::SceneManager::createLight */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLight()
 * Type:       virtual method
 * Definition: virtual Light* Ogre::SceneManager::getLight
 * Signature:  (std_string)Ogre_Light
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLight_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Light* _cpp_result = _cpp_this->getLight(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Light* Ogre::SceneManager::getLight */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasLight()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasLight
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasLight_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasLight(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasLight */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLightClippingPlanes()
 * Type:       virtual method
 * Definition: virtual const PlaneList& Ogre::SceneManager::getLightClippingPlanes
 * Signature:  (Ogre_Light)Ogre_PlaneList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLightClippingPlanes_1_1Lightp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  Ogre::Light* _cpp_l = reinterpret_cast< Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PlaneList* _cpp_result = & _cpp_this->getLightClippingPlanes(_cpp_l) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const PlaneList& Ogre::SceneManager::getLightClippingPlanes */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLightScissorRect()
 * Type:       virtual method
 * Definition: virtual const RealRect& Ogre::SceneManager::getLightScissorRect
 * Signature:  (Ogre_LightOgre_Camera)Ogre_RealRect
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLightScissorRect_1_1LightpCameraP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l, 
  jlong cam
)
{
   // parameter conversions 
  Ogre::Light* _cpp_l = reinterpret_cast< Ogre::Light* >(l);
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RealRect* _cpp_result = & _cpp_this->getLightScissorRect(_cpp_l, _cpp_cam) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const RealRect& Ogre::SceneManager::getLightScissorRect */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyLight()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyLight
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyLight_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyLight(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyLight */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyLight()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyLight
 * Signature:  (Ogre_Light)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyLight_1_1Lightp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light
)
{
   // parameter conversions 
  Ogre::Light* _cpp_light = reinterpret_cast< Ogre::Light* >(light); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyLight(_cpp_light);
} /* virtual void Ogre::SceneManager::destroyLight */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllLights()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllLights
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllLights (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllLights();
} /* virtual void Ogre::SceneManager::destroyAllLights */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _notifyLightsDirty()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_notifyLightsDirty
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1notifyLightsDirty (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyLightsDirty();
} /* virtual void Ogre::SceneManager::_notifyLightsDirty */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _getLightsDirtyCounter()
 * Type:       non-virtual method
 * Definition: ulong Ogre::SceneManager::_getLightsDirtyCounter
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1getLightsDirtyCounter_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->_getLightsDirtyCounter() ; 
   return _cpp_result;
} /* ulong Ogre::SceneManager::_getLightsDirtyCounter */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _getLightsAffectingFrustum()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::SceneManager::_getLightsAffectingFrustum
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1getLightsAffectingFrustum_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->_getLightsAffectingFrustum() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::SceneManager::_getLightsAffectingFrustum */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _populateLightList()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_populateLightList
 * Signature:  (Ogre_Vector3floatOgre_LightList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1populateLightList_1_1Vector3RRealvLightListr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position, 
  jfloat radius, 
  jlong destList
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_position = reinterpret_cast< const Ogre::Vector3* >(position);
  float _cpp_radius = radius;
  Ogre::LightList* _cpp_destList = reinterpret_cast< Ogre::LightList* >(destList); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_populateLightList(*_cpp_position, _cpp_radius, *_cpp_destList);
} /* virtual void Ogre::SceneManager::_populateLightList */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::createSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createSceneNode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->createSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::SceneManager::createSceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::createSceneNode
 * Signature:  (std_string)Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createSceneNode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->createSceneNode(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::SceneManager::createSceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroySceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroySceneNode
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroySceneNode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroySceneNode(_cpp_name);
} /* virtual void Ogre::SceneManager::destroySceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroySceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroySceneNode
 * Signature:  (Ogre_SceneNode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroySceneNode_1_1SceneNodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sn
)
{
   // parameter conversions 
  Ogre::SceneNode* _cpp_sn = reinterpret_cast< Ogre::SceneNode* >(sn); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroySceneNode(_cpp_sn);
} /* virtual void Ogre::SceneManager::destroySceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getRootSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getRootSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getRootSceneNode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getRootSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::SceneManager::getRootSceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSceneNode
 * Signature:  (std_string)Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSceneNode_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getSceneNode(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::SceneManager::getSceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasSceneNode()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasSceneNode
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasSceneNode_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasSceneNode(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasSceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createEntity()
 * Type:       virtual method
 * Definition: virtual Entity* Ogre::SceneManager::createEntity
 * Signature:  (std_stringstd_string)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createEntity_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring entityName, 
  jstring meshName
)
{
   // parameter conversions 
  std::string _cpp_entityName = ""; org::xbig::jni::to_stdstring(_jni_env_, entityName, _cpp_entityName); // calls c-tor only. Not operator= .;
  std::string _cpp_meshName = ""; org::xbig::jni::to_stdstring(_jni_env_, meshName, _cpp_meshName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity* _cpp_result = _cpp_this->createEntity(_cpp_entityName, _cpp_meshName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Entity* Ogre::SceneManager::createEntity */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createEntity()
 * Type:       virtual method
 * Definition: virtual Entity* Ogre::SceneManager::createEntity
 * Signature:  (std_stringOgre_SceneManager_PrefabType)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createEntity_1_1StringRPrefabTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring entityName, 
  jint ptype
)
{
   // parameter conversions 
  std::string _cpp_entityName = ""; org::xbig::jni::to_stdstring(_jni_env_, entityName, _cpp_entityName); // calls c-tor only. Not operator= .;
  Ogre::SceneManager::PrefabType _cpp_ptype = (Ogre::SceneManager::PrefabType)ptype; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity* _cpp_result = _cpp_this->createEntity(_cpp_entityName, _cpp_ptype) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Entity* Ogre::SceneManager::createEntity */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getEntity()
 * Type:       virtual method
 * Definition: virtual Entity* Ogre::SceneManager::getEntity
 * Signature:  (std_string)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getEntity_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity* _cpp_result = _cpp_this->getEntity(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Entity* Ogre::SceneManager::getEntity */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasEntity()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasEntity
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasEntity_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEntity(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasEntity */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyEntity()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyEntity
 * Signature:  (Ogre_Entity)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyEntity_1_1Entityp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ent
)
{
   // parameter conversions 
  Ogre::Entity* _cpp_ent = reinterpret_cast< Ogre::Entity* >(ent); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyEntity(_cpp_ent);
} /* virtual void Ogre::SceneManager::destroyEntity */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyEntity()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyEntity
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyEntity_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyEntity(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyEntity */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllEntities()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllEntities
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllEntities (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllEntities();
} /* virtual void Ogre::SceneManager::destroyAllEntities */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createManualObject()
 * Type:       virtual method
 * Definition: virtual ManualObject* Ogre::SceneManager::createManualObject
 * Signature:  (std_string)Ogre_ManualObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createManualObject_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ManualObject* _cpp_result = _cpp_this->createManualObject(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ManualObject* Ogre::SceneManager::createManualObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getManualObject()
 * Type:       virtual method
 * Definition: virtual ManualObject* Ogre::SceneManager::getManualObject
 * Signature:  (std_string)Ogre_ManualObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getManualObject_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ManualObject* _cpp_result = _cpp_this->getManualObject(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ManualObject* Ogre::SceneManager::getManualObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasManualObject()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasManualObject
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasManualObject_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasManualObject(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasManualObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyManualObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyManualObject
 * Signature:  (Ogre_ManualObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyManualObject_1_1ManualObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::ManualObject* _cpp_obj = reinterpret_cast< Ogre::ManualObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyManualObject(_cpp_obj);
} /* virtual void Ogre::SceneManager::destroyManualObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyManualObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyManualObject
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyManualObject_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyManualObject(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyManualObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllManualObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllManualObjects
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllManualObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllManualObjects();
} /* virtual void Ogre::SceneManager::destroyAllManualObjects */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createBillboardChain()
 * Type:       virtual method
 * Definition: virtual BillboardChain* Ogre::SceneManager::createBillboardChain
 * Signature:  (std_string)Ogre_BillboardChain
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createBillboardChain_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardChain* _cpp_result = _cpp_this->createBillboardChain(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual BillboardChain* Ogre::SceneManager::createBillboardChain */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getBillboardChain()
 * Type:       virtual method
 * Definition: virtual BillboardChain* Ogre::SceneManager::getBillboardChain
 * Signature:  (std_string)Ogre_BillboardChain
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getBillboardChain_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardChain* _cpp_result = _cpp_this->getBillboardChain(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual BillboardChain* Ogre::SceneManager::getBillboardChain */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasBillboardChain()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasBillboardChain
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasBillboardChain_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasBillboardChain(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasBillboardChain */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardChain()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardChain
 * Signature:  (Ogre_BillboardChain)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardChain_1_1BillboardChainp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::BillboardChain* _cpp_obj = reinterpret_cast< Ogre::BillboardChain* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyBillboardChain(_cpp_obj);
} /* virtual void Ogre::SceneManager::destroyBillboardChain */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardChain()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardChain
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardChain_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyBillboardChain(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyBillboardChain */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllBillboardChains()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllBillboardChains
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllBillboardChains (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllBillboardChains();
} /* virtual void Ogre::SceneManager::destroyAllBillboardChains */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createRibbonTrail()
 * Type:       virtual method
 * Definition: virtual RibbonTrail* Ogre::SceneManager::createRibbonTrail
 * Signature:  (std_string)Ogre_RibbonTrail
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createRibbonTrail_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RibbonTrail* _cpp_result = _cpp_this->createRibbonTrail(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RibbonTrail* Ogre::SceneManager::createRibbonTrail */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getRibbonTrail()
 * Type:       virtual method
 * Definition: virtual RibbonTrail* Ogre::SceneManager::getRibbonTrail
 * Signature:  (std_string)Ogre_RibbonTrail
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getRibbonTrail_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RibbonTrail* _cpp_result = _cpp_this->getRibbonTrail(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RibbonTrail* Ogre::SceneManager::getRibbonTrail */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasRibbonTrail()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasRibbonTrail
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasRibbonTrail_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasRibbonTrail(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasRibbonTrail */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyRibbonTrail()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyRibbonTrail
 * Signature:  (Ogre_RibbonTrail)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyRibbonTrail_1_1RibbonTrailp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::RibbonTrail* _cpp_obj = reinterpret_cast< Ogre::RibbonTrail* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyRibbonTrail(_cpp_obj);
} /* virtual void Ogre::SceneManager::destroyRibbonTrail */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyRibbonTrail()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyRibbonTrail
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyRibbonTrail_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyRibbonTrail(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyRibbonTrail */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllRibbonTrails()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllRibbonTrails
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllRibbonTrails (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllRibbonTrails();
} /* virtual void Ogre::SceneManager::destroyAllRibbonTrails */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createParticleSystem()
 * Type:       virtual method
 * Definition: virtual ParticleSystem* Ogre::SceneManager::createParticleSystem
 * Signature:  (std_stringstd_string)Ogre_ParticleSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createParticleSystem_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring templateName
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_templateName = ""; org::xbig::jni::to_stdstring(_jni_env_, templateName, _cpp_templateName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleSystem* _cpp_result = _cpp_this->createParticleSystem(_cpp_name, _cpp_templateName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ParticleSystem* Ogre::SceneManager::createParticleSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createParticleSystem()
 * Type:       virtual method
 * Definition: virtual ParticleSystem* Ogre::SceneManager::createParticleSystem
 * Signature:  (std_stringIstd_string)Ogre_ParticleSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createParticleSystem_1_1StringRivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint quota, 
  jstring resourceGroup
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  size_t _cpp_quota = quota;
  std::string _cpp_resourceGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceGroup, _cpp_resourceGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleSystem* _cpp_result = _cpp_this->createParticleSystem(_cpp_name, _cpp_quota, _cpp_resourceGroup) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ParticleSystem* Ogre::SceneManager::createParticleSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getParticleSystem()
 * Type:       virtual method
 * Definition: virtual ParticleSystem* Ogre::SceneManager::getParticleSystem
 * Signature:  (std_string)Ogre_ParticleSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getParticleSystem_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleSystem* _cpp_result = _cpp_this->getParticleSystem(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ParticleSystem* Ogre::SceneManager::getParticleSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasParticleSystem()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasParticleSystem
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasParticleSystem_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasParticleSystem(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasParticleSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyParticleSystem()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyParticleSystem
 * Signature:  (Ogre_ParticleSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyParticleSystem_1_1ParticleSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::ParticleSystem* _cpp_obj = reinterpret_cast< Ogre::ParticleSystem* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyParticleSystem(_cpp_obj);
} /* virtual void Ogre::SceneManager::destroyParticleSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyParticleSystem()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyParticleSystem
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyParticleSystem_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyParticleSystem(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyParticleSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllParticleSystems()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllParticleSystems
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllParticleSystems (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllParticleSystems();
} /* virtual void Ogre::SceneManager::destroyAllParticleSystems */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     clearScene()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::clearScene
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1clearScene (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearScene();
} /* virtual void Ogre::SceneManager::clearScene */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setAmbientLight()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManager::setAmbientLight
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setAmbientLight_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAmbientLight(*_cpp_colour);
} /* void Ogre::SceneManager::setAmbientLight */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAmbientLight()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::SceneManager::getAmbientLight
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAmbientLight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getAmbientLight() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::SceneManager::getAmbientLight */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     prepareWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::prepareWorldGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1prepareWorldGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepareWorldGeometry(_cpp_filename);
} /* virtual void Ogre::SceneManager::prepareWorldGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     prepareWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::prepareWorldGeometry
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1prepareWorldGeometry_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring typeName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepareWorldGeometry(*_cpp_stream, _cpp_typeName);
} /* virtual void Ogre::SceneManager::prepareWorldGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setWorldGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWorldGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWorldGeometry(_cpp_filename);
} /* virtual void Ogre::SceneManager::setWorldGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setWorldGeometry
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWorldGeometry_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring typeName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWorldGeometry(*_cpp_stream, _cpp_typeName);
} /* virtual void Ogre::SceneManager::setWorldGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     estimateWorldGeometry()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::SceneManager::estimateWorldGeometry
 * Signature:  (std_string)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1estimateWorldGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->estimateWorldGeometry(_cpp_filename) ; 
   return _cpp_result;
} /* virtual size_t Ogre::SceneManager::estimateWorldGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     estimateWorldGeometry()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::SceneManager::estimateWorldGeometry
 * Signature:  (Ogre_DataStreamPtrstd_string)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1estimateWorldGeometry_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring typeName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->estimateWorldGeometry(*_cpp_stream, _cpp_typeName) ; 
   return _cpp_result;
} /* virtual size_t Ogre::SceneManager::estimateWorldGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSuggestedViewpoint()
 * Type:       virtual method
 * Definition: virtual ViewPoint Ogre::SceneManager::getSuggestedViewpoint
 * Signature:  (Z)Ogre_ViewPoint
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSuggestedViewpoint_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean random
)
{
   // parameter conversions 
  bool _cpp_random = random ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ViewPoint* _cpp_result = new Ogre::ViewPoint( _cpp_this->getSuggestedViewpoint(_cpp_random) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ViewPoint Ogre::SceneManager::getSuggestedViewpoint */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setOption()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::setOption
 * Signature:  (std_stringV)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1setOption_1_1StringRvP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey, 
  jlong pValue
)
{
   // parameter conversions 
  std::string _cpp_strKey = ""; org::xbig::jni::to_stdstring(_jni_env_, strKey, _cpp_strKey); // calls c-tor only. Not operator= .;
  const void* _cpp_pValue = reinterpret_cast<void*>(pValue); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setOption(_cpp_strKey, _cpp_pValue) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::setOption */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getOption()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getOption
 * Signature:  (std_stringV)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getOption_1_1StringRvp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey, 
  jlong pDestValue
)
{
   // parameter conversions 
  std::string _cpp_strKey = ""; org::xbig::jni::to_stdstring(_jni_env_, strKey, _cpp_strKey); // calls c-tor only. Not operator= .;
  void* _cpp_pDestValue = reinterpret_cast<void*>(pDestValue); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getOption(_cpp_strKey, _cpp_pDestValue) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getOption */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasOption()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasOption
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasOption_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey
)
{
   // parameter conversions 
  std::string _cpp_strKey = ""; org::xbig::jni::to_stdstring(_jni_env_, strKey, _cpp_strKey); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasOption(_cpp_strKey) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasOption */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getOptionValues()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getOptionValues
 * Signature:  (std_stringOgre_StringVector)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getOptionValues_1_1StringRStringVectorr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey, 
  jlong refValueList
)
{
   // parameter conversions 
  std::string _cpp_strKey = ""; org::xbig::jni::to_stdstring(_jni_env_, strKey, _cpp_strKey); // calls c-tor only. Not operator= .;
  Ogre::StringVector* _cpp_refValueList = reinterpret_cast< Ogre::StringVector* >(refValueList); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getOptionValues(_cpp_strKey, *_cpp_refValueList) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getOptionValues */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getOptionKeys()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getOptionKeys
 * Signature:  (Ogre_StringVector)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getOptionKeys_1_1StringVectorr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong refKeys
)
{
   // parameter conversions 
  Ogre::StringVector* _cpp_refKeys = reinterpret_cast< Ogre::StringVector* >(refKeys); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getOptionKeys(*_cpp_refKeys) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getOptionKeys */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _updateSceneGraph()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_updateSceneGraph
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1updateSceneGraph_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateSceneGraph(_cpp_cam);
} /* virtual void Ogre::SceneManager::_updateSceneGraph */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _findVisibleObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_findVisibleObjects
 * Signature:  (Ogre_CameraOgre_VisibleObjectsBoundsInfoZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1findVisibleObjects_1_1CamerapVisibleObjectsBoundsInfopbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam, 
  jlong visibleBounds, 
  jboolean onlyShadowCasters
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam);
  Ogre::VisibleObjectsBoundsInfo* _cpp_visibleBounds = reinterpret_cast< Ogre::VisibleObjectsBoundsInfo* >(visibleBounds);
  bool _cpp_onlyShadowCasters = onlyShadowCasters ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_findVisibleObjects(_cpp_cam, _cpp_visibleBounds, _cpp_onlyShadowCasters);
} /* virtual void Ogre::SceneManager::_findVisibleObjects */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _applySceneAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_applySceneAnimations
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1applySceneAnimations (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_applySceneAnimations();
} /* virtual void Ogre::SceneManager::_applySceneAnimations */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _renderVisibleObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_renderVisibleObjects
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1renderVisibleObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_renderVisibleObjects();
} /* virtual void Ogre::SceneManager::_renderVisibleObjects */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _renderScene()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_renderScene
 * Signature:  (Ogre_CameraOgre_ViewportZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1renderScene_1_1CamerapViewportpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong camera, 
  jlong vp, 
  jboolean includeOverlays
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_camera = reinterpret_cast< Ogre::Camera* >(camera);
  Ogre::Viewport* _cpp_vp = reinterpret_cast< Ogre::Viewport* >(vp);
  bool _cpp_includeOverlays = includeOverlays ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_renderScene(_cpp_camera, _cpp_vp, _cpp_includeOverlays);
} /* virtual void Ogre::SceneManager::_renderScene */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _queueSkiesForRendering()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_queueSkiesForRendering
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1queueSkiesForRendering_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_queueSkiesForRendering(_cpp_cam);
} /* virtual void Ogre::SceneManager::_queueSkiesForRendering */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setDestinationRenderSystem()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setDestinationRenderSystem
 * Signature:  (Ogre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setDestinationRenderSystem_1_1RenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sys
)
{
   // parameter conversions 
  Ogre::RenderSystem* _cpp_sys = reinterpret_cast< Ogre::RenderSystem* >(sys); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setDestinationRenderSystem(_cpp_sys);
} /* virtual void Ogre::SceneManager::_setDestinationRenderSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSkyPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSkyPlane
 * Signature:  (ZOgre_Planestd_stringfloatfloatZfloatIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSkyPlane_1_1bvPlaneRStringRRealvRealvbvRealvivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jlong plane, 
  jstring materialName, 
  jfloat scale, 
  jfloat tiling, 
  jboolean drawFirst, 
  jfloat bow, 
  jint xsegments, 
  jint ysegments, 
  jstring groupName
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane);
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .;
  float _cpp_scale = scale;
  float _cpp_tiling = tiling;
  bool _cpp_drawFirst = drawFirst ? true : false;
  float _cpp_bow = bow;
  int _cpp_xsegments = xsegments;
  int _cpp_ysegments = ysegments;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSkyPlane(_cpp_enable, *_cpp_plane, _cpp_materialName, _cpp_scale, _cpp_tiling, _cpp_drawFirst, _cpp_bow, _cpp_xsegments, _cpp_ysegments, _cpp_groupName);
} /* virtual void Ogre::SceneManager::setSkyPlane */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setSkyPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setSkyPlane
 * Signature:  (ZOgre_Planestd_stringfloatfloatunsigned_charfloatIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setSkyPlane_1_1bvPlaneRStringRRealvRealvuint8vRealvivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jlong plane, 
  jstring materialName, 
  jfloat scale, 
  jfloat tiling, 
  jshort renderQueue, 
  jfloat bow, 
  jint xsegments, 
  jint ysegments, 
  jstring groupName
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane);
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .;
  float _cpp_scale = scale;
  float _cpp_tiling = tiling;
  unsigned char _cpp_renderQueue = renderQueue;
  float _cpp_bow = bow;
  int _cpp_xsegments = xsegments;
  int _cpp_ysegments = ysegments;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setSkyPlane(_cpp_enable, *_cpp_plane, _cpp_materialName, _cpp_scale, _cpp_tiling, _cpp_renderQueue, _cpp_bow, _cpp_xsegments, _cpp_ysegments, _cpp_groupName);
} /* virtual void Ogre::SceneManager::_setSkyPlane */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isSkyPlaneEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isSkyPlaneEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isSkyPlaneEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isSkyPlaneEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isSkyPlaneEnabled */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyPlaneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSkyPlaneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyPlaneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getSkyPlaneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::SceneManager::getSkyPlaneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyPlaneGenParameters()
 * Type:       virtual method
 * Definition: virtual const SkyPlaneGenParameters& Ogre::SceneManager::getSkyPlaneGenParameters
 * Signature:  ()Ogre_SceneManager_SkyPlaneGenParameters
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyPlaneGenParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager::SkyPlaneGenParameters* _cpp_result = & _cpp_this->getSkyPlaneGenParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const SkyPlaneGenParameters& Ogre::SceneManager::getSkyPlaneGenParameters */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSkyBox()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSkyBox
 * Signature:  (Zstd_stringfloatZOgre_Quaternionstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSkyBox_1_1bvStringRRealvbvQuaternionRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat distance, 
  jboolean drawFirst, 
  jlong orientation, 
  jstring groupName
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .;
  float _cpp_distance = distance;
  bool _cpp_drawFirst = drawFirst ? true : false;
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation);
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSkyBox(_cpp_enable, _cpp_materialName, _cpp_distance, _cpp_drawFirst, *_cpp_orientation, _cpp_groupName);
} /* virtual void Ogre::SceneManager::setSkyBox */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setSkyBox()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setSkyBox
 * Signature:  (Zstd_stringfloatunsigned_charOgre_Quaternionstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setSkyBox_1_1bvStringRRealvuint8vQuaternionRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat distance, 
  jshort renderQueue, 
  jlong orientation, 
  jstring groupName
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .;
  float _cpp_distance = distance;
  unsigned char _cpp_renderQueue = renderQueue;
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation);
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setSkyBox(_cpp_enable, _cpp_materialName, _cpp_distance, _cpp_renderQueue, *_cpp_orientation, _cpp_groupName);
} /* virtual void Ogre::SceneManager::_setSkyBox */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isSkyBoxEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isSkyBoxEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isSkyBoxEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isSkyBoxEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isSkyBoxEnabled */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyBoxNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSkyBoxNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyBoxNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getSkyBoxNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::SceneManager::getSkyBoxNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyBoxGenParameters()
 * Type:       virtual method
 * Definition: virtual const SkyBoxGenParameters& Ogre::SceneManager::getSkyBoxGenParameters
 * Signature:  ()Ogre_SceneManager_SkyBoxGenParameters
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyBoxGenParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager::SkyBoxGenParameters* _cpp_result = & _cpp_this->getSkyBoxGenParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const SkyBoxGenParameters& Ogre::SceneManager::getSkyBoxGenParameters */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSkyDome()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSkyDome
 * Signature:  (Zstd_stringfloatfloatfloatZOgre_QuaternionIIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSkyDome_1_1bvStringRRealvRealvRealvbvQuaternionRivivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat curvature, 
  jfloat tiling, 
  jfloat distance, 
  jboolean drawFirst, 
  jlong orientation, 
  jint xsegments, 
  jint ysegments, 
  jint ysegments_keep, 
  jstring groupName
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .;
  float _cpp_curvature = curvature;
  float _cpp_tiling = tiling;
  float _cpp_distance = distance;
  bool _cpp_drawFirst = drawFirst ? true : false;
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation);
  int _cpp_xsegments = xsegments;
  int _cpp_ysegments = ysegments;
  int _cpp_ysegments_keep = ysegments_keep;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSkyDome(_cpp_enable, _cpp_materialName, _cpp_curvature, _cpp_tiling, _cpp_distance, _cpp_drawFirst, *_cpp_orientation, _cpp_xsegments, _cpp_ysegments, _cpp_ysegments_keep, _cpp_groupName);
} /* virtual void Ogre::SceneManager::setSkyDome */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setSkyDome()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setSkyDome
 * Signature:  (Zstd_stringfloatfloatfloatunsigned_charOgre_QuaternionIIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setSkyDome_1_1bvStringRRealvRealvRealvuint8vQuaternionRivivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat curvature, 
  jfloat tiling, 
  jfloat distance, 
  jshort renderQueue, 
  jlong orientation, 
  jint xsegments, 
  jint ysegments, 
  jint ysegments_keep, 
  jstring groupName
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .;
  float _cpp_curvature = curvature;
  float _cpp_tiling = tiling;
  float _cpp_distance = distance;
  unsigned char _cpp_renderQueue = renderQueue;
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation);
  int _cpp_xsegments = xsegments;
  int _cpp_ysegments = ysegments;
  int _cpp_ysegments_keep = ysegments_keep;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setSkyDome(_cpp_enable, _cpp_materialName, _cpp_curvature, _cpp_tiling, _cpp_distance, _cpp_renderQueue, *_cpp_orientation, _cpp_xsegments, _cpp_ysegments, _cpp_ysegments_keep, _cpp_groupName);
} /* virtual void Ogre::SceneManager::_setSkyDome */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isSkyDomeEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isSkyDomeEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isSkyDomeEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isSkyDomeEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isSkyDomeEnabled */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyDomeNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSkyDomeNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyDomeNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getSkyDomeNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::SceneManager::getSkyDomeNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyDomeGenParameters()
 * Type:       virtual method
 * Definition: virtual const SkyDomeGenParameters& Ogre::SceneManager::getSkyDomeGenParameters
 * Signature:  ()Ogre_SceneManager_SkyDomeGenParameters
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyDomeGenParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager::SkyDomeGenParameters* _cpp_result = & _cpp_this->getSkyDomeGenParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const SkyDomeGenParameters& Ogre::SceneManager::getSkyDomeGenParameters */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFog()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManager::setFog
 * Signature:  (Ogre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFog_1_1FogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
)
{
   // parameter conversions 
  Ogre::FogMode _cpp_mode = (Ogre::FogMode)mode;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  float _cpp_expDensity = expDensity;
  float _cpp_linearStart = linearStart;
  float _cpp_linearEnd = linearEnd; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFog(_cpp_mode, *_cpp_colour, _cpp_expDensity, _cpp_linearStart, _cpp_linearEnd);
} /* void Ogre::SceneManager::setFog */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogMode()
 * Type:       virtual method
 * Definition: virtual FogMode Ogre::SceneManager::getFogMode
 * Signature:  ()Ogre_FogMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getFogMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FogMode _cpp_result = _cpp_this->getFogMode() ; 
   return _cpp_result;
} /* virtual FogMode Ogre::SceneManager::getFogMode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::SceneManager::getFogColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getFogColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getFogColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::SceneManager::getFogColour */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogStart()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getFogStart
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getFogStart_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFogStart() ; 
   return _cpp_result;
} /* virtual Real Ogre::SceneManager::getFogStart */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogEnd()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getFogEnd
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getFogEnd_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFogEnd() ; 
   return _cpp_result;
} /* virtual Real Ogre::SceneManager::getFogEnd */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogDensity()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getFogDensity
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getFogDensity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFogDensity() ; 
   return _cpp_result;
} /* virtual Real Ogre::SceneManager::getFogDensity */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createBillboardSet()
 * Type:       virtual method
 * Definition: virtual BillboardSet* Ogre::SceneManager::createBillboardSet
 * Signature:  (std_stringI)Ogre_BillboardSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createBillboardSet_1_1StringRIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong poolSize
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned int _cpp_poolSize = poolSize; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardSet* _cpp_result = _cpp_this->createBillboardSet(_cpp_name, _cpp_poolSize) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual BillboardSet* Ogre::SceneManager::createBillboardSet */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getBillboardSet()
 * Type:       virtual method
 * Definition: virtual BillboardSet* Ogre::SceneManager::getBillboardSet
 * Signature:  (std_string)Ogre_BillboardSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getBillboardSet_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardSet* _cpp_result = _cpp_this->getBillboardSet(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual BillboardSet* Ogre::SceneManager::getBillboardSet */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasBillboardSet()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasBillboardSet
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasBillboardSet_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasBillboardSet(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasBillboardSet */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardSet()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardSet
 * Signature:  (Ogre_BillboardSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardSet_1_1BillboardSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong set
)
{
   // parameter conversions 
  Ogre::BillboardSet* _cpp_set = reinterpret_cast< Ogre::BillboardSet* >(set); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyBillboardSet(_cpp_set);
} /* virtual void Ogre::SceneManager::destroyBillboardSet */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardSet()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardSet
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardSet_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyBillboardSet(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyBillboardSet */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllBillboardSets()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllBillboardSets
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllBillboardSets (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllBillboardSets();
} /* virtual void Ogre::SceneManager::destroyAllBillboardSets */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setDisplaySceneNodes()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setDisplaySceneNodes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setDisplaySceneNodes_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean display
)
{
   // parameter conversions 
  bool _cpp_display = display ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDisplaySceneNodes(_cpp_display);
} /* virtual void Ogre::SceneManager::setDisplaySceneNodes */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getDisplaySceneNodes()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getDisplaySceneNodes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getDisplaySceneNodes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getDisplaySceneNodes() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getDisplaySceneNodes */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::SceneManager::createAnimation
 * Signature:  (std_stringfloat)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createAnimation_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jfloat length
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  float _cpp_length = length; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Animation* _cpp_result = _cpp_this->createAnimation(_cpp_name, _cpp_length) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Animation* Ogre::SceneManager::createAnimation */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::SceneManager::getAnimation
 * Signature:  (std_string)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimation_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Animation* _cpp_result = _cpp_this->getAnimation(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Animation* Ogre::SceneManager::getAnimation */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasAnimation()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasAnimation
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasAnimation_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasAnimation(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasAnimation */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAnimation()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAnimation
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAnimation(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyAnimation */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllAnimations
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllAnimations (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllAnimations();
} /* virtual void Ogre::SceneManager::destroyAllAnimations */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createAnimationState()
 * Type:       virtual method
 * Definition: virtual AnimationState* Ogre::SceneManager::createAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createAnimationState_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring animName
)
{
   // parameter conversions 
  std::string _cpp_animName = ""; org::xbig::jni::to_stdstring(_jni_env_, animName, _cpp_animName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationState* _cpp_result = _cpp_this->createAnimationState(_cpp_animName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimationState* Ogre::SceneManager::createAnimationState */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimationState()
 * Type:       virtual method
 * Definition: virtual AnimationState* Ogre::SceneManager::getAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring animName
)
{
   // parameter conversions 
  std::string _cpp_animName = ""; org::xbig::jni::to_stdstring(_jni_env_, animName, _cpp_animName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationState* _cpp_result = _cpp_this->getAnimationState(_cpp_animName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimationState* Ogre::SceneManager::getAnimationState */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasAnimationState()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasAnimationState
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasAnimationState(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasAnimationState */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAnimationState()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAnimationState
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAnimationState_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAnimationState(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyAnimationState */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllAnimationStates()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllAnimationStates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllAnimationStates (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllAnimationStates();
} /* virtual void Ogre::SceneManager::destroyAllAnimationStates */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     manualRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::manualRender
 * Signature:  (Ogre_RenderOperationOgre_PassOgre_ViewportOgre_Matrix4Ogre_Matrix4Ogre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1manualRender_1_1RenderOperationpPasspViewportpMatrix4RMatrix4RMatrix4Rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rend, 
  jlong pass, 
  jlong vp, 
  jlong worldMatrix, 
  jlong viewMatrix, 
  jlong projMatrix, 
  jboolean doBeginEndFrame
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_rend = reinterpret_cast< Ogre::RenderOperation* >(rend);
  Ogre::Pass* _cpp_pass = reinterpret_cast< Ogre::Pass* >(pass);
  Ogre::Viewport* _cpp_vp = reinterpret_cast< Ogre::Viewport* >(vp);
  const Ogre::Matrix4* _cpp_worldMatrix = reinterpret_cast< const Ogre::Matrix4* >(worldMatrix);
  const Ogre::Matrix4* _cpp_viewMatrix = reinterpret_cast< const Ogre::Matrix4* >(viewMatrix);
  const Ogre::Matrix4* _cpp_projMatrix = reinterpret_cast< const Ogre::Matrix4* >(projMatrix);
  bool _cpp_doBeginEndFrame = doBeginEndFrame ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->manualRender(_cpp_rend, _cpp_pass, _cpp_vp, *_cpp_worldMatrix, *_cpp_viewMatrix, *_cpp_projMatrix, _cpp_doBeginEndFrame);
} /* virtual void Ogre::SceneManager::manualRender */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getRenderQueue()
 * Type:       virtual method
 * Definition: virtual RenderQueue* Ogre::SceneManager::getRenderQueue
 * Signature:  ()Ogre_RenderQueue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getRenderQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueue* _cpp_result = _cpp_this->getRenderQueue() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderQueue* Ogre::SceneManager::getRenderQueue */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     addRenderQueueListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::addRenderQueueListener
 * Signature:  (Ogre_RenderQueueListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1addRenderQueueListener_1_1RenderQueueListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newListener
)
{
   // parameter conversions 
  Ogre::RenderQueueListener* _cpp_newListener = reinterpret_cast< Ogre::RenderQueueListener* >(newListener); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderQueueListener(_cpp_newListener);
} /* virtual void Ogre::SceneManager::addRenderQueueListener */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     removeRenderQueueListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::removeRenderQueueListener
 * Signature:  (Ogre_RenderQueueListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1removeRenderQueueListener_1_1RenderQueueListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong delListener
)
{
   // parameter conversions 
  Ogre::RenderQueueListener* _cpp_delListener = reinterpret_cast< Ogre::RenderQueueListener* >(delListener); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeRenderQueueListener(_cpp_delListener);
} /* virtual void Ogre::SceneManager::removeRenderQueueListener */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     addSpecialCaseRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::addSpecialCaseRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1addSpecialCaseRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
)
{
   // parameter conversions 
  unsigned char _cpp_qid = qid; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addSpecialCaseRenderQueue(_cpp_qid);
} /* virtual void Ogre::SceneManager::addSpecialCaseRenderQueue */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     removeSpecialCaseRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::removeSpecialCaseRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1removeSpecialCaseRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
)
{
   // parameter conversions 
  unsigned char _cpp_qid = qid; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeSpecialCaseRenderQueue(_cpp_qid);
} /* virtual void Ogre::SceneManager::removeSpecialCaseRenderQueue */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     clearSpecialCaseRenderQueues()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::clearSpecialCaseRenderQueues
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1clearSpecialCaseRenderQueues (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearSpecialCaseRenderQueues();
} /* virtual void Ogre::SceneManager::clearSpecialCaseRenderQueues */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSpecialCaseRenderQueueMode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSpecialCaseRenderQueueMode
 * Signature:  (Ogre_SceneManager_SpecialCaseRenderQueueMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSpecialCaseRenderQueueMode_1_1SpecialCaseRenderQueueModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::SceneManager::SpecialCaseRenderQueueMode _cpp_mode = (Ogre::SceneManager::SpecialCaseRenderQueueMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpecialCaseRenderQueueMode(_cpp_mode);
} /* virtual void Ogre::SceneManager::setSpecialCaseRenderQueueMode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSpecialCaseRenderQueueMode()
 * Type:       virtual method
 * Definition: virtual SpecialCaseRenderQueueMode Ogre::SceneManager::getSpecialCaseRenderQueueMode
 * Signature:  ()Ogre_SceneManager_SpecialCaseRenderQueueMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getSpecialCaseRenderQueueMode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager::SpecialCaseRenderQueueMode _cpp_result = _cpp_this->getSpecialCaseRenderQueueMode() ; 
   return _cpp_result;
} /* virtual SpecialCaseRenderQueueMode Ogre::SceneManager::getSpecialCaseRenderQueueMode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isRenderQueueToBeProcessed()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isRenderQueueToBeProcessed
 * Signature:  (unsigned_char)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isRenderQueueToBeProcessed_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
)
{
   // parameter conversions 
  unsigned char _cpp_qid = qid; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isRenderQueueToBeProcessed(_cpp_qid) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isRenderQueueToBeProcessed */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWorldGeometryRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setWorldGeometryRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWorldGeometryRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
)
{
   // parameter conversions 
  unsigned char _cpp_qid = qid; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWorldGeometryRenderQueue(_cpp_qid);
} /* virtual void Ogre::SceneManager::setWorldGeometryRenderQueue */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getWorldGeometryRenderQueue()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::SceneManager::getWorldGeometryRenderQueue
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_SceneManager__1getWorldGeometryRenderQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getWorldGeometryRenderQueue() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::SceneManager::getWorldGeometryRenderQueue */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     showBoundingBoxes()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::showBoundingBoxes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1showBoundingBoxes_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bShow
)
{
   // parameter conversions 
  bool _cpp_bShow = bShow ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->showBoundingBoxes(_cpp_bShow);
} /* virtual void Ogre::SceneManager::showBoundingBoxes */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShowBoundingBoxes()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShowBoundingBoxes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShowBoundingBoxes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getShowBoundingBoxes() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getShowBoundingBoxes */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _notifyAutotrackingSceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_notifyAutotrackingSceneNode
 * Signature:  (Ogre_SceneNodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1notifyAutotrackingSceneNode_1_1SceneNodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong node, 
  jboolean autoTrack
)
{
   // parameter conversions 
  Ogre::SceneNode* _cpp_node = reinterpret_cast< Ogre::SceneNode* >(node);
  bool _cpp_autoTrack = autoTrack ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAutotrackingSceneNode(_cpp_node, _cpp_autoTrack);
} /* virtual void Ogre::SceneManager::_notifyAutotrackingSceneNode */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createAABBQuery()
 * Type:       virtual method
 * Definition: virtual AxisAlignedBoxSceneQuery* Ogre::SceneManager::createAABBQuery
 * Signature:  (Ogre_AxisAlignedBoxJ)Ogre_AxisAlignedBoxSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createAABBQuery_1_1AxisAlignedBoxRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box, 
  jlong mask
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_box = reinterpret_cast< const Ogre::AxisAlignedBox* >(box);
  unsigned long _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBoxSceneQuery* _cpp_result = _cpp_this->createAABBQuery(*_cpp_box, _cpp_mask) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AxisAlignedBoxSceneQuery* Ogre::SceneManager::createAABBQuery */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createSphereQuery()
 * Type:       virtual method
 * Definition: virtual SphereSceneQuery* Ogre::SceneManager::createSphereQuery
 * Signature:  (Ogre_SphereJ)Ogre_SphereSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createSphereQuery_1_1SphereRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sphere, 
  jlong mask
)
{
   // parameter conversions 
  const Ogre::Sphere* _cpp_sphere = reinterpret_cast< const Ogre::Sphere* >(sphere);
  unsigned long _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SphereSceneQuery* _cpp_result = _cpp_this->createSphereQuery(*_cpp_sphere, _cpp_mask) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SphereSceneQuery* Ogre::SceneManager::createSphereQuery */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createPlaneBoundedVolumeQuery()
 * Type:       virtual method
 * Definition: virtual PlaneBoundedVolumeListSceneQuery* Ogre::SceneManager::createPlaneBoundedVolumeQuery
 * Signature:  (Ogre_PlaneBoundedVolumeListJ)Ogre_PlaneBoundedVolumeListSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createPlaneBoundedVolumeQuery_1_1PlaneBoundedVolumeListRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong volumes, 
  jlong mask
)
{
   // parameter conversions 
  const Ogre::PlaneBoundedVolumeList* _cpp_volumes = reinterpret_cast< const Ogre::PlaneBoundedVolumeList* >(volumes);
  unsigned long _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PlaneBoundedVolumeListSceneQuery* _cpp_result = _cpp_this->createPlaneBoundedVolumeQuery(*_cpp_volumes, _cpp_mask) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual PlaneBoundedVolumeListSceneQuery* Ogre::SceneManager::createPlaneBoundedVolumeQuery */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createRayQuery()
 * Type:       virtual method
 * Definition: virtual RaySceneQuery* Ogre::SceneManager::createRayQuery
 * Signature:  (Ogre_RayJ)Ogre_RaySceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createRayQuery_1_1RayRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ray, 
  jlong mask
)
{
   // parameter conversions 
  const Ogre::Ray* _cpp_ray = reinterpret_cast< const Ogre::Ray* >(ray);
  unsigned long _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RaySceneQuery* _cpp_result = _cpp_this->createRayQuery(*_cpp_ray, _cpp_mask) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RaySceneQuery* Ogre::SceneManager::createRayQuery */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createIntersectionQuery()
 * Type:       virtual method
 * Definition: virtual IntersectionSceneQuery* Ogre::SceneManager::createIntersectionQuery
 * Signature:  (J)Ogre_IntersectionSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createIntersectionQuery_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mask
)
{
   // parameter conversions 
  unsigned long _cpp_mask = mask; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IntersectionSceneQuery* _cpp_result = _cpp_this->createIntersectionQuery(_cpp_mask) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual IntersectionSceneQuery* Ogre::SceneManager::createIntersectionQuery */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyQuery()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyQuery
 * Signature:  (Ogre_SceneQuery)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyQuery_1_1SceneQueryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong query
)
{
   // parameter conversions 
  Ogre::SceneQuery* _cpp_query = reinterpret_cast< Ogre::SceneQuery* >(query); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyQuery(_cpp_query);
} /* virtual void Ogre::SceneManager::destroyQuery */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCameraIterator()
 * Type:       non-virtual method
 * Definition: CameraIterator Ogre::SceneManager::getCameraIterator
 * Signature:  ()Ogre_SceneManager_CameraIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getCameraIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager::CameraIterator* _cpp_result = new Ogre::SceneManager::CameraIterator( _cpp_this->getCameraIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CameraIterator Ogre::SceneManager::getCameraIterator */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimationIterator()
 * Type:       non-virtual method
 * Definition: AnimationIterator Ogre::SceneManager::getAnimationIterator
 * Signature:  ()Ogre_SceneManager_AnimationIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimationIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager::AnimationIterator* _cpp_result = new Ogre::SceneManager::AnimationIterator( _cpp_this->getAnimationIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationIterator Ogre::SceneManager::getAnimationIterator */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimationStateIterator()
 * Type:       non-virtual method
 * Definition: AnimationStateIterator Ogre::SceneManager::getAnimationStateIterator
 * Signature:  ()Ogre_AnimationStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimationStateIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationStateIterator* _cpp_result = new Ogre::AnimationStateIterator( _cpp_this->getAnimationStateIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationStateIterator Ogre::SceneManager::getAnimationStateIterator */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTechnique()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTechnique
 * Signature:  (Ogre_ShadowTechnique)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTechnique_1_1ShadowTechniquev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint technique
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_technique = (Ogre::ShadowTechnique)technique; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTechnique(_cpp_technique);
} /* virtual void Ogre::SceneManager::setShadowTechnique */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTechnique()
 * Type:       virtual method
 * Definition: virtual ShadowTechnique Ogre::SceneManager::getShadowTechnique
 * Signature:  ()Ogre_ShadowTechnique
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowTechnique _cpp_result = _cpp_this->getShadowTechnique() ; 
   return _cpp_result;
} /* virtual ShadowTechnique Ogre::SceneManager::getShadowTechnique */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShowDebugShadows()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShowDebugShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShowDebugShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean debug
)
{
   // parameter conversions 
  bool _cpp_debug = debug ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShowDebugShadows(_cpp_debug);
} /* virtual void Ogre::SceneManager::setShowDebugShadows */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShowDebugShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShowDebugShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShowDebugShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getShowDebugShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getShowDebugShadows */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowColour()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowColour(*_cpp_colour);
} /* virtual void Ogre::SceneManager::setShadowColour */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::SceneManager::getShadowColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getShadowColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::SceneManager::getShadowColour */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowDirectionalLightExtrusionDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowDirectionalLightExtrusionDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowDirectionalLightExtrusionDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowDirectionalLightExtrusionDistance(_cpp_dist);
} /* virtual void Ogre::SceneManager::setShadowDirectionalLightExtrusionDistance */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowDirectionalLightExtrusionDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowDirectionalLightExtrusionDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowDirectionalLightExtrusionDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShadowDirectionalLightExtrusionDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::SceneManager::getShadowDirectionalLightExtrusionDistance */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowFarDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowFarDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowFarDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat distance
)
{
   // parameter conversions 
  float _cpp_distance = distance; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowFarDistance(_cpp_distance);
} /* virtual void Ogre::SceneManager::setShadowFarDistance */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowFarDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowFarDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowFarDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShadowFarDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::SceneManager::getShadowFarDistance */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowFarDistanceSquared()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowFarDistanceSquared
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowFarDistanceSquared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShadowFarDistanceSquared() ; 
   return _cpp_result;
} /* virtual Real Ogre::SceneManager::getShadowFarDistanceSquared */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowIndexBufferSize()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowIndexBufferSize
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowIndexBufferSize_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint size
)
{
   // parameter conversions 
  size_t _cpp_size = size; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowIndexBufferSize(_cpp_size);
} /* virtual void Ogre::SceneManager::setShadowIndexBufferSize */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowIndexBufferSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::SceneManager::getShadowIndexBufferSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowIndexBufferSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getShadowIndexBufferSize() ; 
   return _cpp_result;
} /* virtual size_t Ogre::SceneManager::getShadowIndexBufferSize */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureSize()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureSize
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureSize_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint size
)
{
   // parameter conversions 
  unsigned short _cpp_size = size; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureSize(_cpp_size);
} /* virtual void Ogre::SceneManager::setShadowTextureSize */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureConfig()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureConfig
 * Signature:  (ISSOgre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureConfig_1_1ivHvHvPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowIndex, 
  jint width, 
  jint height, 
  jint format
)
{
   // parameter conversions 
  size_t _cpp_shadowIndex = shadowIndex;
  unsigned short _cpp_width = width;
  unsigned short _cpp_height = height;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureConfig(_cpp_shadowIndex, _cpp_width, _cpp_height, _cpp_format);
} /* virtual void Ogre::SceneManager::setShadowTextureConfig */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureConfig()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureConfig
 * Signature:  (IOgre_ShadowTextureConfig)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureConfig_1_1ivShadowTextureConfigR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowIndex, 
  jlong config
)
{
   // parameter conversions 
  size_t _cpp_shadowIndex = shadowIndex;
  const Ogre::ShadowTextureConfig* _cpp_config = reinterpret_cast< const Ogre::ShadowTextureConfig* >(config); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureConfig(_cpp_shadowIndex, *_cpp_config);
} /* virtual void Ogre::SceneManager::setShadowTextureConfig */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureConfigIterator()
 * Type:       non-virtual method
 * Definition: ConstShadowTextureConfigIterator Ogre::SceneManager::getShadowTextureConfigIterator
 * Signature:  ()Ogre_ConstShadowTextureConfigIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureConfigIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ConstShadowTextureConfigIterator* _cpp_result = new Ogre::ConstShadowTextureConfigIterator( _cpp_this->getShadowTextureConfigIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ConstShadowTextureConfigIterator Ogre::SceneManager::getShadowTextureConfigIterator */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTexturePixelFormat()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTexturePixelFormat
 * Signature:  (Ogre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTexturePixelFormat_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint fmt
)
{
   // parameter conversions 
  Ogre::PixelFormat _cpp_fmt = (Ogre::PixelFormat)fmt; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTexturePixelFormat(_cpp_fmt);
} /* virtual void Ogre::SceneManager::setShadowTexturePixelFormat */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureCount_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
)
{
   // parameter conversions 
  size_t _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureCount(_cpp_count);
} /* virtual void Ogre::SceneManager::setShadowTextureCount */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::SceneManager::getShadowTextureCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getShadowTextureCount() ; 
   return _cpp_result;
} /* size_t Ogre::SceneManager::getShadowTextureCount */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureCountPerLightType()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManager::setShadowTextureCountPerLightType
 * Signature:  (Ogre_Light_LightTypesI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureCountPerLightType_1_1Light_1LightTypesviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint type, 
  jint count
)
{
   // parameter conversions 
  Ogre::Light::LightTypes _cpp_type = (Ogre::Light::LightTypes)type;
  size_t _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureCountPerLightType(_cpp_type, _cpp_count);
} /* void Ogre::SceneManager::setShadowTextureCountPerLightType */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureCountPerLightType()
 * Type:       non-virtual method
 * Definition: size_t Ogre::SceneManager::getShadowTextureCountPerLightType
 * Signature:  (Ogre_Light_LightTypes)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureCountPerLightType_1_1Light_1LightTypesv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint type
)
{
   // parameter conversions 
  Ogre::Light::LightTypes _cpp_type = (Ogre::Light::LightTypes)type; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getShadowTextureCountPerLightType(_cpp_type) ; 
   return _cpp_result;
} /* size_t Ogre::SceneManager::getShadowTextureCountPerLightType */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureSettings()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureSettings
 * Signature:  (SSOgre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureSettings_1_1HvHvPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint size, 
  jint count, 
  jint fmt
)
{
   // parameter conversions 
  unsigned short _cpp_size = size;
  unsigned short _cpp_count = count;
  Ogre::PixelFormat _cpp_fmt = (Ogre::PixelFormat)fmt; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureSettings(_cpp_size, _cpp_count, _cpp_fmt);
} /* virtual void Ogre::SceneManager::setShadowTextureSettings */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTexture()
 * Type:       virtual method
 * Definition: virtual const TexturePtr& Ogre::SceneManager::getShadowTexture
 * Signature:  (I)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowTexture_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowIndex
)
{
   // parameter conversions 
  size_t _cpp_shadowIndex = shadowIndex; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = & _cpp_this->getShadowTexture(_cpp_shadowIndex) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const TexturePtr& Ogre::SceneManager::getShadowTexture */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowDirLightTextureOffset()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowDirLightTextureOffset
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowDirLightTextureOffset_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat offset
)
{
   // parameter conversions 
  float _cpp_offset = offset; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowDirLightTextureOffset(_cpp_offset);
} /* virtual void Ogre::SceneManager::setShadowDirLightTextureOffset */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowDirLightTextureOffset()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowDirLightTextureOffset
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowDirLightTextureOffset_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShadowDirLightTextureOffset() ; 
   return _cpp_result;
} /* virtual Real Ogre::SceneManager::getShadowDirLightTextureOffset */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureFadeStart()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureFadeStart
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureFadeStart_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fadeStart
)
{
   // parameter conversions 
  float _cpp_fadeStart = fadeStart; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureFadeStart(_cpp_fadeStart);
} /* virtual void Ogre::SceneManager::setShadowTextureFadeStart */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureFadeEnd()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureFadeEnd
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureFadeEnd_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fadeEnd
)
{
   // parameter conversions 
  float _cpp_fadeEnd = fadeEnd; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureFadeEnd(_cpp_fadeEnd);
} /* virtual void Ogre::SceneManager::setShadowTextureFadeEnd */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureSelfShadow()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureSelfShadow
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureSelfShadow_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean selfShadow
)
{
   // parameter conversions 
  bool _cpp_selfShadow = selfShadow ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureSelfShadow(_cpp_selfShadow);
} /* virtual void Ogre::SceneManager::setShadowTextureSelfShadow */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureSelfShadow()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShadowTextureSelfShadow
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureSelfShadow_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getShadowTextureSelfShadow() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getShadowTextureSelfShadow */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureCasterMaterial()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureCasterMaterial
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureCasterMaterial_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureCasterMaterial(_cpp_name);
} /* virtual void Ogre::SceneManager::setShadowTextureCasterMaterial */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureReceiverMaterial()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureReceiverMaterial
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureReceiverMaterial_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowTextureReceiverMaterial(_cpp_name);
} /* virtual void Ogre::SceneManager::setShadowTextureReceiverMaterial */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowCasterRenderBackFaces()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowCasterRenderBackFaces
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowCasterRenderBackFaces_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bf
)
{
   // parameter conversions 
  bool _cpp_bf = bf ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowCasterRenderBackFaces(_cpp_bf);
} /* virtual void Ogre::SceneManager::setShadowCasterRenderBackFaces */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowCasterRenderBackFaces()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShadowCasterRenderBackFaces
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShadowCasterRenderBackFaces_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getShadowCasterRenderBackFaces() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getShadowCasterRenderBackFaces */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowCameraSetup()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowCameraSetup
 * Signature:  (Ogre_ShadowCameraSetupPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowCameraSetup_1_1ShadowCameraSetupPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong shadowSetup
)
{
   // parameter conversions 
  const Ogre::ShadowCameraSetupPtr* _cpp_shadowSetup = reinterpret_cast< const Ogre::ShadowCameraSetupPtr* >(shadowSetup); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowCameraSetup(*_cpp_shadowSetup);
} /* virtual void Ogre::SceneManager::setShadowCameraSetup */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowCameraSetup()
 * Type:       virtual method
 * Definition: virtual const ShadowCameraSetupPtr& Ogre::SceneManager::getShadowCameraSetup
 * Signature:  ()Ogre_ShadowCameraSetupPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowCameraSetup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCameraSetupPtr* _cpp_result = & _cpp_this->getShadowCameraSetup() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ShadowCameraSetupPtr& Ogre::SceneManager::getShadowCameraSetup */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowUseInfiniteFarPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowUseInfiniteFarPlane
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowUseInfiniteFarPlane_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowUseInfiniteFarPlane(_cpp_enable);
} /* virtual void Ogre::SceneManager::setShadowUseInfiniteFarPlane */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueStencilBased()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueStencilBased
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueStencilBased_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isShadowTechniqueStencilBased() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isShadowTechniqueStencilBased */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueTextureBased()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueTextureBased
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueTextureBased_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isShadowTechniqueTextureBased() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isShadowTechniqueTextureBased */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueModulative()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueModulative
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueModulative_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isShadowTechniqueModulative() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isShadowTechniqueModulative */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueAdditive()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueAdditive
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueAdditive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isShadowTechniqueAdditive() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isShadowTechniqueAdditive */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueIntegrated()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueIntegrated
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueIntegrated_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isShadowTechniqueIntegrated() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isShadowTechniqueIntegrated */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueInUse()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueInUse
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueInUse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isShadowTechniqueInUse() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::isShadowTechniqueInUse */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowUseLightClipPlanes()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowUseLightClipPlanes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowUseLightClipPlanes_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowUseLightClipPlanes(_cpp_enabled);
} /* virtual void Ogre::SceneManager::setShadowUseLightClipPlanes */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowUseLightClipPlanes()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShadowUseLightClipPlanes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShadowUseLightClipPlanes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getShadowUseLightClipPlanes() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getShadowUseLightClipPlanes */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::addListener
 * Signature:  (Ogre_SceneManager_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
)
{
   // parameter conversions 
  Ogre::SceneManager::Listener* _cpp_s = reinterpret_cast< Ogre::SceneManager::Listener* >(s); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_s);
} /* virtual void Ogre::SceneManager::addListener */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::removeListener
 * Signature:  (Ogre_SceneManager_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
)
{
   // parameter conversions 
  Ogre::SceneManager::Listener* _cpp_s = reinterpret_cast< Ogre::SceneManager::Listener* >(s); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_s);
} /* virtual void Ogre::SceneManager::removeListener */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createStaticGeometry()
 * Type:       virtual method
 * Definition: virtual StaticGeometry* Ogre::SceneManager::createStaticGeometry
 * Signature:  (std_string)Ogre_StaticGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createStaticGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StaticGeometry* _cpp_result = _cpp_this->createStaticGeometry(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual StaticGeometry* Ogre::SceneManager::createStaticGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getStaticGeometry()
 * Type:       virtual method
 * Definition: virtual StaticGeometry* Ogre::SceneManager::getStaticGeometry
 * Signature:  (std_string)Ogre_StaticGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getStaticGeometry_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StaticGeometry* _cpp_result = _cpp_this->getStaticGeometry(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual StaticGeometry* Ogre::SceneManager::getStaticGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasStaticGeometry()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasStaticGeometry
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasStaticGeometry_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasStaticGeometry(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasStaticGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyStaticGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyStaticGeometry
 * Signature:  (Ogre_StaticGeometry)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyStaticGeometry_1_1StaticGeometryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong geom
)
{
   // parameter conversions 
  Ogre::StaticGeometry* _cpp_geom = reinterpret_cast< Ogre::StaticGeometry* >(geom); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyStaticGeometry(_cpp_geom);
} /* virtual void Ogre::SceneManager::destroyStaticGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyStaticGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyStaticGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyStaticGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyStaticGeometry(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyStaticGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllStaticGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllStaticGeometry
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllStaticGeometry (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllStaticGeometry();
} /* virtual void Ogre::SceneManager::destroyAllStaticGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual InstancedGeometry* Ogre::SceneManager::createInstancedGeometry
 * Signature:  (std_string)Ogre_InstancedGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createInstancedGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry* _cpp_result = _cpp_this->createInstancedGeometry(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual InstancedGeometry* Ogre::SceneManager::createInstancedGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual InstancedGeometry* Ogre::SceneManager::getInstancedGeometry
 * Signature:  (std_string)Ogre_InstancedGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getInstancedGeometry_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry* _cpp_result = _cpp_this->getInstancedGeometry(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual InstancedGeometry* Ogre::SceneManager::getInstancedGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyInstancedGeometry
 * Signature:  (Ogre_InstancedGeometry)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyInstancedGeometry_1_1InstancedGeometryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong geom
)
{
   // parameter conversions 
  Ogre::InstancedGeometry* _cpp_geom = reinterpret_cast< Ogre::InstancedGeometry* >(geom); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyInstancedGeometry(_cpp_geom);
} /* virtual void Ogre::SceneManager::destroyInstancedGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyInstancedGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyInstancedGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyInstancedGeometry(_cpp_name);
} /* virtual void Ogre::SceneManager::destroyInstancedGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllInstancedGeometry
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllInstancedGeometry (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllInstancedGeometry();
} /* virtual void Ogre::SceneManager::destroyAllInstancedGeometry */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createMovableObject()
 * Type:       virtual method
 * Definition: virtual MovableObject* Ogre::SceneManager::createMovableObject
 * Signature:  (std_stringstd_stringOgre_NameValuePairList)Ogre_MovableObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createMovableObject_1_1StringRStringRNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName, 
  jlong params
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .;
  const Ogre::NameValuePairList* _cpp_params = reinterpret_cast< const Ogre::NameValuePairList* >(params); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject* _cpp_result = _cpp_this->createMovableObject(_cpp_name, _cpp_typeName, _cpp_params) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObject* Ogre::SceneManager::createMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyMovableObject
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyMovableObject_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyMovableObject(_cpp_name, _cpp_typeName);
} /* virtual void Ogre::SceneManager::destroyMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyMovableObject
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyMovableObject_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_m = reinterpret_cast< Ogre::MovableObject* >(m); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyMovableObject(_cpp_m);
} /* virtual void Ogre::SceneManager::destroyMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllMovableObjectsByType()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllMovableObjectsByType
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllMovableObjectsByType_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllMovableObjectsByType(_cpp_typeName);
} /* virtual void Ogre::SceneManager::destroyAllMovableObjectsByType */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllMovableObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllMovableObjects
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllMovableObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllMovableObjects();
} /* virtual void Ogre::SceneManager::destroyAllMovableObjects */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getMovableObject()
 * Type:       virtual method
 * Definition: virtual MovableObject* Ogre::SceneManager::getMovableObject
 * Signature:  (std_stringstd_string)Ogre_MovableObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getMovableObject_1_1StringRStringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject* _cpp_result = _cpp_this->getMovableObject(_cpp_name, _cpp_typeName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObject* Ogre::SceneManager::getMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasMovableObject()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasMovableObject
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasMovableObject_1_1StringRStringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasMovableObject(_cpp_name, _cpp_typeName) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::hasMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getMovableObjectIterator()
 * Type:       virtual method
 * Definition: virtual MovableObjectIterator Ogre::SceneManager::getMovableObjectIterator
 * Signature:  (std_string)Ogre_SceneManager_MovableObjectIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getMovableObjectIterator_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager::MovableObjectIterator* _cpp_result = new Ogre::SceneManager::MovableObjectIterator( _cpp_this->getMovableObjectIterator(_cpp_typeName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectIterator Ogre::SceneManager::getMovableObjectIterator */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     injectMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::injectMovableObject
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1injectMovableObject_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_m = reinterpret_cast< Ogre::MovableObject* >(m); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->injectMovableObject(_cpp_m);
} /* virtual void Ogre::SceneManager::injectMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     extractMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::extractMovableObject
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1extractMovableObject_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extractMovableObject(_cpp_name, _cpp_typeName);
} /* virtual void Ogre::SceneManager::extractMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     extractMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::extractMovableObject
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1extractMovableObject_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_m = reinterpret_cast< Ogre::MovableObject* >(m); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extractMovableObject(_cpp_m);
} /* virtual void Ogre::SceneManager::extractMovableObject */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     extractAllMovableObjectsByType()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::extractAllMovableObjectsByType
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1extractAllMovableObjectsByType_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extractAllMovableObjectsByType(_cpp_typeName);
} /* virtual void Ogre::SceneManager::extractAllMovableObjectsByType */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setVisibilityMask()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setVisibilityMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setVisibilityMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vmask
)
{
   // parameter conversions 
  unsigned int _cpp_vmask = vmask; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityMask(_cpp_vmask);
} /* virtual void Ogre::SceneManager::setVisibilityMask */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getVisibilityMask()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::SceneManager::getVisibilityMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getVisibilityMask (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityMask() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::SceneManager::getVisibilityMask */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _getCombinedVisibilityMask()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::SceneManager::_getCombinedVisibilityMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1getCombinedVisibilityMask_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->_getCombinedVisibilityMask() ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::_getCombinedVisibilityMask */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFindVisibleObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setFindVisibleObjects
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFindVisibleObjects_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean find
)
{
   // parameter conversions 
  bool _cpp_find = find ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFindVisibleObjects(_cpp_find);
} /* virtual void Ogre::SceneManager::setFindVisibleObjects */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFindVisibleObjects()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getFindVisibleObjects
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getFindVisibleObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getFindVisibleObjects() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getFindVisibleObjects */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setNormaliseNormalsOnScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setNormaliseNormalsOnScale
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setNormaliseNormalsOnScale_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean n
)
{
   // parameter conversions 
  bool _cpp_n = n ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNormaliseNormalsOnScale(_cpp_n);
} /* virtual void Ogre::SceneManager::setNormaliseNormalsOnScale */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getNormaliseNormalsOnScale()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getNormaliseNormalsOnScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getNormaliseNormalsOnScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getNormaliseNormalsOnScale() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getNormaliseNormalsOnScale */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFlipCullingOnNegativeScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setFlipCullingOnNegativeScale
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFlipCullingOnNegativeScale_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean n
)
{
   // parameter conversions 
  bool _cpp_n = n ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFlipCullingOnNegativeScale(_cpp_n);
} /* virtual void Ogre::SceneManager::setFlipCullingOnNegativeScale */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFlipCullingOnNegativeScale()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getFlipCullingOnNegativeScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getFlipCullingOnNegativeScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getFlipCullingOnNegativeScale() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getFlipCullingOnNegativeScale */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _injectRenderWithPass()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_injectRenderWithPass
 * Signature:  (Ogre_PassOgre_RenderableZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1injectRenderWithPass_1_1PasspRenderablepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass, 
  jlong rend, 
  jboolean shadowDerivation
)
{
   // parameter conversions 
  Ogre::Pass* _cpp_pass = reinterpret_cast< Ogre::Pass* >(pass);
  Ogre::Renderable* _cpp_rend = reinterpret_cast< Ogre::Renderable* >(rend);
  bool _cpp_shadowDerivation = shadowDerivation ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_injectRenderWithPass(_cpp_pass, _cpp_rend, _cpp_shadowDerivation);
} /* virtual void Ogre::SceneManager::_injectRenderWithPass */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _suppressRenderStateChanges()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_suppressRenderStateChanges
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1suppressRenderStateChanges_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean suppress
)
{
   // parameter conversions 
  bool _cpp_suppress = suppress ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_suppressRenderStateChanges(_cpp_suppress);
} /* virtual void Ogre::SceneManager::_suppressRenderStateChanges */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _areRenderStateChangesSuppressed()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::_areRenderStateChangesSuppressed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1_1areRenderStateChangesSuppressed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_areRenderStateChangesSuppressed() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::_areRenderStateChangesSuppressed */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setPass()
 * Type:       virtual method
 * Definition: virtual const Pass* Ogre::SceneManager::_setPass
 * Signature:  (Ogre_PassZZ)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1setPass_1_1PassPbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass, 
  jboolean evenIfSuppressed, 
  jboolean shadowDerivation
)
{
   // parameter conversions 
  const Ogre::Pass* _cpp_pass = reinterpret_cast< const Ogre::Pass* >(pass);
  bool _cpp_evenIfSuppressed = evenIfSuppressed ? true : false;
  bool _cpp_shadowDerivation = shadowDerivation ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass* _cpp_result = _cpp_this->_setPass(_cpp_pass, _cpp_evenIfSuppressed, _cpp_shadowDerivation) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Pass* Ogre::SceneManager::_setPass */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _suppressShadows()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_suppressShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1suppressShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean suppress
)
{
   // parameter conversions 
  bool _cpp_suppress = suppress ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_suppressShadows(_cpp_suppress);
} /* virtual void Ogre::SceneManager::_suppressShadows */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _areShadowsSuppressed()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::_areShadowsSuppressed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1_1areShadowsSuppressed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_areShadowsSuppressed() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::_areShadowsSuppressed */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _renderQueueGroupObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_renderQueueGroupObjects
 * Signature:  (Ogre_RenderQueueGroupOgre_QueuedRenderableCollection_OrganisationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1renderQueueGroupObjects_1_1RenderQueueGrouppQueuedRenderableCollection_1OrganisationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong group, 
  jint om
)
{
   // parameter conversions 
  Ogre::RenderQueueGroup* _cpp_group = reinterpret_cast< Ogre::RenderQueueGroup* >(group);
  Ogre::QueuedRenderableCollection::OrganisationMode _cpp_om = (Ogre::QueuedRenderableCollection::OrganisationMode)om; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_renderQueueGroupObjects(_cpp_group, _cpp_om);
} /* virtual void Ogre::SceneManager::_renderQueueGroupObjects */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getDestinationRenderSystem()
 * Type:       non-virtual method
 * Definition: RenderSystem* Ogre::SceneManager::getDestinationRenderSystem
 * Signature:  ()Ogre_RenderSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getDestinationRenderSystem (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderSystem* _cpp_result = _cpp_this->getDestinationRenderSystem() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderSystem* Ogre::SceneManager::getDestinationRenderSystem */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCurrentViewport()
 * Type:       non-virtual method
 * Definition: Viewport* Ogre::SceneManager::getCurrentViewport
 * Signature:  ()Ogre_Viewport
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getCurrentViewport_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Viewport* _cpp_result = _cpp_this->getCurrentViewport() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Viewport* Ogre::SceneManager::getCurrentViewport */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getVisibleObjectsBoundsInfo()
 * Type:       non-virtual method
 * Definition: const VisibleObjectsBoundsInfo& Ogre::SceneManager::getVisibleObjectsBoundsInfo
 * Signature:  (Ogre_Camera)Ogre_VisibleObjectsBoundsInfo
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getVisibleObjectsBoundsInfo_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VisibleObjectsBoundsInfo* _cpp_result = & _cpp_this->getVisibleObjectsBoundsInfo(_cpp_cam) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VisibleObjectsBoundsInfo& Ogre::SceneManager::getVisibleObjectsBoundsInfo */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowCasterBoundsInfo()
 * Type:       non-virtual method
 * Definition: const VisibleObjectsBoundsInfo& Ogre::SceneManager::getShadowCasterBoundsInfo
 * Signature:  (Ogre_LightI)Ogre_VisibleObjectsBoundsInfo
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowCasterBoundsInfo_1_1LightPiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jint iteration
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  size_t _cpp_iteration = iteration; 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VisibleObjectsBoundsInfo* _cpp_result = & _cpp_this->getShadowCasterBoundsInfo(_cpp_light, _cpp_iteration) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VisibleObjectsBoundsInfo& Ogre::SceneManager::getShadowCasterBoundsInfo */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setCameraRelativeRendering()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setCameraRelativeRendering
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setCameraRelativeRendering_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean rel
)
{
   // parameter conversions 
  bool _cpp_rel = rel ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCameraRelativeRendering(_cpp_rel);
} /* virtual void Ogre::SceneManager::setCameraRelativeRendering */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCameraRelativeRendering()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getCameraRelativeRendering
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getCameraRelativeRendering_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::SceneManager* _cpp_this = reinterpret_cast<const Ogre::SceneManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCameraRelativeRendering() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::getCameraRelativeRendering */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SceneManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::SceneManager 
   // cast pointer to C++ object 
   Ogre::SceneManager* _cpp_this = reinterpret_cast<Ogre::SceneManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::SceneManager::__delete */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getWORLD_GEOMETRY_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getWORLD_1GEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWORLD_GEOMETRY_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWORLD_1GEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK = _cpp__jni_value_;
} /* uint32 Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getENTITY_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::ENTITY_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getENTITY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::SceneManager::ENTITY_TYPE_MASK ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::ENTITY_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setENTITY_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::ENTITY_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setENTITY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::SceneManager::ENTITY_TYPE_MASK = _cpp__jni_value_;
} /* uint32 Ogre::SceneManager::ENTITY_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFX_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::FX_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getFX_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::SceneManager::FX_TYPE_MASK ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::FX_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFX_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::FX_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFX_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::SceneManager::FX_TYPE_MASK = _cpp__jni_value_;
} /* uint32 Ogre::SceneManager::FX_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSTATICGEOMETRY_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSTATICGEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSTATICGEOMETRY_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSTATICGEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK = _cpp__jni_value_;
} /* uint32 Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLIGHT_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::LIGHT_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLIGHT_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::SceneManager::LIGHT_TYPE_MASK ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::LIGHT_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setLIGHT_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::LIGHT_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setLIGHT_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::SceneManager::LIGHT_TYPE_MASK = _cpp__jni_value_;
} /* uint32 Ogre::SceneManager::LIGHT_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFRUSTUM_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::FRUSTUM_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getFRUSTUM_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::SceneManager::FRUSTUM_TYPE_MASK ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::FRUSTUM_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFRUSTUM_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::FRUSTUM_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFRUSTUM_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::SceneManager::FRUSTUM_TYPE_MASK = _cpp__jni_value_;
} /* uint32 Ogre::SceneManager::FRUSTUM_TYPE_MASK */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getUSER_TYPE_MASK_LIMIT()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::USER_TYPE_MASK_LIMIT
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getUSER_1TYPE_1MASK_1LIMIT (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::SceneManager::USER_TYPE_MASK_LIMIT ; 
   return _cpp_result;
} /* uint32 Ogre::SceneManager::USER_TYPE_MASK_LIMIT */


/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setUSER_TYPE_MASK_LIMIT()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::USER_TYPE_MASK_LIMIT
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setUSER_1TYPE_1MASK_1LIMIT (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::SceneManager::USER_TYPE_MASK_LIMIT = _cpp__jni_value_;
} /* uint32 Ogre::SceneManager::USER_TYPE_MASK_LIMIT */
