///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_NedAllocImpl.h"

// import header files of original library
#include <OgreMemoryNedAlloc.h>



/*
 * Class:      org.ogre4j.NedAllocImpl
 * Method:     allocBytes()
 * Type:       static method
 * Definition: static void* Ogre::NedAllocImpl::allocBytes
 * Signature:  (ICIC)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_NedAllocImpl__1allocBytes_1_1ivcPivcP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint count,
  jstring file,
  jint line,
  jstring func
)
{
   // static method of class Ogre::NedAllocImpl with return value
   // parameter conversions
  size_t _cpp_count = count;
   std::string _cpp_file_TMP; org::xbig::jni::to_stdstring(_jni_env_, file, _cpp_file_TMP); const char* _cpp_file = _cpp_file_TMP.c_str();
  int _cpp_line = line;
   std::string _cpp_func_TMP; org::xbig::jni::to_stdstring(_jni_env_, func, _cpp_func_TMP); const char* _cpp_func = _cpp_func_TMP.c_str();

   // call library method
   void* _cpp_result = Ogre::NedAllocImpl::allocBytes(_cpp_count, _cpp_file, _cpp_line, _cpp_func);
   return reinterpret_cast<jlong>(_cpp_result);
} /* static void* Ogre::NedAllocImpl::allocBytes */


/*
 * Class:      org.ogre4j.NedAllocImpl
 * Method:     deallocBytes()
 * Type:       static method
 * Definition: static void Ogre::NedAllocImpl::deallocBytes
 * Signature:  (V)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_NedAllocImpl__1deallocBytes_1_1vp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ptr
)
{
   // static method of class Ogre::NedAllocImpl without return value
   // parameter conversions
  void* _cpp_ptr = reinterpret_cast<void*>(ptr);

   // call library method
   Ogre::NedAllocImpl::deallocBytes(_cpp_ptr);
} /* static void Ogre::NedAllocImpl::deallocBytes */

/*
 * Class:      org.ogre4j.NedAllocImpl
 * Method:     allocBytesAligned()
 * Type:       static method
 * Definition: static void* Ogre::NedAllocImpl::allocBytesAligned
 * Signature:  (ICIC)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_NedAllocImpl__1allocBytesAligned_1_1ivcPivcP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint align,
  jint count,
  jstring file,
  jint line,
  jstring func
)
{
   // static method of class Ogre::NedAllocImpl with return value
   // parameter conversions
  size_t _cpp_align = align;
  size_t _cpp_count = count;
   std::string _cpp_file_TMP; org::xbig::jni::to_stdstring(_jni_env_, file, _cpp_file_TMP); const char* _cpp_file = _cpp_file_TMP.c_str();
  int _cpp_line = line;
   std::string _cpp_func_TMP; org::xbig::jni::to_stdstring(_jni_env_, func, _cpp_func_TMP); const char* _cpp_func = _cpp_func_TMP.c_str();

   // call library method
   void* _cpp_result = Ogre::NedAllocImpl::allocBytesAligned(_cpp_align, _cpp_count, _cpp_file, _cpp_line, _cpp_func);
   return reinterpret_cast<jlong>(_cpp_result);
} /* static void* Ogre::NedAllocImpl::allocBytesAligned */


/*
 * Class:      org.ogre4j.NedAllocImpl
 * Method:     deallocBytesAligned()
 * Type:       static method
 * Definition: static void Ogre::NedAllocImpl::deallocBytesAligned
 * Signature:  (V)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_NedAllocImpl__1deallocBytesAligned_1_1vp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint align,
  jlong ptr
)
{
   // static method of class Ogre::NedAllocImpl without return value
   // parameter conversions
	size_t _cpp_align = align;
  void* _cpp_ptr = reinterpret_cast<void*>(ptr);

   // call library method
   Ogre::NedAllocImpl::deallocBytesAligned(_cpp_align, _cpp_ptr);
} /* static void Ogre::NedAllocImpl::deallocBytesAligned */


/*
 * Class:      org.ogre4j.NedAllocImpl
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::NedAllocImpl::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_NedAllocImpl__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::NedAllocImpl
   // cast pointer to C++ object
   Ogre::NedAllocImpl* _cpp_this = reinterpret_cast<Ogre::NedAllocImpl*>(_jni_pointer_);
   // delete object if it exists
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::NedAllocImpl::__delete */
