///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_PixelUtil.h"

// import header files of original library
#include <OgrePixelFormat.h>



/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getNumElemBytes()
 * Type:       static method
 * Definition: static size_t Ogre::PixelUtil::getNumElemBytes
 * Signature:  (Ogre_PixelFormat)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PixelUtil__1getNumElemBytes_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const size_t _cpp_result = Ogre::PixelUtil::getNumElemBytes(_cpp_format); 
   return _cpp_result;
} /* static size_t Ogre::PixelUtil::getNumElemBytes */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getNumElemBits()
 * Type:       static method
 * Definition: static size_t Ogre::PixelUtil::getNumElemBits
 * Signature:  (Ogre_PixelFormat)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PixelUtil__1getNumElemBits_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const size_t _cpp_result = Ogre::PixelUtil::getNumElemBits(_cpp_format); 
   return _cpp_result;
} /* static size_t Ogre::PixelUtil::getNumElemBits */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getMemorySize()
 * Type:       static method
 * Definition: static size_t Ogre::PixelUtil::getMemorySize
 * Signature:  (IIIOgre_PixelFormat)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PixelUtil__1getMemorySize_1_1ivivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint width, 
  jint height, 
  jint depth, 
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  size_t _cpp_width = width;
  size_t _cpp_height = height;
  size_t _cpp_depth = depth;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const size_t _cpp_result = Ogre::PixelUtil::getMemorySize(_cpp_width, _cpp_height, _cpp_depth, _cpp_format); 
   return _cpp_result;
} /* static size_t Ogre::PixelUtil::getMemorySize */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getFlags()
 * Type:       static method
 * Definition: static unsigned int Ogre::PixelUtil::getFlags
 * Signature:  (Ogre_PixelFormat)I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PixelUtil__1getFlags_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::PixelUtil::getFlags(_cpp_format); 
   return _cpp_result;
} /* static unsigned int Ogre::PixelUtil::getFlags */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     hasAlpha()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::hasAlpha
 * Signature:  (Ogre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1hasAlpha_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::hasAlpha(_cpp_format); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::hasAlpha */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     isFloatingPoint()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::isFloatingPoint
 * Signature:  (Ogre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1isFloatingPoint_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::isFloatingPoint(_cpp_format); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::isFloatingPoint */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     isCompressed()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::isCompressed
 * Signature:  (Ogre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1isCompressed_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::isCompressed(_cpp_format); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::isCompressed */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     isDepth()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::isDepth
 * Signature:  (Ogre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1isDepth_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::isDepth(_cpp_format); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::isDepth */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     isNativeEndian()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::isNativeEndian
 * Signature:  (Ogre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1isNativeEndian_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::isNativeEndian(_cpp_format); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::isNativeEndian */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     isLuminance()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::isLuminance
 * Signature:  (Ogre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1isLuminance_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::isLuminance(_cpp_format); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::isLuminance */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     isValidExtent()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::isValidExtent
 * Signature:  (IIIOgre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1isValidExtent_1_1ivivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint width, 
  jint height, 
  jint depth, 
  jint format
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  size_t _cpp_width = width;
  size_t _cpp_height = height;
  size_t _cpp_depth = depth;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::isValidExtent(_cpp_width, _cpp_height, _cpp_depth, _cpp_format); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::isValidExtent */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getFormatName()
 * Type:       static method
 * Definition: static String Ogre::PixelUtil::getFormatName
 * Signature:  (Ogre_PixelFormat)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_PixelUtil__1getFormatName_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint srcformat
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_srcformat = (Ogre::PixelFormat)srcformat; 
   
   // call library method 
   const std::string _cpp_result = Ogre::PixelUtil::getFormatName(_cpp_srcformat); 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* static String Ogre::PixelUtil::getFormatName */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     isAccessible()
 * Type:       static method
 * Definition: static bool Ogre::PixelUtil::isAccessible
 * Signature:  (Ogre_PixelFormat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PixelUtil__1isAccessible_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint srcformat
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_srcformat = (Ogre::PixelFormat)srcformat; 
   
   // call library method 
   const bool _cpp_result = Ogre::PixelUtil::isAccessible(_cpp_srcformat); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::PixelUtil::isAccessible */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getComponentType()
 * Type:       static method
 * Definition: static PixelComponentType Ogre::PixelUtil::getComponentType
 * Signature:  (Ogre_PixelFormat)Ogre_PixelComponentType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PixelUtil__1getComponentType_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint fmt
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_fmt = (Ogre::PixelFormat)fmt; 
   
   // call library method 
   const Ogre::PixelComponentType _cpp_result = Ogre::PixelUtil::getComponentType(_cpp_fmt); 
   return _cpp_result;
} /* static PixelComponentType Ogre::PixelUtil::getComponentType */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getComponentCount()
 * Type:       static method
 * Definition: static size_t Ogre::PixelUtil::getComponentCount
 * Signature:  (Ogre_PixelFormat)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PixelUtil__1getComponentCount_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint fmt
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_fmt = (Ogre::PixelFormat)fmt; 
   
   // call library method 
   const size_t _cpp_result = Ogre::PixelUtil::getComponentCount(_cpp_fmt); 
   return _cpp_result;
} /* static size_t Ogre::PixelUtil::getComponentCount */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getFormatFromName()
 * Type:       static method
 * Definition: static PixelFormat Ogre::PixelUtil::getFormatFromName
 * Signature:  (std_stringZZ)Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PixelUtil__1getFormatFromName_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name, 
  jboolean accessibleOnly, 
  jboolean caseSensitive
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_accessibleOnly = accessibleOnly ? true : false;
  bool _cpp_caseSensitive = caseSensitive ? true : false; 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = Ogre::PixelUtil::getFormatFromName(_cpp_name, _cpp_accessibleOnly, _cpp_caseSensitive); 
   return _cpp_result;
} /* static PixelFormat Ogre::PixelUtil::getFormatFromName */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getBNFExpressionOfPixelFormats()
 * Type:       static method
 * Definition: static String Ogre::PixelUtil::getBNFExpressionOfPixelFormats
 * Signature:  (Z)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_PixelUtil__1getBNFExpressionOfPixelFormats_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jboolean accessibleOnly
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  bool _cpp_accessibleOnly = accessibleOnly ? true : false; 
   
   // call library method 
   const std::string _cpp_result = Ogre::PixelUtil::getBNFExpressionOfPixelFormats(_cpp_accessibleOnly); 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* static String Ogre::PixelUtil::getBNFExpressionOfPixelFormats */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     getFormatForBitDepths()
 * Type:       static method
 * Definition: static PixelFormat Ogre::PixelUtil::getFormatForBitDepths
 * Signature:  (Ogre_PixelFormatunsigned_shortunsigned_short)Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PixelUtil__1getFormatForBitDepths_1_1PixelFormatvushortvushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint fmt, 
  jint integerBits, 
  jint floatBits
)
{
   // static method of class Ogre::PixelUtil with return value 
   // parameter conversions 
  Ogre::PixelFormat _cpp_fmt = (Ogre::PixelFormat)fmt;
  unsigned short _cpp_integerBits = integerBits;
  unsigned short _cpp_floatBits = floatBits; 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = Ogre::PixelUtil::getFormatForBitDepths(_cpp_fmt, _cpp_integerBits, _cpp_floatBits); 
   return _cpp_result;
} /* static PixelFormat Ogre::PixelUtil::getFormatForBitDepths */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     packColour()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::packColour
 * Signature:  (Ogre_ColourValueOgre_PixelFormatV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1packColour_1_1ColourValueRPixelFormatVvp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong colour, 
  jint pf, 
  jlong dest
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  const Ogre::PixelFormat _cpp_pf = (Ogre::PixelFormat)pf;
  void* _cpp_dest = reinterpret_cast<void*>(dest); 
   
   // call library method 
   Ogre::PixelUtil::packColour(*_cpp_colour, _cpp_pf, _cpp_dest);
} /* static void Ogre::PixelUtil::packColour */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     packColour()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::packColour
 * Signature:  (unsigned_charunsigned_charunsigned_charunsigned_charOgre_PixelFormatV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1packColour_1_1uint8Vuint8Vuint8Vuint8VPixelFormatVvp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jshort r, 
  jshort g, 
  jshort b, 
  jshort a, 
  jint pf, 
  jlong dest
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  const unsigned char _cpp_r = r;
  const unsigned char _cpp_g = g;
  const unsigned char _cpp_b = b;
  const unsigned char _cpp_a = a;
  const Ogre::PixelFormat _cpp_pf = (Ogre::PixelFormat)pf;
  void* _cpp_dest = reinterpret_cast<void*>(dest); 
   
   // call library method 
   Ogre::PixelUtil::packColour(_cpp_r, _cpp_g, _cpp_b, _cpp_a, _cpp_pf, _cpp_dest);
} /* static void Ogre::PixelUtil::packColour */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     packColour()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::packColour
 * Signature:  (FFFFOgre_PixelFormatV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1packColour_1_1FVFVFVFVPixelFormatVvp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r, 
  jfloat g, 
  jfloat b, 
  jfloat a, 
  jint pf, 
  jlong dest
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  const float _cpp_r = r;
  const float _cpp_g = g;
  const float _cpp_b = b;
  const float _cpp_a = a;
  const Ogre::PixelFormat _cpp_pf = (Ogre::PixelFormat)pf;
  void* _cpp_dest = reinterpret_cast<void*>(dest); 
   
   // call library method 
   Ogre::PixelUtil::packColour(_cpp_r, _cpp_g, _cpp_b, _cpp_a, _cpp_pf, _cpp_dest);
} /* static void Ogre::PixelUtil::packColour */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     unpackColour()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::unpackColour
 * Signature:  (Ogre_ColourValueOgre_PixelFormatV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1unpackColour_1_1ColourValuepPixelFormatvvP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong colour, 
  jint pf, 
  jlong src
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  Ogre::ColourValue* _cpp_colour = reinterpret_cast< Ogre::ColourValue* >(colour);
  Ogre::PixelFormat _cpp_pf = (Ogre::PixelFormat)pf;
  const void* _cpp_src = reinterpret_cast<void*>(src); 
   
   // call library method 
   Ogre::PixelUtil::unpackColour(_cpp_colour, _cpp_pf, _cpp_src);
} /* static void Ogre::PixelUtil::unpackColour */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     unpackColour()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::unpackColour
 * Signature:  (unsigned_charunsigned_charunsigned_charunsigned_charOgre_PixelFormatV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1unpackColour_1_1uint8puint8puint8puint8pPixelFormatvvP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r, 
  jlong g, 
  jlong b, 
  jlong a, 
  jint pf, 
  jlong src
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  unsigned char* _cpp_r = reinterpret_cast<unsigned char*>(r);
  unsigned char* _cpp_g = reinterpret_cast<unsigned char*>(g);
  unsigned char* _cpp_b = reinterpret_cast<unsigned char*>(b);
  unsigned char* _cpp_a = reinterpret_cast<unsigned char*>(a);
  Ogre::PixelFormat _cpp_pf = (Ogre::PixelFormat)pf;
  const void* _cpp_src = reinterpret_cast<void*>(src); 
   
   // call library method 
   Ogre::PixelUtil::unpackColour(_cpp_r, _cpp_g, _cpp_b, _cpp_a, _cpp_pf, _cpp_src);
} /* static void Ogre::PixelUtil::unpackColour */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     unpackColour()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::unpackColour
 * Signature:  (FFFFOgre_PixelFormatV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1unpackColour_1_1FpFpFpFpPixelFormatvvP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r, 
  jlong g, 
  jlong b, 
  jlong a, 
  jint pf, 
  jlong src
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  float* _cpp_r = reinterpret_cast<float*>(r);
  float* _cpp_g = reinterpret_cast<float*>(g);
  float* _cpp_b = reinterpret_cast<float*>(b);
  float* _cpp_a = reinterpret_cast<float*>(a);
  Ogre::PixelFormat _cpp_pf = (Ogre::PixelFormat)pf;
  const void* _cpp_src = reinterpret_cast<void*>(src); 
   
   // call library method 
   Ogre::PixelUtil::unpackColour(_cpp_r, _cpp_g, _cpp_b, _cpp_a, _cpp_pf, _cpp_src);
} /* static void Ogre::PixelUtil::unpackColour */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     bulkPixelConversion()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::bulkPixelConversion
 * Signature:  (VOgre_PixelFormatVOgre_PixelFormatI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1bulkPixelConversion_1_1vpPixelFormatvvpPixelFormatvIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong src, 
  jint srcFormat, 
  jlong dest, 
  jint dstFormat, 
  jlong count
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  void* _cpp_src = reinterpret_cast<void*>(src);
  Ogre::PixelFormat _cpp_srcFormat = (Ogre::PixelFormat)srcFormat;
  void* _cpp_dest = reinterpret_cast<void*>(dest);
  Ogre::PixelFormat _cpp_dstFormat = (Ogre::PixelFormat)dstFormat;
  unsigned int _cpp_count = count; 
   
   // call library method 
   Ogre::PixelUtil::bulkPixelConversion(_cpp_src, _cpp_srcFormat, _cpp_dest, _cpp_dstFormat, _cpp_count);
} /* static void Ogre::PixelUtil::bulkPixelConversion */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     bulkPixelConversion()
 * Type:       static method
 * Definition: static void Ogre::PixelUtil::bulkPixelConversion
 * Signature:  (Ogre_PixelBoxOgre_PixelBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1bulkPixelConversion_1_1PixelBoxRPixelBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong src, 
  jlong dst
)
{
   // static method of class Ogre::PixelUtil without return value 
   // parameter conversions 
  const Ogre::PixelBox* _cpp_src = reinterpret_cast< const Ogre::PixelBox* >(src);
  const Ogre::PixelBox* _cpp_dst = reinterpret_cast< const Ogre::PixelBox* >(dst); 
   
   // call library method 
   Ogre::PixelUtil::bulkPixelConversion(*_cpp_src, *_cpp_dst);
} /* static void Ogre::PixelUtil::bulkPixelConversion */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     PixelUtil()
 * Type:       constructor
 * Definition: Ogre::PixelUtil::PixelUtil
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PixelUtil__1_1createPixelUtil (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::PixelUtil 
   
   // parameter conversions 
   
   // create new instance of class Ogre::PixelUtil 
   Ogre::PixelUtil* _cpp_this = new Ogre::PixelUtil(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::PixelUtil::PixelUtil */


/*
 * Class:      org.ogre4j.PixelUtil
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::PixelUtil::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PixelUtil__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::PixelUtil 
   // cast pointer to C++ object 
   Ogre::PixelUtil* _cpp_this = reinterpret_cast<Ogre::PixelUtil*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::PixelUtil::__delete */
