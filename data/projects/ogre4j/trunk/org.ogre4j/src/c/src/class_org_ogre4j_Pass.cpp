///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Pass.h"

// import header files of original library
#include <OgrePass.h>



/*
 * Class:      org.ogre4j.Pass
 * Method:     Pass()
 * Type:       constructor
 * Definition: Ogre::Pass::Pass
 * Signature:  (Ogre_TechniqueS)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1_1createPass_1_1TechniquepHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jint index
)
{
   // constructor of class Ogre::Pass 
   
   // parameter conversions 
  Ogre::Technique* _cpp_parent = reinterpret_cast< Ogre::Technique* >(parent);
  unsigned short _cpp_index = index; 
   
   // create new instance of class Ogre::Pass 
   Ogre::Pass* _cpp_this = new Ogre::Pass(_cpp_parent, _cpp_index); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Pass::Pass */


/*
 * Class:      org.ogre4j.Pass
 * Method:     Pass()
 * Type:       constructor
 * Definition: Ogre::Pass::Pass
 * Signature:  (Ogre_TechniqueSOgre_Pass)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1_1createPass_1_1TechniquepHvPassR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jint index, 
  jlong oth
)
{
   // constructor of class Ogre::Pass 
   
   // parameter conversions 
  Ogre::Technique* _cpp_parent = reinterpret_cast< Ogre::Technique* >(parent);
  unsigned short _cpp_index = index;
  const Ogre::Pass* _cpp_oth = reinterpret_cast< const Ogre::Pass* >(oth); 
   
   // create new instance of class Ogre::Pass 
   Ogre::Pass* _cpp_this = new Ogre::Pass(_cpp_parent, _cpp_index, *_cpp_oth); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Pass::Pass */


/*
 * Class:      org.ogre4j.Pass
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Pass& Ogre::Pass::operator=
 * Signature:  (Ogre_Pass)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1operatorAssignment_1_1PassR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong oth
)
{
   // parameter conversions 
  const Ogre::Pass* _cpp_oth = reinterpret_cast< const Ogre::Pass* >(oth); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass* _cpp_result = & _cpp_this->operator=(*_cpp_oth) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pass& Ogre::Pass::operator= */


/*
 * Class:      org.ogre4j.Pass
 * Method:     isProgrammable()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isProgrammable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isProgrammable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isProgrammable() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::isProgrammable */


/*
 * Class:      org.ogre4j.Pass
 * Method:     hasVertexProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasVertexProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasVertexProgram() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::hasVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     hasFragmentProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasFragmentProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasFragmentProgram() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::hasFragmentProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     hasGeometryProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasGeometryProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasGeometryProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasGeometryProgram() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::hasGeometryProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     hasShadowCasterVertexProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasShadowCasterVertexProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasShadowCasterVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasShadowCasterVertexProgram() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::hasShadowCasterVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     hasShadowReceiverVertexProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasShadowReceiverVertexProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasShadowReceiverVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasShadowReceiverVertexProgram() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::hasShadowReceiverVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     hasShadowReceiverFragmentProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasShadowReceiverFragmentProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasShadowReceiverFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasShadowReceiverFragmentProgram() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::hasShadowReceiverFragmentProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getIndex
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getIndex_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getIndex() ; 
   return _cpp_result;
} /* unsigned short Ogre::Pass::getIndex */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setName()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setName(_cpp_name);
} /* void Ogre::Pass::setName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAmbient
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAmbient_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAmbient(_cpp_red, _cpp_green, _cpp_blue);
} /* void Ogre::Pass::setAmbient */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAmbient
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAmbient_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_ambient = reinterpret_cast< const Ogre::ColourValue* >(ambient); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAmbient(*_cpp_ambient);
} /* void Ogre::Pass::setAmbient */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDiffuse
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDiffuse_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue;
  float _cpp_alpha = alpha; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDiffuse(_cpp_red, _cpp_green, _cpp_blue, _cpp_alpha);
} /* void Ogre::Pass::setDiffuse */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDiffuse
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDiffuse_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong diffuse
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_diffuse = reinterpret_cast< const Ogre::ColourValue* >(diffuse); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDiffuse(*_cpp_diffuse);
} /* void Ogre::Pass::setDiffuse */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSpecular
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSpecular_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue;
  float _cpp_alpha = alpha; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpecular(_cpp_red, _cpp_green, _cpp_blue, _cpp_alpha);
} /* void Ogre::Pass::setSpecular */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSpecular
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSpecular_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong specular
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_specular = reinterpret_cast< const Ogre::ColourValue* >(specular); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpecular(*_cpp_specular);
} /* void Ogre::Pass::setSpecular */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShininess()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShininess
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShininess_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat val
)
{
   // parameter conversions 
  float _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShininess(_cpp_val);
} /* void Ogre::Pass::setShininess */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSelfIllumination
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSelfIllumination_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSelfIllumination(_cpp_red, _cpp_green, _cpp_blue);
} /* void Ogre::Pass::setSelfIllumination */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSelfIllumination
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSelfIllumination_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong selfIllum
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_selfIllum = reinterpret_cast< const Ogre::ColourValue* >(selfIllum); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSelfIllumination(*_cpp_selfIllum);
} /* void Ogre::Pass::setSelfIllumination */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setVertexColourTracking()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setVertexColourTracking
 * Signature:  (int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setVertexColourTracking_1_1TrackVertexColourTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint tracking
)
{
   // parameter conversions 
  int _cpp_tracking = tracking; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexColourTracking(_cpp_tracking);
} /* void Ogre::Pass::setVertexColourTracking */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointSize()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointSize
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointSize() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getPointSize */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat ps
)
{
   // parameter conversions 
  float _cpp_ps = ps; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPointSize(_cpp_ps);
} /* void Ogre::Pass::setPointSize */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointSpritesEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointSpritesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointSpritesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPointSpritesEnabled(_cpp_enabled);
} /* void Ogre::Pass::setPointSpritesEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointSpritesEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getPointSpritesEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getPointSpritesEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPointSpritesEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getPointSpritesEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointAttenuation()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointAttenuation
 * Signature:  (Zfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointAttenuation_1_1bvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jfloat constant, 
  jfloat linear, 
  jfloat quadratic
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false;
  float _cpp_constant = constant;
  float _cpp_linear = linear;
  float _cpp_quadratic = quadratic; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPointAttenuation(_cpp_enabled, _cpp_constant, _cpp_linear, _cpp_quadratic);
} /* void Ogre::Pass::setPointAttenuation */


/*
 * Class:      org.ogre4j.Pass
 * Method:     isPointAttenuationEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isPointAttenuationEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isPointAttenuationEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPointAttenuationEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::isPointAttenuationEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointAttenuationConstant()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointAttenuationConstant
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointAttenuationConstant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointAttenuationConstant() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getPointAttenuationConstant */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointAttenuationLinear()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointAttenuationLinear
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointAttenuationLinear_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointAttenuationLinear() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getPointAttenuationLinear */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointAttenuationQuadratic()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointAttenuationQuadratic
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointAttenuationQuadratic_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointAttenuationQuadratic() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getPointAttenuationQuadratic */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointMinSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointMinSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointMinSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min
)
{
   // parameter conversions 
  float _cpp__min = _min; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPointMinSize(_cpp__min);
} /* void Ogre::Pass::setPointMinSize */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointMinSize()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointMinSize
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointMinSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointMinSize() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getPointMinSize */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointMaxSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointMaxSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointMaxSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _max
)
{
   // parameter conversions 
  float _cpp__max = _max; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPointMaxSize(_cpp__max);
} /* void Ogre::Pass::setPointMaxSize */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointMaxSize()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointMaxSize
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointMaxSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointMaxSize() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getPointMaxSize */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getAmbient()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getAmbient
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getAmbient_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getAmbient() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Pass::getAmbient */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDiffuse()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getDiffuse
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getDiffuse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getDiffuse() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Pass::getDiffuse */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getSpecular()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getSpecular
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getSpecular_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getSpecular() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Pass::getSpecular */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getSelfIllumination()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getSelfIllumination
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getSelfIllumination_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getSelfIllumination() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Pass::getSelfIllumination */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShininess()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getShininess
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getShininess_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShininess() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getShininess */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexColourTracking()
 * Type:       non-virtual method
 * Definition: TrackVertexColourType Ogre::Pass::getVertexColourTracking
 * Signature:  ()int
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getVertexColourTracking_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getVertexColourTracking() ; 
   return _cpp_result;
} /* TrackVertexColourType Ogre::Pass::getVertexColourTracking */


/*
 * Class:      org.ogre4j.Pass
 * Method:     createTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::createTextureUnitState
 * Signature:  ()Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1createTextureUnitState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = _cpp_this->createTextureUnitState() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureUnitState* Ogre::Pass::createTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     createTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::createTextureUnitState
 * Signature:  (std_stringS)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1createTextureUnitState_1_1StringRHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring textureName, 
  jint texCoordSet
)
{
   // parameter conversions 
  std::string _cpp_textureName = ""; org::xbig::jni::to_stdstring(_jni_env_, textureName, _cpp_textureName); // calls c-tor only. Not operator= .;
  unsigned short _cpp_texCoordSet = texCoordSet; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = _cpp_this->createTextureUnitState(_cpp_textureName, _cpp_texCoordSet) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureUnitState* Ogre::Pass::createTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     addTextureUnitState()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::addTextureUnitState
 * Signature:  (Ogre_TextureUnitState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1addTextureUnitState_1_1TextureUnitStatep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong state
)
{
   // parameter conversions 
  Ogre::TextureUnitState* _cpp_state = reinterpret_cast< Ogre::TextureUnitState* >(state); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addTextureUnitState(_cpp_state);
} /* void Ogre::Pass::addTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (S)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = _cpp_this->getTextureUnitState(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureUnitState* Ogre::Pass::getTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (std_string)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = _cpp_this->getTextureUnitState(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureUnitState* Ogre::Pass::getTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState_const()
 * Type:       non-virtual method
 * Definition: const TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (S)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1const_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = _cpp_this->getTextureUnitState(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const TextureUnitState* Ogre::Pass::getTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState_const()
 * Type:       non-virtual method
 * Definition: const TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (std_string)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1const_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = _cpp_this->getTextureUnitState(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const TextureUnitState* Ogre::Pass::getTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitStateIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getTextureUnitStateIndex
 * Signature:  (Ogre_TextureUnitState)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getTextureUnitStateIndex_1_1TextureUnitStateP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong state
)
{
   // parameter conversions 
  const Ogre::TextureUnitState* _cpp_state = reinterpret_cast< const Ogre::TextureUnitState* >(state); 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getTextureUnitStateIndex(_cpp_state) ; 
   return _cpp_result;
} /* unsigned short Ogre::Pass::getTextureUnitStateIndex */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitStateIterator()
 * Type:       non-virtual method
 * Definition: TextureUnitStateIterator Ogre::Pass::getTextureUnitStateIterator
 * Signature:  ()Ogre_Pass_TextureUnitStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitStateIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass::TextureUnitStateIterator* _cpp_result = new Ogre::Pass::TextureUnitStateIterator( _cpp_this->getTextureUnitStateIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureUnitStateIterator Ogre::Pass::getTextureUnitStateIterator */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitStateIterator_const()
 * Type:       non-virtual method
 * Definition: ConstTextureUnitStateIterator Ogre::Pass::getTextureUnitStateIterator
 * Signature:  ()Ogre_Pass_ConstTextureUnitStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitStateIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass::ConstTextureUnitStateIterator* _cpp_result = new Ogre::Pass::ConstTextureUnitStateIterator( _cpp_this->getTextureUnitStateIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ConstTextureUnitStateIterator Ogre::Pass::getTextureUnitStateIterator */


/*
 * Class:      org.ogre4j.Pass
 * Method:     removeTextureUnitState()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::removeTextureUnitState
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1removeTextureUnitState_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeTextureUnitState(_cpp_index);
} /* void Ogre::Pass::removeTextureUnitState */


/*
 * Class:      org.ogre4j.Pass
 * Method:     removeAllTextureUnitStates()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::removeAllTextureUnitStates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1removeAllTextureUnitStates (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllTextureUnitStates();
} /* void Ogre::Pass::removeAllTextureUnitStates */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getNumTextureUnitStates()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getNumTextureUnitStates
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getNumTextureUnitStates_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumTextureUnitStates() ; 
   return _cpp_result;
} /* unsigned short Ogre::Pass::getNumTextureUnitStates */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSceneBlending
 * Signature:  (Ogre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSceneBlending_1_1SceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt
)
{
   // parameter conversions 
  const Ogre::SceneBlendType _cpp_sbt = (Ogre::SceneBlendType)sbt; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSceneBlending(_cpp_sbt);
} /* void Ogre::Pass::setSceneBlending */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendTypeOgre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSeparateSceneBlending_1_1SceneBlendTypeVSceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt, 
  jint sbta
)
{
   // parameter conversions 
  const Ogre::SceneBlendType _cpp_sbt = (Ogre::SceneBlendType)sbt;
  const Ogre::SceneBlendType _cpp_sbta = (Ogre::SceneBlendType)sbta; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSeparateSceneBlending(_cpp_sbt, _cpp_sbta);
} /* void Ogre::Pass::setSeparateSceneBlending */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSceneBlending_1_1SceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
)
{
   // parameter conversions 
  const Ogre::SceneBlendFactor _cpp_sourceFactor = (Ogre::SceneBlendFactor)sourceFactor;
  const Ogre::SceneBlendFactor _cpp_destFactor = (Ogre::SceneBlendFactor)destFactor; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSceneBlending(_cpp_sourceFactor, _cpp_destFactor);
} /* void Ogre::Pass::setSceneBlending */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSeparateSceneBlending_1_1SceneBlendFactorVSceneBlendFactorVSceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor, 
  jint sourceFactorAlpha, 
  jint destFactorAlpha
)
{
   // parameter conversions 
  const Ogre::SceneBlendFactor _cpp_sourceFactor = (Ogre::SceneBlendFactor)sourceFactor;
  const Ogre::SceneBlendFactor _cpp_destFactor = (Ogre::SceneBlendFactor)destFactor;
  const Ogre::SceneBlendFactor _cpp_sourceFactorAlpha = (Ogre::SceneBlendFactor)sourceFactorAlpha;
  const Ogre::SceneBlendFactor _cpp_destFactorAlpha = (Ogre::SceneBlendFactor)destFactorAlpha; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSeparateSceneBlending(_cpp_sourceFactor, _cpp_destFactor, _cpp_sourceFactorAlpha, _cpp_destFactorAlpha);
} /* void Ogre::Pass::setSeparateSceneBlending */


/*
 * Class:      org.ogre4j.Pass
 * Method:     hasSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasSeparateSceneBlending
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasSeparateSceneBlending_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasSeparateSceneBlending() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::hasSeparateSceneBlending */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getSourceBlendFactor()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getSourceBlendFactor
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getSourceBlendFactor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneBlendFactor _cpp_result = _cpp_this->getSourceBlendFactor() ; 
   return _cpp_result;
} /* SceneBlendFactor Ogre::Pass::getSourceBlendFactor */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDestBlendFactor()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getDestBlendFactor
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getDestBlendFactor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneBlendFactor _cpp_result = _cpp_this->getDestBlendFactor() ; 
   return _cpp_result;
} /* SceneBlendFactor Ogre::Pass::getDestBlendFactor */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getSourceBlendFactorAlpha()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getSourceBlendFactorAlpha
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getSourceBlendFactorAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneBlendFactor _cpp_result = _cpp_this->getSourceBlendFactorAlpha() ; 
   return _cpp_result;
} /* SceneBlendFactor Ogre::Pass::getSourceBlendFactorAlpha */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDestBlendFactorAlpha()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getDestBlendFactorAlpha
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getDestBlendFactorAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneBlendFactor _cpp_result = _cpp_this->getDestBlendFactorAlpha() ; 
   return _cpp_result;
} /* SceneBlendFactor Ogre::Pass::getDestBlendFactorAlpha */


/*
 * Class:      org.ogre4j.Pass
 * Method:     isTransparent()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isTransparent
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isTransparent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isTransparent() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::isTransparent */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthCheckEnabled(_cpp_enabled);
} /* void Ogre::Pass::setDepthCheckEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getDepthCheckEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getDepthCheckEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getDepthCheckEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getDepthCheckEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthWriteEnabled(_cpp_enabled);
} /* void Ogre::Pass::setDepthWriteEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getDepthWriteEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getDepthWriteEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getDepthWriteEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getDepthWriteEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthFunction()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
)
{
   // parameter conversions 
  Ogre::CompareFunction _cpp_func = (Ogre::CompareFunction)func; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthFunction(_cpp_func);
} /* void Ogre::Pass::setDepthFunction */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthFunction()
 * Type:       non-virtual method
 * Definition: CompareFunction Ogre::Pass::getDepthFunction
 * Signature:  ()Ogre_CompareFunction
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getDepthFunction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompareFunction _cpp_result = _cpp_this->getDepthFunction() ; 
   return _cpp_result;
} /* CompareFunction Ogre::Pass::getDepthFunction */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setColourWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setColourWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setColourWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourWriteEnabled(_cpp_enabled);
} /* void Ogre::Pass::setColourWriteEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getColourWriteEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getColourWriteEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getColourWriteEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getColourWriteEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getColourWriteEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setCullingMode
 * Signature:  (Ogre_CullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setCullingMode_1_1CullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::CullingMode _cpp_mode = (Ogre::CullingMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCullingMode(_cpp_mode);
} /* void Ogre::Pass::setCullingMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getCullingMode()
 * Type:       non-virtual method
 * Definition: CullingMode Ogre::Pass::getCullingMode
 * Signature:  ()Ogre_CullingMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getCullingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CullingMode _cpp_result = _cpp_this->getCullingMode() ; 
   return _cpp_result;
} /* CullingMode Ogre::Pass::getCullingMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setManualCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setManualCullingMode
 * Signature:  (Ogre_ManualCullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setManualCullingMode_1_1ManualCullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::ManualCullingMode _cpp_mode = (Ogre::ManualCullingMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setManualCullingMode(_cpp_mode);
} /* void Ogre::Pass::setManualCullingMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getManualCullingMode()
 * Type:       non-virtual method
 * Definition: ManualCullingMode Ogre::Pass::getManualCullingMode
 * Signature:  ()Ogre_ManualCullingMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getManualCullingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ManualCullingMode _cpp_result = _cpp_this->getManualCullingMode() ; 
   return _cpp_result;
} /* ManualCullingMode Ogre::Pass::getManualCullingMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLightingEnabled(_cpp_enabled);
} /* void Ogre::Pass::setLightingEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightingEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getLightingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getLightingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getLightingEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getLightingEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setMaxSimultaneousLights()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setMaxSimultaneousLights
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setMaxSimultaneousLights_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint maxLights
)
{
   // parameter conversions 
  unsigned short _cpp_maxLights = maxLights; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaxSimultaneousLights(_cpp_maxLights);
} /* void Ogre::Pass::setMaxSimultaneousLights */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getMaxSimultaneousLights()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getMaxSimultaneousLights
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getMaxSimultaneousLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getMaxSimultaneousLights() ; 
   return _cpp_result;
} /* unsigned short Ogre::Pass::getMaxSimultaneousLights */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setStartLight()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setStartLight
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setStartLight_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint startLight
)
{
   // parameter conversions 
  unsigned short _cpp_startLight = startLight; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setStartLight(_cpp_startLight);
} /* void Ogre::Pass::setStartLight */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getStartLight()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getStartLight
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getStartLight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getStartLight() ; 
   return _cpp_result;
} /* unsigned short Ogre::Pass::getStartLight */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadingMode
 * Signature:  (Ogre_ShadeOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadingMode_1_1ShadeOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::ShadeOptions _cpp_mode = (Ogre::ShadeOptions)mode; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadingMode(_cpp_mode);
} /* void Ogre::Pass::setShadingMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadingMode()
 * Type:       non-virtual method
 * Definition: ShadeOptions Ogre::Pass::getShadingMode
 * Signature:  ()Ogre_ShadeOptions
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getShadingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadeOptions _cpp_result = _cpp_this->getShadingMode() ; 
   return _cpp_result;
} /* ShadeOptions Ogre::Pass::getShadingMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPolygonMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPolygonMode
 * Signature:  (Ogre_PolygonMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPolygonMode_1_1PolygonModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::PolygonMode _cpp_mode = (Ogre::PolygonMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonMode(_cpp_mode);
} /* void Ogre::Pass::setPolygonMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPolygonMode()
 * Type:       non-virtual method
 * Definition: PolygonMode Ogre::Pass::getPolygonMode
 * Signature:  ()Ogre_PolygonMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getPolygonMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PolygonMode _cpp_result = _cpp_this->getPolygonMode() ; 
   return _cpp_result;
} /* PolygonMode Ogre::Pass::getPolygonMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Pass::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
)
{
   // parameter conversions 
  bool _cpp_override = override ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_override);
} /* virtual void Ogre::Pass::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Pass::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPolygonModeOverrideable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Pass::getPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setFog()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setFog
 * Signature:  (ZOgre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setFog_1_1bvFogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean overrideScene, 
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
)
{
   // parameter conversions 
  bool _cpp_overrideScene = overrideScene ? true : false;
  Ogre::FogMode _cpp_mode = (Ogre::FogMode)mode;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  float _cpp_expDensity = expDensity;
  float _cpp_linearStart = linearStart;
  float _cpp_linearEnd = linearEnd; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFog(_cpp_overrideScene, _cpp_mode, *_cpp_colour, _cpp_expDensity, _cpp_linearStart, _cpp_linearEnd);
} /* void Ogre::Pass::setFog */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogOverride()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getFogOverride
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getFogOverride_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getFogOverride() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getFogOverride */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogMode()
 * Type:       non-virtual method
 * Definition: FogMode Ogre::Pass::getFogMode
 * Signature:  ()Ogre_FogMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getFogMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FogMode _cpp_result = _cpp_this->getFogMode() ; 
   return _cpp_result;
} /* FogMode Ogre::Pass::getFogMode */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getFogColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getFogColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getFogColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Pass::getFogColour */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogStart()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getFogStart
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getFogStart_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFogStart() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getFogStart */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogEnd()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getFogEnd
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getFogEnd_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFogEnd() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getFogEnd */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogDensity()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getFogDensity
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getFogDensity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFogDensity() ; 
   return _cpp_result;
} /* Real Ogre::Pass::getFogDensity */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthBias
 * Signature:  (FF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthBias_1_1FvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat constantBias, 
  jfloat slopeScaleBias
)
{
   // parameter conversions 
  float _cpp_constantBias = constantBias;
  float _cpp_slopeScaleBias = slopeScaleBias; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthBias(_cpp_constantBias, _cpp_slopeScaleBias);
} /* void Ogre::Pass::setDepthBias */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthBiasConstant()
 * Type:       non-virtual method
 * Definition: float Ogre::Pass::getDepthBiasConstant
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getDepthBiasConstant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDepthBiasConstant() ; 
   return _cpp_result;
} /* float Ogre::Pass::getDepthBiasConstant */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthBiasSlopeScale()
 * Type:       non-virtual method
 * Definition: float Ogre::Pass::getDepthBiasSlopeScale
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getDepthBiasSlopeScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDepthBiasSlopeScale() ; 
   return _cpp_result;
} /* float Ogre::Pass::getDepthBiasSlopeScale */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setIterationDepthBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setIterationDepthBias
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setIterationDepthBias_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat biasPerIteration
)
{
   // parameter conversions 
  float _cpp_biasPerIteration = biasPerIteration; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setIterationDepthBias(_cpp_biasPerIteration);
} /* void Ogre::Pass::setIterationDepthBias */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getIterationDepthBias()
 * Type:       non-virtual method
 * Definition: float Ogre::Pass::getIterationDepthBias
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getIterationDepthBias_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getIterationDepthBias() ; 
   return _cpp_result;
} /* float Ogre::Pass::getIterationDepthBias */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaRejectSettings()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaRejectSettings
 * Signature:  (Ogre_CompareFunctionCZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaRejectSettings_1_1CompareFunctionvBvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func, 
  jshort value, 
  jboolean alphaToCoverageEnabled
)
{
   // parameter conversions 
  Ogre::CompareFunction _cpp_func = (Ogre::CompareFunction)func;
  unsigned char _cpp_value = value;
  bool _cpp_alphaToCoverageEnabled = alphaToCoverageEnabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAlphaRejectSettings(_cpp_func, _cpp_value, _cpp_alphaToCoverageEnabled);
} /* void Ogre::Pass::setAlphaRejectSettings */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaRejectFunction()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaRejectFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaRejectFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
)
{
   // parameter conversions 
  Ogre::CompareFunction _cpp_func = (Ogre::CompareFunction)func; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAlphaRejectFunction(_cpp_func);
} /* void Ogre::Pass::setAlphaRejectFunction */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaRejectValue()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaRejectValue
 * Signature:  (C)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaRejectValue_1_1Bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort val
)
{
   // parameter conversions 
  unsigned char _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAlphaRejectValue(_cpp_val);
} /* void Ogre::Pass::setAlphaRejectValue */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getAlphaRejectFunction()
 * Type:       non-virtual method
 * Definition: CompareFunction Ogre::Pass::getAlphaRejectFunction
 * Signature:  ()Ogre_CompareFunction
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getAlphaRejectFunction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompareFunction _cpp_result = _cpp_this->getAlphaRejectFunction() ; 
   return _cpp_result;
} /* CompareFunction Ogre::Pass::getAlphaRejectFunction */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getAlphaRejectValue()
 * Type:       non-virtual method
 * Definition: unsigned char Ogre::Pass::getAlphaRejectValue
 * Signature:  ()C
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_Pass__1getAlphaRejectValue_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getAlphaRejectValue() ; 
   return _cpp_result;
} /* unsigned char Ogre::Pass::getAlphaRejectValue */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaToCoverageEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaToCoverageEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaToCoverageEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAlphaToCoverageEnabled(_cpp_enabled);
} /* void Ogre::Pass::setAlphaToCoverageEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     isAlphaToCoverageEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isAlphaToCoverageEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isAlphaToCoverageEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAlphaToCoverageEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::isAlphaToCoverageEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setTransparentSortingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setTransparentSortingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setTransparentSortingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTransparentSortingEnabled(_cpp_enabled);
} /* void Ogre::Pass::setTransparentSortingEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getTransparentSortingEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getTransparentSortingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getTransparentSortingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getTransparentSortingEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getTransparentSortingEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setIteratePerLight()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setIteratePerLight
 * Signature:  (ZZOgre_Light_LightTypes)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setIteratePerLight_1_1bvbvLight_1LightTypesv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jboolean onlyForOneLightType, 
  jint lightType
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false;
  bool _cpp_onlyForOneLightType = onlyForOneLightType ? true : false;
  Ogre::Light::LightTypes _cpp_lightType = (Ogre::Light::LightTypes)lightType; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setIteratePerLight(_cpp_enabled, _cpp_onlyForOneLightType, _cpp_lightType);
} /* void Ogre::Pass::setIteratePerLight */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getIteratePerLight()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getIteratePerLight
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getIteratePerLight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getIteratePerLight() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getIteratePerLight */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getRunOnlyForOneLightType()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getRunOnlyForOneLightType
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getRunOnlyForOneLightType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getRunOnlyForOneLightType() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getRunOnlyForOneLightType */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getOnlyLightType()
 * Type:       non-virtual method
 * Definition: Light::LightTypes Ogre::Pass::getOnlyLightType
 * Signature:  ()Ogre_Light_LightTypes
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getOnlyLightType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Light::LightTypes _cpp_result = _cpp_this->getOnlyLightType() ; 
   return _cpp_result;
} /* Light::LightTypes Ogre::Pass::getOnlyLightType */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightCountPerIteration()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightCountPerIteration
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightCountPerIteration_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
)
{
   // parameter conversions 
  unsigned short _cpp_c = c; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLightCountPerIteration(_cpp_c);
} /* void Ogre::Pass::setLightCountPerIteration */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightCountPerIteration()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getLightCountPerIteration
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getLightCountPerIteration_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getLightCountPerIteration() ; 
   return _cpp_result;
} /* unsigned short Ogre::Pass::getLightCountPerIteration */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Pass::getParent
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::Pass::getParent */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getResourceGroup()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getResourceGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getResourceGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getResourceGroup() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getResourceGroup */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setVertexProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setVertexProgram
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setVertexProgram_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean resetParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_resetParams = resetParams ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexProgram(_cpp_name, _cpp_resetParams);
} /* void Ogre::Pass::setVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setVertexProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setVertexProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
)
{
   // parameter conversions 
  Ogre::GpuProgramParametersSharedPtr* _cpp_params = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(params); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexProgramParameters(*_cpp_params);
} /* void Ogre::Pass::setVertexProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getVertexProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getVertexProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getVertexProgramName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getVertexProgramName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getVertexProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getVertexProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->getVertexProgramParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::Pass::getVertexProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getVertexProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->getVertexProgram() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuProgramPtr& Ogre::Pass::getVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowCasterVertexProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowCasterVertexProgram
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowCasterVertexProgram_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowCasterVertexProgram(_cpp_name);
} /* void Ogre::Pass::setShadowCasterVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowCasterVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowCasterVertexProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowCasterVertexProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
)
{
   // parameter conversions 
  Ogre::GpuProgramParametersSharedPtr* _cpp_params = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(params); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowCasterVertexProgramParameters(*_cpp_params);
} /* void Ogre::Pass::setShadowCasterVertexProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowCasterVertexProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getShadowCasterVertexProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getShadowCasterVertexProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getShadowCasterVertexProgramName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getShadowCasterVertexProgramName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowCasterVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getShadowCasterVertexProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowCasterVertexProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->getShadowCasterVertexProgramParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::Pass::getShadowCasterVertexProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowCasterVertexProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getShadowCasterVertexProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowCasterVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->getShadowCasterVertexProgram() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuProgramPtr& Ogre::Pass::getShadowCasterVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverVertexProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverVertexProgram
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverVertexProgram_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowReceiverVertexProgram(_cpp_name);
} /* void Ogre::Pass::setShadowReceiverVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverVertexProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverVertexProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
)
{
   // parameter conversions 
  Ogre::GpuProgramParametersSharedPtr* _cpp_params = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(params); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowReceiverVertexProgramParameters(*_cpp_params);
} /* void Ogre::Pass::setShadowReceiverVertexProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverFragmentProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverFragmentProgram
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverFragmentProgram_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowReceiverFragmentProgram(_cpp_name);
} /* void Ogre::Pass::setShadowReceiverFragmentProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverFragmentProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverFragmentProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
)
{
   // parameter conversions 
  Ogre::GpuProgramParametersSharedPtr* _cpp_params = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(params); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowReceiverFragmentProgramParameters(*_cpp_params);
} /* void Ogre::Pass::setShadowReceiverFragmentProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverVertexProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getShadowReceiverVertexProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getShadowReceiverVertexProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getShadowReceiverVertexProgramName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getShadowReceiverVertexProgramName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getShadowReceiverVertexProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverVertexProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->getShadowReceiverVertexProgramParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::Pass::getShadowReceiverVertexProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverVertexProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getShadowReceiverVertexProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->getShadowReceiverVertexProgram() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuProgramPtr& Ogre::Pass::getShadowReceiverVertexProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverFragmentProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getShadowReceiverFragmentProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getShadowReceiverFragmentProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getShadowReceiverFragmentProgramName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getShadowReceiverFragmentProgramName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getShadowReceiverFragmentProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverFragmentProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->getShadowReceiverFragmentProgramParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::Pass::getShadowReceiverFragmentProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverFragmentProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getShadowReceiverFragmentProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->getShadowReceiverFragmentProgram() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuProgramPtr& Ogre::Pass::getShadowReceiverFragmentProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setFragmentProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setFragmentProgram
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setFragmentProgram_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean resetParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_resetParams = resetParams ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFragmentProgram(_cpp_name, _cpp_resetParams);
} /* void Ogre::Pass::setFragmentProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setFragmentProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setFragmentProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
)
{
   // parameter conversions 
  Ogre::GpuProgramParametersSharedPtr* _cpp_params = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(params); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFragmentProgramParameters(*_cpp_params);
} /* void Ogre::Pass::setFragmentProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFragmentProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getFragmentProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getFragmentProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getFragmentProgramName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getFragmentProgramName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getFragmentProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getFragmentProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->getFragmentProgramParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::Pass::getFragmentProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getFragmentProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getFragmentProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->getFragmentProgram() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuProgramPtr& Ogre::Pass::getFragmentProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setGeometryProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setGeometryProgram
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setGeometryProgram_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean resetParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_resetParams = resetParams ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setGeometryProgram(_cpp_name, _cpp_resetParams);
} /* void Ogre::Pass::setGeometryProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setGeometryProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setGeometryProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setGeometryProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
)
{
   // parameter conversions 
  Ogre::GpuProgramParametersSharedPtr* _cpp_params = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(params); 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setGeometryProgramParameters(*_cpp_params);
} /* void Ogre::Pass::setGeometryProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getGeometryProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getGeometryProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getGeometryProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getGeometryProgramName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pass::getGeometryProgramName */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getGeometryProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getGeometryProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getGeometryProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->getGeometryProgramParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::Pass::getGeometryProgramParameters */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getGeometryProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getGeometryProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getGeometryProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->getGeometryProgram() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuProgramPtr& Ogre::Pass::getGeometryProgram */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _split()
 * Type:       non-virtual method
 * Definition: Pass* Ogre::Pass::_split
 * Signature:  (S)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1_1split_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numUnits
)
{
   // parameter conversions 
  unsigned short _cpp_numUnits = numUnits; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass* _cpp_result = _cpp_this->_split(_cpp_numUnits) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pass* Ogre::Pass::_split */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _notifyIndex()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_notifyIndex
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1notifyIndex_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyIndex(_cpp_index);
} /* void Ogre::Pass::_notifyIndex */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _prepare()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_prepare();
} /* void Ogre::Pass::_prepare */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _unprepare()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_unprepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1unprepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_unprepare();
} /* void Ogre::Pass::_unprepare */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _load()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_load
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1load (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_load();
} /* void Ogre::Pass::_load */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _unload()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_unload();
} /* void Ogre::Pass::_unload */


/*
 * Class:      org.ogre4j.Pass
 * Method:     isLoaded()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::isLoaded */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getHash()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::Pass::getHash
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getHash_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getHash() ; 
   return _cpp_result;
} /* uint32 Ogre::Pass::getHash */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _dirtyHash()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_dirtyHash
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1dirtyHash (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_dirtyHash();
} /* void Ogre::Pass::_dirtyHash */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _recalculateHash()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_recalculateHash
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1recalculateHash (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_recalculateHash();
} /* void Ogre::Pass::_recalculateHash */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _notifyNeedsRecompile()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_notifyNeedsRecompile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1notifyNeedsRecompile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyNeedsRecompile();
} /* void Ogre::Pass::_notifyNeedsRecompile */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _updateAutoParamsNoLights()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_updateAutoParamsNoLights
 * Signature:  (Ogre_AutoParamDataSource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1updateAutoParamsNoLights_1_1AutoParamDataSourceP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source
)
{
   // parameter conversions 
  const Ogre::AutoParamDataSource* _cpp_source = reinterpret_cast< const Ogre::AutoParamDataSource* >(source); 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateAutoParamsNoLights(_cpp_source);
} /* void Ogre::Pass::_updateAutoParamsNoLights */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _updateAutoParamsLightsOnly()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_updateAutoParamsLightsOnly
 * Signature:  (Ogre_AutoParamDataSource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1updateAutoParamsLightsOnly_1_1AutoParamDataSourceP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source
)
{
   // parameter conversions 
  const Ogre::AutoParamDataSource* _cpp_source = reinterpret_cast< const Ogre::AutoParamDataSource* >(source); 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateAutoParamsLightsOnly(_cpp_source);
} /* void Ogre::Pass::_updateAutoParamsLightsOnly */


/*
 * Class:      org.ogre4j.Pass
 * Method:     _getTextureUnitWithContentTypeIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::_getTextureUnitWithContentTypeIndex
 * Signature:  (Ogre_TextureUnitState_ContentTypeS)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1_1getTextureUnitWithContentTypeIndex_1_1TextureUnitState_1ContentTypevHv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint contentType, 
  jint index
)
{
   // parameter conversions 
  Ogre::TextureUnitState::ContentType _cpp_contentType = (Ogre::TextureUnitState::ContentType)contentType;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->_getTextureUnitWithContentTypeIndex(_cpp_contentType, _cpp_index) ; 
   return _cpp_result;
} /* unsigned short Ogre::Pass::_getTextureUnitWithContentTypeIndex */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setTextureFiltering
 * Signature:  (Ogre_TextureFilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setTextureFiltering_1_1TextureFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint filterType
)
{
   // parameter conversions 
  Ogre::TextureFilterOptions _cpp_filterType = (Ogre::TextureFilterOptions)filterType; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureFiltering(_cpp_filterType);
} /* void Ogre::Pass::setTextureFiltering */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setTextureAnisotropy()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setTextureAnisotropy
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setTextureAnisotropy_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong maxAniso
)
{
   // parameter conversions 
  unsigned int _cpp_maxAniso = maxAniso; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureAnisotropy(_cpp_maxAniso);
} /* void Ogre::Pass::setTextureAnisotropy */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setNormaliseNormals()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setNormaliseNormals
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setNormaliseNormals_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean normalise
)
{
   // parameter conversions 
  bool _cpp_normalise = normalise ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNormaliseNormals(_cpp_normalise);
} /* void Ogre::Pass::setNormaliseNormals */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getNormaliseNormals()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getNormaliseNormals
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getNormaliseNormals_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getNormaliseNormals() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getNormaliseNormals */


/*
 * Class:      org.ogre4j.Pass
 * Method:     queueForDeletion()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::queueForDeletion
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1queueForDeletion (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->queueForDeletion();
} /* void Ogre::Pass::queueForDeletion */


/*
 * Class:      org.ogre4j.Pass
 * Method:     isAmbientOnly()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isAmbientOnly
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isAmbientOnly_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAmbientOnly() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::isAmbientOnly */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setPassIterationCount()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPassIterationCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPassIterationCount_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
)
{
   // parameter conversions 
  const size_t _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPassIterationCount(_cpp_count);
} /* void Ogre::Pass::setPassIterationCount */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPassIterationCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Pass::getPassIterationCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getPassIterationCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getPassIterationCount() ; 
   return _cpp_result;
} /* size_t Ogre::Pass::getPassIterationCount */


/*
 * Class:      org.ogre4j.Pass
 * Method:     applyTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::applyTextureAliases
 * Signature:  (Ogre_AliasTextureNamePairListZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1applyTextureAliases_1_1AliasTextureNamePairListRbV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aliasList, 
  jboolean apply
)
{
   // parameter conversions 
  const Ogre::AliasTextureNamePairList* _cpp_aliasList = reinterpret_cast< const Ogre::AliasTextureNamePairList* >(aliasList);
  const bool _cpp_apply = apply ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->applyTextureAliases(*_cpp_aliasList, _cpp_apply) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::applyTextureAliases */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightScissoringEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightScissoringEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightScissoringEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLightScissoringEnabled(_cpp_enabled);
} /* void Ogre::Pass::setLightScissoringEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightScissoringEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getLightScissoringEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getLightScissoringEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getLightScissoringEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getLightScissoringEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightClipPlanesEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightClipPlanesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightClipPlanesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLightClipPlanesEnabled(_cpp_enabled);
} /* void Ogre::Pass::setLightClipPlanesEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightClipPlanesEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getLightClipPlanesEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getLightClipPlanesEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getLightClipPlanesEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Pass::getLightClipPlanesEnabled */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setIlluminationStage()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setIlluminationStage
 * Signature:  (Ogre_IlluminationStage)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setIlluminationStage_1_1IlluminationStagev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint is
)
{
   // parameter conversions 
  Ogre::IlluminationStage _cpp_is = (Ogre::IlluminationStage)is; 
   
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setIlluminationStage(_cpp_is);
} /* void Ogre::Pass::setIlluminationStage */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getIlluminationStage()
 * Type:       non-virtual method
 * Definition: IlluminationStage Ogre::Pass::getIlluminationStage
 * Signature:  ()Ogre_IlluminationStage
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getIlluminationStage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pass* _cpp_this = reinterpret_cast<const Ogre::Pass*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IlluminationStage _cpp_result = _cpp_this->getIlluminationStage() ; 
   return _cpp_result;
} /* IlluminationStage Ogre::Pass::getIlluminationStage */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getDirtyHashList()
 * Type:       static method
 * Definition: static const PassSet& Ogre::Pass::getDirtyHashList
 * Signature:  ()Ogre_Pass_PassSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getDirtyHashList (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Pass with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Pass::PassSet* _cpp_result = & Ogre::Pass::getDirtyHashList(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static const PassSet& Ogre::Pass::getDirtyHashList */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getPassGraveyard()
 * Type:       static method
 * Definition: static const PassSet& Ogre::Pass::getPassGraveyard
 * Signature:  ()Ogre_Pass_PassSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getPassGraveyard (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Pass with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Pass::PassSet* _cpp_result = & Ogre::Pass::getPassGraveyard(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static const PassSet& Ogre::Pass::getPassGraveyard */


/*
 * Class:      org.ogre4j.Pass
 * Method:     clearDirtyHashList()
 * Type:       static method
 * Definition: static void Ogre::Pass::clearDirtyHashList
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1clearDirtyHashList (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Pass without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::Pass::clearDirtyHashList();
} /* static void Ogre::Pass::clearDirtyHashList */


/*
 * Class:      org.ogre4j.Pass
 * Method:     processPendingPassUpdates()
 * Type:       static method
 * Definition: static void Ogre::Pass::processPendingPassUpdates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1processPendingPassUpdates (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Pass without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::Pass::processPendingPassUpdates();
} /* static void Ogre::Pass::processPendingPassUpdates */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setHashFunction()
 * Type:       static method
 * Definition: static void Ogre::Pass::setHashFunction
 * Signature:  (Ogre_Pass_BuiltinHashFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setHashFunction_1_1BuiltinHashFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint builtin
)
{
   // static method of class Ogre::Pass without return value 
   // parameter conversions 
  Ogre::Pass::BuiltinHashFunction _cpp_builtin = (Ogre::Pass::BuiltinHashFunction)builtin; 
   
   // call library method 
   Ogre::Pass::setHashFunction(_cpp_builtin);
} /* static void Ogre::Pass::setHashFunction */


/*
 * Class:      org.ogre4j.Pass
 * Method:     setHashFunction()
 * Type:       static method
 * Definition: static void Ogre::Pass::setHashFunction
 * Signature:  (Ogre_Pass_HashFunc)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setHashFunction_1_1HashFuncp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong hashFunc
)
{
   // static method of class Ogre::Pass without return value 
   // parameter conversions 
  Ogre::Pass::HashFunc* _cpp_hashFunc = reinterpret_cast< Ogre::Pass::HashFunc* >(hashFunc); 
   
   // call library method 
   Ogre::Pass::setHashFunction(_cpp_hashFunc);
} /* static void Ogre::Pass::setHashFunction */


/*
 * Class:      org.ogre4j.Pass
 * Method:     getHashFunction()
 * Type:       static method
 * Definition: static HashFunc* Ogre::Pass::getHashFunction
 * Signature:  ()Ogre_Pass_HashFunc
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getHashFunction (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Pass with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Pass::HashFunc* _cpp_result = Ogre::Pass::getHashFunction(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static HashFunc* Ogre::Pass::getHashFunction */


/*
 * Class:      org.ogre4j.Pass
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Pass::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Pass 
   // cast pointer to C++ object 
   Ogre::Pass* _cpp_this = reinterpret_cast<Ogre::Pass*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Pass::__delete */
