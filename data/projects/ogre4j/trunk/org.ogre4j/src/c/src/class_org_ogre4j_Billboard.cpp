///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Billboard.h"

// import header files of original library
#include <OgreBillboard.h>



/*
 * Class:      org.ogre4j.Billboard
 * Method:     Billboard()
 * Type:       constructor
 * Definition: Ogre::Billboard::Billboard
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1_1createBillboard (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Billboard 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Billboard 
   Ogre::Billboard* _cpp_this = new Ogre::Billboard(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Billboard::Billboard */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     Billboard()
 * Type:       constructor
 * Definition: Ogre::Billboard::Billboard
 * Signature:  (Ogre_Vector3Ogre_BillboardSetOgre_ColourValue)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1_1createBillboard_1_1Vector3RBillboardSetpColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong position, 
  jlong owner, 
  jlong colour
)
{
   // constructor of class Ogre::Billboard 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_position = reinterpret_cast< const Ogre::Vector3* >(position);
  Ogre::BillboardSet* _cpp_owner = reinterpret_cast< Ogre::BillboardSet* >(owner);
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // create new instance of class Ogre::Billboard 
   Ogre::Billboard* _cpp_this = new Ogre::Billboard(*_cpp_position, _cpp_owner, *_cpp_colour); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Billboard::Billboard */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getRotation()
 * Type:       non-virtual method
 * Definition: const Radian& Ogre::Billboard::getRotation
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getRotation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->getRotation() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Radian& Ogre::Billboard::getRotation */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setRotation()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setRotation
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setRotation_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rotation
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_rotation = reinterpret_cast< const Ogre::Radian* >(rotation); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRotation(*_cpp_rotation);
} /* void Ogre::Billboard::setRotation */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setPosition_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_position = reinterpret_cast< const Ogre::Vector3* >(position); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPosition(*_cpp_position);
} /* void Ogre::Billboard::setPosition */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setPosition
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setPosition_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPosition(_cpp_x, _cpp_y, _cpp_z);
} /* void Ogre::Billboard::setPosition */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getPosition()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Billboard::getPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Billboard::getPosition */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
)
{
   // parameter conversions 
  float _cpp_width = width;
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDimensions(_cpp_width, _cpp_height);
} /* void Ogre::Billboard::setDimensions */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     resetDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::resetDimensions
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1resetDimensions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetDimensions();
} /* void Ogre::Billboard::resetDimensions */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setColour()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColour(*_cpp_colour);
} /* void Ogre::Billboard::setColour */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Billboard::getColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Billboard::getColour */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     hasOwnDimensions()
 * Type:       non-virtual method
 * Definition: bool Ogre::Billboard::hasOwnDimensions
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Billboard__1hasOwnDimensions_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasOwnDimensions() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Billboard::hasOwnDimensions */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getOwnWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::Billboard::getOwnWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Billboard__1getOwnWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getOwnWidth() ; 
   return _cpp_result;
} /* Real Ogre::Billboard::getOwnWidth */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getOwnHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::Billboard::getOwnHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Billboard__1getOwnHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getOwnHeight() ; 
   return _cpp_result;
} /* Real Ogre::Billboard::getOwnHeight */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     _notifyOwner()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::_notifyOwner
 * Signature:  (Ogre_BillboardSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1_1notifyOwner_1_1BillboardSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong owner
)
{
   // parameter conversions 
  Ogre::BillboardSet* _cpp_owner = reinterpret_cast< Ogre::BillboardSet* >(owner); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyOwner(_cpp_owner);
} /* void Ogre::Billboard::_notifyOwner */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     isUseTexcoordRect()
 * Type:       non-virtual method
 * Definition: bool Ogre::Billboard::isUseTexcoordRect
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Billboard__1isUseTexcoordRect_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isUseTexcoordRect() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Billboard::isUseTexcoordRect */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setTexcoordIndex()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setTexcoordIndex
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setTexcoordIndex_1_1uint16v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint texcoordIndex
)
{
   // parameter conversions 
  unsigned short _cpp_texcoordIndex = texcoordIndex; 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTexcoordIndex(_cpp_texcoordIndex);
} /* void Ogre::Billboard::setTexcoordIndex */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getTexcoordIndex()
 * Type:       non-virtual method
 * Definition: uint16 Ogre::Billboard::getTexcoordIndex
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Billboard__1getTexcoordIndex_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getTexcoordIndex() ; 
   return _cpp_result;
} /* uint16 Ogre::Billboard::getTexcoordIndex */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setTexcoordRect()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setTexcoordRect
 * Signature:  (Ogre_FloatRect)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setTexcoordRect_1_1FloatRectR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong texcoordRect
)
{
   // parameter conversions 
  const Ogre::FloatRect* _cpp_texcoordRect = reinterpret_cast< const Ogre::FloatRect* >(texcoordRect); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTexcoordRect(*_cpp_texcoordRect);
} /* void Ogre::Billboard::setTexcoordRect */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setTexcoordRect()
 * Type:       non-virtual method
 * Definition: void Ogre::Billboard::setTexcoordRect
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setTexcoordRect_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat u0, 
  jfloat v0, 
  jfloat u1, 
  jfloat v1
)
{
   // parameter conversions 
  float _cpp_u0 = u0;
  float _cpp_v0 = v0;
  float _cpp_u1 = u1;
  float _cpp_v1 = v1; 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTexcoordRect(_cpp_u0, _cpp_v0, _cpp_u1, _cpp_v1);
} /* void Ogre::Billboard::setTexcoordRect */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getTexcoordRect()
 * Type:       non-virtual method
 * Definition: const FloatRect& Ogre::Billboard::getTexcoordRect
 * Signature:  ()Ogre_FloatRect
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getTexcoordRect_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Billboard* _cpp_this = reinterpret_cast<const Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FloatRect* _cpp_result = & _cpp_this->getTexcoordRect() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const FloatRect& Ogre::Billboard::getTexcoordRect */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Billboard::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Billboard 
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Billboard::__delete */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getmPosition()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::Billboard::mPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getmPosition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->mPosition); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Billboard::mPosition */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setmPosition()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::Billboard::mPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setmPosition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this =reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mPosition = *_cpp__jni_value_;
} /* Vector3 Ogre::Billboard::mPosition */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getmDirection()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::Billboard::mDirection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getmDirection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->mDirection); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Billboard::mDirection */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setmDirection()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::Billboard::mDirection
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setmDirection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this =reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mDirection = *_cpp__jni_value_;
} /* Vector3 Ogre::Billboard::mDirection */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getmParentSet()
 * Type:       getter for public attribute
 * Definition: BillboardSet* Ogre::Billboard::mParentSet
 * Signature:  ()Ogre_BillboardSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getmParentSet (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardSet* _cpp_result = _cpp_this->mParentSet; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* BillboardSet* Ogre::Billboard::mParentSet */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setmParentSet()
 * Type:       setter for public attribute
 * Definition: BillboardSet* Ogre::Billboard::mParentSet
 * Signature:  (Ogre_BillboardSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setmParentSet (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::BillboardSet* _cpp__jni_value_ = reinterpret_cast< Ogre::BillboardSet* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this =reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mParentSet = _cpp__jni_value_;
} /* BillboardSet* Ogre::Billboard::mParentSet */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getmColour()
 * Type:       getter for public attribute
 * Definition: ColourValue Ogre::Billboard::mColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getmColour (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->mColour); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::Billboard::mColour */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setmColour()
 * Type:       setter for public attribute
 * Definition: ColourValue Ogre::Billboard::mColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setmColour (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::ColourValue* _cpp__jni_value_ = reinterpret_cast< Ogre::ColourValue* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this =reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mColour = *_cpp__jni_value_;
} /* ColourValue Ogre::Billboard::mColour */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     getmRotation()
 * Type:       getter for public attribute
 * Definition: Radian Ogre::Billboard::mRotation
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Billboard__1getmRotation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this = reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->mRotation); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Billboard::mRotation */


/*
 * Class:      org.ogre4j.Billboard
 * Method:     setmRotation()
 * Type:       setter for public attribute
 * Definition: Radian Ogre::Billboard::mRotation
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Billboard__1setmRotation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Radian* _cpp__jni_value_ = reinterpret_cast< Ogre::Radian* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::Billboard* _cpp_this =reinterpret_cast<Ogre::Billboard*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mRotation = *_cpp__jni_value_;
} /* Radian Ogre::Billboard::mRotation */
