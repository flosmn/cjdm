///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_MovableObject_00024Listener.h"

// import header files of original library
#include <OgreMovableObject.h>



/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     Listener()
 * Type:       constructor
 * Definition: Ogre::MovableObject::Listener::Listener
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MovableObject_00024Listener__1_1createListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::MovableObject::Listener 
   
   // parameter conversions 
   
   // create new instance of class Ogre::MovableObject::Listener 
   Ogre::MovableObject::Listener* _cpp_this = new Ogre::MovableObject::Listener(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::MovableObject::Listener::Listener */


/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     objectDestroyed()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::Listener::objectDestroyed
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MovableObject_00024Listener__1objectDestroyed_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong a1
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_a1 = reinterpret_cast< Ogre::MovableObject* >(a1); 
   
   // cast pointer to C++ object 
   Ogre::MovableObject::Listener* _cpp_this = reinterpret_cast<Ogre::MovableObject::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->objectDestroyed(_cpp_a1);
} /* virtual void Ogre::MovableObject::Listener::objectDestroyed */


/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     objectAttached()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::Listener::objectAttached
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MovableObject_00024Listener__1objectAttached_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong a1
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_a1 = reinterpret_cast< Ogre::MovableObject* >(a1); 
   
   // cast pointer to C++ object 
   Ogre::MovableObject::Listener* _cpp_this = reinterpret_cast<Ogre::MovableObject::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->objectAttached(_cpp_a1);
} /* virtual void Ogre::MovableObject::Listener::objectAttached */


/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     objectDetached()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::Listener::objectDetached
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MovableObject_00024Listener__1objectDetached_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong a1
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_a1 = reinterpret_cast< Ogre::MovableObject* >(a1); 
   
   // cast pointer to C++ object 
   Ogre::MovableObject::Listener* _cpp_this = reinterpret_cast<Ogre::MovableObject::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->objectDetached(_cpp_a1);
} /* virtual void Ogre::MovableObject::Listener::objectDetached */


/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     objectMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::Listener::objectMoved
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MovableObject_00024Listener__1objectMoved_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong a1
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_a1 = reinterpret_cast< Ogre::MovableObject* >(a1); 
   
   // cast pointer to C++ object 
   Ogre::MovableObject::Listener* _cpp_this = reinterpret_cast<Ogre::MovableObject::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->objectMoved(_cpp_a1);
} /* virtual void Ogre::MovableObject::Listener::objectMoved */


/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     objectRendering()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::Listener::objectRendering
 * Signature:  (Ogre_MovableObjectOgre_Camera)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MovableObject_00024Listener__1objectRendering_1_1MovableObjectPCameraP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong a1, 
  jlong a2
)
{
   // parameter conversions 
  const Ogre::MovableObject* _cpp_a1 = reinterpret_cast< const Ogre::MovableObject* >(a1);
  const Ogre::Camera* _cpp_a2 = reinterpret_cast< const Ogre::Camera* >(a2); 
   
   // cast pointer to C++ object 
   Ogre::MovableObject::Listener* _cpp_this = reinterpret_cast<Ogre::MovableObject::Listener*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->objectRendering(_cpp_a1, _cpp_a2) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::Listener::objectRendering */


/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     objectQueryLights()
 * Type:       virtual method
 * Definition: virtual const LightList* Ogre::MovableObject::Listener::objectQueryLights
 * Signature:  (Ogre_MovableObject)Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MovableObject_00024Listener__1objectQueryLights_1_1MovableObjectP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong a1
)
{
   // parameter conversions 
  const Ogre::MovableObject* _cpp_a1 = reinterpret_cast< const Ogre::MovableObject* >(a1); 
   
   // cast pointer to C++ object 
   Ogre::MovableObject::Listener* _cpp_this = reinterpret_cast<Ogre::MovableObject::Listener*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->objectQueryLights(_cpp_a1) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList* Ogre::MovableObject::Listener::objectQueryLights */


/*
 * Class:      org.ogre4j.MovableObject.00024Listener
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::MovableObject::Listener::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MovableObject_00024Listener__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::MovableObject::Listener 
   // cast pointer to C++ object 
   Ogre::MovableObject::Listener* _cpp_this = reinterpret_cast<Ogre::MovableObject::Listener*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::MovableObject::Listener::__delete */
