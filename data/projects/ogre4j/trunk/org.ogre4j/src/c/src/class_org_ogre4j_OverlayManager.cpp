///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_OverlayManager.h"

// import header files of original library
#include <OgreOverlayManager.h>



/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     OverlayManager()
 * Type:       constructor
 * Definition: Ogre::OverlayManager::OverlayManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1_1createOverlayManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::OverlayManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::OverlayManager 
   Ogre::OverlayManager* _cpp_this = new Ogre::OverlayManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::OverlayManager::OverlayManager */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getScriptPatterns()
 * Type:       virtual method
 * Definition: const StringVector& Ogre::OverlayManager::getScriptPatterns
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getScriptPatterns_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager* _cpp_this = reinterpret_cast<const Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getScriptPatterns() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::OverlayManager::getScriptPatterns */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     parseScript()
 * Type:       virtual method
 * Definition: void Ogre::OverlayManager::parseScript
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1parseScript_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring groupName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parseScript(*_cpp_stream, _cpp_groupName);
} /* void Ogre::OverlayManager::parseScript */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getLoadingOrder()
 * Type:       virtual method
 * Definition: Real Ogre::OverlayManager::getLoadingOrder
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_OverlayManager__1getLoadingOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager* _cpp_this = reinterpret_cast<const Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLoadingOrder() ; 
   return _cpp_result;
} /* Real Ogre::OverlayManager::getLoadingOrder */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     create()
 * Type:       non-virtual method
 * Definition: Overlay* Ogre::OverlayManager::create
 * Signature:  (std_string)Ogre_Overlay
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1create_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Overlay* _cpp_result = _cpp_this->create(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Overlay* Ogre::OverlayManager::create */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getByName()
 * Type:       non-virtual method
 * Definition: Overlay* Ogre::OverlayManager::getByName
 * Signature:  (std_string)Ogre_Overlay
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getByName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Overlay* _cpp_result = _cpp_this->getByName(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Overlay* Ogre::OverlayManager::getByName */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroy()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroy
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroy_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroy(_cpp_name);
} /* void Ogre::OverlayManager::destroy */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroy()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroy
 * Signature:  (Ogre_Overlay)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroy_1_1Overlayp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong overlay
)
{
   // parameter conversions 
  Ogre::Overlay* _cpp_overlay = reinterpret_cast< Ogre::Overlay* >(overlay); 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroy(_cpp_overlay);
} /* void Ogre::OverlayManager::destroy */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyAll()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyAll
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyAll (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAll();
} /* void Ogre::OverlayManager::destroyAll */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getOverlayIterator()
 * Type:       non-virtual method
 * Definition: OverlayMapIterator Ogre::OverlayManager::getOverlayIterator
 * Signature:  ()Ogre_OverlayManager_OverlayMapIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getOverlayIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayManager::OverlayMapIterator* _cpp_result = new Ogre::OverlayManager::OverlayMapIterator( _cpp_this->getOverlayIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* OverlayMapIterator Ogre::OverlayManager::getOverlayIterator */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     _queueOverlaysForRendering()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::_queueOverlaysForRendering
 * Signature:  (Ogre_CameraOgre_RenderQueueOgre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1_1queueOverlaysForRendering_1_1CamerapRenderQueuepViewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam, 
  jlong pQueue, 
  jlong vp
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam);
  Ogre::RenderQueue* _cpp_pQueue = reinterpret_cast< Ogre::RenderQueue* >(pQueue);
  Ogre::Viewport* _cpp_vp = reinterpret_cast< Ogre::Viewport* >(vp); 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_queueOverlaysForRendering(_cpp_cam, _cpp_pQueue, _cpp_vp);
} /* void Ogre::OverlayManager::_queueOverlaysForRendering */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     hasViewportChanged()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayManager::hasViewportChanged
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_OverlayManager__1hasViewportChanged_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager* _cpp_this = reinterpret_cast<const Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasViewportChanged() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::OverlayManager::hasViewportChanged */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getViewportHeight()
 * Type:       non-virtual method
 * Definition: int Ogre::OverlayManager::getViewportHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_OverlayManager__1getViewportHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager* _cpp_this = reinterpret_cast<const Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getViewportHeight() ; 
   return _cpp_result;
} /* int Ogre::OverlayManager::getViewportHeight */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getViewportWidth()
 * Type:       non-virtual method
 * Definition: int Ogre::OverlayManager::getViewportWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_OverlayManager__1getViewportWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager* _cpp_this = reinterpret_cast<const Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getViewportWidth() ; 
   return _cpp_result;
} /* int Ogre::OverlayManager::getViewportWidth */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getViewportAspectRatio()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayManager::getViewportAspectRatio
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_OverlayManager__1getViewportAspectRatio_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager* _cpp_this = reinterpret_cast<const Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getViewportAspectRatio() ; 
   return _cpp_result;
} /* Real Ogre::OverlayManager::getViewportAspectRatio */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     createOverlayElement()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::createOverlayElement
 * Signature:  (std_stringstd_stringZ)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1createOverlayElement_1_1StringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName, 
  jstring instanceName, 
  jboolean isTemplate
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .;
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .;
  bool _cpp_isTemplate = isTemplate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->createOverlayElement(_cpp_typeName, _cpp_instanceName, _cpp_isTemplate) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* OverlayElement* Ogre::OverlayManager::createOverlayElement */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getOverlayElement()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::getOverlayElement
 * Signature:  (std_stringZ)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getOverlayElement_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean isTemplate
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_isTemplate = isTemplate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->getOverlayElement(_cpp_name, _cpp_isTemplate) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* OverlayElement* Ogre::OverlayManager::getOverlayElement */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyOverlayElement()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyOverlayElement
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyOverlayElement_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName, 
  jboolean isTemplate
)
{
   // parameter conversions 
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .;
  bool _cpp_isTemplate = isTemplate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyOverlayElement(_cpp_instanceName, _cpp_isTemplate);
} /* void Ogre::OverlayManager::destroyOverlayElement */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyOverlayElement()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyOverlayElement
 * Signature:  (Ogre_OverlayElementZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyOverlayElement_1_1OverlayElementpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pInstance, 
  jboolean isTemplate
)
{
   // parameter conversions 
  Ogre::OverlayElement* _cpp_pInstance = reinterpret_cast< Ogre::OverlayElement* >(pInstance);
  bool _cpp_isTemplate = isTemplate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyOverlayElement(_cpp_pInstance, _cpp_isTemplate);
} /* void Ogre::OverlayManager::destroyOverlayElement */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyAllOverlayElements()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyAllOverlayElements
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyAllOverlayElements_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean isTemplate
)
{
   // parameter conversions 
  bool _cpp_isTemplate = isTemplate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAllOverlayElements(_cpp_isTemplate);
} /* void Ogre::OverlayManager::destroyAllOverlayElements */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     addOverlayElementFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::addOverlayElementFactory
 * Signature:  (Ogre_OverlayElementFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1addOverlayElementFactory_1_1OverlayElementFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong elemFactory
)
{
   // parameter conversions 
  Ogre::OverlayElementFactory* _cpp_elemFactory = reinterpret_cast< Ogre::OverlayElementFactory* >(elemFactory); 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addOverlayElementFactory(_cpp_elemFactory);
} /* void Ogre::OverlayManager::addOverlayElementFactory */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     createOverlayElementFromTemplate()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::createOverlayElementFromTemplate
 * Signature:  (std_stringstd_stringstd_stringZ)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1createOverlayElementFromTemplate_1_1StringRStringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring templateName, 
  jstring typeName, 
  jstring instanceName, 
  jboolean isTemplate
)
{
   // parameter conversions 
  std::string _cpp_templateName = ""; org::xbig::jni::to_stdstring(_jni_env_, templateName, _cpp_templateName); // calls c-tor only. Not operator= .;
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .;
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .;
  bool _cpp_isTemplate = isTemplate ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->createOverlayElementFromTemplate(_cpp_templateName, _cpp_typeName, _cpp_instanceName, _cpp_isTemplate) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* OverlayElement* Ogre::OverlayManager::createOverlayElementFromTemplate */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     cloneOverlayElementFromTemplate()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::cloneOverlayElementFromTemplate
 * Signature:  (std_stringstd_string)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1cloneOverlayElementFromTemplate_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring templateName, 
  jstring instanceName
)
{
   // parameter conversions 
  std::string _cpp_templateName = ""; org::xbig::jni::to_stdstring(_jni_env_, templateName, _cpp_templateName); // calls c-tor only. Not operator= .;
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->cloneOverlayElementFromTemplate(_cpp_templateName, _cpp_instanceName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* OverlayElement* Ogre::OverlayManager::cloneOverlayElementFromTemplate */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     createOverlayElementFromFactory()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::createOverlayElementFromFactory
 * Signature:  (std_stringstd_string)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1createOverlayElementFromFactory_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName, 
  jstring instanceName
)
{
   // parameter conversions 
  std::string _cpp_typeName = ""; org::xbig::jni::to_stdstring(_jni_env_, typeName, _cpp_typeName); // calls c-tor only. Not operator= .;
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->createOverlayElementFromFactory(_cpp_typeName, _cpp_instanceName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* OverlayElement* Ogre::OverlayManager::createOverlayElementFromFactory */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getTemplateIterator()
 * Type:       non-virtual method
 * Definition: TemplateIterator Ogre::OverlayManager::getTemplateIterator
 * Signature:  ()Ogre_OverlayManager_TemplateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getTemplateIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayManager::TemplateIterator* _cpp_result = new Ogre::OverlayManager::TemplateIterator( _cpp_this->getTemplateIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TemplateIterator Ogre::OverlayManager::getTemplateIterator */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     isTemplate()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayManager::isTemplate
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_OverlayManager__1isTemplate_1_1Stringv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strName
)
{
   // parameter conversions 
  std::string _cpp_strName = ""; org::xbig::jni::to_stdstring(_jni_env_, strName, _cpp_strName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager* _cpp_this = reinterpret_cast<const Ogre::OverlayManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isTemplate(_cpp_strName) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::OverlayManager::isTemplate */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static OverlayManager& Ogre::OverlayManager::getSingleton
 * Signature:  ()Ogre_OverlayManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::OverlayManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::OverlayManager* _cpp_result = & Ogre::OverlayManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static OverlayManager& Ogre::OverlayManager::getSingleton */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static OverlayManager* Ogre::OverlayManager::getSingletonPtr
 * Signature:  ()Ogre_OverlayManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::OverlayManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::OverlayManager* _cpp_result = Ogre::OverlayManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static OverlayManager* Ogre::OverlayManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::OverlayManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::OverlayManager 
   // cast pointer to C++ object 
   Ogre::OverlayManager* _cpp_this = reinterpret_cast<Ogre::OverlayManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::OverlayManager::__delete */
