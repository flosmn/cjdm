///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_DriverVersion.h"

// import header files of original library
#include <OgreRenderSystemCapabilities.h>



/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     DriverVersion()
 * Type:       constructor
 * Definition: Ogre::DriverVersion::DriverVersion
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_DriverVersion__1_1createDriverVersion (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::DriverVersion 
   
   // parameter conversions 
   
   // create new instance of class Ogre::DriverVersion 
   Ogre::DriverVersion* _cpp_this = new Ogre::DriverVersion(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::DriverVersion::DriverVersion */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     toString()
 * Type:       non-virtual method
 * Definition: String Ogre::DriverVersion::toString
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_DriverVersion__1toString_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::DriverVersion* _cpp_this = reinterpret_cast<const Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->toString() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::DriverVersion::toString */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     fromString()
 * Type:       non-virtual method
 * Definition: void Ogre::DriverVersion::fromString
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_DriverVersion__1fromString_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring versionString
)
{
   // parameter conversions 
  std::string _cpp_versionString = ""; org::xbig::jni::to_stdstring(_jni_env_, versionString, _cpp_versionString); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this = reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->fromString(_cpp_versionString);
} /* void Ogre::DriverVersion::fromString */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::DriverVersion::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_DriverVersion__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::DriverVersion 
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this = reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::DriverVersion::__delete */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     getmajor()
 * Type:       getter for public attribute
 * Definition: int Ogre::DriverVersion::major
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_DriverVersion__1getmajor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this = reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->major; 
   return _cpp_result;
} /* int Ogre::DriverVersion::major */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     setmajor()
 * Type:       setter for public attribute
 * Definition: int Ogre::DriverVersion::major
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_DriverVersion__1setmajor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this =reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->major = _cpp__jni_value_;
} /* int Ogre::DriverVersion::major */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     getminor()
 * Type:       getter for public attribute
 * Definition: int Ogre::DriverVersion::minor
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_DriverVersion__1getminor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this = reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->minor; 
   return _cpp_result;
} /* int Ogre::DriverVersion::minor */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     setminor()
 * Type:       setter for public attribute
 * Definition: int Ogre::DriverVersion::minor
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_DriverVersion__1setminor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this =reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->minor = _cpp__jni_value_;
} /* int Ogre::DriverVersion::minor */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     getrelease()
 * Type:       getter for public attribute
 * Definition: int Ogre::DriverVersion::release
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_DriverVersion__1getrelease (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this = reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->release; 
   return _cpp_result;
} /* int Ogre::DriverVersion::release */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     setrelease()
 * Type:       setter for public attribute
 * Definition: int Ogre::DriverVersion::release
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_DriverVersion__1setrelease (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this =reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->release = _cpp__jni_value_;
} /* int Ogre::DriverVersion::release */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     getbuild()
 * Type:       getter for public attribute
 * Definition: int Ogre::DriverVersion::build
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_DriverVersion__1getbuild (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this = reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->build; 
   return _cpp_result;
} /* int Ogre::DriverVersion::build */


/*
 * Class:      org.ogre4j.DriverVersion
 * Method:     setbuild()
 * Type:       setter for public attribute
 * Definition: int Ogre::DriverVersion::build
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_DriverVersion__1setbuild (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::DriverVersion* _cpp_this =reinterpret_cast<Ogre::DriverVersion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->build = _cpp__jni_value_;
} /* int Ogre::DriverVersion::build */
