///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ImageCodec_00024ImageData.h"

// import header files of original library
#include <OgreImageCodec.h>



/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     ImageData()
 * Type:       constructor
 * Definition: Ogre::ImageCodec::ImageData::ImageData
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1_1createImageData (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ImageCodec::ImageData 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ImageCodec::ImageData 
   Ogre::ImageCodec::ImageData* _cpp_this = new Ogre::ImageCodec::ImageData(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ImageCodec::ImageData::ImageData */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     dataType()
 * Type:       virtual method
 * Definition: String Ogre::ImageCodec::ImageData::dataType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1dataType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<const Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->dataType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::ImageCodec::ImageData::dataType */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ImageCodec::ImageData::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ImageCodec::ImageData 
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ImageCodec::ImageData::__delete */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     getheight()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::height
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1getheight (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->height; 
   return _cpp_result;
} /* size_t Ogre::ImageCodec::ImageData::height */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     setheight()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::height
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1setheight (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this =reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->height = _cpp__jni_value_;
} /* size_t Ogre::ImageCodec::ImageData::height */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     getwidth()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::width
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1getwidth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->width; 
   return _cpp_result;
} /* size_t Ogre::ImageCodec::ImageData::width */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     setwidth()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::width
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1setwidth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this =reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->width = _cpp__jni_value_;
} /* size_t Ogre::ImageCodec::ImageData::width */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     getdepth()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::depth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1getdepth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->depth; 
   return _cpp_result;
} /* size_t Ogre::ImageCodec::ImageData::depth */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     setdepth()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::depth
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1setdepth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this =reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->depth = _cpp__jni_value_;
} /* size_t Ogre::ImageCodec::ImageData::depth */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     getsize()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::size
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1getsize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->size; 
   return _cpp_result;
} /* size_t Ogre::ImageCodec::ImageData::size */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     setsize()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::ImageCodec::ImageData::size
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1setsize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this =reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->size = _cpp__jni_value_;
} /* size_t Ogre::ImageCodec::ImageData::size */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     getnum_mipmaps()
 * Type:       getter for public attribute
 * Definition: ushort Ogre::ImageCodec::ImageData::num_mipmaps
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1getnum_1mipmaps (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->num_mipmaps; 
   return _cpp_result;
} /* ushort Ogre::ImageCodec::ImageData::num_mipmaps */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     setnum_mipmaps()
 * Type:       setter for public attribute
 * Definition: ushort Ogre::ImageCodec::ImageData::num_mipmaps
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1setnum_1mipmaps (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  unsigned short _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this =reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->num_mipmaps = _cpp__jni_value_;
} /* ushort Ogre::ImageCodec::ImageData::num_mipmaps */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     getflags()
 * Type:       getter for public attribute
 * Definition: uint Ogre::ImageCodec::ImageData::flags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1getflags (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->flags; 
   return _cpp_result;
} /* uint Ogre::ImageCodec::ImageData::flags */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     setflags()
 * Type:       setter for public attribute
 * Definition: uint Ogre::ImageCodec::ImageData::flags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1setflags (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  unsigned int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this =reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->flags = _cpp__jni_value_;
} /* uint Ogre::ImageCodec::ImageData::flags */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     getformat()
 * Type:       getter for public attribute
 * Definition: PixelFormat Ogre::ImageCodec::ImageData::format
 * Signature:  ()Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1getformat (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this = reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = _cpp_this->format; 
   return _cpp_result;
} /* PixelFormat Ogre::ImageCodec::ImageData::format */


/*
 * Class:      org.ogre4j.ImageCodec.00024ImageData
 * Method:     setformat()
 * Type:       setter for public attribute
 * Definition: PixelFormat Ogre::ImageCodec::ImageData::format
 * Signature:  (Ogre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec_00024ImageData__1setformat (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::PixelFormat _cpp__jni_value_ = (Ogre::PixelFormat)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ImageCodec::ImageData* _cpp_this =reinterpret_cast<Ogre::ImageCodec::ImageData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->format = _cpp__jni_value_;
} /* PixelFormat Ogre::ImageCodec::ImageData::format */
