///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_MaterialScriptContext.h"

// import header files of original library
#include <OgreMaterialSerializer.h>



/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     MaterialScriptContext()
 * Type:       constructor
 * Definition: Ogre::MaterialScriptContext::MaterialScriptContext
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1_1createMaterialScriptContext (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::MaterialScriptContext 
   
   // parameter conversions 
   
   // create new instance of class Ogre::MaterialScriptContext 
   Ogre::MaterialScriptContext* _cpp_this = new Ogre::MaterialScriptContext(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::MaterialScriptContext::MaterialScriptContext */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::MaterialScriptContext::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::MaterialScriptContext 
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::MaterialScriptContext::__delete */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getsection()
 * Type:       getter for public attribute
 * Definition: MaterialScriptSection Ogre::MaterialScriptContext::section
 * Signature:  ()Ogre_MaterialScriptSection
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptContext__1getsection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialScriptSection _cpp_result = _cpp_this->section; 
   return _cpp_result;
} /* MaterialScriptSection Ogre::MaterialScriptContext::section */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setsection()
 * Type:       setter for public attribute
 * Definition: MaterialScriptSection Ogre::MaterialScriptContext::section
 * Signature:  (Ogre_MaterialScriptSection)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setsection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::MaterialScriptSection _cpp__jni_value_ = (Ogre::MaterialScriptSection)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->section = _cpp__jni_value_;
} /* MaterialScriptSection Ogre::MaterialScriptContext::section */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getgroupName()
 * Type:       getter for public attribute
 * Definition: String Ogre::MaterialScriptContext::groupName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_MaterialScriptContext__1getgroupName (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->groupName; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::MaterialScriptContext::groupName */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setgroupName()
 * Type:       setter for public attribute
 * Definition: String Ogre::MaterialScriptContext::groupName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setgroupName (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->groupName = _cpp__jni_value_;
} /* String Ogre::MaterialScriptContext::groupName */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getmaterial()
 * Type:       getter for public attribute
 * Definition: MaterialPtr Ogre::MaterialScriptContext::material
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1getmaterial (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = new Ogre::MaterialPtr( _cpp_this->material); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MaterialPtr Ogre::MaterialScriptContext::material */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setmaterial()
 * Type:       setter for public attribute
 * Definition: MaterialPtr Ogre::MaterialScriptContext::material
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setmaterial (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::MaterialPtr* _cpp__jni_value_ = reinterpret_cast< Ogre::MaterialPtr* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->material = *_cpp__jni_value_;
} /* MaterialPtr Ogre::MaterialScriptContext::material */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     gettechnique()
 * Type:       getter for public attribute
 * Definition: Technique* Ogre::MaterialScriptContext::technique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1gettechnique (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->technique; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::MaterialScriptContext::technique */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     settechnique()
 * Type:       setter for public attribute
 * Definition: Technique* Ogre::MaterialScriptContext::technique
 * Signature:  (Ogre_Technique)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1settechnique (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Technique* _cpp__jni_value_ = reinterpret_cast< Ogre::Technique* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->technique = _cpp__jni_value_;
} /* Technique* Ogre::MaterialScriptContext::technique */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getpass()
 * Type:       getter for public attribute
 * Definition: Pass* Ogre::MaterialScriptContext::pass
 * Signature:  ()Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1getpass (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass* _cpp_result = _cpp_this->pass; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pass* Ogre::MaterialScriptContext::pass */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setpass()
 * Type:       setter for public attribute
 * Definition: Pass* Ogre::MaterialScriptContext::pass
 * Signature:  (Ogre_Pass)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setpass (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Pass* _cpp__jni_value_ = reinterpret_cast< Ogre::Pass* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->pass = _cpp__jni_value_;
} /* Pass* Ogre::MaterialScriptContext::pass */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     gettextureUnit()
 * Type:       getter for public attribute
 * Definition: TextureUnitState* Ogre::MaterialScriptContext::textureUnit
 * Signature:  ()Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1gettextureUnit (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = _cpp_this->textureUnit; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureUnitState* Ogre::MaterialScriptContext::textureUnit */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     settextureUnit()
 * Type:       setter for public attribute
 * Definition: TextureUnitState* Ogre::MaterialScriptContext::textureUnit
 * Signature:  (Ogre_TextureUnitState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1settextureUnit (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::TextureUnitState* _cpp__jni_value_ = reinterpret_cast< Ogre::TextureUnitState* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureUnit = _cpp__jni_value_;
} /* TextureUnitState* Ogre::MaterialScriptContext::textureUnit */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getprogram()
 * Type:       getter for public attribute
 * Definition: GpuProgramPtr Ogre::MaterialScriptContext::program
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1getprogram (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = new Ogre::GpuProgramPtr( _cpp_this->program); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramPtr Ogre::MaterialScriptContext::program */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setprogram()
 * Type:       setter for public attribute
 * Definition: GpuProgramPtr Ogre::MaterialScriptContext::program
 * Signature:  (Ogre_GpuProgramPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setprogram (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::GpuProgramPtr* _cpp__jni_value_ = reinterpret_cast< Ogre::GpuProgramPtr* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->program = *_cpp__jni_value_;
} /* GpuProgramPtr Ogre::MaterialScriptContext::program */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getisProgramShadowCaster()
 * Type:       getter for public attribute
 * Definition: bool Ogre::MaterialScriptContext::isProgramShadowCaster
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MaterialScriptContext__1getisProgramShadowCaster (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isProgramShadowCaster; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MaterialScriptContext::isProgramShadowCaster */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setisProgramShadowCaster()
 * Type:       setter for public attribute
 * Definition: bool Ogre::MaterialScriptContext::isProgramShadowCaster
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setisProgramShadowCaster (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->isProgramShadowCaster = _cpp__jni_value_;
} /* bool Ogre::MaterialScriptContext::isProgramShadowCaster */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getisVertexProgramShadowReceiver()
 * Type:       getter for public attribute
 * Definition: bool Ogre::MaterialScriptContext::isVertexProgramShadowReceiver
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MaterialScriptContext__1getisVertexProgramShadowReceiver (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVertexProgramShadowReceiver; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MaterialScriptContext::isVertexProgramShadowReceiver */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setisVertexProgramShadowReceiver()
 * Type:       setter for public attribute
 * Definition: bool Ogre::MaterialScriptContext::isVertexProgramShadowReceiver
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setisVertexProgramShadowReceiver (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->isVertexProgramShadowReceiver = _cpp__jni_value_;
} /* bool Ogre::MaterialScriptContext::isVertexProgramShadowReceiver */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getisFragmentProgramShadowReceiver()
 * Type:       getter for public attribute
 * Definition: bool Ogre::MaterialScriptContext::isFragmentProgramShadowReceiver
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MaterialScriptContext__1getisFragmentProgramShadowReceiver (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isFragmentProgramShadowReceiver; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MaterialScriptContext::isFragmentProgramShadowReceiver */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setisFragmentProgramShadowReceiver()
 * Type:       setter for public attribute
 * Definition: bool Ogre::MaterialScriptContext::isFragmentProgramShadowReceiver
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setisFragmentProgramShadowReceiver (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->isFragmentProgramShadowReceiver = _cpp__jni_value_;
} /* bool Ogre::MaterialScriptContext::isFragmentProgramShadowReceiver */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getprogramParams()
 * Type:       getter for public attribute
 * Definition: GpuProgramParametersSharedPtr Ogre::MaterialScriptContext::programParams
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1getprogramParams (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->programParams); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::MaterialScriptContext::programParams */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setprogramParams()
 * Type:       setter for public attribute
 * Definition: GpuProgramParametersSharedPtr Ogre::MaterialScriptContext::programParams
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setprogramParams (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::GpuProgramParametersSharedPtr* _cpp__jni_value_ = reinterpret_cast< Ogre::GpuProgramParametersSharedPtr* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->programParams = *_cpp__jni_value_;
} /* GpuProgramParametersSharedPtr Ogre::MaterialScriptContext::programParams */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getnumAnimationParametrics()
 * Type:       getter for public attribute
 * Definition: ushort Ogre::MaterialScriptContext::numAnimationParametrics
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptContext__1getnumAnimationParametrics (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->numAnimationParametrics; 
   return _cpp_result;
} /* ushort Ogre::MaterialScriptContext::numAnimationParametrics */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setnumAnimationParametrics()
 * Type:       setter for public attribute
 * Definition: ushort Ogre::MaterialScriptContext::numAnimationParametrics
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setnumAnimationParametrics (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  unsigned short _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->numAnimationParametrics = _cpp__jni_value_;
} /* ushort Ogre::MaterialScriptContext::numAnimationParametrics */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getprogramDef()
 * Type:       getter for public attribute
 * Definition: MaterialScriptProgramDefinition* Ogre::MaterialScriptContext::programDef
 * Signature:  ()Ogre_MaterialScriptProgramDefinition
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1getprogramDef (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialScriptProgramDefinition* _cpp_result = _cpp_this->programDef; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MaterialScriptProgramDefinition* Ogre::MaterialScriptContext::programDef */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setprogramDef()
 * Type:       setter for public attribute
 * Definition: MaterialScriptProgramDefinition* Ogre::MaterialScriptContext::programDef
 * Signature:  (Ogre_MaterialScriptProgramDefinition)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setprogramDef (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::MaterialScriptProgramDefinition* _cpp__jni_value_ = reinterpret_cast< Ogre::MaterialScriptProgramDefinition* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->programDef = _cpp__jni_value_;
} /* MaterialScriptProgramDefinition* Ogre::MaterialScriptContext::programDef */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     gettechLev()
 * Type:       getter for public attribute
 * Definition: int Ogre::MaterialScriptContext::techLev
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptContext__1gettechLev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->techLev; 
   return _cpp_result;
} /* int Ogre::MaterialScriptContext::techLev */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     settechLev()
 * Type:       setter for public attribute
 * Definition: int Ogre::MaterialScriptContext::techLev
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1settechLev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->techLev = _cpp__jni_value_;
} /* int Ogre::MaterialScriptContext::techLev */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getpassLev()
 * Type:       getter for public attribute
 * Definition: int Ogre::MaterialScriptContext::passLev
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptContext__1getpassLev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->passLev; 
   return _cpp_result;
} /* int Ogre::MaterialScriptContext::passLev */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setpassLev()
 * Type:       setter for public attribute
 * Definition: int Ogre::MaterialScriptContext::passLev
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setpassLev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->passLev = _cpp__jni_value_;
} /* int Ogre::MaterialScriptContext::passLev */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getstateLev()
 * Type:       getter for public attribute
 * Definition: int Ogre::MaterialScriptContext::stateLev
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptContext__1getstateLev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->stateLev; 
   return _cpp_result;
} /* int Ogre::MaterialScriptContext::stateLev */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setstateLev()
 * Type:       setter for public attribute
 * Definition: int Ogre::MaterialScriptContext::stateLev
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setstateLev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->stateLev = _cpp__jni_value_;
} /* int Ogre::MaterialScriptContext::stateLev */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getdefaultParamLines()
 * Type:       getter for public attribute
 * Definition: StringVector Ogre::MaterialScriptContext::defaultParamLines
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1getdefaultParamLines (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = new Ogre::StringVector( _cpp_this->defaultParamLines); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* StringVector Ogre::MaterialScriptContext::defaultParamLines */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setdefaultParamLines()
 * Type:       setter for public attribute
 * Definition: StringVector Ogre::MaterialScriptContext::defaultParamLines
 * Signature:  (Ogre_StringVector)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setdefaultParamLines (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::StringVector* _cpp__jni_value_ = reinterpret_cast< Ogre::StringVector* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->defaultParamLines = *_cpp__jni_value_;
} /* StringVector Ogre::MaterialScriptContext::defaultParamLines */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getlineNo()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::MaterialScriptContext::lineNo
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptContext__1getlineNo (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->lineNo; 
   return _cpp_result;
} /* size_t Ogre::MaterialScriptContext::lineNo */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setlineNo()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::MaterialScriptContext::lineNo
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setlineNo (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->lineNo = _cpp__jni_value_;
} /* size_t Ogre::MaterialScriptContext::lineNo */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     getfilename()
 * Type:       getter for public attribute
 * Definition: String Ogre::MaterialScriptContext::filename
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_MaterialScriptContext__1getfilename (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->filename; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::MaterialScriptContext::filename */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     setfilename()
 * Type:       setter for public attribute
 * Definition: String Ogre::MaterialScriptContext::filename
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1setfilename (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->filename = _cpp__jni_value_;
} /* String Ogre::MaterialScriptContext::filename */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     gettextureAliases()
 * Type:       getter for public attribute
 * Definition: AliasTextureNamePairList Ogre::MaterialScriptContext::textureAliases
 * Signature:  ()Ogre_AliasTextureNamePairList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptContext__1gettextureAliases (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this = reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AliasTextureNamePairList* _cpp_result = new Ogre::AliasTextureNamePairList( _cpp_this->textureAliases); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AliasTextureNamePairList Ogre::MaterialScriptContext::textureAliases */


/*
 * Class:      org.ogre4j.MaterialScriptContext
 * Method:     settextureAliases()
 * Type:       setter for public attribute
 * Definition: AliasTextureNamePairList Ogre::MaterialScriptContext::textureAliases
 * Signature:  (Ogre_AliasTextureNamePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptContext__1settextureAliases (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::AliasTextureNamePairList* _cpp__jni_value_ = reinterpret_cast< Ogre::AliasTextureNamePairList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptContext* _cpp_this =reinterpret_cast<Ogre::MaterialScriptContext*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureAliases = *_cpp__jni_value_;
} /* AliasTextureNamePairList Ogre::MaterialScriptContext::textureAliases */
