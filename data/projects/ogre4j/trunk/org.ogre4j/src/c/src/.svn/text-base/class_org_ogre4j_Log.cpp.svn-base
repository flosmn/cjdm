///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Log.h"

// import header files of original library
#include <OgreLog.h>



/*
 * Class:      org.ogre4j.Log
 * Method:     Log()
 * Type:       constructor
 * Definition: Ogre::Log::Log
 * Signature:  (std_stringZZ)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Log__1_1createLog_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name, 
  jboolean debugOutput, 
  jboolean suppressFileOutput
)
{
   // constructor of class Ogre::Log 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_debugOutput = debugOutput ? true : false;
  bool _cpp_suppressFileOutput = suppressFileOutput ? true : false; 
   
   // create new instance of class Ogre::Log 
   Ogre::Log* _cpp_this = new Ogre::Log(_cpp_name, _cpp_debugOutput, _cpp_suppressFileOutput); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Log::Log */


/*
 * Class:      org.ogre4j.Log
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Log::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Log__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Log* _cpp_this = reinterpret_cast<const Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Log::getName */


/*
 * Class:      org.ogre4j.Log
 * Method:     isDebugOutputEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Log::isDebugOutputEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Log__1isDebugOutputEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Log* _cpp_this = reinterpret_cast<const Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugOutputEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Log::isDebugOutputEnabled */


/*
 * Class:      org.ogre4j.Log
 * Method:     isFileOutputSuppressed()
 * Type:       non-virtual method
 * Definition: bool Ogre::Log::isFileOutputSuppressed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Log__1isFileOutputSuppressed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Log* _cpp_this = reinterpret_cast<const Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isFileOutputSuppressed() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Log::isFileOutputSuppressed */


/*
 * Class:      org.ogre4j.Log
 * Method:     logMessage()
 * Type:       non-virtual method
 * Definition: void Ogre::Log::logMessage
 * Signature:  (std_stringOgre_LogMessageLevelZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Log__1logMessage_1_1StringRLogMessageLevelvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring message, 
  jint lml, 
  jboolean maskDebug
)
{
   // parameter conversions 
  std::string _cpp_message = ""; org::xbig::jni::to_stdstring(_jni_env_, message, _cpp_message); // calls c-tor only. Not operator= .;
  Ogre::LogMessageLevel _cpp_lml = (Ogre::LogMessageLevel)lml;
  bool _cpp_maskDebug = maskDebug ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Log* _cpp_this = reinterpret_cast<Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->logMessage(_cpp_message, _cpp_lml, _cpp_maskDebug);
} /* void Ogre::Log::logMessage */


/*
 * Class:      org.ogre4j.Log
 * Method:     stream()
 * Type:       non-virtual method
 * Definition: Stream Ogre::Log::stream
 * Signature:  (Ogre_LogMessageLevelZ)Ogre_Log_Stream
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Log__1stream_1_1LogMessageLevelvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint lml, 
  jboolean maskDebug
)
{
   // parameter conversions 
  Ogre::LogMessageLevel _cpp_lml = (Ogre::LogMessageLevel)lml;
  bool _cpp_maskDebug = maskDebug ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Log* _cpp_this = reinterpret_cast<Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Log::Stream* _cpp_result = new Ogre::Log::Stream( _cpp_this->stream(_cpp_lml, _cpp_maskDebug) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Stream Ogre::Log::stream */


/*
 * Class:      org.ogre4j.Log
 * Method:     setDebugOutputEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Log::setDebugOutputEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Log__1setDebugOutputEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean debugOutput
)
{
   // parameter conversions 
  bool _cpp_debugOutput = debugOutput ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Log* _cpp_this = reinterpret_cast<Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugOutputEnabled(_cpp_debugOutput);
} /* void Ogre::Log::setDebugOutputEnabled */


/*
 * Class:      org.ogre4j.Log
 * Method:     setLogDetail()
 * Type:       non-virtual method
 * Definition: void Ogre::Log::setLogDetail
 * Signature:  (Ogre_LoggingLevel)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Log__1setLogDetail_1_1LoggingLevelv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ll
)
{
   // parameter conversions 
  Ogre::LoggingLevel _cpp_ll = (Ogre::LoggingLevel)ll; 
   
   // cast pointer to C++ object 
   Ogre::Log* _cpp_this = reinterpret_cast<Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLogDetail(_cpp_ll);
} /* void Ogre::Log::setLogDetail */


/*
 * Class:      org.ogre4j.Log
 * Method:     getLogDetail()
 * Type:       non-virtual method
 * Definition: LoggingLevel Ogre::Log::getLogDetail
 * Signature:  ()Ogre_LoggingLevel
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Log__1getLogDetail_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Log* _cpp_this = reinterpret_cast<const Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LoggingLevel _cpp_result = _cpp_this->getLogDetail() ; 
   return _cpp_result;
} /* LoggingLevel Ogre::Log::getLogDetail */


/*
 * Class:      org.ogre4j.Log
 * Method:     addListener()
 * Type:       non-virtual method
 * Definition: void Ogre::Log::addListener
 * Signature:  (Ogre_LogListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Log__1addListener_1_1LogListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::LogListener* _cpp_listener = reinterpret_cast< Ogre::LogListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::Log* _cpp_this = reinterpret_cast<Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_listener);
} /* void Ogre::Log::addListener */


/*
 * Class:      org.ogre4j.Log
 * Method:     removeListener()
 * Type:       non-virtual method
 * Definition: void Ogre::Log::removeListener
 * Signature:  (Ogre_LogListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Log__1removeListener_1_1LogListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::LogListener* _cpp_listener = reinterpret_cast< Ogre::LogListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::Log* _cpp_this = reinterpret_cast<Ogre::Log*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_listener);
} /* void Ogre::Log::removeListener */


/*
 * Class:      org.ogre4j.Log
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Log::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Log__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Log 
   // cast pointer to C++ object 
   Ogre::Log* _cpp_this = reinterpret_cast<Ogre::Log*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Log::__delete */
