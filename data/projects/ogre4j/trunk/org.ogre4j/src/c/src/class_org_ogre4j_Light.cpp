///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Light.h"

// import header files of original library
#include <OgreLight.h>



/*
 * Class:      org.ogre4j.Light
 * Method:     _calcTempSquareDist()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::_calcTempSquareDist
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1calcTempSquareDist_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong worldPos
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_worldPos = reinterpret_cast< const Ogre::Vector3* >(worldPos); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_calcTempSquareDist(*_cpp_worldPos);
} /* void Ogre::Light::_calcTempSquareDist */


/*
 * Class:      org.ogre4j.Light
 * Method:     Light()
 * Type:       constructor
 * Definition: Ogre::Light::Light
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1createLight (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Light 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Light 
   Ogre::Light* _cpp_this = new Ogre::Light(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Light::Light */


/*
 * Class:      org.ogre4j.Light
 * Method:     Light()
 * Type:       constructor
 * Definition: Ogre::Light::Light
 * Signature:  (std_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1createLight_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name
)
{
   // constructor of class Ogre::Light 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::Light 
   Ogre::Light* _cpp_this = new Ogre::Light(_cpp_name); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Light::Light */


/*
 * Class:      org.ogre4j.Light
 * Method:     setType()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setType
 * Signature:  (Ogre_Light_LightTypes)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setType_1_1LightTypesv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint type
)
{
   // parameter conversions 
  Ogre::Light::LightTypes _cpp_type = (Ogre::Light::LightTypes)type; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setType(_cpp_type);
} /* void Ogre::Light::setType */


/*
 * Class:      org.ogre4j.Light
 * Method:     getType()
 * Type:       non-virtual method
 * Definition: LightTypes Ogre::Light::getType
 * Signature:  ()Ogre_Light_LightTypes
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Light__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Light::LightTypes _cpp_result = _cpp_this->getType() ; 
   return _cpp_result;
} /* LightTypes Ogre::Light::getType */


/*
 * Class:      org.ogre4j.Light
 * Method:     setDiffuseColour()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setDiffuseColour
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setDiffuseColour_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDiffuseColour(_cpp_red, _cpp_green, _cpp_blue);
} /* void Ogre::Light::setDiffuseColour */


/*
 * Class:      org.ogre4j.Light
 * Method:     setDiffuseColour()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setDiffuseColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setDiffuseColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDiffuseColour(*_cpp_colour);
} /* void Ogre::Light::setDiffuseColour */


/*
 * Class:      org.ogre4j.Light
 * Method:     getDiffuseColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Light::getDiffuseColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getDiffuseColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getDiffuseColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Light::getDiffuseColour */


/*
 * Class:      org.ogre4j.Light
 * Method:     setSpecularColour()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setSpecularColour
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setSpecularColour_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpecularColour(_cpp_red, _cpp_green, _cpp_blue);
} /* void Ogre::Light::setSpecularColour */


/*
 * Class:      org.ogre4j.Light
 * Method:     setSpecularColour()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setSpecularColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setSpecularColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpecularColour(*_cpp_colour);
} /* void Ogre::Light::setSpecularColour */


/*
 * Class:      org.ogre4j.Light
 * Method:     getSpecularColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Light::getSpecularColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getSpecularColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getSpecularColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::Light::getSpecularColour */


/*
 * Class:      org.ogre4j.Light
 * Method:     setAttenuation()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setAttenuation
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setAttenuation_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat range, 
  jfloat constant, 
  jfloat linear, 
  jfloat quadratic
)
{
   // parameter conversions 
  float _cpp_range = range;
  float _cpp_constant = constant;
  float _cpp_linear = linear;
  float _cpp_quadratic = quadratic; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAttenuation(_cpp_range, _cpp_constant, _cpp_linear, _cpp_quadratic);
} /* void Ogre::Light::setAttenuation */


/*
 * Class:      org.ogre4j.Light
 * Method:     getAttenuationRange()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getAttenuationRange
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getAttenuationRange_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getAttenuationRange() ; 
   return _cpp_result;
} /* Real Ogre::Light::getAttenuationRange */


/*
 * Class:      org.ogre4j.Light
 * Method:     getAttenuationConstant()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getAttenuationConstant
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getAttenuationConstant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getAttenuationConstant() ; 
   return _cpp_result;
} /* Real Ogre::Light::getAttenuationConstant */


/*
 * Class:      org.ogre4j.Light
 * Method:     getAttenuationLinear()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getAttenuationLinear
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getAttenuationLinear_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getAttenuationLinear() ; 
   return _cpp_result;
} /* Real Ogre::Light::getAttenuationLinear */


/*
 * Class:      org.ogre4j.Light
 * Method:     getAttenuationQuadric()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getAttenuationQuadric
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getAttenuationQuadric_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getAttenuationQuadric() ; 
   return _cpp_result;
} /* Real Ogre::Light::getAttenuationQuadric */


/*
 * Class:      org.ogre4j.Light
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setPosition
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setPosition_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPosition(_cpp_x, _cpp_y, _cpp_z);
} /* void Ogre::Light::setPosition */


/*
 * Class:      org.ogre4j.Light
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setPosition_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPosition(*_cpp_vec);
} /* void Ogre::Light::setPosition */


/*
 * Class:      org.ogre4j.Light
 * Method:     getPosition()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Light::getPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Light::getPosition */


/*
 * Class:      org.ogre4j.Light
 * Method:     setDirection()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setDirection
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setDirection_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDirection(_cpp_x, _cpp_y, _cpp_z);
} /* void Ogre::Light::setDirection */


/*
 * Class:      org.ogre4j.Light
 * Method:     setDirection()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setDirection
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setDirection_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDirection(*_cpp_vec);
} /* void Ogre::Light::setDirection */


/*
 * Class:      org.ogre4j.Light
 * Method:     getDirection()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Light::getDirection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getDirection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getDirection() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Light::getDirection */


/*
 * Class:      org.ogre4j.Light
 * Method:     setSpotlightRange()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setSpotlightRange
 * Signature:  (Ogre_RadianOgre_Radianfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setSpotlightRange_1_1RadianRRadianRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong innerAngle, 
  jlong outerAngle, 
  jfloat falloff
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_innerAngle = reinterpret_cast< const Ogre::Radian* >(innerAngle);
  const Ogre::Radian* _cpp_outerAngle = reinterpret_cast< const Ogre::Radian* >(outerAngle);
  float _cpp_falloff = falloff; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpotlightRange(*_cpp_innerAngle, *_cpp_outerAngle, _cpp_falloff);
} /* void Ogre::Light::setSpotlightRange */


/*
 * Class:      org.ogre4j.Light
 * Method:     getSpotlightInnerAngle()
 * Type:       non-virtual method
 * Definition: const Radian& Ogre::Light::getSpotlightInnerAngle
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getSpotlightInnerAngle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->getSpotlightInnerAngle() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Radian& Ogre::Light::getSpotlightInnerAngle */


/*
 * Class:      org.ogre4j.Light
 * Method:     getSpotlightOuterAngle()
 * Type:       non-virtual method
 * Definition: const Radian& Ogre::Light::getSpotlightOuterAngle
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getSpotlightOuterAngle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->getSpotlightOuterAngle() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Radian& Ogre::Light::getSpotlightOuterAngle */


/*
 * Class:      org.ogre4j.Light
 * Method:     getSpotlightFalloff()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getSpotlightFalloff
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getSpotlightFalloff_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSpotlightFalloff() ; 
   return _cpp_result;
} /* Real Ogre::Light::getSpotlightFalloff */


/*
 * Class:      org.ogre4j.Light
 * Method:     setSpotlightInnerAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setSpotlightInnerAngle
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setSpotlightInnerAngle_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_val = reinterpret_cast< const Ogre::Radian* >(val); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpotlightInnerAngle(*_cpp_val);
} /* void Ogre::Light::setSpotlightInnerAngle */


/*
 * Class:      org.ogre4j.Light
 * Method:     setSpotlightOuterAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setSpotlightOuterAngle
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setSpotlightOuterAngle_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_val = reinterpret_cast< const Ogre::Radian* >(val); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpotlightOuterAngle(*_cpp_val);
} /* void Ogre::Light::setSpotlightOuterAngle */


/*
 * Class:      org.ogre4j.Light
 * Method:     setSpotlightFalloff()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setSpotlightFalloff
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setSpotlightFalloff_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat val
)
{
   // parameter conversions 
  float _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpotlightFalloff(_cpp_val);
} /* void Ogre::Light::setSpotlightFalloff */


/*
 * Class:      org.ogre4j.Light
 * Method:     setPowerScale()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setPowerScale
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setPowerScale_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat power
)
{
   // parameter conversions 
  float _cpp_power = power; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPowerScale(_cpp_power);
} /* void Ogre::Light::setPowerScale */


/*
 * Class:      org.ogre4j.Light
 * Method:     getPowerScale()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getPowerScale
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getPowerScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPowerScale() ; 
   return _cpp_result;
} /* Real Ogre::Light::getPowerScale */


/*
 * Class:      org.ogre4j.Light
 * Method:     _notifyAttached()
 * Type:       virtual method
 * Definition: void Ogre::Light::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* void Ogre::Light::_notifyAttached */


/*
 * Class:      org.ogre4j.Light
 * Method:     _notifyMoved()
 * Type:       virtual method
 * Definition: void Ogre::Light::_notifyMoved
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1notifyMoved (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyMoved();
} /* void Ogre::Light::_notifyMoved */


/*
 * Class:      org.ogre4j.Light
 * Method:     getBoundingBox()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::Light::getBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBoundingBox() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::Light::getBoundingBox */


/*
 * Class:      org.ogre4j.Light
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: void Ogre::Light::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* void Ogre::Light::_updateRenderQueue */


/*
 * Class:      org.ogre4j.Light
 * Method:     getMovableType()
 * Type:       virtual method
 * Definition: const String& Ogre::Light::getMovableType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Light__1getMovableType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMovableType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Light::getMovableType */


/*
 * Class:      org.ogre4j.Light
 * Method:     getDerivedPosition()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Light::getDerivedPosition
 * Signature:  (Z)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getDerivedPosition_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean cameraRelativeIfSet
)
{
   // parameter conversions 
  bool _cpp_cameraRelativeIfSet = cameraRelativeIfSet ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getDerivedPosition(_cpp_cameraRelativeIfSet) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Light::getDerivedPosition */


/*
 * Class:      org.ogre4j.Light
 * Method:     getDerivedDirection()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Light::getDerivedDirection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getDerivedDirection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getDerivedDirection() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Light::getDerivedDirection */


/*
 * Class:      org.ogre4j.Light
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: void Ogre::Light::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* void Ogre::Light::setVisible */


/*
 * Class:      org.ogre4j.Light
 * Method:     getBoundingRadius()
 * Type:       virtual method
 * Definition: Real Ogre::Light::getBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getBoundingRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingRadius() ; 
   return _cpp_result;
} /* Real Ogre::Light::getBoundingRadius */


/*
 * Class:      org.ogre4j.Light
 * Method:     getAs4DVector()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Light::getAs4DVector
 * Signature:  (Z)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getAs4DVector_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean cameraRelativeIfSet
)
{
   // parameter conversions 
  bool _cpp_cameraRelativeIfSet = cameraRelativeIfSet ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getAs4DVector(_cpp_cameraRelativeIfSet) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Light::getAs4DVector */


/*
 * Class:      org.ogre4j.Light
 * Method:     _getNearClipVolume()
 * Type:       virtual method
 * Definition: virtual const PlaneBoundedVolume& Ogre::Light::_getNearClipVolume
 * Signature:  (Ogre_Camera)Ogre_PlaneBoundedVolume
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1getNearClipVolume_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PlaneBoundedVolume* _cpp_result = & _cpp_this->_getNearClipVolume(_cpp_cam) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const PlaneBoundedVolume& Ogre::Light::_getNearClipVolume */


/*
 * Class:      org.ogre4j.Light
 * Method:     _getFrustumClipVolumes()
 * Type:       virtual method
 * Definition: virtual const PlaneBoundedVolumeList& Ogre::Light::_getFrustumClipVolumes
 * Signature:  (Ogre_Camera)Ogre_PlaneBoundedVolumeList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1getFrustumClipVolumes_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PlaneBoundedVolumeList* _cpp_result = & _cpp_this->_getFrustumClipVolumes(_cpp_cam) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const PlaneBoundedVolumeList& Ogre::Light::_getFrustumClipVolumes */


/*
 * Class:      org.ogre4j.Light
 * Method:     getTypeFlags()
 * Type:       virtual method
 * Definition: uint32 Ogre::Light::getTypeFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getTypeFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTypeFlags() ; 
   return _cpp_result;
} /* uint32 Ogre::Light::getTypeFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     createAnimableValue()
 * Type:       virtual method
 * Definition: AnimableValuePtr Ogre::Light::createAnimableValue
 * Signature:  (std_string)Ogre_AnimableValuePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1createAnimableValue_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring valueName
)
{
   // parameter conversions 
  std::string _cpp_valueName = ""; org::xbig::jni::to_stdstring(_jni_env_, valueName, _cpp_valueName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimableValuePtr* _cpp_result = new Ogre::AnimableValuePtr( _cpp_this->createAnimableValue(_cpp_valueName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimableValuePtr Ogre::Light::createAnimableValue */


/*
 * Class:      org.ogre4j.Light
 * Method:     setCustomShadowCameraSetup()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setCustomShadowCameraSetup
 * Signature:  (Ogre_ShadowCameraSetupPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setCustomShadowCameraSetup_1_1ShadowCameraSetupPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong customShadowSetup
)
{
   // parameter conversions 
  const Ogre::ShadowCameraSetupPtr* _cpp_customShadowSetup = reinterpret_cast< const Ogre::ShadowCameraSetupPtr* >(customShadowSetup); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomShadowCameraSetup(*_cpp_customShadowSetup);
} /* void Ogre::Light::setCustomShadowCameraSetup */


/*
 * Class:      org.ogre4j.Light
 * Method:     resetCustomShadowCameraSetup()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::resetCustomShadowCameraSetup
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1resetCustomShadowCameraSetup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetCustomShadowCameraSetup();
} /* void Ogre::Light::resetCustomShadowCameraSetup */


/*
 * Class:      org.ogre4j.Light
 * Method:     getCustomShadowCameraSetup()
 * Type:       non-virtual method
 * Definition: const ShadowCameraSetupPtr& Ogre::Light::getCustomShadowCameraSetup
 * Signature:  ()Ogre_ShadowCameraSetupPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getCustomShadowCameraSetup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCameraSetupPtr* _cpp_result = & _cpp_this->getCustomShadowCameraSetup() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ShadowCameraSetupPtr& Ogre::Light::getCustomShadowCameraSetup */


/*
 * Class:      org.ogre4j.Light
 * Method:     visitRenderables()
 * Type:       virtual method
 * Definition: void Ogre::Light::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::Light::visitRenderables */


/*
 * Class:      org.ogre4j.Light
 * Method:     _getIndexInFrame()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Light::_getIndexInFrame
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Light__1_1getIndexInFrame_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->_getIndexInFrame() ; 
   return _cpp_result;
} /* size_t Ogre::Light::_getIndexInFrame */


/*
 * Class:      org.ogre4j.Light
 * Method:     _notifyIndexInFrame()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::_notifyIndexInFrame
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1notifyIndexInFrame_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyIndexInFrame(_cpp_i);
} /* void Ogre::Light::_notifyIndexInFrame */


/*
 * Class:      org.ogre4j.Light
 * Method:     setShadowFarDistance()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::setShadowFarDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setShadowFarDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat distance
)
{
   // parameter conversions 
  float _cpp_distance = distance; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowFarDistance(_cpp_distance);
} /* void Ogre::Light::setShadowFarDistance */


/*
 * Class:      org.ogre4j.Light
 * Method:     resetShadowFarDistance()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::resetShadowFarDistance
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1resetShadowFarDistance (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetShadowFarDistance();
} /* void Ogre::Light::resetShadowFarDistance */


/*
 * Class:      org.ogre4j.Light
 * Method:     getShadowFarDistance()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getShadowFarDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getShadowFarDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShadowFarDistance() ; 
   return _cpp_result;
} /* Real Ogre::Light::getShadowFarDistance */


/*
 * Class:      org.ogre4j.Light
 * Method:     getShadowFarDistanceSquared()
 * Type:       non-virtual method
 * Definition: Real Ogre::Light::getShadowFarDistanceSquared
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getShadowFarDistanceSquared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShadowFarDistanceSquared() ; 
   return _cpp_result;
} /* Real Ogre::Light::getShadowFarDistanceSquared */


/*
 * Class:      org.ogre4j.Light
 * Method:     _setCameraRelative()
 * Type:       non-virtual method
 * Definition: void Ogre::Light::_setCameraRelative
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1setCameraRelative_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setCameraRelative(_cpp_cam);
} /* void Ogre::Light::_setCameraRelative */


/*
 * Class:      org.ogre4j.Light
 * Method:     _notifyCreator()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCreator
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1notifyCreator_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCreator(_cpp_fact);
} /* virtual void Ogre::MovableObject::_notifyCreator */


/*
 * Class:      org.ogre4j.Light
 * Method:     _getCreator()
 * Type:       virtual method
 * Definition: virtual MovableObjectFactory* Ogre::MovableObject::_getCreator
 * Signature:  ()Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1getCreator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->_getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectFactory* Ogre::MovableObject::_getCreator */


/*
 * Class:      org.ogre4j.Light
 * Method:     _notifyManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1notifyManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_man = reinterpret_cast< Ogre::SceneManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyManager(_cpp_man);
} /* virtual void Ogre::MovableObject::_notifyManager */


/*
 * Class:      org.ogre4j.Light
 * Method:     _getManager()
 * Type:       virtual method
 * Definition: virtual SceneManager* Ogre::MovableObject::_getManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1getManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneManager* Ogre::MovableObject::_getManager */


/*
 * Class:      org.ogre4j.Light
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::MovableObject::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Light__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::MovableObject::getName */


/*
 * Class:      org.ogre4j.Light
 * Method:     getParentNode()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::MovableObject::getParentNode
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getParentNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParentNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::MovableObject::getParentNode */


/*
 * Class:      org.ogre4j.Light
 * Method:     getParentSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::MovableObject::getParentSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getParentSceneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getParentSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::MovableObject::getParentSceneNode */


/*
 * Class:      org.ogre4j.Light
 * Method:     isAttached()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isAttached
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Light__1isAttached_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAttached() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isAttached */


/*
 * Class:      org.ogre4j.Light
 * Method:     detatchFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::detatchFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1detatchFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detatchFromParent();
} /* virtual void Ogre::MovableObject::detatchFromParent */


/*
 * Class:      org.ogre4j.Light
 * Method:     isInScene()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isInScene
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Light__1isInScene_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInScene() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isInScene */


/*
 * Class:      org.ogre4j.Light
 * Method:     _notifyCurrentCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* virtual void Ogre::MovableObject::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.Light
 * Method:     getWorldBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox
 * Signature:  (Z)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getWorldBoundingBox_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getWorldBoundingBox(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox */


/*
 * Class:      org.ogre4j.Light
 * Method:     getWorldBoundingSphere()
 * Type:       virtual method
 * Definition: virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere
 * Signature:  (Z)Ogre_Sphere
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getWorldBoundingSphere_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Sphere* _cpp_result = & _cpp_this->getWorldBoundingSphere(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere */


/*
 * Class:      org.ogre4j.Light
 * Method:     getVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::getVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Light__1getVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::getVisible */


/*
 * Class:      org.ogre4j.Light
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Light__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isVisible */


/*
 * Class:      org.ogre4j.Light
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::MovableObject::setRenderingDistance */


/*
 * Class:      org.ogre4j.Light
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::MovableObject::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::MovableObject::getRenderingDistance */


/*
 * Class:      org.ogre4j.Light
 * Method:     setUserObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserObject
 * Signature:  (Ogre_UserDefinedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setUserObject_1_1UserDefinedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::UserDefinedObject* _cpp_obj = reinterpret_cast< Ogre::UserDefinedObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserObject(_cpp_obj);
} /* virtual void Ogre::MovableObject::setUserObject */


/*
 * Class:      org.ogre4j.Light
 * Method:     getUserObject()
 * Type:       virtual method
 * Definition: virtual UserDefinedObject* Ogre::MovableObject::getUserObject
 * Signature:  ()Ogre_UserDefinedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getUserObject (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UserDefinedObject* _cpp_result = _cpp_this->getUserObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual UserDefinedObject* Ogre::MovableObject::getUserObject */


/*
 * Class:      org.ogre4j.Light
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::MovableObject::setUserAny */


/*
 * Class:      org.ogre4j.Light
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::MovableObject::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::MovableObject::getUserAny */


/*
 * Class:      org.ogre4j.Light
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* virtual void Ogre::MovableObject::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.Light
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::MovableObject::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_Light__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::MovableObject::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.Light
 * Method:     _getParentNodeFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1getParentNodeFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getParentNodeFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform */


/*
 * Class:      org.ogre4j.Light
 * Method:     setQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setQueryFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     addQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1addQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addQueryFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     removeQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeQueryFlags
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1removeQueryFlags_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeQueryFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     getQueryFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getQueryFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getQueryFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     setVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setVisibilityFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     addVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1addVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addVisibilityFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     removeVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1removeVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeVisibilityFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     getVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getVisibilityFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getVisibilityFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setListener
 * Signature:  (Ogre_MovableObject_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MovableObject::Listener* _cpp_listener = reinterpret_cast< Ogre::MovableObject::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::MovableObject::setListener */


/*
 * Class:      org.ogre4j.Light
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::MovableObject::getListener
 * Signature:  ()Ogre_MovableObject_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::MovableObject::getListener */


/*
 * Class:      org.ogre4j.Light
 * Method:     queryLights()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::MovableObject::queryLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1queryLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->queryLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::MovableObject::queryLights */


/*
 * Class:      org.ogre4j.Light
 * Method:     _getLightList()
 * Type:       virtual method
 * Definition: virtual LightList* Ogre::MovableObject::_getLightList
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1_1getLightList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->_getLightList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual LightList* Ogre::MovableObject::_getLightList */


/*
 * Class:      org.ogre4j.Light
 * Method:     getEdgeList()
 * Type:       virtual method
 * Definition: EdgeData* Ogre::MovableObject::getEdgeList
 * Signature:  ()Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::MovableObject::getEdgeList */


/*
 * Class:      org.ogre4j.Light
 * Method:     hasEdgeList()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::hasEdgeList
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Light__1hasEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEdgeList() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::hasEdgeList */


/*
 * Class:      org.ogre4j.Light
 * Method:     getShadowVolumeRenderableIterator()
 * Type:       virtual method
 * Definition: ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator
 * Signature:  (Ogre_ShadowTechniqueOgre_LightOgre_HardwareIndexBufferSharedPtrZfloatJ)Ogre_ShadowCaster_ShadowRenderableListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getShadowVolumeRenderableIterator_1_1ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowTechnique, 
  jlong light, 
  jlong indexBuffer, 
  jboolean extrudeVertices, 
  jfloat extrusionDist, 
  jlong flags
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_shadowTechnique = (Ogre::ShadowTechnique)shadowTechnique;
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  bool _cpp_extrudeVertices = extrudeVertices ? true : false;
  float _cpp_extrusionDist = extrusionDist;
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCaster::ShadowRenderableListIterator* _cpp_result = new Ogre::ShadowCaster::ShadowRenderableListIterator( _cpp_this->getShadowVolumeRenderableIterator(_cpp_shadowTechnique, _cpp_light, _cpp_indexBuffer, _cpp_extrudeVertices, _cpp_extrusionDist, _cpp_flags) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator */


/*
 * Class:      org.ogre4j.Light
 * Method:     getLightCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getLightCapBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getLightCapBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds */


/*
 * Class:      org.ogre4j.Light
 * Method:     getDarkCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds
 * Signature:  (Ogre_Lightfloat)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getDarkCapBounds_1_1LightRRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jfloat dirLightExtrusionDist
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  float _cpp_dirLightExtrusionDist = dirLightExtrusionDist; 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getDarkCapBounds(*_cpp_light, _cpp_dirLightExtrusionDist) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds */


/*
 * Class:      org.ogre4j.Light
 * Method:     setCastShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::MovableObject::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_enabled);
} /* void Ogre::MovableObject::setCastShadows */


/*
 * Class:      org.ogre4j.Light
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Light__1getCastShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::getCastShadows */


/*
 * Class:      org.ogre4j.Light
 * Method:     getPointExtrusionDistance()
 * Type:       virtual method
 * Definition: Real Ogre::MovableObject::getPointExtrusionDistance
 * Signature:  (Ogre_Light)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1getPointExtrusionDistance_1_1LightP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_l = reinterpret_cast< const Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointExtrusionDistance(_cpp_l) ; 
   return _cpp_result;
} /* Real Ogre::MovableObject::getPointExtrusionDistance */


/*
 * Class:      org.ogre4j.Light
 * Method:     setDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setDebugDisplayEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setDebugDisplayEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugDisplayEnabled(_cpp_enabled);
} /* virtual void Ogre::MovableObject::setDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.Light
 * Method:     isDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isDebugDisplayEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Light__1isDebugDisplayEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugDisplayEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.Light
 * Method:     setDefaultQueryFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setDefaultQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::Light without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::Light::setDefaultQueryFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultQueryFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     getDefaultQueryFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getDefaultQueryFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Light with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::Light::getDefaultQueryFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultQueryFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     setDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1setDefaultVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::Light without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::Light::setDefaultVisibilityFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     getDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getDefaultVisibilityFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Light with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::Light::getDefaultVisibilityFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.Light
 * Method:     extrudeVertices()
 * Type:       static method
 * Definition: static void Ogre::ShadowCaster::extrudeVertices
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrIOgre_Vector4float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1extrudeVertices_1_1HardwareVertexBufferSharedPtrRivVector4RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexBuffer, 
  jint originalVertexCount, 
  jlong lightPos, 
  jfloat extrudeDist
)
{
   // static method of class Ogre::Light without return value 
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_vertexBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(vertexBuffer);
  size_t _cpp_originalVertexCount = originalVertexCount;
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist; 
   
   // call library method 
   Ogre::Light::extrudeVertices(*_cpp_vertexBuffer, _cpp_originalVertexCount, *_cpp_lightPos, _cpp_extrudeDist);
} /* static void Ogre::ShadowCaster::extrudeVertices */


/*
 * Class:      org.ogre4j.Light
 * Method:     getAnimableValueNames()
 * Type:       non-virtual method
 * Definition: const StringVector& Ogre::AnimableObject::getAnimableValueNames
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Light__1getAnimableValueNames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Light* _cpp_this = reinterpret_cast<const Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getAnimableValueNames() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::AnimableObject::getAnimableValueNames */


/*
 * Class:      org.ogre4j.Light
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Light::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Light 
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Light::__delete */


/*
 * Class:      org.ogre4j.Light
 * Method:     gettempSquareDist()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Light::tempSquareDist
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Light__1gettempSquareDist (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this = reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->tempSquareDist; 
   return _cpp_result;
} /* Real Ogre::Light::tempSquareDist */


/*
 * Class:      org.ogre4j.Light
 * Method:     settempSquareDist()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Light::tempSquareDist
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Light__1settempSquareDist (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Light* _cpp_this =reinterpret_cast<Ogre::Light*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->tempSquareDist = _cpp__jni_value_;
} /* Real Ogre::Light::tempSquareDist */
