///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_std_istream.h"

// import header files of original library
#include <iostream>



/*
 * Class:      org.std.istream
 * Method:     bad()
 * Type:       non-virtual method
 * Definition: bool std::istream::bad
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_istream__1bad (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->bad() ; 
   return _cpp_result ? 1 : 0;
} /* bool std::istream::bad */


/*
 * Class:      org.std.istream
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void std::istream::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_std_istream__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void std::istream::clear */


/*
 * Class:      org.std.istream
 * Method:     eof()
 * Type:       non-virtual method
 * Definition: bool std::istream::eof
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_istream__1eof (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->eof() ; 
   return _cpp_result ? 1 : 0;
} /* bool std::istream::eof */


/*
 * Class:      org.std.istream
 * Method:     fail()
 * Type:       non-virtual method
 * Definition: bool std::istream::fail
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_istream__1fail (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->fail() ; 
   return _cpp_result ? 1 : 0;
} /* bool std::istream::fail */


/*
 * Class:      org.std.istream
 * Method:     fill()
 * Type:       non-virtual method
 * Definition: char std::istream::fill
 * Signature:  ()C
 */

JNIEXPORT jchar JNICALL Java_org_std_istream__1fill (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const char _cpp_result = _cpp_this->fill() ; 
   return _cpp_result;
} /* char std::istream::fill */


/*
 * Class:      org.std.istream
 * Method:     fill()
 * Type:       non-virtual method
 * Definition: char std::istream::fill
 * Signature:  (C)C
 */

JNIEXPORT jchar JNICALL Java_org_std_istream__1fill_1_1cv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jchar ch
)
{
   // parameter conversions 
  char _cpp_ch = ch; 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const char _cpp_result = _cpp_this->fill(_cpp_ch) ; 
   return _cpp_result;
} /* char std::istream::fill */


/*
 * Class:      org.std.istream
 * Method:     good()
 * Type:       non-virtual method
 * Definition: bool std::istream::good
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_istream__1good (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->good() ; 
   return _cpp_result ? 1 : 0;
} /* bool std::istream::good */


/*
 * Class:      org.std.istream
 * Method:     sync_with_stdio()
 * Type:       static method
 * Definition: bool std::istream::sync_with_stdio
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_istream__1sync_1with_1stdio (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class std::istream with return value 
   // parameter conversions 
   
   // call library method 
   const bool _cpp_result = std::istream::sync_with_stdio(); 
   return _cpp_result ? 1 : 0;
} /* bool std::istream::sync_with_stdio */


/*
 * Class:      org.std.istream
 * Method:     sync_with_stdio()
 * Type:       static method
 * Definition: bool std::istream::sync_with_stdio
 * Signature:  (Z)Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_istream__1sync_1with_1stdio_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jboolean sync
)
{
   // static method of class std::istream with return value 
   // parameter conversions 
  bool _cpp_sync = sync ? true : false; 
   
   // call library method 
   const bool _cpp_result = std::istream::sync_with_stdio(_cpp_sync); 
   return _cpp_result ? 1 : 0;
} /* bool std::istream::sync_with_stdio */


/*
 * Class:      org.std.istream
 * Method:     width()
 * Type:       non-virtual method
 * Definition: int std::istream::width
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_std_istream__1width (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->width() ; 
   return _cpp_result;
} /* int std::istream::width */


/*
 * Class:      org.std.istream
 * Method:     width()
 * Type:       non-virtual method
 * Definition: int std::istream::width
 * Signature:  (I)I
 */

JNIEXPORT jint JNICALL Java_org_std_istream__1width_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint w
)
{
   // parameter conversions 
  int _cpp_w = w; 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->width(_cpp_w) ; 
   return _cpp_result;
} /* int std::istream::width */


/*
 * Class:      org.std.istream
 * Method:     get()
 * Type:       non-virtual method
 * Definition: int std::istream::get
 * Signature:  (C)std_istream
 */

JNIEXPORT jlong JNICALL Java_org_std_istream__1get_1_1cr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong c
)
{
   // parameter conversions 
  char* _cpp_c = reinterpret_cast<char*>(c); 
   
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   
   // call library method 
   const std::istream* _cpp_result = & _cpp_this->get(*_cpp_c) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* int std::istream::get */


/*
 * Class:      org.std.istream
 * Method:     __delete()
 * Type:       destructor
 * Definition: std::istream::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_std_istream__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class std::istream 
   // cast pointer to C++ object 
   std::istream* _cpp_this = reinterpret_cast<std::istream*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* std::istream::__delete */
