///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Timer.h"

// import header files of original library
//#include <OgreTimerImp.h>



/*
 * Class:      org.ogre4j.Timer
 * Method:     Timer()
 * Type:       constructor
 * Definition: Ogre::Timer::Timer
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Timer__1_1createTimer (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Timer 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Timer 
   Ogre::Timer* _cpp_this = new Ogre::Timer(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Timer::Timer */


/*
 * Class:      org.ogre4j.Timer
 * Method:     setOption()
 * Type:       non-virtual method
 * Definition: bool Ogre::Timer::setOption
 * Signature:  (std_stringV)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Timer__1setOption_1_1StringRvP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey, 
  jlong pValue
)
{
   // parameter conversions 
  std::string _cpp_strKey = ""; org::xbig::jni::to_stdstring(_jni_env_, strKey, _cpp_strKey); // calls c-tor only. Not operator= .;
  const void* _cpp_pValue = reinterpret_cast<void*>(pValue); 
   
   // cast pointer to C++ object 
   Ogre::Timer* _cpp_this = reinterpret_cast<Ogre::Timer*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setOption(_cpp_strKey, _cpp_pValue) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Timer::setOption */


/*
 * Class:      org.ogre4j.Timer
 * Method:     reset()
 * Type:       non-virtual method
 * Definition: void Ogre::Timer::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Timer__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Timer* _cpp_this = reinterpret_cast<Ogre::Timer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reset();
} /* void Ogre::Timer::reset */


/*
 * Class:      org.ogre4j.Timer
 * Method:     getMilliseconds()
 * Type:       non-virtual method
 * Definition: unsigned long Ogre::Timer::getMilliseconds
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Timer__1getMilliseconds (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Timer* _cpp_this = reinterpret_cast<Ogre::Timer*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getMilliseconds() ; 
   return _cpp_result;
} /* unsigned long Ogre::Timer::getMilliseconds */


/*
 * Class:      org.ogre4j.Timer
 * Method:     getMicroseconds()
 * Type:       non-virtual method
 * Definition: unsigned long Ogre::Timer::getMicroseconds
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Timer__1getMicroseconds (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Timer* _cpp_this = reinterpret_cast<Ogre::Timer*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getMicroseconds() ; 
   return _cpp_result;
} /* unsigned long Ogre::Timer::getMicroseconds */


/*
 * Class:      org.ogre4j.Timer
 * Method:     getMillisecondsCPU()
 * Type:       non-virtual method
 * Definition: unsigned long Ogre::Timer::getMillisecondsCPU
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Timer__1getMillisecondsCPU (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Timer* _cpp_this = reinterpret_cast<Ogre::Timer*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getMillisecondsCPU() ; 
   return _cpp_result;
} /* unsigned long Ogre::Timer::getMillisecondsCPU */


/*
 * Class:      org.ogre4j.Timer
 * Method:     getMicrosecondsCPU()
 * Type:       non-virtual method
 * Definition: unsigned long Ogre::Timer::getMicrosecondsCPU
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Timer__1getMicrosecondsCPU (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Timer* _cpp_this = reinterpret_cast<Ogre::Timer*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getMicrosecondsCPU() ; 
   return _cpp_result;
} /* unsigned long Ogre::Timer::getMicrosecondsCPU */


/*
 * Class:      org.ogre4j.Timer
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Timer::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Timer__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Timer 
   // cast pointer to C++ object 
   Ogre::Timer* _cpp_this = reinterpret_cast<Ogre::Timer*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Timer::__delete */
