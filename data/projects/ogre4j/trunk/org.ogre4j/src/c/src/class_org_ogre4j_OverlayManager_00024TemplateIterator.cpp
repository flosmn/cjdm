///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_OverlayManager_00024TemplateIterator.h"

// import header files of original library
#include <OgreIteratorWrappers.h>
#include <OgreOverlayManager.h>



/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     TemplateIterator()
 * Type:       constructor
 * Definition: Ogre::MapIterator< T >::MapIterator
 * Signature:  (Ogre_OverlayManager_ElementMap)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1_1createTemplateIterator_1_1Ogre_1OverlayManager_1ElementMapr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong c
)
{
   // constructor of class Ogre::OverlayManager::TemplateIterator 
   
   // parameter conversions 
  Ogre::OverlayManager::ElementMap* _cpp_c = reinterpret_cast< Ogre::OverlayManager::ElementMap* >(c); 
   
   // create new instance of class Ogre::OverlayManager::TemplateIterator 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = new Ogre::OverlayManager::TemplateIterator(*_cpp_c); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::MapIterator< T >::MapIterator */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     hasMoreElements()
 * Type:       non-virtual method
 * Definition: bool Ogre::MapIterator< T >::hasMoreElements
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1hasMoreElements_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<const Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasMoreElements() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MapIterator< T >::hasMoreElements */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     getNext()
 * Type:       non-virtual method
 * Definition: T::mapped_type Ogre::MapIterator< T >::getNext
 * Signature:  ()Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1getNext (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->getNext() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* T::mapped_type Ogre::MapIterator< T >::getNext */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     peekNextValue()
 * Type:       non-virtual method
 * Definition: T::mapped_type Ogre::MapIterator< T >::peekNextValue
 * Signature:  ()Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1peekNextValue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->peekNextValue() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* T::mapped_type Ogre::MapIterator< T >::peekNextValue */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     peekNextKey()
 * Type:       non-virtual method
 * Definition: T::key_type Ogre::MapIterator< T >::peekNextKey
 * Signature:  ()Ljava/lang/String;
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1peekNextKey (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->peekNextKey() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* T::key_type Ogre::MapIterator< T >::peekNextKey */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: MapIterator<T>& Ogre::MapIterator< T >::operator=
 * Signature:  (Ogre_OverlayManager_TemplateIterator)Ogre_OverlayManager_TemplateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1operatorAssignment_1_1_1Ogre_1OverlayManager_1TemplateIteratorr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  Ogre::OverlayManager::TemplateIterator* _cpp_rhs = reinterpret_cast< Ogre::OverlayManager::TemplateIterator* >(rhs); 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayManager::TemplateIterator* _cpp_result = & _cpp_this->operator=(*_cpp_rhs) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MapIterator<T>& Ogre::MapIterator< T >::operator= */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     peekNextValuePtr()
 * Type:       non-virtual method
 * Definition: T::mapped_type* Ogre::MapIterator< T >::peekNextValuePtr
 * Signature:  ()Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1peekNextValuePtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* const * _cpp_result = _cpp_this->peekNextValuePtr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* T::mapped_type* Ogre::MapIterator< T >::peekNextValuePtr */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     moveNext()
 * Type:       non-virtual method
 * Definition: void Ogre::MapIterator< T >::moveNext
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1moveNext (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->moveNext();
} /* void Ogre::MapIterator< T >::moveNext */


/*
 * Class:      org.ogre4j.OverlayManager.00024TemplateIterator
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::OverlayManager::TemplateIterator::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager_00024TemplateIterator__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::OverlayManager::TemplateIterator 
   // cast pointer to C++ object 
   Ogre::OverlayManager::TemplateIterator* _cpp_this = reinterpret_cast<Ogre::OverlayManager::TemplateIterator*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::OverlayManager::TemplateIterator::__delete */
