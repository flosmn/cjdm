///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_AutoParamDataSource.h"

// import header files of original library
#include <OgreAutoParamDataSource.h>



/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     AutoParamDataSource()
 * Type:       constructor
 * Definition: Ogre::AutoParamDataSource::AutoParamDataSource
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1_1createAutoParamDataSource (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::AutoParamDataSource 
   
   // parameter conversions 
   
   // create new instance of class Ogre::AutoParamDataSource 
   Ogre::AutoParamDataSource* _cpp_this = new Ogre::AutoParamDataSource(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AutoParamDataSource::AutoParamDataSource */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setCurrentRenderable()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setCurrentRenderable
 * Signature:  (Ogre_Renderable)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setCurrentRenderable_1_1RenderableP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rend
)
{
   // parameter conversions 
  const Ogre::Renderable* _cpp_rend = reinterpret_cast< const Ogre::Renderable* >(rend); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentRenderable(_cpp_rend);
} /* virtual void Ogre::AutoParamDataSource::setCurrentRenderable */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setWorldMatrices()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setWorldMatrices
 * Signature:  (Ogre_Matrix4I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setWorldMatrices_1_1Matrix4Piv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m, 
  jint count
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m = reinterpret_cast< const Ogre::Matrix4* >(m);
  size_t _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWorldMatrices(_cpp_m, _cpp_count);
} /* virtual void Ogre::AutoParamDataSource::setWorldMatrices */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setCurrentCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setCurrentCamera
 * Signature:  (Ogre_CameraZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setCurrentCamera_1_1CameraPbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam, 
  jboolean useCameraRelative
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam);
  bool _cpp_useCameraRelative = useCameraRelative ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentCamera(_cpp_cam, _cpp_useCameraRelative);
} /* virtual void Ogre::AutoParamDataSource::setCurrentCamera */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setCurrentLightList()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setCurrentLightList
 * Signature:  (Ogre_LightList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setCurrentLightList_1_1LightListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ll
)
{
   // parameter conversions 
  const Ogre::LightList* _cpp_ll = reinterpret_cast< const Ogre::LightList* >(ll); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentLightList(_cpp_ll);
} /* virtual void Ogre::AutoParamDataSource::setCurrentLightList */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setTextureProjector()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setTextureProjector
 * Signature:  (Ogre_FrustumI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setTextureProjector_1_1FrustumPiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong frust, 
  jint index
)
{
   // parameter conversions 
  const Ogre::Frustum* _cpp_frust = reinterpret_cast< const Ogre::Frustum* >(frust);
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureProjector(_cpp_frust, _cpp_index);
} /* virtual void Ogre::AutoParamDataSource::setTextureProjector */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setCurrentRenderTarget()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setCurrentRenderTarget
 * Signature:  (Ogre_RenderTarget)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setCurrentRenderTarget_1_1RenderTargetP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong target
)
{
   // parameter conversions 
  const Ogre::RenderTarget* _cpp_target = reinterpret_cast< const Ogre::RenderTarget* >(target); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentRenderTarget(_cpp_target);
} /* virtual void Ogre::AutoParamDataSource::setCurrentRenderTarget */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setCurrentViewport()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setCurrentViewport
 * Signature:  (Ogre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setCurrentViewport_1_1ViewportP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong viewport
)
{
   // parameter conversions 
  const Ogre::Viewport* _cpp_viewport = reinterpret_cast< const Ogre::Viewport* >(viewport); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentViewport(_cpp_viewport);
} /* virtual void Ogre::AutoParamDataSource::setCurrentViewport */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setShadowDirLightExtrusionDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setShadowDirLightExtrusionDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setShadowDirLightExtrusionDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowDirLightExtrusionDistance(_cpp_dist);
} /* virtual void Ogre::AutoParamDataSource::setShadowDirLightExtrusionDistance */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setMainCamBoundsInfo()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setMainCamBoundsInfo
 * Signature:  (Ogre_VisibleObjectsBoundsInfo)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setMainCamBoundsInfo_1_1VisibleObjectsBoundsInfop (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong info
)
{
   // parameter conversions 
  Ogre::VisibleObjectsBoundsInfo* _cpp_info = reinterpret_cast< Ogre::VisibleObjectsBoundsInfo* >(info); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMainCamBoundsInfo(_cpp_info);
} /* virtual void Ogre::AutoParamDataSource::setMainCamBoundsInfo */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setCurrentSceneManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setCurrentSceneManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setCurrentSceneManager_1_1SceneManagerP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm
)
{
   // parameter conversions 
  const Ogre::SceneManager* _cpp_sm = reinterpret_cast< const Ogre::SceneManager* >(sm); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentSceneManager(_cpp_sm);
} /* virtual void Ogre::AutoParamDataSource::setCurrentSceneManager */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setCurrentPass()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setCurrentPass
 * Signature:  (Ogre_Pass)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setCurrentPass_1_1PassP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass
)
{
   // parameter conversions 
  const Ogre::Pass* _cpp_pass = reinterpret_cast< const Ogre::Pass* >(pass); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentPass(_cpp_pass);
} /* virtual void Ogre::AutoParamDataSource::setCurrentPass */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getWorldMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getWorldMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getWorldMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getWorldMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getWorldMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getWorldMatrixArray()
 * Type:       virtual method
 * Definition: virtual const Matrix4* Ogre::AutoParamDataSource::getWorldMatrixArray
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getWorldMatrixArray_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = _cpp_this->getWorldMatrixArray() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4* Ogre::AutoParamDataSource::getWorldMatrixArray */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getWorldMatrixCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::AutoParamDataSource::getWorldMatrixCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_AutoParamDataSource__1getWorldMatrixCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getWorldMatrixCount() ; 
   return _cpp_result;
} /* virtual size_t Ogre::AutoParamDataSource::getWorldMatrixCount */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getViewMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getViewMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getViewProjectionMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getViewProjectionMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getViewProjectionMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getViewProjectionMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getViewProjectionMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getProjectionMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getProjectionMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getProjectionMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getProjectionMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getProjectionMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getWorldViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getWorldViewProjMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getWorldViewProjMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getWorldViewProjMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getWorldViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getWorldViewMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getWorldViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getWorldViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getWorldViewMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getWorldViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseWorldMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getInverseWorldMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseWorldMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getInverseWorldMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getInverseWorldMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseWorldViewMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getInverseWorldViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseWorldViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getInverseWorldViewMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getInverseWorldViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseViewMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getInverseViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getInverseViewMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getInverseViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseTransposeWorldMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getInverseTransposeWorldMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseTransposeWorldMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getInverseTransposeWorldMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getInverseTransposeWorldMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseTransposeWorldViewMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getInverseTransposeWorldViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseTransposeWorldViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getInverseTransposeWorldViewMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getInverseTransposeWorldViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCameraPosition()
 * Type:       virtual method
 * Definition: virtual const Vector4& Ogre::AutoParamDataSource::getCameraPosition
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getCameraPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCameraPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector4& Ogre::AutoParamDataSource::getCameraPosition */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCameraPositionObjectSpace()
 * Type:       virtual method
 * Definition: virtual const Vector4& Ogre::AutoParamDataSource::getCameraPositionObjectSpace
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getCameraPositionObjectSpace_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCameraPositionObjectSpace() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector4& Ogre::AutoParamDataSource::getCameraPositionObjectSpace */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLodCameraPosition()
 * Type:       virtual method
 * Definition: virtual const Vector4& Ogre::AutoParamDataSource::getLodCameraPosition
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLodCameraPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getLodCameraPosition() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector4& Ogre::AutoParamDataSource::getLodCameraPosition */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLodCameraPositionObjectSpace()
 * Type:       virtual method
 * Definition: virtual const Vector4& Ogre::AutoParamDataSource::getLodCameraPositionObjectSpace
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLodCameraPositionObjectSpace_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getLodCameraPositionObjectSpace() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector4& Ogre::AutoParamDataSource::getLodCameraPositionObjectSpace */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightNumber()
 * Type:       virtual method
 * Definition: virtual float Ogre::AutoParamDataSource::getLightNumber
 * Signature:  (I)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightNumber_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLightNumber(_cpp_index) ; 
   return _cpp_result;
} /* virtual float Ogre::AutoParamDataSource::getLightNumber */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightCount()
 * Type:       virtual method
 * Definition: virtual float Ogre::AutoParamDataSource::getLightCount
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLightCount() ; 
   return _cpp_result;
} /* virtual float Ogre::AutoParamDataSource::getLightCount */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightCastsShadows()
 * Type:       virtual method
 * Definition: virtual int Ogre::AutoParamDataSource::getLightCastsShadows
 * Signature:  (I)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightCastsShadows_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getLightCastsShadows(_cpp_index) ; 
   return _cpp_result;
} /* virtual int Ogre::AutoParamDataSource::getLightCastsShadows */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightDiffuseColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getLightDiffuseColour
 * Signature:  (I)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightDiffuseColour_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getLightDiffuseColour(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getLightDiffuseColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightSpecularColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getLightSpecularColour
 * Signature:  (I)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightSpecularColour_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getLightSpecularColour(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getLightSpecularColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightDiffuseColourWithPower()
 * Type:       virtual method
 * Definition: virtual const ColourValue Ogre::AutoParamDataSource::getLightDiffuseColourWithPower
 * Signature:  (I)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightDiffuseColourWithPower_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->getLightDiffuseColourWithPower(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue Ogre::AutoParamDataSource::getLightDiffuseColourWithPower */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightSpecularColourWithPower()
 * Type:       virtual method
 * Definition: virtual const ColourValue Ogre::AutoParamDataSource::getLightSpecularColourWithPower
 * Signature:  (I)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightSpecularColourWithPower_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->getLightSpecularColourWithPower(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue Ogre::AutoParamDataSource::getLightSpecularColourWithPower */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::AutoParamDataSource::getLightPosition
 * Signature:  (I)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightPosition_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getLightPosition(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::AutoParamDataSource::getLightPosition */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightAs4DVector()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getLightAs4DVector
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightAs4DVector_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getLightAs4DVector(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getLightAs4DVector */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightDirection()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::AutoParamDataSource::getLightDirection
 * Signature:  (I)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightDirection_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getLightDirection(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::AutoParamDataSource::getLightDirection */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightPowerScale()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getLightPowerScale
 * Signature:  (I)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightPowerScale_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLightPowerScale(_cpp_index) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getLightPowerScale */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getLightAttenuation()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getLightAttenuation
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getLightAttenuation_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getLightAttenuation(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getLightAttenuation */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSpotlightParams()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getSpotlightParams
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSpotlightParams_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getSpotlightParams(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getSpotlightParams */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setAmbientLightColour()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setAmbientLightColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setAmbientLightColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_ambient = reinterpret_cast< const Ogre::ColourValue* >(ambient); 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAmbientLightColour(*_cpp_ambient);
} /* virtual void Ogre::AutoParamDataSource::setAmbientLightColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getAmbientLightColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getAmbientLightColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getAmbientLightColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getAmbientLightColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getAmbientLightColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSurfaceAmbientColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceAmbientColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSurfaceAmbientColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getSurfaceAmbientColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceAmbientColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSurfaceDiffuseColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceDiffuseColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSurfaceDiffuseColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getSurfaceDiffuseColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceDiffuseColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSurfaceSpecularColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceSpecularColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSurfaceSpecularColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getSurfaceSpecularColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceSpecularColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSurfaceEmissiveColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceEmissiveColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSurfaceEmissiveColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getSurfaceEmissiveColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getSurfaceEmissiveColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSurfaceShininess()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getSurfaceShininess
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getSurfaceShininess_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSurfaceShininess() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getSurfaceShininess */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getDerivedAmbientLightColour()
 * Type:       virtual method
 * Definition: virtual ColourValue Ogre::AutoParamDataSource::getDerivedAmbientLightColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getDerivedAmbientLightColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->getDerivedAmbientLightColour() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ColourValue Ogre::AutoParamDataSource::getDerivedAmbientLightColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getDerivedSceneColour()
 * Type:       virtual method
 * Definition: virtual ColourValue Ogre::AutoParamDataSource::getDerivedSceneColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getDerivedSceneColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->getDerivedSceneColour() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ColourValue Ogre::AutoParamDataSource::getDerivedSceneColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setFog()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setFog
 * Signature:  (Ogre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setFog_1_1FogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
)
{
   // parameter conversions 
  Ogre::FogMode _cpp_mode = (Ogre::FogMode)mode;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  float _cpp_expDensity = expDensity;
  float _cpp_linearStart = linearStart;
  float _cpp_linearEnd = linearEnd; 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFog(_cpp_mode, *_cpp_colour, _cpp_expDensity, _cpp_linearStart, _cpp_linearEnd);
} /* virtual void Ogre::AutoParamDataSource::setFog */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getFogColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getFogColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getFogColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getFogColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getFogColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getFogParams()
 * Type:       virtual method
 * Definition: virtual const Vector4& Ogre::AutoParamDataSource::getFogParams
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getFogParams_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getFogParams() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector4& Ogre::AutoParamDataSource::getFogParams */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTextureViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getTextureViewProjMatrix
 * Signature:  (I)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTextureViewProjMatrix_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getTextureViewProjMatrix(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getTextureViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTextureWorldViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getTextureWorldViewProjMatrix
 * Signature:  (I)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTextureWorldViewProjMatrix_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getTextureWorldViewProjMatrix(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getTextureWorldViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSpotlightViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getSpotlightViewProjMatrix
 * Signature:  (I)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSpotlightViewProjMatrix_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getSpotlightViewProjMatrix(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getSpotlightViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSpotlightWorldViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getSpotlightWorldViewProjMatrix
 * Signature:  (I)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSpotlightWorldViewProjMatrix_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getSpotlightWorldViewProjMatrix(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getSpotlightWorldViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTextureTransformMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::AutoParamDataSource::getTextureTransformMatrix
 * Signature:  (I)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTextureTransformMatrix_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getTextureTransformMatrix(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::AutoParamDataSource::getTextureTransformMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCurrentRenderTarget()
 * Type:       virtual method
 * Definition: virtual const RenderTarget* Ogre::AutoParamDataSource::getCurrentRenderTarget
 * Signature:  ()Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getCurrentRenderTarget_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderTarget* _cpp_result = _cpp_this->getCurrentRenderTarget() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const RenderTarget* Ogre::AutoParamDataSource::getCurrentRenderTarget */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCurrentRenderable()
 * Type:       virtual method
 * Definition: virtual const Renderable* Ogre::AutoParamDataSource::getCurrentRenderable
 * Signature:  ()Ogre_Renderable
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getCurrentRenderable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable* _cpp_result = _cpp_this->getCurrentRenderable() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Renderable* Ogre::AutoParamDataSource::getCurrentRenderable */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCurrentPass()
 * Type:       virtual method
 * Definition: virtual const Pass* Ogre::AutoParamDataSource::getCurrentPass
 * Signature:  ()Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getCurrentPass_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass* _cpp_result = _cpp_this->getCurrentPass() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Pass* Ogre::AutoParamDataSource::getCurrentPass */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTextureSize()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getTextureSize
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTextureSize_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getTextureSize(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getTextureSize */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseTextureSize()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getInverseTextureSize
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseTextureSize_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getInverseTextureSize(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getInverseTextureSize */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getPackedTextureSize()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getPackedTextureSize
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getPackedTextureSize_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getPackedTextureSize(_cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getPackedTextureSize */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getShadowExtrusionDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getShadowExtrusionDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getShadowExtrusionDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getShadowExtrusionDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getShadowExtrusionDistance */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSceneDepthRange()
 * Type:       virtual method
 * Definition: virtual const Vector4& Ogre::AutoParamDataSource::getSceneDepthRange
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getSceneDepthRange_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getSceneDepthRange() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector4& Ogre::AutoParamDataSource::getSceneDepthRange */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getShadowSceneDepthRange()
 * Type:       virtual method
 * Definition: virtual const Vector4& Ogre::AutoParamDataSource::getShadowSceneDepthRange
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getShadowSceneDepthRange_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getShadowSceneDepthRange(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector4& Ogre::AutoParamDataSource::getShadowSceneDepthRange */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getShadowColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::AutoParamDataSource::getShadowColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getShadowColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getShadowColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const ColourValue& Ogre::AutoParamDataSource::getShadowColour */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getInverseViewProjMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseViewProjMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getInverseViewProjMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getInverseViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseTransposeViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeViewProjMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseTransposeViewProjMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getInverseTransposeViewProjMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTransposeViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getTransposeViewProjMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTransposeViewProjMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getTransposeViewProjMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getTransposeViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTransposeViewMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getTransposeViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTransposeViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getTransposeViewMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getTransposeViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseTransposeViewMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseTransposeViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getInverseTransposeViewMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTransposeProjectionMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getTransposeProjectionMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTransposeProjectionMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getTransposeProjectionMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getTransposeProjectionMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseProjectionMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getInverseProjectionMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseProjectionMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getInverseProjectionMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getInverseProjectionMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseTransposeProjectionMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeProjectionMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseTransposeProjectionMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getInverseTransposeProjectionMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeProjectionMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTransposeWorldViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getTransposeWorldViewProjMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTransposeWorldViewProjMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getTransposeWorldViewProjMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getTransposeWorldViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseWorldViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getInverseWorldViewProjMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseWorldViewProjMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getInverseWorldViewProjMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getInverseWorldViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseTransposeWorldViewProjMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeWorldViewProjMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseTransposeWorldViewProjMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getInverseTransposeWorldViewProjMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getInverseTransposeWorldViewProjMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTransposeWorldViewMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getTransposeWorldViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTransposeWorldViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getTransposeWorldViewMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getTransposeWorldViewMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTransposeWorldMatrix()
 * Type:       virtual method
 * Definition: virtual Matrix4 Ogre::AutoParamDataSource::getTransposeWorldMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTransposeWorldMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->getTransposeWorldMatrix() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Matrix4 Ogre::AutoParamDataSource::getTransposeWorldMatrix */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTime()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getTime
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getTime_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTime() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getTime */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTime_0_X()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getTime_0_X
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getTime_10_1X_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTime_0_X(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getTime_0_X */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCosTime_0_X()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getCosTime_0_X
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getCosTime_10_1X_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getCosTime_0_X(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getCosTime_0_X */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSinTime_0_X()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getSinTime_0_X
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getSinTime_10_1X_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSinTime_0_X(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getSinTime_0_X */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTanTime_0_X()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getTanTime_0_X
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getTanTime_10_1X_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTanTime_0_X(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getTanTime_0_X */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTime_0_X_packed()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getTime_0_X_packed
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTime_10_1X_1packed_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getTime_0_X_packed(_cpp_x) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getTime_0_X_packed */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTime_0_1()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getTime_0_1
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getTime_10_11_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTime_0_1(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getTime_0_1 */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCosTime_0_1()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getCosTime_0_1
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getCosTime_10_11_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getCosTime_0_1(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getCosTime_0_1 */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSinTime_0_1()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getSinTime_0_1
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getSinTime_10_11_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSinTime_0_1(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getSinTime_0_1 */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTanTime_0_1()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getTanTime_0_1
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getTanTime_10_11_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTanTime_0_1(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getTanTime_0_1 */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTime_0_1_packed()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getTime_0_1_packed
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTime_10_11_1packed_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getTime_0_1_packed(_cpp_x) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getTime_0_1_packed */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTime_0_2Pi()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getTime_0_2Pi
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getTime_10_12Pi_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTime_0_2Pi(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getTime_0_2Pi */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getCosTime_0_2Pi()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getCosTime_0_2Pi
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getCosTime_10_12Pi_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getCosTime_0_2Pi(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getCosTime_0_2Pi */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getSinTime_0_2Pi()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getSinTime_0_2Pi
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getSinTime_10_12Pi_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSinTime_0_2Pi(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getSinTime_0_2Pi */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTanTime_0_2Pi()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getTanTime_0_2Pi
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getTanTime_10_12Pi_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTanTime_0_2Pi(_cpp_x) ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getTanTime_0_2Pi */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getTime_0_2Pi_packed()
 * Type:       virtual method
 * Definition: virtual Vector4 Ogre::AutoParamDataSource::getTime_0_2Pi_packed
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getTime_10_12Pi_1packed_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x
)
{
   // parameter conversions 
  float _cpp_x = x; 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->getTime_0_2Pi_packed(_cpp_x) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector4 Ogre::AutoParamDataSource::getTime_0_2Pi_packed */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getFrameTime()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getFrameTime
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getFrameTime_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFrameTime() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getFrameTime */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getFPS()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getFPS
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getFPS_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFPS() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getFPS */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getViewportWidth()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getViewportWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getViewportWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getViewportWidth() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getViewportWidth */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getViewportHeight()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getViewportHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getViewportHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getViewportHeight() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getViewportHeight */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseViewportWidth()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getInverseViewportWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseViewportWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getInverseViewportWidth() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getInverseViewportWidth */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getInverseViewportHeight()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getInverseViewportHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getInverseViewportHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getInverseViewportHeight() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getInverseViewportHeight */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getViewDirection()
 * Type:       virtual method
 * Definition: virtual Vector3 Ogre::AutoParamDataSource::getViewDirection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getViewDirection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getViewDirection() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector3 Ogre::AutoParamDataSource::getViewDirection */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getViewSideVector()
 * Type:       virtual method
 * Definition: virtual Vector3 Ogre::AutoParamDataSource::getViewSideVector
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getViewSideVector_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getViewSideVector() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector3 Ogre::AutoParamDataSource::getViewSideVector */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getViewUpVector()
 * Type:       virtual method
 * Definition: virtual Vector3 Ogre::AutoParamDataSource::getViewUpVector
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AutoParamDataSource__1getViewUpVector_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getViewUpVector() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Vector3 Ogre::AutoParamDataSource::getViewUpVector */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getFOV()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getFOV
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getFOV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFOV() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getFOV */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getNearClipDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getNearClipDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getNearClipDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getNearClipDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getNearClipDistance */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getFarClipDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::AutoParamDataSource::getFarClipDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AutoParamDataSource__1getFarClipDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFarClipDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::AutoParamDataSource::getFarClipDistance */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     getPassNumber()
 * Type:       virtual method
 * Definition: virtual int Ogre::AutoParamDataSource::getPassNumber
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_AutoParamDataSource__1getPassNumber_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<const Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getPassNumber() ; 
   return _cpp_result;
} /* virtual int Ogre::AutoParamDataSource::getPassNumber */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     setPassNumber()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::setPassNumber
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1setPassNumber_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint passNumber
)
{
   // parameter conversions 
  const int _cpp_passNumber = passNumber; 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPassNumber(_cpp_passNumber);
} /* virtual void Ogre::AutoParamDataSource::setPassNumber */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     incPassNumber()
 * Type:       virtual method
 * Definition: virtual void Ogre::AutoParamDataSource::incPassNumber
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1incPassNumber (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->incPassNumber();
} /* virtual void Ogre::AutoParamDataSource::incPassNumber */


/*
 * Class:      org.ogre4j.AutoParamDataSource
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::AutoParamDataSource::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AutoParamDataSource__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::AutoParamDataSource 
   // cast pointer to C++ object 
   Ogre::AutoParamDataSource* _cpp_this = reinterpret_cast<Ogre::AutoParamDataSource*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::AutoParamDataSource::__delete */
