///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_CompositorChain.h"

// import header files of original library
#include <OgreCompositorChain.h>



/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     CompositorChain()
 * Type:       constructor
 * Definition: Ogre::CompositorChain::CompositorChain
 * Signature:  (Ogre_Viewport)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1_1createCompositorChain_1_1Viewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vp
)
{
   // constructor of class Ogre::CompositorChain 
   
   // parameter conversions 
  Ogre::Viewport* _cpp_vp = reinterpret_cast< Ogre::Viewport* >(vp); 
   
   // create new instance of class Ogre::CompositorChain 
   Ogre::CompositorChain* _cpp_this = new Ogre::CompositorChain(_cpp_vp); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::CompositorChain::CompositorChain */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     addCompositor()
 * Type:       non-virtual method
 * Definition: CompositorInstance* Ogre::CompositorChain::addCompositor
 * Signature:  (Ogre_CompositorPtrII)Ogre_CompositorInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1addCompositor_1_1CompositorPtrviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong filter, 
  jint addPosition, 
  jint technique
)
{
   // parameter conversions 
  Ogre::CompositorPtr* _cpp_filter = reinterpret_cast< Ogre::CompositorPtr* >(filter);
  size_t _cpp_addPosition = addPosition;
  size_t _cpp_technique = technique; 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositorInstance* _cpp_result = _cpp_this->addCompositor(*_cpp_filter, _cpp_addPosition, _cpp_technique) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositorInstance* Ogre::CompositorChain::addCompositor */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     removeCompositor()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::removeCompositor
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1removeCompositor_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint position
)
{
   // parameter conversions 
  size_t _cpp_position = position; 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeCompositor(_cpp_position);
} /* void Ogre::CompositorChain::removeCompositor */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getNumCompositors()
 * Type:       non-virtual method
 * Definition: size_t Ogre::CompositorChain::getNumCompositors
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositorChain__1getNumCompositors (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumCompositors() ; 
   return _cpp_result;
} /* size_t Ogre::CompositorChain::getNumCompositors */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     removeAllCompositors()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::removeAllCompositors
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1removeAllCompositors (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllCompositors();
} /* void Ogre::CompositorChain::removeAllCompositors */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getCompositor()
 * Type:       non-virtual method
 * Definition: CompositorInstance* Ogre::CompositorChain::getCompositor
 * Signature:  (I)Ogre_CompositorInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1getCompositor_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositorInstance* _cpp_result = _cpp_this->getCompositor(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositorInstance* Ogre::CompositorChain::getCompositor */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _getOriginalSceneCompositor()
 * Type:       non-virtual method
 * Definition: CompositorInstance* Ogre::CompositorChain::_getOriginalSceneCompositor
 * Signature:  ()Ogre_CompositorInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1_1getOriginalSceneCompositor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositorInstance* _cpp_result = _cpp_this->_getOriginalSceneCompositor() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositorInstance* Ogre::CompositorChain::_getOriginalSceneCompositor */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getCompositors()
 * Type:       non-virtual method
 * Definition: InstanceIterator Ogre::CompositorChain::getCompositors
 * Signature:  ()Ogre_CompositorChain_InstanceIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1getCompositors (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositorChain::InstanceIterator* _cpp_result = new Ogre::CompositorChain::InstanceIterator( _cpp_this->getCompositors() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* InstanceIterator Ogre::CompositorChain::getCompositors */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     setCompositorEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::setCompositorEnabled
 * Signature:  (IZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1setCompositorEnabled_1_1ivbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint position, 
  jboolean state
)
{
   // parameter conversions 
  size_t _cpp_position = position;
  bool _cpp_state = state ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCompositorEnabled(_cpp_position, _cpp_state);
} /* void Ogre::CompositorChain::setCompositorEnabled */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     preRenderTargetUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::preRenderTargetUpdate
 * Signature:  (Ogre_RenderTargetEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1preRenderTargetUpdate_1_1RenderTargetEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  const Ogre::RenderTargetEvent* _cpp_evt = reinterpret_cast< const Ogre::RenderTargetEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->preRenderTargetUpdate(*_cpp_evt);
} /* virtual void Ogre::CompositorChain::preRenderTargetUpdate */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     preViewportUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::preViewportUpdate
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1preViewportUpdate_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  const Ogre::RenderTargetViewportEvent* _cpp_evt = reinterpret_cast< const Ogre::RenderTargetViewportEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->preViewportUpdate(*_cpp_evt);
} /* virtual void Ogre::CompositorChain::preViewportUpdate */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     postViewportUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::postViewportUpdate
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1postViewportUpdate_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  const Ogre::RenderTargetViewportEvent* _cpp_evt = reinterpret_cast< const Ogre::RenderTargetViewportEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postViewportUpdate(*_cpp_evt);
} /* virtual void Ogre::CompositorChain::postViewportUpdate */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     viewportRemoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::viewportRemoved
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1viewportRemoved_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  const Ogre::RenderTargetViewportEvent* _cpp_evt = reinterpret_cast< const Ogre::RenderTargetViewportEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->viewportRemoved(*_cpp_evt);
} /* virtual void Ogre::CompositorChain::viewportRemoved */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _markDirty()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_markDirty
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1markDirty (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_markDirty();
} /* void Ogre::CompositorChain::_markDirty */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getViewport()
 * Type:       non-virtual method
 * Definition: Viewport* Ogre::CompositorChain::getViewport
 * Signature:  ()Ogre_Viewport
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1getViewport (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Viewport* _cpp_result = _cpp_this->getViewport() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Viewport* Ogre::CompositorChain::getViewport */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _notifyViewport()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_notifyViewport
 * Signature:  (Ogre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1notifyViewport_1_1Viewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vp
)
{
   // parameter conversions 
  Ogre::Viewport* _cpp_vp = reinterpret_cast< Ogre::Viewport* >(vp); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyViewport(_cpp_vp);
} /* void Ogre::CompositorChain::_notifyViewport */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _removeInstance()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_removeInstance
 * Signature:  (Ogre_CompositorInstance)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1removeInstance_1_1CompositorInstancep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong i
)
{
   // parameter conversions 
  Ogre::CompositorInstance* _cpp_i = reinterpret_cast< Ogre::CompositorInstance* >(i); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_removeInstance(_cpp_i);
} /* void Ogre::CompositorChain::_removeInstance */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _queuedOperation()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_queuedOperation
 * Signature:  (Ogre_CompositorInstance_RenderSystemOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1queuedOperation_1_1CompositorInstance_1RenderSystemOperationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  Ogre::CompositorInstance::RenderSystemOperation* _cpp_op = reinterpret_cast< Ogre::CompositorInstance::RenderSystemOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_queuedOperation(_cpp_op);
} /* void Ogre::CompositorChain::_queuedOperation */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _compile()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_compile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1compile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_compile();
} /* void Ogre::CompositorChain::_compile */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     postRenderTargetUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderTargetListener::postRenderTargetUpdate
 * Signature:  (Ogre_RenderTargetEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1postRenderTargetUpdate_1_1RenderTargetEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  const Ogre::RenderTargetEvent* _cpp_evt = reinterpret_cast< const Ogre::RenderTargetEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postRenderTargetUpdate(*_cpp_evt);
} /* virtual void Ogre::RenderTargetListener::postRenderTargetUpdate */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     viewportAdded()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderTargetListener::viewportAdded
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1viewportAdded_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
)
{
   // parameter conversions 
  const Ogre::RenderTargetViewportEvent* _cpp_evt = reinterpret_cast< const Ogre::RenderTargetViewportEvent* >(evt); 
   
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->viewportAdded(*_cpp_evt);
} /* virtual void Ogre::RenderTargetListener::viewportAdded */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::CompositorChain::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::CompositorChain 
   // cast pointer to C++ object 
   Ogre::CompositorChain* _cpp_this = reinterpret_cast<Ogre::CompositorChain*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::CompositorChain::__delete */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getLAST()
 * Type:       getter for public attribute
 * Definition: const size_t Ogre::CompositorChain::LAST
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositorChain__1getLAST (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const size_t _cpp_result = Ogre::CompositorChain::LAST ; 
   return _cpp_result;
} /* const size_t Ogre::CompositorChain::LAST */


/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getBEST()
 * Type:       getter for public attribute
 * Definition: const size_t Ogre::CompositorChain::BEST
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositorChain__1getBEST (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const size_t _cpp_result = Ogre::CompositorChain::BEST ; 
   return _cpp_result;
} /* const size_t Ogre::CompositorChain::BEST */
