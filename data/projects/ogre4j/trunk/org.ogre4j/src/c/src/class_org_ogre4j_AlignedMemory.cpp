///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_AlignedMemory.h"

// import header files of original library
#include <OgreAlignedAllocator.h>



/*
 * Class:      org.ogre4j.AlignedMemory
 * Method:     allocate()
 * Type:       static method
 * Definition: static void* Ogre::AlignedMemory::allocate
 * Signature:  (II)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AlignedMemory__1allocate_1_1iviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint size, 
  jint alignment
)
{
   // static method of class Ogre::AlignedMemory with return value 
   // parameter conversions 
  size_t _cpp_size = size;
  size_t _cpp_alignment = alignment; 
   
   // call library method 
   void* _cpp_result = Ogre::AlignedMemory::allocate(_cpp_size, _cpp_alignment); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static void* Ogre::AlignedMemory::allocate */


/*
 * Class:      org.ogre4j.AlignedMemory
 * Method:     allocate()
 * Type:       static method
 * Definition: static void* Ogre::AlignedMemory::allocate
 * Signature:  (I)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AlignedMemory__1allocate_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint size
)
{
   // static method of class Ogre::AlignedMemory with return value 
   // parameter conversions 
  size_t _cpp_size = size; 
   
   // call library method 
   void* _cpp_result = Ogre::AlignedMemory::allocate(_cpp_size); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static void* Ogre::AlignedMemory::allocate */


/*
 * Class:      org.ogre4j.AlignedMemory
 * Method:     deallocate()
 * Type:       static method
 * Definition: static void Ogre::AlignedMemory::deallocate
 * Signature:  (V)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AlignedMemory__1deallocate_1_1vp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong p
)
{
   // static method of class Ogre::AlignedMemory without return value 
   // parameter conversions 
  void* _cpp_p = reinterpret_cast<void*>(p); 
   
   // call library method 
   Ogre::AlignedMemory::deallocate(_cpp_p);
} /* static void Ogre::AlignedMemory::deallocate */


/*
 * Class:      org.ogre4j.AlignedMemory
 * Method:     AlignedMemory()
 * Type:       constructor
 * Definition: Ogre::AlignedMemory::AlignedMemory
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AlignedMemory__1_1createAlignedMemory (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::AlignedMemory 
   
   // parameter conversions 
   
   // create new instance of class Ogre::AlignedMemory 
   Ogre::AlignedMemory* _cpp_this = new Ogre::AlignedMemory(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AlignedMemory::AlignedMemory */


/*
 * Class:      org.ogre4j.AlignedMemory
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::AlignedMemory::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AlignedMemory__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::AlignedMemory 
   // cast pointer to C++ object 
   Ogre::AlignedMemory* _cpp_this = reinterpret_cast<Ogre::AlignedMemory*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::AlignedMemory::__delete */
