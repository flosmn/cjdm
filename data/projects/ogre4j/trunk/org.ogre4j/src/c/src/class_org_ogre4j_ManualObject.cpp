///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ManualObject.h"

// import header files of original library
#include <OgreManualObject.h>



/*
 * Class:      org.ogre4j.ManualObject
 * Method:     ManualObject()
 * Type:       constructor
 * Definition: Ogre::ManualObject::ManualObject
 * Signature:  (std_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1_1createManualObject_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name
)
{
   // constructor of class Ogre::ManualObject 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::ManualObject 
   Ogre::ManualObject* _cpp_this = new Ogre::ManualObject(_cpp_name); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ManualObject::ManualObject */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     clear()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* virtual void Ogre::ManualObject::clear */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     estimateVertexCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::estimateVertexCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1estimateVertexCount_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vcount
)
{
   // parameter conversions 
  size_t _cpp_vcount = vcount; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->estimateVertexCount(_cpp_vcount);
} /* virtual void Ogre::ManualObject::estimateVertexCount */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     estimateIndexCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::estimateIndexCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1estimateIndexCount_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint icount
)
{
   // parameter conversions 
  size_t _cpp_icount = icount; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->estimateIndexCount(_cpp_icount);
} /* virtual void Ogre::ManualObject::estimateIndexCount */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     begin()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::begin
 * Signature:  (std_stringOgre_RenderOperation_OperationType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1begin_1_1StringRRenderOperation_1OperationTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring materialName, 
  jint opType
)
{
   // parameter conversions 
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .;
  Ogre::RenderOperation::OperationType _cpp_opType = (Ogre::RenderOperation::OperationType)opType; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->begin(_cpp_materialName, _cpp_opType);
} /* virtual void Ogre::ManualObject::begin */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setDynamic()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::setDynamic
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setDynamic_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean dyn
)
{
   // parameter conversions 
  bool _cpp_dyn = dyn ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDynamic(_cpp_dyn);
} /* virtual void Ogre::ManualObject::setDynamic */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getDynamic()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ManualObject::getDynamic
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1getDynamic_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getDynamic() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ManualObject::getDynamic */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     beginUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::beginUpdate
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1beginUpdate_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sectionIndex
)
{
   // parameter conversions 
  size_t _cpp_sectionIndex = sectionIndex; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->beginUpdate(_cpp_sectionIndex);
} /* virtual void Ogre::ManualObject::beginUpdate */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     position()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::position
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1position_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pos
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_pos = reinterpret_cast< const Ogre::Vector3* >(pos); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->position(*_cpp_pos);
} /* virtual void Ogre::ManualObject::position */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     position()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::position
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1position_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->position(_cpp_x, _cpp_y, _cpp_z);
} /* virtual void Ogre::ManualObject::position */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     normal()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::normal
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1normal_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong norm
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_norm = reinterpret_cast< const Ogre::Vector3* >(norm); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->normal(*_cpp_norm);
} /* virtual void Ogre::ManualObject::normal */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     normal()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::normal
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1normal_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->normal(_cpp_x, _cpp_y, _cpp_z);
} /* virtual void Ogre::ManualObject::normal */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     textureCoord()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::textureCoord
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1textureCoord_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat u
)
{
   // parameter conversions 
  float _cpp_u = u; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureCoord(_cpp_u);
} /* virtual void Ogre::ManualObject::textureCoord */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     textureCoord()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::textureCoord
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1textureCoord_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat u, 
  jfloat v
)
{
   // parameter conversions 
  float _cpp_u = u;
  float _cpp_v = v; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureCoord(_cpp_u, _cpp_v);
} /* virtual void Ogre::ManualObject::textureCoord */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     textureCoord()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::textureCoord
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1textureCoord_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat u, 
  jfloat v, 
  jfloat w
)
{
   // parameter conversions 
  float _cpp_u = u;
  float _cpp_v = v;
  float _cpp_w = w; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureCoord(_cpp_u, _cpp_v, _cpp_w);
} /* virtual void Ogre::ManualObject::textureCoord */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     textureCoord()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::textureCoord
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1textureCoord_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z, 
  jfloat w
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z;
  float _cpp_w = w; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureCoord(_cpp_x, _cpp_y, _cpp_z, _cpp_w);
} /* virtual void Ogre::ManualObject::textureCoord */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     textureCoord()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::textureCoord
 * Signature:  (Ogre_Vector2)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1textureCoord_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong uv
)
{
   // parameter conversions 
  const Ogre::Vector2* _cpp_uv = reinterpret_cast< const Ogre::Vector2* >(uv); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureCoord(*_cpp_uv);
} /* virtual void Ogre::ManualObject::textureCoord */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     textureCoord()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::textureCoord
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1textureCoord_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong uvw
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_uvw = reinterpret_cast< const Ogre::Vector3* >(uvw); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureCoord(*_cpp_uvw);
} /* virtual void Ogre::ManualObject::textureCoord */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     textureCoord()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::textureCoord
 * Signature:  (Ogre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1textureCoord_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xyzw
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_xyzw = reinterpret_cast< const Ogre::Vector4* >(xyzw); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->textureCoord(*_cpp_xyzw);
} /* virtual void Ogre::ManualObject::textureCoord */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     colour()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::colour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1colour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong col
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_col = reinterpret_cast< const Ogre::ColourValue* >(col); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->colour(*_cpp_col);
} /* virtual void Ogre::ManualObject::colour */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     colour()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::colour
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1colour_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat r, 
  jfloat g, 
  jfloat b, 
  jfloat a
)
{
   // parameter conversions 
  float _cpp_r = r;
  float _cpp_g = g;
  float _cpp_b = b;
  float _cpp_a = a; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->colour(_cpp_r, _cpp_g, _cpp_b, _cpp_a);
} /* virtual void Ogre::ManualObject::colour */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     index()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::index
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1index_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong idx
)
{
   // parameter conversions 
  unsigned int _cpp_idx = idx; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->index(_cpp_idx);
} /* virtual void Ogre::ManualObject::index */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     triangle()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::triangle
 * Signature:  (unsigned_intunsigned_intunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1triangle_1_1uint32vuint32vuint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong i1, 
  jlong i2, 
  jlong i3
)
{
   // parameter conversions 
  unsigned int _cpp_i1 = i1;
  unsigned int _cpp_i2 = i2;
  unsigned int _cpp_i3 = i3; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->triangle(_cpp_i1, _cpp_i2, _cpp_i3);
} /* virtual void Ogre::ManualObject::triangle */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     quad()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::quad
 * Signature:  (unsigned_intunsigned_intunsigned_intunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1quad_1_1uint32vuint32vuint32vuint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong i1, 
  jlong i2, 
  jlong i3, 
  jlong i4
)
{
   // parameter conversions 
  unsigned int _cpp_i1 = i1;
  unsigned int _cpp_i2 = i2;
  unsigned int _cpp_i3 = i3;
  unsigned int _cpp_i4 = i4; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->quad(_cpp_i1, _cpp_i2, _cpp_i3, _cpp_i4);
} /* virtual void Ogre::ManualObject::quad */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     end()
 * Type:       virtual method
 * Definition: virtual ManualObjectSection* Ogre::ManualObject::end
 * Signature:  ()Ogre_ManualObject_ManualObjectSection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1end (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ManualObject::ManualObjectSection* _cpp_result = _cpp_this->end() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ManualObjectSection* Ogre::ManualObject::end */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setMaterialName()
 * Type:       virtual method
 * Definition: virtual void Ogre::ManualObject::setMaterialName
 * Signature:  (Istd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setMaterialName_1_1ivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint subindex, 
  jstring name
)
{
   // parameter conversions 
  size_t _cpp_subindex = subindex;
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialName(_cpp_subindex, _cpp_name);
} /* virtual void Ogre::ManualObject::setMaterialName */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     convertToMesh()
 * Type:       virtual method
 * Definition: virtual MeshPtr Ogre::ManualObject::convertToMesh
 * Signature:  (std_stringstd_string)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1convertToMesh_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring meshName, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_meshName = ""; org::xbig::jni::to_stdstring(_jni_env_, meshName, _cpp_meshName); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->convertToMesh(_cpp_meshName, _cpp_groupName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MeshPtr Ogre::ManualObject::convertToMesh */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::ManualObject::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
)
{
   // parameter conversions 
  bool _cpp_useIdentityProjection = useIdentityProjection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityProjection(_cpp_useIdentityProjection);
} /* void Ogre::ManualObject::setUseIdentityProjection */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::ManualObject::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityProjection() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ManualObject::getUseIdentityProjection */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::ManualObject::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
)
{
   // parameter conversions 
  bool _cpp_useIdentityView = useIdentityView ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityView(_cpp_useIdentityView);
} /* void Ogre::ManualObject::setUseIdentityView */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::ManualObject::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityView() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ManualObject::getUseIdentityView */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setBoundingBox()
 * Type:       non-virtual method
 * Definition: void Ogre::ManualObject::setBoundingBox
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setBoundingBox_1_1AxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_box = reinterpret_cast< const Ogre::AxisAlignedBox* >(box); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBoundingBox(*_cpp_box);
} /* void Ogre::ManualObject::setBoundingBox */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getSection()
 * Type:       non-virtual method
 * Definition: ManualObjectSection* Ogre::ManualObject::getSection
 * Signature:  (I)Ogre_ManualObject_ManualObjectSection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getSection_1_1Iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong index
)
{
   // parameter conversions 
  unsigned int _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ManualObject::ManualObjectSection* _cpp_result = _cpp_this->getSection(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ManualObjectSection* Ogre::ManualObject::getSection */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getNumSections()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::ManualObject::getNumSections
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getNumSections_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getNumSections() ; 
   return _cpp_result;
} /* unsigned int Ogre::ManualObject::getNumSections */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setKeepDeclarationOrder()
 * Type:       non-virtual method
 * Definition: void Ogre::ManualObject::setKeepDeclarationOrder
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setKeepDeclarationOrder_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean keepOrder
)
{
   // parameter conversions 
  bool _cpp_keepOrder = keepOrder ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setKeepDeclarationOrder(_cpp_keepOrder);
} /* void Ogre::ManualObject::setKeepDeclarationOrder */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getKeepDeclarationOrder()
 * Type:       non-virtual method
 * Definition: bool Ogre::ManualObject::getKeepDeclarationOrder
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1getKeepDeclarationOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getKeepDeclarationOrder() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ManualObject::getKeepDeclarationOrder */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getMovableType()
 * Type:       virtual method
 * Definition: const String& Ogre::ManualObject::getMovableType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ManualObject__1getMovableType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMovableType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ManualObject::getMovableType */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getBoundingBox()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::ManualObject::getBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBoundingBox() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::ManualObject::getBoundingBox */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getBoundingRadius()
 * Type:       virtual method
 * Definition: Real Ogre::ManualObject::getBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ManualObject__1getBoundingRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingRadius() ; 
   return _cpp_result;
} /* Real Ogre::ManualObject::getBoundingRadius */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: void Ogre::ManualObject::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* void Ogre::ManualObject::_updateRenderQueue */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getEdgeList()
 * Type:       virtual method
 * Definition: EdgeData* Ogre::ManualObject::getEdgeList
 * Signature:  ()Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::ManualObject::getEdgeList */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     hasEdgeList()
 * Type:       virtual method
 * Definition: bool Ogre::ManualObject::hasEdgeList
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1hasEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEdgeList() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ManualObject::hasEdgeList */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getShadowVolumeRenderableIterator()
 * Type:       virtual method
 * Definition: ShadowRenderableListIterator Ogre::ManualObject::getShadowVolumeRenderableIterator
 * Signature:  (Ogre_ShadowTechniqueOgre_LightOgre_HardwareIndexBufferSharedPtrZfloatJ)Ogre_ShadowCaster_ShadowRenderableListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getShadowVolumeRenderableIterator_1_1ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowTechnique, 
  jlong light, 
  jlong indexBuffer, 
  jboolean extrudeVertices, 
  jfloat extrusionDist, 
  jlong flags
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_shadowTechnique = (Ogre::ShadowTechnique)shadowTechnique;
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  bool _cpp_extrudeVertices = extrudeVertices ? true : false;
  float _cpp_extrusionDist = extrusionDist;
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCaster::ShadowRenderableListIterator* _cpp_result = new Ogre::ShadowCaster::ShadowRenderableListIterator( _cpp_this->getShadowVolumeRenderableIterator(_cpp_shadowTechnique, _cpp_light, _cpp_indexBuffer, _cpp_extrudeVertices, _cpp_extrusionDist, _cpp_flags) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderableListIterator Ogre::ManualObject::getShadowVolumeRenderableIterator */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     visitRenderables()
 * Type:       virtual method
 * Definition: void Ogre::ManualObject::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::ManualObject::visitRenderables */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _notifyCreator()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCreator
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1_1notifyCreator_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCreator(_cpp_fact);
} /* virtual void Ogre::MovableObject::_notifyCreator */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _getCreator()
 * Type:       virtual method
 * Definition: virtual MovableObjectFactory* Ogre::MovableObject::_getCreator
 * Signature:  ()Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1_1getCreator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->_getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectFactory* Ogre::MovableObject::_getCreator */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _notifyManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1_1notifyManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_man = reinterpret_cast< Ogre::SceneManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyManager(_cpp_man);
} /* virtual void Ogre::MovableObject::_notifyManager */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _getManager()
 * Type:       virtual method
 * Definition: virtual SceneManager* Ogre::MovableObject::_getManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1_1getManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneManager* Ogre::MovableObject::_getManager */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::MovableObject::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ManualObject__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::MovableObject::getName */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getParentNode()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::MovableObject::getParentNode
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getParentNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParentNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::MovableObject::getParentNode */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getParentSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::MovableObject::getParentSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getParentSceneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getParentSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::MovableObject::getParentSceneNode */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _notifyAttached()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* virtual void Ogre::MovableObject::_notifyAttached */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     isAttached()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isAttached
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1isAttached_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAttached() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isAttached */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     detatchFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::detatchFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1detatchFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detatchFromParent();
} /* virtual void Ogre::MovableObject::detatchFromParent */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     isInScene()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isInScene
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1isInScene_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInScene() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isInScene */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _notifyMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyMoved
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1_1notifyMoved (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyMoved();
} /* virtual void Ogre::MovableObject::_notifyMoved */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _notifyCurrentCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* virtual void Ogre::MovableObject::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getWorldBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox
 * Signature:  (Z)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getWorldBoundingBox_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getWorldBoundingBox(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getWorldBoundingSphere()
 * Type:       virtual method
 * Definition: virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere
 * Signature:  (Z)Ogre_Sphere
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getWorldBoundingSphere_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Sphere* _cpp_result = & _cpp_this->getWorldBoundingSphere(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* virtual void Ogre::MovableObject::setVisible */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::getVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1getVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::getVisible */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isVisible */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::MovableObject::setRenderingDistance */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::MovableObject::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ManualObject__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::MovableObject::getRenderingDistance */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setUserObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserObject
 * Signature:  (Ogre_UserDefinedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setUserObject_1_1UserDefinedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::UserDefinedObject* _cpp_obj = reinterpret_cast< Ogre::UserDefinedObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserObject(_cpp_obj);
} /* virtual void Ogre::MovableObject::setUserObject */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getUserObject()
 * Type:       virtual method
 * Definition: virtual UserDefinedObject* Ogre::MovableObject::getUserObject
 * Signature:  ()Ogre_UserDefinedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getUserObject (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UserDefinedObject* _cpp_result = _cpp_this->getUserObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual UserDefinedObject* Ogre::MovableObject::getUserObject */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::MovableObject::setUserAny */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::MovableObject::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::MovableObject::getUserAny */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* virtual void Ogre::MovableObject::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::MovableObject::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_ManualObject__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::MovableObject::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _getParentNodeFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1_1getParentNodeFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getParentNodeFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setQueryFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     addQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1addQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addQueryFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     removeQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeQueryFlags
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1removeQueryFlags_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeQueryFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getQueryFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getQueryFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getQueryFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setVisibilityFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     addVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1addVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addVisibilityFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     removeVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1removeVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeVisibilityFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getVisibilityFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getVisibilityFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setListener
 * Signature:  (Ogre_MovableObject_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MovableObject::Listener* _cpp_listener = reinterpret_cast< Ogre::MovableObject::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::MovableObject::setListener */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::MovableObject::getListener
 * Signature:  ()Ogre_MovableObject_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::MovableObject::getListener */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     queryLights()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::MovableObject::queryLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1queryLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->queryLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::MovableObject::queryLights */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     _getLightList()
 * Type:       virtual method
 * Definition: virtual LightList* Ogre::MovableObject::_getLightList
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1_1getLightList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->_getLightList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual LightList* Ogre::MovableObject::_getLightList */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getLightCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getLightCapBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getLightCapBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getDarkCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds
 * Signature:  (Ogre_Lightfloat)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getDarkCapBounds_1_1LightRRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jfloat dirLightExtrusionDist
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  float _cpp_dirLightExtrusionDist = dirLightExtrusionDist; 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getDarkCapBounds(*_cpp_light, _cpp_dirLightExtrusionDist) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setCastShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::MovableObject::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_enabled);
} /* void Ogre::MovableObject::setCastShadows */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1getCastShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::getCastShadows */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getPointExtrusionDistance()
 * Type:       virtual method
 * Definition: Real Ogre::MovableObject::getPointExtrusionDistance
 * Signature:  (Ogre_Light)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ManualObject__1getPointExtrusionDistance_1_1LightP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_l = reinterpret_cast< const Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointExtrusionDistance(_cpp_l) ; 
   return _cpp_result;
} /* Real Ogre::MovableObject::getPointExtrusionDistance */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getTypeFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getTypeFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getTypeFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTypeFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getTypeFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setDebugDisplayEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setDebugDisplayEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugDisplayEnabled(_cpp_enabled);
} /* virtual void Ogre::MovableObject::setDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     isDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isDebugDisplayEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject__1isDebugDisplayEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugDisplayEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setDefaultQueryFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setDefaultQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::ManualObject without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::ManualObject::setDefaultQueryFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultQueryFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getDefaultQueryFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getDefaultQueryFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ManualObject with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::ManualObject::getDefaultQueryFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultQueryFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     setDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1setDefaultVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::ManualObject without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::ManualObject::setDefaultVisibilityFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getDefaultVisibilityFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ManualObject with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::ManualObject::getDefaultVisibilityFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     extrudeVertices()
 * Type:       static method
 * Definition: static void Ogre::ShadowCaster::extrudeVertices
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrIOgre_Vector4float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1extrudeVertices_1_1HardwareVertexBufferSharedPtrRivVector4RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexBuffer, 
  jint originalVertexCount, 
  jlong lightPos, 
  jfloat extrudeDist
)
{
   // static method of class Ogre::ManualObject without return value 
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_vertexBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(vertexBuffer);
  size_t _cpp_originalVertexCount = originalVertexCount;
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist; 
   
   // call library method 
   Ogre::ManualObject::extrudeVertices(*_cpp_vertexBuffer, _cpp_originalVertexCount, *_cpp_lightPos, _cpp_extrudeDist);
} /* static void Ogre::ShadowCaster::extrudeVertices */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     getAnimableValueNames()
 * Type:       non-virtual method
 * Definition: const StringVector& Ogre::AnimableObject::getAnimableValueNames
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1getAnimableValueNames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject* _cpp_this = reinterpret_cast<const Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getAnimableValueNames() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::AnimableObject::getAnimableValueNames */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     createAnimableValue()
 * Type:       virtual method
 * Definition: virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue
 * Signature:  (std_string)Ogre_AnimableValuePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject__1createAnimableValue_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring valueName
)
{
   // parameter conversions 
  std::string _cpp_valueName = ""; org::xbig::jni::to_stdstring(_jni_env_, valueName, _cpp_valueName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimableValuePtr* _cpp_result = new Ogre::AnimableValuePtr( _cpp_this->createAnimableValue(_cpp_valueName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue */


/*
 * Class:      org.ogre4j.ManualObject
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ManualObject::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ManualObject 
   // cast pointer to C++ object 
   Ogre::ManualObject* _cpp_this = reinterpret_cast<Ogre::ManualObject*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ManualObject::__delete */
