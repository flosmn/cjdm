///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_VertexDeclaration.h"

// import header files of original library
#include <OgreHardwareVertexBuffer.h>



/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     VertexDeclaration()
 * Type:       constructor
 * Definition: Ogre::VertexDeclaration::VertexDeclaration
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1_1createVertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::VertexDeclaration 
   
   // parameter conversions 
   
   // create new instance of class Ogre::VertexDeclaration 
   Ogre::VertexDeclaration* _cpp_this = new Ogre::VertexDeclaration(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::VertexDeclaration::VertexDeclaration */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     getElementCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::VertexDeclaration::getElementCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexDeclaration__1getElementCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getElementCount() ; 
   return _cpp_result;
} /* size_t Ogre::VertexDeclaration::getElementCount */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     getElements()
 * Type:       non-virtual method
 * Definition: const VertexElementList& Ogre::VertexDeclaration::getElements
 * Signature:  ()Ogre_VertexDeclaration_VertexElementList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1getElements_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<const Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexDeclaration::VertexElementList* _cpp_result = & _cpp_this->getElements() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VertexElementList& Ogre::VertexDeclaration::getElements */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     getElement()
 * Type:       non-virtual method
 * Definition: const VertexElement* Ogre::VertexDeclaration::getElement
 * Signature:  (S)Ogre_VertexElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1getElement_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexElement* _cpp_result = _cpp_this->getElement(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VertexElement* Ogre::VertexDeclaration::getElement */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     sort()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexDeclaration::sort
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexDeclaration__1sort (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->sort();
} /* void Ogre::VertexDeclaration::sort */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     closeGapsInSource()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexDeclaration::closeGapsInSource
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexDeclaration__1closeGapsInSource (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->closeGapsInSource();
} /* void Ogre::VertexDeclaration::closeGapsInSource */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     getAutoOrganisedDeclaration()
 * Type:       non-virtual method
 * Definition: VertexDeclaration* Ogre::VertexDeclaration::getAutoOrganisedDeclaration
 * Signature:  (ZZ)Ogre_VertexDeclaration
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1getAutoOrganisedDeclaration_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean skeletalAnimation, 
  jboolean vertexAnimation
)
{
   // parameter conversions 
  bool _cpp_skeletalAnimation = skeletalAnimation ? true : false;
  bool _cpp_vertexAnimation = vertexAnimation ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexDeclaration* _cpp_result = _cpp_this->getAutoOrganisedDeclaration(_cpp_skeletalAnimation, _cpp_vertexAnimation) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexDeclaration* Ogre::VertexDeclaration::getAutoOrganisedDeclaration */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     getMaxSource()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::VertexDeclaration::getMaxSource
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexDeclaration__1getMaxSource_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<const Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getMaxSource() ; 
   return _cpp_result;
} /* unsigned short Ogre::VertexDeclaration::getMaxSource */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     addElement()
 * Type:       virtual method
 * Definition: virtual const VertexElement& Ogre::VertexDeclaration::addElement
 * Signature:  (SIOgre_VertexElementTypeOgre_VertexElementSemanticS)Ogre_VertexElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1addElement_1_1HvivVertexElementTypevVertexElementSemanticvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint source, 
  jint offset, 
  jint theType, 
  jint semantic, 
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_source = source;
  size_t _cpp_offset = offset;
  Ogre::VertexElementType _cpp_theType = (Ogre::VertexElementType)theType;
  Ogre::VertexElementSemantic _cpp_semantic = (Ogre::VertexElementSemantic)semantic;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexElement* _cpp_result = & _cpp_this->addElement(_cpp_source, _cpp_offset, _cpp_theType, _cpp_semantic, _cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const VertexElement& Ogre::VertexDeclaration::addElement */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     insertElement()
 * Type:       virtual method
 * Definition: virtual const VertexElement& Ogre::VertexDeclaration::insertElement
 * Signature:  (SSIOgre_VertexElementTypeOgre_VertexElementSemanticS)Ogre_VertexElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1insertElement_1_1HvHvivVertexElementTypevVertexElementSemanticvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint atPosition, 
  jint source, 
  jint offset, 
  jint theType, 
  jint semantic, 
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_atPosition = atPosition;
  unsigned short _cpp_source = source;
  size_t _cpp_offset = offset;
  Ogre::VertexElementType _cpp_theType = (Ogre::VertexElementType)theType;
  Ogre::VertexElementSemantic _cpp_semantic = (Ogre::VertexElementSemantic)semantic;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexElement* _cpp_result = & _cpp_this->insertElement(_cpp_atPosition, _cpp_source, _cpp_offset, _cpp_theType, _cpp_semantic, _cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const VertexElement& Ogre::VertexDeclaration::insertElement */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     removeElement()
 * Type:       virtual method
 * Definition: virtual void Ogre::VertexDeclaration::removeElement
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexDeclaration__1removeElement_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint elem_index
)
{
   // parameter conversions 
  unsigned short _cpp_elem_index = elem_index; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeElement(_cpp_elem_index);
} /* virtual void Ogre::VertexDeclaration::removeElement */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     removeElement()
 * Type:       virtual method
 * Definition: virtual void Ogre::VertexDeclaration::removeElement
 * Signature:  (Ogre_VertexElementSemanticS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexDeclaration__1removeElement_1_1VertexElementSemanticvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint semantic, 
  jint index
)
{
   // parameter conversions 
  Ogre::VertexElementSemantic _cpp_semantic = (Ogre::VertexElementSemantic)semantic;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeElement(_cpp_semantic, _cpp_index);
} /* virtual void Ogre::VertexDeclaration::removeElement */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     removeAllElements()
 * Type:       virtual method
 * Definition: virtual void Ogre::VertexDeclaration::removeAllElements
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexDeclaration__1removeAllElements (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllElements();
} /* virtual void Ogre::VertexDeclaration::removeAllElements */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     modifyElement()
 * Type:       virtual method
 * Definition: virtual void Ogre::VertexDeclaration::modifyElement
 * Signature:  (SSIOgre_VertexElementTypeOgre_VertexElementSemanticS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexDeclaration__1modifyElement_1_1HvHvivVertexElementTypevVertexElementSemanticvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint elem_index, 
  jint source, 
  jint offset, 
  jint theType, 
  jint semantic, 
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_elem_index = elem_index;
  unsigned short _cpp_source = source;
  size_t _cpp_offset = offset;
  Ogre::VertexElementType _cpp_theType = (Ogre::VertexElementType)theType;
  Ogre::VertexElementSemantic _cpp_semantic = (Ogre::VertexElementSemantic)semantic;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->modifyElement(_cpp_elem_index, _cpp_source, _cpp_offset, _cpp_theType, _cpp_semantic, _cpp_index);
} /* virtual void Ogre::VertexDeclaration::modifyElement */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     findElementBySemantic()
 * Type:       virtual method
 * Definition: virtual const VertexElement* Ogre::VertexDeclaration::findElementBySemantic
 * Signature:  (Ogre_VertexElementSemanticS)Ogre_VertexElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1findElementBySemantic_1_1VertexElementSemanticvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sem, 
  jint index
)
{
   // parameter conversions 
  Ogre::VertexElementSemantic _cpp_sem = (Ogre::VertexElementSemantic)sem;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexElement* _cpp_result = _cpp_this->findElementBySemantic(_cpp_sem, _cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const VertexElement* Ogre::VertexDeclaration::findElementBySemantic */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     findElementsBySource()
 * Type:       virtual method
 * Definition: virtual VertexElementList Ogre::VertexDeclaration::findElementsBySource
 * Signature:  (S)Ogre_VertexDeclaration_VertexElementList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1findElementsBySource_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint source
)
{
   // parameter conversions 
  unsigned short _cpp_source = source; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexDeclaration::VertexElementList* _cpp_result = new Ogre::VertexDeclaration::VertexElementList( _cpp_this->findElementsBySource(_cpp_source) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual VertexElementList Ogre::VertexDeclaration::findElementsBySource */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     getVertexSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::VertexDeclaration::getVertexSize
 * Signature:  (S)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexDeclaration__1getVertexSize_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint source
)
{
   // parameter conversions 
  unsigned short _cpp_source = source; 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getVertexSize(_cpp_source) ; 
   return _cpp_result;
} /* virtual size_t Ogre::VertexDeclaration::getVertexSize */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     clone()
 * Type:       virtual method
 * Definition: virtual VertexDeclaration* Ogre::VertexDeclaration::clone
 * Signature:  ()Ogre_VertexDeclaration
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexDeclaration__1clone (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexDeclaration* _cpp_result = _cpp_this->clone() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual VertexDeclaration* Ogre::VertexDeclaration::clone */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::VertexDeclaration::operator==
 * Signature:  (Ogre_VertexDeclaration)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_VertexDeclaration__1operatorEqual_1_1VertexDeclarationR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::VertexDeclaration* _cpp_rhs = reinterpret_cast< const Ogre::VertexDeclaration* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<const Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::VertexDeclaration::operator== */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::VertexDeclaration::operator!=
 * Signature:  (Ogre_VertexDeclaration)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_VertexDeclaration__1operatorNotEqual_1_1VertexDeclarationR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::VertexDeclaration* _cpp_rhs = reinterpret_cast< const Ogre::VertexDeclaration* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<const Ogre::VertexDeclaration*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::VertexDeclaration::operator!= */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     vertexElementLess()
 * Type:       static method
 * Definition: static bool Ogre::VertexDeclaration::vertexElementLess
 * Signature:  (Ogre_VertexElementOgre_VertexElement)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_VertexDeclaration__1vertexElementLess_1_1VertexElementRVertexElementR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong e1, 
  jlong e2
)
{
   // static method of class Ogre::VertexDeclaration with return value 
   // parameter conversions 
  const Ogre::VertexElement* _cpp_e1 = reinterpret_cast< const Ogre::VertexElement* >(e1);
  const Ogre::VertexElement* _cpp_e2 = reinterpret_cast< const Ogre::VertexElement* >(e2); 
   
   // call library method 
   const bool _cpp_result = Ogre::VertexDeclaration::vertexElementLess(*_cpp_e1, *_cpp_e2); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::VertexDeclaration::vertexElementLess */


/*
 * Class:      org.ogre4j.VertexDeclaration
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::VertexDeclaration::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexDeclaration__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::VertexDeclaration 
   // cast pointer to C++ object 
   Ogre::VertexDeclaration* _cpp_this = reinterpret_cast<Ogre::VertexDeclaration*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::VertexDeclaration::__delete */
