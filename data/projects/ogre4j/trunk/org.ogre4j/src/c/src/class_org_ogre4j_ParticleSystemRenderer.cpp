///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ParticleSystemRenderer.h"

// import header files of original library
#include <OgreParticleSystemRenderer.h>



/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     getType()
 * Type:       pure virtual method
 * Definition: virtual const String& Ogre::ParticleSystemRenderer::getType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystemRenderer__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<const Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::ParticleSystemRenderer::getType */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _updateRenderQueue()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_updateRenderQueue
 * Signature:  (Ogre_RenderQueuestd_list__Particle_*__Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1updateRenderQueue_1_1RenderQueuepstd_1list_1_1Particle_1ptr_1_1rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue, 
  jlong currentParticles, 
  jboolean cullIndividually
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue);
  std::list< Ogre::Particle* >* _cpp_currentParticles = reinterpret_cast< std::list< Ogre::Particle* >* >(currentParticles);
  bool _cpp_cullIndividually = cullIndividually ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue, *_cpp_currentParticles, _cpp_cullIndividually);
} /* virtual void Ogre::ParticleSystemRenderer::_updateRenderQueue */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _setMaterial()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_setMaterial
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1setMaterial_1_1MaterialPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mat
)
{
   // parameter conversions 
  Ogre::MaterialPtr* _cpp_mat = reinterpret_cast< Ogre::MaterialPtr* >(mat); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setMaterial(*_cpp_mat);
} /* virtual void Ogre::ParticleSystemRenderer::_setMaterial */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyCurrentCamera()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyAttached()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyAttached */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyParticleRotated()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyParticleRotated
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyParticleRotated (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleRotated();
} /* virtual void Ogre::ParticleSystemRenderer::_notifyParticleRotated */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyParticleResized()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyParticleResized
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyParticleResized (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleResized();
} /* virtual void Ogre::ParticleSystemRenderer::_notifyParticleResized */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyParticleQuota()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyParticleQuota
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyParticleQuota_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint quota
)
{
   // parameter conversions 
  size_t _cpp_quota = quota; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleQuota(_cpp_quota);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyParticleQuota */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyDefaultDimensions()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyDefaultDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyDefaultDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
)
{
   // parameter conversions 
  float _cpp_width = width;
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyDefaultDimensions(_cpp_width, _cpp_height);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyDefaultDimensions */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyParticleEmitted()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyParticleEmitted
 * Signature:  (Ogre_Particle)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyParticleEmitted_1_1Particlep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong particle
)
{
   // parameter conversions 
  Ogre::Particle* _cpp_particle = reinterpret_cast< Ogre::Particle* >(particle); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleEmitted(_cpp_particle);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyParticleEmitted */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyParticleExpired()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyParticleExpired
 * Signature:  (Ogre_Particle)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyParticleExpired_1_1Particlep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong particle
)
{
   // parameter conversions 
  Ogre::Particle* _cpp_particle = reinterpret_cast< Ogre::Particle* >(particle); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleExpired(_cpp_particle);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyParticleExpired */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyParticleMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyParticleMoved
 * Signature:  (std_list__Particle_*__)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyParticleMoved_1_1std_1list_1_1Particle_1ptr_1_1r (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong currentParticles
)
{
   // parameter conversions 
  std::list< Ogre::Particle* >* _cpp_currentParticles = reinterpret_cast< std::list< Ogre::Particle* >* >(currentParticles); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleMoved(*_cpp_currentParticles);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyParticleMoved */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _notifyParticleCleared()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_notifyParticleCleared
 * Signature:  (std_list__Particle_*__)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1notifyParticleCleared_1_1std_1list_1_1Particle_1ptr_1_1r (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong currentParticles
)
{
   // parameter conversions 
  std::list< Ogre::Particle* >* _cpp_currentParticles = reinterpret_cast< std::list< Ogre::Particle* >* >(currentParticles); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParticleCleared(*_cpp_currentParticles);
} /* virtual void Ogre::ParticleSystemRenderer::_notifyParticleCleared */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _createVisualData()
 * Type:       virtual method
 * Definition: virtual ParticleVisualData* Ogre::ParticleSystemRenderer::_createVisualData
 * Signature:  ()Ogre_ParticleVisualData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1createVisualData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParticleVisualData* _cpp_result = _cpp_this->_createVisualData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ParticleVisualData* Ogre::ParticleSystemRenderer::_createVisualData */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _destroyVisualData()
 * Type:       virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::_destroyVisualData
 * Signature:  (Ogre_ParticleVisualData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1destroyVisualData_1_1ParticleVisualDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vis
)
{
   // parameter conversions 
  Ogre::ParticleVisualData* _cpp_vis = reinterpret_cast< Ogre::ParticleVisualData* >(vis); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_destroyVisualData(_cpp_vis);
} /* virtual void Ogre::ParticleSystemRenderer::_destroyVisualData */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     setRenderQueueGroup()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* virtual void Ogre::ParticleSystemRenderer::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     setKeepParticlesInLocalSpace()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::setKeepParticlesInLocalSpace
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1setKeepParticlesInLocalSpace_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean keepLocal
)
{
   // parameter conversions 
  bool _cpp_keepLocal = keepLocal ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setKeepParticlesInLocalSpace(_cpp_keepLocal);
} /* virtual void Ogre::ParticleSystemRenderer::setKeepParticlesInLocalSpace */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     _getSortMode()
 * Type:       pure virtual method
 * Definition: virtual SortMode Ogre::ParticleSystemRenderer::_getSortMode
 * Signature:  ()Ogre_SortMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1getSortMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<const Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SortMode _cpp_result = _cpp_this->_getSortMode() ; 
   return _cpp_result;
} /* virtual SortMode Ogre::ParticleSystemRenderer::_getSortMode */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     visitRenderables()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ParticleSystemRenderer::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* virtual void Ogre::ParticleSystemRenderer::visitRenderables */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystemRenderer__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystemRenderer__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<const Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ParticleSystemRenderer__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<const Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ParticleSystemRenderer__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ParticleSystemRenderer__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<const Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<const Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ParticleSystemRenderer without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::ParticleSystemRenderer::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.ParticleSystemRenderer
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ParticleSystemRenderer::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ParticleSystemRenderer__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ParticleSystemRenderer 
   // cast pointer to C++ object 
   Ogre::ParticleSystemRenderer* _cpp_this = reinterpret_cast<Ogre::ParticleSystemRenderer*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ParticleSystemRenderer::__delete */
