///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_HardwareBufferManager.h"

// import header files of original library
#include <OgreHardwareBufferManager.h>



/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createVertexBuffer()
 * Type:       pure virtual method
 * Definition: virtual HardwareVertexBufferSharedPtr Ogre::HardwareBufferManager::createVertexBuffer
 * Signature:  (IIOgre_HardwareBuffer_UsageZ)Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createVertexBuffer_1_1ivivHardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertexSize, 
  jint numVerts, 
  jint usage, 
  jboolean useShadowBuffer
)
{
   // parameter conversions 
  size_t _cpp_vertexSize = vertexSize;
  size_t _cpp_numVerts = numVerts;
  Ogre::HardwareBuffer::Usage _cpp_usage = (Ogre::HardwareBuffer::Usage)usage;
  bool _cpp_useShadowBuffer = useShadowBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareVertexBufferSharedPtr* _cpp_result = new Ogre::HardwareVertexBufferSharedPtr( _cpp_this->createVertexBuffer(_cpp_vertexSize, _cpp_numVerts, _cpp_usage, _cpp_useShadowBuffer) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual HardwareVertexBufferSharedPtr Ogre::HardwareBufferManager::createVertexBuffer */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createIndexBuffer()
 * Type:       pure virtual method
 * Definition: virtual HardwareIndexBufferSharedPtr Ogre::HardwareBufferManager::createIndexBuffer
 * Signature:  (Ogre_HardwareIndexBuffer_IndexTypeIOgre_HardwareBuffer_UsageZ)Ogre_HardwareIndexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createIndexBuffer_1_1HardwareIndexBuffer_1IndexTypevivHardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint itype, 
  jint numIndexes, 
  jint usage, 
  jboolean useShadowBuffer
)
{
   // parameter conversions 
  Ogre::HardwareIndexBuffer::IndexType _cpp_itype = (Ogre::HardwareIndexBuffer::IndexType)itype;
  size_t _cpp_numIndexes = numIndexes;
  Ogre::HardwareBuffer::Usage _cpp_usage = (Ogre::HardwareBuffer::Usage)usage;
  bool _cpp_useShadowBuffer = useShadowBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareIndexBufferSharedPtr* _cpp_result = new Ogre::HardwareIndexBufferSharedPtr( _cpp_this->createIndexBuffer(_cpp_itype, _cpp_numIndexes, _cpp_usage, _cpp_useShadowBuffer) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual HardwareIndexBufferSharedPtr Ogre::HardwareBufferManager::createIndexBuffer */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createRenderToVertexBuffer()
 * Type:       pure virtual method
 * Definition: virtual RenderToVertexBufferSharedPtr Ogre::HardwareBufferManager::createRenderToVertexBuffer
 * Signature:  ()Ogre_RenderToVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createRenderToVertexBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderToVertexBufferSharedPtr* _cpp_result = new Ogre::RenderToVertexBufferSharedPtr( _cpp_this->createRenderToVertexBuffer() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderToVertexBufferSharedPtr Ogre::HardwareBufferManager::createRenderToVertexBuffer */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createVertexDeclaration()
 * Type:       virtual method
 * Definition: virtual VertexDeclaration* Ogre::HardwareBufferManager::createVertexDeclaration
 * Signature:  ()Ogre_VertexDeclaration
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createVertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexDeclaration* _cpp_result = _cpp_this->createVertexDeclaration() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual VertexDeclaration* Ogre::HardwareBufferManager::createVertexDeclaration */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     destroyVertexDeclaration()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::destroyVertexDeclaration
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1destroyVertexDeclaration_1_1VertexDeclarationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong decl
)
{
   // parameter conversions 
  Ogre::VertexDeclaration* _cpp_decl = reinterpret_cast< Ogre::VertexDeclaration* >(decl); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyVertexDeclaration(_cpp_decl);
} /* virtual void Ogre::HardwareBufferManager::destroyVertexDeclaration */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createVertexBufferBinding()
 * Type:       virtual method
 * Definition: virtual VertexBufferBinding* Ogre::HardwareBufferManager::createVertexBufferBinding
 * Signature:  ()Ogre_VertexBufferBinding
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createVertexBufferBinding (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexBufferBinding* _cpp_result = _cpp_this->createVertexBufferBinding() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual VertexBufferBinding* Ogre::HardwareBufferManager::createVertexBufferBinding */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     destroyVertexBufferBinding()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::destroyVertexBufferBinding
 * Signature:  (Ogre_VertexBufferBinding)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1destroyVertexBufferBinding_1_1VertexBufferBindingp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong binding
)
{
   // parameter conversions 
  Ogre::VertexBufferBinding* _cpp_binding = reinterpret_cast< Ogre::VertexBufferBinding* >(binding); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyVertexBufferBinding(_cpp_binding);
} /* virtual void Ogre::HardwareBufferManager::destroyVertexBufferBinding */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     registerVertexBufferSourceAndCopy()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::registerVertexBufferSourceAndCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrOgre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1registerVertexBufferSourceAndCopy_1_1HardwareVertexBufferSharedPtrRHardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer, 
  jlong copy
)
{
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_sourceBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(sourceBuffer);
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_copy = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(copy); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->registerVertexBufferSourceAndCopy(*_cpp_sourceBuffer, *_cpp_copy);
} /* virtual void Ogre::HardwareBufferManager::registerVertexBufferSourceAndCopy */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     allocateVertexBufferCopy()
 * Type:       virtual method
 * Definition: virtual HardwareVertexBufferSharedPtr Ogre::HardwareBufferManager::allocateVertexBufferCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrOgre_HardwareBufferManager_BufferLicenseTypeOgre_HardwareBufferLicenseeZ)Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1allocateVertexBufferCopy_1_1HardwareVertexBufferSharedPtrRBufferLicenseTypevHardwareBufferLicenseepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer, 
  jint licenseType, 
  jlong licensee, 
  jboolean copyData
)
{
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_sourceBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(sourceBuffer);
  Ogre::HardwareBufferManager::BufferLicenseType _cpp_licenseType = (Ogre::HardwareBufferManager::BufferLicenseType)licenseType;
  Ogre::HardwareBufferLicensee* _cpp_licensee = reinterpret_cast< Ogre::HardwareBufferLicensee* >(licensee);
  bool _cpp_copyData = copyData ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareVertexBufferSharedPtr* _cpp_result = new Ogre::HardwareVertexBufferSharedPtr( _cpp_this->allocateVertexBufferCopy(*_cpp_sourceBuffer, _cpp_licenseType, _cpp_licensee, _cpp_copyData) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual HardwareVertexBufferSharedPtr Ogre::HardwareBufferManager::allocateVertexBufferCopy */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     releaseVertexBufferCopy()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::releaseVertexBufferCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1releaseVertexBufferCopy_1_1HardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bufferCopy
)
{
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_bufferCopy = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(bufferCopy); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->releaseVertexBufferCopy(*_cpp_bufferCopy);
} /* virtual void Ogre::HardwareBufferManager::releaseVertexBufferCopy */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     touchVertexBufferCopy()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::touchVertexBufferCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1touchVertexBufferCopy_1_1HardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bufferCopy
)
{
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_bufferCopy = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(bufferCopy); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->touchVertexBufferCopy(*_cpp_bufferCopy);
} /* virtual void Ogre::HardwareBufferManager::touchVertexBufferCopy */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _freeUnusedBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_freeUnusedBufferCopies
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1freeUnusedBufferCopies (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_freeUnusedBufferCopies();
} /* virtual void Ogre::HardwareBufferManager::_freeUnusedBufferCopies */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _releaseBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_releaseBufferCopies
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1releaseBufferCopies_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean forceFreeUnused
)
{
   // parameter conversions 
  bool _cpp_forceFreeUnused = forceFreeUnused ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_releaseBufferCopies(_cpp_forceFreeUnused);
} /* virtual void Ogre::HardwareBufferManager::_releaseBufferCopies */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _forceReleaseBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_forceReleaseBufferCopies
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1forceReleaseBufferCopies_1_1HardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer
)
{
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_sourceBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(sourceBuffer); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_forceReleaseBufferCopies(*_cpp_sourceBuffer);
} /* virtual void Ogre::HardwareBufferManager::_forceReleaseBufferCopies */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _forceReleaseBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_forceReleaseBufferCopies
 * Signature:  (Ogre_HardwareVertexBuffer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1forceReleaseBufferCopies_1_1HardwareVertexBufferp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer
)
{
   // parameter conversions 
  Ogre::HardwareVertexBuffer* _cpp_sourceBuffer = reinterpret_cast< Ogre::HardwareVertexBuffer* >(sourceBuffer); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_forceReleaseBufferCopies(_cpp_sourceBuffer);
} /* virtual void Ogre::HardwareBufferManager::_forceReleaseBufferCopies */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _notifyVertexBufferDestroyed()
 * Type:       non-virtual method
 * Definition: void Ogre::HardwareBufferManager::_notifyVertexBufferDestroyed
 * Signature:  (Ogre_HardwareVertexBuffer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1notifyVertexBufferDestroyed_1_1HardwareVertexBufferp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong buf
)
{
   // parameter conversions 
  Ogre::HardwareVertexBuffer* _cpp_buf = reinterpret_cast< Ogre::HardwareVertexBuffer* >(buf); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyVertexBufferDestroyed(_cpp_buf);
} /* void Ogre::HardwareBufferManager::_notifyVertexBufferDestroyed */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _notifyIndexBufferDestroyed()
 * Type:       non-virtual method
 * Definition: void Ogre::HardwareBufferManager::_notifyIndexBufferDestroyed
 * Signature:  (Ogre_HardwareIndexBuffer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1notifyIndexBufferDestroyed_1_1HardwareIndexBufferp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong buf
)
{
   // parameter conversions 
  Ogre::HardwareIndexBuffer* _cpp_buf = reinterpret_cast< Ogre::HardwareIndexBuffer* >(buf); 
   
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyIndexBufferDestroyed(_cpp_buf);
} /* void Ogre::HardwareBufferManager::_notifyIndexBufferDestroyed */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static HardwareBufferManager& Ogre::HardwareBufferManager::getSingleton
 * Signature:  ()Ogre_HardwareBufferManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::HardwareBufferManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::HardwareBufferManager* _cpp_result = & Ogre::HardwareBufferManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static HardwareBufferManager& Ogre::HardwareBufferManager::getSingleton */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static HardwareBufferManager* Ogre::HardwareBufferManager::getSingletonPtr
 * Signature:  ()Ogre_HardwareBufferManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::HardwareBufferManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::HardwareBufferManager* _cpp_result = Ogre::HardwareBufferManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static HardwareBufferManager* Ogre::HardwareBufferManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::HardwareBufferManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::HardwareBufferManager 
   // cast pointer to C++ object 
   Ogre::HardwareBufferManager* _cpp_this = reinterpret_cast<Ogre::HardwareBufferManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::HardwareBufferManager::__delete */
