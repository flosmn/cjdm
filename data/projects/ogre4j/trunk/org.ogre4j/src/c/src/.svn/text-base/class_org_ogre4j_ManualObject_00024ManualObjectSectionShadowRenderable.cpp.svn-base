///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable.h"

// import header files of original library
#include <OgreManualObject.h>



/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     ManualObjectSectionShadowRenderable()
 * Type:       constructor
 * Definition: Ogre::ManualObject::ManualObjectSectionShadowRenderable::ManualObjectSectionShadowRenderable
 * Signature:  (Ogre_ManualObjectOgre_HardwareIndexBufferSharedPtrOgre_VertexDataZZ)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1_1createManualObjectSectionShadowRenderable_1_1ManualObjectpHardwareIndexBufferSharedPtrpVertexDataPbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jlong indexBuffer, 
  jlong vertexData, 
  jboolean createSeparateLightCap, 
  jboolean isLightCap
)
{
   // constructor of class Ogre::ManualObject::ManualObjectSectionShadowRenderable 
   
   // parameter conversions 
  Ogre::ManualObject* _cpp_parent = reinterpret_cast< Ogre::ManualObject* >(parent);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  const Ogre::VertexData* _cpp_vertexData = reinterpret_cast< const Ogre::VertexData* >(vertexData);
  bool _cpp_createSeparateLightCap = createSeparateLightCap ? true : false;
  bool _cpp_isLightCap = isLightCap ? true : false; 
   
   // create new instance of class Ogre::ManualObject::ManualObjectSectionShadowRenderable 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = new Ogre::ManualObject::ManualObjectSectionShadowRenderable(_cpp_parent, _cpp_indexBuffer, _cpp_vertexData, _cpp_createSeparateLightCap, _cpp_isLightCap); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ManualObject::ManualObjectSectionShadowRenderable::ManualObjectSectionShadowRenderable */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: void Ogre::ManualObject::ManualObjectSectionShadowRenderable::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_xform = reinterpret_cast< Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getWorldTransforms(_cpp_xform);
} /* void Ogre::ManualObject::ManualObjectSectionShadowRenderable::getWorldTransforms */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getPositionBuffer()
 * Type:       non-virtual method
 * Definition: HardwareVertexBufferSharedPtr Ogre::ManualObject::ManualObjectSectionShadowRenderable::getPositionBuffer
 * Signature:  ()Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getPositionBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareVertexBufferSharedPtr* _cpp_result = new Ogre::HardwareVertexBufferSharedPtr( _cpp_this->getPositionBuffer() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* HardwareVertexBufferSharedPtr Ogre::ManualObject::ManualObjectSectionShadowRenderable::getPositionBuffer */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getWBuffer()
 * Type:       non-virtual method
 * Definition: HardwareVertexBufferSharedPtr Ogre::ManualObject::ManualObjectSectionShadowRenderable::getWBuffer
 * Signature:  ()Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getWBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareVertexBufferSharedPtr* _cpp_result = new Ogre::HardwareVertexBufferSharedPtr( _cpp_this->getWBuffer() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* HardwareVertexBufferSharedPtr Ogre::ManualObject::ManualObjectSectionShadowRenderable::getWBuffer */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     setMaterial()
 * Type:       non-virtual method
 * Definition: void Ogre::ShadowRenderable::setMaterial
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1setMaterial_1_1MaterialPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mat
)
{
   // parameter conversions 
  const Ogre::MaterialPtr* _cpp_mat = reinterpret_cast< const Ogre::MaterialPtr* >(mat); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterial(*_cpp_mat);
} /* void Ogre::ShadowRenderable::setMaterial */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: const MaterialPtr& Ogre::ShadowRenderable::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = & _cpp_this->getMaterial() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MaterialPtr& Ogre::ShadowRenderable::getMaterial */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: void Ogre::ShadowRenderable::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_op = reinterpret_cast< Ogre::RenderOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getRenderOperation(*_cpp_op);
} /* void Ogre::ShadowRenderable::getRenderOperation */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getRenderOperationForUpdate()
 * Type:       non-virtual method
 * Definition: RenderOperation* Ogre::ShadowRenderable::getRenderOperationForUpdate
 * Signature:  ()Ogre_RenderOperation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getRenderOperationForUpdate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderOperation* _cpp_result = _cpp_this->getRenderOperationForUpdate() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderOperation* Ogre::ShadowRenderable::getRenderOperationForUpdate */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::ShadowRenderable::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong a1
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_a1 = reinterpret_cast< const Ogre::Camera* >(a1); 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredViewDepth(_cpp_a1) ; 
   return _cpp_result;
} /* Real Ogre::ShadowRenderable::getSquaredViewDepth */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::ShadowRenderable::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->getLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LightList& Ogre::ShadowRenderable::getLights */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     isLightCapSeparate()
 * Type:       non-virtual method
 * Definition: bool Ogre::ShadowRenderable::isLightCapSeparate
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1isLightCapSeparate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLightCapSeparate() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ShadowRenderable::isLightCapSeparate */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getLightCapRenderable()
 * Type:       non-virtual method
 * Definition: ShadowRenderable* Ogre::ShadowRenderable::getLightCapRenderable
 * Signature:  ()Ogre_ShadowRenderable
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getLightCapRenderable (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowRenderable* _cpp_result = _cpp_this->getLightCapRenderable() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderable* Ogre::ShadowRenderable::getLightCapRenderable */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ShadowRenderable::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ShadowRenderable::isVisible */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: virtual Technique* Ogre::Renderable::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Technique* Ogre::Renderable::getTechnique */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->preRender(_cpp_sm, _cpp_rsys) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::preRender */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postRender(_cpp_sm, _cpp_rsys);
} /* virtual void Ogre::Renderable::postRender */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumWorldTransforms() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Renderable::getNumWorldTransforms */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
)
{
   // parameter conversions 
  bool _cpp_useIdentityProjection = useIdentityProjection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityProjection(_cpp_useIdentityProjection);
} /* void Ogre::Renderable::setUseIdentityProjection */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityProjection() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityProjection */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
)
{
   // parameter conversions 
  bool _cpp_useIdentityView = useIdentityView ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityView(_cpp_useIdentityView);
} /* void Ogre::Renderable::setUseIdentityView */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityView() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityView */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastsShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getCastsShadows */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  size_t _cpp_index = index;
  const Ogre::Vector4* _cpp_value = reinterpret_cast< const Ogre::Vector4* >(value); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomParameter(_cpp_index, *_cpp_value);
} /* void Ogre::Renderable::setCustomParameter */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCustomParameter(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4& Ogre::Renderable::getCustomParameter */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
)
{
   // parameter conversions 
  const Ogre::GpuProgramParameters::AutoConstantEntry* _cpp_constantEntry = reinterpret_cast< const Ogre::GpuProgramParameters::AutoConstantEntry* >(constantEntry);
  Ogre::GpuProgramParameters* _cpp_params = reinterpret_cast< Ogre::GpuProgramParameters* >(params); 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateCustomGpuParameter(*_cpp_constantEntry, _cpp_params);
} /* virtual void Ogre::Renderable::_updateCustomGpuParameter */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
)
{
   // parameter conversions 
  bool _cpp_override = override ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_override);
} /* virtual void Ogre::Renderable::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPolygonModeOverrideable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::Renderable::setUserAny */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::Renderable::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::Renderable::getUserAny */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable::RenderSystemData* _cpp_result = _cpp_this->getRenderSystemData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderSystemData* Ogre::Renderable::getRenderSystemData */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  Ogre::Renderable::RenderSystemData* _cpp_val = reinterpret_cast< Ogre::Renderable::RenderSystemData* >(val); 
   
   // cast pointer to C++ object 
   const Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<const Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderSystemData(_cpp_val);
} /* virtual void Ogre::Renderable::setRenderSystemData */


/*
 * Class:      org.ogre4j.ManualObject.00024ManualObjectSectionShadowRenderable
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ManualObject::ManualObjectSectionShadowRenderable::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ManualObject_00024ManualObjectSectionShadowRenderable__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ManualObject::ManualObjectSectionShadowRenderable 
   // cast pointer to C++ object 
   Ogre::ManualObject::ManualObjectSectionShadowRenderable* _cpp_this = reinterpret_cast<Ogre::ManualObject::ManualObjectSectionShadowRenderable*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ManualObject::ManualObjectSectionShadowRenderable::__delete */
