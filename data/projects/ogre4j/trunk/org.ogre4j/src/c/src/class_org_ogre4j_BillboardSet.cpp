///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_BillboardSet.h"

// import header files of original library
#include <OgreBillboardSet.h>



/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     BillboardSet()
 * Type:       constructor
 * Definition: Ogre::BillboardSet::BillboardSet
 * Signature:  (std_stringIZ)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1_1createBillboardSet_1_1StringRIvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name, 
  jlong poolSize, 
  jboolean externalDataSource
)
{
   // constructor of class Ogre::BillboardSet 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned int _cpp_poolSize = poolSize;
  bool _cpp_externalDataSource = externalDataSource ? true : false; 
   
   // create new instance of class Ogre::BillboardSet 
   Ogre::BillboardSet* _cpp_this = new Ogre::BillboardSet(_cpp_name, _cpp_poolSize, _cpp_externalDataSource); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::BillboardSet::BillboardSet */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     createBillboard()
 * Type:       non-virtual method
 * Definition: Billboard* Ogre::BillboardSet::createBillboard
 * Signature:  (Ogre_Vector3Ogre_ColourValue)Ogre_Billboard
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1createBillboard_1_1Vector3RColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position, 
  jlong colour
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_position = reinterpret_cast< const Ogre::Vector3* >(position);
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Billboard* _cpp_result = _cpp_this->createBillboard(*_cpp_position, *_cpp_colour) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Billboard* Ogre::BillboardSet::createBillboard */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     createBillboard()
 * Type:       non-virtual method
 * Definition: Billboard* Ogre::BillboardSet::createBillboard
 * Signature:  (floatfloatfloatOgre_ColourValue)Ogre_Billboard
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1createBillboard_1_1RealvRealvRealvColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z, 
  jlong colour
)
{
   // parameter conversions 
  float _cpp_x = x;
  float _cpp_y = y;
  float _cpp_z = z;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Billboard* _cpp_result = _cpp_this->createBillboard(_cpp_x, _cpp_y, _cpp_z, *_cpp_colour) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Billboard* Ogre::BillboardSet::createBillboard */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getNumBillboards()
 * Type:       virtual method
 * Definition: virtual int Ogre::BillboardSet::getNumBillboards
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_BillboardSet__1getNumBillboards_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getNumBillboards() ; 
   return _cpp_result;
} /* virtual int Ogre::BillboardSet::getNumBillboards */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setAutoextend()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setAutoextend
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setAutoextend_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoextend
)
{
   // parameter conversions 
  bool _cpp_autoextend = autoextend ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAutoextend(_cpp_autoextend);
} /* virtual void Ogre::BillboardSet::setAutoextend */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getAutoextend()
 * Type:       virtual method
 * Definition: virtual bool Ogre::BillboardSet::getAutoextend
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getAutoextend_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getAutoextend() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::BillboardSet::getAutoextend */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setSortingEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setSortingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setSortingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean sortenable
)
{
   // parameter conversions 
  bool _cpp_sortenable = sortenable ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSortingEnabled(_cpp_sortenable);
} /* virtual void Ogre::BillboardSet::setSortingEnabled */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getSortingEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::BillboardSet::getSortingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getSortingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getSortingEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::BillboardSet::getSortingEnabled */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setPoolSize()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setPoolSize
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setPoolSize_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint size
)
{
   // parameter conversions 
  size_t _cpp_size = size; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPoolSize(_cpp_size);
} /* virtual void Ogre::BillboardSet::setPoolSize */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getPoolSize()
 * Type:       virtual method
 * Definition: virtual unsigned int Ogre::BillboardSet::getPoolSize
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getPoolSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getPoolSize() ; 
   return _cpp_result;
} /* virtual unsigned int Ogre::BillboardSet::getPoolSize */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     clear()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* virtual void Ogre::BillboardSet::clear */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getBillboard()
 * Type:       virtual method
 * Definition: virtual Billboard* Ogre::BillboardSet::getBillboard
 * Signature:  (I)Ogre_Billboard
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getBillboard_1_1Iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong index
)
{
   // parameter conversions 
  unsigned int _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Billboard* _cpp_result = _cpp_this->getBillboard(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Billboard* Ogre::BillboardSet::getBillboard */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     removeBillboard()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::removeBillboard
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1removeBillboard_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong index
)
{
   // parameter conversions 
  unsigned int _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeBillboard(_cpp_index);
} /* virtual void Ogre::BillboardSet::removeBillboard */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     removeBillboard()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::removeBillboard
 * Signature:  (Ogre_Billboard)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1removeBillboard_1_1Billboardp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBill
)
{
   // parameter conversions 
  Ogre::Billboard* _cpp_pBill = reinterpret_cast< Ogre::Billboard* >(pBill); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeBillboard(_cpp_pBill);
} /* virtual void Ogre::BillboardSet::removeBillboard */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setBillboardOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setBillboardOrigin
 * Signature:  (Ogre_BillboardOrigin)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setBillboardOrigin_1_1BillboardOriginv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint origin
)
{
   // parameter conversions 
  Ogre::BillboardOrigin _cpp_origin = (Ogre::BillboardOrigin)origin; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBillboardOrigin(_cpp_origin);
} /* virtual void Ogre::BillboardSet::setBillboardOrigin */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getBillboardOrigin()
 * Type:       virtual method
 * Definition: virtual BillboardOrigin Ogre::BillboardSet::getBillboardOrigin
 * Signature:  ()Ogre_BillboardOrigin
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_BillboardSet__1getBillboardOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardOrigin _cpp_result = _cpp_this->getBillboardOrigin() ; 
   return _cpp_result;
} /* virtual BillboardOrigin Ogre::BillboardSet::getBillboardOrigin */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setBillboardRotationType()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setBillboardRotationType
 * Signature:  (Ogre_BillboardRotationType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setBillboardRotationType_1_1BillboardRotationTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint rotationType
)
{
   // parameter conversions 
  Ogre::BillboardRotationType _cpp_rotationType = (Ogre::BillboardRotationType)rotationType; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBillboardRotationType(_cpp_rotationType);
} /* virtual void Ogre::BillboardSet::setBillboardRotationType */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getBillboardRotationType()
 * Type:       virtual method
 * Definition: virtual BillboardRotationType Ogre::BillboardSet::getBillboardRotationType
 * Signature:  ()Ogre_BillboardRotationType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_BillboardSet__1getBillboardRotationType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardRotationType _cpp_result = _cpp_this->getBillboardRotationType() ; 
   return _cpp_result;
} /* virtual BillboardRotationType Ogre::BillboardSet::getBillboardRotationType */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setDefaultDimensions()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setDefaultDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setDefaultDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
)
{
   // parameter conversions 
  float _cpp_width = width;
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultDimensions(_cpp_width, _cpp_height);
} /* virtual void Ogre::BillboardSet::setDefaultDimensions */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setDefaultWidth()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setDefaultWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setDefaultWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
)
{
   // parameter conversions 
  float _cpp_width = width; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultWidth(_cpp_width);
} /* virtual void Ogre::BillboardSet::setDefaultWidth */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getDefaultWidth()
 * Type:       virtual method
 * Definition: virtual Real Ogre::BillboardSet::getDefaultWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_BillboardSet__1getDefaultWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDefaultWidth() ; 
   return _cpp_result;
} /* virtual Real Ogre::BillboardSet::getDefaultWidth */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setDefaultHeight()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setDefaultHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setDefaultHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
)
{
   // parameter conversions 
  float _cpp_height = height; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultHeight(_cpp_height);
} /* virtual void Ogre::BillboardSet::setDefaultHeight */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getDefaultHeight()
 * Type:       virtual method
 * Definition: virtual Real Ogre::BillboardSet::getDefaultHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_BillboardSet__1getDefaultHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getDefaultHeight() ; 
   return _cpp_result;
} /* virtual Real Ogre::BillboardSet::getDefaultHeight */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setMaterialName()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialName(_cpp_name);
} /* virtual void Ogre::BillboardSet::setMaterialName */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getMaterialName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::BillboardSet::getMaterialName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_BillboardSet__1getMaterialName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMaterialName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::BillboardSet::getMaterialName */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _notifyCurrentCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* virtual void Ogre::BillboardSet::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     beginBillboards()
 * Type:       non-virtual method
 * Definition: void Ogre::BillboardSet::beginBillboards
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1beginBillboards_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numBillboards
)
{
   // parameter conversions 
  size_t _cpp_numBillboards = numBillboards; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->beginBillboards(_cpp_numBillboards);
} /* void Ogre::BillboardSet::beginBillboards */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     injectBillboard()
 * Type:       non-virtual method
 * Definition: void Ogre::BillboardSet::injectBillboard
 * Signature:  (Ogre_Billboard)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1injectBillboard_1_1BillboardR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bb
)
{
   // parameter conversions 
  const Ogre::Billboard* _cpp_bb = reinterpret_cast< const Ogre::Billboard* >(bb); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->injectBillboard(*_cpp_bb);
} /* void Ogre::BillboardSet::injectBillboard */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     endBillboards()
 * Type:       non-virtual method
 * Definition: void Ogre::BillboardSet::endBillboards
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1endBillboards (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->endBillboards();
} /* void Ogre::BillboardSet::endBillboards */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setBounds()
 * Type:       non-virtual method
 * Definition: void Ogre::BillboardSet::setBounds
 * Signature:  (Ogre_AxisAlignedBoxfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setBounds_1_1AxisAlignedBoxRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box, 
  jfloat radius
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_box = reinterpret_cast< const Ogre::AxisAlignedBox* >(box);
  float _cpp_radius = radius; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBounds(*_cpp_box, _cpp_radius);
} /* void Ogre::BillboardSet::setBounds */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::BillboardSet::getBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBoundingBox() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::BillboardSet::getBoundingBox */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getBoundingRadius()
 * Type:       virtual method
 * Definition: virtual Real Ogre::BillboardSet::getBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_BillboardSet__1getBoundingRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingRadius() ; 
   return _cpp_result;
} /* virtual Real Ogre::BillboardSet::getBoundingRadius */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* virtual void Ogre::BillboardSet::_updateRenderQueue */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: virtual const MaterialPtr& Ogre::BillboardSet::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = & _cpp_this->getMaterial() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const MaterialPtr& Ogre::BillboardSet::getMaterial */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_op = reinterpret_cast< Ogre::RenderOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getRenderOperation(*_cpp_op);
} /* virtual void Ogre::BillboardSet::getRenderOperation */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_xform = reinterpret_cast< Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getWorldTransforms(_cpp_xform);
} /* virtual void Ogre::BillboardSet::getWorldTransforms */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _notifyBillboardResized()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::_notifyBillboardResized
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1notifyBillboardResized (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyBillboardResized();
} /* virtual void Ogre::BillboardSet::_notifyBillboardResized */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _notifyBillboardRotated()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::_notifyBillboardRotated
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1notifyBillboardRotated (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyBillboardRotated();
} /* virtual void Ogre::BillboardSet::_notifyBillboardRotated */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getCullIndividually()
 * Type:       virtual method
 * Definition: virtual bool Ogre::BillboardSet::getCullIndividually
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getCullIndividually_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCullIndividually() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::BillboardSet::getCullIndividually */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setCullIndividually()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setCullIndividually
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setCullIndividually_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean cullIndividual
)
{
   // parameter conversions 
  bool _cpp_cullIndividual = cullIndividual ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCullIndividually(_cpp_cullIndividual);
} /* virtual void Ogre::BillboardSet::setCullIndividually */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setBillboardType()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setBillboardType
 * Signature:  (Ogre_BillboardType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setBillboardType_1_1BillboardTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bbt
)
{
   // parameter conversions 
  Ogre::BillboardType _cpp_bbt = (Ogre::BillboardType)bbt; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBillboardType(_cpp_bbt);
} /* virtual void Ogre::BillboardSet::setBillboardType */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getBillboardType()
 * Type:       virtual method
 * Definition: virtual BillboardType Ogre::BillboardSet::getBillboardType
 * Signature:  ()Ogre_BillboardType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_BillboardSet__1getBillboardType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::BillboardType _cpp_result = _cpp_this->getBillboardType() ; 
   return _cpp_result;
} /* virtual BillboardType Ogre::BillboardSet::getBillboardType */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setCommonDirection()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setCommonDirection
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setCommonDirection_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCommonDirection(*_cpp_vec);
} /* virtual void Ogre::BillboardSet::setCommonDirection */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getCommonDirection()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::BillboardSet::getCommonDirection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getCommonDirection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getCommonDirection() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::BillboardSet::getCommonDirection */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setCommonUpVector()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setCommonUpVector
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setCommonUpVector_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCommonUpVector(*_cpp_vec);
} /* virtual void Ogre::BillboardSet::setCommonUpVector */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getCommonUpVector()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::BillboardSet::getCommonUpVector
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getCommonUpVector_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getCommonUpVector() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::BillboardSet::getCommonUpVector */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setUseAccurateFacing()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setUseAccurateFacing
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setUseAccurateFacing_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean acc
)
{
   // parameter conversions 
  bool _cpp_acc = acc ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseAccurateFacing(_cpp_acc);
} /* virtual void Ogre::BillboardSet::setUseAccurateFacing */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getUseAccurateFacing()
 * Type:       virtual method
 * Definition: virtual bool Ogre::BillboardSet::getUseAccurateFacing
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getUseAccurateFacing_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseAccurateFacing() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::BillboardSet::getUseAccurateFacing */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getMovableType()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::BillboardSet::getMovableType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_BillboardSet__1getMovableType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMovableType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::BillboardSet::getMovableType */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::BillboardSet::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_BillboardSet__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredViewDepth(_cpp_cam) ; 
   return _cpp_result;
} /* Real Ogre::BillboardSet::getSquaredViewDepth */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _updateBounds()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::_updateBounds
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1updateBounds (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateBounds();
} /* virtual void Ogre::BillboardSet::_updateBounds */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::BillboardSet::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->getLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LightList& Ogre::BillboardSet::getLights */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     visitRenderables()
 * Type:       virtual method
 * Definition: void Ogre::BillboardSet::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::BillboardSet::visitRenderables */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _sortBillboards()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::_sortBillboards
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1sortBillboards_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_sortBillboards(_cpp_cam);
} /* virtual void Ogre::BillboardSet::_sortBillboards */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _getSortMode()
 * Type:       virtual method
 * Definition: virtual SortMode Ogre::BillboardSet::_getSortMode
 * Signature:  ()Ogre_SortMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_BillboardSet__1_1getSortMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SortMode _cpp_result = _cpp_this->_getSortMode() ; 
   return _cpp_result;
} /* virtual SortMode Ogre::BillboardSet::_getSortMode */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setBillboardsInWorldSpace()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setBillboardsInWorldSpace
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setBillboardsInWorldSpace_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean ws
)
{
   // parameter conversions 
  bool _cpp_ws = ws ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBillboardsInWorldSpace(_cpp_ws);
} /* virtual void Ogre::BillboardSet::setBillboardsInWorldSpace */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setTextureCoords()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setTextureCoords
 * Signature:  (Ogre_FloatRectunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setTextureCoords_1_1Ogre_1FloatRectPuint16v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong coords, 
  jint numCoords
)
{
   // parameter conversions 
  const Ogre::FloatRect* _cpp_coords = reinterpret_cast< const Ogre::FloatRect* >(coords);
  unsigned short _cpp_numCoords = numCoords; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureCoords(_cpp_coords, _cpp_numCoords);
} /* virtual void Ogre::BillboardSet::setTextureCoords */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setTextureStacksAndSlices()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setTextureStacksAndSlices
 * Signature:  (unsigned_charunsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setTextureStacksAndSlices_1_1ucharvucharv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort stacks, 
  jshort slices
)
{
   // parameter conversions 
  unsigned char _cpp_stacks = stacks;
  unsigned char _cpp_slices = slices; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureStacksAndSlices(_cpp_stacks, _cpp_slices);
} /* virtual void Ogre::BillboardSet::setTextureStacksAndSlices */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getTextureCoords()
 * Type:       virtual method
 * Definition: virtual Ogre::FloatRect const* Ogre::BillboardSet::getTextureCoords
 * Signature:  (unsigned_short)Ogre_FloatRect
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getTextureCoords_1_1uint16p (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong oNumCoords
)
{
   // parameter conversions 
  unsigned short* _cpp_oNumCoords = reinterpret_cast<unsigned short*>(oNumCoords); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FloatRect* _cpp_result = _cpp_this->getTextureCoords(_cpp_oNumCoords) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Ogre::FloatRect const* Ogre::BillboardSet::getTextureCoords */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setPointRenderingEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::BillboardSet::setPointRenderingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setPointRenderingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPointRenderingEnabled(_cpp_enabled);
} /* virtual void Ogre::BillboardSet::setPointRenderingEnabled */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     isPointRenderingEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::BillboardSet::isPointRenderingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1isPointRenderingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPointRenderingEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::BillboardSet::isPointRenderingEnabled */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getTypeFlags()
 * Type:       virtual method
 * Definition: uint32 Ogre::BillboardSet::getTypeFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getTypeFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTypeFlags() ; 
   return _cpp_result;
} /* uint32 Ogre::BillboardSet::getTypeFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _notifyCreator()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCreator
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1notifyCreator_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCreator(_cpp_fact);
} /* virtual void Ogre::MovableObject::_notifyCreator */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _getCreator()
 * Type:       virtual method
 * Definition: virtual MovableObjectFactory* Ogre::MovableObject::_getCreator
 * Signature:  ()Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1_1getCreator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->_getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectFactory* Ogre::MovableObject::_getCreator */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _notifyManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1notifyManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_man = reinterpret_cast< Ogre::SceneManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyManager(_cpp_man);
} /* virtual void Ogre::MovableObject::_notifyManager */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _getManager()
 * Type:       virtual method
 * Definition: virtual SceneManager* Ogre::MovableObject::_getManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1_1getManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneManager* Ogre::MovableObject::_getManager */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::MovableObject::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_BillboardSet__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::MovableObject::getName */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getParentNode()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::MovableObject::getParentNode
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getParentNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParentNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::MovableObject::getParentNode */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getParentSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::MovableObject::getParentSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getParentSceneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getParentSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::MovableObject::getParentSceneNode */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _notifyAttached()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* virtual void Ogre::MovableObject::_notifyAttached */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     isAttached()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isAttached
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1isAttached_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAttached() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isAttached */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     detatchFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::detatchFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1detatchFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detatchFromParent();
} /* virtual void Ogre::MovableObject::detatchFromParent */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     isInScene()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isInScene
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1isInScene_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInScene() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isInScene */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _notifyMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyMoved
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1notifyMoved (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyMoved();
} /* virtual void Ogre::MovableObject::_notifyMoved */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getWorldBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox
 * Signature:  (Z)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getWorldBoundingBox_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getWorldBoundingBox(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getWorldBoundingSphere()
 * Type:       virtual method
 * Definition: virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere
 * Signature:  (Z)Ogre_Sphere
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getWorldBoundingSphere_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Sphere* _cpp_result = & _cpp_this->getWorldBoundingSphere(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* virtual void Ogre::MovableObject::setVisible */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::getVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::getVisible */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isVisible */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::MovableObject::setRenderingDistance */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::MovableObject::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_BillboardSet__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::MovableObject::getRenderingDistance */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setUserObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserObject
 * Signature:  (Ogre_UserDefinedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setUserObject_1_1UserDefinedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::UserDefinedObject* _cpp_obj = reinterpret_cast< Ogre::UserDefinedObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserObject(_cpp_obj);
} /* virtual void Ogre::MovableObject::setUserObject */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getUserObject()
 * Type:       virtual method
 * Definition: virtual UserDefinedObject* Ogre::MovableObject::getUserObject
 * Signature:  ()Ogre_UserDefinedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getUserObject (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UserDefinedObject* _cpp_result = _cpp_this->getUserObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual UserDefinedObject* Ogre::MovableObject::getUserObject */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::MovableObject::setUserAny(*_cpp_anything);
} /* virtual void Ogre::MovableObject::setUserAny */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::MovableObject::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->Ogre::MovableObject::getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::MovableObject::getUserAny */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* virtual void Ogre::MovableObject::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::MovableObject::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_BillboardSet__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::MovableObject::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _getParentNodeFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1_1getParentNodeFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getParentNodeFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setQueryFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     addQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1addQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addQueryFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     removeQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeQueryFlags
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1removeQueryFlags_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeQueryFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getQueryFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getQueryFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getQueryFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setVisibilityFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     addVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1addVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addVisibilityFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     removeVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1removeVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeVisibilityFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getVisibilityFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getVisibilityFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setListener
 * Signature:  (Ogre_MovableObject_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MovableObject::Listener* _cpp_listener = reinterpret_cast< Ogre::MovableObject::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::MovableObject::setListener */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::MovableObject::getListener
 * Signature:  ()Ogre_MovableObject_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::MovableObject::getListener */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     queryLights()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::MovableObject::queryLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1queryLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->queryLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::MovableObject::queryLights */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _getLightList()
 * Type:       virtual method
 * Definition: virtual LightList* Ogre::MovableObject::_getLightList
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1_1getLightList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->_getLightList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual LightList* Ogre::MovableObject::_getLightList */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getEdgeList()
 * Type:       virtual method
 * Definition: EdgeData* Ogre::MovableObject::getEdgeList
 * Signature:  ()Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::MovableObject::getEdgeList */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     hasEdgeList()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::hasEdgeList
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1hasEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEdgeList() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::hasEdgeList */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getShadowVolumeRenderableIterator()
 * Type:       virtual method
 * Definition: ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator
 * Signature:  (Ogre_ShadowTechniqueOgre_LightOgre_HardwareIndexBufferSharedPtrZfloatJ)Ogre_ShadowCaster_ShadowRenderableListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getShadowVolumeRenderableIterator_1_1ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowTechnique, 
  jlong light, 
  jlong indexBuffer, 
  jboolean extrudeVertices, 
  jfloat extrusionDist, 
  jlong flags
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_shadowTechnique = (Ogre::ShadowTechnique)shadowTechnique;
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  bool _cpp_extrudeVertices = extrudeVertices ? true : false;
  float _cpp_extrusionDist = extrusionDist;
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCaster::ShadowRenderableListIterator* _cpp_result = new Ogre::ShadowCaster::ShadowRenderableListIterator( _cpp_this->getShadowVolumeRenderableIterator(_cpp_shadowTechnique, _cpp_light, _cpp_indexBuffer, _cpp_extrudeVertices, _cpp_extrusionDist, _cpp_flags) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getLightCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getLightCapBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getLightCapBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getDarkCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds
 * Signature:  (Ogre_Lightfloat)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getDarkCapBounds_1_1LightRRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jfloat dirLightExtrusionDist
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  float _cpp_dirLightExtrusionDist = dirLightExtrusionDist; 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getDarkCapBounds(*_cpp_light, _cpp_dirLightExtrusionDist) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setCastShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::MovableObject::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_enabled);
} /* void Ogre::MovableObject::setCastShadows */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getCastShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::getCastShadows */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getPointExtrusionDistance()
 * Type:       virtual method
 * Definition: Real Ogre::MovableObject::getPointExtrusionDistance
 * Signature:  (Ogre_Light)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_BillboardSet__1getPointExtrusionDistance_1_1LightP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_l = reinterpret_cast< const Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointExtrusionDistance(_cpp_l) ; 
   return _cpp_result;
} /* Real Ogre::MovableObject::getPointExtrusionDistance */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setDebugDisplayEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setDebugDisplayEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugDisplayEnabled(_cpp_enabled);
} /* virtual void Ogre::MovableObject::setDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     isDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isDebugDisplayEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1isDebugDisplayEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugDisplayEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setDefaultQueryFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setDefaultQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::BillboardSet without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::BillboardSet::setDefaultQueryFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultQueryFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getDefaultQueryFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getDefaultQueryFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::BillboardSet with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::BillboardSet::getDefaultQueryFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultQueryFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setDefaultVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::BillboardSet without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::BillboardSet::setDefaultVisibilityFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getDefaultVisibilityFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::BillboardSet with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::BillboardSet::getDefaultVisibilityFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     extrudeVertices()
 * Type:       static method
 * Definition: static void Ogre::ShadowCaster::extrudeVertices
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrIOgre_Vector4float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1extrudeVertices_1_1HardwareVertexBufferSharedPtrRivVector4RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexBuffer, 
  jint originalVertexCount, 
  jlong lightPos, 
  jfloat extrudeDist
)
{
   // static method of class Ogre::BillboardSet without return value 
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_vertexBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(vertexBuffer);
  size_t _cpp_originalVertexCount = originalVertexCount;
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist; 
   
   // call library method 
   Ogre::BillboardSet::extrudeVertices(*_cpp_vertexBuffer, _cpp_originalVertexCount, *_cpp_lightPos, _cpp_extrudeDist);
} /* static void Ogre::ShadowCaster::extrudeVertices */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getAnimableValueNames()
 * Type:       non-virtual method
 * Definition: const StringVector& Ogre::AnimableObject::getAnimableValueNames
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getAnimableValueNames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getAnimableValueNames() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::AnimableObject::getAnimableValueNames */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     createAnimableValue()
 * Type:       virtual method
 * Definition: virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue
 * Signature:  (std_string)Ogre_AnimableValuePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1createAnimableValue_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring valueName
)
{
   // parameter conversions 
  std::string _cpp_valueName = ""; org::xbig::jni::to_stdstring(_jni_env_, valueName, _cpp_valueName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimableValuePtr* _cpp_result = new Ogre::AnimableValuePtr( _cpp_this->createAnimableValue(_cpp_valueName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: virtual Technique* Ogre::Renderable::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Technique* Ogre::Renderable::getTechnique */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->preRender(_cpp_sm, _cpp_rsys) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::preRender */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postRender(_cpp_sm, _cpp_rsys);
} /* virtual void Ogre::Renderable::postRender */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_BillboardSet__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumWorldTransforms() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Renderable::getNumWorldTransforms */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
)
{
   // parameter conversions 
  bool _cpp_useIdentityProjection = useIdentityProjection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityProjection(_cpp_useIdentityProjection);
} /* void Ogre::Renderable::setUseIdentityProjection */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityProjection() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityProjection */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
)
{
   // parameter conversions 
  bool _cpp_useIdentityView = useIdentityView ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityView(_cpp_useIdentityView);
} /* void Ogre::Renderable::setUseIdentityView */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityView() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityView */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastsShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getCastsShadows */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  size_t _cpp_index = index;
  const Ogre::Vector4* _cpp_value = reinterpret_cast< const Ogre::Vector4* >(value); 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomParameter(_cpp_index, *_cpp_value);
} /* void Ogre::Renderable::setCustomParameter */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCustomParameter(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4& Ogre::Renderable::getCustomParameter */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
)
{
   // parameter conversions 
  const Ogre::GpuProgramParameters::AutoConstantEntry* _cpp_constantEntry = reinterpret_cast< const Ogre::GpuProgramParameters::AutoConstantEntry* >(constantEntry);
  Ogre::GpuProgramParameters* _cpp_params = reinterpret_cast< Ogre::GpuProgramParameters* >(params); 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateCustomGpuParameter(*_cpp_constantEntry, _cpp_params);
} /* virtual void Ogre::Renderable::_updateCustomGpuParameter */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
)
{
   // parameter conversions 
  bool _cpp_override = override ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_override);
} /* virtual void Ogre::Renderable::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_BillboardSet__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPolygonModeOverrideable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_BillboardSet__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable::RenderSystemData* _cpp_result = _cpp_this->getRenderSystemData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderSystemData* Ogre::Renderable::getRenderSystemData */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  Ogre::Renderable::RenderSystemData* _cpp_val = reinterpret_cast< Ogre::Renderable::RenderSystemData* >(val); 
   
   // cast pointer to C++ object 
   const Ogre::BillboardSet* _cpp_this = reinterpret_cast<const Ogre::BillboardSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderSystemData(_cpp_val);
} /* virtual void Ogre::Renderable::setRenderSystemData */


/*
 * Class:      org.ogre4j.BillboardSet
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::BillboardSet::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_BillboardSet__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::BillboardSet 
   // cast pointer to C++ object 
   Ogre::BillboardSet* _cpp_this = reinterpret_cast<Ogre::BillboardSet*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::BillboardSet::__delete */
