///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_UnifiedHighLevelGpuProgram.h"

// import header files of original library
#include <OgreUnifiedHighLevelGpuProgram.h>



/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     UnifiedHighLevelGpuProgram()
 * Type:       constructor
 * Definition: Ogre::UnifiedHighLevelGpuProgram::UnifiedHighLevelGpuProgram
 * Signature:  (Ogre_ResourceManagerstd_stringunsigned_longstd_stringZOgre_ManualResourceLoader)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1createUnifiedHighLevelGpuProgram_1_1ResourceManagerpStringRResourceHandlevStringRbvManualResourceLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong creator, 
  jstring name, 
  jlong handle, 
  jstring group, 
  jboolean isManual, 
  jlong loader
)
{
   // constructor of class Ogre::UnifiedHighLevelGpuProgram 
   
   // parameter conversions 
  Ogre::ResourceManager* _cpp_creator = reinterpret_cast< Ogre::ResourceManager* >(creator);
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned long _cpp_handle = handle;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader); 
   
   // create new instance of class Ogre::UnifiedHighLevelGpuProgram 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = new Ogre::UnifiedHighLevelGpuProgram(_cpp_creator, _cpp_name, _cpp_handle, _cpp_group, _cpp_isManual, _cpp_loader); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::UnifiedHighLevelGpuProgram::UnifiedHighLevelGpuProgram */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     addDelegateProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::addDelegateProgram
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1addDelegateProgram_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addDelegateProgram(_cpp_name);
} /* void Ogre::UnifiedHighLevelGpuProgram::addDelegateProgram */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     clearDelegatePrograms()
 * Type:       non-virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::clearDelegatePrograms
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1clearDelegatePrograms (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearDelegatePrograms();
} /* void Ogre::UnifiedHighLevelGpuProgram::clearDelegatePrograms */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     _getDelegate()
 * Type:       non-virtual method
 * Definition: const HighLevelGpuProgramPtr& Ogre::UnifiedHighLevelGpuProgram::_getDelegate
 * Signature:  ()Ogre_HighLevelGpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1getDelegate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HighLevelGpuProgramPtr* _cpp_result = & _cpp_this->_getDelegate() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const HighLevelGpuProgramPtr& Ogre::UnifiedHighLevelGpuProgram::_getDelegate */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getLanguage()
 * Type:       virtual method
 * Definition: const String& Ogre::UnifiedHighLevelGpuProgram::getLanguage
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getLanguage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getLanguage() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::UnifiedHighLevelGpuProgram::getLanguage */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     createParameters()
 * Type:       virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::UnifiedHighLevelGpuProgram::createParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1createParameters (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->createParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::UnifiedHighLevelGpuProgram::createParameters */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     _getBindingDelegate()
 * Type:       virtual method
 * Definition: GpuProgram* Ogre::UnifiedHighLevelGpuProgram::_getBindingDelegate
 * Signature:  ()Ogre_GpuProgram
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1getBindingDelegate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgram* _cpp_result = _cpp_this->_getBindingDelegate() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgram* Ogre::UnifiedHighLevelGpuProgram::_getBindingDelegate */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isSupported()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isSupported
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isSupported_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isSupported() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isSupported */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isSkeletalAnimationIncluded()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isSkeletalAnimationIncluded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isSkeletalAnimationIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isSkeletalAnimationIncluded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isSkeletalAnimationIncluded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isMorphAnimationIncluded()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isMorphAnimationIncluded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isMorphAnimationIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isMorphAnimationIncluded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isMorphAnimationIncluded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isPoseAnimationIncluded()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isPoseAnimationIncluded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isPoseAnimationIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPoseAnimationIncluded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isPoseAnimationIncluded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isVertexTextureFetchRequired()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isVertexTextureFetchRequired
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isVertexTextureFetchRequired_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVertexTextureFetchRequired() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isVertexTextureFetchRequired */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getDefaultParameters()
 * Type:       virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::UnifiedHighLevelGpuProgram::getDefaultParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getDefaultParameters (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramParametersSharedPtr* _cpp_result = new Ogre::GpuProgramParametersSharedPtr( _cpp_this->getDefaultParameters() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramParametersSharedPtr Ogre::UnifiedHighLevelGpuProgram::getDefaultParameters */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     hasDefaultParameters()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::hasDefaultParameters
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1hasDefaultParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasDefaultParameters() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::hasDefaultParameters */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getPassSurfaceAndLightStates()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::getPassSurfaceAndLightStates
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getPassSurfaceAndLightStates_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPassSurfaceAndLightStates() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::getPassSurfaceAndLightStates */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     hasCompileError()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::hasCompileError
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1hasCompileError_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasCompileError() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::hasCompileError */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     resetCompileError()
 * Type:       virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::resetCompileError
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1resetCompileError (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetCompileError();
} /* void Ogre::UnifiedHighLevelGpuProgram::resetCompileError */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     load()
 * Type:       virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
)
{
   // parameter conversions 
  bool _cpp_backgroundThread = backgroundThread ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->load(_cpp_backgroundThread);
} /* void Ogre::UnifiedHighLevelGpuProgram::load */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     reload()
 * Type:       virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reload();
} /* void Ogre::UnifiedHighLevelGpuProgram::reload */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isReloadable() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isReloadable */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isLoaded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoading() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isLoading */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: LoadingState Ogre::UnifiedHighLevelGpuProgram::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Resource::LoadingState _cpp_result = _cpp_this->getLoadingState() ; 
   return _cpp_result;
} /* LoadingState Ogre::UnifiedHighLevelGpuProgram::getLoadingState */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     unload()
 * Type:       virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unload();
} /* void Ogre::UnifiedHighLevelGpuProgram::unload */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getSize()
 * Type:       virtual method
 * Definition: size_t Ogre::UnifiedHighLevelGpuProgram::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSize() ; 
   return _cpp_result;
} /* size_t Ogre::UnifiedHighLevelGpuProgram::getSize */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     touch()
 * Type:       virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->touch();
} /* void Ogre::UnifiedHighLevelGpuProgram::touch */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: bool Ogre::UnifiedHighLevelGpuProgram::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isBackgroundLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::UnifiedHighLevelGpuProgram::isBackgroundLoaded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
)
{
   // parameter conversions 
  bool _cpp_bl = bl ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBackgroundLoaded(_cpp_bl);
} /* void Ogre::UnifiedHighLevelGpuProgram::setBackgroundLoaded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->escalateLoading();
} /* void Ogre::UnifiedHighLevelGpuProgram::escalateLoading */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     addListener()
 * Type:       non-virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_lis);
} /* void Ogre::UnifiedHighLevelGpuProgram::addListener */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     removeListener()
 * Type:       non-virtual method
 * Definition: void Ogre::UnifiedHighLevelGpuProgram::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_lis);
} /* void Ogre::UnifiedHighLevelGpuProgram::removeListener */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getConstantDefinitions()
 * Type:       virtual method
 * Definition: const GpuNamedConstants& Ogre::HighLevelGpuProgram::getConstantDefinitions
 * Signature:  ()Ogre_GpuNamedConstants
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getConstantDefinitions_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuNamedConstants* _cpp_result = & _cpp_this->getConstantDefinitions() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuNamedConstants& Ogre::HighLevelGpuProgram::getConstantDefinitions */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getNamedConstants()
 * Type:       virtual method
 * Definition: const GpuNamedConstants& Ogre::HighLevelGpuProgram::getNamedConstants
 * Signature:  ()Ogre_GpuNamedConstants
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getNamedConstants_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuNamedConstants* _cpp_result = & _cpp_this->getNamedConstants() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const GpuNamedConstants& Ogre::HighLevelGpuProgram::getNamedConstants */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setSourceFile()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSourceFile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setSourceFile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSourceFile(_cpp_filename);
} /* virtual void Ogre::GpuProgram::setSourceFile */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setSource()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSource
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setSource_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring source
)
{
   // parameter conversions 
  std::string _cpp_source = ""; org::xbig::jni::to_stdstring(_jni_env_, source, _cpp_source); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSource(_cpp_source);
} /* virtual void Ogre::GpuProgram::setSource */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getSyntaxCode()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getSyntaxCode
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getSyntaxCode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getSyntaxCode() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::GpuProgram::getSyntaxCode */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setSyntaxCode()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSyntaxCode
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setSyntaxCode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring syntax
)
{
   // parameter conversions 
  std::string _cpp_syntax = ""; org::xbig::jni::to_stdstring(_jni_env_, syntax, _cpp_syntax); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSyntaxCode(_cpp_syntax);
} /* virtual void Ogre::GpuProgram::setSyntaxCode */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getSourceFile()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getSourceFile
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getSourceFile_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getSourceFile() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::GpuProgram::getSourceFile */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getSource()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getSource
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getSource_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getSource() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::GpuProgram::getSource */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setType()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setType
 * Signature:  (Ogre_GpuProgramType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setType_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint t
)
{
   // parameter conversions 
  Ogre::GpuProgramType _cpp_t = (Ogre::GpuProgramType)t; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setType(_cpp_t);
} /* virtual void Ogre::GpuProgram::setType */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getType()
 * Type:       virtual method
 * Definition: virtual GpuProgramType Ogre::GpuProgram::getType
 * Signature:  ()Ogre_GpuProgramType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramType _cpp_result = _cpp_this->getType() ; 
   return _cpp_result;
} /* virtual GpuProgramType Ogre::GpuProgram::getType */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setSkeletalAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSkeletalAnimationIncluded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setSkeletalAnimationIncluded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean included
)
{
   // parameter conversions 
  bool _cpp_included = included ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSkeletalAnimationIncluded(_cpp_included);
} /* virtual void Ogre::GpuProgram::setSkeletalAnimationIncluded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setMorphAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setMorphAnimationIncluded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setMorphAnimationIncluded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean included
)
{
   // parameter conversions 
  bool _cpp_included = included ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMorphAnimationIncluded(_cpp_included);
} /* virtual void Ogre::GpuProgram::setMorphAnimationIncluded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setPoseAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setPoseAnimationIncluded
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setPoseAnimationIncluded_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint poseCount
)
{
   // parameter conversions 
  unsigned short _cpp_poseCount = poseCount; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPoseAnimationIncluded(_cpp_poseCount);
} /* virtual void Ogre::GpuProgram::setPoseAnimationIncluded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getNumberOfPosesIncluded()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::GpuProgram::getNumberOfPosesIncluded
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getNumberOfPosesIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumberOfPosesIncluded() ; 
   return _cpp_result;
} /* virtual ushort Ogre::GpuProgram::getNumberOfPosesIncluded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setVertexTextureFetchRequired()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setVertexTextureFetchRequired
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setVertexTextureFetchRequired_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean r
)
{
   // parameter conversions 
  bool _cpp_r = r ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexTextureFetchRequired(_cpp_r);
} /* virtual void Ogre::GpuProgram::setVertexTextureFetchRequired */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setAdjacencyInfoRequired()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setAdjacencyInfoRequired
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setAdjacencyInfoRequired_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean r
)
{
   // parameter conversions 
  bool _cpp_r = r ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAdjacencyInfoRequired(_cpp_r);
} /* virtual void Ogre::GpuProgram::setAdjacencyInfoRequired */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isAdjacencyInfoRequired()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::isAdjacencyInfoRequired
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isAdjacencyInfoRequired_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAdjacencyInfoRequired() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::GpuProgram::isAdjacencyInfoRequired */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setSurfaceAndPassLightStates()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSurfaceAndPassLightStates
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setSurfaceAndPassLightStates_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean state
)
{
   // parameter conversions 
  bool _cpp_state = state ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSurfaceAndPassLightStates(_cpp_state);
} /* virtual void Ogre::GpuProgram::setSurfaceAndPassLightStates */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setManualNamedConstants()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setManualNamedConstants
 * Signature:  (Ogre_GpuNamedConstants)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setManualNamedConstants_1_1GpuNamedConstantsR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong namedConstants
)
{
   // parameter conversions 
  const Ogre::GpuNamedConstants* _cpp_namedConstants = reinterpret_cast< const Ogre::GpuNamedConstants* >(namedConstants); 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setManualNamedConstants(*_cpp_namedConstants);
} /* virtual void Ogre::GpuProgram::setManualNamedConstants */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setManualNamedConstantsFile()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setManualNamedConstantsFile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setManualNamedConstantsFile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring paramDefFile
)
{
   // parameter conversions 
  std::string _cpp_paramDefFile = ""; org::xbig::jni::to_stdstring(_jni_env_, paramDefFile, _cpp_paramDefFile); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setManualNamedConstantsFile(_cpp_paramDefFile);
} /* virtual void Ogre::GpuProgram::setManualNamedConstantsFile */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getManualNamedConstantsFile()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getManualNamedConstantsFile
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getManualNamedConstantsFile_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getManualNamedConstantsFile() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::GpuProgram::getManualNamedConstantsFile */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepare();
} /* virtual void Ogre::Resource::prepare */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isManuallyLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isManuallyLoaded */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getName */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getHandle() ; 
   return _cpp_result;
} /* virtual ResourceHandle Ogre::Resource::getHandle */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPrepared() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isPrepared */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getGroup() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getGroup */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
)
{
   // parameter conversions 
  std::string _cpp_newGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, newGroup, _cpp_newGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->changeGroupOwnership(_cpp_newGroup);
} /* virtual void Ogre::Resource::changeGroupOwnership */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager* _cpp_result = _cpp_this->getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceManager* Ogre::Resource::getCreator */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getOrigin() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getOrigin */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
)
{
   // parameter conversions 
  std::string _cpp_origin = ""; org::xbig::jni::to_stdstring(_jni_env_, origin, _cpp_origin); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyOrigin(_cpp_origin);
} /* virtual void Ogre::Resource::_notifyOrigin */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getStateCount() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Resource::getStateCount */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_dirtyState();
} /* virtual void Ogre::Resource::_dirtyState */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundLoadingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundLoadingComplete */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundPreparingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundPreparingComplete */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<const Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::UnifiedHighLevelGpuProgram without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::UnifiedHighLevelGpuProgram::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.UnifiedHighLevelGpuProgram
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::UnifiedHighLevelGpuProgram::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnifiedHighLevelGpuProgram__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::UnifiedHighLevelGpuProgram 
   // cast pointer to C++ object 
   Ogre::UnifiedHighLevelGpuProgram* _cpp_this = reinterpret_cast<Ogre::UnifiedHighLevelGpuProgram*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::UnifiedHighLevelGpuProgram::__delete */
