///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_InstancedGeometry_00024LODBucket.h"

// import header files of original library
#include <OgreInstancedGeometry.h>



/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     LODBucket()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::LODBucket::LODBucket
 * Signature:  (Ogre_InstancedGeometry_BatchInstanceSfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1_1createLODBucket_1_1BatchInstancepHvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jint lod, 
  jfloat lodDist
)
{
   // constructor of class Ogre::InstancedGeometry::LODBucket 
   
   // parameter conversions 
  Ogre::InstancedGeometry::BatchInstance* _cpp_parent = reinterpret_cast< Ogre::InstancedGeometry::BatchInstance* >(parent);
  unsigned short _cpp_lod = lod;
  float _cpp_lodDist = lodDist; 
   
   // create new instance of class Ogre::InstancedGeometry::LODBucket 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = new Ogre::InstancedGeometry::LODBucket(_cpp_parent, _cpp_lod, _cpp_lodDist); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::InstancedGeometry::LODBucket::LODBucket */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: BatchInstance* Ogre::InstancedGeometry::LODBucket::getParent
 * Signature:  ()Ogre_InstancedGeometry_BatchInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::BatchInstance* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* BatchInstance* Ogre::InstancedGeometry::LODBucket::getParent */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     getLod()
 * Type:       non-virtual method
 * Definition: ushort Ogre::InstancedGeometry::LODBucket::getLod
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1getLod_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getLod() ; 
   return _cpp_result;
} /* ushort Ogre::InstancedGeometry::LODBucket::getLod */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     getSquaredDistance()
 * Type:       non-virtual method
 * Definition: Real Ogre::InstancedGeometry::LODBucket::getSquaredDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1getSquaredDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredDistance() ; 
   return _cpp_result;
} /* Real Ogre::InstancedGeometry::LODBucket::getSquaredDistance */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     assign()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::LODBucket::assign
 * Signature:  (Ogre_InstancedGeometry_QueuedSubMeshunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1assign_1_1QueuedSubMeshpushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong qsm, 
  jint atLod
)
{
   // parameter conversions 
  Ogre::InstancedGeometry::QueuedSubMesh* _cpp_qsm = reinterpret_cast< Ogre::InstancedGeometry::QueuedSubMesh* >(qsm);
  unsigned short _cpp_atLod = atLod; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->assign(_cpp_qsm, _cpp_atLod);
} /* void Ogre::InstancedGeometry::LODBucket::assign */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     build()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::LODBucket::build
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1build (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->build();
} /* void Ogre::InstancedGeometry::LODBucket::build */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     addRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::LODBucket::addRenderables
 * Signature:  (Ogre_RenderQueueunsigned_charfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1addRenderables_1_1RenderQueuepuint8vRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue, 
  jshort group, 
  jfloat camSquaredDistance
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue);
  unsigned char _cpp_group = group;
  float _cpp_camSquaredDistance = camSquaredDistance; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderables(_cpp_queue, _cpp_group, _cpp_camSquaredDistance);
} /* void Ogre::InstancedGeometry::LODBucket::addRenderables */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     getMaterialIterator()
 * Type:       non-virtual method
 * Definition: MaterialIterator Ogre::InstancedGeometry::LODBucket::getMaterialIterator
 * Signature:  ()Ogre_InstancedGeometry_LODBucket_MaterialIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1getMaterialIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::InstancedGeometry::LODBucket::MaterialIterator* _cpp_result = new Ogre::InstancedGeometry::LODBucket::MaterialIterator( _cpp_this->getMaterialIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MaterialIterator Ogre::InstancedGeometry::LODBucket::getMaterialIterator */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     dump()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::LODBucket::dump
 * Signature:  (std_ofstream)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1dump_1_1std_1ofstreamr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong of
)
{
   // parameter conversions 
  std::ofstream* _cpp_of = reinterpret_cast< std::ofstream* >(of); 
   
   // cast pointer to C++ object 
   const Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<const Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->dump(*_cpp_of);
} /* void Ogre::InstancedGeometry::LODBucket::dump */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     updateContainers()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::LODBucket::updateContainers
 * Signature:  (Ogre_InstancedGeometry_MaterialBucketstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1updateContainers_1_1MaterialBucketpStringr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bucket, 
  jlong name
)
{
   // parameter conversions 
  Ogre::InstancedGeometry::MaterialBucket* _cpp_bucket = reinterpret_cast< Ogre::InstancedGeometry::MaterialBucket* >(bucket);
  std::string* _cpp_name = reinterpret_cast<std::string*>(name); 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateContainers(_cpp_bucket, *_cpp_name);
} /* void Ogre::InstancedGeometry::LODBucket::updateContainers */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     visitRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::LODBucket::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::InstancedGeometry::LODBucket::visitRenderables */


/*
 * Class:      org.ogre4j.InstancedGeometry.00024LODBucket
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::InstancedGeometry::LODBucket::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024LODBucket__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::InstancedGeometry::LODBucket 
   // cast pointer to C++ object 
   Ogre::InstancedGeometry::LODBucket* _cpp_this = reinterpret_cast<Ogre::InstancedGeometry::LODBucket*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::InstancedGeometry::LODBucket::__delete */
