///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_AnimationState.h"

// import header files of original library
#include <OgreAnimationState.h>



/*
 * Class:      org.ogre4j.AnimationState
 * Method:     AnimationState()
 * Type:       constructor
 * Definition: Ogre::AnimationState::AnimationState
 * Signature:  (std_stringOgre_AnimationStateSetfloatfloatfloatZ)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationState__1_1createAnimationState_1_1StringRAnimationStateSetpRealvRealvRealvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring animName, 
  jlong parent, 
  jfloat timePos, 
  jfloat length, 
  jfloat weight, 
  jboolean enabled
)
{
   // constructor of class Ogre::AnimationState 
   
   // parameter conversions 
  std::string _cpp_animName = ""; org::xbig::jni::to_stdstring(_jni_env_, animName, _cpp_animName); // calls c-tor only. Not operator= .;
  Ogre::AnimationStateSet* _cpp_parent = reinterpret_cast< Ogre::AnimationStateSet* >(parent);
  float _cpp_timePos = timePos;
  float _cpp_length = length;
  float _cpp_weight = weight;
  bool _cpp_enabled = enabled ? true : false; 
   
   // create new instance of class Ogre::AnimationState 
   Ogre::AnimationState* _cpp_this = new Ogre::AnimationState(_cpp_animName, _cpp_parent, _cpp_timePos, _cpp_length, _cpp_weight, _cpp_enabled); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AnimationState::AnimationState */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     AnimationState()
 * Type:       constructor
 * Definition: Ogre::AnimationState::AnimationState
 * Signature:  (Ogre_AnimationStateSetOgre_AnimationState)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationState__1_1createAnimationState_1_1AnimationStateSetpAnimationStateR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jlong rhs
)
{
   // constructor of class Ogre::AnimationState 
   
   // parameter conversions 
  Ogre::AnimationStateSet* _cpp_parent = reinterpret_cast< Ogre::AnimationStateSet* >(parent);
  const Ogre::AnimationState* _cpp_rhs = reinterpret_cast< const Ogre::AnimationState* >(rhs); 
   
   // create new instance of class Ogre::AnimationState 
   Ogre::AnimationState* _cpp_this = new Ogre::AnimationState(_cpp_parent, *_cpp_rhs); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AnimationState::AnimationState */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getAnimationName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::AnimationState::getAnimationName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_AnimationState__1getAnimationName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getAnimationName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::AnimationState::getAnimationName */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getTimePosition()
 * Type:       non-virtual method
 * Definition: Real Ogre::AnimationState::getTimePosition
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AnimationState__1getTimePosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTimePosition() ; 
   return _cpp_result;
} /* Real Ogre::AnimationState::getTimePosition */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     setTimePosition()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::setTimePosition
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1setTimePosition_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat timePos
)
{
   // parameter conversions 
  float _cpp_timePos = timePos; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTimePosition(_cpp_timePos);
} /* void Ogre::AnimationState::setTimePosition */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getLength()
 * Type:       non-virtual method
 * Definition: Real Ogre::AnimationState::getLength
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AnimationState__1getLength_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLength() ; 
   return _cpp_result;
} /* Real Ogre::AnimationState::getLength */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     setLength()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::setLength
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1setLength_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat len
)
{
   // parameter conversions 
  float _cpp_len = len; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLength(_cpp_len);
} /* void Ogre::AnimationState::setLength */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getWeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::AnimationState::getWeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AnimationState__1getWeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getWeight() ; 
   return _cpp_result;
} /* Real Ogre::AnimationState::getWeight */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     setWeight()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::setWeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1setWeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat weight
)
{
   // parameter conversions 
  float _cpp_weight = weight; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWeight(_cpp_weight);
} /* void Ogre::AnimationState::setWeight */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     addTime()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::addTime
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1addTime_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat offset
)
{
   // parameter conversions 
  float _cpp_offset = offset; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addTime(_cpp_offset);
} /* void Ogre::AnimationState::addTime */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     hasEnded()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationState::hasEnded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationState__1hasEnded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEnded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationState::hasEnded */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationState::getEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationState__1getEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationState::getEnabled */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     setEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEnabled(_cpp_enabled);
} /* void Ogre::AnimationState::setEnabled */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationState::operator==
 * Signature:  (Ogre_AnimationState)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationState__1operatorEqual_1_1AnimationStateR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::AnimationState* _cpp_rhs = reinterpret_cast< const Ogre::AnimationState* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationState::operator== */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationState::operator!=
 * Signature:  (Ogre_AnimationState)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationState__1operatorNotEqual_1_1AnimationStateR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::AnimationState* _cpp_rhs = reinterpret_cast< const Ogre::AnimationState* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationState::operator!= */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     setLoop()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::setLoop
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1setLoop_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean loop
)
{
   // parameter conversions 
  bool _cpp_loop = loop ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLoop(_cpp_loop);
} /* void Ogre::AnimationState::setLoop */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getLoop()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationState::getLoop
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationState__1getLoop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getLoop() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationState::getLoop */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     copyStateFrom()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::copyStateFrom
 * Signature:  (Ogre_AnimationState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1copyStateFrom_1_1AnimationStateR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animState
)
{
   // parameter conversions 
  const Ogre::AnimationState* _cpp_animState = reinterpret_cast< const Ogre::AnimationState* >(animState); 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyStateFrom(*_cpp_animState);
} /* void Ogre::AnimationState::copyStateFrom */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: AnimationStateSet* Ogre::AnimationState::getParent
 * Signature:  ()Ogre_AnimationStateSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationState__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationStateSet* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationStateSet* Ogre::AnimationState::getParent */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     createBlendMask()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::createBlendMask
 * Signature:  (IF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1createBlendMask_1_1ivFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint blendMaskSizeHint, 
  jfloat initialWeight
)
{
   // parameter conversions 
  size_t _cpp_blendMaskSizeHint = blendMaskSizeHint;
  float _cpp_initialWeight = initialWeight; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->createBlendMask(_cpp_blendMaskSizeHint, _cpp_initialWeight);
} /* void Ogre::AnimationState::createBlendMask */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     destroyBlendMask()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::destroyBlendMask
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1destroyBlendMask (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyBlendMask();
} /* void Ogre::AnimationState::destroyBlendMask */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     _setBlendMaskData()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::_setBlendMaskData
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1_1setBlendMaskData_1_1FP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong blendMaskData
)
{
   // parameter conversions 
  const float* _cpp_blendMaskData = reinterpret_cast<float*>(blendMaskData); 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setBlendMaskData(_cpp_blendMaskData);
} /* void Ogre::AnimationState::_setBlendMaskData */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     _setBlendMask()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::_setBlendMask
 * Signature:  (Ogre_AnimationState_BoneBlendMask)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1_1setBlendMask_1_1BoneBlendMaskP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong blendMask
)
{
   // parameter conversions 
  const Ogre::AnimationState::BoneBlendMask* _cpp_blendMask = reinterpret_cast< const Ogre::AnimationState::BoneBlendMask* >(blendMask); 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setBlendMask(_cpp_blendMask);
} /* void Ogre::AnimationState::_setBlendMask */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getBlendMask()
 * Type:       non-virtual method
 * Definition: const BoneBlendMask* Ogre::AnimationState::getBlendMask
 * Signature:  ()Ogre_AnimationState_BoneBlendMask
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationState__1getBlendMask_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationState::BoneBlendMask* _cpp_result = _cpp_this->getBlendMask() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const BoneBlendMask* Ogre::AnimationState::getBlendMask */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     hasBlendMask()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationState::hasBlendMask
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationState__1hasBlendMask_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasBlendMask() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationState::hasBlendMask */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     setBlendMaskEntry()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationState::setBlendMaskEntry
 * Signature:  (IF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1setBlendMaskEntry_1_1ivFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint boneHandle, 
  jfloat weight
)
{
   // parameter conversions 
  size_t _cpp_boneHandle = boneHandle;
  float _cpp_weight = weight; 
   
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBlendMaskEntry(_cpp_boneHandle, _cpp_weight);
} /* void Ogre::AnimationState::setBlendMaskEntry */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     getBlendMaskEntry()
 * Type:       non-virtual method
 * Definition: float Ogre::AnimationState::getBlendMaskEntry
 * Signature:  (I)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_AnimationState__1getBlendMaskEntry_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint boneHandle
)
{
   // parameter conversions 
  size_t _cpp_boneHandle = boneHandle; 
   
   // cast pointer to C++ object 
   const Ogre::AnimationState* _cpp_this = reinterpret_cast<const Ogre::AnimationState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBlendMaskEntry(_cpp_boneHandle) ; 
   return _cpp_result;
} /* float Ogre::AnimationState::getBlendMaskEntry */


/*
 * Class:      org.ogre4j.AnimationState
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::AnimationState::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationState__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::AnimationState 
   // cast pointer to C++ object 
   Ogre::AnimationState* _cpp_this = reinterpret_cast<Ogre::AnimationState*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::AnimationState::__delete */
