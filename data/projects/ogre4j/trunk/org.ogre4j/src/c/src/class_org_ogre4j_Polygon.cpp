///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Polygon.h"

// import header files of original library
#include <OgrePolygon.h>



/*
 * Class:      org.ogre4j.Polygon
 * Method:     Polygon()
 * Type:       constructor
 * Definition: Ogre::Polygon::Polygon
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Polygon__1_1createPolygon (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Polygon 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Polygon 
   Ogre::Polygon* _cpp_this = new Ogre::Polygon(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Polygon::Polygon */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     Polygon()
 * Type:       constructor
 * Definition: Ogre::Polygon::Polygon
 * Signature:  (Ogre_Polygon)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Polygon__1_1createPolygon_1_1PolygonR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong cpy
)
{
   // constructor of class Ogre::Polygon 
   
   // parameter conversions 
  const Ogre::Polygon* _cpp_cpy = reinterpret_cast< const Ogre::Polygon* >(cpy); 
   
   // create new instance of class Ogre::Polygon 
   Ogre::Polygon* _cpp_this = new Ogre::Polygon(*_cpp_cpy); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Polygon::Polygon */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     insertVertex()
 * Type:       non-virtual method
 * Definition: void Ogre::Polygon::insertVertex
 * Signature:  (Ogre_Vector3I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1insertVertex_1_1Vector3Riv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vdata, 
  jint vertexIndex
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vdata = reinterpret_cast< const Ogre::Vector3* >(vdata);
  size_t _cpp_vertexIndex = vertexIndex; 
   
   // cast pointer to C++ object 
   Ogre::Polygon* _cpp_this = reinterpret_cast<Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->insertVertex(*_cpp_vdata, _cpp_vertexIndex);
} /* void Ogre::Polygon::insertVertex */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     insertVertex()
 * Type:       non-virtual method
 * Definition: void Ogre::Polygon::insertVertex
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1insertVertex_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vdata
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vdata = reinterpret_cast< const Ogre::Vector3* >(vdata); 
   
   // cast pointer to C++ object 
   Ogre::Polygon* _cpp_this = reinterpret_cast<Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->insertVertex(*_cpp_vdata);
} /* void Ogre::Polygon::insertVertex */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     getVertex()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Polygon::getVertex
 * Signature:  (I)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Polygon__1getVertex_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertex
)
{
   // parameter conversions 
  size_t _cpp_vertex = vertex; 
   
   // cast pointer to C++ object 
   const Ogre::Polygon* _cpp_this = reinterpret_cast<const Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getVertex(_cpp_vertex) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Polygon::getVertex */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     setVertex()
 * Type:       non-virtual method
 * Definition: void Ogre::Polygon::setVertex
 * Signature:  (Ogre_Vector3I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1setVertex_1_1Vector3Riv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vdata, 
  jint vertexIndex
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vdata = reinterpret_cast< const Ogre::Vector3* >(vdata);
  size_t _cpp_vertexIndex = vertexIndex; 
   
   // cast pointer to C++ object 
   Ogre::Polygon* _cpp_this = reinterpret_cast<Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertex(*_cpp_vdata, _cpp_vertexIndex);
} /* void Ogre::Polygon::setVertex */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     removeDuplicates()
 * Type:       non-virtual method
 * Definition: void Ogre::Polygon::removeDuplicates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1removeDuplicates (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Polygon* _cpp_this = reinterpret_cast<Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeDuplicates();
} /* void Ogre::Polygon::removeDuplicates */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     getVertexCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Polygon::getVertexCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Polygon__1getVertexCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Polygon* _cpp_this = reinterpret_cast<const Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getVertexCount() ; 
   return _cpp_result;
} /* size_t Ogre::Polygon::getVertexCount */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     getNormal()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Polygon::getNormal
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Polygon__1getNormal_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Polygon* _cpp_this = reinterpret_cast<const Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getNormal() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Polygon::getNormal */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     deleteVertex()
 * Type:       non-virtual method
 * Definition: void Ogre::Polygon::deleteVertex
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1deleteVertex_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertex
)
{
   // parameter conversions 
  size_t _cpp_vertex = vertex; 
   
   // cast pointer to C++ object 
   Ogre::Polygon* _cpp_this = reinterpret_cast<Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->deleteVertex(_cpp_vertex);
} /* void Ogre::Polygon::deleteVertex */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     isPointInside()
 * Type:       non-virtual method
 * Definition: bool Ogre::Polygon::isPointInside
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Polygon__1isPointInside_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong point
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_point = reinterpret_cast< const Ogre::Vector3* >(point); 
   
   // cast pointer to C++ object 
   const Ogre::Polygon* _cpp_this = reinterpret_cast<const Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPointInside(*_cpp_point) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Polygon::isPointInside */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     storeEdges()
 * Type:       non-virtual method
 * Definition: void Ogre::Polygon::storeEdges
 * Signature:  (Ogre_Polygon_EdgeMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1storeEdges_1_1EdgeMapp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong edgeMap
)
{
   // parameter conversions 
  Ogre::Polygon::EdgeMap* _cpp_edgeMap = reinterpret_cast< Ogre::Polygon::EdgeMap* >(edgeMap); 
   
   // cast pointer to C++ object 
   const Ogre::Polygon* _cpp_this = reinterpret_cast<const Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->storeEdges(_cpp_edgeMap);
} /* void Ogre::Polygon::storeEdges */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     reset()
 * Type:       non-virtual method
 * Definition: void Ogre::Polygon::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Polygon* _cpp_this = reinterpret_cast<Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reset();
} /* void Ogre::Polygon::reset */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Polygon::operator==
 * Signature:  (Ogre_Polygon)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Polygon__1operatorEqual_1_1PolygonR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Polygon* _cpp_rhs = reinterpret_cast< const Ogre::Polygon* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Polygon* _cpp_this = reinterpret_cast<const Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Polygon::operator== */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Polygon::operator!=
 * Signature:  (Ogre_Polygon)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Polygon__1operatorNotEqual_1_1PolygonR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Polygon* _cpp_rhs = reinterpret_cast< const Ogre::Polygon* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Polygon* _cpp_this = reinterpret_cast<const Ogre::Polygon*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Polygon::operator!= */


/*
 * Class:      org.ogre4j.Polygon
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Polygon::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Polygon__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Polygon 
   // cast pointer to C++ object 
   Ogre::Polygon* _cpp_this = reinterpret_cast<Ogre::Polygon*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Polygon::__delete */
