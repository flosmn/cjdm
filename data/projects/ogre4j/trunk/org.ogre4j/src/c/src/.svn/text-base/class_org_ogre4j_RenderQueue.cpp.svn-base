///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderQueue.h"

// import header files of original library
#include <OgreRenderQueue.h>



/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     RenderQueue()
 * Type:       constructor
 * Definition: Ogre::RenderQueue::RenderQueue
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueue__1_1createRenderQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::RenderQueue 
   
   // parameter conversions 
   
   // create new instance of class Ogre::RenderQueue 
   Ogre::RenderQueue* _cpp_this = new Ogre::RenderQueue(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RenderQueue::RenderQueue */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::clear
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1clear_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean destroyPassMaps
)
{
   // parameter conversions 
  bool _cpp_destroyPassMaps = destroyPassMaps ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear(_cpp_destroyPassMaps);
} /* void Ogre::RenderQueue::clear */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     getQueueGroup()
 * Type:       non-virtual method
 * Definition: RenderQueueGroup* Ogre::RenderQueue::getQueueGroup
 * Signature:  (unsigned_char)Ogre_RenderQueueGroup
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueue__1getQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
)
{
   // parameter conversions 
  unsigned char _cpp_qid = qid; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueueGroup* _cpp_result = _cpp_this->getQueueGroup(_cpp_qid) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderQueueGroup* Ogre::RenderQueue::getQueueGroup */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     addRenderable()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::addRenderable
 * Signature:  (Ogre_Renderableunsigned_charunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1addRenderable_1_1Renderablepuint8vushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pRend, 
  jshort groupID, 
  jint priority
)
{
   // parameter conversions 
  Ogre::Renderable* _cpp_pRend = reinterpret_cast< Ogre::Renderable* >(pRend);
  unsigned char _cpp_groupID = groupID;
  unsigned short _cpp_priority = priority; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderable(_cpp_pRend, _cpp_groupID, _cpp_priority);
} /* void Ogre::RenderQueue::addRenderable */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     addRenderable()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::addRenderable
 * Signature:  (Ogre_Renderableunsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1addRenderable_1_1Renderablepuint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pRend, 
  jshort groupId
)
{
   // parameter conversions 
  Ogre::Renderable* _cpp_pRend = reinterpret_cast< Ogre::Renderable* >(pRend);
  unsigned char _cpp_groupId = groupId; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderable(_cpp_pRend, _cpp_groupId);
} /* void Ogre::RenderQueue::addRenderable */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     addRenderable()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::addRenderable
 * Signature:  (Ogre_Renderable)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1addRenderable_1_1Renderablep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pRend
)
{
   // parameter conversions 
  Ogre::Renderable* _cpp_pRend = reinterpret_cast< Ogre::Renderable* >(pRend); 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderable(_cpp_pRend);
} /* void Ogre::RenderQueue::addRenderable */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     getDefaultQueueGroup()
 * Type:       non-virtual method
 * Definition: uint8 Ogre::RenderQueue::getDefaultQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_RenderQueue__1getDefaultQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueue* _cpp_this = reinterpret_cast<const Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getDefaultQueueGroup() ; 
   return _cpp_result;
} /* uint8 Ogre::RenderQueue::getDefaultQueueGroup */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     setDefaultRenderablePriority()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::setDefaultRenderablePriority
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1setDefaultRenderablePriority_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint priority
)
{
   // parameter conversions 
  unsigned short _cpp_priority = priority; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultRenderablePriority(_cpp_priority);
} /* void Ogre::RenderQueue::setDefaultRenderablePriority */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     getDefaultRenderablePriority()
 * Type:       non-virtual method
 * Definition: ushort Ogre::RenderQueue::getDefaultRenderablePriority
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderQueue__1getDefaultRenderablePriority_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueue* _cpp_this = reinterpret_cast<const Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getDefaultRenderablePriority() ; 
   return _cpp_result;
} /* ushort Ogre::RenderQueue::getDefaultRenderablePriority */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     setDefaultQueueGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::setDefaultQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1setDefaultQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort grp
)
{
   // parameter conversions 
  unsigned char _cpp_grp = grp; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultQueueGroup(_cpp_grp);
} /* void Ogre::RenderQueue::setDefaultQueueGroup */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     _getQueueGroupIterator()
 * Type:       non-virtual method
 * Definition: QueueGroupIterator Ogre::RenderQueue::_getQueueGroupIterator
 * Signature:  ()Ogre_RenderQueue_QueueGroupIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueue__1_1getQueueGroupIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueue::QueueGroupIterator* _cpp_result = new Ogre::RenderQueue::QueueGroupIterator( _cpp_this->_getQueueGroupIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* QueueGroupIterator Ogre::RenderQueue::_getQueueGroupIterator */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     setSplitPassesByLightingType()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::setSplitPassesByLightingType
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1setSplitPassesByLightingType_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean split
)
{
   // parameter conversions 
  bool _cpp_split = split ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSplitPassesByLightingType(_cpp_split);
} /* void Ogre::RenderQueue::setSplitPassesByLightingType */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     setSplitNoShadowPasses()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::setSplitNoShadowPasses
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1setSplitNoShadowPasses_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean split
)
{
   // parameter conversions 
  bool _cpp_split = split ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSplitNoShadowPasses(_cpp_split);
} /* void Ogre::RenderQueue::setSplitNoShadowPasses */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     setShadowCastersCannotBeReceivers()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::setShadowCastersCannotBeReceivers
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1setShadowCastersCannotBeReceivers_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean ind
)
{
   // parameter conversions 
  bool _cpp_ind = ind ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowCastersCannotBeReceivers(_cpp_ind);
} /* void Ogre::RenderQueue::setShadowCastersCannotBeReceivers */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     setRenderableListener()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueue::setRenderableListener
 * Signature:  (Ogre_RenderQueue_RenderableListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1setRenderableListener_1_1RenderableListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::RenderQueue::RenderableListener* _cpp_listener = reinterpret_cast< Ogre::RenderQueue::RenderableListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderableListener(_cpp_listener);
} /* void Ogre::RenderQueue::setRenderableListener */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     getRenderableListener()
 * Type:       non-virtual method
 * Definition: RenderableListener* Ogre::RenderQueue::getRenderableListener
 * Signature:  ()Ogre_RenderQueue_RenderableListener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueue__1getRenderableListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueue* _cpp_this = reinterpret_cast<const Ogre::RenderQueue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueue::RenderableListener* _cpp_result = _cpp_this->getRenderableListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderableListener* Ogre::RenderQueue::getRenderableListener */


/*
 * Class:      org.ogre4j.RenderQueue
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderQueue::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueue__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderQueue 
   // cast pointer to C++ object 
   Ogre::RenderQueue* _cpp_this = reinterpret_cast<Ogre::RenderQueue*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderQueue::__delete */
