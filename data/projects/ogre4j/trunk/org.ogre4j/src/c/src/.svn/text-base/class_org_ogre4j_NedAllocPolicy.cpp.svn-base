///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_NedAllocPolicy.h"

// import header files of original library
#include <OgreMemoryNedAlloc.h>



/*
 * Class:      org.ogre4j.NedAllocPolicy
 * Method:     allocateBytes()
 * Type:       static method
 * Definition: static void* Ogre::NedAllocPolicy::allocateBytes
 * Signature:  (ICIC)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_NedAllocPolicy__1allocateBytes_1_1ivcPivcP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint count,
  jstring file,
  jint line,
  jstring func
)
{
   // static method of class Ogre::NedAllocPolicy with return value
   // parameter conversions
  size_t _cpp_count = count;
   std::string _cpp_file_TMP; org::xbig::jni::to_stdstring(_jni_env_, file, _cpp_file_TMP); const char* _cpp_file = _cpp_file_TMP.c_str();
  int _cpp_line = line;
   std::string _cpp_func_TMP; org::xbig::jni::to_stdstring(_jni_env_, func, _cpp_func_TMP); const char* _cpp_func = _cpp_func_TMP.c_str();

   // call library method
   void* _cpp_result = Ogre::NedAllocPolicy::allocateBytes(_cpp_count, _cpp_file, _cpp_line, _cpp_func);
   return reinterpret_cast<jlong>(_cpp_result);
} /* static void* Ogre::NedAllocPolicy::allocateBytes */


/*
 * Class:      org.ogre4j.NedAllocPolicy
 * Method:     deallocateBytes()
 * Type:       static method
 * Definition: static void Ogre::NedAllocPolicy::deallocateBytes
 * Signature:  (V)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_NedAllocPolicy__1deallocateBytes_1_1vp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ptr
)
{
   // static method of class Ogre::NedAllocPolicy without return value
   // parameter conversions
  void* _cpp_ptr = reinterpret_cast<void*>(ptr);

   // call library method
   Ogre::NedAllocPolicy::deallocateBytes(_cpp_ptr);
} /* static void Ogre::NedAllocPolicy::deallocateBytes */


/*
 * Class:      org.ogre4j.NedAllocPolicy
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::NedAllocPolicy::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_NedAllocPolicy__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::NedAllocPolicy
   // cast pointer to C++ object
   Ogre::NedAllocPolicy* _cpp_this = reinterpret_cast<Ogre::NedAllocPolicy*>(_jni_pointer_);
   // delete object if it exists
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::NedAllocPolicy::__delete */


