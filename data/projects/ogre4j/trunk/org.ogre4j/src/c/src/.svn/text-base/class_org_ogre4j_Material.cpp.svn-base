///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Material.h"

// import header files of original library
#include <OgreMaterial.h>



/*
 * Class:      org.ogre4j.Material
 * Method:     Material()
 * Type:       constructor
 * Definition: Ogre::Material::Material
 * Signature:  (Ogre_ResourceManagerstd_stringunsigned_longstd_stringZOgre_ManualResourceLoader)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1_1createMaterial_1_1ResourceManagerpStringRResourceHandlevStringRbvManualResourceLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong creator, 
  jstring name, 
  jlong handle, 
  jstring group, 
  jboolean isManual, 
  jlong loader
)
{
   // constructor of class Ogre::Material 
   
   // parameter conversions 
  Ogre::ResourceManager* _cpp_creator = reinterpret_cast< Ogre::ResourceManager* >(creator);
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned long _cpp_handle = handle;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader); 
   
   // create new instance of class Ogre::Material 
   Ogre::Material* _cpp_this = new Ogre::Material(_cpp_creator, _cpp_name, _cpp_handle, _cpp_group, _cpp_isManual, _cpp_loader); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Material::Material */


/*
 * Class:      org.ogre4j.Material
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Material& Ogre::Material::operator=
 * Signature:  (Ogre_Material)Ogre_Material
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1operatorAssignment_1_1MaterialR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Material* _cpp_rhs = reinterpret_cast< const Ogre::Material* >(rhs); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Material* _cpp_result = & _cpp_this->operator=(*_cpp_rhs) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Material& Ogre::Material::operator= */


/*
 * Class:      org.ogre4j.Material
 * Method:     isTransparent()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::isTransparent
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isTransparent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isTransparent() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Material::isTransparent */


/*
 * Class:      org.ogre4j.Material
 * Method:     setReceiveShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setReceiveShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setReceiveShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setReceiveShadows(_cpp_enabled);
} /* void Ogre::Material::setReceiveShadows */


/*
 * Class:      org.ogre4j.Material
 * Method:     getReceiveShadows()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::getReceiveShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1getReceiveShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getReceiveShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Material::getReceiveShadows */


/*
 * Class:      org.ogre4j.Material
 * Method:     setTransparencyCastsShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setTransparencyCastsShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setTransparencyCastsShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTransparencyCastsShadows(_cpp_enabled);
} /* void Ogre::Material::setTransparencyCastsShadows */


/*
 * Class:      org.ogre4j.Material
 * Method:     getTransparencyCastsShadows()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::getTransparencyCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1getTransparencyCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getTransparencyCastsShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Material::getTransparencyCastsShadows */


/*
 * Class:      org.ogre4j.Material
 * Method:     createTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::createTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1createTechnique (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->createTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::Material::createTechnique */


/*
 * Class:      org.ogre4j.Material
 * Method:     getTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getTechnique
 * Signature:  (S)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getTechnique_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::Material::getTechnique */


/*
 * Class:      org.ogre4j.Material
 * Method:     getTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getTechnique
 * Signature:  (std_string)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getTechnique_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::Material::getTechnique */


/*
 * Class:      org.ogre4j.Material
 * Method:     getNumTechniques()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumTechniques
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumTechniques_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumTechniques() ; 
   return _cpp_result;
} /* unsigned short Ogre::Material::getNumTechniques */


/*
 * Class:      org.ogre4j.Material
 * Method:     removeTechnique()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::removeTechnique
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1removeTechnique_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeTechnique(_cpp_index);
} /* void Ogre::Material::removeTechnique */


/*
 * Class:      org.ogre4j.Material
 * Method:     removeAllTechniques()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::removeAllTechniques
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1removeAllTechniques (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllTechniques();
} /* void Ogre::Material::removeAllTechniques */


/*
 * Class:      org.ogre4j.Material
 * Method:     getTechniqueIterator()
 * Type:       non-virtual method
 * Definition: TechniqueIterator Ogre::Material::getTechniqueIterator
 * Signature:  ()Ogre_Material_TechniqueIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getTechniqueIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Material::TechniqueIterator* _cpp_result = new Ogre::Material::TechniqueIterator( _cpp_this->getTechniqueIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TechniqueIterator Ogre::Material::getTechniqueIterator */


/*
 * Class:      org.ogre4j.Material
 * Method:     getSupportedTechniqueIterator()
 * Type:       non-virtual method
 * Definition: TechniqueIterator Ogre::Material::getSupportedTechniqueIterator
 * Signature:  ()Ogre_Material_TechniqueIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getSupportedTechniqueIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Material::TechniqueIterator* _cpp_result = new Ogre::Material::TechniqueIterator( _cpp_this->getSupportedTechniqueIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TechniqueIterator Ogre::Material::getSupportedTechniqueIterator */


/*
 * Class:      org.ogre4j.Material
 * Method:     getSupportedTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getSupportedTechnique
 * Signature:  (S)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getSupportedTechnique_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getSupportedTechnique(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::Material::getSupportedTechnique */


/*
 * Class:      org.ogre4j.Material
 * Method:     getNumSupportedTechniques()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumSupportedTechniques
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumSupportedTechniques_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumSupportedTechniques() ; 
   return _cpp_result;
} /* unsigned short Ogre::Material::getNumSupportedTechniques */


/*
 * Class:      org.ogre4j.Material
 * Method:     getUnsupportedTechniquesExplanation()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Material::getUnsupportedTechniquesExplanation
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getUnsupportedTechniquesExplanation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getUnsupportedTechniquesExplanation() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Material::getUnsupportedTechniquesExplanation */


/*
 * Class:      org.ogre4j.Material
 * Method:     getNumLodLevels()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumLodLevels
 * Signature:  (S)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumLodLevels_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint schemeIndex
)
{
   // parameter conversions 
  unsigned short _cpp_schemeIndex = schemeIndex; 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumLodLevels(_cpp_schemeIndex) ; 
   return _cpp_result;
} /* unsigned short Ogre::Material::getNumLodLevels */


/*
 * Class:      org.ogre4j.Material
 * Method:     getNumLodLevels()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumLodLevels
 * Signature:  (std_string)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumLodLevels_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring schemeName
)
{
   // parameter conversions 
  std::string _cpp_schemeName = ""; org::xbig::jni::to_stdstring(_jni_env_, schemeName, _cpp_schemeName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumLodLevels(_cpp_schemeName) ; 
   return _cpp_result;
} /* unsigned short Ogre::Material::getNumLodLevels */


/*
 * Class:      org.ogre4j.Material
 * Method:     getBestTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getBestTechnique
 * Signature:  (SOgre_Renderable)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getBestTechnique_1_1HvRenderableP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint lodIndex, 
  jlong rend
)
{
   // parameter conversions 
  unsigned short _cpp_lodIndex = lodIndex;
  const Ogre::Renderable* _cpp_rend = reinterpret_cast< const Ogre::Renderable* >(rend); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getBestTechnique(_cpp_lodIndex, _cpp_rend) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::Material::getBestTechnique */


/*
 * Class:      org.ogre4j.Material
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: MaterialPtr Ogre::Material::clone
 * Signature:  (std_stringZstd_string)Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1clone_1_1StringRbvStringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newName, 
  jboolean changeGroup, 
  jstring newGroup
)
{
   // parameter conversions 
  std::string _cpp_newName = ""; org::xbig::jni::to_stdstring(_jni_env_, newName, _cpp_newName); // calls c-tor only. Not operator= .;
  bool _cpp_changeGroup = changeGroup ? true : false;
  std::string _cpp_newGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, newGroup, _cpp_newGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = new Ogre::MaterialPtr( _cpp_this->clone(_cpp_newName, _cpp_changeGroup, _cpp_newGroup) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MaterialPtr Ogre::Material::clone */


/*
 * Class:      org.ogre4j.Material
 * Method:     copyDetailsTo()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::copyDetailsTo
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1copyDetailsTo_1_1MaterialPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mat
)
{
   // parameter conversions 
  Ogre::MaterialPtr* _cpp_mat = reinterpret_cast< Ogre::MaterialPtr* >(mat); 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyDetailsTo(*_cpp_mat);
} /* void Ogre::Material::copyDetailsTo */


/*
 * Class:      org.ogre4j.Material
 * Method:     compile()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::compile
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1compile_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoManageTextureUnits
)
{
   // parameter conversions 
  bool _cpp_autoManageTextureUnits = autoManageTextureUnits ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->compile(_cpp_autoManageTextureUnits);
} /* void Ogre::Material::compile */


/*
 * Class:      org.ogre4j.Material
 * Method:     setPointSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setPointSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setPointSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat ps
)
{
   // parameter conversions 
  float _cpp_ps = ps; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPointSize(_cpp_ps);
} /* void Ogre::Material::setPointSize */


/*
 * Class:      org.ogre4j.Material
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setAmbient
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setAmbient_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAmbient(_cpp_red, _cpp_green, _cpp_blue);
} /* void Ogre::Material::setAmbient */


/*
 * Class:      org.ogre4j.Material
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setAmbient
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setAmbient_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_ambient = reinterpret_cast< const Ogre::ColourValue* >(ambient); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAmbient(*_cpp_ambient);
} /* void Ogre::Material::setAmbient */


/*
 * Class:      org.ogre4j.Material
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDiffuse
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDiffuse_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue;
  float _cpp_alpha = alpha; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDiffuse(_cpp_red, _cpp_green, _cpp_blue, _cpp_alpha);
} /* void Ogre::Material::setDiffuse */


/*
 * Class:      org.ogre4j.Material
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDiffuse
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDiffuse_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong diffuse
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_diffuse = reinterpret_cast< const Ogre::ColourValue* >(diffuse); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDiffuse(*_cpp_diffuse);
} /* void Ogre::Material::setDiffuse */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSpecular
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSpecular_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue;
  float _cpp_alpha = alpha; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpecular(_cpp_red, _cpp_green, _cpp_blue, _cpp_alpha);
} /* void Ogre::Material::setSpecular */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSpecular
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSpecular_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong specular
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_specular = reinterpret_cast< const Ogre::ColourValue* >(specular); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSpecular(*_cpp_specular);
} /* void Ogre::Material::setSpecular */


/*
 * Class:      org.ogre4j.Material
 * Method:     setShininess()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setShininess
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setShininess_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat val
)
{
   // parameter conversions 
  float _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShininess(_cpp_val);
} /* void Ogre::Material::setShininess */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSelfIllumination
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSelfIllumination_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
)
{
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSelfIllumination(_cpp_red, _cpp_green, _cpp_blue);
} /* void Ogre::Material::setSelfIllumination */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSelfIllumination
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSelfIllumination_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong selfIllum
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_selfIllum = reinterpret_cast< const Ogre::ColourValue* >(selfIllum); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSelfIllumination(*_cpp_selfIllum);
} /* void Ogre::Material::setSelfIllumination */


/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthCheckEnabled(_cpp_enabled);
} /* void Ogre::Material::setDepthCheckEnabled */


/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthWriteEnabled(_cpp_enabled);
} /* void Ogre::Material::setDepthWriteEnabled */


/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthFunction()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
)
{
   // parameter conversions 
  Ogre::CompareFunction _cpp_func = (Ogre::CompareFunction)func; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthFunction(_cpp_func);
} /* void Ogre::Material::setDepthFunction */


/*
 * Class:      org.ogre4j.Material
 * Method:     setColourWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setColourWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setColourWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourWriteEnabled(_cpp_enabled);
} /* void Ogre::Material::setColourWriteEnabled */


/*
 * Class:      org.ogre4j.Material
 * Method:     setCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setCullingMode
 * Signature:  (Ogre_CullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setCullingMode_1_1CullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::CullingMode _cpp_mode = (Ogre::CullingMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCullingMode(_cpp_mode);
} /* void Ogre::Material::setCullingMode */


/*
 * Class:      org.ogre4j.Material
 * Method:     setManualCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setManualCullingMode
 * Signature:  (Ogre_ManualCullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setManualCullingMode_1_1ManualCullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::ManualCullingMode _cpp_mode = (Ogre::ManualCullingMode)mode; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setManualCullingMode(_cpp_mode);
} /* void Ogre::Material::setManualCullingMode */


/*
 * Class:      org.ogre4j.Material
 * Method:     setLightingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setLightingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setLightingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLightingEnabled(_cpp_enabled);
} /* void Ogre::Material::setLightingEnabled */


/*
 * Class:      org.ogre4j.Material
 * Method:     setShadingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setShadingMode
 * Signature:  (Ogre_ShadeOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setShadingMode_1_1ShadeOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
)
{
   // parameter conversions 
  Ogre::ShadeOptions _cpp_mode = (Ogre::ShadeOptions)mode; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadingMode(_cpp_mode);
} /* void Ogre::Material::setShadingMode */


/*
 * Class:      org.ogre4j.Material
 * Method:     setFog()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setFog
 * Signature:  (ZOgre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setFog_1_1bvFogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean overrideScene, 
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
)
{
   // parameter conversions 
  bool _cpp_overrideScene = overrideScene ? true : false;
  Ogre::FogMode _cpp_mode = (Ogre::FogMode)mode;
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour);
  float _cpp_expDensity = expDensity;
  float _cpp_linearStart = linearStart;
  float _cpp_linearEnd = linearEnd; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFog(_cpp_overrideScene, _cpp_mode, *_cpp_colour, _cpp_expDensity, _cpp_linearStart, _cpp_linearEnd);
} /* void Ogre::Material::setFog */


/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthBias
 * Signature:  (FF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthBias_1_1FvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat constantBias, 
  jfloat slopeScaleBias
)
{
   // parameter conversions 
  float _cpp_constantBias = constantBias;
  float _cpp_slopeScaleBias = slopeScaleBias; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepthBias(_cpp_constantBias, _cpp_slopeScaleBias);
} /* void Ogre::Material::setDepthBias */


/*
 * Class:      org.ogre4j.Material
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setTextureFiltering
 * Signature:  (Ogre_TextureFilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setTextureFiltering_1_1TextureFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint filterType
)
{
   // parameter conversions 
  Ogre::TextureFilterOptions _cpp_filterType = (Ogre::TextureFilterOptions)filterType; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureFiltering(_cpp_filterType);
} /* void Ogre::Material::setTextureFiltering */


/*
 * Class:      org.ogre4j.Material
 * Method:     setTextureAnisotropy()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setTextureAnisotropy
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setTextureAnisotropy_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint maxAniso
)
{
   // parameter conversions 
  int _cpp_maxAniso = maxAniso; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureAnisotropy(_cpp_maxAniso);
} /* void Ogre::Material::setTextureAnisotropy */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSceneBlending
 * Signature:  (Ogre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSceneBlending_1_1SceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt
)
{
   // parameter conversions 
  const Ogre::SceneBlendType _cpp_sbt = (Ogre::SceneBlendType)sbt; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSceneBlending(_cpp_sbt);
} /* void Ogre::Material::setSceneBlending */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendTypeOgre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSeparateSceneBlending_1_1SceneBlendTypeVSceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt, 
  jint sbta
)
{
   // parameter conversions 
  const Ogre::SceneBlendType _cpp_sbt = (Ogre::SceneBlendType)sbt;
  const Ogre::SceneBlendType _cpp_sbta = (Ogre::SceneBlendType)sbta; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSeparateSceneBlending(_cpp_sbt, _cpp_sbta);
} /* void Ogre::Material::setSeparateSceneBlending */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSceneBlending_1_1SceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
)
{
   // parameter conversions 
  const Ogre::SceneBlendFactor _cpp_sourceFactor = (Ogre::SceneBlendFactor)sourceFactor;
  const Ogre::SceneBlendFactor _cpp_destFactor = (Ogre::SceneBlendFactor)destFactor; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSceneBlending(_cpp_sourceFactor, _cpp_destFactor);
} /* void Ogre::Material::setSceneBlending */


/*
 * Class:      org.ogre4j.Material
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSeparateSceneBlending_1_1SceneBlendFactorVSceneBlendFactorVSceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor, 
  jint sourceFactorAlpha, 
  jint destFactorAlpha
)
{
   // parameter conversions 
  const Ogre::SceneBlendFactor _cpp_sourceFactor = (Ogre::SceneBlendFactor)sourceFactor;
  const Ogre::SceneBlendFactor _cpp_destFactor = (Ogre::SceneBlendFactor)destFactor;
  const Ogre::SceneBlendFactor _cpp_sourceFactorAlpha = (Ogre::SceneBlendFactor)sourceFactorAlpha;
  const Ogre::SceneBlendFactor _cpp_destFactorAlpha = (Ogre::SceneBlendFactor)destFactorAlpha; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSeparateSceneBlending(_cpp_sourceFactor, _cpp_destFactor, _cpp_sourceFactorAlpha, _cpp_destFactorAlpha);
} /* void Ogre::Material::setSeparateSceneBlending */


/*
 * Class:      org.ogre4j.Material
 * Method:     _notifyNeedsRecompile()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::_notifyNeedsRecompile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1notifyNeedsRecompile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyNeedsRecompile();
} /* void Ogre::Material::_notifyNeedsRecompile */


/*
 * Class:      org.ogre4j.Material
 * Method:     setLodLevels()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setLodLevels
 * Signature:  (Ogre_Material_LodDistanceList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setLodLevels_1_1LodDistanceListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodDistances
)
{
   // parameter conversions 
  const Ogre::Material::LodDistanceList* _cpp_lodDistances = reinterpret_cast< const Ogre::Material::LodDistanceList* >(lodDistances); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLodLevels(*_cpp_lodDistances);
} /* void Ogre::Material::setLodLevels */


/*
 * Class:      org.ogre4j.Material
 * Method:     getLodDistanceIterator()
 * Type:       non-virtual method
 * Definition: LodDistanceIterator Ogre::Material::getLodDistanceIterator
 * Signature:  ()Ogre_Material_LodDistanceIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getLodDistanceIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Material::LodDistanceIterator* _cpp_result = new Ogre::Material::LodDistanceIterator( _cpp_this->getLodDistanceIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* LodDistanceIterator Ogre::Material::getLodDistanceIterator */


/*
 * Class:      org.ogre4j.Material
 * Method:     getLodIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getLodIndex
 * Signature:  (float)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getLodIndex_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat d
)
{
   // parameter conversions 
  float _cpp_d = d; 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getLodIndex(_cpp_d) ; 
   return _cpp_result;
} /* unsigned short Ogre::Material::getLodIndex */


/*
 * Class:      org.ogre4j.Material
 * Method:     getLodIndexSquaredDepth()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getLodIndexSquaredDepth
 * Signature:  (float)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getLodIndexSquaredDepth_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat squaredDepth
)
{
   // parameter conversions 
  float _cpp_squaredDepth = squaredDepth; 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getLodIndexSquaredDepth(_cpp_squaredDepth) ; 
   return _cpp_result;
} /* unsigned short Ogre::Material::getLodIndexSquaredDepth */


/*
 * Class:      org.ogre4j.Material
 * Method:     touch()
 * Type:       virtual method
 * Definition: void Ogre::Material::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->touch();
} /* void Ogre::Material::touch */


/*
 * Class:      org.ogre4j.Material
 * Method:     applyTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::applyTextureAliases
 * Signature:  (Ogre_AliasTextureNamePairListZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1applyTextureAliases_1_1AliasTextureNamePairListRbV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aliasList, 
  jboolean apply
)
{
   // parameter conversions 
  const Ogre::AliasTextureNamePairList* _cpp_aliasList = reinterpret_cast< const Ogre::AliasTextureNamePairList* >(aliasList);
  const bool _cpp_apply = apply ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->applyTextureAliases(*_cpp_aliasList, _cpp_apply) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Material::applyTextureAliases */


/*
 * Class:      org.ogre4j.Material
 * Method:     getCompilationRequired()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::getCompilationRequired
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1getCompilationRequired_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCompilationRequired() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Material::getCompilationRequired */


/*
 * Class:      org.ogre4j.Material
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepare();
} /* virtual void Ogre::Resource::prepare */


/*
 * Class:      org.ogre4j.Material
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
)
{
   // parameter conversions 
  bool _cpp_backgroundThread = backgroundThread ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->load(_cpp_backgroundThread);
} /* virtual void Ogre::Resource::load */


/*
 * Class:      org.ogre4j.Material
 * Method:     reload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reload();
} /* virtual void Ogre::Resource::reload */


/*
 * Class:      org.ogre4j.Material
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isReloadable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isReloadable */


/*
 * Class:      org.ogre4j.Material
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isManuallyLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isManuallyLoaded */


/*
 * Class:      org.ogre4j.Material
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unload();
} /* virtual void Ogre::Resource::unload */


/*
 * Class:      org.ogre4j.Material
 * Method:     getSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSize() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Resource::getSize */


/*
 * Class:      org.ogre4j.Material
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getName */


/*
 * Class:      org.ogre4j.Material
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getHandle() ; 
   return _cpp_result;
} /* virtual ResourceHandle Ogre::Resource::getHandle */


/*
 * Class:      org.ogre4j.Material
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPrepared() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isPrepared */


/*
 * Class:      org.ogre4j.Material
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isLoaded */


/*
 * Class:      org.ogre4j.Material
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoading() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isLoading */


/*
 * Class:      org.ogre4j.Material
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: virtual LoadingState Ogre::Resource::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Resource::LoadingState _cpp_result = _cpp_this->getLoadingState() ; 
   return _cpp_result;
} /* virtual LoadingState Ogre::Resource::getLoadingState */


/*
 * Class:      org.ogre4j.Material
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isBackgroundLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isBackgroundLoaded */


/*
 * Class:      org.ogre4j.Material
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
)
{
   // parameter conversions 
  bool _cpp_bl = bl ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBackgroundLoaded(_cpp_bl);
} /* virtual void Ogre::Resource::setBackgroundLoaded */


/*
 * Class:      org.ogre4j.Material
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->escalateLoading();
} /* virtual void Ogre::Resource::escalateLoading */


/*
 * Class:      org.ogre4j.Material
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_lis);
} /* virtual void Ogre::Resource::addListener */


/*
 * Class:      org.ogre4j.Material
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_lis);
} /* virtual void Ogre::Resource::removeListener */


/*
 * Class:      org.ogre4j.Material
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getGroup() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getGroup */


/*
 * Class:      org.ogre4j.Material
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
)
{
   // parameter conversions 
  std::string _cpp_newGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, newGroup, _cpp_newGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->changeGroupOwnership(_cpp_newGroup);
} /* virtual void Ogre::Resource::changeGroupOwnership */


/*
 * Class:      org.ogre4j.Material
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager* _cpp_result = _cpp_this->getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceManager* Ogre::Resource::getCreator */


/*
 * Class:      org.ogre4j.Material
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getOrigin() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getOrigin */


/*
 * Class:      org.ogre4j.Material
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
)
{
   // parameter conversions 
  std::string _cpp_origin = ""; org::xbig::jni::to_stdstring(_jni_env_, origin, _cpp_origin); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyOrigin(_cpp_origin);
} /* virtual void Ogre::Resource::_notifyOrigin */


/*
 * Class:      org.ogre4j.Material
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getStateCount() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Resource::getStateCount */


/*
 * Class:      org.ogre4j.Material
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_dirtyState();
} /* virtual void Ogre::Resource::_dirtyState */


/*
 * Class:      org.ogre4j.Material
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundLoadingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundLoadingComplete */


/*
 * Class:      org.ogre4j.Material
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundPreparingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundPreparingComplete */


/*
 * Class:      org.ogre4j.Material
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.Material
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.Material
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.Material
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.Material
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.Material
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.Material
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::Material* _cpp_this = reinterpret_cast<const Ogre::Material*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.Material
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Material without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::Material::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.Material
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Material::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Material 
   // cast pointer to C++ object 
   Ogre::Material* _cpp_this = reinterpret_cast<Ogre::Material*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Material::__delete */
