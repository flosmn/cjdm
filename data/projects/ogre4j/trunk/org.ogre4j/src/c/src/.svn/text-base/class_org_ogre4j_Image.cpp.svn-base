///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Image.h"

// import header files of original library
#include <OgreImage.h>



/*
 * Class:      org.ogre4j.Image
 * Method:     Image()
 * Type:       constructor
 * Definition: Ogre::Image::Image
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1_1createImage (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Image 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Image 
   Ogre::Image* _cpp_this = new Ogre::Image(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Image::Image */


/*
 * Class:      org.ogre4j.Image
 * Method:     Image()
 * Type:       constructor
 * Definition: Ogre::Image::Image
 * Signature:  (Ogre_Image)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1_1createImage_1_1ImageR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong img
)
{
   // constructor of class Ogre::Image 
   
   // parameter conversions 
  const Ogre::Image* _cpp_img = reinterpret_cast< const Ogre::Image* >(img); 
   
   // create new instance of class Ogre::Image 
   Ogre::Image* _cpp_this = new Ogre::Image(*_cpp_img); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Image::Image */


/*
 * Class:      org.ogre4j.Image
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::operator=
 * Signature:  (Ogre_Image)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1operatorAssignment_1_1ImageR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong img
)
{
   // parameter conversions 
  const Ogre::Image* _cpp_img = reinterpret_cast< const Ogre::Image* >(img); 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->operator=(*_cpp_img) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::operator= */


/*
 * Class:      org.ogre4j.Image
 * Method:     flipAroundY()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::flipAroundY
 * Signature:  ()Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1flipAroundY (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->flipAroundY() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::flipAroundY */


/*
 * Class:      org.ogre4j.Image
 * Method:     flipAroundX()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::flipAroundX
 * Signature:  ()Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1flipAroundX (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->flipAroundX() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::flipAroundX */


/*
 * Class:      org.ogre4j.Image
 * Method:     loadDynamicImage()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadDynamicImage
 * Signature:  (unsigned_charIIIOgre_PixelFormatZII)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadDynamicImage_1_1ucharpivivivPixelFormatvbviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pData, 
  jint uWidth, 
  jint uHeight, 
  jint depth, 
  jint eFormat, 
  jboolean autoDelete, 
  jint numFaces, 
  jint numMipMaps
)
{
   // parameter conversions 
  unsigned char* _cpp_pData = reinterpret_cast<unsigned char*>(pData);
  size_t _cpp_uWidth = uWidth;
  size_t _cpp_uHeight = uHeight;
  size_t _cpp_depth = depth;
  Ogre::PixelFormat _cpp_eFormat = (Ogre::PixelFormat)eFormat;
  bool _cpp_autoDelete = autoDelete ? true : false;
  size_t _cpp_numFaces = numFaces;
  size_t _cpp_numMipMaps = numMipMaps; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->loadDynamicImage(_cpp_pData, _cpp_uWidth, _cpp_uHeight, _cpp_depth, _cpp_eFormat, _cpp_autoDelete, _cpp_numFaces, _cpp_numMipMaps) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::loadDynamicImage */


/*
 * Class:      org.ogre4j.Image
 * Method:     loadDynamicImage()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadDynamicImage
 * Signature:  (unsigned_charIIOgre_PixelFormat)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadDynamicImage_1_1ucharpivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pData, 
  jint uWidth, 
  jint uHeight, 
  jint eFormat
)
{
   // parameter conversions 
  unsigned char* _cpp_pData = reinterpret_cast<unsigned char*>(pData);
  size_t _cpp_uWidth = uWidth;
  size_t _cpp_uHeight = uHeight;
  Ogre::PixelFormat _cpp_eFormat = (Ogre::PixelFormat)eFormat; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->loadDynamicImage(_cpp_pData, _cpp_uWidth, _cpp_uHeight, _cpp_eFormat) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::loadDynamicImage */


/*
 * Class:      org.ogre4j.Image
 * Method:     loadRawData()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadRawData
 * Signature:  (Ogre_DataStreamPtrIIIOgre_PixelFormatII)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadRawData_1_1DataStreamPtrrivivivPixelFormatviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jint uWidth, 
  jint uHeight, 
  jint uDepth, 
  jint eFormat, 
  jint numFaces, 
  jint numMipMaps
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  size_t _cpp_uWidth = uWidth;
  size_t _cpp_uHeight = uHeight;
  size_t _cpp_uDepth = uDepth;
  Ogre::PixelFormat _cpp_eFormat = (Ogre::PixelFormat)eFormat;
  size_t _cpp_numFaces = numFaces;
  size_t _cpp_numMipMaps = numMipMaps; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->loadRawData(*_cpp_stream, _cpp_uWidth, _cpp_uHeight, _cpp_uDepth, _cpp_eFormat, _cpp_numFaces, _cpp_numMipMaps) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::loadRawData */


/*
 * Class:      org.ogre4j.Image
 * Method:     loadRawData()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadRawData
 * Signature:  (Ogre_DataStreamPtrIIOgre_PixelFormat)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadRawData_1_1DataStreamPtrrivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jint uWidth, 
  jint uHeight, 
  jint eFormat
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  size_t _cpp_uWidth = uWidth;
  size_t _cpp_uHeight = uHeight;
  Ogre::PixelFormat _cpp_eFormat = (Ogre::PixelFormat)eFormat; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->loadRawData(*_cpp_stream, _cpp_uWidth, _cpp_uHeight, _cpp_eFormat) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::loadRawData */


/*
 * Class:      org.ogre4j.Image
 * Method:     load()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::load
 * Signature:  (std_stringstd_string)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1load_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strFileName, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_strFileName = ""; org::xbig::jni::to_stdstring(_jni_env_, strFileName, _cpp_strFileName); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->load(_cpp_strFileName, _cpp_groupName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::load */


/*
 * Class:      org.ogre4j.Image
 * Method:     load()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::load
 * Signature:  (Ogre_DataStreamPtrstd_string)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1load_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring type
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_type = ""; org::xbig::jni::to_stdstring(_jni_env_, type, _cpp_type); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Image* _cpp_result = & _cpp_this->load(*_cpp_stream, _cpp_type) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Image& Ogre::Image::load */


/*
 * Class:      org.ogre4j.Image
 * Method:     save()
 * Type:       non-virtual method
 * Definition: void Ogre::Image::save
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1save_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->save(_cpp_filename);
} /* void Ogre::Image::save */


/*
 * Class:      org.ogre4j.Image
 * Method:     encode()
 * Type:       non-virtual method
 * Definition: DataStreamPtr Ogre::Image::encode
 * Signature:  (std_string)Ogre_DataStreamPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1encode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring formatextension
)
{
   // parameter conversions 
  std::string _cpp_formatextension = ""; org::xbig::jni::to_stdstring(_jni_env_, formatextension, _cpp_formatextension); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::DataStreamPtr* _cpp_result = new Ogre::DataStreamPtr( _cpp_this->encode(_cpp_formatextension) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* DataStreamPtr Ogre::Image::encode */


/*
 * Class:      org.ogre4j.Image
 * Method:     getData()
 * Type:       non-virtual method
 * Definition: uchar* Ogre::Image::getData
 * Signature:  ()unsigned_char
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   unsigned char* _cpp_result = _cpp_this->getData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* uchar* Ogre::Image::getData */


/*
 * Class:      org.ogre4j.Image
 * Method:     getData_const()
 * Type:       non-virtual method
 * Definition: const uchar* Ogre::Image::getData
 * Signature:  ()unsigned_char
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getData_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char* _cpp_result = _cpp_this->getData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const uchar* Ogre::Image::getData */


/*
 * Class:      org.ogre4j.Image
 * Method:     getSize()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSize() ; 
   return _cpp_result;
} /* size_t Ogre::Image::getSize */


/*
 * Class:      org.ogre4j.Image
 * Method:     getNumMipmaps()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getNumMipmaps
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getNumMipmaps_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumMipmaps() ; 
   return _cpp_result;
} /* size_t Ogre::Image::getNumMipmaps */


/*
 * Class:      org.ogre4j.Image
 * Method:     hasFlag()
 * Type:       non-virtual method
 * Definition: bool Ogre::Image::hasFlag
 * Signature:  (Ogre_ImageFlags)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Image__1hasFlag_1_1ImageFlagsV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint imgFlag
)
{
   // parameter conversions 
  const Ogre::ImageFlags _cpp_imgFlag = (Ogre::ImageFlags)imgFlag; 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasFlag(_cpp_imgFlag) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Image::hasFlag */


/*
 * Class:      org.ogre4j.Image
 * Method:     getWidth()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getWidth() ; 
   return _cpp_result;
} /* size_t Ogre::Image::getWidth */


/*
 * Class:      org.ogre4j.Image
 * Method:     getHeight()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getHeight() ; 
   return _cpp_result;
} /* size_t Ogre::Image::getHeight */


/*
 * Class:      org.ogre4j.Image
 * Method:     getDepth()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getDepth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getDepth() ; 
   return _cpp_result;
} /* size_t Ogre::Image::getDepth */


/*
 * Class:      org.ogre4j.Image
 * Method:     getNumFaces()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getNumFaces
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getNumFaces_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumFaces() ; 
   return _cpp_result;
} /* size_t Ogre::Image::getNumFaces */


/*
 * Class:      org.ogre4j.Image
 * Method:     getRowSpan()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getRowSpan
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getRowSpan_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getRowSpan() ; 
   return _cpp_result;
} /* size_t Ogre::Image::getRowSpan */


/*
 * Class:      org.ogre4j.Image
 * Method:     getFormat()
 * Type:       non-virtual method
 * Definition: PixelFormat Ogre::Image::getFormat
 * Signature:  ()Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getFormat_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = _cpp_this->getFormat() ; 
   return _cpp_result;
} /* PixelFormat Ogre::Image::getFormat */


/*
 * Class:      org.ogre4j.Image
 * Method:     getBPP()
 * Type:       non-virtual method
 * Definition: uchar Ogre::Image::getBPP
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_Image__1getBPP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getBPP() ; 
   return _cpp_result;
} /* uchar Ogre::Image::getBPP */


/*
 * Class:      org.ogre4j.Image
 * Method:     getHasAlpha()
 * Type:       non-virtual method
 * Definition: bool Ogre::Image::getHasAlpha
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Image__1getHasAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getHasAlpha() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Image::getHasAlpha */


/*
 * Class:      org.ogre4j.Image
 * Method:     getColourAt()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::Image::getColourAt
 * Signature:  (III)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getColourAt_1_1iviviv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint x, 
  jint y, 
  jint z
)
{
   // parameter conversions 
  int _cpp_x = x;
  int _cpp_y = y;
  int _cpp_z = z; 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->getColourAt(_cpp_x, _cpp_y, _cpp_z) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::Image::getColourAt */


/*
 * Class:      org.ogre4j.Image
 * Method:     getPixelBox()
 * Type:       non-virtual method
 * Definition: PixelBox Ogre::Image::getPixelBox
 * Signature:  (II)Ogre_PixelBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getPixelBox_1_1iviv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint face, 
  jint mipmap
)
{
   // parameter conversions 
  size_t _cpp_face = face;
  size_t _cpp_mipmap = mipmap; 
   
   // cast pointer to C++ object 
   const Ogre::Image* _cpp_this = reinterpret_cast<const Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelBox* _cpp_result = new Ogre::PixelBox( _cpp_this->getPixelBox(_cpp_face, _cpp_mipmap) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* PixelBox Ogre::Image::getPixelBox */


/*
 * Class:      org.ogre4j.Image
 * Method:     resize()
 * Type:       non-virtual method
 * Definition: void Ogre::Image::resize
 * Signature:  (unsigned_shortunsigned_shortOgre_Image_Filter)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1resize_1_1ushortvushortvFilterv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint width, 
  jint height, 
  jint filter
)
{
   // parameter conversions 
  unsigned short _cpp_width = width;
  unsigned short _cpp_height = height;
  Ogre::Image::Filter _cpp_filter = (Ogre::Image::Filter)filter; 
   
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resize(_cpp_width, _cpp_height, _cpp_filter);
} /* void Ogre::Image::resize */


/*
 * Class:      org.ogre4j.Image
 * Method:     applyGamma()
 * Type:       static method
 * Definition: static void Ogre::Image::applyGamma
 * Signature:  (unsigned_charfloatIunsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1applyGamma_1_1ucharpRealvivucharv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong buffer, 
  jfloat gamma, 
  jint size, 
  jshort bpp
)
{
   // static method of class Ogre::Image without return value 
   // parameter conversions 
  unsigned char* _cpp_buffer = reinterpret_cast<unsigned char*>(buffer);
  float _cpp_gamma = gamma;
  size_t _cpp_size = size;
  unsigned char _cpp_bpp = bpp; 
   
   // call library method 
   Ogre::Image::applyGamma(_cpp_buffer, _cpp_gamma, _cpp_size, _cpp_bpp);
} /* static void Ogre::Image::applyGamma */


/*
 * Class:      org.ogre4j.Image
 * Method:     scale()
 * Type:       static method
 * Definition: static void Ogre::Image::scale
 * Signature:  (Ogre_PixelBoxOgre_PixelBoxOgre_Image_Filter)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1scale_1_1PixelBoxRPixelBoxRFilterv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong src, 
  jlong dst, 
  jint filter
)
{
   // static method of class Ogre::Image without return value 
   // parameter conversions 
  const Ogre::PixelBox* _cpp_src = reinterpret_cast< const Ogre::PixelBox* >(src);
  const Ogre::PixelBox* _cpp_dst = reinterpret_cast< const Ogre::PixelBox* >(dst);
  Ogre::Image::Filter _cpp_filter = (Ogre::Image::Filter)filter; 
   
   // call library method 
   Ogre::Image::scale(*_cpp_src, *_cpp_dst, _cpp_filter);
} /* static void Ogre::Image::scale */


/*
 * Class:      org.ogre4j.Image
 * Method:     calculateSize()
 * Type:       static method
 * Definition: static size_t Ogre::Image::calculateSize
 * Signature:  (IIIIIOgre_PixelFormat)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1calculateSize_1_1ivivivivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint mipmaps, 
  jint faces, 
  jint width, 
  jint height, 
  jint depth, 
  jint format
)
{
   // static method of class Ogre::Image with return value 
   // parameter conversions 
  size_t _cpp_mipmaps = mipmaps;
  size_t _cpp_faces = faces;
  size_t _cpp_width = width;
  size_t _cpp_height = height;
  size_t _cpp_depth = depth;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format; 
   
   // call library method 
   const size_t _cpp_result = Ogre::Image::calculateSize(_cpp_mipmaps, _cpp_faces, _cpp_width, _cpp_height, _cpp_depth, _cpp_format); 
   return _cpp_result;
} /* static size_t Ogre::Image::calculateSize */


/*
 * Class:      org.ogre4j.Image
 * Method:     getFileExtFromMagic()
 * Type:       static method
 * Definition: static String Ogre::Image::getFileExtFromMagic
 * Signature:  (Ogre_DataStreamPtr)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Image__1getFileExtFromMagic_1_1DataStreamPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong stream
)
{
   // static method of class Ogre::Image with return value 
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream); 
   
   // call library method 
   const std::string _cpp_result = Ogre::Image::getFileExtFromMagic(*_cpp_stream); 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* static String Ogre::Image::getFileExtFromMagic */


/*
 * Class:      org.ogre4j.Image
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Image::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Image 
   // cast pointer to C++ object 
   Ogre::Image* _cpp_this = reinterpret_cast<Ogre::Image*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Image::__delete */
