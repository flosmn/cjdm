///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Vector3.h"

// import header files of original library
#include <OgreVector3.h>



/*
 * Class:      org.ogre4j.Vector3
 * Method:     Vector3()
 * Type:       constructor
 * Definition: Ogre::Vector3::Vector3
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1_1createVector3 (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Vector3 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Vector3 
   Ogre::Vector3* _cpp_this = new Ogre::Vector3(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector3::Vector3 */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     Vector3()
 * Type:       constructor
 * Definition: Ogre::Vector3::Vector3
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1_1createVector3_1_1RealVRealVRealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fX, 
  jfloat fY, 
  jfloat fZ
)
{
   // constructor of class Ogre::Vector3 
   
   // parameter conversions 
  const float _cpp_fX = fX;
  const float _cpp_fY = fY;
  const float _cpp_fZ = fZ; 
   
   // create new instance of class Ogre::Vector3 
   Ogre::Vector3* _cpp_this = new Ogre::Vector3(_cpp_fX, _cpp_fY, _cpp_fZ); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector3::Vector3 */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     Vector3()
 * Type:       constructor
 * Definition: Ogre::Vector3::Vector3
 * Signature:  (I)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1_1createVector3_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint afCoordinate
)
{
   // constructor of class Ogre::Vector3 
   
   // parameter conversions 
  const int _cpp_afCoordinate = afCoordinate; 
   
   // create new instance of class Ogre::Vector3 
   Ogre::Vector3* _cpp_this = new Ogre::Vector3(_cpp_afCoordinate); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector3::Vector3 */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     Vector3()
 * Type:       constructor
 * Definition: Ogre::Vector3::Vector3
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1_1createVector3_1_1Realp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r
)
{
   // constructor of class Ogre::Vector3 
   
   // parameter conversions 
  float* _cpp_r = reinterpret_cast<float*>(r); 
   
   // create new instance of class Ogre::Vector3 
   Ogre::Vector3* _cpp_this = new Ogre::Vector3(_cpp_r); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector3::Vector3 */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator[]_const()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1operatorIndex_1const_1_1iV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return _cpp_result;
} /* Real Ogre::Vector3::operator[] */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real& Ogre::Vector3::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorIndex_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   float& _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return reinterpret_cast<jlong>(&_cpp_result);
} /* Real& Ogre::Vector3::operator[] */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     ptr()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Vector3::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1ptr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Real* Ogre::Vector3::ptr */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     ptr_const()
 * Type:       non-virtual method
 * Definition: const Real* Ogre::Vector3::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1ptr_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Real* Ogre::Vector3::ptr */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator=
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorAssignment_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator=
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorAssignment_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScaler
)
{
   // parameter conversions 
  const float _cpp_fScaler = fScaler; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator=(_cpp_fScaler) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::operator==
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1operatorEqual_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rkVector) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::operator== */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::operator!=
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1operatorNotEqual_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rkVector) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::operator!= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::operator+
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorAddition_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator+(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::operator+ */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::operator-
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorSubtraction_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator-(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::operator- */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::operator *
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorMultiplication_1_1RealV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator *(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::operator * */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::operator *
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorMultiplication_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator *(*_cpp_rhs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::operator * */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::operator/
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorDivision_1_1RealV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator/(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::operator/ */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::operator/
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorDivision_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator/(*_cpp_rhs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::operator/ */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Vector3::operator+
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorAddition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator+() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Vector3::operator+ */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::operator-
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator-() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::operator- */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator+=
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorIncrementAndAssign_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator+=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator+= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator+=
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorIncrementAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator+=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator+= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator-=
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorDecrementAndAssign_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator-=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator-= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator-=
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorDecrementAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator-=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator-= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator *=
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorMultiplyAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator *=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator *= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator *=
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorMultiplyAndAssign_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator *=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator *= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator/=
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorDivideAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator/=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator/= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::Vector3::operator/=
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1operatorDivideAndAssign_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->operator/=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3& Ogre::Vector3::operator/= */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     length()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::length
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1length_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->length() ; 
   return _cpp_result;
} /* Real Ogre::Vector3::length */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     squaredLength()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::squaredLength
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1squaredLength_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->squaredLength() ; 
   return _cpp_result;
} /* Real Ogre::Vector3::squaredLength */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     distance()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::distance
 * Signature:  (Ogre_Vector3)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1distance_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->distance(*_cpp_rhs) ; 
   return _cpp_result;
} /* Real Ogre::Vector3::distance */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     squaredDistance()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::squaredDistance
 * Signature:  (Ogre_Vector3)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1squaredDistance_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->squaredDistance(*_cpp_rhs) ; 
   return _cpp_result;
} /* Real Ogre::Vector3::squaredDistance */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     dotProduct()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::dotProduct
 * Signature:  (Ogre_Vector3)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1dotProduct_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->dotProduct(*_cpp_vec) ; 
   return _cpp_result;
} /* Real Ogre::Vector3::dotProduct */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     absDotProduct()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::absDotProduct
 * Signature:  (Ogre_Vector3)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1absDotProduct_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->absDotProduct(*_cpp_vec) ; 
   return _cpp_result;
} /* Real Ogre::Vector3::absDotProduct */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     normalise()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector3::normalise
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1normalise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->normalise() ; 
   return _cpp_result;
} /* Real Ogre::Vector3::normalise */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     crossProduct()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::crossProduct
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1crossProduct_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->crossProduct(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::crossProduct */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     midPoint()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::midPoint
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1midPoint_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->midPoint(*_cpp_vec) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::midPoint */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator<()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::operator<
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1operatorLessThan_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator<(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::operator< */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     operator>()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::operator>
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1operatorGreaterThan_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator>(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::operator> */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     makeFloor()
 * Type:       non-virtual method
 * Definition: void Ogre::Vector3::makeFloor
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector3__1makeFloor_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cmp
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_cmp = reinterpret_cast< const Ogre::Vector3* >(cmp); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->makeFloor(*_cpp_cmp);
} /* void Ogre::Vector3::makeFloor */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     makeCeil()
 * Type:       non-virtual method
 * Definition: void Ogre::Vector3::makeCeil
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector3__1makeCeil_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cmp
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_cmp = reinterpret_cast< const Ogre::Vector3* >(cmp); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->makeCeil(*_cpp_cmp);
} /* void Ogre::Vector3::makeCeil */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     perpendicular()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::perpendicular
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1perpendicular_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->perpendicular() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::perpendicular */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     randomDeviant()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::randomDeviant
 * Signature:  (Ogre_RadianOgre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1randomDeviant_1_1RadianRVector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle, 
  jlong up
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle);
  const Ogre::Vector3* _cpp_up = reinterpret_cast< const Ogre::Vector3* >(up); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->randomDeviant(*_cpp_angle, *_cpp_up) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::randomDeviant */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     angleBetween()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Vector3::angleBetween
 * Signature:  (Ogre_Vector3)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1angleBetween_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_dest = reinterpret_cast< const Ogre::Vector3* >(dest); 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->angleBetween(*_cpp_dest) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Vector3::angleBetween */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getRotationTo()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Vector3::getRotationTo
 * Signature:  (Ogre_Vector3Ogre_Vector3)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getRotationTo_1_1Vector3RVector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest, 
  jlong fallbackAxis
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_dest = reinterpret_cast< const Ogre::Vector3* >(dest);
  const Ogre::Vector3* _cpp_fallbackAxis = reinterpret_cast< const Ogre::Vector3* >(fallbackAxis); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->getRotationTo(*_cpp_dest, *_cpp_fallbackAxis) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Vector3::getRotationTo */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     isZeroLength()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::isZeroLength
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1isZeroLength_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isZeroLength() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::isZeroLength */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     normalisedCopy()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::normalisedCopy
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1normalisedCopy_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->normalisedCopy() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::normalisedCopy */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     reflect()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Vector3::reflect
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1reflect_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong normal
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_normal = reinterpret_cast< const Ogre::Vector3* >(normal); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->reflect(*_cpp_normal) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Vector3::reflect */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     positionEquals()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::positionEquals
 * Signature:  (Ogre_Vector3float)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1positionEquals_1_1Vector3RRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs, 
  jfloat tolerance
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs);
  float _cpp_tolerance = tolerance; 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->positionEquals(*_cpp_rhs, _cpp_tolerance) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::positionEquals */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     positionCloses()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::positionCloses
 * Signature:  (Ogre_Vector3float)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1positionCloses_1_1Vector3RRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs, 
  jfloat tolerance
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs);
  float _cpp_tolerance = tolerance; 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->positionCloses(*_cpp_rhs, _cpp_tolerance) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::positionCloses */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     directionEquals()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector3::directionEquals
 * Signature:  (Ogre_Vector3Ogre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector3__1directionEquals_1_1Vector3RRadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs, 
  jlong tolerance
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs);
  const Ogre::Radian* _cpp_tolerance = reinterpret_cast< const Ogre::Radian* >(tolerance); 
   
   // cast pointer to C++ object 
   const Ogre::Vector3* _cpp_this = reinterpret_cast<const Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->directionEquals(*_cpp_rhs, *_cpp_tolerance) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector3::directionEquals */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Vector3::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector3__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Vector3 
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Vector3::__delete */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getx()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector3::x
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1getx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->x; 
   return _cpp_result;
} /* Real Ogre::Vector3::x */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     setx()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector3::x
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector3__1setx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this =reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->x = _cpp__jni_value_;
} /* Real Ogre::Vector3::x */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     gety()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector3::y
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1gety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->y; 
   return _cpp_result;
} /* Real Ogre::Vector3::y */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     sety()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector3::y
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector3__1sety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this =reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->y = _cpp__jni_value_;
} /* Real Ogre::Vector3::y */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getz()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector3::z
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector3__1getz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this = reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->z; 
   return _cpp_result;
} /* Real Ogre::Vector3::z */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     setz()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector3::z
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector3__1setz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Vector3* _cpp_this =reinterpret_cast<Ogre::Vector3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->z = _cpp__jni_value_;
} /* Real Ogre::Vector3::z */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::ZERO
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::ZERO ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::ZERO */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getUNIT_X()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::UNIT_X
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getUNIT_1X (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::UNIT_X ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::UNIT_X */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getUNIT_Y()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::UNIT_Y
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getUNIT_1Y (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::UNIT_Y ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::UNIT_Y */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getUNIT_Z()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::UNIT_Z
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getUNIT_1Z (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::UNIT_Z ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::UNIT_Z */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getNEGATIVE_UNIT_X()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::NEGATIVE_UNIT_X
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getNEGATIVE_1UNIT_1X (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::NEGATIVE_UNIT_X ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::NEGATIVE_UNIT_X */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getNEGATIVE_UNIT_Y()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::NEGATIVE_UNIT_Y
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getNEGATIVE_1UNIT_1Y (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::NEGATIVE_UNIT_Y ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::NEGATIVE_UNIT_Y */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getNEGATIVE_UNIT_Z()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::NEGATIVE_UNIT_Z
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getNEGATIVE_1UNIT_1Z (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::NEGATIVE_UNIT_Z ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::NEGATIVE_UNIT_Z */


/*
 * Class:      org.ogre4j.Vector3
 * Method:     getUNIT_SCALE()
 * Type:       getter for public attribute
 * Definition: const Vector3 Ogre::Vector3::UNIT_SCALE
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector3__1getUNIT_1SCALE (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & Ogre::Vector3::UNIT_SCALE ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3 Ogre::Vector3::UNIT_SCALE */
