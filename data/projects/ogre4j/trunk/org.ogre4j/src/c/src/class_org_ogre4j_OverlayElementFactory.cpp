///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_OverlayElementFactory.h"

// import header files of original library
#include <OgreOverlayElementFactory.h>



/*
 * Class:      org.ogre4j.OverlayElementFactory
 * Method:     createOverlayElement()
 * Type:       pure virtual method
 * Definition: virtual OverlayElement* Ogre::OverlayElementFactory::createOverlayElement
 * Signature:  (std_string)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayElementFactory__1createOverlayElement_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName
)
{
   // parameter conversions 
  std::string _cpp_instanceName = ""; org::xbig::jni::to_stdstring(_jni_env_, instanceName, _cpp_instanceName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::OverlayElementFactory* _cpp_this = reinterpret_cast<Ogre::OverlayElementFactory*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::OverlayElement* _cpp_result = _cpp_this->createOverlayElement(_cpp_instanceName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual OverlayElement* Ogre::OverlayElementFactory::createOverlayElement */


/*
 * Class:      org.ogre4j.OverlayElementFactory
 * Method:     destroyOverlayElement()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElementFactory::destroyOverlayElement
 * Signature:  (Ogre_OverlayElement)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayElementFactory__1destroyOverlayElement_1_1OverlayElementp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pElement
)
{
   // parameter conversions 
  Ogre::OverlayElement* _cpp_pElement = reinterpret_cast< Ogre::OverlayElement* >(pElement); 
   
   // cast pointer to C++ object 
   Ogre::OverlayElementFactory* _cpp_this = reinterpret_cast<Ogre::OverlayElementFactory*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyOverlayElement(_cpp_pElement);
} /* virtual void Ogre::OverlayElementFactory::destroyOverlayElement */


/*
 * Class:      org.ogre4j.OverlayElementFactory
 * Method:     getTypeName()
 * Type:       pure virtual method
 * Definition: virtual const String& Ogre::OverlayElementFactory::getTypeName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_OverlayElementFactory__1getTypeName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::OverlayElementFactory* _cpp_this = reinterpret_cast<const Ogre::OverlayElementFactory*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getTypeName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::OverlayElementFactory::getTypeName */


/*
 * Class:      org.ogre4j.OverlayElementFactory
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::OverlayElementFactory::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayElementFactory__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::OverlayElementFactory 
   // cast pointer to C++ object 
   Ogre::OverlayElementFactory* _cpp_this = reinterpret_cast<Ogre::OverlayElementFactory*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::OverlayElementFactory::__delete */
