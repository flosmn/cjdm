///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Entity.h"

// import header files of original library
#include <OgreEntity.h>



/*
 * Class:      org.ogre4j.Entity
 * Method:     getMesh()
 * Type:       non-virtual method
 * Definition: const MeshPtr& Ogre::Entity::getMesh
 * Signature:  ()Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getMesh_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = & _cpp_this->getMesh() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MeshPtr& Ogre::Entity::getMesh */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getSubEntity()
 * Type:       non-virtual method
 * Definition: SubEntity* Ogre::Entity::getSubEntity
 * Signature:  (I)Ogre_SubEntity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getSubEntity_1_1Iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong index
)
{
   // parameter conversions 
  unsigned int _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubEntity* _cpp_result = _cpp_this->getSubEntity(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubEntity* Ogre::Entity::getSubEntity */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getSubEntity()
 * Type:       non-virtual method
 * Definition: SubEntity* Ogre::Entity::getSubEntity
 * Signature:  (std_string)Ogre_SubEntity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getSubEntity_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubEntity* _cpp_result = _cpp_this->getSubEntity(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubEntity* Ogre::Entity::getSubEntity */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getNumSubEntities()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::Entity::getNumSubEntities
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getNumSubEntities_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getNumSubEntities() ; 
   return _cpp_result;
} /* unsigned int Ogre::Entity::getNumSubEntities */


/*
 * Class:      org.ogre4j.Entity
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: Entity* Ogre::Entity::clone
 * Signature:  (std_string)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1clone_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newName
)
{
   // parameter conversions 
  std::string _cpp_newName = ""; org::xbig::jni::to_stdstring(_jni_env_, newName, _cpp_newName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity* _cpp_result = _cpp_this->clone(_cpp_newName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Entity* Ogre::Entity::clone */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setMaterialName()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::setMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialName(_cpp_name);
} /* void Ogre::Entity::setMaterialName */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _notifyCurrentCamera()
 * Type:       virtual method
 * Definition: void Ogre::Entity::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* void Ogre::Entity::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: void Ogre::Entity::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* void Ogre::Entity::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getBoundingBox()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::Entity::getBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBoundingBox() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::Entity::getBoundingBox */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getChildObjectsBoundingBox()
 * Type:       non-virtual method
 * Definition: AxisAlignedBox Ogre::Entity::getChildObjectsBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getChildObjectsBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = new Ogre::AxisAlignedBox( _cpp_this->getChildObjectsBoundingBox() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AxisAlignedBox Ogre::Entity::getChildObjectsBoundingBox */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: void Ogre::Entity::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* void Ogre::Entity::_updateRenderQueue */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getMovableType()
 * Type:       virtual method
 * Definition: const String& Ogre::Entity::getMovableType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Entity__1getMovableType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMovableType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Entity::getMovableType */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getAnimationState()
 * Type:       non-virtual method
 * Definition: AnimationState* Ogre::Entity::getAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationState* _cpp_result = _cpp_this->getAnimationState(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationState* Ogre::Entity::getAnimationState */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getAllAnimationStates()
 * Type:       non-virtual method
 * Definition: AnimationStateSet* Ogre::Entity::getAllAnimationStates
 * Signature:  ()Ogre_AnimationStateSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getAllAnimationStates_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationStateSet* _cpp_result = _cpp_this->getAllAnimationStates() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationStateSet* Ogre::Entity::getAllAnimationStates */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setDisplaySkeleton()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::setDisplaySkeleton
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setDisplaySkeleton_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean display
)
{
   // parameter conversions 
  bool _cpp_display = display ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDisplaySkeleton(_cpp_display);
} /* void Ogre::Entity::setDisplaySkeleton */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getDisplaySkeleton()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::getDisplaySkeleton
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1getDisplaySkeleton_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getDisplaySkeleton() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::getDisplaySkeleton */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getManualLodLevel()
 * Type:       non-virtual method
 * Definition: Entity* Ogre::Entity::getManualLodLevel
 * Signature:  (I)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getManualLodLevel_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity* _cpp_result = _cpp_this->getManualLodLevel(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Entity* Ogre::Entity::getManualLodLevel */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getNumManualLodLevels()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Entity::getNumManualLodLevels
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Entity__1getNumManualLodLevels_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumManualLodLevels() ; 
   return _cpp_result;
} /* size_t Ogre::Entity::getNumManualLodLevels */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getCurrentLodIndex()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Entity::getCurrentLodIndex
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Entity__1getCurrentLodIndex (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getCurrentLodIndex() ; 
   return _cpp_result;
} /* ushort Ogre::Entity::getCurrentLodIndex */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setMeshLodBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::setMeshLodBias
 * Signature:  (floatunsigned_shortunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setMeshLodBias_1_1Realvushortvushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat factor, 
  jint maxDetailIndex, 
  jint minDetailIndex
)
{
   // parameter conversions 
  float _cpp_factor = factor;
  unsigned short _cpp_maxDetailIndex = maxDetailIndex;
  unsigned short _cpp_minDetailIndex = minDetailIndex; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMeshLodBias(_cpp_factor, _cpp_maxDetailIndex, _cpp_minDetailIndex);
} /* void Ogre::Entity::setMeshLodBias */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setMaterialLodBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::setMaterialLodBias
 * Signature:  (floatunsigned_shortunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setMaterialLodBias_1_1Realvushortvushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat factor, 
  jint maxDetailIndex, 
  jint minDetailIndex
)
{
   // parameter conversions 
  float _cpp_factor = factor;
  unsigned short _cpp_maxDetailIndex = maxDetailIndex;
  unsigned short _cpp_minDetailIndex = minDetailIndex; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMaterialLodBias(_cpp_factor, _cpp_maxDetailIndex, _cpp_minDetailIndex);
} /* void Ogre::Entity::setMaterialLodBias */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setPolygonModeOverrideable()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean PolygonModeOverrideable
)
{
   // parameter conversions 
  bool _cpp_PolygonModeOverrideable = PolygonModeOverrideable ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_PolygonModeOverrideable);
} /* void Ogre::Entity::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.Entity
 * Method:     attachObjectToBone()
 * Type:       non-virtual method
 * Definition: TagPoint* Ogre::Entity::attachObjectToBone
 * Signature:  (std_stringOgre_MovableObjectOgre_QuaternionOgre_Vector3)Ogre_TagPoint
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1attachObjectToBone_1_1StringRMovableObjectpQuaternionRVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring boneName, 
  jlong pMovable, 
  jlong offsetOrientation, 
  jlong offsetPosition
)
{
   // parameter conversions 
  std::string _cpp_boneName = ""; org::xbig::jni::to_stdstring(_jni_env_, boneName, _cpp_boneName); // calls c-tor only. Not operator= .;
  Ogre::MovableObject* _cpp_pMovable = reinterpret_cast< Ogre::MovableObject* >(pMovable);
  const Ogre::Quaternion* _cpp_offsetOrientation = reinterpret_cast< const Ogre::Quaternion* >(offsetOrientation);
  const Ogre::Vector3* _cpp_offsetPosition = reinterpret_cast< const Ogre::Vector3* >(offsetPosition); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TagPoint* _cpp_result = _cpp_this->attachObjectToBone(_cpp_boneName, _cpp_pMovable, *_cpp_offsetOrientation, *_cpp_offsetPosition) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TagPoint* Ogre::Entity::attachObjectToBone */


/*
 * Class:      org.ogre4j.Entity
 * Method:     detachObjectFromBone()
 * Type:       non-virtual method
 * Definition: MovableObject* Ogre::Entity::detachObjectFromBone
 * Signature:  (std_string)Ogre_MovableObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1detachObjectFromBone_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring movableName
)
{
   // parameter conversions 
  std::string _cpp_movableName = ""; org::xbig::jni::to_stdstring(_jni_env_, movableName, _cpp_movableName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject* _cpp_result = _cpp_this->detachObjectFromBone(_cpp_movableName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MovableObject* Ogre::Entity::detachObjectFromBone */


/*
 * Class:      org.ogre4j.Entity
 * Method:     detachObjectFromBone()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::detachObjectFromBone
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1detachObjectFromBone_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::MovableObject* _cpp_obj = reinterpret_cast< Ogre::MovableObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detachObjectFromBone(_cpp_obj);
} /* void Ogre::Entity::detachObjectFromBone */


/*
 * Class:      org.ogre4j.Entity
 * Method:     detachAllObjectsFromBone()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::detachAllObjectsFromBone
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1detachAllObjectsFromBone (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detachAllObjectsFromBone();
} /* void Ogre::Entity::detachAllObjectsFromBone */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getAttachedObjectIterator()
 * Type:       non-virtual method
 * Definition: ChildObjectListIterator Ogre::Entity::getAttachedObjectIterator
 * Signature:  ()Ogre_Entity_ChildObjectListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getAttachedObjectIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity::ChildObjectListIterator* _cpp_result = new Ogre::Entity::ChildObjectListIterator( _cpp_this->getAttachedObjectIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ChildObjectListIterator Ogre::Entity::getAttachedObjectIterator */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getBoundingRadius()
 * Type:       virtual method
 * Definition: Real Ogre::Entity::getBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Entity__1getBoundingRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingRadius() ; 
   return _cpp_result;
} /* Real Ogre::Entity::getBoundingRadius */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getWorldBoundingBox()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::Entity::getWorldBoundingBox
 * Signature:  (Z)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getWorldBoundingBox_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getWorldBoundingBox(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::Entity::getWorldBoundingBox */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getWorldBoundingSphere()
 * Type:       virtual method
 * Definition: const Sphere& Ogre::Entity::getWorldBoundingSphere
 * Signature:  (Z)Ogre_Sphere
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getWorldBoundingSphere_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Sphere* _cpp_result = & _cpp_this->getWorldBoundingSphere(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Sphere& Ogre::Entity::getWorldBoundingSphere */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getEdgeList()
 * Type:       virtual method
 * Definition: EdgeData* Ogre::Entity::getEdgeList
 * Signature:  ()Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::Entity::getEdgeList */


/*
 * Class:      org.ogre4j.Entity
 * Method:     hasEdgeList()
 * Type:       virtual method
 * Definition: bool Ogre::Entity::hasEdgeList
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1hasEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEdgeList() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::hasEdgeList */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getShadowVolumeRenderableIterator()
 * Type:       virtual method
 * Definition: ShadowRenderableListIterator Ogre::Entity::getShadowVolumeRenderableIterator
 * Signature:  (Ogre_ShadowTechniqueOgre_LightOgre_HardwareIndexBufferSharedPtrZfloatJ)Ogre_ShadowCaster_ShadowRenderableListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getShadowVolumeRenderableIterator_1_1ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowTechnique, 
  jlong light, 
  jlong indexBuffer, 
  jboolean extrudeVertices, 
  jfloat extrusionDistance, 
  jlong flags
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_shadowTechnique = (Ogre::ShadowTechnique)shadowTechnique;
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  bool _cpp_extrudeVertices = extrudeVertices ? true : false;
  float _cpp_extrusionDistance = extrusionDistance;
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCaster::ShadowRenderableListIterator* _cpp_result = new Ogre::ShadowCaster::ShadowRenderableListIterator( _cpp_this->getShadowVolumeRenderableIterator(_cpp_shadowTechnique, _cpp_light, _cpp_indexBuffer, _cpp_extrudeVertices, _cpp_extrusionDistance, _cpp_flags) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderableListIterator Ogre::Entity::getShadowVolumeRenderableIterator */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getBoneMatrices()
 * Type:       non-virtual method
 * Definition: const Matrix4* Ogre::Entity::_getBoneMatrices
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getBoneMatrices_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = _cpp_this->_getBoneMatrices() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix4* Ogre::Entity::_getBoneMatrices */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getNumBoneMatrices()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Entity::_getNumBoneMatrices
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Entity__1_1getNumBoneMatrices_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->_getNumBoneMatrices() ; 
   return _cpp_result;
} /* unsigned short Ogre::Entity::_getNumBoneMatrices */


/*
 * Class:      org.ogre4j.Entity
 * Method:     hasSkeleton()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::hasSkeleton
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1hasSkeleton_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasSkeleton() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::hasSkeleton */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getSkeleton()
 * Type:       non-virtual method
 * Definition: SkeletonInstance* Ogre::Entity::getSkeleton
 * Signature:  ()Ogre_SkeletonInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getSkeleton_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SkeletonInstance* _cpp_result = _cpp_this->getSkeleton() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SkeletonInstance* Ogre::Entity::getSkeleton */


/*
 * Class:      org.ogre4j.Entity
 * Method:     isHardwareAnimationEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::isHardwareAnimationEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1isHardwareAnimationEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isHardwareAnimationEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::isHardwareAnimationEnabled */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _notifyAttached()
 * Type:       virtual method
 * Definition: void Ogre::Entity::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* void Ogre::Entity::_notifyAttached */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getSoftwareAnimationRequests()
 * Type:       non-virtual method
 * Definition: int Ogre::Entity::getSoftwareAnimationRequests
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Entity__1getSoftwareAnimationRequests_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getSoftwareAnimationRequests() ; 
   return _cpp_result;
} /* int Ogre::Entity::getSoftwareAnimationRequests */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getSoftwareAnimationNormalsRequests()
 * Type:       non-virtual method
 * Definition: int Ogre::Entity::getSoftwareAnimationNormalsRequests
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Entity__1getSoftwareAnimationNormalsRequests_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getSoftwareAnimationNormalsRequests() ; 
   return _cpp_result;
} /* int Ogre::Entity::getSoftwareAnimationNormalsRequests */


/*
 * Class:      org.ogre4j.Entity
 * Method:     addSoftwareAnimationRequest()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::addSoftwareAnimationRequest
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1addSoftwareAnimationRequest_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean normalsAlso
)
{
   // parameter conversions 
  bool _cpp_normalsAlso = normalsAlso ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addSoftwareAnimationRequest(_cpp_normalsAlso);
} /* void Ogre::Entity::addSoftwareAnimationRequest */


/*
 * Class:      org.ogre4j.Entity
 * Method:     removeSoftwareAnimationRequest()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::removeSoftwareAnimationRequest
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1removeSoftwareAnimationRequest_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean normalsAlso
)
{
   // parameter conversions 
  bool _cpp_normalsAlso = normalsAlso ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeSoftwareAnimationRequest(_cpp_normalsAlso);
} /* void Ogre::Entity::removeSoftwareAnimationRequest */


/*
 * Class:      org.ogre4j.Entity
 * Method:     shareSkeletonInstanceWith()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::shareSkeletonInstanceWith
 * Signature:  (Ogre_Entity)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1shareSkeletonInstanceWith_1_1Entityp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong entity
)
{
   // parameter conversions 
  Ogre::Entity* _cpp_entity = reinterpret_cast< Ogre::Entity* >(entity); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shareSkeletonInstanceWith(_cpp_entity);
} /* void Ogre::Entity::shareSkeletonInstanceWith */


/*
 * Class:      org.ogre4j.Entity
 * Method:     hasVertexAnimation()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::hasVertexAnimation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1hasVertexAnimation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasVertexAnimation() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::hasVertexAnimation */


/*
 * Class:      org.ogre4j.Entity
 * Method:     stopSharingSkeletonInstance()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::stopSharingSkeletonInstance
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1stopSharingSkeletonInstance (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->stopSharingSkeletonInstance();
} /* void Ogre::Entity::stopSharingSkeletonInstance */


/*
 * Class:      org.ogre4j.Entity
 * Method:     sharesSkeletonInstance()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::sharesSkeletonInstance
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1sharesSkeletonInstance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->sharesSkeletonInstance() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::sharesSkeletonInstance */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getSkeletonInstanceSharingSet()
 * Type:       non-virtual method
 * Definition: const EntitySet* Ogre::Entity::getSkeletonInstanceSharingSet
 * Signature:  ()Ogre_Entity_EntitySet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getSkeletonInstanceSharingSet_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity::EntitySet* _cpp_result = _cpp_this->getSkeletonInstanceSharingSet() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const EntitySet* Ogre::Entity::getSkeletonInstanceSharingSet */


/*
 * Class:      org.ogre4j.Entity
 * Method:     refreshAvailableAnimationState()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::refreshAvailableAnimationState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1refreshAvailableAnimationState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->refreshAvailableAnimationState();
} /* void Ogre::Entity::refreshAvailableAnimationState */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _updateAnimation()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::_updateAnimation
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1updateAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateAnimation();
} /* void Ogre::Entity::_updateAnimation */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _isAnimated()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::_isAnimated
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1_1isAnimated_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_isAnimated() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::_isAnimated */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _isSkeletonAnimated()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::_isSkeletonAnimated
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1_1isSkeletonAnimated_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_isSkeletonAnimated() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::_isSkeletonAnimated */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getSkelAnimVertexData()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::Entity::_getSkelAnimVertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getSkelAnimVertexData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->_getSkelAnimVertexData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::Entity::_getSkelAnimVertexData */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getSoftwareVertexAnimVertexData()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::Entity::_getSoftwareVertexAnimVertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getSoftwareVertexAnimVertexData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->_getSoftwareVertexAnimVertexData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::Entity::_getSoftwareVertexAnimVertexData */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getHardwareVertexAnimVertexData()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::Entity::_getHardwareVertexAnimVertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getHardwareVertexAnimVertexData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->_getHardwareVertexAnimVertexData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::Entity::_getHardwareVertexAnimVertexData */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getSkelAnimTempBufferInfo()
 * Type:       non-virtual method
 * Definition: TempBlendedBufferInfo* Ogre::Entity::_getSkelAnimTempBufferInfo
 * Signature:  ()Ogre_TempBlendedBufferInfo
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getSkelAnimTempBufferInfo (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TempBlendedBufferInfo* _cpp_result = _cpp_this->_getSkelAnimTempBufferInfo() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TempBlendedBufferInfo* Ogre::Entity::_getSkelAnimTempBufferInfo */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getVertexAnimTempBufferInfo()
 * Type:       non-virtual method
 * Definition: TempBlendedBufferInfo* Ogre::Entity::_getVertexAnimTempBufferInfo
 * Signature:  ()Ogre_TempBlendedBufferInfo
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getVertexAnimTempBufferInfo (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TempBlendedBufferInfo* _cpp_result = _cpp_this->_getVertexAnimTempBufferInfo() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TempBlendedBufferInfo* Ogre::Entity::_getVertexAnimTempBufferInfo */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getTypeFlags()
 * Type:       virtual method
 * Definition: uint32 Ogre::Entity::getTypeFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getTypeFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTypeFlags() ; 
   return _cpp_result;
} /* uint32 Ogre::Entity::getTypeFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getVertexDataForBinding()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::Entity::getVertexDataForBinding
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getVertexDataForBinding (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->getVertexDataForBinding() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::Entity::getVertexDataForBinding */


/*
 * Class:      org.ogre4j.Entity
 * Method:     chooseVertexDataForBinding()
 * Type:       non-virtual method
 * Definition: VertexDataBindChoice Ogre::Entity::chooseVertexDataForBinding
 * Signature:  (Z)Ogre_Entity_VertexDataBindChoice
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Entity__1chooseVertexDataForBinding_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean hasVertexAnim
)
{
   // parameter conversions 
  bool _cpp_hasVertexAnim = hasVertexAnim ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Entity::VertexDataBindChoice _cpp_result = _cpp_this->chooseVertexDataForBinding(_cpp_hasVertexAnim) ; 
   return _cpp_result;
} /* VertexDataBindChoice Ogre::Entity::chooseVertexDataForBinding */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getBuffersMarkedForAnimation()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::_getBuffersMarkedForAnimation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1_1getBuffersMarkedForAnimation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_getBuffersMarkedForAnimation() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::_getBuffersMarkedForAnimation */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _markBuffersUsedForAnimation()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::_markBuffersUsedForAnimation
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1markBuffersUsedForAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_markBuffersUsedForAnimation();
} /* void Ogre::Entity::_markBuffersUsedForAnimation */


/*
 * Class:      org.ogre4j.Entity
 * Method:     isInitialised()
 * Type:       non-virtual method
 * Definition: bool Ogre::Entity::isInitialised
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1isInitialised_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInitialised() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Entity::isInitialised */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _initialise()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::_initialise
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1initialise_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean forceReinitialise
)
{
   // parameter conversions 
  bool _cpp_forceReinitialise = forceReinitialise ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_initialise(_cpp_forceReinitialise);
} /* void Ogre::Entity::_initialise */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _deinitialise()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::_deinitialise
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1deinitialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_deinitialise();
} /* void Ogre::Entity::_deinitialise */


/*
 * Class:      org.ogre4j.Entity
 * Method:     backgroundLoadingComplete()
 * Type:       non-virtual method
 * Definition: void Ogre::Entity::backgroundLoadingComplete
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1backgroundLoadingComplete_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->backgroundLoadingComplete(_cpp_res);
} /* void Ogre::Entity::backgroundLoadingComplete */


/*
 * Class:      org.ogre4j.Entity
 * Method:     visitRenderables()
 * Type:       virtual method
 * Definition: void Ogre::Entity::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::Entity::visitRenderables */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _notifyCreator()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCreator
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1notifyCreator_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCreator(_cpp_fact);
} /* virtual void Ogre::MovableObject::_notifyCreator */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getCreator()
 * Type:       virtual method
 * Definition: virtual MovableObjectFactory* Ogre::MovableObject::_getCreator
 * Signature:  ()Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getCreator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->_getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectFactory* Ogre::MovableObject::_getCreator */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _notifyManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1notifyManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_man = reinterpret_cast< Ogre::SceneManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyManager(_cpp_man);
} /* virtual void Ogre::MovableObject::_notifyManager */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getManager()
 * Type:       virtual method
 * Definition: virtual SceneManager* Ogre::MovableObject::_getManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneManager* Ogre::MovableObject::_getManager */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::MovableObject::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Entity__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::MovableObject::getName */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getParentNode()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::MovableObject::getParentNode
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getParentNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParentNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::MovableObject::getParentNode */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getParentSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::MovableObject::getParentSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getParentSceneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getParentSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::MovableObject::getParentSceneNode */


/*
 * Class:      org.ogre4j.Entity
 * Method:     isAttached()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isAttached
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1isAttached_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAttached() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isAttached */


/*
 * Class:      org.ogre4j.Entity
 * Method:     detatchFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::detatchFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1detatchFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detatchFromParent();
} /* virtual void Ogre::MovableObject::detatchFromParent */


/*
 * Class:      org.ogre4j.Entity
 * Method:     isInScene()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isInScene
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1isInScene_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInScene() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isInScene */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _notifyMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyMoved
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1notifyMoved (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyMoved();
} /* virtual void Ogre::MovableObject::_notifyMoved */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* virtual void Ogre::MovableObject::setVisible */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::getVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1getVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::getVisible */


/*
 * Class:      org.ogre4j.Entity
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isVisible */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::MovableObject::setRenderingDistance */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::MovableObject::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Entity__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::MovableObject::getRenderingDistance */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setUserObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserObject
 * Signature:  (Ogre_UserDefinedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setUserObject_1_1UserDefinedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::UserDefinedObject* _cpp_obj = reinterpret_cast< Ogre::UserDefinedObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserObject(_cpp_obj);
} /* virtual void Ogre::MovableObject::setUserObject */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getUserObject()
 * Type:       virtual method
 * Definition: virtual UserDefinedObject* Ogre::MovableObject::getUserObject
 * Signature:  ()Ogre_UserDefinedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getUserObject (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UserDefinedObject* _cpp_result = _cpp_this->getUserObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual UserDefinedObject* Ogre::MovableObject::getUserObject */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::MovableObject::setUserAny */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::MovableObject::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::MovableObject::getUserAny */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::MovableObject::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_Entity__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::MovableObject::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getParentNodeFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getParentNodeFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getParentNodeFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setQueryFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     addQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1addQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addQueryFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     removeQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeQueryFlags
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1removeQueryFlags_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeQueryFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getQueryFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getQueryFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getQueryFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setVisibilityFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     addVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1addVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addVisibilityFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     removeVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1removeVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeVisibilityFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getVisibilityFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getVisibilityFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setListener
 * Signature:  (Ogre_MovableObject_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MovableObject::Listener* _cpp_listener = reinterpret_cast< Ogre::MovableObject::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::MovableObject::setListener */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::MovableObject::getListener
 * Signature:  ()Ogre_MovableObject_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::MovableObject::getListener */


/*
 * Class:      org.ogre4j.Entity
 * Method:     queryLights()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::MovableObject::queryLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1queryLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->queryLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::MovableObject::queryLights */


/*
 * Class:      org.ogre4j.Entity
 * Method:     _getLightList()
 * Type:       virtual method
 * Definition: virtual LightList* Ogre::MovableObject::_getLightList
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1_1getLightList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->_getLightList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual LightList* Ogre::MovableObject::_getLightList */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getLightCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getLightCapBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getLightCapBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getDarkCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds
 * Signature:  (Ogre_Lightfloat)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getDarkCapBounds_1_1LightRRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jfloat dirLightExtrusionDist
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  float _cpp_dirLightExtrusionDist = dirLightExtrusionDist; 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getDarkCapBounds(*_cpp_light, _cpp_dirLightExtrusionDist) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setCastShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::MovableObject::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_enabled);
} /* void Ogre::MovableObject::setCastShadows */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1getCastShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::getCastShadows */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getPointExtrusionDistance()
 * Type:       virtual method
 * Definition: Real Ogre::MovableObject::getPointExtrusionDistance
 * Signature:  (Ogre_Light)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Entity__1getPointExtrusionDistance_1_1LightP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_l = reinterpret_cast< const Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointExtrusionDistance(_cpp_l) ; 
   return _cpp_result;
} /* Real Ogre::MovableObject::getPointExtrusionDistance */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setDebugDisplayEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setDebugDisplayEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugDisplayEnabled(_cpp_enabled);
} /* virtual void Ogre::MovableObject::setDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.Entity
 * Method:     isDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isDebugDisplayEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Entity__1isDebugDisplayEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugDisplayEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setDefaultQueryFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setDefaultQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::Entity without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::Entity::setDefaultQueryFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultQueryFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getDefaultQueryFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getDefaultQueryFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Entity with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::Entity::getDefaultQueryFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultQueryFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     setDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1setDefaultVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::Entity without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::Entity::setDefaultVisibilityFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getDefaultVisibilityFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Entity with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::Entity::getDefaultVisibilityFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.Entity
 * Method:     extrudeVertices()
 * Type:       static method
 * Definition: static void Ogre::ShadowCaster::extrudeVertices
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrIOgre_Vector4float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1extrudeVertices_1_1HardwareVertexBufferSharedPtrRivVector4RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexBuffer, 
  jint originalVertexCount, 
  jlong lightPos, 
  jfloat extrudeDist
)
{
   // static method of class Ogre::Entity without return value 
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_vertexBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(vertexBuffer);
  size_t _cpp_originalVertexCount = originalVertexCount;
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist; 
   
   // call library method 
   Ogre::Entity::extrudeVertices(*_cpp_vertexBuffer, _cpp_originalVertexCount, *_cpp_lightPos, _cpp_extrudeDist);
} /* static void Ogre::ShadowCaster::extrudeVertices */


/*
 * Class:      org.ogre4j.Entity
 * Method:     getAnimableValueNames()
 * Type:       non-virtual method
 * Definition: const StringVector& Ogre::AnimableObject::getAnimableValueNames
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1getAnimableValueNames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Entity* _cpp_this = reinterpret_cast<const Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getAnimableValueNames() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::AnimableObject::getAnimableValueNames */


/*
 * Class:      org.ogre4j.Entity
 * Method:     createAnimableValue()
 * Type:       virtual method
 * Definition: virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue
 * Signature:  (std_string)Ogre_AnimableValuePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Entity__1createAnimableValue_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring valueName
)
{
   // parameter conversions 
  std::string _cpp_valueName = ""; org::xbig::jni::to_stdstring(_jni_env_, valueName, _cpp_valueName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimableValuePtr* _cpp_result = new Ogre::AnimableValuePtr( _cpp_this->createAnimableValue(_cpp_valueName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue */


/*
 * Class:      org.ogre4j.Entity
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Entity::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Entity__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Entity 
   // cast pointer to C++ object 
   Ogre::Entity* _cpp_this = reinterpret_cast<Ogre::Entity*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Entity::__delete */
