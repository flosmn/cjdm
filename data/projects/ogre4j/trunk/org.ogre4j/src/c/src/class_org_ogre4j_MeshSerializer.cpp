///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_MeshSerializer.h"

// import header files of original library
#include <OgreMeshSerializer.h>



/*
 * Class:      org.ogre4j.MeshSerializer
 * Method:     MeshSerializer()
 * Type:       constructor
 * Definition: Ogre::MeshSerializer::MeshSerializer
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshSerializer__1_1createMeshSerializer (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::MeshSerializer 
   
   // parameter conversions 
   
   // create new instance of class Ogre::MeshSerializer 
   Ogre::MeshSerializer* _cpp_this = new Ogre::MeshSerializer(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::MeshSerializer::MeshSerializer */


/*
 * Class:      org.ogre4j.MeshSerializer
 * Method:     exportMesh()
 * Type:       non-virtual method
 * Definition: void Ogre::MeshSerializer::exportMesh
 * Signature:  (Ogre_Meshstd_stringOgre_Serializer_Endian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshSerializer__1exportMesh_1_1MeshPStringREndianv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pMesh, 
  jstring filename, 
  jint endianMode
)
{
   // parameter conversions 
  const Ogre::Mesh* _cpp_pMesh = reinterpret_cast< const Ogre::Mesh* >(pMesh);
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .;
  Ogre::Serializer::Endian _cpp_endianMode = (Ogre::Serializer::Endian)endianMode; 
   
   // cast pointer to C++ object 
   Ogre::MeshSerializer* _cpp_this = reinterpret_cast<Ogre::MeshSerializer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->exportMesh(_cpp_pMesh, _cpp_filename, _cpp_endianMode);
} /* void Ogre::MeshSerializer::exportMesh */


/*
 * Class:      org.ogre4j.MeshSerializer
 * Method:     importMesh()
 * Type:       non-virtual method
 * Definition: void Ogre::MeshSerializer::importMesh
 * Signature:  (Ogre_DataStreamPtrOgre_Mesh)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshSerializer__1importMesh_1_1DataStreamPtrrMeshp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jlong pDest
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  Ogre::Mesh* _cpp_pDest = reinterpret_cast< Ogre::Mesh* >(pDest); 
   
   // cast pointer to C++ object 
   Ogre::MeshSerializer* _cpp_this = reinterpret_cast<Ogre::MeshSerializer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->importMesh(*_cpp_stream, _cpp_pDest);
} /* void Ogre::MeshSerializer::importMesh */


/*
 * Class:      org.ogre4j.MeshSerializer
 * Method:     setListener()
 * Type:       non-virtual method
 * Definition: void Ogre::MeshSerializer::setListener
 * Signature:  (Ogre_MeshSerializerListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshSerializer__1setListener_1_1MeshSerializerListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MeshSerializerListener* _cpp_listener = reinterpret_cast< Ogre::MeshSerializerListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::MeshSerializer* _cpp_this = reinterpret_cast<Ogre::MeshSerializer*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* void Ogre::MeshSerializer::setListener */


/*
 * Class:      org.ogre4j.MeshSerializer
 * Method:     getListener()
 * Type:       non-virtual method
 * Definition: MeshSerializerListener* Ogre::MeshSerializer::getListener
 * Signature:  ()Ogre_MeshSerializerListener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MeshSerializer__1getListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MeshSerializer* _cpp_this = reinterpret_cast<Ogre::MeshSerializer*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshSerializerListener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshSerializerListener* Ogre::MeshSerializer::getListener */


/*
 * Class:      org.ogre4j.MeshSerializer
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::MeshSerializer::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MeshSerializer__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::MeshSerializer 
   // cast pointer to C++ object 
   Ogre::MeshSerializer* _cpp_this = reinterpret_cast<Ogre::MeshSerializer*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::MeshSerializer::__delete */
