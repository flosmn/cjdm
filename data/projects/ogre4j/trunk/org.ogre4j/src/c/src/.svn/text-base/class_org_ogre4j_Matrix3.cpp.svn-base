///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Matrix3.h"

// import header files of original library
#include <OgreMatrix3.h>



/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Matrix3()
 * Type:       constructor
 * Definition: Ogre::Matrix3::Matrix3
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3 (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Matrix3 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Matrix3 
   Ogre::Matrix3* _cpp_this = new Ogre::Matrix3(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Matrix3::Matrix3 */


///*
// * Class:      org.ogre4j.Matrix3
// * Method:     Matrix3()
// * Type:       constructor
// * Definition: Ogre::Matrix3::Matrix3
// * Signature:  (float)V
// */
//
//JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3_1_1RealV (
//  JNIEnv* _jni_env_, /* interface pointer */
//  jclass _jni_class_,  /* class pointer */
//  jfloat arr
//)
//{
//   // constructor of class Ogre::Matrix3 
//   
//   // parameter conversions 
//  const float _cpp_arr = arr; 
//   
//   // create new instance of class Ogre::Matrix3 
//   Ogre::Matrix3* _cpp_this = new Ogre::Matrix3(_cpp_arr); 
//   
//   // return casted pointer 
//   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
//   return _jni_pointer_;
//} /* Ogre::Matrix3::Matrix3 */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Matrix3()
 * Type:       constructor
 * Definition: Ogre::Matrix3::Matrix3
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkMatrix
)
{
   // constructor of class Ogre::Matrix3 
   
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkMatrix = reinterpret_cast< const Ogre::Matrix3* >(rkMatrix); 
   
   // create new instance of class Ogre::Matrix3 
   Ogre::Matrix3* _cpp_this = new Ogre::Matrix3(*_cpp_rkMatrix); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Matrix3::Matrix3 */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Matrix3()
 * Type:       constructor
 * Definition: Ogre::Matrix3::Matrix3
 * Signature:  (floatfloatfloatfloatfloatfloatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3_1_1RealvRealvRealvRealvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fEntry00, 
  jfloat fEntry01, 
  jfloat fEntry02, 
  jfloat fEntry10, 
  jfloat fEntry11, 
  jfloat fEntry12, 
  jfloat fEntry20, 
  jfloat fEntry21, 
  jfloat fEntry22
)
{
   // constructor of class Ogre::Matrix3 
   
   // parameter conversions 
  float _cpp_fEntry00 = fEntry00;
  float _cpp_fEntry01 = fEntry01;
  float _cpp_fEntry02 = fEntry02;
  float _cpp_fEntry10 = fEntry10;
  float _cpp_fEntry11 = fEntry11;
  float _cpp_fEntry12 = fEntry12;
  float _cpp_fEntry20 = fEntry20;
  float _cpp_fEntry21 = fEntry21;
  float _cpp_fEntry22 = fEntry22; 
   
   // create new instance of class Ogre::Matrix3 
   Ogre::Matrix3* _cpp_this = new Ogre::Matrix3(_cpp_fEntry00, _cpp_fEntry01, _cpp_fEntry02, _cpp_fEntry10, _cpp_fEntry11, _cpp_fEntry12, _cpp_fEntry20, _cpp_fEntry21, _cpp_fEntry22); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Matrix3::Matrix3 */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Matrix3::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorIndex_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iRow
)
{
   // parameter conversions 
  size_t _cpp_iRow = iRow; 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   float* _cpp_result = _cpp_this->operator[](_cpp_iRow) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Real* Ogre::Matrix3::operator[] */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     GetColumn()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Matrix3::GetColumn
 * Signature:  (I)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1GetColumn_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iCol
)
{
   // parameter conversions 
  size_t _cpp_iCol = iCol; 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->GetColumn(_cpp_iCol) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Matrix3::GetColumn */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SetColumn()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::SetColumn
 * Signature:  (IOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1SetColumn_1_1ivVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iCol, 
  jlong vec
)
{
   // parameter conversions 
  size_t _cpp_iCol = iCol;
  const Ogre::Vector3* _cpp_vec = reinterpret_cast< const Ogre::Vector3* >(vec); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->SetColumn(_cpp_iCol, *_cpp_vec);
} /* void Ogre::Matrix3::SetColumn */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromAxes
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromAxes_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xAxis, 
  jlong yAxis, 
  jlong zAxis
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_xAxis = reinterpret_cast< const Ogre::Vector3* >(xAxis);
  const Ogre::Vector3* _cpp_yAxis = reinterpret_cast< const Ogre::Vector3* >(yAxis);
  const Ogre::Vector3* _cpp_zAxis = reinterpret_cast< const Ogre::Vector3* >(zAxis); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromAxes(*_cpp_xAxis, *_cpp_yAxis, *_cpp_zAxis);
} /* void Ogre::Matrix3::FromAxes */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Matrix3& Ogre::Matrix3::operator=
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorAssignment_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkMatrix = reinterpret_cast< const Ogre::Matrix3* >(rkMatrix); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = & _cpp_this->operator=(*_cpp_rkMatrix) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3& Ogre::Matrix3::operator= */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::operator==
 * Signature:  (Ogre_Matrix3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1operatorEqual_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkMatrix = reinterpret_cast< const Ogre::Matrix3* >(rkMatrix); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rkMatrix) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::operator== */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::operator!=
 * Signature:  (Ogre_Matrix3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1operatorNotEqual_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkMatrix = reinterpret_cast< const Ogre::Matrix3* >(rkMatrix); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rkMatrix) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::operator!= */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator+
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorAddition_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkMatrix = reinterpret_cast< const Ogre::Matrix3* >(rkMatrix); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->operator+(*_cpp_rkMatrix) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::Matrix3::operator+ */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator-
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorSubtraction_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkMatrix = reinterpret_cast< const Ogre::Matrix3* >(rkMatrix); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->operator-(*_cpp_rkMatrix) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::Matrix3::operator- */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator *
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorMultiplication_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkMatrix = reinterpret_cast< const Ogre::Matrix3* >(rkMatrix); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->operator *(*_cpp_rkMatrix) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::Matrix3::operator * */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator-
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->operator-() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::Matrix3::operator- */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Matrix3::operator *
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorMultiplication_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator *(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Matrix3::operator * */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator *
 * Signature:  (float)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->operator *(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::Matrix3::operator * */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Transpose()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::Transpose
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1Transpose_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->Transpose() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::Matrix3::Transpose */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Inverse()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::Inverse
 * Signature:  (Ogre_Matrix3float)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1Inverse_1_1Matrix3rRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkInverse, 
  jfloat fTolerance
)
{
   // parameter conversions 
  Ogre::Matrix3* _cpp_rkInverse = reinterpret_cast< Ogre::Matrix3* >(rkInverse);
  float _cpp_fTolerance = fTolerance; 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Inverse(*_cpp_rkInverse, _cpp_fTolerance) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::Inverse */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Inverse()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::Inverse
 * Signature:  (float)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1Inverse_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fTolerance
)
{
   // parameter conversions 
  float _cpp_fTolerance = fTolerance; 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = new Ogre::Matrix3( _cpp_this->Inverse(_cpp_fTolerance) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix3 Ogre::Matrix3::Inverse */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Determinant()
 * Type:       non-virtual method
 * Definition: Real Ogre::Matrix3::Determinant
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Matrix3__1Determinant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->Determinant() ; 
   return _cpp_result;
} /* Real Ogre::Matrix3::Determinant */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SingularValueDecomposition()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::SingularValueDecomposition
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1SingularValueDecomposition_1_1Matrix3rVector3rMatrix3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkL, 
  jlong rkS, 
  jlong rkR
)
{
   // parameter conversions 
  Ogre::Matrix3* _cpp_rkL = reinterpret_cast< Ogre::Matrix3* >(rkL);
  Ogre::Vector3* _cpp_rkS = reinterpret_cast< Ogre::Vector3* >(rkS);
  Ogre::Matrix3* _cpp_rkR = reinterpret_cast< Ogre::Matrix3* >(rkR); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->SingularValueDecomposition(*_cpp_rkL, *_cpp_rkS, *_cpp_rkR);
} /* void Ogre::Matrix3::SingularValueDecomposition */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SingularValueComposition()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::SingularValueComposition
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1SingularValueComposition_1_1Matrix3RVector3RMatrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkL, 
  jlong rkS, 
  jlong rkR
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rkL = reinterpret_cast< const Ogre::Matrix3* >(rkL);
  const Ogre::Vector3* _cpp_rkS = reinterpret_cast< const Ogre::Vector3* >(rkS);
  const Ogre::Matrix3* _cpp_rkR = reinterpret_cast< const Ogre::Matrix3* >(rkR); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->SingularValueComposition(*_cpp_rkL, *_cpp_rkS, *_cpp_rkR);
} /* void Ogre::Matrix3::SingularValueComposition */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Orthonormalize()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::Orthonormalize
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1Orthonormalize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Orthonormalize();
} /* void Ogre::Matrix3::Orthonormalize */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     QDUDecomposition()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::QDUDecomposition
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1QDUDecomposition_1_1Matrix3rVector3rVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ, 
  jlong rkD, 
  jlong rkU
)
{
   // parameter conversions 
  Ogre::Matrix3* _cpp_rkQ = reinterpret_cast< Ogre::Matrix3* >(rkQ);
  Ogre::Vector3* _cpp_rkD = reinterpret_cast< Ogre::Vector3* >(rkD);
  Ogre::Vector3* _cpp_rkU = reinterpret_cast< Ogre::Vector3* >(rkU); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->QDUDecomposition(*_cpp_rkQ, *_cpp_rkD, *_cpp_rkU);
} /* void Ogre::Matrix3::QDUDecomposition */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SpectralNorm()
 * Type:       non-virtual method
 * Definition: Real Ogre::Matrix3::SpectralNorm
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Matrix3__1SpectralNorm_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->SpectralNorm() ; 
   return _cpp_result;
} /* Real Ogre::Matrix3::SpectralNorm */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToAxisAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::ToAxisAngle
 * Signature:  (Ogre_Vector3Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1ToAxisAngle_1_1Vector3rRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkAxis, 
  jlong rfAngle
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp_rkAxis = reinterpret_cast< Ogre::Vector3* >(rkAxis);
  Ogre::Radian* _cpp_rfAngle = reinterpret_cast< Ogre::Radian* >(rfAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ToAxisAngle(*_cpp_rkAxis, *_cpp_rfAngle);
} /* void Ogre::Matrix3::ToAxisAngle */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToAxisAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::ToAxisAngle
 * Signature:  (Ogre_Vector3Ogre_Degree)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1ToAxisAngle_1_1Vector3rDegreer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkAxis, 
  jlong rfAngle
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp_rkAxis = reinterpret_cast< Ogre::Vector3* >(rkAxis);
  Ogre::Degree* _cpp_rfAngle = reinterpret_cast< Ogre::Degree* >(rfAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ToAxisAngle(*_cpp_rkAxis, *_cpp_rfAngle);
} /* void Ogre::Matrix3::ToAxisAngle */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromAxisAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromAxisAngle
 * Signature:  (Ogre_Vector3Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromAxisAngle_1_1Vector3RRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkAxis, 
  jlong fRadians
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkAxis = reinterpret_cast< const Ogre::Vector3* >(rkAxis);
  const Ogre::Radian* _cpp_fRadians = reinterpret_cast< const Ogre::Radian* >(fRadians); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromAxisAngle(*_cpp_rkAxis, *_cpp_fRadians);
} /* void Ogre::Matrix3::FromAxisAngle */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesXYZ()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesXYZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesXYZ_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
)
{
   // parameter conversions 
  Ogre::Radian* _cpp_rfYAngle = reinterpret_cast< Ogre::Radian* >(rfYAngle);
  Ogre::Radian* _cpp_rfPAngle = reinterpret_cast< Ogre::Radian* >(rfPAngle);
  Ogre::Radian* _cpp_rfRAngle = reinterpret_cast< Ogre::Radian* >(rfRAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->ToEulerAnglesXYZ(*_cpp_rfYAngle, *_cpp_rfPAngle, *_cpp_rfRAngle) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::ToEulerAnglesXYZ */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesXZY()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesXZY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesXZY_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
)
{
   // parameter conversions 
  Ogre::Radian* _cpp_rfYAngle = reinterpret_cast< Ogre::Radian* >(rfYAngle);
  Ogre::Radian* _cpp_rfPAngle = reinterpret_cast< Ogre::Radian* >(rfPAngle);
  Ogre::Radian* _cpp_rfRAngle = reinterpret_cast< Ogre::Radian* >(rfRAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->ToEulerAnglesXZY(*_cpp_rfYAngle, *_cpp_rfPAngle, *_cpp_rfRAngle) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::ToEulerAnglesXZY */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesYXZ()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesYXZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesYXZ_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
)
{
   // parameter conversions 
  Ogre::Radian* _cpp_rfYAngle = reinterpret_cast< Ogre::Radian* >(rfYAngle);
  Ogre::Radian* _cpp_rfPAngle = reinterpret_cast< Ogre::Radian* >(rfPAngle);
  Ogre::Radian* _cpp_rfRAngle = reinterpret_cast< Ogre::Radian* >(rfRAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->ToEulerAnglesYXZ(*_cpp_rfYAngle, *_cpp_rfPAngle, *_cpp_rfRAngle) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::ToEulerAnglesYXZ */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesYZX()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesYZX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesYZX_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
)
{
   // parameter conversions 
  Ogre::Radian* _cpp_rfYAngle = reinterpret_cast< Ogre::Radian* >(rfYAngle);
  Ogre::Radian* _cpp_rfPAngle = reinterpret_cast< Ogre::Radian* >(rfPAngle);
  Ogre::Radian* _cpp_rfRAngle = reinterpret_cast< Ogre::Radian* >(rfRAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->ToEulerAnglesYZX(*_cpp_rfYAngle, *_cpp_rfPAngle, *_cpp_rfRAngle) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::ToEulerAnglesYZX */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesZXY()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesZXY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesZXY_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
)
{
   // parameter conversions 
  Ogre::Radian* _cpp_rfYAngle = reinterpret_cast< Ogre::Radian* >(rfYAngle);
  Ogre::Radian* _cpp_rfPAngle = reinterpret_cast< Ogre::Radian* >(rfPAngle);
  Ogre::Radian* _cpp_rfRAngle = reinterpret_cast< Ogre::Radian* >(rfRAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->ToEulerAnglesZXY(*_cpp_rfYAngle, *_cpp_rfPAngle, *_cpp_rfRAngle) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::ToEulerAnglesZXY */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesZYX()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesZYX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesZYX_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
)
{
   // parameter conversions 
  Ogre::Radian* _cpp_rfYAngle = reinterpret_cast< Ogre::Radian* >(rfYAngle);
  Ogre::Radian* _cpp_rfPAngle = reinterpret_cast< Ogre::Radian* >(rfPAngle);
  Ogre::Radian* _cpp_rfRAngle = reinterpret_cast< Ogre::Radian* >(rfRAngle); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->ToEulerAnglesZYX(*_cpp_rfYAngle, *_cpp_rfPAngle, *_cpp_rfRAngle) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::ToEulerAnglesZYX */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesXYZ()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesXYZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesXYZ_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fYAngle = reinterpret_cast< const Ogre::Radian* >(fYAngle);
  const Ogre::Radian* _cpp_fPAngle = reinterpret_cast< const Ogre::Radian* >(fPAngle);
  const Ogre::Radian* _cpp_fRAngle = reinterpret_cast< const Ogre::Radian* >(fRAngle); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromEulerAnglesXYZ(*_cpp_fYAngle, *_cpp_fPAngle, *_cpp_fRAngle);
} /* void Ogre::Matrix3::FromEulerAnglesXYZ */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesXZY()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesXZY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesXZY_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fYAngle = reinterpret_cast< const Ogre::Radian* >(fYAngle);
  const Ogre::Radian* _cpp_fPAngle = reinterpret_cast< const Ogre::Radian* >(fPAngle);
  const Ogre::Radian* _cpp_fRAngle = reinterpret_cast< const Ogre::Radian* >(fRAngle); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromEulerAnglesXZY(*_cpp_fYAngle, *_cpp_fPAngle, *_cpp_fRAngle);
} /* void Ogre::Matrix3::FromEulerAnglesXZY */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesYXZ()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesYXZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesYXZ_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fYAngle = reinterpret_cast< const Ogre::Radian* >(fYAngle);
  const Ogre::Radian* _cpp_fPAngle = reinterpret_cast< const Ogre::Radian* >(fPAngle);
  const Ogre::Radian* _cpp_fRAngle = reinterpret_cast< const Ogre::Radian* >(fRAngle); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromEulerAnglesYXZ(*_cpp_fYAngle, *_cpp_fPAngle, *_cpp_fRAngle);
} /* void Ogre::Matrix3::FromEulerAnglesYXZ */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesYZX()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesYZX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesYZX_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fYAngle = reinterpret_cast< const Ogre::Radian* >(fYAngle);
  const Ogre::Radian* _cpp_fPAngle = reinterpret_cast< const Ogre::Radian* >(fPAngle);
  const Ogre::Radian* _cpp_fRAngle = reinterpret_cast< const Ogre::Radian* >(fRAngle); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromEulerAnglesYZX(*_cpp_fYAngle, *_cpp_fPAngle, *_cpp_fRAngle);
} /* void Ogre::Matrix3::FromEulerAnglesYZX */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesZXY()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesZXY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesZXY_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fYAngle = reinterpret_cast< const Ogre::Radian* >(fYAngle);
  const Ogre::Radian* _cpp_fPAngle = reinterpret_cast< const Ogre::Radian* >(fPAngle);
  const Ogre::Radian* _cpp_fRAngle = reinterpret_cast< const Ogre::Radian* >(fRAngle); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromEulerAnglesZXY(*_cpp_fYAngle, *_cpp_fPAngle, *_cpp_fRAngle);
} /* void Ogre::Matrix3::FromEulerAnglesZXY */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesZYX()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesZYX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesZYX_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fYAngle = reinterpret_cast< const Ogre::Radian* >(fYAngle);
  const Ogre::Radian* _cpp_fPAngle = reinterpret_cast< const Ogre::Radian* >(fPAngle);
  const Ogre::Radian* _cpp_fRAngle = reinterpret_cast< const Ogre::Radian* >(fRAngle); 
   
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromEulerAnglesZYX(*_cpp_fYAngle, *_cpp_fPAngle, *_cpp_fRAngle);
} /* void Ogre::Matrix3::FromEulerAnglesZYX */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     hasScale()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::hasScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1hasScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix3* _cpp_this = reinterpret_cast<const Ogre::Matrix3*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasScale() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix3::hasScale */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     TensorProduct()
 * Type:       static method
 * Definition: static void Ogre::Matrix3::TensorProduct
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1TensorProduct_1_1Vector3RVector3RMatrix3r (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkU, 
  jlong rkV, 
  jlong rkProduct
)
{
   // static method of class Ogre::Matrix3 without return value 
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkU = reinterpret_cast< const Ogre::Vector3* >(rkU);
  const Ogre::Vector3* _cpp_rkV = reinterpret_cast< const Ogre::Vector3* >(rkV);
  Ogre::Matrix3* _cpp_rkProduct = reinterpret_cast< Ogre::Matrix3* >(rkProduct); 
   
   // call library method 
   Ogre::Matrix3::TensorProduct(*_cpp_rkU, *_cpp_rkV, *_cpp_rkProduct);
} /* static void Ogre::Matrix3::TensorProduct */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Matrix3::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Matrix3 
   // cast pointer to C++ object 
   Ogre::Matrix3* _cpp_this = reinterpret_cast<Ogre::Matrix3*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Matrix3::__delete */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     getEPSILON()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Matrix3::EPSILON
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Matrix3__1getEPSILON (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::Matrix3::EPSILON ; 
   return _cpp_result;
} /* const Real Ogre::Matrix3::EPSILON */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Matrix3 Ogre::Matrix3::ZERO
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = & Ogre::Matrix3::ZERO ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix3 Ogre::Matrix3::ZERO */


/*
 * Class:      org.ogre4j.Matrix3
 * Method:     getIDENTITY()
 * Type:       getter for public attribute
 * Definition: const Matrix3 Ogre::Matrix3::IDENTITY
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1getIDENTITY (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Matrix3* _cpp_result = & Ogre::Matrix3::IDENTITY ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix3 Ogre::Matrix3::IDENTITY */
