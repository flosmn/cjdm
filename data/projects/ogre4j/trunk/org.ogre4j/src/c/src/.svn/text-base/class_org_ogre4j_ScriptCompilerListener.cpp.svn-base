///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ScriptCompilerListener.h"

// import header files of original library
#include <OgreScriptCompiler.h>



/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     ScriptCompilerListener()
 * Type:       constructor
 * Definition: Ogre::ScriptCompilerListener::ScriptCompilerListener
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerListener__1_1createScriptCompilerListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ScriptCompilerListener 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ScriptCompilerListener 
   Ogre::ScriptCompilerListener* _cpp_this = new Ogre::ScriptCompilerListener(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ScriptCompilerListener::ScriptCompilerListener */


/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     importFile()
 * Type:       virtual method
 * Definition: virtual ConcreteNodeListPtr Ogre::ScriptCompilerListener::importFile
 * Signature:  (Ogre_ScriptCompilerstd_string)Ogre_ConcreteNodeListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerListener__1importFile_1_1ScriptCompilerpStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jstring name
)
{
   // parameter conversions 
  Ogre::ScriptCompiler* _cpp_compiler = reinterpret_cast< Ogre::ScriptCompiler* >(compiler);
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerListener* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerListener*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ConcreteNodeListPtr* _cpp_result = new Ogre::ConcreteNodeListPtr( _cpp_this->importFile(_cpp_compiler, _cpp_name) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ConcreteNodeListPtr Ogre::ScriptCompilerListener::importFile */


/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     preConversion()
 * Type:       virtual method
 * Definition: virtual void Ogre::ScriptCompilerListener::preConversion
 * Signature:  (Ogre_ScriptCompilerOgre_ConcreteNodeListPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerListener__1preConversion_1_1ScriptCompilerpConcreteNodeListPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jlong nodes
)
{
   // parameter conversions 
  Ogre::ScriptCompiler* _cpp_compiler = reinterpret_cast< Ogre::ScriptCompiler* >(compiler);
  Ogre::ConcreteNodeListPtr* _cpp_nodes = reinterpret_cast< Ogre::ConcreteNodeListPtr* >(nodes); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerListener* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->preConversion(_cpp_compiler, *_cpp_nodes);
} /* virtual void Ogre::ScriptCompilerListener::preConversion */


/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     postConversion()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ScriptCompilerListener::postConversion
 * Signature:  (Ogre_ScriptCompilerOgre_AbstractNodeListPtr)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompilerListener__1postConversion_1_1ScriptCompilerpAbstractNodeListPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jlong a2
)
{
   // parameter conversions 
  Ogre::ScriptCompiler* _cpp_compiler = reinterpret_cast< Ogre::ScriptCompiler* >(compiler);
  const Ogre::AbstractNodeListPtr* _cpp_a2 = reinterpret_cast< const Ogre::AbstractNodeListPtr* >(a2); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerListener* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerListener*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->postConversion(_cpp_compiler, *_cpp_a2) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ScriptCompilerListener::postConversion */


/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     handleError()
 * Type:       virtual method
 * Definition: virtual void Ogre::ScriptCompilerListener::handleError
 * Signature:  (Ogre_ScriptCompilerunsigned_intstd_stringIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerListener__1handleError_1_1ScriptCompilerpuint32vStringRivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jlong code, 
  jstring file, 
  jint line, 
  jstring msg
)
{
   // parameter conversions 
  Ogre::ScriptCompiler* _cpp_compiler = reinterpret_cast< Ogre::ScriptCompiler* >(compiler);
  unsigned int _cpp_code = code;
  std::string _cpp_file = ""; org::xbig::jni::to_stdstring(_jni_env_, file, _cpp_file); // calls c-tor only. Not operator= .;
  int _cpp_line = line;
  std::string _cpp_msg = ""; org::xbig::jni::to_stdstring(_jni_env_, msg, _cpp_msg); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerListener* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->handleError(_cpp_compiler, _cpp_code, _cpp_file, _cpp_line, _cpp_msg);
} /* virtual void Ogre::ScriptCompilerListener::handleError */


/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     handleEvent()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ScriptCompilerListener::handleEvent
 * Signature:  (Ogre_ScriptCompilerstd_stringstd_vector__Ogre_Any__Ogre_Any)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompilerListener__1handleEvent_1_1ScriptCompilerpStringRstd_1vector_1_1Ogre_1Any_1_1rOgre_1Anyp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jstring name, 
  jlong args, 
  jlong retval
)
{
   // parameter conversions 
  Ogre::ScriptCompiler* _cpp_compiler = reinterpret_cast< Ogre::ScriptCompiler* >(compiler);
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::vector< Ogre::Any >* _cpp_args = reinterpret_cast< std::vector< Ogre::Any >* >(args);
  Ogre::Any* _cpp_retval = reinterpret_cast< Ogre::Any* >(retval); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerListener* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerListener*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->handleEvent(_cpp_compiler, _cpp_name, *_cpp_args, _cpp_retval) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ScriptCompilerListener::handleEvent */


/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     createObject()
 * Type:       virtual method
 * Definition: virtual Ogre::Any Ogre::ScriptCompilerListener::createObject
 * Signature:  (Ogre_ScriptCompilerstd_stringstd_vector__Ogre_Any__)Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerListener__1createObject_1_1ScriptCompilerpStringRstd_1vector_1_1Ogre_1Any_1_1r (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jstring type, 
  jlong args
)
{
   // parameter conversions 
  Ogre::ScriptCompiler* _cpp_compiler = reinterpret_cast< Ogre::ScriptCompiler* >(compiler);
  std::string _cpp_type = ""; org::xbig::jni::to_stdstring(_jni_env_, type, _cpp_type); // calls c-tor only. Not operator= .;
  std::vector< Ogre::Any >* _cpp_args = reinterpret_cast< std::vector< Ogre::Any >* >(args); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerListener* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerListener*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = new Ogre::Any( _cpp_this->createObject(_cpp_compiler, _cpp_type, *_cpp_args) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Ogre::Any Ogre::ScriptCompilerListener::createObject */


/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ScriptCompilerListener::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerListener__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ScriptCompilerListener 
   // cast pointer to C++ object 
   Ogre::ScriptCompilerListener* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerListener*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ScriptCompilerListener::__delete */
