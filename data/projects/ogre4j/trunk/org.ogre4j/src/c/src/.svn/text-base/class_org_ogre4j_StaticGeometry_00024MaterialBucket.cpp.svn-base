///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_StaticGeometry_00024MaterialBucket.h"

// import header files of original library
#include <OgreStaticGeometry.h>



/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     MaterialBucket()
 * Type:       constructor
 * Definition: Ogre::StaticGeometry::MaterialBucket::MaterialBucket
 * Signature:  (Ogre_StaticGeometry_LODBucketstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1_1createMaterialBucket_1_1LODBucketpStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jstring materialName
)
{
   // constructor of class Ogre::StaticGeometry::MaterialBucket 
   
   // parameter conversions 
  Ogre::StaticGeometry::LODBucket* _cpp_parent = reinterpret_cast< Ogre::StaticGeometry::LODBucket* >(parent);
  std::string _cpp_materialName = ""; org::xbig::jni::to_stdstring(_jni_env_, materialName, _cpp_materialName); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::StaticGeometry::MaterialBucket 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = new Ogre::StaticGeometry::MaterialBucket(_cpp_parent, _cpp_materialName); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::StaticGeometry::MaterialBucket::MaterialBucket */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: LODBucket* Ogre::StaticGeometry::MaterialBucket::getParent
 * Signature:  ()Ogre_StaticGeometry_LODBucket
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StaticGeometry::LODBucket* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* LODBucket* Ogre::StaticGeometry::MaterialBucket::getParent */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     getMaterialName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::StaticGeometry::MaterialBucket::getMaterialName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1getMaterialName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMaterialName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::StaticGeometry::MaterialBucket::getMaterialName */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     assign()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::MaterialBucket::assign
 * Signature:  (Ogre_StaticGeometry_QueuedGeometry)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1assign_1_1QueuedGeometryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong qsm
)
{
   // parameter conversions 
  Ogre::StaticGeometry::QueuedGeometry* _cpp_qsm = reinterpret_cast< Ogre::StaticGeometry::QueuedGeometry* >(qsm); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->assign(_cpp_qsm);
} /* void Ogre::StaticGeometry::MaterialBucket::assign */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     build()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::MaterialBucket::build
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1build_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean stencilShadows
)
{
   // parameter conversions 
  bool _cpp_stencilShadows = stencilShadows ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->build(_cpp_stencilShadows);
} /* void Ogre::StaticGeometry::MaterialBucket::build */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     addRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::MaterialBucket::addRenderables
 * Signature:  (Ogre_RenderQueueunsigned_charfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1addRenderables_1_1RenderQueuepuint8vRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue, 
  jshort group, 
  jfloat camSquaredDist
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue);
  unsigned char _cpp_group = group;
  float _cpp_camSquaredDist = camSquaredDist; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderables(_cpp_queue, _cpp_group, _cpp_camSquaredDist);
} /* void Ogre::StaticGeometry::MaterialBucket::addRenderables */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     getMaterial()
 * Type:       non-virtual method
 * Definition: const MaterialPtr& Ogre::StaticGeometry::MaterialBucket::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = & _cpp_this->getMaterial() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MaterialPtr& Ogre::StaticGeometry::MaterialBucket::getMaterial */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     getGeometryIterator()
 * Type:       non-virtual method
 * Definition: GeometryIterator Ogre::StaticGeometry::MaterialBucket::getGeometryIterator
 * Signature:  ()Ogre_StaticGeometry_MaterialBucket_GeometryIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1getGeometryIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StaticGeometry::MaterialBucket::GeometryIterator* _cpp_result = new Ogre::StaticGeometry::MaterialBucket::GeometryIterator( _cpp_this->getGeometryIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GeometryIterator Ogre::StaticGeometry::MaterialBucket::getGeometryIterator */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     getCurrentTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::StaticGeometry::MaterialBucket::getCurrentTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1getCurrentTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getCurrentTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::StaticGeometry::MaterialBucket::getCurrentTechnique */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     dump()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::MaterialBucket::dump
 * Signature:  (std_ofstream)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1dump_1_1std_1ofstreamr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong of
)
{
   // parameter conversions 
  std::ofstream* _cpp_of = reinterpret_cast< std::ofstream* >(of); 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->dump(*_cpp_of);
} /* void Ogre::StaticGeometry::MaterialBucket::dump */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     visitRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::MaterialBucket::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::StaticGeometry::MaterialBucket::visitRenderables */


/*
 * Class:      org.ogre4j.StaticGeometry.00024MaterialBucket
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::StaticGeometry::MaterialBucket::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024MaterialBucket__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::StaticGeometry::MaterialBucket 
   // cast pointer to C++ object 
   Ogre::StaticGeometry::MaterialBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::MaterialBucket*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::StaticGeometry::MaterialBucket::__delete */
