///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderQueueInvocation.h"

// import header files of original library
#include <OgreRenderQueueInvocation.h>



/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     RenderQueueInvocation()
 * Type:       constructor
 * Definition: Ogre::RenderQueueInvocation::RenderQueueInvocation
 * Signature:  (unsigned_charstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueueInvocation__1_1createRenderQueueInvocation_1_1uint8vStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jshort renderQueueGroupID, 
  jstring invocationName
)
{
   // constructor of class Ogre::RenderQueueInvocation 
   
   // parameter conversions 
  unsigned char _cpp_renderQueueGroupID = renderQueueGroupID;
  std::string _cpp_invocationName = ""; org::xbig::jni::to_stdstring(_jni_env_, invocationName, _cpp_invocationName); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::RenderQueueInvocation 
   Ogre::RenderQueueInvocation* _cpp_this = new Ogre::RenderQueueInvocation(_cpp_renderQueueGroupID, _cpp_invocationName); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RenderQueueInvocation::RenderQueueInvocation */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     getRenderQueueGroupID()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::RenderQueueInvocation::getRenderQueueGroupID
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_RenderQueueInvocation__1getRenderQueueGroupID_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<const Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroupID() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::RenderQueueInvocation::getRenderQueueGroupID */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     getInvocationName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::RenderQueueInvocation::getInvocationName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderQueueInvocation__1getInvocationName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<const Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getInvocationName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::RenderQueueInvocation::getInvocationName */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     setSolidsOrganisation()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderQueueInvocation::setSolidsOrganisation
 * Signature:  (Ogre_QueuedRenderableCollection_OrganisationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocation__1setSolidsOrganisation_1_1QueuedRenderableCollection_1OrganisationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint org
)
{
   // parameter conversions 
  Ogre::QueuedRenderableCollection::OrganisationMode _cpp_org = (Ogre::QueuedRenderableCollection::OrganisationMode)org; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSolidsOrganisation(_cpp_org);
} /* virtual void Ogre::RenderQueueInvocation::setSolidsOrganisation */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     getSolidsOrganisation()
 * Type:       virtual method
 * Definition: virtual QueuedRenderableCollection::OrganisationMode Ogre::RenderQueueInvocation::getSolidsOrganisation
 * Signature:  ()Ogre_QueuedRenderableCollection_OrganisationMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderQueueInvocation__1getSolidsOrganisation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<const Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::QueuedRenderableCollection::OrganisationMode _cpp_result = _cpp_this->getSolidsOrganisation() ; 
   return _cpp_result;
} /* virtual QueuedRenderableCollection::OrganisationMode Ogre::RenderQueueInvocation::getSolidsOrganisation */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     setSuppressShadows()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderQueueInvocation::setSuppressShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocation__1setSuppressShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean suppress
)
{
   // parameter conversions 
  bool _cpp_suppress = suppress ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSuppressShadows(_cpp_suppress);
} /* virtual void Ogre::RenderQueueInvocation::setSuppressShadows */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     getSuppressShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::RenderQueueInvocation::getSuppressShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderQueueInvocation__1getSuppressShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<const Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getSuppressShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::RenderQueueInvocation::getSuppressShadows */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     setSuppressRenderStateChanges()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderQueueInvocation::setSuppressRenderStateChanges
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocation__1setSuppressRenderStateChanges_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean suppress
)
{
   // parameter conversions 
  bool _cpp_suppress = suppress ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSuppressRenderStateChanges(_cpp_suppress);
} /* virtual void Ogre::RenderQueueInvocation::setSuppressRenderStateChanges */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     getSuppressRenderStateChanges()
 * Type:       virtual method
 * Definition: virtual bool Ogre::RenderQueueInvocation::getSuppressRenderStateChanges
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderQueueInvocation__1getSuppressRenderStateChanges_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<const Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getSuppressRenderStateChanges() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::RenderQueueInvocation::getSuppressRenderStateChanges */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     invoke()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderQueueInvocation::invoke
 * Signature:  (Ogre_RenderQueueGroupOgre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocation__1invoke_1_1RenderQueueGrouppSceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong group, 
  jlong targetSceneManager
)
{
   // parameter conversions 
  Ogre::RenderQueueGroup* _cpp_group = reinterpret_cast< Ogre::RenderQueueGroup* >(group);
  Ogre::SceneManager* _cpp_targetSceneManager = reinterpret_cast< Ogre::SceneManager* >(targetSceneManager); 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->invoke(_cpp_group, _cpp_targetSceneManager);
} /* virtual void Ogre::RenderQueueInvocation::invoke */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderQueueInvocation::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocation__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderQueueInvocation 
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocation* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocation*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderQueueInvocation::__delete */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     getRENDER_QUEUE_INVOCATION_SHADOWS()
 * Type:       getter for public attribute
 * Definition: String Ogre::RenderQueueInvocation::RENDER_QUEUE_INVOCATION_SHADOWS
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderQueueInvocation__1getRENDER_1QUEUE_1INVOCATION_1SHADOWS (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const std::string _cpp_result = Ogre::RenderQueueInvocation::RENDER_QUEUE_INVOCATION_SHADOWS ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::RenderQueueInvocation::RENDER_QUEUE_INVOCATION_SHADOWS */


/*
 * Class:      org.ogre4j.RenderQueueInvocation
 * Method:     setRENDER_QUEUE_INVOCATION_SHADOWS()
 * Type:       setter for public attribute
 * Definition: String Ogre::RenderQueueInvocation::RENDER_QUEUE_INVOCATION_SHADOWS
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocation__1setRENDER_1QUEUE_1INVOCATION_1SHADOWS (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // call library method 
   Ogre::RenderQueueInvocation::RENDER_QUEUE_INVOCATION_SHADOWS = _cpp__jni_value_;
} /* String Ogre::RenderQueueInvocation::RENDER_QUEUE_INVOCATION_SHADOWS */
