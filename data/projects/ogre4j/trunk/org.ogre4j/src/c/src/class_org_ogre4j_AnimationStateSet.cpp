///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_AnimationStateSet.h"

// import header files of original library
#include <OgreAnimationState.h>



/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     AnimationStateSet()
 * Type:       constructor
 * Definition: Ogre::AnimationStateSet::AnimationStateSet
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1_1createAnimationStateSet (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::AnimationStateSet 
   
   // parameter conversions 
   
   // create new instance of class Ogre::AnimationStateSet 
   Ogre::AnimationStateSet* _cpp_this = new Ogre::AnimationStateSet(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AnimationStateSet::AnimationStateSet */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     AnimationStateSet()
 * Type:       constructor
 * Definition: Ogre::AnimationStateSet::AnimationStateSet
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1_1createAnimationStateSet_1_1AnimationStateSetR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rhs
)
{
   // constructor of class Ogre::AnimationStateSet 
   
   // parameter conversions 
  const Ogre::AnimationStateSet* _cpp_rhs = reinterpret_cast< const Ogre::AnimationStateSet* >(rhs); 
   
   // create new instance of class Ogre::AnimationStateSet 
   Ogre::AnimationStateSet* _cpp_this = new Ogre::AnimationStateSet(*_cpp_rhs); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::AnimationStateSet::AnimationStateSet */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     createAnimationState()
 * Type:       non-virtual method
 * Definition: AnimationState* Ogre::AnimationStateSet::createAnimationState
 * Signature:  (std_stringfloatfloatfloatZ)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1createAnimationState_1_1StringRRealvRealvRealvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring animName, 
  jfloat timePos, 
  jfloat length, 
  jfloat weight, 
  jboolean enabled
)
{
   // parameter conversions 
  std::string _cpp_animName = ""; org::xbig::jni::to_stdstring(_jni_env_, animName, _cpp_animName); // calls c-tor only. Not operator= .;
  float _cpp_timePos = timePos;
  float _cpp_length = length;
  float _cpp_weight = weight;
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationState* _cpp_result = _cpp_this->createAnimationState(_cpp_animName, _cpp_timePos, _cpp_length, _cpp_weight, _cpp_enabled) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationState* Ogre::AnimationStateSet::createAnimationState */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     getAnimationState()
 * Type:       non-virtual method
 * Definition: AnimationState* Ogre::AnimationStateSet::getAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1getAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<const Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationState* _cpp_result = _cpp_this->getAnimationState(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationState* Ogre::AnimationStateSet::getAnimationState */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     hasAnimationState()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationStateSet::hasAnimationState
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationStateSet__1hasAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<const Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasAnimationState(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationStateSet::hasAnimationState */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     removeAnimationState()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationStateSet::removeAnimationState
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationStateSet__1removeAnimationState_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAnimationState(_cpp_name);
} /* void Ogre::AnimationStateSet::removeAnimationState */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     removeAllAnimationStates()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationStateSet::removeAllAnimationStates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationStateSet__1removeAllAnimationStates (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllAnimationStates();
} /* void Ogre::AnimationStateSet::removeAllAnimationStates */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     getAnimationStateIterator()
 * Type:       non-virtual method
 * Definition: AnimationStateIterator Ogre::AnimationStateSet::getAnimationStateIterator
 * Signature:  ()Ogre_AnimationStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1getAnimationStateIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimationStateIterator* _cpp_result = new Ogre::AnimationStateIterator( _cpp_this->getAnimationStateIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AnimationStateIterator Ogre::AnimationStateSet::getAnimationStateIterator */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     getAnimationStateIterator_const()
 * Type:       non-virtual method
 * Definition: ConstAnimationStateIterator Ogre::AnimationStateSet::getAnimationStateIterator
 * Signature:  ()Ogre_ConstAnimationStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1getAnimationStateIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<const Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ConstAnimationStateIterator* _cpp_result = new Ogre::ConstAnimationStateIterator( _cpp_this->getAnimationStateIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ConstAnimationStateIterator Ogre::AnimationStateSet::getAnimationStateIterator */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     copyMatchingState()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationStateSet::copyMatchingState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationStateSet__1copyMatchingState_1_1AnimationStateSetp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong target
)
{
   // parameter conversions 
  Ogre::AnimationStateSet* _cpp_target = reinterpret_cast< Ogre::AnimationStateSet* >(target); 
   
   // cast pointer to C++ object 
   const Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<const Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyMatchingState(_cpp_target);
} /* void Ogre::AnimationStateSet::copyMatchingState */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     _notifyDirty()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationStateSet::_notifyDirty
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationStateSet__1_1notifyDirty (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyDirty();
} /* void Ogre::AnimationStateSet::_notifyDirty */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     getDirtyFrameNumber()
 * Type:       non-virtual method
 * Definition: unsigned long Ogre::AnimationStateSet::getDirtyFrameNumber
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1getDirtyFrameNumber_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<const Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getDirtyFrameNumber() ; 
   return _cpp_result;
} /* unsigned long Ogre::AnimationStateSet::getDirtyFrameNumber */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     _notifyAnimationStateEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::AnimationStateSet::_notifyAnimationStateEnabled
 * Signature:  (Ogre_AnimationStateZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationStateSet__1_1notifyAnimationStateEnabled_1_1AnimationStatepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong target, 
  jboolean enabled
)
{
   // parameter conversions 
  Ogre::AnimationState* _cpp_target = reinterpret_cast< Ogre::AnimationState* >(target);
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAnimationStateEnabled(_cpp_target, _cpp_enabled);
} /* void Ogre::AnimationStateSet::_notifyAnimationStateEnabled */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     hasEnabledAnimationState()
 * Type:       non-virtual method
 * Definition: bool Ogre::AnimationStateSet::hasEnabledAnimationState
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_AnimationStateSet__1hasEnabledAnimationState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<const Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEnabledAnimationState() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::AnimationStateSet::hasEnabledAnimationState */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     getEnabledAnimationStateIterator()
 * Type:       non-virtual method
 * Definition: ConstEnabledAnimationStateIterator Ogre::AnimationStateSet::getEnabledAnimationStateIterator
 * Signature:  ()Ogre_ConstEnabledAnimationStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_AnimationStateSet__1getEnabledAnimationStateIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<const Ogre::AnimationStateSet*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ConstEnabledAnimationStateIterator* _cpp_result = new Ogre::ConstEnabledAnimationStateIterator( _cpp_this->getEnabledAnimationStateIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ConstEnabledAnimationStateIterator Ogre::AnimationStateSet::getEnabledAnimationStateIterator */


/*
 * Class:      org.ogre4j.AnimationStateSet
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::AnimationStateSet::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_AnimationStateSet__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::AnimationStateSet 
   // cast pointer to C++ object 
   Ogre::AnimationStateSet* _cpp_this = reinterpret_cast<Ogre::AnimationStateSet*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::AnimationStateSet::__delete */
