///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ConvexBody.h"

// import header files of original library
#include <OgreConvexBody.h>



/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     ConvexBody()
 * Type:       constructor
 * Definition: Ogre::ConvexBody::ConvexBody
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ConvexBody__1_1createConvexBody (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ConvexBody 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ConvexBody 
   Ogre::ConvexBody* _cpp_this = new Ogre::ConvexBody(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ConvexBody::ConvexBody */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     ConvexBody()
 * Type:       constructor
 * Definition: Ogre::ConvexBody::ConvexBody
 * Signature:  (Ogre_ConvexBody)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ConvexBody__1_1createConvexBody_1_1ConvexBodyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong cpy
)
{
   // constructor of class Ogre::ConvexBody 
   
   // parameter conversions 
  const Ogre::ConvexBody* _cpp_cpy = reinterpret_cast< const Ogre::ConvexBody* >(cpy); 
   
   // create new instance of class Ogre::ConvexBody 
   Ogre::ConvexBody* _cpp_this = new Ogre::ConvexBody(*_cpp_cpy); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ConvexBody::ConvexBody */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     define()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::define
 * Signature:  (Ogre_Frustum)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1define_1_1FrustumR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong frustum
)
{
   // parameter conversions 
  const Ogre::Frustum* _cpp_frustum = reinterpret_cast< const Ogre::Frustum* >(frustum); 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->define(*_cpp_frustum);
} /* void Ogre::ConvexBody::define */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     define()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::define
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1define_1_1AxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aab
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_aab = reinterpret_cast< const Ogre::AxisAlignedBox* >(aab); 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->define(*_cpp_aab);
} /* void Ogre::ConvexBody::define */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     clip()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::clip
 * Signature:  (Ogre_Frustum)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1clip_1_1FrustumR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong frustum
)
{
   // parameter conversions 
  const Ogre::Frustum* _cpp_frustum = reinterpret_cast< const Ogre::Frustum* >(frustum); 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clip(*_cpp_frustum);
} /* void Ogre::ConvexBody::clip */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     clip()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::clip
 * Signature:  (Ogre_AxisAlignedBox)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1clip_1_1AxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aab
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_aab = reinterpret_cast< const Ogre::AxisAlignedBox* >(aab); 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clip(*_cpp_aab);
} /* void Ogre::ConvexBody::clip */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     clip()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::clip
 * Signature:  (Ogre_ConvexBody)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1clip_1_1ConvexBodyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong body
)
{
   // parameter conversions 
  const Ogre::ConvexBody* _cpp_body = reinterpret_cast< const Ogre::ConvexBody* >(body); 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clip(*_cpp_body);
} /* void Ogre::ConvexBody::clip */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     clip()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::clip
 * Signature:  (Ogre_PlaneZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1clip_1_1PlaneRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pl, 
  jboolean keepNegative
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_pl = reinterpret_cast< const Ogre::Plane* >(pl);
  bool _cpp_keepNegative = keepNegative ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clip(*_cpp_pl, _cpp_keepNegative);
} /* void Ogre::ConvexBody::clip */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     extend()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::extend
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1extend_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pt
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_pt = reinterpret_cast< const Ogre::Vector3* >(pt); 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extend(*_cpp_pt);
} /* void Ogre::ConvexBody::extend */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     reset()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reset();
} /* void Ogre::ConvexBody::reset */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     getPolygonCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::ConvexBody::getPolygonCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ConvexBody__1getPolygonCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getPolygonCount() ; 
   return _cpp_result;
} /* size_t Ogre::ConvexBody::getPolygonCount */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     getVertexCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::ConvexBody::getVertexCount
 * Signature:  (I)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ConvexBody__1getVertexCount_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint poly
)
{
   // parameter conversions 
  size_t _cpp_poly = poly; 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getVertexCount(_cpp_poly) ; 
   return _cpp_result;
} /* size_t Ogre::ConvexBody::getVertexCount */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     getPolygon()
 * Type:       non-virtual method
 * Definition: const Polygon& Ogre::ConvexBody::getPolygon
 * Signature:  (I)Ogre_Polygon
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ConvexBody__1getPolygon_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint poly
)
{
   // parameter conversions 
  size_t _cpp_poly = poly; 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Polygon* _cpp_result = & _cpp_this->getPolygon(_cpp_poly) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Polygon& Ogre::ConvexBody::getPolygon */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     getVertex()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::ConvexBody::getVertex
 * Signature:  (II)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ConvexBody__1getVertex_1_1iviv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint poly, 
  jint vertex
)
{
   // parameter conversions 
  size_t _cpp_poly = poly;
  size_t _cpp_vertex = vertex; 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getVertex(_cpp_poly, _cpp_vertex) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::ConvexBody::getVertex */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     getNormal()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::ConvexBody::getNormal
 * Signature:  (I)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ConvexBody__1getNormal_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint poly
)
{
   // parameter conversions 
  size_t _cpp_poly = poly; 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getNormal(_cpp_poly) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::ConvexBody::getNormal */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     getAABB()
 * Type:       non-virtual method
 * Definition: AxisAlignedBox Ogre::ConvexBody::getAABB
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ConvexBody__1getAABB_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = new Ogre::AxisAlignedBox( _cpp_this->getAABB() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* AxisAlignedBox Ogre::ConvexBody::getAABB */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     hasClosedHull()
 * Type:       non-virtual method
 * Definition: bool Ogre::ConvexBody::hasClosedHull
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ConvexBody__1hasClosedHull_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasClosedHull() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ConvexBody::hasClosedHull */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     mergePolygons()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::mergePolygons
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1mergePolygons (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->mergePolygons();
} /* void Ogre::ConvexBody::mergePolygons */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::ConvexBody::operator==
 * Signature:  (Ogre_ConvexBody)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ConvexBody__1operatorEqual_1_1ConvexBodyR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::ConvexBody* _cpp_rhs = reinterpret_cast< const Ogre::ConvexBody* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ConvexBody::operator== */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::ConvexBody::operator!=
 * Signature:  (Ogre_ConvexBody)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ConvexBody__1operatorNotEqual_1_1ConvexBodyR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::ConvexBody* _cpp_rhs = reinterpret_cast< const Ogre::ConvexBody* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ConvexBody::operator!= */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     logInfo()
 * Type:       non-virtual method
 * Definition: void Ogre::ConvexBody::logInfo
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1logInfo_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ConvexBody* _cpp_this = reinterpret_cast<const Ogre::ConvexBody*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->logInfo();
} /* void Ogre::ConvexBody::logInfo */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     _initialisePool()
 * Type:       static method
 * Definition: static void Ogre::ConvexBody::_initialisePool
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1_1initialisePool (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ConvexBody without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::ConvexBody::_initialisePool();
} /* static void Ogre::ConvexBody::_initialisePool */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     _destroyPool()
 * Type:       static method
 * Definition: static void Ogre::ConvexBody::_destroyPool
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1_1destroyPool (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ConvexBody without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::ConvexBody::_destroyPool();
} /* static void Ogre::ConvexBody::_destroyPool */


/*
 * Class:      org.ogre4j.ConvexBody
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ConvexBody::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ConvexBody__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ConvexBody 
   // cast pointer to C++ object 
   Ogre::ConvexBody* _cpp_this = reinterpret_cast<Ogre::ConvexBody*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ConvexBody::__delete */
