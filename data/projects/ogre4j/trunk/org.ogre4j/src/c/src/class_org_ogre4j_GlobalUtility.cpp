///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_GlobalUtility.h"

// import header files of original library
#include "asm_math.h"
//#include "ExampleRefAppApplication.h"
//#include "ExampleRefAppFrameListener.h"
//#include "Ogre.h"
//#include "OgreAlignedAllocator.h"
//#include "OgreAnimable.h"
//#include "OgreAnimation.h"
//#include "OgreAnimationState.h"
//#include "OgreAnimationTrack.h"
//#include "OgreAny.h"
//#include "OgreArchive.h"
//#include "OgreArchiveFactory.h"
//#include "OgreArchiveManager.h"
//#include "OgreAtomicWrappers.h"
//#include "OgreAutoParamDataSource.h"
//#include "OgreAxisAlignedBox.h"
//#include "OgreBillboard.h"
//#include "OgreBillboardChain.h"
//#include "OgreBillboardParticleRenderer.h"
//#include "OgreBillboardSet.h"
//#include "OgreBitwise.h"
//#include "OgreBlendMode.h"
//#include "OgreBone.h"
//#include "OgreBorderPanelOverlayElement.h"
//#include "OgreCamera.h"
//#include "OgreCodec.h"
//#include "OgreColourValue.h"
//#include "OgreCommon.h"
//#include "OgreCompiler2Pass.h"
//#include "OgreCompositionPass.h"
//#include "OgreCompositionTargetPass.h"
//#include "OgreCompositionTechnique.h"
//#include "OgreCompositor.h"
//#include "OgreCompositorChain.h"
//#include "OgreCompositorInstance.h"
//#include "OgreCompositorManager.h"
//#include "OgreCompositorScriptCompiler.h"
//#include "OgreCompositorScriptCompiler2.h"
//#include "OgreCompositorSerializer.h"
//#include "OgreConfig.h"
//#include "OgreConfigDialog.h"
//#include "GLX/OgreConfigDialogImp.h"
//#include "gtk/OgreConfigDialogImp.h"
//#include "OSX/OgreConfigDialogImp.h"
//#include "WIN32/OgreConfigDialogImp.h"
//#include "OgreConfigFile.h"
//#include "OgreConfigOptionMap.h"
//#include "OgreController.h"
//#include "OgreControllerManager.h"
//#include "OgreConvexBody.h"
//#include "OgreDataStream.h"
//#include "OgreDDSCodec.h"
//#include "OgreDefaultHardwareBufferManager.h"
//#include "OgreDynLib.h"
//#include "OgreDynLibManager.h"
//#include "OgreEdgeListBuilder.h"
//#include "OgreEntity.h"
//#include "OgreErrorDialog.h"
//#include "GLX/OgreErrorDialogImp.h"
//#include "gtk/OgreErrorDialogImp.h"
//#include "OSX/OgreErrorDialogImp.h"
//#include "WIN32/OgreErrorDialogImp.h"
//#include "OgreException.h"
//#include "OgreExternalTextureSource.h"
//#include "OgreExternalTextureSourceManager.h"
//#include "OgreFactoryObj.h"
//#include "OgreFileSystem.h"
//#include "OgreFont.h"
//#include "OgreFontManager.h"
//#include "OgreFrameListener.h"
//#include "OgreFreeImageCodec.h"
//#include "OgreFrustum.h"
//#include "OgreGpuProgram.h"
//#include "OgreGpuProgramManager.h"
//#include "OgreGpuProgramUsage.h"
//#include "OgreHardwareBuffer.h"
//#include "OgreHardwareBufferManager.h"
//#include "OgreHardwareIndexBuffer.h"
//#include "OgreHardwareOcclusionQuery.h"
//#include "OgreHardwarePixelBuffer.h"
//#include "OgreHardwareVertexBuffer.h"
//#include "OgreHighLevelGpuProgram.h"
//#include "OgreHighLevelGpuProgramManager.h"
//#include "OgreILCodecs.h"
//#include "OgreILImageCodec.h"
//#include "OgreILUtil.h"
//#include "OgreImage.h"
//#include "OgreImageCodec.h"
//#include "OgreInstancedGeometry.h"
//#include "OgreIteratorWrappers.h"
//#include "OgreKeyFrame.h"
//#include "OgreLight.h"
//#include "OgreLog.h"
//#include "OgreLogManager.h"
//#include "OgreManualObject.h"
//#include "OgreMaterial.h"
//#include "OgreMaterialManager.h"
//#include "OgreMaterialSerializer.h"
//#include "OgreMath.h"
//#include "OgreMatrix3.h"
//#include "OgreMatrix4.h"
//#include "OgreMemoryAllocatedObject.h"
//#include "OgreMemoryAllocatorConfig.h"
//#include "OgreMemoryNedAlloc.h"
//#include "OgreMemoryStdAlloc.h"
//#include "OgreMemorySTLAllocator.h"
//#include "OgreMemoryTracker.h"
//#include "OgreMesh.h"
//#include "OgreMeshFileFormat.h"
//#include "OgreMeshManager.h"
//#include "OgreMeshSerializer.h"
//#include "OgreMeshSerializerImpl.h"
//#include "OgreMovableObject.h"
//#include "OgreMovablePlane.h"
//#include "OgreNode.h"
//#include "OgreNumerics.h"
//#include "OgreOptimisedUtil.h"
//#include "OgreOverlay.h"
//#include "OgreOverlayContainer.h"
//#include "OgreOverlayElement.h"
//#include "OgreOverlayElementCommands.h"
//#include "OgreOverlayElementFactory.h"
//#include "OgreOverlayManager.h"
//#include "OgrePanelOverlayElement.h"
//#include "OgreParticle.h"
//#include "OgreParticleAffector.h"
//#include "OgreParticleAffectorFactory.h"
//#include "OgreParticleEmitter.h"
//#include "OgreParticleEmitterCommands.h"
//#include "OgreParticleEmitterFactory.h"
//#include "OgreParticleIterator.h"
//#include "OgreParticleScriptCompiler.h"
//#include "OgreParticleSystem.h"
//#include "OgreParticleSystemManager.h"
//#include "OgreParticleSystemRenderer.h"
//#include "OgrePass.h"
//#include "OgrePatchMesh.h"
//#include "OgrePatchSurface.h"
//#include "OgrePixelFormat.h"
//#include "OgrePlane.h"
//#include "OgrePlaneBoundedVolume.h"
//#include "OgrePlatform.h"
//#include "OgrePlatformInformation.h"
//#include "OgrePlugin.h"
//#include "OgrePolygon.h"
//#include "OgrePose.h"
//#include "OgrePredefinedControllers.h"
//#include "OgrePrefabFactory.h"
//#include "OgrePrerequisites.h"
//#include "OgreProfiler.h"
//#include "OgreProgressiveMesh.h"
//#include "OgreQuaternion.h"
//#include "OgreRadixSort.h"
//#include "OgreRay.h"
//#include "OgreRectangle.h"
//#include "OgreRectangle2D.h"
//#include "OgreRenderable.h"
//#include "OgreRenderOperation.h"
//#include "OgreRenderQueue.h"
//#include "OgreRenderQueueInvocation.h"
//#include "OgreRenderQueueListener.h"
//#include "OgreRenderQueueSortingGrouping.h"
//#include "OgreRenderSystem.h"
//#include "OgreRenderSystemCapabilities.h"
//#include "OgreRenderSystemCapabilitiesManager.h"
//#include "OgreRenderSystemCapabilitiesSerializer.h"
//#include "OgreRenderTarget.h"
//#include "OgreRenderTargetListener.h"
//#include "OgreRenderTexture.h"
//#include "OgreRenderToVertexBuffer.h"
//#include "OgreRenderWindow.h"
//#include "OgreResource.h"
//#include "OgreResourceBackgroundQueue.h"
//#include "OgreResourceGroupManager.h"
//#include "OgreResourceManager.h"
//#include "OgreRibbonTrail.h"
//#include "OgreRoot.h"
//#include "OgreRotationalSpline.h"
//#include "OgreSceneManager.h"
//#include "OgreSceneManagerEnumerator.h"
//#include "OgreSceneNode.h"
//#include "OgreSceneQuery.h"
//#include "OgreScriptCompiler.h"
//#include "OgreScriptLexer.h"
//#include "OgreScriptLoader.h"
//#include "OgreScriptParser.h"
//#include "OgreScriptTranslator.h"
//#include "OgreSearchOps.h"
//#include "OgreSerializer.h"
//#include "OgreShadowCameraSetup.h"
//#include "OgreShadowCameraSetupFocused.h"
//#include "OgreShadowCameraSetupLiSPSM.h"
//#include "OgreShadowCameraSetupPlaneOptimal.h"
//#include "OgreShadowCameraSetupPSSM.h"
//#include "OgreShadowCaster.h"
//#include "OgreShadowTextureManager.h"
//#include "OgreShadowVolumeExtrudeProgram.h"
//#include "OgreSharedPtr.h"
//#include "OgreSimpleRenderable.h"
//#include "OgreSimpleSpline.h"
//#include "OgreSingleton.h"
//#include "OgreSkeleton.h"
//#include "OgreSkeletonFileFormat.h"
//#include "OgreSkeletonInstance.h"
//#include "OgreSkeletonManager.h"
//#include "OgreSkeletonSerializer.h"
//#include "OgreSphere.h"
//#include "OgreSpotShadowFadePng.h"
//#include "OgreStableHeaders.h"
//#include "OgreStaticFaceGroup.h"
//#include "OgreStaticGeometry.h"
//#include "OgreStdHeaders.h"
//#include "OgreString.h"
//#include "OgreStringConverter.h"
//#include "OgreStringInterface.h"
//#include "OgreStringVector.h"
//#include "OgreSubEntity.h"
//#include "OgreSubMesh.h"
//#include "OgreTagPoint.h"
//#include "OgreTangentSpaceCalc.h"
//#include "OgreTechnique.h"
//#include "OgreTextAreaOverlayElement.h"
//#include "OgreTexture.h"
//#include "OgreTextureManager.h"
//#include "OgreTextureUnitState.h"
//#include "OgreTimer.h"
//#include "GLX/OgreTimerImp.h"
//#include "OSX/OgreTimerImp.h"
//#include "WIN32/OgreTimerImp.h"
//#include "OgreUnifiedHighLevelGpuProgram.h"
//#include "OgreUserDefinedObject.h"
//#include "OgreUTFString.h"
//#include "OgreVector2.h"
//#include "OgreVector3.h"
//#include "OgreVector4.h"
//#include "OgreVertexBoneAssignment.h"
//#include "OgreVertexIndexData.h"
//#include "OgreViewport.h"
//#include "OgreWindowEventUtilities.h"
//#include "OgreWireBoundingBox.h"
//#include "OgreZip.h"
//#include "stl_user_config.h"



/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_arccos()
 * Type:       static method
 * Definition: static float Ogre::asm_arccos
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1arccos_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_arccos(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_arccos */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_arcsin()
 * Type:       static method
 * Definition: static float Ogre::asm_arcsin
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1arcsin_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_arcsin(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_arcsin */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_arctan()
 * Type:       static method
 * Definition: static float Ogre::asm_arctan
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1arctan_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_arctan(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_arctan */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_sin()
 * Type:       static method
 * Definition: static float Ogre::asm_sin
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1sin_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_sin(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_sin */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_cos()
 * Type:       static method
 * Definition: static float Ogre::asm_cos
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1cos_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_cos(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_cos */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_tan()
 * Type:       static method
 * Definition: static float Ogre::asm_tan
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1tan_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_tan(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_tan */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_sqrt()
 * Type:       static method
 * Definition: static float Ogre::asm_sqrt
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1sqrt_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_sqrt(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_sqrt */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_rsq()
 * Type:       static method
 * Definition: static float Ogre::asm_rsq
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1rsq_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_rsq(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_rsq */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     apx_rsq()
 * Type:       static method
 * Definition: static float Ogre::apx_rsq
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1apx_1rsq_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::apx_rsq(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::apx_rsq */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_rand()
 * Type:       static method
 * Definition: static __inline float Ogre::asm_rand
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1rand (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::asm_rand(); 
   return _cpp_result;
} /* static __inline float Ogre::asm_rand */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_rand_max()
 * Type:       static method
 * Definition: static __inline float Ogre::asm_rand_max
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1rand_1max (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::asm_rand_max(); 
   return _cpp_result;
} /* static __inline float Ogre::asm_rand_max */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     asm_ln()
 * Type:       static method
 * Definition: static float Ogre::asm_ln
 * Signature:  (F)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1asm_1ln_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat r
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_r = r; 
   
   // call library method 
   const float _cpp_result = Ogre::asm_ln(_cpp_r); 
   return _cpp_result;
} /* static float Ogre::asm_ln */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     findCommandLineOpts()
 * Type:       static method
 * Definition: static int Ogre::findCommandLineOpts
 * Signature:  (ICOgre_UnaryOptionListOgre_BinaryOptionList)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GlobalUtility__1findCommandLineOpts_1_1ivcpUnaryOptionListrBinaryOptionListr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint numargs, 
  jlong argv, 
  jlong unaryOptList, 
  jlong binOptList
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  int _cpp_numargs = numargs;
  char** _cpp_argv = (char**)(argv);
  Ogre::UnaryOptionList* _cpp_unaryOptList = reinterpret_cast< Ogre::UnaryOptionList* >(unaryOptList);
  Ogre::BinaryOptionList* _cpp_binOptList = reinterpret_cast< Ogre::BinaryOptionList* >(binOptList); 
   
   // call library method 
   const int _cpp_result = Ogre::findCommandLineOpts(_cpp_numargs, _cpp_argv, *_cpp_unaryOptList, *_cpp_binOptList); 
   return _cpp_result;
} /* static int Ogre::findCommandLineOpts */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator *()
 * Type:       static method
 * Definition: static Radian Ogre::operator *
 * Signature:  (floatOgre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GlobalUtility__1operatorMultiplication_1_1RealvRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat a, 
  jlong b
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_a = a;
  const Ogre::Radian* _cpp_b = reinterpret_cast< const Ogre::Radian* >(b); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( Ogre::operator *(_cpp_a, *_cpp_b)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Radian Ogre::operator * */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator/()
 * Type:       static method
 * Definition: static Radian Ogre::operator/
 * Signature:  (floatOgre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GlobalUtility__1operatorDivision_1_1RealvRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat a, 
  jlong b
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_a = a;
  const Ogre::Radian* _cpp_b = reinterpret_cast< const Ogre::Radian* >(b); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( Ogre::operator/(_cpp_a, *_cpp_b)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Radian Ogre::operator/ */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator *()
 * Type:       static method
 * Definition: static Degree Ogre::operator *
 * Signature:  (floatOgre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GlobalUtility__1operatorMultiplication_1_1RealvDegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat a, 
  jlong b
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_a = a;
  const Ogre::Degree* _cpp_b = reinterpret_cast< const Ogre::Degree* >(b); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( Ogre::operator *(_cpp_a, *_cpp_b)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Degree Ogre::operator * */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator/()
 * Type:       static method
 * Definition: static Degree Ogre::operator/
 * Signature:  (floatOgre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GlobalUtility__1operatorDivision_1_1RealvDegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat a, 
  jlong b
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  float _cpp_a = a;
  const Ogre::Degree* _cpp_b = reinterpret_cast< const Ogre::Degree* >(b); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( Ogre::operator/(_cpp_a, *_cpp_b)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Degree Ogre::operator/ */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator *()
 * Type:       static method
 * Definition: static Vector4 Ogre::operator *
 * Signature:  (Ogre_Vector4Ogre_Matrix4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GlobalUtility__1operatorMultiplication_1_1Vector4RMatrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong v, 
  jlong mat
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::Vector4* _cpp_v = reinterpret_cast< const Ogre::Vector4* >(v);
  const Ogre::Matrix4* _cpp_mat = reinterpret_cast< const Ogre::Matrix4* >(mat); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( Ogre::operator *(*_cpp_v, *_cpp_mat)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Vector4 Ogre::operator * */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     intersect()
 * Type:       static method
 * Definition: static Rectangle Ogre::intersect
 * Signature:  (Ogre_RectangleOgre_Rectangle)Ogre_Rectangle
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GlobalUtility__1intersect_1_1RectangleRRectangleR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong lhs, 
  jlong rhs
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::Rectangle* _cpp_lhs = reinterpret_cast< const Ogre::Rectangle* >(lhs);
  const Ogre::Rectangle* _cpp_rhs = reinterpret_cast< const Ogre::Rectangle* >(rhs); 
   
   // call library method 
   const Ogre::Rectangle* _cpp_result = new Ogre::Rectangle( Ogre::intersect(*_cpp_lhs, *_cpp_rhs)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Rectangle Ogre::intersect */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator==()
 * Type:       static method
 * Definition: static bool Ogre::operator==
 * Signature:  (Ogre_ShadowTextureConfigOgre_ShadowTextureConfig)Z
 */
#ifndef __APPLE_CC__
JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorEqual_1_1ShadowTextureConfigRShadowTextureConfigR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong lhs, 
  jlong rhs
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::ShadowTextureConfig* _cpp_lhs = reinterpret_cast< const Ogre::ShadowTextureConfig* >(lhs);
  const Ogre::ShadowTextureConfig* _cpp_rhs = reinterpret_cast< const Ogre::ShadowTextureConfig* >(rhs); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator==(*_cpp_lhs, *_cpp_rhs); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator== */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator!=()
 * Type:       static method
 * Definition: static bool Ogre::operator!=
 * Signature:  (Ogre_ShadowTextureConfigOgre_ShadowTextureConfig)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorNotEqual_1_1ShadowTextureConfigRShadowTextureConfigR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong lhs, 
  jlong rhs
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::ShadowTextureConfig* _cpp_lhs = reinterpret_cast< const Ogre::ShadowTextureConfig* >(lhs);
  const Ogre::ShadowTextureConfig* _cpp_rhs = reinterpret_cast< const Ogre::ShadowTextureConfig* >(rhs); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator!=(*_cpp_lhs, *_cpp_rhs); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator!= */
#endif

/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator-()
 * Type:       static method
 * Definition: static UTFString::size_type Ogre::operator-
 * Signature:  (Ogre_UTFString__const_fwd_iteratorOgre_UTFString__const_fwd_iterator)size_t
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GlobalUtility__1operatorSubtraction_1_1UTFString_1_1const_1fwd_1iteratorRUTFString_1_1const_1fwd_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_fwd_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(left);
  const Ogre::UTFString::_const_fwd_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(right); 
   
   // call library method 
   const size_t _cpp_result = Ogre::operator-(*_cpp_left, *_cpp_right); 
   return _cpp_result;
} /* static UTFString::size_type Ogre::operator- */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator==()
 * Type:       static method
 * Definition: static bool Ogre::operator==
 * Signature:  (Ogre_UTFString__const_fwd_iteratorOgre_UTFString__const_fwd_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorEqual_1_1UTFString_1_1const_1fwd_1iteratorRUTFString_1_1const_1fwd_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_fwd_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(left);
  const Ogre::UTFString::_const_fwd_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator==(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator== */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator!=()
 * Type:       static method
 * Definition: static bool Ogre::operator!=
 * Signature:  (Ogre_UTFString__const_fwd_iteratorOgre_UTFString__const_fwd_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorNotEqual_1_1UTFString_1_1const_1fwd_1iteratorRUTFString_1_1const_1fwd_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_fwd_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(left);
  const Ogre::UTFString::_const_fwd_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator!=(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator!= */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator<()
 * Type:       static method
 * Definition: static bool Ogre::operator<
 * Signature:  (Ogre_UTFString__const_fwd_iteratorOgre_UTFString__const_fwd_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorLessThan_1_1UTFString_1_1const_1fwd_1iteratorRUTFString_1_1const_1fwd_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_fwd_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(left);
  const Ogre::UTFString::_const_fwd_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator<(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator< */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator<=()
 * Type:       static method
 * Definition: static bool Ogre::operator<=
 * Signature:  (Ogre_UTFString__const_fwd_iteratorOgre_UTFString__const_fwd_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorLessThanOrEqual_1_1UTFString_1_1const_1fwd_1iteratorRUTFString_1_1const_1fwd_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_fwd_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(left);
  const Ogre::UTFString::_const_fwd_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator<=(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator<= */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator>()
 * Type:       static method
 * Definition: static bool Ogre::operator>
 * Signature:  (Ogre_UTFString__const_fwd_iteratorOgre_UTFString__const_fwd_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorGreaterThan_1_1UTFString_1_1const_1fwd_1iteratorRUTFString_1_1const_1fwd_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_fwd_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(left);
  const Ogre::UTFString::_const_fwd_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator>(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator> */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator>=()
 * Type:       static method
 * Definition: static bool Ogre::operator>=
 * Signature:  (Ogre_UTFString__const_fwd_iteratorOgre_UTFString__const_fwd_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorGreaterThanOrEqual_1_1UTFString_1_1const_1fwd_1iteratorRUTFString_1_1const_1fwd_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_fwd_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(left);
  const Ogre::UTFString::_const_fwd_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_fwd_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator>=(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator>= */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator-()
 * Type:       static method
 * Definition: static UTFString::size_type Ogre::operator-
 * Signature:  (Ogre_UTFString__const_rev_iteratorOgre_UTFString__const_rev_iterator)size_t
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GlobalUtility__1operatorSubtraction_1_1UTFString_1_1const_1rev_1iteratorRUTFString_1_1const_1rev_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_rev_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(left);
  const Ogre::UTFString::_const_rev_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(right); 
   
   // call library method 
   const size_t _cpp_result = Ogre::operator-(*_cpp_left, *_cpp_right); 
   return _cpp_result;
} /* static UTFString::size_type Ogre::operator- */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator==()
 * Type:       static method
 * Definition: static bool Ogre::operator==
 * Signature:  (Ogre_UTFString__const_rev_iteratorOgre_UTFString__const_rev_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorEqual_1_1UTFString_1_1const_1rev_1iteratorRUTFString_1_1const_1rev_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_rev_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(left);
  const Ogre::UTFString::_const_rev_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator==(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator== */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator!=()
 * Type:       static method
 * Definition: static bool Ogre::operator!=
 * Signature:  (Ogre_UTFString__const_rev_iteratorOgre_UTFString__const_rev_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorNotEqual_1_1UTFString_1_1const_1rev_1iteratorRUTFString_1_1const_1rev_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_rev_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(left);
  const Ogre::UTFString::_const_rev_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator!=(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator!= */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator<()
 * Type:       static method
 * Definition: static bool Ogre::operator<
 * Signature:  (Ogre_UTFString__const_rev_iteratorOgre_UTFString__const_rev_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorLessThan_1_1UTFString_1_1const_1rev_1iteratorRUTFString_1_1const_1rev_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_rev_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(left);
  const Ogre::UTFString::_const_rev_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator<(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator< */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator<=()
 * Type:       static method
 * Definition: static bool Ogre::operator<=
 * Signature:  (Ogre_UTFString__const_rev_iteratorOgre_UTFString__const_rev_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorLessThanOrEqual_1_1UTFString_1_1const_1rev_1iteratorRUTFString_1_1const_1rev_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_rev_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(left);
  const Ogre::UTFString::_const_rev_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator<=(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator<= */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator>()
 * Type:       static method
 * Definition: static bool Ogre::operator>
 * Signature:  (Ogre_UTFString__const_rev_iteratorOgre_UTFString__const_rev_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorGreaterThan_1_1UTFString_1_1const_1rev_1iteratorRUTFString_1_1const_1rev_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_rev_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(left);
  const Ogre::UTFString::_const_rev_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator>(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator> */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     operator>=()
 * Type:       static method
 * Definition: static bool Ogre::operator>=
 * Signature:  (Ogre_UTFString__const_rev_iteratorOgre_UTFString__const_rev_iterator)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GlobalUtility__1operatorGreaterThanOrEqual_1_1UTFString_1_1const_1rev_1iteratorRUTFString_1_1const_1rev_1iteratorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong left, 
  jlong right
)
{
   // static method of class Ogre with return value 
   // parameter conversions 
  const Ogre::UTFString::_const_rev_iterator* _cpp_left = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(left);
  const Ogre::UTFString::_const_rev_iterator* _cpp_right = reinterpret_cast< const Ogre::UTFString::_const_rev_iterator* >(right); 
   
   // call library method 
   const bool _cpp_result = Ogre::operator>=(*_cpp_left, *_cpp_right); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::operator>= */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     getpi()
 * Type:       getter for public attribute
 * Definition: static const float Ogre::pi
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1getpi (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::pi ; 
   return _cpp_result;
} /* static const float Ogre::pi */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     gethalf_pi()
 * Type:       getter for public attribute
 * Definition: static const float Ogre::half_pi
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_GlobalUtility__1gethalf_1pi (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::half_pi ; 
   return _cpp_result;
} /* static const float Ogre::half_pi */


/*
 * Class:      org.ogre4j.GlobalUtility
 * Method:     getRENDER_QUEUE_COUNT()
 * Type:       getter for public attribute
 * Definition: static const size_t Ogre::RENDER_QUEUE_COUNT
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GlobalUtility__1getRENDER_1QUEUE_1COUNT (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const size_t _cpp_result = Ogre::RENDER_QUEUE_COUNT ; 
   return _cpp_result;
} /* static const size_t Ogre::RENDER_QUEUE_COUNT */
