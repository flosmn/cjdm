///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ExternalTextureSourceManager.h"

// import header files of original library
#include <OgreExternalTextureSourceManager.h>



/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     ExternalTextureSourceManager()
 * Type:       constructor
 * Definition: Ogre::ExternalTextureSourceManager::ExternalTextureSourceManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1_1createExternalTextureSourceManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ExternalTextureSourceManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ExternalTextureSourceManager 
   Ogre::ExternalTextureSourceManager* _cpp_this = new Ogre::ExternalTextureSourceManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ExternalTextureSourceManager::ExternalTextureSourceManager */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     setCurrentPlugIn()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSourceManager::setCurrentPlugIn
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1setCurrentPlugIn_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sTexturePlugInType
)
{
   // parameter conversions 
  std::string _cpp_sTexturePlugInType = ""; org::xbig::jni::to_stdstring(_jni_env_, sTexturePlugInType, _cpp_sTexturePlugInType); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSourceManager* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSourceManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentPlugIn(_cpp_sTexturePlugInType);
} /* void Ogre::ExternalTextureSourceManager::setCurrentPlugIn */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     getCurrentPlugIn()
 * Type:       non-virtual method
 * Definition: ExternalTextureSource* Ogre::ExternalTextureSourceManager::getCurrentPlugIn
 * Signature:  ()Ogre_ExternalTextureSource
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1getCurrentPlugIn_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSourceManager* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSourceManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ExternalTextureSource* _cpp_result = _cpp_this->getCurrentPlugIn() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ExternalTextureSource* Ogre::ExternalTextureSourceManager::getCurrentPlugIn */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     destroyAdvancedTexture()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSourceManager::destroyAdvancedTexture
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1destroyAdvancedTexture_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sTextureName, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_sTextureName = ""; org::xbig::jni::to_stdstring(_jni_env_, sTextureName, _cpp_sTextureName); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSourceManager* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSourceManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAdvancedTexture(_cpp_sTextureName, _cpp_groupName);
} /* void Ogre::ExternalTextureSourceManager::destroyAdvancedTexture */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     getExternalTextureSource()
 * Type:       non-virtual method
 * Definition: ExternalTextureSource* Ogre::ExternalTextureSourceManager::getExternalTextureSource
 * Signature:  (std_string)Ogre_ExternalTextureSource
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1getExternalTextureSource_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sTexturePlugInType
)
{
   // parameter conversions 
  std::string _cpp_sTexturePlugInType = ""; org::xbig::jni::to_stdstring(_jni_env_, sTexturePlugInType, _cpp_sTexturePlugInType); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSourceManager* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSourceManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ExternalTextureSource* _cpp_result = _cpp_this->getExternalTextureSource(_cpp_sTexturePlugInType) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ExternalTextureSource* Ogre::ExternalTextureSourceManager::getExternalTextureSource */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     setExternalTextureSource()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSourceManager::setExternalTextureSource
 * Signature:  (std_stringOgre_ExternalTextureSource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1setExternalTextureSource_1_1StringRExternalTextureSourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sTexturePlugInType, 
  jlong pTextureSystem
)
{
   // parameter conversions 
  std::string _cpp_sTexturePlugInType = ""; org::xbig::jni::to_stdstring(_jni_env_, sTexturePlugInType, _cpp_sTexturePlugInType); // calls c-tor only. Not operator= .;
  Ogre::ExternalTextureSource* _cpp_pTextureSystem = reinterpret_cast< Ogre::ExternalTextureSource* >(pTextureSystem); 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSourceManager* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSourceManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setExternalTextureSource(_cpp_sTexturePlugInType, _cpp_pTextureSystem);
} /* void Ogre::ExternalTextureSourceManager::setExternalTextureSource */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static ExternalTextureSourceManager& Ogre::ExternalTextureSourceManager::getSingleton
 * Signature:  ()Ogre_ExternalTextureSourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ExternalTextureSourceManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ExternalTextureSourceManager* _cpp_result = & Ogre::ExternalTextureSourceManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ExternalTextureSourceManager& Ogre::ExternalTextureSourceManager::getSingleton */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static ExternalTextureSourceManager* Ogre::ExternalTextureSourceManager::getSingletonPtr
 * Signature:  ()Ogre_ExternalTextureSourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ExternalTextureSourceManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ExternalTextureSourceManager* _cpp_result = Ogre::ExternalTextureSourceManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ExternalTextureSourceManager* Ogre::ExternalTextureSourceManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.ExternalTextureSourceManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ExternalTextureSourceManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSourceManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ExternalTextureSourceManager 
   // cast pointer to C++ object 
   Ogre::ExternalTextureSourceManager* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSourceManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ExternalTextureSourceManager::__delete */
