///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Sphere.h"

// import header files of original library
#include <OgreSphere.h>



/*
 * Class:      org.ogre4j.Sphere
 * Method:     Sphere()
 * Type:       constructor
 * Definition: Ogre::Sphere::Sphere
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Sphere__1_1createSphere (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Sphere 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Sphere 
   Ogre::Sphere* _cpp_this = new Ogre::Sphere(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Sphere::Sphere */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     Sphere()
 * Type:       constructor
 * Definition: Ogre::Sphere::Sphere
 * Signature:  (Ogre_Vector3float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Sphere__1_1createSphere_1_1Vector3RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong center, 
  jfloat radius
)
{
   // constructor of class Ogre::Sphere 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_center = reinterpret_cast< const Ogre::Vector3* >(center);
  float _cpp_radius = radius; 
   
   // create new instance of class Ogre::Sphere 
   Ogre::Sphere* _cpp_this = new Ogre::Sphere(*_cpp_center, _cpp_radius); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Sphere::Sphere */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     getRadius()
 * Type:       non-virtual method
 * Definition: Real Ogre::Sphere::getRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Sphere__1getRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Sphere* _cpp_this = reinterpret_cast<const Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRadius() ; 
   return _cpp_result;
} /* Real Ogre::Sphere::getRadius */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     setRadius()
 * Type:       non-virtual method
 * Definition: void Ogre::Sphere::setRadius
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Sphere__1setRadius_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat radius
)
{
   // parameter conversions 
  float _cpp_radius = radius; 
   
   // cast pointer to C++ object 
   Ogre::Sphere* _cpp_this = reinterpret_cast<Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRadius(_cpp_radius);
} /* void Ogre::Sphere::setRadius */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     getCenter()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Sphere::getCenter
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Sphere__1getCenter_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Sphere* _cpp_this = reinterpret_cast<const Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getCenter() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector3& Ogre::Sphere::getCenter */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     setCenter()
 * Type:       non-virtual method
 * Definition: void Ogre::Sphere::setCenter
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Sphere__1setCenter_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong center
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_center = reinterpret_cast< const Ogre::Vector3* >(center); 
   
   // cast pointer to C++ object 
   Ogre::Sphere* _cpp_this = reinterpret_cast<Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCenter(*_cpp_center);
} /* void Ogre::Sphere::setCenter */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::Sphere::intersects
 * Signature:  (Ogre_Sphere)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Sphere__1intersects_1_1SphereR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
)
{
   // parameter conversions 
  const Ogre::Sphere* _cpp_s = reinterpret_cast< const Ogre::Sphere* >(s); 
   
   // cast pointer to C++ object 
   const Ogre::Sphere* _cpp_this = reinterpret_cast<const Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_s) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Sphere::intersects */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::Sphere::intersects
 * Signature:  (Ogre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Sphere__1intersects_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_box = reinterpret_cast< const Ogre::AxisAlignedBox* >(box); 
   
   // cast pointer to C++ object 
   const Ogre::Sphere* _cpp_this = reinterpret_cast<const Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_box) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Sphere::intersects */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::Sphere::intersects
 * Signature:  (Ogre_Plane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Sphere__1intersects_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong plane
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane); 
   
   // cast pointer to C++ object 
   const Ogre::Sphere* _cpp_this = reinterpret_cast<const Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_plane) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Sphere::intersects */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::Sphere::intersects
 * Signature:  (Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Sphere__1intersects_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::Sphere* _cpp_this = reinterpret_cast<const Ogre::Sphere*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->intersects(*_cpp_v) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Sphere::intersects */


/*
 * Class:      org.ogre4j.Sphere
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Sphere::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Sphere__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Sphere 
   // cast pointer to C++ object 
   Ogre::Sphere* _cpp_this = reinterpret_cast<Ogre::Sphere*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Sphere::__delete */
