///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_PatchMesh.h"

// import header files of original library
#include <OgrePatchMesh.h>



/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     PatchMesh()
 * Type:       constructor
 * Definition: Ogre::PatchMesh::PatchMesh
 * Signature:  (Ogre_ResourceManagerstd_stringunsigned_longstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1_1createPatchMesh_1_1ResourceManagerpStringRResourceHandlevStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong creator, 
  jstring name, 
  jlong handle, 
  jstring group
)
{
   // constructor of class Ogre::PatchMesh 
   
   // parameter conversions 
  Ogre::ResourceManager* _cpp_creator = reinterpret_cast< Ogre::ResourceManager* >(creator);
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned long _cpp_handle = handle;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::PatchMesh 
   Ogre::PatchMesh* _cpp_this = new Ogre::PatchMesh(_cpp_creator, _cpp_name, _cpp_handle, _cpp_group); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::PatchMesh::PatchMesh */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     define()
 * Type:       non-virtual method
 * Definition: void Ogre::PatchMesh::define
 * Signature:  (VOgre_VertexDeclarationIIIIOgre_PatchSurface_VisibleSideOgre_HardwareBuffer_UsageOgre_HardwareBuffer_UsageZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1define_1_1vpVertexDeclarationpivivivivPatchSurface_1VisibleSidevHardwareBuffer_1UsagevHardwareBuffer_1Usagevbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong controlPointBuffer, 
  jlong declaration, 
  jint width, 
  jint height, 
  jint uMaxSubdivisionLevel, 
  jint vMaxSubdivisionLevel, 
  jint visibleSide, 
  jint vbUsage, 
  jint ibUsage, 
  jboolean vbUseShadow, 
  jboolean ibUseShadow
)
{
   // parameter conversions 
  void* _cpp_controlPointBuffer = reinterpret_cast<void*>(controlPointBuffer);
  Ogre::VertexDeclaration* _cpp_declaration = reinterpret_cast< Ogre::VertexDeclaration* >(declaration);
  size_t _cpp_width = width;
  size_t _cpp_height = height;
  size_t _cpp_uMaxSubdivisionLevel = uMaxSubdivisionLevel;
  size_t _cpp_vMaxSubdivisionLevel = vMaxSubdivisionLevel;
  Ogre::PatchSurface::VisibleSide _cpp_visibleSide = (Ogre::PatchSurface::VisibleSide)visibleSide;
  Ogre::HardwareBuffer::Usage _cpp_vbUsage = (Ogre::HardwareBuffer::Usage)vbUsage;
  Ogre::HardwareBuffer::Usage _cpp_ibUsage = (Ogre::HardwareBuffer::Usage)ibUsage;
  bool _cpp_vbUseShadow = vbUseShadow ? true : false;
  bool _cpp_ibUseShadow = ibUseShadow ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->define(_cpp_controlPointBuffer, _cpp_declaration, _cpp_width, _cpp_height, _cpp_uMaxSubdivisionLevel, _cpp_vMaxSubdivisionLevel, _cpp_visibleSide, _cpp_vbUsage, _cpp_ibUsage, _cpp_vbUseShadow, _cpp_ibUseShadow);
} /* void Ogre::PatchMesh::define */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setSubdivision()
 * Type:       non-virtual method
 * Definition: void Ogre::PatchMesh::setSubdivision
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setSubdivision_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat factor
)
{
   // parameter conversions 
  float _cpp_factor = factor; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSubdivision(_cpp_factor);
} /* void Ogre::PatchMesh::setSubdivision */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     createSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::createSubMesh
 * Signature:  ()Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1createSubMesh (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh* _cpp_result = _cpp_this->Ogre::Mesh::createSubMesh() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubMesh* Ogre::Mesh::createSubMesh */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     createSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::createSubMesh
 * Signature:  (std_string)Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1createSubMesh_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh* _cpp_result = _cpp_this->Ogre::Mesh::createSubMesh(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubMesh* Ogre::Mesh::createSubMesh */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     nameSubMesh()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::nameSubMesh
 * Signature:  (std_stringunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1nameSubMesh_1_1StringRushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint index
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->nameSubMesh(_cpp_name, _cpp_index);
} /* void Ogre::Mesh::nameSubMesh */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _getSubMeshIndex()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::_getSubMeshIndex
 * Signature:  (std_string)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1_1getSubMeshIndex_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->_getSubMeshIndex(_cpp_name) ; 
   return _cpp_result;
} /* ushort Ogre::Mesh::_getSubMeshIndex */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getNumSubMeshes()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Mesh::getNumSubMeshes
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getNumSubMeshes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumSubMeshes() ; 
   return _cpp_result;
} /* unsigned short Ogre::Mesh::getNumSubMeshes */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::getSubMesh
 * Signature:  (S)Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getSubMesh_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh* _cpp_result = _cpp_this->Ogre::Mesh::getSubMesh(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubMesh* Ogre::Mesh::getSubMesh */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::getSubMesh
 * Signature:  (std_string)Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getSubMesh_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SubMesh* _cpp_result = _cpp_this->Ogre::Mesh::getSubMesh(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubMesh* Ogre::Mesh::getSubMesh */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSubMeshIterator()
 * Type:       non-virtual method
 * Definition: SubMeshIterator Ogre::Mesh::getSubMeshIterator
 * Signature:  ()Ogre_Mesh_SubMeshIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getSubMeshIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh::SubMeshIterator* _cpp_result = new Ogre::Mesh::SubMeshIterator( _cpp_this->getSubMeshIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SubMeshIterator Ogre::Mesh::getSubMeshIterator */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::Mesh::clone
 * Signature:  (std_stringstd_string)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1clone_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newName, 
  jstring newGroup
)
{
   // parameter conversions 
  std::string _cpp_newName = ""; org::xbig::jni::to_stdstring(_jni_env_, newName, _cpp_newName); // calls c-tor only. Not operator= .;
  std::string _cpp_newGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, newGroup, _cpp_newGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshPtr* _cpp_result = new Ogre::MeshPtr( _cpp_this->clone(_cpp_newName, _cpp_newGroup) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MeshPtr Ogre::Mesh::clone */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getBounds()
 * Type:       non-virtual method
 * Definition: const AxisAlignedBox& Ogre::Mesh::getBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::Mesh::getBounds */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getBoundingSphereRadius()
 * Type:       non-virtual method
 * Definition: Real Ogre::Mesh::getBoundingSphereRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_PatchMesh__1getBoundingSphereRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingSphereRadius() ; 
   return _cpp_result;
} /* Real Ogre::Mesh::getBoundingSphereRadius */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _setBounds()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setBounds
 * Signature:  (Ogre_AxisAlignedBoxZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1setBounds_1_1AxisAlignedBoxRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bounds, 
  jboolean pad
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_bounds = reinterpret_cast< const Ogre::AxisAlignedBox* >(bounds);
  bool _cpp_pad = pad ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setBounds(*_cpp_bounds, _cpp_pad);
} /* void Ogre::Mesh::_setBounds */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _setBoundingSphereRadius()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setBoundingSphereRadius
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1setBoundingSphereRadius_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat radius
)
{
   // parameter conversions 
  float _cpp_radius = radius; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setBoundingSphereRadius(_cpp_radius);
} /* void Ogre::Mesh::_setBoundingSphereRadius */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setSkeletonName()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setSkeletonName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setSkeletonName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring skelName
)
{
   // parameter conversions 
  std::string _cpp_skelName = ""; org::xbig::jni::to_stdstring(_jni_env_, skelName, _cpp_skelName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSkeletonName(_cpp_skelName);
} /* void Ogre::Mesh::setSkeletonName */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     hasSkeleton()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::hasSkeleton
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1hasSkeleton_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasSkeleton() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::hasSkeleton */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     hasVertexAnimation()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::hasVertexAnimation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1hasVertexAnimation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasVertexAnimation() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::hasVertexAnimation */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSkeleton()
 * Type:       non-virtual method
 * Definition: const SkeletonPtr& Ogre::Mesh::getSkeleton
 * Signature:  ()Ogre_SkeletonPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getSkeleton_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SkeletonPtr* _cpp_result = & _cpp_this->getSkeleton() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const SkeletonPtr& Ogre::Mesh::getSkeleton */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSkeletonName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Mesh::getSkeletonName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_PatchMesh__1getSkeletonName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getSkeletonName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Mesh::getSkeletonName */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _initAnimationState()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_initAnimationState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1initAnimationState_1_1AnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animSet
)
{
   // parameter conversions 
  Ogre::AnimationStateSet* _cpp_animSet = reinterpret_cast< Ogre::AnimationStateSet* >(animSet); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_initAnimationState(_cpp_animSet);
} /* void Ogre::Mesh::_initAnimationState */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _refreshAnimationState()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_refreshAnimationState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1refreshAnimationState_1_1AnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animSet
)
{
   // parameter conversions 
  Ogre::AnimationStateSet* _cpp_animSet = reinterpret_cast< Ogre::AnimationStateSet* >(animSet); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_refreshAnimationState(_cpp_animSet);
} /* void Ogre::Mesh::_refreshAnimationState */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     addBoneAssignment()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::addBoneAssignment
 * Signature:  (Ogre_VertexBoneAssignment_s)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1addBoneAssignment_1_1VertexBoneAssignmentR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vertBoneAssign
)
{
   // parameter conversions 
  const Ogre::VertexBoneAssignment_s* _cpp_vertBoneAssign = reinterpret_cast< const Ogre::VertexBoneAssignment_s* >(vertBoneAssign); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addBoneAssignment(*_cpp_vertBoneAssign);
} /* void Ogre::Mesh::addBoneAssignment */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     clearBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::clearBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1clearBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearBoneAssignments();
} /* void Ogre::Mesh::clearBoneAssignments */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _notifySkeleton()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_notifySkeleton
 * Signature:  (Ogre_SkeletonPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1notifySkeleton_1_1SkeletonPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pSkel
)
{
   // parameter conversions 
  Ogre::SkeletonPtr* _cpp_pSkel = reinterpret_cast< Ogre::SkeletonPtr* >(pSkel); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifySkeleton(*_cpp_pSkel);
} /* void Ogre::Mesh::_notifySkeleton */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getBoneAssignmentIterator()
 * Type:       non-virtual method
 * Definition: BoneAssignmentIterator Ogre::Mesh::getBoneAssignmentIterator
 * Signature:  ()Ogre_Mesh_BoneAssignmentIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getBoneAssignmentIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh::BoneAssignmentIterator* _cpp_result = new Ogre::Mesh::BoneAssignmentIterator( _cpp_this->getBoneAssignmentIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* BoneAssignmentIterator Ogre::Mesh::getBoneAssignmentIterator */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getBoneAssignments()
 * Type:       non-virtual method
 * Definition: const VertexBoneAssignmentList& Ogre::Mesh::getBoneAssignments
 * Signature:  ()Ogre_Mesh_VertexBoneAssignmentList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getBoneAssignments_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh::VertexBoneAssignmentList* _cpp_result = & _cpp_this->getBoneAssignments() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VertexBoneAssignmentList& Ogre::Mesh::getBoneAssignments */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     generateLodLevels()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::generateLodLevels
 * Signature:  (Ogre_Mesh_LodDistanceListOgre_ProgressiveMesh_VertexReductionQuotafloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1generateLodLevels_1_1LodDistanceListRProgressiveMesh_1VertexReductionQuotavRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodDistances, 
  jint reductionMethod, 
  jfloat reductionValue
)
{
   // parameter conversions 
  const Ogre::Mesh::LodDistanceList* _cpp_lodDistances = reinterpret_cast< const Ogre::Mesh::LodDistanceList* >(lodDistances);
  Ogre::ProgressiveMesh::VertexReductionQuota _cpp_reductionMethod = (Ogre::ProgressiveMesh::VertexReductionQuota)reductionMethod;
  float _cpp_reductionValue = reductionValue; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->generateLodLevels(*_cpp_lodDistances, _cpp_reductionMethod, _cpp_reductionValue);
} /* void Ogre::Mesh::generateLodLevels */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getNumLodLevels()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::getNumLodLevels
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getNumLodLevels_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumLodLevels() ; 
   return _cpp_result;
} /* ushort Ogre::Mesh::getNumLodLevels */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getLodLevel()
 * Type:       non-virtual method
 * Definition: const MeshLodUsage& Ogre::Mesh::getLodLevel
 * Signature:  (unsigned_short)Ogre_MeshLodUsage
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getLodLevel_1_1ushortv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MeshLodUsage* _cpp_result = & _cpp_this->getLodLevel(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MeshLodUsage& Ogre::Mesh::getLodLevel */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     createManualLodLevel()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::createManualLodLevel
 * Signature:  (floatstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1createManualLodLevel_1_1RealvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fromDepth, 
  jstring meshName
)
{
   // parameter conversions 
  float _cpp_fromDepth = fromDepth;
  std::string _cpp_meshName = ""; org::xbig::jni::to_stdstring(_jni_env_, meshName, _cpp_meshName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->createManualLodLevel(_cpp_fromDepth, _cpp_meshName);
} /* void Ogre::Mesh::createManualLodLevel */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     updateManualLodLevel()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::updateManualLodLevel
 * Signature:  (unsigned_shortstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1updateManualLodLevel_1_1ushortvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jstring meshName
)
{
   // parameter conversions 
  unsigned short _cpp_index = index;
  std::string _cpp_meshName = ""; org::xbig::jni::to_stdstring(_jni_env_, meshName, _cpp_meshName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateManualLodLevel(_cpp_index, _cpp_meshName);
} /* void Ogre::Mesh::updateManualLodLevel */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getLodIndex()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::getLodIndex
 * Signature:  (float)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getLodIndex_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat depth
)
{
   // parameter conversions 
  float _cpp_depth = depth; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getLodIndex(_cpp_depth) ; 
   return _cpp_result;
} /* ushort Ogre::Mesh::getLodIndex */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getLodIndexSquaredDepth()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::getLodIndexSquaredDepth
 * Signature:  (float)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getLodIndexSquaredDepth_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat squaredDepth
)
{
   // parameter conversions 
  float _cpp_squaredDepth = squaredDepth; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getLodIndexSquaredDepth(_cpp_squaredDepth) ; 
   return _cpp_result;
} /* ushort Ogre::Mesh::getLodIndexSquaredDepth */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isLodManual()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isLodManual
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isLodManual_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLodManual() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::isLodManual */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _setLodInfo()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setLodInfo
 * Signature:  (SZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1setLodInfo_1_1Hvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numLevels, 
  jboolean isManual
)
{
   // parameter conversions 
  unsigned short _cpp_numLevels = numLevels;
  bool _cpp_isManual = isManual ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setLodInfo(_cpp_numLevels, _cpp_isManual);
} /* void Ogre::Mesh::_setLodInfo */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _setLodUsage()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setLodUsage
 * Signature:  (SOgre_MeshLodUsage)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1setLodUsage_1_1HvMeshLodUsager (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint level, 
  jlong usage
)
{
   // parameter conversions 
  unsigned short _cpp_level = level;
  Ogre::MeshLodUsage* _cpp_usage = reinterpret_cast< Ogre::MeshLodUsage* >(usage); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setLodUsage(_cpp_level, *_cpp_usage);
} /* void Ogre::Mesh::_setLodUsage */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _setSubMeshLodFaceList()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setSubMeshLodFaceList
 * Signature:  (SSOgre_IndexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1setSubMeshLodFaceList_1_1HvHvIndexDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint subIdx, 
  jint level, 
  jlong facedata
)
{
   // parameter conversions 
  unsigned short _cpp_subIdx = subIdx;
  unsigned short _cpp_level = level;
  Ogre::IndexData* _cpp_facedata = reinterpret_cast< Ogre::IndexData* >(facedata); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setSubMeshLodFaceList(_cpp_subIdx, _cpp_level, _cpp_facedata);
} /* void Ogre::Mesh::_setSubMeshLodFaceList */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     removeLodLevels()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removeLodLevels
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1removeLodLevels (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeLodLevels();
} /* void Ogre::Mesh::removeLodLevels */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setVertexBufferPolicy()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setVertexBufferPolicy
 * Signature:  (Ogre_HardwareBuffer_UsageZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setVertexBufferPolicy_1_1HardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint usage, 
  jboolean shadowBuffer
)
{
   // parameter conversions 
  Ogre::HardwareBuffer::Usage _cpp_usage = (Ogre::HardwareBuffer::Usage)usage;
  bool _cpp_shadowBuffer = shadowBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexBufferPolicy(_cpp_usage, _cpp_shadowBuffer);
} /* void Ogre::Mesh::setVertexBufferPolicy */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setIndexBufferPolicy()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setIndexBufferPolicy
 * Signature:  (Ogre_HardwareBuffer_UsageZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setIndexBufferPolicy_1_1HardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint usage, 
  jboolean shadowBuffer
)
{
   // parameter conversions 
  Ogre::HardwareBuffer::Usage _cpp_usage = (Ogre::HardwareBuffer::Usage)usage;
  bool _cpp_shadowBuffer = shadowBuffer ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setIndexBufferPolicy(_cpp_usage, _cpp_shadowBuffer);
} /* void Ogre::Mesh::setIndexBufferPolicy */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getVertexBufferUsage()
 * Type:       non-virtual method
 * Definition: HardwareBuffer::Usage Ogre::Mesh::getVertexBufferUsage
 * Signature:  ()Ogre_HardwareBuffer_Usage
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getVertexBufferUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareBuffer::Usage _cpp_result = _cpp_this->getVertexBufferUsage() ; 
   return _cpp_result;
} /* HardwareBuffer::Usage Ogre::Mesh::getVertexBufferUsage */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getIndexBufferUsage()
 * Type:       non-virtual method
 * Definition: HardwareBuffer::Usage Ogre::Mesh::getIndexBufferUsage
 * Signature:  ()Ogre_HardwareBuffer_Usage
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getIndexBufferUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareBuffer::Usage _cpp_result = _cpp_this->getIndexBufferUsage() ; 
   return _cpp_result;
} /* HardwareBuffer::Usage Ogre::Mesh::getIndexBufferUsage */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isVertexBufferShadowed()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isVertexBufferShadowed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isVertexBufferShadowed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVertexBufferShadowed() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::isVertexBufferShadowed */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isIndexBufferShadowed()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isIndexBufferShadowed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isIndexBufferShadowed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isIndexBufferShadowed() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::isIndexBufferShadowed */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _rationaliseBoneAssignments()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Mesh::_rationaliseBoneAssignments
 * Signature:  (IOgre_Mesh_VertexBoneAssignmentList)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1_1rationaliseBoneAssignments_1_1ivVertexBoneAssignmentListr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertexCount, 
  jlong assignments
)
{
   // parameter conversions 
  size_t _cpp_vertexCount = vertexCount;
  Ogre::Mesh::VertexBoneAssignmentList* _cpp_assignments = reinterpret_cast< Ogre::Mesh::VertexBoneAssignmentList* >(assignments); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->_rationaliseBoneAssignments(_cpp_vertexCount, *_cpp_assignments) ; 
   return _cpp_result;
} /* unsigned short Ogre::Mesh::_rationaliseBoneAssignments */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _compileBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_compileBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1compileBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_compileBoneAssignments();
} /* void Ogre::Mesh::_compileBoneAssignments */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _updateCompiledBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_updateCompiledBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1updateCompiledBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateCompiledBoneAssignments();
} /* void Ogre::Mesh::_updateCompiledBoneAssignments */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     buildTangentVectors()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::buildTangentVectors
 * Signature:  (Ogre_VertexElementSemanticSSZZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1buildTangentVectors_1_1VertexElementSemanticvHvHvbvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint targetSemantic, 
  jint sourceTexCoordSet, 
  jint index, 
  jboolean splitMirrored, 
  jboolean splitRotated, 
  jboolean storeParityInW
)
{
   // parameter conversions 
  Ogre::VertexElementSemantic _cpp_targetSemantic = (Ogre::VertexElementSemantic)targetSemantic;
  unsigned short _cpp_sourceTexCoordSet = sourceTexCoordSet;
  unsigned short _cpp_index = index;
  bool _cpp_splitMirrored = splitMirrored ? true : false;
  bool _cpp_splitRotated = splitRotated ? true : false;
  bool _cpp_storeParityInW = storeParityInW ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->buildTangentVectors(_cpp_targetSemantic, _cpp_sourceTexCoordSet, _cpp_index, _cpp_splitMirrored, _cpp_splitRotated, _cpp_storeParityInW);
} /* void Ogre::Mesh::buildTangentVectors */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     suggestTangentVectorBuildParams()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::suggestTangentVectorBuildParams
 * Signature:  (Ogre_VertexElementSemanticSS)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1suggestTangentVectorBuildParams_1_1VertexElementSemanticvHrHr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint targetSemantic, 
  jlong outSourceCoordSet, 
  jlong outIndex
)
{
   // parameter conversions 
  Ogre::VertexElementSemantic _cpp_targetSemantic = (Ogre::VertexElementSemantic)targetSemantic;
  unsigned short* _cpp_outSourceCoordSet = reinterpret_cast<unsigned short*>(outSourceCoordSet);
  unsigned short* _cpp_outIndex = reinterpret_cast<unsigned short*>(outIndex); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->suggestTangentVectorBuildParams(_cpp_targetSemantic, *_cpp_outSourceCoordSet, *_cpp_outIndex) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::suggestTangentVectorBuildParams */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     buildEdgeList()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::buildEdgeList
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1buildEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->buildEdgeList();
} /* void Ogre::Mesh::buildEdgeList */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     freeEdgeList()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::freeEdgeList
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1freeEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->freeEdgeList();
} /* void Ogre::Mesh::freeEdgeList */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     prepareForShadowVolume()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::prepareForShadowVolume
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1prepareForShadowVolume (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepareForShadowVolume();
} /* void Ogre::Mesh::prepareForShadowVolume */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getEdgeList()
 * Type:       non-virtual method
 * Definition: EdgeData* Ogre::Mesh::getEdgeList
 * Signature:  (I)Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getEdgeList_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodIndex
)
{
   // parameter conversions 
  unsigned int _cpp_lodIndex = lodIndex; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList(_cpp_lodIndex) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::Mesh::getEdgeList */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getEdgeList_const()
 * Type:       non-virtual method
 * Definition: const EdgeData* Ogre::Mesh::getEdgeList
 * Signature:  (I)Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getEdgeList_1const_1_1Iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodIndex
)
{
   // parameter conversions 
  unsigned int _cpp_lodIndex = lodIndex; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList(_cpp_lodIndex) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const EdgeData* Ogre::Mesh::getEdgeList */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isPreparedForShadowVolumes()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isPreparedForShadowVolumes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isPreparedForShadowVolumes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPreparedForShadowVolumes() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::isPreparedForShadowVolumes */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isEdgeListBuilt()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isEdgeListBuilt
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isEdgeListBuilt_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isEdgeListBuilt() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::isEdgeListBuilt */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSubMeshNameMap()
 * Type:       non-virtual method
 * Definition: const SubMeshNameMap& Ogre::Mesh::getSubMeshNameMap
 * Signature:  ()Ogre_Mesh_SubMeshNameMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getSubMeshNameMap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh::SubMeshNameMap* _cpp_result = & _cpp_this->getSubMeshNameMap() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const SubMeshNameMap& Ogre::Mesh::getSubMeshNameMap */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setAutoBuildEdgeLists()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setAutoBuildEdgeLists
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setAutoBuildEdgeLists_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autobuild
)
{
   // parameter conversions 
  bool _cpp_autobuild = autobuild ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAutoBuildEdgeLists(_cpp_autobuild);
} /* void Ogre::Mesh::setAutoBuildEdgeLists */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getAutoBuildEdgeLists()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::getAutoBuildEdgeLists
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1getAutoBuildEdgeLists_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getAutoBuildEdgeLists() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::getAutoBuildEdgeLists */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSharedVertexDataAnimationType()
 * Type:       virtual method
 * Definition: virtual VertexAnimationType Ogre::Mesh::getSharedVertexDataAnimationType
 * Signature:  ()Ogre_VertexAnimationType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getSharedVertexDataAnimationType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexAnimationType _cpp_result = _cpp_this->getSharedVertexDataAnimationType() ; 
   return _cpp_result;
} /* virtual VertexAnimationType Ogre::Mesh::getSharedVertexDataAnimationType */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     createAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::createAnimation
 * Signature:  (std_stringfloat)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1createAnimation_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jfloat length
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  float _cpp_length = length; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Animation* _cpp_result = _cpp_this->createAnimation(_cpp_name, _cpp_length) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Animation* Ogre::Mesh::createAnimation */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::getAnimation
 * Signature:  (std_string)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getAnimation_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Animation* _cpp_result = _cpp_this->Ogre::Mesh::getAnimation(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Animation* Ogre::Mesh::getAnimation */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _getAnimationImpl()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::_getAnimationImpl
 * Signature:  (std_string)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1_1getAnimationImpl_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Animation* _cpp_result = _cpp_this->_getAnimationImpl(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Animation* Ogre::Mesh::_getAnimationImpl */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     hasAnimation()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Mesh::hasAnimation
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1hasAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasAnimation(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Mesh::hasAnimation */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     removeAnimation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Mesh::removeAnimation
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1removeAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAnimation(_cpp_name);
} /* virtual void Ogre::Mesh::removeAnimation */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getNumAnimations()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Mesh::getNumAnimations
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getNumAnimations_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumAnimations() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Mesh::getNumAnimations */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::getAnimation
 * Signature:  (S)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getAnimation_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Animation* _cpp_result = _cpp_this->Ogre::Mesh::getAnimation(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Animation* Ogre::Mesh::getAnimation */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     removeAllAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::Mesh::removeAllAnimations
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1removeAllAnimations (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllAnimations();
} /* virtual void Ogre::Mesh::removeAllAnimations */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getVertexDataByTrackHandle()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::Mesh::getVertexDataByTrackHandle
 * Signature:  (S)Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getVertexDataByTrackHandle_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
)
{
   // parameter conversions 
  unsigned short _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->getVertexDataByTrackHandle(_cpp_handle) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::Mesh::getVertexDataByTrackHandle */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     updateMaterialForAllSubMeshes()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::updateMaterialForAllSubMeshes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1updateMaterialForAllSubMeshes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateMaterialForAllSubMeshes();
} /* void Ogre::Mesh::updateMaterialForAllSubMeshes */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _determineAnimationTypes()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_determineAnimationTypes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1determineAnimationTypes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_determineAnimationTypes();
} /* void Ogre::Mesh::_determineAnimationTypes */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _getAnimationTypesDirty()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::_getAnimationTypesDirty
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1_1getAnimationTypesDirty_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->_getAnimationTypesDirty() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Mesh::_getAnimationTypesDirty */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     createPose()
 * Type:       non-virtual method
 * Definition: Pose* Ogre::Mesh::createPose
 * Signature:  (unsigned_shortstd_string)Ogre_Pose
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1createPose_1_1ushortvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint target, 
  jstring name
)
{
   // parameter conversions 
  unsigned short _cpp_target = target;
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pose* _cpp_result = _cpp_this->createPose(_cpp_target, _cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pose* Ogre::Mesh::createPose */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getPoseCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Mesh::getPoseCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getPoseCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getPoseCount() ; 
   return _cpp_result;
} /* size_t Ogre::Mesh::getPoseCount */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getPose()
 * Type:       non-virtual method
 * Definition: Pose* Ogre::Mesh::getPose
 * Signature:  (unsigned_short)Ogre_Pose
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getPose_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pose* _cpp_result = _cpp_this->Ogre::Mesh::getPose(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pose* Ogre::Mesh::getPose */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getPose()
 * Type:       non-virtual method
 * Definition: Pose* Ogre::Mesh::getPose
 * Signature:  (std_string)Ogre_Pose
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getPose_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pose* _cpp_result = _cpp_this->Ogre::Mesh::getPose(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pose* Ogre::Mesh::getPose */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     removePose()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removePose
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1removePose_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Mesh::removePose(_cpp_index);
} /* void Ogre::Mesh::removePose */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     removePose()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removePose
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1removePose_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::Mesh::removePose(_cpp_name);
} /* void Ogre::Mesh::removePose */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     removeAllPoses()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removeAllPoses
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1removeAllPoses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllPoses();
} /* void Ogre::Mesh::removeAllPoses */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getPoseIterator()
 * Type:       non-virtual method
 * Definition: PoseIterator Ogre::Mesh::getPoseIterator
 * Signature:  ()Ogre_Mesh_PoseIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getPoseIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh::PoseIterator* _cpp_result = new Ogre::Mesh::PoseIterator( _cpp_this->getPoseIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* PoseIterator Ogre::Mesh::getPoseIterator */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getPoseIterator_const()
 * Type:       non-virtual method
 * Definition: ConstPoseIterator Ogre::Mesh::getPoseIterator
 * Signature:  ()Ogre_Mesh_ConstPoseIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getPoseIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh::ConstPoseIterator* _cpp_result = new Ogre::Mesh::ConstPoseIterator( _cpp_this->getPoseIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ConstPoseIterator Ogre::Mesh::getPoseIterator */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getPoseList()
 * Type:       non-virtual method
 * Definition: const PoseList& Ogre::Mesh::getPoseList
 * Signature:  ()Ogre_PoseList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getPoseList_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PoseList* _cpp_result = & _cpp_this->getPoseList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const PoseList& Ogre::Mesh::getPoseList */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     prepareMatricesForVertexBlend()
 * Type:       static method
 * Definition: static void Ogre::Mesh::prepareMatricesForVertexBlend
 * Signature:  (Ogre_Matrix4Ogre_Matrix4Ogre_Mesh_IndexMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1prepareMatricesForVertexBlend_1_1Matrix4PMatrix4PIndexMapR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong blendMatrices, 
  jlong boneMatrices, 
  jlong indexMap
)
{
   // static method of class Ogre::PatchMesh without return value 
   // parameter conversions 
  const Ogre::Matrix4** _cpp_blendMatrices = reinterpret_cast< const Ogre::Matrix4** >(blendMatrices);
  const Ogre::Matrix4* _cpp_boneMatrices = reinterpret_cast< const Ogre::Matrix4* >(boneMatrices);
  const Ogre::Mesh::IndexMap* _cpp_indexMap = reinterpret_cast< const Ogre::Mesh::IndexMap* >(indexMap); 
   
   // call library method 
   Ogre::PatchMesh::prepareMatricesForVertexBlend(_cpp_blendMatrices, _cpp_boneMatrices, *_cpp_indexMap);
} /* static void Ogre::Mesh::prepareMatricesForVertexBlend */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     softwareVertexBlend()
 * Type:       static method
 * Definition: static void Ogre::Mesh::softwareVertexBlend
 * Signature:  (Ogre_VertexDataOgre_VertexDataOgre_Matrix4IZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1softwareVertexBlend_1_1VertexDataPVertexDataPMatrix4Pivbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong sourceVertexData, 
  jlong targetVertexData, 
  jlong blendMatrices, 
  jint numMatrices, 
  jboolean blendNormals
)
{
   // static method of class Ogre::PatchMesh without return value 
   // parameter conversions 
  const Ogre::VertexData* _cpp_sourceVertexData = reinterpret_cast< const Ogre::VertexData* >(sourceVertexData);
  const Ogre::VertexData* _cpp_targetVertexData = reinterpret_cast< const Ogre::VertexData* >(targetVertexData);
  const Ogre::Matrix4** _cpp_blendMatrices = reinterpret_cast< const Ogre::Matrix4** >(blendMatrices);
  size_t _cpp_numMatrices = numMatrices;
  bool _cpp_blendNormals = blendNormals ? true : false; 
   
   // call library method 
   Ogre::PatchMesh::softwareVertexBlend(_cpp_sourceVertexData, _cpp_targetVertexData, _cpp_blendMatrices, _cpp_numMatrices, _cpp_blendNormals);
} /* static void Ogre::Mesh::softwareVertexBlend */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     softwareVertexMorph()
 * Type:       static method
 * Definition: static void Ogre::Mesh::softwareVertexMorph
 * Signature:  (floatOgre_HardwareVertexBufferSharedPtrOgre_HardwareVertexBufferSharedPtrOgre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1softwareVertexMorph_1_1RealvHardwareVertexBufferSharedPtrRHardwareVertexBufferSharedPtrRVertexDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat t, 
  jlong b1, 
  jlong b2, 
  jlong targetVertexData
)
{
   // static method of class Ogre::PatchMesh without return value 
   // parameter conversions 
  float _cpp_t = t;
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_b1 = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(b1);
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_b2 = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(b2);
  Ogre::VertexData* _cpp_targetVertexData = reinterpret_cast< Ogre::VertexData* >(targetVertexData); 
   
   // call library method 
   Ogre::PatchMesh::softwareVertexMorph(_cpp_t, *_cpp_b1, *_cpp_b2, _cpp_targetVertexData);
} /* static void Ogre::Mesh::softwareVertexMorph */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     softwareVertexPoseBlend()
 * Type:       static method
 * Definition: static void Ogre::Mesh::softwareVertexPoseBlend
 * Signature:  (floatstd_map__size_t__Vector3__Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1softwareVertexPoseBlend_1_1Realvstd_1map_1_1size_1t_1_1Vector3_1_1rVertexDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat weight, 
  jlong vertexOffsetMap, 
  jlong targetVertexData
)
{
   // static method of class Ogre::PatchMesh without return value 
   // parameter conversions 
  float _cpp_weight = weight;
  std::map< size_t, Ogre::Vector3 >* _cpp_vertexOffsetMap = reinterpret_cast< std::map< size_t, Ogre::Vector3 >* >(vertexOffsetMap);
  Ogre::VertexData* _cpp_targetVertexData = reinterpret_cast< Ogre::VertexData* >(targetVertexData); 
   
   // call library method 
   Ogre::PatchMesh::softwareVertexPoseBlend(_cpp_weight, *_cpp_vertexOffsetMap, _cpp_targetVertexData);
} /* static void Ogre::Mesh::softwareVertexPoseBlend */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepare();
} /* virtual void Ogre::Resource::prepare */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
)
{
   // parameter conversions 
  bool _cpp_backgroundThread = backgroundThread ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->load(_cpp_backgroundThread);
} /* virtual void Ogre::Resource::load */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     reload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reload();
} /* virtual void Ogre::Resource::reload */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isReloadable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isReloadable */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isManuallyLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isManuallyLoaded */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unload();
} /* virtual void Ogre::Resource::unload */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSize() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Resource::getSize */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     touch()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->touch();
} /* virtual void Ogre::Resource::touch */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_PatchMesh__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getName */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getHandle() ; 
   return _cpp_result;
} /* virtual ResourceHandle Ogre::Resource::getHandle */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPrepared() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isPrepared */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isLoaded */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoading() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isLoading */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: virtual LoadingState Ogre::Resource::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Resource::LoadingState _cpp_result = _cpp_this->getLoadingState() ; 
   return _cpp_result;
} /* virtual LoadingState Ogre::Resource::getLoadingState */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isBackgroundLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isBackgroundLoaded */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
)
{
   // parameter conversions 
  bool _cpp_bl = bl ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBackgroundLoaded(_cpp_bl);
} /* virtual void Ogre::Resource::setBackgroundLoaded */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->escalateLoading();
} /* virtual void Ogre::Resource::escalateLoading */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_lis);
} /* virtual void Ogre::Resource::addListener */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_lis);
} /* virtual void Ogre::Resource::removeListener */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_PatchMesh__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getGroup() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getGroup */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
)
{
   // parameter conversions 
  std::string _cpp_newGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, newGroup, _cpp_newGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->changeGroupOwnership(_cpp_newGroup);
} /* virtual void Ogre::Resource::changeGroupOwnership */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager* _cpp_result = _cpp_this->getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceManager* Ogre::Resource::getCreator */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_PatchMesh__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getOrigin() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getOrigin */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
)
{
   // parameter conversions 
  std::string _cpp_origin = ""; org::xbig::jni::to_stdstring(_jni_env_, origin, _cpp_origin); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyOrigin(_cpp_origin);
} /* virtual void Ogre::Resource::_notifyOrigin */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PatchMesh__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getStateCount() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Resource::getStateCount */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_dirtyState();
} /* virtual void Ogre::Resource::_dirtyState */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundLoadingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundLoadingComplete */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundPreparingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundPreparingComplete */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PatchMesh__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_PatchMesh__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::PatchMesh* _cpp_this = reinterpret_cast<const Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::PatchMesh without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::PatchMesh::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::PatchMesh::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::PatchMesh 
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::PatchMesh::__delete */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getsharedVertexData()
 * Type:       getter for public attribute
 * Definition: VertexData* Ogre::Mesh::sharedVertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getsharedVertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->sharedVertexData; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::Mesh::sharedVertexData */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setsharedVertexData()
 * Type:       setter for public attribute
 * Definition: VertexData* Ogre::Mesh::sharedVertexData
 * Signature:  (Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setsharedVertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::VertexData* _cpp__jni_value_ = reinterpret_cast< Ogre::VertexData* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this =reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->sharedVertexData = _cpp__jni_value_;
} /* VertexData* Ogre::Mesh::sharedVertexData */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     getsharedBlendIndexToBoneIndexMap()
 * Type:       getter for public attribute
 * Definition: IndexMap Ogre::Mesh::sharedBlendIndexToBoneIndexMap
 * Signature:  ()Ogre_Mesh_IndexMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PatchMesh__1getsharedBlendIndexToBoneIndexMap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this = reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Mesh::IndexMap* _cpp_result = new Ogre::Mesh::IndexMap( _cpp_this->sharedBlendIndexToBoneIndexMap); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* IndexMap Ogre::Mesh::sharedBlendIndexToBoneIndexMap */


/*
 * Class:      org.ogre4j.PatchMesh
 * Method:     setsharedBlendIndexToBoneIndexMap()
 * Type:       setter for public attribute
 * Definition: IndexMap Ogre::Mesh::sharedBlendIndexToBoneIndexMap
 * Signature:  (Ogre_Mesh_IndexMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PatchMesh__1setsharedBlendIndexToBoneIndexMap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Mesh::IndexMap* _cpp__jni_value_ = reinterpret_cast< Ogre::Mesh::IndexMap* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::PatchMesh* _cpp_this =reinterpret_cast<Ogre::PatchMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->sharedBlendIndexToBoneIndexMap = *_cpp__jni_value_;
} /* IndexMap Ogre::Mesh::sharedBlendIndexToBoneIndexMap */
