///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Pose.h"

// import header files of original library
#include <OgrePose.h>



/*
 * Class:      org.ogre4j.Pose
 * Method:     Pose()
 * Type:       constructor
 * Definition: Ogre::Pose::Pose
 * Signature:  (unsigned_shortstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pose__1_1createPose_1_1ushortvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint target, 
  jstring name
)
{
   // constructor of class Ogre::Pose 
   
   // parameter conversions 
  unsigned short _cpp_target = target;
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::Pose 
   Ogre::Pose* _cpp_this = new Ogre::Pose(_cpp_target, _cpp_name); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Pose::Pose */


/*
 * Class:      org.ogre4j.Pose
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pose::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pose__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pose* _cpp_this = reinterpret_cast<const Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Pose::getName */


/*
 * Class:      org.ogre4j.Pose
 * Method:     getTarget()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Pose::getTarget
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pose__1getTarget_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pose* _cpp_this = reinterpret_cast<const Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getTarget() ; 
   return _cpp_result;
} /* ushort Ogre::Pose::getTarget */


/*
 * Class:      org.ogre4j.Pose
 * Method:     addVertex()
 * Type:       non-virtual method
 * Definition: void Ogre::Pose::addVertex
 * Signature:  (IOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pose__1addVertex_1_1ivVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong offset
)
{
   // parameter conversions 
  size_t _cpp_index = index;
  const Ogre::Vector3* _cpp_offset = reinterpret_cast< const Ogre::Vector3* >(offset); 
   
   // cast pointer to C++ object 
   Ogre::Pose* _cpp_this = reinterpret_cast<Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVertex(_cpp_index, *_cpp_offset);
} /* void Ogre::Pose::addVertex */


/*
 * Class:      org.ogre4j.Pose
 * Method:     removeVertex()
 * Type:       non-virtual method
 * Definition: void Ogre::Pose::removeVertex
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pose__1removeVertex_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::Pose* _cpp_this = reinterpret_cast<Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVertex(_cpp_index);
} /* void Ogre::Pose::removeVertex */


/*
 * Class:      org.ogre4j.Pose
 * Method:     clearVertexOffsets()
 * Type:       non-virtual method
 * Definition: void Ogre::Pose::clearVertexOffsets
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pose__1clearVertexOffsets (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pose* _cpp_this = reinterpret_cast<Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearVertexOffsets();
} /* void Ogre::Pose::clearVertexOffsets */


/*
 * Class:      org.ogre4j.Pose
 * Method:     getVertexOffsetIterator_const()
 * Type:       non-virtual method
 * Definition: ConstVertexOffsetIterator Ogre::Pose::getVertexOffsetIterator
 * Signature:  ()Ogre_Pose_ConstVertexOffsetIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pose__1getVertexOffsetIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pose* _cpp_this = reinterpret_cast<const Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pose::ConstVertexOffsetIterator* _cpp_result = new Ogre::Pose::ConstVertexOffsetIterator( _cpp_this->getVertexOffsetIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ConstVertexOffsetIterator Ogre::Pose::getVertexOffsetIterator */


/*
 * Class:      org.ogre4j.Pose
 * Method:     getVertexOffsetIterator()
 * Type:       non-virtual method
 * Definition: VertexOffsetIterator Ogre::Pose::getVertexOffsetIterator
 * Signature:  ()Ogre_Pose_VertexOffsetIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pose__1getVertexOffsetIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Pose* _cpp_this = reinterpret_cast<Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pose::VertexOffsetIterator* _cpp_result = new Ogre::Pose::VertexOffsetIterator( _cpp_this->getVertexOffsetIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexOffsetIterator Ogre::Pose::getVertexOffsetIterator */


/*
 * Class:      org.ogre4j.Pose
 * Method:     getVertexOffsets()
 * Type:       non-virtual method
 * Definition: const VertexOffsetMap& Ogre::Pose::getVertexOffsets
 * Signature:  ()Ogre_Pose_VertexOffsetMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pose__1getVertexOffsets_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pose* _cpp_this = reinterpret_cast<const Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pose::VertexOffsetMap* _cpp_result = & _cpp_this->getVertexOffsets() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VertexOffsetMap& Ogre::Pose::getVertexOffsets */


/*
 * Class:      org.ogre4j.Pose
 * Method:     _getHardwareVertexBuffer()
 * Type:       non-virtual method
 * Definition: const HardwareVertexBufferSharedPtr& Ogre::Pose::_getHardwareVertexBuffer
 * Signature:  (I)Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pose__1_1getHardwareVertexBuffer_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numVertices
)
{
   // parameter conversions 
  size_t _cpp_numVertices = numVertices; 
   
   // cast pointer to C++ object 
   const Ogre::Pose* _cpp_this = reinterpret_cast<const Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareVertexBufferSharedPtr* _cpp_result = & _cpp_this->_getHardwareVertexBuffer(_cpp_numVertices) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const HardwareVertexBufferSharedPtr& Ogre::Pose::_getHardwareVertexBuffer */


/*
 * Class:      org.ogre4j.Pose
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: Pose* Ogre::Pose::clone
 * Signature:  ()Ogre_Pose
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pose__1clone_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Pose* _cpp_this = reinterpret_cast<const Ogre::Pose*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pose* _cpp_result = _cpp_this->clone() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pose* Ogre::Pose::clone */


/*
 * Class:      org.ogre4j.Pose
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Pose::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pose__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Pose 
   // cast pointer to C++ object 
   Ogre::Pose* _cpp_this = reinterpret_cast<Ogre::Pose*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Pose::__delete */
