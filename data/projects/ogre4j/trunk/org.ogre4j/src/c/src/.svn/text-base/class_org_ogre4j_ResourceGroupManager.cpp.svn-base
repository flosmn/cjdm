///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ResourceGroupManager.h"

// import header files of original library
#include <OgreResourceGroupManager.h>



/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     ResourceGroupManager()
 * Type:       constructor
 * Definition: Ogre::ResourceGroupManager::ResourceGroupManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1_1createResourceGroupManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ResourceGroupManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ResourceGroupManager 
   Ogre::ResourceGroupManager* _cpp_this = new Ogre::ResourceGroupManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ResourceGroupManager::ResourceGroupManager */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     createResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::createResourceGroup
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1createResourceGroup_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->createResourceGroup(_cpp_name);
} /* void Ogre::ResourceGroupManager::createResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     initialiseResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::initialiseResourceGroup
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1initialiseResourceGroup_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->initialiseResourceGroup(_cpp_name);
} /* void Ogre::ResourceGroupManager::initialiseResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     initialiseAllResourceGroups()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::initialiseAllResourceGroups
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1initialiseAllResourceGroups (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->initialiseAllResourceGroups();
} /* void Ogre::ResourceGroupManager::initialiseAllResourceGroups */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     prepareResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::prepareResourceGroup
 * Signature:  (std_stringZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1prepareResourceGroup_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean prepareMainResources, 
  jboolean prepareWorldGeom
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_prepareMainResources = prepareMainResources ? true : false;
  bool _cpp_prepareWorldGeom = prepareWorldGeom ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepareResourceGroup(_cpp_name, _cpp_prepareMainResources, _cpp_prepareWorldGeom);
} /* void Ogre::ResourceGroupManager::prepareResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     loadResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::loadResourceGroup
 * Signature:  (std_stringZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1loadResourceGroup_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean loadMainResources, 
  jboolean loadWorldGeom
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_loadMainResources = loadMainResources ? true : false;
  bool _cpp_loadWorldGeom = loadWorldGeom ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->loadResourceGroup(_cpp_name, _cpp_loadMainResources, _cpp_loadWorldGeom);
} /* void Ogre::ResourceGroupManager::loadResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     unloadResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::unloadResourceGroup
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1unloadResourceGroup_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean reloadableOnly
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadResourceGroup(_cpp_name, _cpp_reloadableOnly);
} /* void Ogre::ResourceGroupManager::unloadResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     unloadUnreferencedResourcesInGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::unloadUnreferencedResourcesInGroup
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1unloadUnreferencedResourcesInGroup_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean reloadableOnly
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadUnreferencedResourcesInGroup(_cpp_name, _cpp_reloadableOnly);
} /* void Ogre::ResourceGroupManager::unloadUnreferencedResourcesInGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     clearResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::clearResourceGroup
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1clearResourceGroup_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearResourceGroup(_cpp_name);
} /* void Ogre::ResourceGroupManager::clearResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     destroyResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::destroyResourceGroup
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1destroyResourceGroup_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyResourceGroup(_cpp_name);
} /* void Ogre::ResourceGroupManager::destroyResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     isResourceGroupInitialised()
 * Type:       non-virtual method
 * Definition: bool Ogre::ResourceGroupManager::isResourceGroupInitialised
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ResourceGroupManager__1isResourceGroupInitialised_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isResourceGroupInitialised(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ResourceGroupManager::isResourceGroupInitialised */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     isResourceGroupLoaded()
 * Type:       non-virtual method
 * Definition: bool Ogre::ResourceGroupManager::isResourceGroupLoaded
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ResourceGroupManager__1isResourceGroupLoaded_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isResourceGroupLoaded(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ResourceGroupManager::isResourceGroupLoaded */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     addResourceLocation()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::addResourceLocation
 * Signature:  (std_stringstd_stringstd_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1addResourceLocation_1_1StringRStringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring locType, 
  jstring resGroup, 
  jboolean recursive
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_locType = ""; org::xbig::jni::to_stdstring(_jni_env_, locType, _cpp_locType); // calls c-tor only. Not operator= .;
  std::string _cpp_resGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, resGroup, _cpp_resGroup); // calls c-tor only. Not operator= .;
  bool _cpp_recursive = recursive ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addResourceLocation(_cpp_name, _cpp_locType, _cpp_resGroup, _cpp_recursive);
} /* void Ogre::ResourceGroupManager::addResourceLocation */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     removeResourceLocation()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::removeResourceLocation
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1removeResourceLocation_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring resGroup
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_resGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, resGroup, _cpp_resGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeResourceLocation(_cpp_name, _cpp_resGroup);
} /* void Ogre::ResourceGroupManager::removeResourceLocation */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     declareResource()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::declareResource
 * Signature:  (std_stringstd_stringstd_stringOgre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1declareResource_1_1StringRStringRStringRNameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring resourceType, 
  jstring groupName, 
  jlong loadParameters
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_resourceType = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceType, _cpp_resourceType); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  const Ogre::NameValuePairList* _cpp_loadParameters = reinterpret_cast< const Ogre::NameValuePairList* >(loadParameters); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->declareResource(_cpp_name, _cpp_resourceType, _cpp_groupName, *_cpp_loadParameters);
} /* void Ogre::ResourceGroupManager::declareResource */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     declareResource()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::declareResource
 * Signature:  (std_stringstd_stringstd_stringOgre_ManualResourceLoaderOgre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1declareResource_1_1StringRStringRStringRManualResourceLoaderpNameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring resourceType, 
  jstring groupName, 
  jlong loader, 
  jlong loadParameters
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_resourceType = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceType, _cpp_resourceType); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_loadParameters = reinterpret_cast< const Ogre::NameValuePairList* >(loadParameters); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->declareResource(_cpp_name, _cpp_resourceType, _cpp_groupName, _cpp_loader, *_cpp_loadParameters);
} /* void Ogre::ResourceGroupManager::declareResource */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     undeclareResource()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::undeclareResource
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1undeclareResource_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->undeclareResource(_cpp_name, _cpp_groupName);
} /* void Ogre::ResourceGroupManager::undeclareResource */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     openResource()
 * Type:       non-virtual method
 * Definition: DataStreamPtr Ogre::ResourceGroupManager::openResource
 * Signature:  (std_stringstd_stringZOgre_Resource)Ogre_DataStreamPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1openResource_1_1StringRStringRbvResourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resourceName, 
  jstring groupName, 
  jboolean searchGroupsIfNotFound, 
  jlong resourceBeingLoaded
)
{
   // parameter conversions 
  std::string _cpp_resourceName = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceName, _cpp_resourceName); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  bool _cpp_searchGroupsIfNotFound = searchGroupsIfNotFound ? true : false;
  Ogre::Resource* _cpp_resourceBeingLoaded = reinterpret_cast< Ogre::Resource* >(resourceBeingLoaded); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::DataStreamPtr* _cpp_result = new Ogre::DataStreamPtr( _cpp_this->openResource(_cpp_resourceName, _cpp_groupName, _cpp_searchGroupsIfNotFound, _cpp_resourceBeingLoaded) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* DataStreamPtr Ogre::ResourceGroupManager::openResource */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     openResources()
 * Type:       non-virtual method
 * Definition: DataStreamListPtr Ogre::ResourceGroupManager::openResources
 * Signature:  (std_stringstd_string)Ogre_DataStreamListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1openResources_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pattern, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::DataStreamListPtr* _cpp_result = new Ogre::DataStreamListPtr( _cpp_this->openResources(_cpp_pattern, _cpp_groupName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* DataStreamListPtr Ogre::ResourceGroupManager::openResources */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     listResourceNames()
 * Type:       non-virtual method
 * Definition: StringVectorPtr Ogre::ResourceGroupManager::listResourceNames
 * Signature:  (std_stringZ)Ogre_StringVectorPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1listResourceNames_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName, 
  jboolean dirs
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVectorPtr* _cpp_result = new Ogre::StringVectorPtr( _cpp_this->listResourceNames(_cpp_groupName, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* StringVectorPtr Ogre::ResourceGroupManager::listResourceNames */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     listResourceFileInfo()
 * Type:       non-virtual method
 * Definition: FileInfoListPtr Ogre::ResourceGroupManager::listResourceFileInfo
 * Signature:  (std_stringZ)Ogre_FileInfoListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1listResourceFileInfo_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName, 
  jboolean dirs
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FileInfoListPtr* _cpp_result = new Ogre::FileInfoListPtr( _cpp_this->listResourceFileInfo(_cpp_groupName, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* FileInfoListPtr Ogre::ResourceGroupManager::listResourceFileInfo */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     findResourceNames()
 * Type:       non-virtual method
 * Definition: StringVectorPtr Ogre::ResourceGroupManager::findResourceNames
 * Signature:  (std_stringstd_stringZ)Ogre_StringVectorPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1findResourceNames_1_1StringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName, 
  jstring pattern, 
  jboolean dirs
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVectorPtr* _cpp_result = new Ogre::StringVectorPtr( _cpp_this->findResourceNames(_cpp_groupName, _cpp_pattern, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* StringVectorPtr Ogre::ResourceGroupManager::findResourceNames */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     resourceExists()
 * Type:       non-virtual method
 * Definition: bool Ogre::ResourceGroupManager::resourceExists
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ResourceGroupManager__1resourceExists_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring group, 
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->resourceExists(_cpp_group, _cpp_filename) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ResourceGroupManager::resourceExists */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     findGroupContainingResource()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ResourceGroupManager::findGroupContainingResource
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ResourceGroupManager__1findGroupContainingResource_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->findGroupContainingResource(_cpp_filename) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ResourceGroupManager::findGroupContainingResource */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     findResourceFileInfo()
 * Type:       non-virtual method
 * Definition: FileInfoListPtr Ogre::ResourceGroupManager::findResourceFileInfo
 * Signature:  (std_stringstd_stringZ)Ogre_FileInfoListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1findResourceFileInfo_1_1StringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring group, 
  jstring pattern, 
  jboolean dirs
)
{
   // parameter conversions 
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FileInfoListPtr* _cpp_result = new Ogre::FileInfoListPtr( _cpp_this->findResourceFileInfo(_cpp_group, _cpp_pattern, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* FileInfoListPtr Ogre::ResourceGroupManager::findResourceFileInfo */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     resourceModifiedTime()
 * Type:       non-virtual method
 * Definition: time_t Ogre::ResourceGroupManager::resourceModifiedTime
 * Signature:  (std_stringstd_string)J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1resourceModifiedTime_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring group, 
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const time_t _cpp_result = _cpp_this->resourceModifiedTime(_cpp_group, _cpp_filename) ; 
   return _cpp_result;
} /* time_t Ogre::ResourceGroupManager::resourceModifiedTime */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     addResourceGroupListener()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::addResourceGroupListener
 * Signature:  (Ogre_ResourceGroupListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1addResourceGroupListener_1_1ResourceGroupListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  Ogre::ResourceGroupListener* _cpp_l = reinterpret_cast< Ogre::ResourceGroupListener* >(l); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addResourceGroupListener(_cpp_l);
} /* void Ogre::ResourceGroupManager::addResourceGroupListener */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     removeResourceGroupListener()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::removeResourceGroupListener
 * Signature:  (Ogre_ResourceGroupListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1removeResourceGroupListener_1_1ResourceGroupListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  Ogre::ResourceGroupListener* _cpp_l = reinterpret_cast< Ogre::ResourceGroupListener* >(l); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeResourceGroupListener(_cpp_l);
} /* void Ogre::ResourceGroupManager::removeResourceGroupListener */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     setWorldResourceGroupName()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::setWorldResourceGroupName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1setWorldResourceGroupName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWorldResourceGroupName(_cpp_groupName);
} /* void Ogre::ResourceGroupManager::setWorldResourceGroupName */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getWorldResourceGroupName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ResourceGroupManager::getWorldResourceGroupName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ResourceGroupManager__1getWorldResourceGroupName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<const Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getWorldResourceGroupName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ResourceGroupManager::getWorldResourceGroupName */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     linkWorldGeometryToResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::linkWorldGeometryToResourceGroup
 * Signature:  (std_stringstd_stringOgre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1linkWorldGeometryToResourceGroup_1_1StringRStringRSceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring group, 
  jstring worldGeometry, 
  jlong sceneManager
)
{
   // parameter conversions 
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  std::string _cpp_worldGeometry = ""; org::xbig::jni::to_stdstring(_jni_env_, worldGeometry, _cpp_worldGeometry); // calls c-tor only. Not operator= .;
  Ogre::SceneManager* _cpp_sceneManager = reinterpret_cast< Ogre::SceneManager* >(sceneManager); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->linkWorldGeometryToResourceGroup(_cpp_group, _cpp_worldGeometry, _cpp_sceneManager);
} /* void Ogre::ResourceGroupManager::linkWorldGeometryToResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     unlinkWorldGeometryFromResourceGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::unlinkWorldGeometryFromResourceGroup
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1unlinkWorldGeometryFromResourceGroup_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring group
)
{
   // parameter conversions 
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unlinkWorldGeometryFromResourceGroup(_cpp_group);
} /* void Ogre::ResourceGroupManager::unlinkWorldGeometryFromResourceGroup */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     shutdownAll()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::shutdownAll
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1shutdownAll (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shutdownAll();
} /* void Ogre::ResourceGroupManager::shutdownAll */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _registerResourceManager()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_registerResourceManager
 * Signature:  (std_stringOgre_ResourceManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1registerResourceManager_1_1StringRResourceManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resourceType, 
  jlong rm
)
{
   // parameter conversions 
  std::string _cpp_resourceType = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceType, _cpp_resourceType); // calls c-tor only. Not operator= .;
  Ogre::ResourceManager* _cpp_rm = reinterpret_cast< Ogre::ResourceManager* >(rm); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_registerResourceManager(_cpp_resourceType, _cpp_rm);
} /* void Ogre::ResourceGroupManager::_registerResourceManager */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _unregisterResourceManager()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_unregisterResourceManager
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1unregisterResourceManager_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resourceType
)
{
   // parameter conversions 
  std::string _cpp_resourceType = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceType, _cpp_resourceType); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_unregisterResourceManager(_cpp_resourceType);
} /* void Ogre::ResourceGroupManager::_unregisterResourceManager */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getResourceManagerIterator()
 * Type:       non-virtual method
 * Definition: ResourceManagerIterator Ogre::ResourceGroupManager::getResourceManagerIterator
 * Signature:  ()Ogre_ResourceGroupManager_ResourceManagerIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1getResourceManagerIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceGroupManager::ResourceManagerIterator* _cpp_result = new Ogre::ResourceGroupManager::ResourceManagerIterator( _cpp_this->getResourceManagerIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceManagerIterator Ogre::ResourceGroupManager::getResourceManagerIterator */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _registerScriptLoader()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_registerScriptLoader
 * Signature:  (Ogre_ScriptLoader)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1registerScriptLoader_1_1ScriptLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong su
)
{
   // parameter conversions 
  Ogre::ScriptLoader* _cpp_su = reinterpret_cast< Ogre::ScriptLoader* >(su); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_registerScriptLoader(_cpp_su);
} /* void Ogre::ResourceGroupManager::_registerScriptLoader */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _unregisterScriptLoader()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_unregisterScriptLoader
 * Signature:  (Ogre_ScriptLoader)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1unregisterScriptLoader_1_1ScriptLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong su
)
{
   // parameter conversions 
  Ogre::ScriptLoader* _cpp_su = reinterpret_cast< Ogre::ScriptLoader* >(su); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_unregisterScriptLoader(_cpp_su);
} /* void Ogre::ResourceGroupManager::_unregisterScriptLoader */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _getResourceManager()
 * Type:       non-virtual method
 * Definition: ResourceManager* Ogre::ResourceGroupManager::_getResourceManager
 * Signature:  (std_string)Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1_1getResourceManager_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resourceType
)
{
   // parameter conversions 
  std::string _cpp_resourceType = ""; org::xbig::jni::to_stdstring(_jni_env_, resourceType, _cpp_resourceType); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager* _cpp_result = _cpp_this->_getResourceManager(_cpp_resourceType) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceManager* Ogre::ResourceGroupManager::_getResourceManager */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyResourceCreated()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyResourceCreated
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyResourceCreated_1_1ResourcePtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::ResourcePtr* _cpp_res = reinterpret_cast< Ogre::ResourcePtr* >(res); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceCreated(*_cpp_res);
} /* void Ogre::ResourceGroupManager::_notifyResourceCreated */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyResourceRemoved()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyResourceRemoved
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyResourceRemoved_1_1ResourcePtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::ResourcePtr* _cpp_res = reinterpret_cast< Ogre::ResourcePtr* >(res); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceRemoved(*_cpp_res);
} /* void Ogre::ResourceGroupManager::_notifyResourceRemoved */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyResourceGroupChanged()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyResourceGroupChanged
 * Signature:  (std_stringOgre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyResourceGroupChanged_1_1StringRResourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring oldGroup, 
  jlong res
)
{
   // parameter conversions 
  std::string _cpp_oldGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, oldGroup, _cpp_oldGroup); // calls c-tor only. Not operator= .;
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceGroupChanged(_cpp_oldGroup, _cpp_res);
} /* void Ogre::ResourceGroupManager::_notifyResourceGroupChanged */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyAllResourcesRemoved()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyAllResourcesRemoved
 * Signature:  (Ogre_ResourceManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyAllResourcesRemoved_1_1ResourceManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong manager
)
{
   // parameter conversions 
  Ogre::ResourceManager* _cpp_manager = reinterpret_cast< Ogre::ResourceManager* >(manager); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAllResourcesRemoved(_cpp_manager);
} /* void Ogre::ResourceGroupManager::_notifyAllResourcesRemoved */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyWorldGeometryPrepareStageStarted()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyWorldGeometryPrepareStageStarted
 * Signature:  (std_string)V
 */

//JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyWorldGeometryPrepareStageStarted_1_1StringR (
//  JNIEnv* _jni_env_, /* interface pointer */
//  jobject _jni_this_, /* Java object */
//  jlong _jni_pointer_, /* C++ pointer */
//  jstring description
//)
//{
//   // parameter conversions 
//  std::string _cpp_description = ""; org::xbig::jni::to_stdstring(_jni_env_, description, _cpp_description); // calls c-tor only. Not operator= .; 
//   
//   // cast pointer to C++ object 
//   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
//   
//   // call library method 
//   _cpp_this->_notifyWorldGeometryPrepareStageStarted(_cpp_description);
//} /* void Ogre::ResourceGroupManager::_notifyWorldGeometryPrepareStageStarted */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyWorldGeometryPrepareStageEnded()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyWorldGeometryPrepareStageEnded
 * Signature:  ()V
 */

//JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyWorldGeometryPrepareStageEnded (
//  JNIEnv* _jni_env_, /* interface pointer */
//  jobject _jni_this_, /* Java object */
//  jlong _jni_pointer_ /* C++ pointer */
//)
//{
//   // parameter conversions 
//   
//   // cast pointer to C++ object 
//   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
//   
//   // call library method 
//   _cpp_this->_notifyWorldGeometryPrepareStageEnded();
//} /* void Ogre::ResourceGroupManager::_notifyWorldGeometryPrepareStageEnded */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyWorldGeometryStageStarted()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyWorldGeometryStageStarted
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyWorldGeometryStageStarted_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring description
)
{
   // parameter conversions 
  std::string _cpp_description = ""; org::xbig::jni::to_stdstring(_jni_env_, description, _cpp_description); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyWorldGeometryStageStarted(_cpp_description);
} /* void Ogre::ResourceGroupManager::_notifyWorldGeometryStageStarted */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     _notifyWorldGeometryStageEnded()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::_notifyWorldGeometryStageEnded
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1notifyWorldGeometryStageEnded (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyWorldGeometryStageEnded();
} /* void Ogre::ResourceGroupManager::_notifyWorldGeometryStageEnded */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getResourceGroups()
 * Type:       non-virtual method
 * Definition: StringVector Ogre::ResourceGroupManager::getResourceGroups
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1getResourceGroups (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = new Ogre::StringVector( _cpp_this->getResourceGroups() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* StringVector Ogre::ResourceGroupManager::getResourceGroups */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getResourceDeclarationList()
 * Type:       non-virtual method
 * Definition: ResourceDeclarationList Ogre::ResourceGroupManager::getResourceDeclarationList
 * Signature:  (std_string)Ogre_ResourceGroupManager_ResourceDeclarationList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1getResourceDeclarationList_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceGroupManager::ResourceDeclarationList* _cpp_result = new Ogre::ResourceGroupManager::ResourceDeclarationList( _cpp_this->getResourceDeclarationList(_cpp_groupName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceDeclarationList Ogre::ResourceGroupManager::getResourceDeclarationList */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     setLoadingListener()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceGroupManager::setLoadingListener
 * Signature:  (Ogre_ResourceLoadingListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1setLoadingListener_1_1ResourceLoadingListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::ResourceLoadingListener* _cpp_listener = reinterpret_cast< Ogre::ResourceLoadingListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setLoadingListener(_cpp_listener);
} /* void Ogre::ResourceGroupManager::setLoadingListener */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getLoadingListener()
 * Type:       non-virtual method
 * Definition: ResourceLoadingListener* Ogre::ResourceGroupManager::getLoadingListener
 * Signature:  ()Ogre_ResourceLoadingListener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1getLoadingListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceLoadingListener* _cpp_result = _cpp_this->getLoadingListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceLoadingListener* Ogre::ResourceGroupManager::getLoadingListener */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static ResourceGroupManager& Ogre::ResourceGroupManager::getSingleton
 * Signature:  ()Ogre_ResourceGroupManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ResourceGroupManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ResourceGroupManager* _cpp_result = & Ogre::ResourceGroupManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ResourceGroupManager& Ogre::ResourceGroupManager::getSingleton */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static ResourceGroupManager* Ogre::ResourceGroupManager::getSingletonPtr
 * Signature:  ()Ogre_ResourceGroupManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceGroupManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ResourceGroupManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ResourceGroupManager* _cpp_result = Ogre::ResourceGroupManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ResourceGroupManager* Ogre::ResourceGroupManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ResourceGroupManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ResourceGroupManager 
   // cast pointer to C++ object 
   Ogre::ResourceGroupManager* _cpp_this = reinterpret_cast<Ogre::ResourceGroupManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ResourceGroupManager::__delete */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getDEFAULT_RESOURCE_GROUP_NAME()
 * Type:       getter for public attribute
 * Definition: String Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ResourceGroupManager__1getDEFAULT_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const std::string _cpp_result = Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     setDEFAULT_RESOURCE_GROUP_NAME()
 * Type:       setter for public attribute
 * Definition: String Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1setDEFAULT_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // call library method 
   Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME = _cpp__jni_value_;
} /* String Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getINTERNAL_RESOURCE_GROUP_NAME()
 * Type:       getter for public attribute
 * Definition: String Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ResourceGroupManager__1getINTERNAL_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const std::string _cpp_result = Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     setINTERNAL_RESOURCE_GROUP_NAME()
 * Type:       setter for public attribute
 * Definition: String Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1setINTERNAL_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // call library method 
   Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME = _cpp__jni_value_;
} /* String Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getBOOTSTRAP_RESOURCE_GROUP_NAME()
 * Type:       getter for public attribute
 * Definition: String Ogre::ResourceGroupManager::BOOTSTRAP_RESOURCE_GROUP_NAME
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ResourceGroupManager__1getBOOTSTRAP_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const std::string _cpp_result = Ogre::ResourceGroupManager::BOOTSTRAP_RESOURCE_GROUP_NAME ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::ResourceGroupManager::BOOTSTRAP_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     setBOOTSTRAP_RESOURCE_GROUP_NAME()
 * Type:       setter for public attribute
 * Definition: String Ogre::ResourceGroupManager::BOOTSTRAP_RESOURCE_GROUP_NAME
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1setBOOTSTRAP_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // call library method 
   Ogre::ResourceGroupManager::BOOTSTRAP_RESOURCE_GROUP_NAME = _cpp__jni_value_;
} /* String Ogre::ResourceGroupManager::BOOTSTRAP_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getAUTODETECT_RESOURCE_GROUP_NAME()
 * Type:       getter for public attribute
 * Definition: String Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ResourceGroupManager__1getAUTODETECT_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const std::string _cpp_result = Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     setAUTODETECT_RESOURCE_GROUP_NAME()
 * Type:       setter for public attribute
 * Definition: String Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1setAUTODETECT_1RESOURCE_1GROUP_1NAME (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // call library method 
   Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME = _cpp__jni_value_;
} /* String Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     getRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ResourceGroupManager__1getRESOURCE_1SYSTEM_1NUM_1REFERENCE_1COUNTS (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const size_t _cpp_result = Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS ; 
   return _cpp_result;
} /* size_t Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS */


/*
 * Class:      org.ogre4j.ResourceGroupManager
 * Method:     setRESOURCE_SYSTEM_NUM_REFERENCE_COUNTS()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupManager__1setRESOURCE_1SYSTEM_1NUM_1REFERENCE_1COUNTS (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // call library method 
   Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS = _cpp__jni_value_;
} /* size_t Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS */
