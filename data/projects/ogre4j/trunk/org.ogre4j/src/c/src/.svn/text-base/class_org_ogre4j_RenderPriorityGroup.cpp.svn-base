///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderPriorityGroup.h"

// import header files of original library
#include <OgreRenderQueueSortingGrouping.h>



/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     RenderPriorityGroup()
 * Type:       constructor
 * Definition: Ogre::RenderPriorityGroup::RenderPriorityGroup
 * Signature:  (Ogre_RenderQueueGroupZZZ)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderPriorityGroup__1_1createRenderPriorityGroup_1_1RenderQueueGrouppbvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jboolean splitPassesByLightingType, 
  jboolean splitNoShadowPasses, 
  jboolean shadowCastersNotReceivers
)
{
   // constructor of class Ogre::RenderPriorityGroup 
   
   // parameter conversions 
  Ogre::RenderQueueGroup* _cpp_parent = reinterpret_cast< Ogre::RenderQueueGroup* >(parent);
  bool _cpp_splitPassesByLightingType = splitPassesByLightingType ? true : false;
  bool _cpp_splitNoShadowPasses = splitNoShadowPasses ? true : false;
  bool _cpp_shadowCastersNotReceivers = shadowCastersNotReceivers ? true : false; 
   
   // create new instance of class Ogre::RenderPriorityGroup 
   Ogre::RenderPriorityGroup* _cpp_this = new Ogre::RenderPriorityGroup(_cpp_parent, _cpp_splitPassesByLightingType, _cpp_splitNoShadowPasses, _cpp_shadowCastersNotReceivers); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RenderPriorityGroup::RenderPriorityGroup */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     getSolidsBasic()
 * Type:       non-virtual method
 * Definition: const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsBasic
 * Signature:  ()Ogre_QueuedRenderableCollection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderPriorityGroup__1getSolidsBasic_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<const Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::QueuedRenderableCollection* _cpp_result = & _cpp_this->getSolidsBasic() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsBasic */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     getSolidsDiffuseSpecular()
 * Type:       non-virtual method
 * Definition: const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsDiffuseSpecular
 * Signature:  ()Ogre_QueuedRenderableCollection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderPriorityGroup__1getSolidsDiffuseSpecular_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<const Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::QueuedRenderableCollection* _cpp_result = & _cpp_this->getSolidsDiffuseSpecular() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsDiffuseSpecular */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     getSolidsDecal()
 * Type:       non-virtual method
 * Definition: const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsDecal
 * Signature:  ()Ogre_QueuedRenderableCollection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderPriorityGroup__1getSolidsDecal_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<const Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::QueuedRenderableCollection* _cpp_result = & _cpp_this->getSolidsDecal() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsDecal */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     getSolidsNoShadowReceive()
 * Type:       non-virtual method
 * Definition: const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsNoShadowReceive
 * Signature:  ()Ogre_QueuedRenderableCollection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderPriorityGroup__1getSolidsNoShadowReceive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<const Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::QueuedRenderableCollection* _cpp_result = & _cpp_this->getSolidsNoShadowReceive() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getSolidsNoShadowReceive */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     getTransparentsUnsorted()
 * Type:       non-virtual method
 * Definition: const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getTransparentsUnsorted
 * Signature:  ()Ogre_QueuedRenderableCollection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderPriorityGroup__1getTransparentsUnsorted_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<const Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::QueuedRenderableCollection* _cpp_result = & _cpp_this->getTransparentsUnsorted() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getTransparentsUnsorted */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     getTransparents()
 * Type:       non-virtual method
 * Definition: const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getTransparents
 * Signature:  ()Ogre_QueuedRenderableCollection
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderPriorityGroup__1getTransparents_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<const Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::QueuedRenderableCollection* _cpp_result = & _cpp_this->getTransparents() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const QueuedRenderableCollection& Ogre::RenderPriorityGroup::getTransparents */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     resetOrganisationModes()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::resetOrganisationModes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1resetOrganisationModes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetOrganisationModes();
} /* void Ogre::RenderPriorityGroup::resetOrganisationModes */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     addOrganisationMode()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::addOrganisationMode
 * Signature:  (Ogre_QueuedRenderableCollection_OrganisationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1addOrganisationMode_1_1QueuedRenderableCollection_1OrganisationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint om
)
{
   // parameter conversions 
  Ogre::QueuedRenderableCollection::OrganisationMode _cpp_om = (Ogre::QueuedRenderableCollection::OrganisationMode)om; 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addOrganisationMode(_cpp_om);
} /* void Ogre::RenderPriorityGroup::addOrganisationMode */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     defaultOrganisationMode()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::defaultOrganisationMode
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1defaultOrganisationMode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->defaultOrganisationMode();
} /* void Ogre::RenderPriorityGroup::defaultOrganisationMode */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     addRenderable()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::addRenderable
 * Signature:  (Ogre_RenderableOgre_Technique)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1addRenderable_1_1RenderablepTechniquep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pRend, 
  jlong pTech
)
{
   // parameter conversions 
  Ogre::Renderable* _cpp_pRend = reinterpret_cast< Ogre::Renderable* >(pRend);
  Ogre::Technique* _cpp_pTech = reinterpret_cast< Ogre::Technique* >(pTech); 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderable(_cpp_pRend, _cpp_pTech);
} /* void Ogre::RenderPriorityGroup::addRenderable */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     sort()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::sort
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1sort_1_1CameraP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->sort(_cpp_cam);
} /* void Ogre::RenderPriorityGroup::sort */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void Ogre::RenderPriorityGroup::clear */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     setSplitPassesByLightingType()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::setSplitPassesByLightingType
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1setSplitPassesByLightingType_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean split
)
{
   // parameter conversions 
  bool _cpp_split = split ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSplitPassesByLightingType(_cpp_split);
} /* void Ogre::RenderPriorityGroup::setSplitPassesByLightingType */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     setSplitNoShadowPasses()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::setSplitNoShadowPasses
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1setSplitNoShadowPasses_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean split
)
{
   // parameter conversions 
  bool _cpp_split = split ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSplitNoShadowPasses(_cpp_split);
} /* void Ogre::RenderPriorityGroup::setSplitNoShadowPasses */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     setShadowCastersCannotBeReceivers()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderPriorityGroup::setShadowCastersCannotBeReceivers
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1setShadowCastersCannotBeReceivers_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean ind
)
{
   // parameter conversions 
  bool _cpp_ind = ind ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setShadowCastersCannotBeReceivers(_cpp_ind);
} /* void Ogre::RenderPriorityGroup::setShadowCastersCannotBeReceivers */


/*
 * Class:      org.ogre4j.RenderPriorityGroup
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderPriorityGroup::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderPriorityGroup__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderPriorityGroup 
   // cast pointer to C++ object 
   Ogre::RenderPriorityGroup* _cpp_this = reinterpret_cast<Ogre::RenderPriorityGroup*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderPriorityGroup::__delete */
