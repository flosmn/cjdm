///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_LinkedSkeletonAnimationSource.h"

// import header files of original library
#include <OgreSkeleton.h>



/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     LinkedSkeletonAnimationSource()
 * Type:       constructor
 * Definition: Ogre::LinkedSkeletonAnimationSource::LinkedSkeletonAnimationSource
 * Signature:  (std_stringfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1_1createLinkedSkeletonAnimationSource_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring skelName, 
  jfloat scl
)
{
   // constructor of class Ogre::LinkedSkeletonAnimationSource 
   
   // parameter conversions 
  std::string _cpp_skelName = ""; org::xbig::jni::to_stdstring(_jni_env_, skelName, _cpp_skelName); // calls c-tor only. Not operator= .;
  float _cpp_scl = scl; 
   
   // create new instance of class Ogre::LinkedSkeletonAnimationSource 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this = new Ogre::LinkedSkeletonAnimationSource(_cpp_skelName, _cpp_scl); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::LinkedSkeletonAnimationSource::LinkedSkeletonAnimationSource */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     LinkedSkeletonAnimationSource()
 * Type:       constructor
 * Definition: Ogre::LinkedSkeletonAnimationSource::LinkedSkeletonAnimationSource
 * Signature:  (std_stringfloatOgre_SkeletonPtr)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1_1createLinkedSkeletonAnimationSource_1_1StringRRealvSkeletonPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring skelName, 
  jfloat scl, 
  jlong skelPtr
)
{
   // constructor of class Ogre::LinkedSkeletonAnimationSource 
   
   // parameter conversions 
  std::string _cpp_skelName = ""; org::xbig::jni::to_stdstring(_jni_env_, skelName, _cpp_skelName); // calls c-tor only. Not operator= .;
  float _cpp_scl = scl;
  Ogre::SkeletonPtr* _cpp_skelPtr = reinterpret_cast< Ogre::SkeletonPtr* >(skelPtr); 
   
   // create new instance of class Ogre::LinkedSkeletonAnimationSource 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this = new Ogre::LinkedSkeletonAnimationSource(_cpp_skelName, _cpp_scl, *_cpp_skelPtr); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::LinkedSkeletonAnimationSource::LinkedSkeletonAnimationSource */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::LinkedSkeletonAnimationSource::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::LinkedSkeletonAnimationSource 
   // cast pointer to C++ object 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this = reinterpret_cast<Ogre::LinkedSkeletonAnimationSource*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::LinkedSkeletonAnimationSource::__delete */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     getskeletonName()
 * Type:       getter for public attribute
 * Definition: String Ogre::LinkedSkeletonAnimationSource::skeletonName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1getskeletonName (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this = reinterpret_cast<Ogre::LinkedSkeletonAnimationSource*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->skeletonName; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::LinkedSkeletonAnimationSource::skeletonName */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     setskeletonName()
 * Type:       setter for public attribute
 * Definition: String Ogre::LinkedSkeletonAnimationSource::skeletonName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1setskeletonName (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this =reinterpret_cast<Ogre::LinkedSkeletonAnimationSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->skeletonName = _cpp__jni_value_;
} /* String Ogre::LinkedSkeletonAnimationSource::skeletonName */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     getpSkeleton()
 * Type:       getter for public attribute
 * Definition: SkeletonPtr Ogre::LinkedSkeletonAnimationSource::pSkeleton
 * Signature:  ()Ogre_SkeletonPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1getpSkeleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this = reinterpret_cast<Ogre::LinkedSkeletonAnimationSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SkeletonPtr* _cpp_result = new Ogre::SkeletonPtr( _cpp_this->pSkeleton); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SkeletonPtr Ogre::LinkedSkeletonAnimationSource::pSkeleton */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     setpSkeleton()
 * Type:       setter for public attribute
 * Definition: SkeletonPtr Ogre::LinkedSkeletonAnimationSource::pSkeleton
 * Signature:  (Ogre_SkeletonPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1setpSkeleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::SkeletonPtr* _cpp__jni_value_ = reinterpret_cast< Ogre::SkeletonPtr* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this =reinterpret_cast<Ogre::LinkedSkeletonAnimationSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->pSkeleton = *_cpp__jni_value_;
} /* SkeletonPtr Ogre::LinkedSkeletonAnimationSource::pSkeleton */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     getscale()
 * Type:       getter for public attribute
 * Definition: Real Ogre::LinkedSkeletonAnimationSource::scale
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1getscale (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this = reinterpret_cast<Ogre::LinkedSkeletonAnimationSource*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->scale; 
   return _cpp_result;
} /* Real Ogre::LinkedSkeletonAnimationSource::scale */


/*
 * Class:      org.ogre4j.LinkedSkeletonAnimationSource
 * Method:     setscale()
 * Type:       setter for public attribute
 * Definition: Real Ogre::LinkedSkeletonAnimationSource::scale
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LinkedSkeletonAnimationSource__1setscale (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::LinkedSkeletonAnimationSource* _cpp_this =reinterpret_cast<Ogre::LinkedSkeletonAnimationSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->scale = _cpp__jni_value_;
} /* Real Ogre::LinkedSkeletonAnimationSource::scale */
