///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_CompositorInstance.h"

// import header files of original library
#include <OgreCompositorInstance.h>



/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     CompositorInstance()
 * Type:       constructor
 * Definition: Ogre::CompositorInstance::CompositorInstance
 * Signature:  (Ogre_CompositorOgre_CompositionTechniqueOgre_CompositorChain)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1_1createCompositorInstance_1_1CompositorpCompositionTechniquepCompositorChainp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong filter, 
  jlong technique, 
  jlong chain
)
{
   // constructor of class Ogre::CompositorInstance 
   
   // parameter conversions 
  Ogre::Compositor* _cpp_filter = reinterpret_cast< Ogre::Compositor* >(filter);
  Ogre::CompositionTechnique* _cpp_technique = reinterpret_cast< Ogre::CompositionTechnique* >(technique);
  Ogre::CompositorChain* _cpp_chain = reinterpret_cast< Ogre::CompositorChain* >(chain); 
   
   // create new instance of class Ogre::CompositorInstance 
   Ogre::CompositorInstance* _cpp_this = new Ogre::CompositorInstance(_cpp_filter, _cpp_technique, _cpp_chain); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::CompositorInstance::CompositorInstance */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     setEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean value
)
{
   // parameter conversions 
  bool _cpp_value = value ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEnabled(_cpp_value);
} /* void Ogre::CompositorInstance::setEnabled */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositorInstance::getEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositorInstance__1getEnabled (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::CompositorInstance::getEnabled */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getTextureInstanceName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::CompositorInstance::getTextureInstanceName
 * Signature:  (std_stringI)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_CompositorInstance__1getTextureInstanceName_1_1StringRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint mrtIndex
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  size_t _cpp_mrtIndex = mrtIndex; 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getTextureInstanceName(_cpp_name, _cpp_mrtIndex) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::CompositorInstance::getTextureInstanceName */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getRenderTarget()
 * Type:       non-virtual method
 * Definition: RenderTarget* Ogre::CompositorInstance::getRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderTarget* _cpp_result = _cpp_this->getRenderTarget(_cpp_name) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderTarget* Ogre::CompositorInstance::getRenderTarget */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _compileTargetOperations()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorInstance::_compileTargetOperations
 * Signature:  (Ogre_CompositorInstance_CompiledState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1compileTargetOperations_1_1CompiledStater (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiledState
)
{
   // parameter conversions 
  Ogre::CompositorInstance::CompiledState* _cpp_compiledState = reinterpret_cast< Ogre::CompositorInstance::CompiledState* >(compiledState); 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_compileTargetOperations(*_cpp_compiledState);
} /* virtual void Ogre::CompositorInstance::_compileTargetOperations */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _compileOutputOperation()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorInstance::_compileOutputOperation
 * Signature:  (Ogre_CompositorInstance_TargetOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1compileOutputOperation_1_1TargetOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong finalState
)
{
   // parameter conversions 
  Ogre::CompositorInstance::TargetOperation* _cpp_finalState = reinterpret_cast< Ogre::CompositorInstance::TargetOperation* >(finalState); 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_compileOutputOperation(*_cpp_finalState);
} /* virtual void Ogre::CompositorInstance::_compileOutputOperation */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getCompositor()
 * Type:       non-virtual method
 * Definition: Compositor* Ogre::CompositorInstance::getCompositor
 * Signature:  ()Ogre_Compositor
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getCompositor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Compositor* _cpp_result = _cpp_this->getCompositor() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Compositor* Ogre::CompositorInstance::getCompositor */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getTechnique()
 * Type:       non-virtual method
 * Definition: CompositionTechnique* Ogre::CompositorInstance::getTechnique
 * Signature:  ()Ogre_CompositionTechnique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getTechnique (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositionTechnique* _cpp_result = _cpp_this->getTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositionTechnique* Ogre::CompositorInstance::getTechnique */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getChain()
 * Type:       non-virtual method
 * Definition: CompositorChain* Ogre::CompositorInstance::getChain
 * Signature:  ()Ogre_CompositorChain
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getChain (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::CompositorChain* _cpp_result = _cpp_this->getChain() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* CompositorChain* Ogre::CompositorInstance::getChain */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     addListener()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::addListener
 * Signature:  (Ogre_CompositorInstance_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  Ogre::CompositorInstance::Listener* _cpp_l = reinterpret_cast< Ogre::CompositorInstance::Listener* >(l); 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_l);
} /* void Ogre::CompositorInstance::addListener */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     removeListener()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::removeListener
 * Signature:  (Ogre_CompositorInstance_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  Ogre::CompositorInstance::Listener* _cpp_l = reinterpret_cast< Ogre::CompositorInstance::Listener* >(l); 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_l);
} /* void Ogre::CompositorInstance::removeListener */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _fireNotifyMaterialSetup()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::_fireNotifyMaterialSetup
 * Signature:  (unsigned_intOgre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1fireNotifyMaterialSetup_1_1uint32vMaterialPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass_id, 
  jlong mat
)
{
   // parameter conversions 
  unsigned int _cpp_pass_id = pass_id;
  Ogre::MaterialPtr* _cpp_mat = reinterpret_cast< Ogre::MaterialPtr* >(mat); 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireNotifyMaterialSetup(_cpp_pass_id, *_cpp_mat);
} /* void Ogre::CompositorInstance::_fireNotifyMaterialSetup */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _fireNotifyMaterialRender()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::_fireNotifyMaterialRender
 * Signature:  (unsigned_intOgre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1fireNotifyMaterialRender_1_1uint32vMaterialPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass_id, 
  jlong mat
)
{
   // parameter conversions 
  unsigned int _cpp_pass_id = pass_id;
  Ogre::MaterialPtr* _cpp_mat = reinterpret_cast< Ogre::MaterialPtr* >(mat); 
   
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireNotifyMaterialRender(_cpp_pass_id, *_cpp_mat);
} /* void Ogre::CompositorInstance::_fireNotifyMaterialRender */


/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::CompositorInstance::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::CompositorInstance 
   // cast pointer to C++ object 
   Ogre::CompositorInstance* _cpp_this = reinterpret_cast<Ogre::CompositorInstance*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::CompositorInstance::__delete */
