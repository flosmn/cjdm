///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_EdgeData.h"

// import header files of original library
#include <OgreEdgeListBuilder.h>



/*
 * Class:      org.ogre4j.EdgeData
 * Method:     updateTriangleLightFacing()
 * Type:       non-virtual method
 * Definition: void Ogre::EdgeData::updateTriangleLightFacing
 * Signature:  (Ogre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1updateTriangleLightFacing_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lightPos
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos); 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateTriangleLightFacing(*_cpp_lightPos);
} /* void Ogre::EdgeData::updateTriangleLightFacing */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     updateFaceNormals()
 * Type:       non-virtual method
 * Definition: void Ogre::EdgeData::updateFaceNormals
 * Signature:  (IOgre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1updateFaceNormals_1_1ivHardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertexSet, 
  jlong positionBuffer
)
{
   // parameter conversions 
  size_t _cpp_vertexSet = vertexSet;
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_positionBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(positionBuffer); 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->updateFaceNormals(_cpp_vertexSet, *_cpp_positionBuffer);
} /* void Ogre::EdgeData::updateFaceNormals */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     log()
 * Type:       non-virtual method
 * Definition: void Ogre::EdgeData::log
 * Signature:  (Ogre_Log)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1log_1_1Logp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong log
)
{
   // parameter conversions 
  Ogre::Log* _cpp_log = reinterpret_cast< Ogre::Log* >(log); 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->log(_cpp_log);
} /* void Ogre::EdgeData::log */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     EdgeData()
 * Type:       constructor
 * Definition: Ogre::EdgeData::EdgeData
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1_1createEdgeData (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::EdgeData 
   
   // parameter conversions 
   
   // create new instance of class Ogre::EdgeData 
   Ogre::EdgeData* _cpp_this = new Ogre::EdgeData(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::EdgeData::EdgeData */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::EdgeData::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::EdgeData 
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::EdgeData::__delete */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     gettriangles()
 * Type:       getter for public attribute
 * Definition: TriangleList Ogre::EdgeData::triangles
 * Signature:  ()Ogre_EdgeData_TriangleList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1gettriangles (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData::TriangleList* _cpp_result = new Ogre::EdgeData::TriangleList( _cpp_this->triangles); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TriangleList Ogre::EdgeData::triangles */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     settriangles()
 * Type:       setter for public attribute
 * Definition: TriangleList Ogre::EdgeData::triangles
 * Signature:  (Ogre_EdgeData_TriangleList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1settriangles (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::EdgeData::TriangleList* _cpp__jni_value_ = reinterpret_cast< Ogre::EdgeData::TriangleList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this =reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->triangles = *_cpp__jni_value_;
} /* TriangleList Ogre::EdgeData::triangles */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     gettriangleFaceNormals()
 * Type:       getter for public attribute
 * Definition: TriangleFaceNormalList Ogre::EdgeData::triangleFaceNormals
 * Signature:  ()Ogre_EdgeData_TriangleFaceNormalList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1gettriangleFaceNormals (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData::TriangleFaceNormalList* _cpp_result = new Ogre::EdgeData::TriangleFaceNormalList( _cpp_this->triangleFaceNormals); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TriangleFaceNormalList Ogre::EdgeData::triangleFaceNormals */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     settriangleFaceNormals()
 * Type:       setter for public attribute
 * Definition: TriangleFaceNormalList Ogre::EdgeData::triangleFaceNormals
 * Signature:  (Ogre_EdgeData_TriangleFaceNormalList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1settriangleFaceNormals (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::EdgeData::TriangleFaceNormalList* _cpp__jni_value_ = reinterpret_cast< Ogre::EdgeData::TriangleFaceNormalList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this =reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->triangleFaceNormals = *_cpp__jni_value_;
} /* TriangleFaceNormalList Ogre::EdgeData::triangleFaceNormals */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     gettriangleLightFacings()
 * Type:       getter for public attribute
 * Definition: TriangleLightFacingList Ogre::EdgeData::triangleLightFacings
 * Signature:  ()Ogre_EdgeData_TriangleLightFacingList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1gettriangleLightFacings (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData::TriangleLightFacingList* _cpp_result = new Ogre::EdgeData::TriangleLightFacingList( _cpp_this->triangleLightFacings); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TriangleLightFacingList Ogre::EdgeData::triangleLightFacings */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     settriangleLightFacings()
 * Type:       setter for public attribute
 * Definition: TriangleLightFacingList Ogre::EdgeData::triangleLightFacings
 * Signature:  (Ogre_EdgeData_TriangleLightFacingList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1settriangleLightFacings (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::EdgeData::TriangleLightFacingList* _cpp__jni_value_ = reinterpret_cast< Ogre::EdgeData::TriangleLightFacingList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this =reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->triangleLightFacings = *_cpp__jni_value_;
} /* TriangleLightFacingList Ogre::EdgeData::triangleLightFacings */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     getedgeGroups()
 * Type:       getter for public attribute
 * Definition: EdgeGroupList Ogre::EdgeData::edgeGroups
 * Signature:  ()Ogre_EdgeData_EdgeGroupList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1getedgeGroups (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData::EdgeGroupList* _cpp_result = new Ogre::EdgeData::EdgeGroupList( _cpp_this->edgeGroups); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeGroupList Ogre::EdgeData::edgeGroups */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     setedgeGroups()
 * Type:       setter for public attribute
 * Definition: EdgeGroupList Ogre::EdgeData::edgeGroups
 * Signature:  (Ogre_EdgeData_EdgeGroupList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1setedgeGroups (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::EdgeData::EdgeGroupList* _cpp__jni_value_ = reinterpret_cast< Ogre::EdgeData::EdgeGroupList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this =reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->edgeGroups = *_cpp__jni_value_;
} /* EdgeGroupList Ogre::EdgeData::edgeGroups */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     getisClosed()
 * Type:       getter for public attribute
 * Definition: bool Ogre::EdgeData::isClosed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_EdgeData__1getisClosed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this = reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isClosed; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::EdgeData::isClosed */


/*
 * Class:      org.ogre4j.EdgeData
 * Method:     setisClosed()
 * Type:       setter for public attribute
 * Definition: bool Ogre::EdgeData::isClosed
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1setisClosed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::EdgeData* _cpp_this =reinterpret_cast<Ogre::EdgeData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->isClosed = _cpp__jni_value_;
} /* bool Ogre::EdgeData::isClosed */
