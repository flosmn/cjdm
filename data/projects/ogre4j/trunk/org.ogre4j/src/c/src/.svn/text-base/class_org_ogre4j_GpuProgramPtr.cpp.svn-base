///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_GpuProgramPtr.h"

// import header files of original library
#include <OgreGpuProgram.h>



/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     GpuProgramPtr()
 * Type:       constructor
 * Definition: Ogre::GpuProgramPtr::GpuProgramPtr
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1_1createGpuProgramPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::GpuProgramPtr 
   
   // parameter conversions 
   
   // create new instance of class Ogre::GpuProgramPtr 
   Ogre::GpuProgramPtr* _cpp_this = new Ogre::GpuProgramPtr(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::GpuProgramPtr::GpuProgramPtr */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     GpuProgramPtr()
 * Type:       constructor
 * Definition: Ogre::GpuProgramPtr::GpuProgramPtr
 * Signature:  (Ogre_GpuProgram)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1_1createGpuProgramPtr_1_1GpuProgramp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rep
)
{
   // constructor of class Ogre::GpuProgramPtr 
   
   // parameter conversions 
  Ogre::GpuProgram* _cpp_rep = reinterpret_cast< Ogre::GpuProgram* >(rep); 
   
   // create new instance of class Ogre::GpuProgramPtr 
   Ogre::GpuProgramPtr* _cpp_this = new Ogre::GpuProgramPtr(_cpp_rep); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::GpuProgramPtr::GpuProgramPtr */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     GpuProgramPtr()
 * Type:       constructor
 * Definition: Ogre::GpuProgramPtr::GpuProgramPtr
 * Signature:  (Ogre_GpuProgramPtr)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1_1createGpuProgramPtr_1_1GpuProgramPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r
)
{
   // constructor of class Ogre::GpuProgramPtr 
   
   // parameter conversions 
  const Ogre::GpuProgramPtr* _cpp_r = reinterpret_cast< const Ogre::GpuProgramPtr* >(r); 
   
   // create new instance of class Ogre::GpuProgramPtr 
   Ogre::GpuProgramPtr* _cpp_this = new Ogre::GpuProgramPtr(*_cpp_r); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::GpuProgramPtr::GpuProgramPtr */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     GpuProgramPtr()
 * Type:       constructor
 * Definition: Ogre::GpuProgramPtr::GpuProgramPtr
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1_1createGpuProgramPtr_1_1ResourcePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r
)
{
   // constructor of class Ogre::GpuProgramPtr 
   
   // parameter conversions 
  const Ogre::ResourcePtr* _cpp_r = reinterpret_cast< const Ogre::ResourcePtr* >(r); 
   
   // create new instance of class Ogre::GpuProgramPtr 
   Ogre::GpuProgramPtr* _cpp_this = new Ogre::GpuProgramPtr(*_cpp_r); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::GpuProgramPtr::GpuProgramPtr */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: GpuProgramPtr& Ogre::GpuProgramPtr::operator=
 * Signature:  (Ogre_ResourcePtr)Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1operatorAssignment_1_1ResourcePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::ResourcePtr* _cpp_r = reinterpret_cast< const Ogre::ResourcePtr* >(r); 
   
   // cast pointer to C++ object 
   Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->operator=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramPtr& Ogre::GpuProgramPtr::operator= */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: GpuProgramPtr& Ogre::GpuProgramPtr::operator=
 * Signature:  (Ogre_HighLevelGpuProgramPtr)Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1operatorAssignment_1_1HighLevelGpuProgramPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::GpuProgramPtr* _cpp_r = reinterpret_cast< const Ogre::GpuProgramPtr* >(r); 
   
   // cast pointer to C++ object 
   Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->operator=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuProgramPtr& Ogre::GpuProgramPtr::operator= */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: SharedPtr& Ogre::SharedPtr< T >::operator=
 * Signature:  (Ogre_SharedPtr)Ogre_SharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1operatorAssignment_1_1_1Ogre_1SharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::GpuProgramPtr* _cpp_r = reinterpret_cast< const Ogre::GpuProgramPtr* >(r); 
   
   // cast pointer to C++ object 
   Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramPtr* _cpp_result = & _cpp_this->Ogre::GpuProgramPtr::operator=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* SharedPtr& Ogre::SharedPtr< T >::operator= */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: T& Ogre::SharedPtr< T >::operator *
 * Signature:  ()Ogre_GpuProgram
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1operatorMultiplication_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgram* _cpp_result = & _cpp_this->operator *() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* T& Ogre::SharedPtr< T >::operator * */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     operator->()
 * Type:       non-virtual method
 * Definition: T* Ogre::SharedPtr< T >::operator->
 * Signature:  ()Ogre_GpuProgram
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1operatorMemberAccessFromAPointer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgram* _cpp_result = _cpp_this->operator->() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* T* Ogre::SharedPtr< T >::operator-> */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     get()
 * Type:       non-virtual method
 * Definition: T* Ogre::SharedPtr< T >::get
 * Signature:  ()Ogre_GpuProgram
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1get_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgram* _cpp_result = _cpp_this->get() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* T* Ogre::SharedPtr< T >::get */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     bind()
 * Type:       non-virtual method
 * Definition: void Ogre::SharedPtr< T >::bind
 * Signature:  (Ogre_GpuProgramOgre_SharedPtrFreeMethod)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgramPtr__1bind_1_1GpuProgramp_1Ogre_1SharedPtrFreeMethodv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rep, 
  jint freeMethod
)
{
   // parameter conversions 
  Ogre::GpuProgram* _cpp_rep = reinterpret_cast< Ogre::GpuProgram* >(rep);
  Ogre::SharedPtrFreeMethod _cpp_freeMethod = (Ogre::SharedPtrFreeMethod)freeMethod; 
   
   // cast pointer to C++ object 
   Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bind(_cpp_rep, _cpp_freeMethod);
} /* void Ogre::SharedPtr< T >::bind */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     unique()
 * Type:       non-virtual method
 * Definition: bool Ogre::SharedPtr< T >::unique
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgramPtr__1unique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->unique() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::SharedPtr< T >::unique */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     useCount()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::SharedPtr< T >::useCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1useCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->useCount() ; 
   return _cpp_result;
} /* unsigned int Ogre::SharedPtr< T >::useCount */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     useCountPointer()
 * Type:       non-virtual method
 * Definition: unsigned int* Ogre::SharedPtr< T >::useCountPointer
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1useCountPointer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   unsigned int* _cpp_result = _cpp_this->useCountPointer() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* unsigned int* Ogre::SharedPtr< T >::useCountPointer */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     getPointer()
 * Type:       non-virtual method
 * Definition: T* Ogre::SharedPtr< T >::getPointer
 * Signature:  ()Ogre_GpuProgram
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgramPtr__1getPointer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgram* _cpp_result = _cpp_this->getPointer() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* T* Ogre::SharedPtr< T >::getPointer */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     freeMethod()
 * Type:       non-virtual method
 * Definition: SharedPtrFreeMethod Ogre::SharedPtr< T >::freeMethod
 * Signature:  ()Ogre_SharedPtrFreeMethod
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuProgramPtr__1freeMethod_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SharedPtrFreeMethod _cpp_result = _cpp_this->freeMethod() ; 
   return _cpp_result;
} /* SharedPtrFreeMethod Ogre::SharedPtr< T >::freeMethod */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     isNull()
 * Type:       non-virtual method
 * Definition: bool Ogre::SharedPtr< T >::isNull
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgramPtr__1isNull_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<const Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isNull() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::SharedPtr< T >::isNull */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     setNull()
 * Type:       non-virtual method
 * Definition: void Ogre::SharedPtr< T >::setNull
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgramPtr__1setNull (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<Ogre::GpuProgramPtr*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNull();
} /* void Ogre::SharedPtr< T >::setNull */


/*
 * Class:      org.ogre4j.GpuProgramPtr
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::GpuProgramPtr::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgramPtr__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::GpuProgramPtr 
   // cast pointer to C++ object 
   Ogre::GpuProgramPtr* _cpp_this = reinterpret_cast<Ogre::GpuProgramPtr*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::GpuProgramPtr::__delete */
