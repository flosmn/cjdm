///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_TangentSpaceCalc.h"

// import header files of original library
#include <OgreTangentSpaceCalc.h>



/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     TangentSpaceCalc()
 * Type:       constructor
 * Definition: Ogre::TangentSpaceCalc::TangentSpaceCalc
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TangentSpaceCalc__1_1createTangentSpaceCalc (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::TangentSpaceCalc 
   
   // parameter conversions 
   
   // create new instance of class Ogre::TangentSpaceCalc 
   Ogre::TangentSpaceCalc* _cpp_this = new Ogre::TangentSpaceCalc(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TangentSpaceCalc::TangentSpaceCalc */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::TangentSpaceCalc::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TangentSpaceCalc__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void Ogre::TangentSpaceCalc::clear */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     setVertexData()
 * Type:       non-virtual method
 * Definition: void Ogre::TangentSpaceCalc::setVertexData
 * Signature:  (Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TangentSpaceCalc__1setVertexData_1_1VertexDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v_in
)
{
   // parameter conversions 
  Ogre::VertexData* _cpp_v_in = reinterpret_cast< Ogre::VertexData* >(v_in); 
   
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVertexData(_cpp_v_in);
} /* void Ogre::TangentSpaceCalc::setVertexData */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     addIndexData()
 * Type:       non-virtual method
 * Definition: void Ogre::TangentSpaceCalc::addIndexData
 * Signature:  (Ogre_IndexDataOgre_RenderOperation_OperationType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TangentSpaceCalc__1addIndexData_1_1IndexDatapRenderOperation_1OperationTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong i_in, 
  jint opType
)
{
   // parameter conversions 
  Ogre::IndexData* _cpp_i_in = reinterpret_cast< Ogre::IndexData* >(i_in);
  Ogre::RenderOperation::OperationType _cpp_opType = (Ogre::RenderOperation::OperationType)opType; 
   
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addIndexData(_cpp_i_in, _cpp_opType);
} /* void Ogre::TangentSpaceCalc::addIndexData */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     setStoreParityInW()
 * Type:       non-virtual method
 * Definition: void Ogre::TangentSpaceCalc::setStoreParityInW
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TangentSpaceCalc__1setStoreParityInW_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setStoreParityInW(_cpp_enabled);
} /* void Ogre::TangentSpaceCalc::setStoreParityInW */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     getStoreParityInW()
 * Type:       non-virtual method
 * Definition: bool Ogre::TangentSpaceCalc::getStoreParityInW
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TangentSpaceCalc__1getStoreParityInW_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<const Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getStoreParityInW() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TangentSpaceCalc::getStoreParityInW */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     setSplitMirrored()
 * Type:       non-virtual method
 * Definition: void Ogre::TangentSpaceCalc::setSplitMirrored
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TangentSpaceCalc__1setSplitMirrored_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean split
)
{
   // parameter conversions 
  bool _cpp_split = split ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSplitMirrored(_cpp_split);
} /* void Ogre::TangentSpaceCalc::setSplitMirrored */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     getSplitMirrored()
 * Type:       non-virtual method
 * Definition: bool Ogre::TangentSpaceCalc::getSplitMirrored
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TangentSpaceCalc__1getSplitMirrored_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<const Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getSplitMirrored() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TangentSpaceCalc::getSplitMirrored */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     setSplitRotated()
 * Type:       non-virtual method
 * Definition: void Ogre::TangentSpaceCalc::setSplitRotated
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TangentSpaceCalc__1setSplitRotated_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean split
)
{
   // parameter conversions 
  bool _cpp_split = split ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setSplitRotated(_cpp_split);
} /* void Ogre::TangentSpaceCalc::setSplitRotated */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     getSplitRotated()
 * Type:       non-virtual method
 * Definition: bool Ogre::TangentSpaceCalc::getSplitRotated
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TangentSpaceCalc__1getSplitRotated_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<const Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getSplitRotated() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TangentSpaceCalc::getSplitRotated */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     build()
 * Type:       non-virtual method
 * Definition: Result Ogre::TangentSpaceCalc::build
 * Signature:  (Ogre_VertexElementSemanticSS)Ogre_TangentSpaceCalc_Result
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TangentSpaceCalc__1build_1_1VertexElementSemanticvHvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint targetSemantic, 
  jint sourceTexCoordSet, 
  jint index
)
{
   // parameter conversions 
  Ogre::VertexElementSemantic _cpp_targetSemantic = (Ogre::VertexElementSemantic)targetSemantic;
  unsigned short _cpp_sourceTexCoordSet = sourceTexCoordSet;
  unsigned short _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TangentSpaceCalc::Result* _cpp_result = new Ogre::TangentSpaceCalc::Result( _cpp_this->build(_cpp_targetSemantic, _cpp_sourceTexCoordSet, _cpp_index) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Result Ogre::TangentSpaceCalc::build */


/*
 * Class:      org.ogre4j.TangentSpaceCalc
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::TangentSpaceCalc::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TangentSpaceCalc__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::TangentSpaceCalc 
   // cast pointer to C++ object 
   Ogre::TangentSpaceCalc* _cpp_this = reinterpret_cast<Ogre::TangentSpaceCalc*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::TangentSpaceCalc::__delete */
