///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ScriptCompilerManager.h"

// import header files of original library
#include <OgreScriptCompiler.h>



/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     ScriptCompilerManager()
 * Type:       constructor
 * Definition: Ogre::ScriptCompilerManager::ScriptCompilerManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerManager__1_1createScriptCompilerManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ScriptCompilerManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ScriptCompilerManager 
   Ogre::ScriptCompilerManager* _cpp_this = new Ogre::ScriptCompilerManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ScriptCompilerManager::ScriptCompilerManager */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     setListener()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompilerManager::setListener
 * Signature:  (Ogre_ScriptCompilerListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerManager__1setListener_1_1ScriptCompilerListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::ScriptCompilerListener* _cpp_listener = reinterpret_cast< Ogre::ScriptCompilerListener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* void Ogre::ScriptCompilerManager::setListener */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     getListener()
 * Type:       non-virtual method
 * Definition: ScriptCompilerListener* Ogre::ScriptCompilerManager::getListener
 * Signature:  ()Ogre_ScriptCompilerListener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerManager__1getListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ScriptCompilerListener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ScriptCompilerListener* Ogre::ScriptCompilerManager::getListener */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     addTranslatorManager()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompilerManager::addTranslatorManager
 * Signature:  (Ogre_ScriptTranslatorManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerManager__1addTranslatorManager_1_1ScriptTranslatorManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::ScriptTranslatorManager* _cpp_man = reinterpret_cast< Ogre::ScriptTranslatorManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addTranslatorManager(_cpp_man);
} /* void Ogre::ScriptCompilerManager::addTranslatorManager */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     removeTranslatorManager()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompilerManager::removeTranslatorManager
 * Signature:  (Ogre_ScriptTranslatorManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerManager__1removeTranslatorManager_1_1ScriptTranslatorManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::ScriptTranslatorManager* _cpp_man = reinterpret_cast< Ogre::ScriptTranslatorManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeTranslatorManager(_cpp_man);
} /* void Ogre::ScriptCompilerManager::removeTranslatorManager */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     clearTranslatorManagers()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompilerManager::clearTranslatorManagers
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerManager__1clearTranslatorManagers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clearTranslatorManagers();
} /* void Ogre::ScriptCompilerManager::clearTranslatorManagers */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     getTranslator()
 * Type:       non-virtual method
 * Definition: ScriptTranslator* Ogre::ScriptCompilerManager::getTranslator
 * Signature:  (Ogre_AbstractNodePtr)Ogre_ScriptTranslator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerManager__1getTranslator_1_1AbstractNodePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong node
)
{
   // parameter conversions 
  const Ogre::AbstractNodePtr* _cpp_node = reinterpret_cast< const Ogre::AbstractNodePtr* >(node); 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ScriptTranslator* _cpp_result = _cpp_this->getTranslator(*_cpp_node) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ScriptTranslator* Ogre::ScriptCompilerManager::getTranslator */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     getScriptPatterns()
 * Type:       virtual method
 * Definition: const StringVector& Ogre::ScriptCompilerManager::getScriptPatterns
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerManager__1getScriptPatterns_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<const Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getScriptPatterns() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::ScriptCompilerManager::getScriptPatterns */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     parseScript()
 * Type:       virtual method
 * Definition: void Ogre::ScriptCompilerManager::parseScript
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerManager__1parseScript_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring groupName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parseScript(*_cpp_stream, _cpp_groupName);
} /* void Ogre::ScriptCompilerManager::parseScript */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     getLoadingOrder()
 * Type:       virtual method
 * Definition: Real Ogre::ScriptCompilerManager::getLoadingOrder
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ScriptCompilerManager__1getLoadingOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<const Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLoadingOrder() ; 
   return _cpp_result;
} /* Real Ogre::ScriptCompilerManager::getLoadingOrder */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static ScriptCompilerManager& Ogre::ScriptCompilerManager::getSingleton
 * Signature:  ()Ogre_ScriptCompilerManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ScriptCompilerManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ScriptCompilerManager* _cpp_result = & Ogre::ScriptCompilerManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ScriptCompilerManager& Ogre::ScriptCompilerManager::getSingleton */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static ScriptCompilerManager* Ogre::ScriptCompilerManager::getSingletonPtr
 * Signature:  ()Ogre_ScriptCompilerManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ScriptCompilerManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ScriptCompilerManager* _cpp_result = Ogre::ScriptCompilerManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ScriptCompilerManager* Ogre::ScriptCompilerManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.ScriptCompilerManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ScriptCompilerManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ScriptCompilerManager 
   // cast pointer to C++ object 
   Ogre::ScriptCompilerManager* _cpp_this = reinterpret_cast<Ogre::ScriptCompilerManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ScriptCompilerManager::__delete */
