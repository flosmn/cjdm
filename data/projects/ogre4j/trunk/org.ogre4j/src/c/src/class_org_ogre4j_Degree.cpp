///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Degree.h"

// import header files of original library
#include <OgreMath.h>



/*
 * Class:      org.ogre4j.Degree
 * Method:     Degree()
 * Type:       constructor
 * Definition: Ogre::Degree::Degree
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1_1createDegree_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat d
)
{
   // constructor of class Ogre::Degree 
   
   // parameter conversions 
  float _cpp_d = d; 
   
   // create new instance of class Ogre::Degree 
   Ogre::Degree* _cpp_this = new Ogre::Degree(_cpp_d); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Degree::Degree */


/*
 * Class:      org.ogre4j.Degree
 * Method:     Degree()
 * Type:       constructor
 * Definition: Ogre::Degree::Degree
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1_1createDegree_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r
)
{
   // constructor of class Ogre::Degree 
   
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // create new instance of class Ogre::Degree 
   Ogre::Degree* _cpp_this = new Ogre::Degree(*_cpp_r); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Degree::Degree */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator=
 * Signature:  (float)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorAssignment_1_1RealR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator=(_cpp_f) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator=
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorAssignment_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator=(*_cpp_d) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator=
 * Signature:  (Ogre_Radian)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorAssignment_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_r = reinterpret_cast< const Ogre::Degree* >(r); 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     valueDegrees()
 * Type:       non-virtual method
 * Definition: Real Ogre::Degree::valueDegrees
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Degree__1valueDegrees_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->valueDegrees() ; 
   return _cpp_result;
} /* Real Ogre::Degree::valueDegrees */


/*
 * Class:      org.ogre4j.Degree
 * Method:     valueRadians()
 * Type:       non-virtual method
 * Definition: Real Ogre::Degree::valueRadians
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Degree__1valueRadians_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->valueRadians() ; 
   return _cpp_result;
} /* Real Ogre::Degree::valueRadians */


/*
 * Class:      org.ogre4j.Degree
 * Method:     valueAngleUnits()
 * Type:       non-virtual method
 * Definition: Real Ogre::Degree::valueAngleUnits
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Degree__1valueAngleUnits_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->valueAngleUnits() ; 
   return _cpp_result;
} /* Real Ogre::Degree::valueAngleUnits */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: const Degree& Ogre::Degree::operator+
 * Signature:  ()Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorAddition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator+() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Degree& Ogre::Degree::operator+ */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator+
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorAddition_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator+(*_cpp_d) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator+ */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator+
 * Signature:  (Ogre_Radian)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorAddition_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator+(*_cpp_r) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator+ */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator+=
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorIncrementAndAssign_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator+=(*_cpp_d) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator+= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator+=
 * Signature:  (Ogre_Radian)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorIncrementAndAssign_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator+=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator+= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator-
 * Signature:  ()Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator-() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator- */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator-
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorSubtraction_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator-(*_cpp_d) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator- */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator-
 * Signature:  (Ogre_Radian)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorSubtraction_1_1RadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator-(*_cpp_r) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator- */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator-=
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorDecrementAndAssign_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator-=(*_cpp_d) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator-= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator-=
 * Signature:  (Ogre_Radian)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorDecrementAndAssign_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_r = reinterpret_cast< const Ogre::Radian* >(r); 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator-=(*_cpp_r) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator-= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator *
 * Signature:  (float)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator *(_cpp_f) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator * */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator *
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorMultiplication_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong f
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_f = reinterpret_cast< const Ogre::Degree* >(f); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator *(*_cpp_f) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator * */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator *=
 * Signature:  (float)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorMultiplyAndAssign_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator *=(_cpp_f) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator *= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Degree Ogre::Degree::operator/
 * Signature:  (float)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorDivision_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = new Ogre::Degree( _cpp_this->operator/(_cpp_f) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree Ogre::Degree::operator/ */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Degree& Ogre::Degree::operator/=
 * Signature:  (float)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Degree__1operatorDivideAndAssign_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat f
)
{
   // parameter conversions 
  float _cpp_f = f; 
   
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Degree* _cpp_result = & _cpp_this->operator/=(_cpp_f) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Degree& Ogre::Degree::operator/= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator<()
 * Type:       non-virtual method
 * Definition: bool Ogre::Degree::operator<
 * Signature:  (Ogre_Degree)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Degree__1operatorLessThan_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator<(*_cpp_d) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Degree::operator< */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator<=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Degree::operator<=
 * Signature:  (Ogre_Degree)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Degree__1operatorLessThanOrEqual_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator<=(*_cpp_d) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Degree::operator<= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Degree::operator==
 * Signature:  (Ogre_Degree)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Degree__1operatorEqual_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_d) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Degree::operator== */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Degree::operator!=
 * Signature:  (Ogre_Degree)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Degree__1operatorNotEqual_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_d) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Degree::operator!= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator>=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Degree::operator>=
 * Signature:  (Ogre_Degree)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Degree__1operatorGreaterThanOrEqual_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator>=(*_cpp_d) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Degree::operator>= */


/*
 * Class:      org.ogre4j.Degree
 * Method:     operator>()
 * Type:       non-virtual method
 * Definition: bool Ogre::Degree::operator>
 * Signature:  (Ogre_Degree)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Degree__1operatorGreaterThan_1_1DegreeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
)
{
   // parameter conversions 
  const Ogre::Degree* _cpp_d = reinterpret_cast< const Ogre::Degree* >(d); 
   
   // cast pointer to C++ object 
   const Ogre::Degree* _cpp_this = reinterpret_cast<const Ogre::Degree*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator>(*_cpp_d) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Degree::operator> */


/*
 * Class:      org.ogre4j.Degree
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Degree::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Degree__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Degree 
   // cast pointer to C++ object 
   Ogre::Degree* _cpp_this = reinterpret_cast<Ogre::Degree*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Degree::__delete */
