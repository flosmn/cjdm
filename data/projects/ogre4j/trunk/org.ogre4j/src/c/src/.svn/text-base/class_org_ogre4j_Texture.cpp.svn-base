///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Texture.h"

// import header files of original library
#include <OgreTexture.h>



/*
 * Class:      org.ogre4j.Texture
 * Method:     setTextureType()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setTextureType
 * Signature:  (Ogre_TextureType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setTextureType_1_1TextureTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ttype
)
{
   // parameter conversions 
  Ogre::TextureType _cpp_ttype = (Ogre::TextureType)ttype; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureType(_cpp_ttype);
} /* virtual void Ogre::Texture::setTextureType */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getTextureType()
 * Type:       virtual method
 * Definition: virtual TextureType Ogre::Texture::getTextureType
 * Signature:  ()Ogre_TextureType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getTextureType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureType _cpp_result = _cpp_this->getTextureType() ; 
   return _cpp_result;
} /* virtual TextureType Ogre::Texture::getTextureType */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getNumMipmaps()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getNumMipmaps
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getNumMipmaps_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumMipmaps() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getNumMipmaps */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setNumMipmaps()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setNumMipmaps
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setNumMipmaps_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint num
)
{
   // parameter conversions 
  size_t _cpp_num = num; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNumMipmaps(_cpp_num);
} /* virtual void Ogre::Texture::setNumMipmaps */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getMipmapsHardwareGenerated()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Texture::getMipmapsHardwareGenerated
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1getMipmapsHardwareGenerated_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getMipmapsHardwareGenerated() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Texture::getMipmapsHardwareGenerated */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getGamma()
 * Type:       virtual method
 * Definition: virtual float Ogre::Texture::getGamma
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Texture__1getGamma_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getGamma() ; 
   return _cpp_result;
} /* virtual float Ogre::Texture::getGamma */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setGamma()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setGamma
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setGamma_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat g
)
{
   // parameter conversions 
  float _cpp_g = g; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setGamma(_cpp_g);
} /* virtual void Ogre::Texture::setGamma */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setHardwareGammaEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setHardwareGammaEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setHardwareGammaEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setHardwareGammaEnabled(_cpp_enabled);
} /* virtual void Ogre::Texture::setHardwareGammaEnabled */


/*
 * Class:      org.ogre4j.Texture
 * Method:     isHardwareGammaEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Texture::isHardwareGammaEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1isHardwareGammaEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isHardwareGammaEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Texture::isHardwareGammaEnabled */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setFSAA()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setFSAA
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setFSAA_1_1uintv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fsaa
)
{
   // parameter conversions 
  unsigned int _cpp_fsaa = fsaa; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFSAA(_cpp_fsaa);
} /* virtual void Ogre::Texture::setFSAA */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getFSAA()
 * Type:       virtual method
 * Definition: virtual uint Ogre::Texture::getFSAA
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Texture__1getFSAA_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getFSAA() ; 
   return _cpp_result;
} /* virtual uint Ogre::Texture::getFSAA */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getHeight()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getHeight() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getHeight */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getWidth()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getWidth() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getWidth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getDepth()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getDepth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getDepth() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getDepth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getSrcHeight()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getSrcHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getSrcHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSrcHeight() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getSrcHeight */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getSrcWidth()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getSrcWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getSrcWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSrcWidth() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getSrcWidth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getSrcDepth()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getSrcDepth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getSrcDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSrcDepth() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getSrcDepth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setHeight()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setHeight
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setHeight_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint h
)
{
   // parameter conversions 
  size_t _cpp_h = h; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setHeight(_cpp_h);
} /* virtual void Ogre::Texture::setHeight */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setWidth()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setWidth
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setWidth_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint w
)
{
   // parameter conversions 
  size_t _cpp_w = w; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setWidth(_cpp_w);
} /* virtual void Ogre::Texture::setWidth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setDepth()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setDepth
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setDepth_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint d
)
{
   // parameter conversions 
  size_t _cpp_d = d; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDepth(_cpp_d);
} /* virtual void Ogre::Texture::setDepth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getUsage()
 * Type:       virtual method
 * Definition: virtual int Ogre::Texture::getUsage
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getUsage() ; 
   return _cpp_result;
} /* virtual int Ogre::Texture::getUsage */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setUsage()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setUsage
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setUsage_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint u
)
{
   // parameter conversions 
  int _cpp_u = u; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUsage(_cpp_u);
} /* virtual void Ogre::Texture::setUsage */


/*
 * Class:      org.ogre4j.Texture
 * Method:     createInternalResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::createInternalResources
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1createInternalResources (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->createInternalResources();
} /* virtual void Ogre::Texture::createInternalResources */


/*
 * Class:      org.ogre4j.Texture
 * Method:     freeInternalResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::freeInternalResources
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1freeInternalResources (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->freeInternalResources();
} /* virtual void Ogre::Texture::freeInternalResources */


/*
 * Class:      org.ogre4j.Texture
 * Method:     copyToTexture()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::copyToTexture
 * Signature:  (Ogre_TexturePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1copyToTexture_1_1TexturePtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong target
)
{
   // parameter conversions 
  Ogre::TexturePtr* _cpp_target = reinterpret_cast< Ogre::TexturePtr* >(target); 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyToTexture(*_cpp_target);
} /* virtual void Ogre::Texture::copyToTexture */


/*
 * Class:      org.ogre4j.Texture
 * Method:     loadImage()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::loadImage
 * Signature:  (Ogre_Image)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1loadImage_1_1ImageR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong img
)
{
   // parameter conversions 
  const Ogre::Image* _cpp_img = reinterpret_cast< const Ogre::Image* >(img); 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->loadImage(*_cpp_img);
} /* virtual void Ogre::Texture::loadImage */


/*
 * Class:      org.ogre4j.Texture
 * Method:     loadRawData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::loadRawData
 * Signature:  (Ogre_DataStreamPtrunsigned_shortunsigned_shortOgre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1loadRawData_1_1DataStreamPtrrushortvushortvPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jint uWidth, 
  jint uHeight, 
  jint eFormat
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  unsigned short _cpp_uWidth = uWidth;
  unsigned short _cpp_uHeight = uHeight;
  Ogre::PixelFormat _cpp_eFormat = (Ogre::PixelFormat)eFormat; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->loadRawData(*_cpp_stream, _cpp_uWidth, _cpp_uHeight, _cpp_eFormat);
} /* virtual void Ogre::Texture::loadRawData */


/*
 * Class:      org.ogre4j.Texture
 * Method:     _loadImages()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::_loadImages
 * Signature:  (Ogre_ConstImagePtrList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1_1loadImages_1_1ConstImagePtrListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong images
)
{
   // parameter conversions 
  const Ogre::ConstImagePtrList* _cpp_images = reinterpret_cast< const Ogre::ConstImagePtrList* >(images); 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_loadImages(*_cpp_images);
} /* virtual void Ogre::Texture::_loadImages */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getFormat()
 * Type:       virtual method
 * Definition: virtual PixelFormat Ogre::Texture::getFormat
 * Signature:  ()Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getFormat_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = _cpp_this->getFormat() ; 
   return _cpp_result;
} /* virtual PixelFormat Ogre::Texture::getFormat */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getDesiredFormat()
 * Type:       virtual method
 * Definition: virtual PixelFormat Ogre::Texture::getDesiredFormat
 * Signature:  ()Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getDesiredFormat_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = _cpp_this->getDesiredFormat() ; 
   return _cpp_result;
} /* virtual PixelFormat Ogre::Texture::getDesiredFormat */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getSrcFormat()
 * Type:       virtual method
 * Definition: virtual PixelFormat Ogre::Texture::getSrcFormat
 * Signature:  ()Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getSrcFormat_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = _cpp_this->getSrcFormat() ; 
   return _cpp_result;
} /* virtual PixelFormat Ogre::Texture::getSrcFormat */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setFormat()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setFormat
 * Signature:  (Ogre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setFormat_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint pf
)
{
   // parameter conversions 
  Ogre::PixelFormat _cpp_pf = (Ogre::PixelFormat)pf; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFormat(_cpp_pf);
} /* virtual void Ogre::Texture::setFormat */


/*
 * Class:      org.ogre4j.Texture
 * Method:     hasAlpha()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Texture::hasAlpha
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1hasAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasAlpha() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Texture::hasAlpha */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setDesiredIntegerBitDepth()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setDesiredIntegerBitDepth
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setDesiredIntegerBitDepth_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bits
)
{
   // parameter conversions 
  unsigned short _cpp_bits = bits; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDesiredIntegerBitDepth(_cpp_bits);
} /* virtual void Ogre::Texture::setDesiredIntegerBitDepth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getDesiredIntegerBitDepth()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::Texture::getDesiredIntegerBitDepth
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getDesiredIntegerBitDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getDesiredIntegerBitDepth() ; 
   return _cpp_result;
} /* virtual ushort Ogre::Texture::getDesiredIntegerBitDepth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setDesiredFloatBitDepth()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setDesiredFloatBitDepth
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setDesiredFloatBitDepth_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bits
)
{
   // parameter conversions 
  unsigned short _cpp_bits = bits; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDesiredFloatBitDepth(_cpp_bits);
} /* virtual void Ogre::Texture::setDesiredFloatBitDepth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getDesiredFloatBitDepth()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::Texture::getDesiredFloatBitDepth
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getDesiredFloatBitDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getDesiredFloatBitDepth() ; 
   return _cpp_result;
} /* virtual ushort Ogre::Texture::getDesiredFloatBitDepth */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setDesiredBitDepths()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setDesiredBitDepths
 * Signature:  (unsigned_shortunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setDesiredBitDepths_1_1ushortvushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint integerBits, 
  jint floatBits
)
{
   // parameter conversions 
  unsigned short _cpp_integerBits = integerBits;
  unsigned short _cpp_floatBits = floatBits; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDesiredBitDepths(_cpp_integerBits, _cpp_floatBits);
} /* virtual void Ogre::Texture::setDesiredBitDepths */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setTreatLuminanceAsAlpha()
 * Type:       virtual method
 * Definition: virtual void Ogre::Texture::setTreatLuminanceAsAlpha
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setTreatLuminanceAsAlpha_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean asAlpha
)
{
   // parameter conversions 
  bool _cpp_asAlpha = asAlpha ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTreatLuminanceAsAlpha(_cpp_asAlpha);
} /* virtual void Ogre::Texture::setTreatLuminanceAsAlpha */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getTreatLuminanceAsAlpha()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Texture::getTreatLuminanceAsAlpha
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1getTreatLuminanceAsAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getTreatLuminanceAsAlpha() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Texture::getTreatLuminanceAsAlpha */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getNumFaces()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Texture::getNumFaces
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getNumFaces_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getNumFaces() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Texture::getNumFaces */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getBuffer()
 * Type:       pure virtual method
 * Definition: virtual HardwarePixelBufferSharedPtr Ogre::Texture::getBuffer
 * Signature:  (II)Ogre_HardwarePixelBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Texture__1getBuffer_1_1iviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint face, 
  jint mipmap
)
{
   // parameter conversions 
  size_t _cpp_face = face;
  size_t _cpp_mipmap = mipmap; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwarePixelBufferSharedPtr* _cpp_result = new Ogre::HardwarePixelBufferSharedPtr( _cpp_this->getBuffer(_cpp_face, _cpp_mipmap) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual HardwarePixelBufferSharedPtr Ogre::Texture::getBuffer */


/*
 * Class:      org.ogre4j.Texture
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepare();
} /* virtual void Ogre::Resource::prepare */


/*
 * Class:      org.ogre4j.Texture
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
)
{
   // parameter conversions 
  bool _cpp_backgroundThread = backgroundThread ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->load(_cpp_backgroundThread);
} /* virtual void Ogre::Resource::load */


/*
 * Class:      org.ogre4j.Texture
 * Method:     reload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reload();
} /* virtual void Ogre::Resource::reload */


/*
 * Class:      org.ogre4j.Texture
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isReloadable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isReloadable */


/*
 * Class:      org.ogre4j.Texture
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isManuallyLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isManuallyLoaded */


/*
 * Class:      org.ogre4j.Texture
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unload();
} /* virtual void Ogre::Resource::unload */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSize() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Resource::getSize */


/*
 * Class:      org.ogre4j.Texture
 * Method:     touch()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->touch();
} /* virtual void Ogre::Resource::touch */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Texture__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getName */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Texture__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const unsigned long _cpp_result = _cpp_this->getHandle() ; 
   return _cpp_result;
} /* virtual ResourceHandle Ogre::Resource::getHandle */


/*
 * Class:      org.ogre4j.Texture
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isPrepared() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isPrepared */


/*
 * Class:      org.ogre4j.Texture
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isLoaded */


/*
 * Class:      org.ogre4j.Texture
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoading() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isLoading */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: virtual LoadingState Ogre::Resource::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Resource::LoadingState _cpp_result = _cpp_this->getLoadingState() ; 
   return _cpp_result;
} /* virtual LoadingState Ogre::Resource::getLoadingState */


/*
 * Class:      org.ogre4j.Texture
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isBackgroundLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Resource::isBackgroundLoaded */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
)
{
   // parameter conversions 
  bool _cpp_bl = bl ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBackgroundLoaded(_cpp_bl);
} /* virtual void Ogre::Resource::setBackgroundLoaded */


/*
 * Class:      org.ogre4j.Texture
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->escalateLoading();
} /* virtual void Ogre::Resource::escalateLoading */


/*
 * Class:      org.ogre4j.Texture
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addListener(_cpp_lis);
} /* virtual void Ogre::Resource::addListener */


/*
 * Class:      org.ogre4j.Texture
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
)
{
   // parameter conversions 
  Ogre::Resource::Listener* _cpp_lis = reinterpret_cast< Ogre::Resource::Listener* >(lis); 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeListener(_cpp_lis);
} /* virtual void Ogre::Resource::removeListener */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Texture__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getGroup() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getGroup */


/*
 * Class:      org.ogre4j.Texture
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
)
{
   // parameter conversions 
  std::string _cpp_newGroup = ""; org::xbig::jni::to_stdstring(_jni_env_, newGroup, _cpp_newGroup); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->changeGroupOwnership(_cpp_newGroup);
} /* virtual void Ogre::Resource::changeGroupOwnership */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Texture__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager* _cpp_result = _cpp_this->getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceManager* Ogre::Resource::getCreator */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Texture__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getOrigin() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Resource::getOrigin */


/*
 * Class:      org.ogre4j.Texture
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
)
{
   // parameter conversions 
  std::string _cpp_origin = ""; org::xbig::jni::to_stdstring(_jni_env_, origin, _cpp_origin); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyOrigin(_cpp_origin);
} /* virtual void Ogre::Resource::_notifyOrigin */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Texture__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getStateCount() ; 
   return _cpp_result;
} /* virtual size_t Ogre::Resource::getStateCount */


/*
 * Class:      org.ogre4j.Texture
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_dirtyState();
} /* virtual void Ogre::Resource::_dirtyState */


/*
 * Class:      org.ogre4j.Texture
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundLoadingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundLoadingComplete */


/*
 * Class:      org.ogre4j.Texture
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_fireBackgroundPreparingComplete();
} /* virtual void Ogre::Resource::_fireBackgroundPreparingComplete */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Texture__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Texture__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Texture__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Texture__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.Texture
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.Texture
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Texture__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.Texture
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::Texture* _cpp_this = reinterpret_cast<const Ogre::Texture*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.Texture
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Texture without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::Texture::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.Texture
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Texture::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Texture__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Texture 
   // cast pointer to C++ object 
   Ogre::Texture* _cpp_this = reinterpret_cast<Ogre::Texture*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Texture::__delete */
