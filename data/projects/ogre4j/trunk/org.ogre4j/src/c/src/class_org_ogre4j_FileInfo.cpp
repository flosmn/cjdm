///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_FileInfo.h"

// import header files of original library
#include <OgreArchive.h>



/*
 * Class:      org.ogre4j.FileInfo
 * Method:     FileInfo()
 * Type:       constructor
 * Definition: Ogre::FileInfo::FileInfo
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileInfo__1_1createFileInfo (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::FileInfo 
   
   // parameter conversions 
   
   // create new instance of class Ogre::FileInfo 
   Ogre::FileInfo* _cpp_this = new Ogre::FileInfo(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::FileInfo::FileInfo */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::FileInfo::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileInfo__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::FileInfo 
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this = reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::FileInfo::__delete */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     getarchive()
 * Type:       getter for public attribute
 * Definition: Archive* Ogre::FileInfo::archive
 * Signature:  ()Ogre_Archive
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileInfo__1getarchive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this = reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Archive* _cpp_result = _cpp_this->archive; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Archive* Ogre::FileInfo::archive */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     setarchive()
 * Type:       setter for public attribute
 * Definition: Archive* Ogre::FileInfo::archive
 * Signature:  (Ogre_Archive)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileInfo__1setarchive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Archive* _cpp__jni_value_ = reinterpret_cast< Ogre::Archive* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this =reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->archive = _cpp__jni_value_;
} /* Archive* Ogre::FileInfo::archive */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     getfilename()
 * Type:       getter for public attribute
 * Definition: String Ogre::FileInfo::filename
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_FileInfo__1getfilename (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this = reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->filename; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::FileInfo::filename */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     setfilename()
 * Type:       setter for public attribute
 * Definition: String Ogre::FileInfo::filename
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileInfo__1setfilename (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this =reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->filename = _cpp__jni_value_;
} /* String Ogre::FileInfo::filename */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     getpath()
 * Type:       getter for public attribute
 * Definition: String Ogre::FileInfo::path
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_FileInfo__1getpath (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this = reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->path; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::FileInfo::path */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     setpath()
 * Type:       setter for public attribute
 * Definition: String Ogre::FileInfo::path
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileInfo__1setpath (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this =reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->path = _cpp__jni_value_;
} /* String Ogre::FileInfo::path */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     getbasename()
 * Type:       getter for public attribute
 * Definition: String Ogre::FileInfo::basename
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_FileInfo__1getbasename (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this = reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->basename; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::FileInfo::basename */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     setbasename()
 * Type:       setter for public attribute
 * Definition: String Ogre::FileInfo::basename
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileInfo__1setbasename (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this =reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->basename = _cpp__jni_value_;
} /* String Ogre::FileInfo::basename */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     getcompressedSize()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::FileInfo::compressedSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_FileInfo__1getcompressedSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this = reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->compressedSize; 
   return _cpp_result;
} /* size_t Ogre::FileInfo::compressedSize */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     setcompressedSize()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::FileInfo::compressedSize
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileInfo__1setcompressedSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this =reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->compressedSize = _cpp__jni_value_;
} /* size_t Ogre::FileInfo::compressedSize */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     getuncompressedSize()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::FileInfo::uncompressedSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_FileInfo__1getuncompressedSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this = reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->uncompressedSize; 
   return _cpp_result;
} /* size_t Ogre::FileInfo::uncompressedSize */


/*
 * Class:      org.ogre4j.FileInfo
 * Method:     setuncompressedSize()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::FileInfo::uncompressedSize
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileInfo__1setuncompressedSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::FileInfo* _cpp_this =reinterpret_cast<Ogre::FileInfo*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->uncompressedSize = _cpp__jni_value_;
} /* size_t Ogre::FileInfo::uncompressedSize */
