///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Vector4.h"

// import header files of original library
#include <OgreVector4.h>



/*
 * Class:      org.ogre4j.Vector4
 * Method:     Vector4()
 * Type:       constructor
 * Definition: Ogre::Vector4::Vector4
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1_1createVector4 (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Vector4 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Vector4 
   Ogre::Vector4* _cpp_this = new Ogre::Vector4(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector4::Vector4 */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     Vector4()
 * Type:       constructor
 * Definition: Ogre::Vector4::Vector4
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1_1createVector4_1_1RealVRealVRealVRealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fX, 
  jfloat fY, 
  jfloat fZ, 
  jfloat fW
)
{
   // constructor of class Ogre::Vector4 
   
   // parameter conversions 
  const float _cpp_fX = fX;
  const float _cpp_fY = fY;
  const float _cpp_fZ = fZ;
  const float _cpp_fW = fW; 
   
   // create new instance of class Ogre::Vector4 
   Ogre::Vector4* _cpp_this = new Ogre::Vector4(_cpp_fX, _cpp_fY, _cpp_fZ, _cpp_fW); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector4::Vector4 */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     Vector4()
 * Type:       constructor
 * Definition: Ogre::Vector4::Vector4
 * Signature:  (I)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1_1createVector4_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint afCoordinate
)
{
   // constructor of class Ogre::Vector4 
   
   // parameter conversions 
  const int _cpp_afCoordinate = afCoordinate; 
   
   // create new instance of class Ogre::Vector4 
   Ogre::Vector4* _cpp_this = new Ogre::Vector4(_cpp_afCoordinate); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector4::Vector4 */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     Vector4()
 * Type:       constructor
 * Definition: Ogre::Vector4::Vector4
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1_1createVector4_1_1Realp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r
)
{
   // constructor of class Ogre::Vector4 
   
   // parameter conversions 
  float* _cpp_r = reinterpret_cast<float*>(r); 
   
   // create new instance of class Ogre::Vector4 
   Ogre::Vector4* _cpp_this = new Ogre::Vector4(_cpp_r); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector4::Vector4 */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     Vector4()
 * Type:       constructor
 * Definition: Ogre::Vector4::Vector4
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1_1createVector4_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rhs
)
{
   // constructor of class Ogre::Vector4 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_rhs = reinterpret_cast< const Ogre::Vector3* >(rhs); 
   
   // create new instance of class Ogre::Vector4 
   Ogre::Vector4* _cpp_this = new Ogre::Vector4(*_cpp_rhs); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Vector4::Vector4 */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator[]_const()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector4::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector4__1operatorIndex_1const_1_1iV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return _cpp_result;
} /* Real Ogre::Vector4::operator[] */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real& Ogre::Vector4::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorIndex_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   float& _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return reinterpret_cast<jlong>(&_cpp_result);
} /* Real& Ogre::Vector4::operator[] */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     ptr()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Vector4::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1ptr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Real* Ogre::Vector4::ptr */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     ptr_const()
 * Type:       non-virtual method
 * Definition: const Real* Ogre::Vector4::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1ptr_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Real* Ogre::Vector4::ptr */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator=
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorAssignment_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator=
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorAssignment_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector4::operator==
 * Signature:  (Ogre_Vector4)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector4__1operatorEqual_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rkVector) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector4::operator== */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector4::operator!=
 * Signature:  (Ogre_Vector4)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector4__1operatorNotEqual_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rkVector) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Vector4::operator!= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator=
 * Signature:  (Ogre_Vector3)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorAssignment_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rhs = reinterpret_cast< const Ogre::Vector4* >(rhs); 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator=(*_cpp_rhs) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Vector4::operator+
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorAddition_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator+(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Vector4::operator+ */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Vector4::operator-
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorSubtraction_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator-(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Vector4::operator- */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Vector4::operator *
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorMultiplication_1_1RealV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator *(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Vector4::operator * */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Vector4::operator *
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorMultiplication_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rhs = reinterpret_cast< const Ogre::Vector4* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator *(*_cpp_rhs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Vector4::operator * */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Vector4::operator/
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorDivision_1_1RealV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator/(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Vector4::operator/ */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Vector4::operator/
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorDivision_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rhs = reinterpret_cast< const Ogre::Vector4* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator/(*_cpp_rhs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Vector4::operator/ */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Vector4::operator+
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorAddition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator+() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4& Ogre::Vector4::operator+ */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Vector4::operator-
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator-() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Vector4::operator- */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator+=
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorIncrementAndAssign_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator+=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator+= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator-=
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorDecrementAndAssign_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator-=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator-= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator *=
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorMultiplyAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator *=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator *= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator+=
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorIncrementAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator+=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator+= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator-=
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorDecrementAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator-=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator-= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator *=
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorMultiplyAndAssign_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator *=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator *= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator/=
 * Signature:  (float)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorDivideAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator/=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator/= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Vector4& Ogre::Vector4::operator/=
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1operatorDivideAndAssign_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_rkVector = reinterpret_cast< const Ogre::Vector4* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->operator/=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4& Ogre::Vector4::operator/= */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     dotProduct()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector4::dotProduct
 * Signature:  (Ogre_Vector4)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector4__1dotProduct_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_vec = reinterpret_cast< const Ogre::Vector4* >(vec); 
   
   // cast pointer to C++ object 
   const Ogre::Vector4* _cpp_this = reinterpret_cast<const Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->dotProduct(*_cpp_vec) ; 
   return _cpp_result;
} /* Real Ogre::Vector4::dotProduct */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Vector4::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector4__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Vector4 
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Vector4::__delete */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     getx()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector4::x
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector4__1getx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->x; 
   return _cpp_result;
} /* Real Ogre::Vector4::x */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     setx()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector4::x
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector4__1setx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this =reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->x = _cpp__jni_value_;
} /* Real Ogre::Vector4::x */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     gety()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector4::y
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector4__1gety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->y; 
   return _cpp_result;
} /* Real Ogre::Vector4::y */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     sety()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector4::y
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector4__1sety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this =reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->y = _cpp__jni_value_;
} /* Real Ogre::Vector4::y */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     getz()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector4::z
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector4__1getz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->z; 
   return _cpp_result;
} /* Real Ogre::Vector4::z */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     setz()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector4::z
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector4__1setz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this =reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->z = _cpp__jni_value_;
} /* Real Ogre::Vector4::z */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     getw()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector4::w
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector4__1getw (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this = reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->w; 
   return _cpp_result;
} /* Real Ogre::Vector4::w */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     setw()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector4::w
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector4__1setw (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Vector4* _cpp_this =reinterpret_cast<Ogre::Vector4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->w = _cpp__jni_value_;
} /* Real Ogre::Vector4::w */


/*
 * Class:      org.ogre4j.Vector4
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Vector4 Ogre::Vector4::ZERO
 * Signature:  ()Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector4__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & Ogre::Vector4::ZERO ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4 Ogre::Vector4::ZERO */
