///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderOperation.h"

// import header files of original library
#include <OgreRenderOperation.h>



/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     RenderOperation()
 * Type:       constructor
 * Definition: Ogre::RenderOperation::RenderOperation
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderOperation__1_1createRenderOperation (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::RenderOperation 
   
   // parameter conversions 
   
   // create new instance of class Ogre::RenderOperation 
   Ogre::RenderOperation* _cpp_this = new Ogre::RenderOperation(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RenderOperation::RenderOperation */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderOperation::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderOperation__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderOperation 
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this = reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderOperation::__delete */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     getvertexData()
 * Type:       getter for public attribute
 * Definition: VertexData* Ogre::RenderOperation::vertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderOperation__1getvertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this = reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->vertexData; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::RenderOperation::vertexData */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     setvertexData()
 * Type:       setter for public attribute
 * Definition: VertexData* Ogre::RenderOperation::vertexData
 * Signature:  (Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderOperation__1setvertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::VertexData* _cpp__jni_value_ = reinterpret_cast< Ogre::VertexData* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this =reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->vertexData = _cpp__jni_value_;
} /* VertexData* Ogre::RenderOperation::vertexData */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     getoperationType()
 * Type:       getter for public attribute
 * Definition: OperationType Ogre::RenderOperation::operationType
 * Signature:  ()Ogre_RenderOperation_OperationType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderOperation__1getoperationType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this = reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderOperation::OperationType _cpp_result = _cpp_this->operationType; 
   return _cpp_result;
} /* OperationType Ogre::RenderOperation::operationType */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     setoperationType()
 * Type:       setter for public attribute
 * Definition: OperationType Ogre::RenderOperation::operationType
 * Signature:  (Ogre_RenderOperation_OperationType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderOperation__1setoperationType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::RenderOperation::OperationType _cpp__jni_value_ = (Ogre::RenderOperation::OperationType)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this =reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->operationType = _cpp__jni_value_;
} /* OperationType Ogre::RenderOperation::operationType */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     getuseIndexes()
 * Type:       getter for public attribute
 * Definition: bool Ogre::RenderOperation::useIndexes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderOperation__1getuseIndexes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this = reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->useIndexes; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::RenderOperation::useIndexes */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     setuseIndexes()
 * Type:       setter for public attribute
 * Definition: bool Ogre::RenderOperation::useIndexes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderOperation__1setuseIndexes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this =reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->useIndexes = _cpp__jni_value_;
} /* bool Ogre::RenderOperation::useIndexes */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     getindexData()
 * Type:       getter for public attribute
 * Definition: IndexData* Ogre::RenderOperation::indexData
 * Signature:  ()Ogre_IndexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderOperation__1getindexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this = reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IndexData* _cpp_result = _cpp_this->indexData; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* IndexData* Ogre::RenderOperation::indexData */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     setindexData()
 * Type:       setter for public attribute
 * Definition: IndexData* Ogre::RenderOperation::indexData
 * Signature:  (Ogre_IndexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderOperation__1setindexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::IndexData* _cpp__jni_value_ = reinterpret_cast< Ogre::IndexData* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this =reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->indexData = _cpp__jni_value_;
} /* IndexData* Ogre::RenderOperation::indexData */


/*
 * Class:      org.ogre4j.RenderOperation
 * Method:     getsrcRenderable()
 * Type:       getter for public attribute
 * Definition: const Renderable* Ogre::RenderOperation::srcRenderable
 * Signature:  ()Ogre_Renderable
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderOperation__1getsrcRenderable (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderOperation* _cpp_this = reinterpret_cast<Ogre::RenderOperation*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable* _cpp_result = _cpp_this->srcRenderable; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Renderable* Ogre::RenderOperation::srcRenderable */
