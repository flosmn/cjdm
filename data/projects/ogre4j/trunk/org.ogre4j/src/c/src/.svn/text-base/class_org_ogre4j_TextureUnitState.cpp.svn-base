///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_TextureUnitState.h"

// import header files of original library
#include <OgreTextureUnitState.h>



/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     TextureUnitState()
 * Type:       constructor
 * Definition: Ogre::TextureUnitState::TextureUnitState
 * Signature:  (Ogre_Pass)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1_1createTextureUnitState_1_1Passp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent
)
{
   // constructor of class Ogre::TextureUnitState 
   
   // parameter conversions 
  Ogre::Pass* _cpp_parent = reinterpret_cast< Ogre::Pass* >(parent); 
   
   // create new instance of class Ogre::TextureUnitState 
   Ogre::TextureUnitState* _cpp_this = new Ogre::TextureUnitState(_cpp_parent); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TextureUnitState::TextureUnitState */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     TextureUnitState()
 * Type:       constructor
 * Definition: Ogre::TextureUnitState::TextureUnitState
 * Signature:  (Ogre_PassOgre_TextureUnitState)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1_1createTextureUnitState_1_1PasspTextureUnitStateR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jlong oth
)
{
   // constructor of class Ogre::TextureUnitState 
   
   // parameter conversions 
  Ogre::Pass* _cpp_parent = reinterpret_cast< Ogre::Pass* >(parent);
  const Ogre::TextureUnitState* _cpp_oth = reinterpret_cast< const Ogre::TextureUnitState* >(oth); 
   
   // create new instance of class Ogre::TextureUnitState 
   Ogre::TextureUnitState* _cpp_this = new Ogre::TextureUnitState(_cpp_parent, *_cpp_oth); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TextureUnitState::TextureUnitState */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: TextureUnitState& Ogre::TextureUnitState::operator=
 * Signature:  (Ogre_TextureUnitState)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1operatorAssignment_1_1TextureUnitStateR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong oth
)
{
   // parameter conversions 
  const Ogre::TextureUnitState* _cpp_oth = reinterpret_cast< const Ogre::TextureUnitState* >(oth); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState* _cpp_result = & _cpp_this->operator=(*_cpp_oth) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TextureUnitState& Ogre::TextureUnitState::operator= */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     TextureUnitState()
 * Type:       constructor
 * Definition: Ogre::TextureUnitState::TextureUnitState
 * Signature:  (Ogre_Passstd_stringI)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1_1createTextureUnitState_1_1PasspStringRIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jstring texName, 
  jlong texCoordSet
)
{
   // constructor of class Ogre::TextureUnitState 
   
   // parameter conversions 
  Ogre::Pass* _cpp_parent = reinterpret_cast< Ogre::Pass* >(parent);
  std::string _cpp_texName = ""; org::xbig::jni::to_stdstring(_jni_env_, texName, _cpp_texName); // calls c-tor only. Not operator= .;
  unsigned int _cpp_texCoordSet = texCoordSet; 
   
   // create new instance of class Ogre::TextureUnitState 
   Ogre::TextureUnitState* _cpp_this = new Ogre::TextureUnitState(_cpp_parent, _cpp_texName, _cpp_texCoordSet); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::TextureUnitState::TextureUnitState */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::TextureUnitState::getTextureName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextureUnitState__1getTextureName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getTextureName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::TextureUnitState::getTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureName
 * Signature:  (std_stringOgre_TextureType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureName_1_1StringRTextureTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint ttype
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  Ogre::TextureType _cpp_ttype = (Ogre::TextureType)ttype; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureName(_cpp_name, _cpp_ttype);
} /* void Ogre::TextureUnitState::setTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setCubicTextureName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setCubicTextureName
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setCubicTextureName_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean forUVW
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  bool _cpp_forUVW = forUVW ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCubicTextureName(_cpp_name, _cpp_forUVW);
} /* void Ogre::TextureUnitState::setCubicTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setAnimatedTextureName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setAnimatedTextureName
 * Signature:  (std_stringIfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setAnimatedTextureName_1_1StringRIvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong numFrames, 
  jfloat duration
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned int _cpp_numFrames = numFrames;
  float _cpp_duration = duration; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAnimatedTextureName(_cpp_name, _cpp_numFrames, _cpp_duration);
} /* void Ogre::TextureUnitState::setAnimatedTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureDimensions()
 * Type:       non-virtual method
 * Definition: std::pair< size_t, size_t > Ogre::TextureUnitState::getTextureDimensions
 * Signature:  (I)std_pair__size_t__size_t__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getTextureDimensions_1_1Iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong frame
)
{
   // parameter conversions 
  unsigned int _cpp_frame = frame; 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const std::pair< size_t, size_t >* _cpp_result = new std::pair< size_t, size_t >( _cpp_this->getTextureDimensions(_cpp_frame) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* std::pair< size_t, size_t > Ogre::TextureUnitState::getTextureDimensions */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setCurrentFrame()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setCurrentFrame
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setCurrentFrame_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong frameNumber
)
{
   // parameter conversions 
  unsigned int _cpp_frameNumber = frameNumber; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCurrentFrame(_cpp_frameNumber);
} /* void Ogre::TextureUnitState::setCurrentFrame */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getCurrentFrame()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::TextureUnitState::getCurrentFrame
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getCurrentFrame_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getCurrentFrame() ; 
   return _cpp_result;
} /* unsigned int Ogre::TextureUnitState::getCurrentFrame */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getFrameTextureName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::TextureUnitState::getFrameTextureName
 * Signature:  (I)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextureUnitState__1getFrameTextureName_1_1Iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong frameNumber
)
{
   // parameter conversions 
  unsigned int _cpp_frameNumber = frameNumber; 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getFrameTextureName(_cpp_frameNumber) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::TextureUnitState::getFrameTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setFrameTextureName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setFrameTextureName
 * Signature:  (std_stringI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setFrameTextureName_1_1StringRIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong frameNumber
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  unsigned int _cpp_frameNumber = frameNumber; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFrameTextureName(_cpp_name, _cpp_frameNumber);
} /* void Ogre::TextureUnitState::setFrameTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     addFrameTextureName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::addFrameTextureName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1addFrameTextureName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addFrameTextureName(_cpp_name);
} /* void Ogre::TextureUnitState::addFrameTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     deleteFrameTextureName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::deleteFrameTextureName
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1deleteFrameTextureName_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint frameNumber
)
{
   // parameter conversions 
  const size_t _cpp_frameNumber = frameNumber; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->deleteFrameTextureName(_cpp_frameNumber);
} /* void Ogre::TextureUnitState::deleteFrameTextureName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getNumFrames()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::TextureUnitState::getNumFrames
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getNumFrames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getNumFrames() ; 
   return _cpp_result;
} /* unsigned int Ogre::TextureUnitState::getNumFrames */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setBindingType()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setBindingType
 * Signature:  (Ogre_TextureUnitState_BindingType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setBindingType_1_1BindingTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bt
)
{
   // parameter conversions 
  Ogre::TextureUnitState::BindingType _cpp_bt = (Ogre::TextureUnitState::BindingType)bt; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBindingType(_cpp_bt);
} /* void Ogre::TextureUnitState::setBindingType */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getBindingType()
 * Type:       non-virtual method
 * Definition: BindingType Ogre::TextureUnitState::getBindingType
 * Signature:  ()Ogre_TextureUnitState_BindingType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getBindingType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState::BindingType _cpp_result = _cpp_this->getBindingType() ; 
   return _cpp_result;
} /* BindingType Ogre::TextureUnitState::getBindingType */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setContentType()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setContentType
 * Signature:  (Ogre_TextureUnitState_ContentType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setContentType_1_1ContentTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ct
)
{
   // parameter conversions 
  Ogre::TextureUnitState::ContentType _cpp_ct = (Ogre::TextureUnitState::ContentType)ct; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setContentType(_cpp_ct);
} /* void Ogre::TextureUnitState::setContentType */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getContentType()
 * Type:       non-virtual method
 * Definition: ContentType Ogre::TextureUnitState::getContentType
 * Signature:  ()Ogre_TextureUnitState_ContentType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getContentType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState::ContentType _cpp_result = _cpp_this->getContentType() ; 
   return _cpp_result;
} /* ContentType Ogre::TextureUnitState::getContentType */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     isCubic()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::isCubic
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1isCubic_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCubic() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::isCubic */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     is3D()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::is3D
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1is3D_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->is3D() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::is3D */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureType()
 * Type:       non-virtual method
 * Definition: TextureType Ogre::TextureUnitState::getTextureType
 * Signature:  ()Ogre_TextureType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getTextureType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureType _cpp_result = _cpp_this->getTextureType() ; 
   return _cpp_result;
} /* TextureType Ogre::TextureUnitState::getTextureType */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setDesiredFormat()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setDesiredFormat
 * Signature:  (Ogre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setDesiredFormat_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint desiredFormat
)
{
   // parameter conversions 
  Ogre::PixelFormat _cpp_desiredFormat = (Ogre::PixelFormat)desiredFormat; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDesiredFormat(_cpp_desiredFormat);
} /* void Ogre::TextureUnitState::setDesiredFormat */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getDesiredFormat()
 * Type:       non-virtual method
 * Definition: PixelFormat Ogre::TextureUnitState::getDesiredFormat
 * Signature:  ()Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getDesiredFormat_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = _cpp_this->getDesiredFormat() ; 
   return _cpp_result;
} /* PixelFormat Ogre::TextureUnitState::getDesiredFormat */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setNumMipmaps()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setNumMipmaps
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setNumMipmaps_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numMipmaps
)
{
   // parameter conversions 
  int _cpp_numMipmaps = numMipmaps; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNumMipmaps(_cpp_numMipmaps);
} /* void Ogre::TextureUnitState::setNumMipmaps */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getNumMipmaps()
 * Type:       non-virtual method
 * Definition: int Ogre::TextureUnitState::getNumMipmaps
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getNumMipmaps_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getNumMipmaps() ; 
   return _cpp_result;
} /* int Ogre::TextureUnitState::getNumMipmaps */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setIsAlpha()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setIsAlpha
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setIsAlpha_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean isAlpha
)
{
   // parameter conversions 
  bool _cpp_isAlpha = isAlpha ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setIsAlpha(_cpp_isAlpha);
} /* void Ogre::TextureUnitState::setIsAlpha */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getIsAlpha()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::getIsAlpha
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1getIsAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getIsAlpha() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::getIsAlpha */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setHardwareGammaEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setHardwareGammaEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setHardwareGammaEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setHardwareGammaEnabled(_cpp_enabled);
} /* void Ogre::TextureUnitState::setHardwareGammaEnabled */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     isHardwareGammaEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::isHardwareGammaEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1isHardwareGammaEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isHardwareGammaEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::isHardwareGammaEnabled */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureCoordSet()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::TextureUnitState::getTextureCoordSet
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getTextureCoordSet_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTextureCoordSet() ; 
   return _cpp_result;
} /* unsigned int Ogre::TextureUnitState::getTextureCoordSet */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureCoordSet()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureCoordSet
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureCoordSet_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong set
)
{
   // parameter conversions 
  unsigned int _cpp_set = set; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureCoordSet(_cpp_set);
} /* void Ogre::TextureUnitState::setTextureCoordSet */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureTransform()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureTransform
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureTransform_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_xform = reinterpret_cast< const Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureTransform(*_cpp_xform);
} /* void Ogre::TextureUnitState::setTextureTransform */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureTransform()
 * Type:       non-virtual method
 * Definition: const Matrix4& Ogre::TextureUnitState::getTextureTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getTextureTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getTextureTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix4& Ogre::TextureUnitState::getTextureTransform */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureScroll()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureScroll
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureScroll_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat u, 
  jfloat v
)
{
   // parameter conversions 
  float _cpp_u = u;
  float _cpp_v = v; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureScroll(_cpp_u, _cpp_v);
} /* void Ogre::TextureUnitState::setTextureScroll */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureUScroll()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureUScroll
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureUScroll_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat value
)
{
   // parameter conversions 
  float _cpp_value = value; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureUScroll(_cpp_value);
} /* void Ogre::TextureUnitState::setTextureUScroll */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureUScroll()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextureUnitState::getTextureUScroll
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextureUnitState__1getTextureUScroll_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTextureUScroll() ; 
   return _cpp_result;
} /* Real Ogre::TextureUnitState::getTextureUScroll */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureVScroll()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureVScroll
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureVScroll_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat value
)
{
   // parameter conversions 
  float _cpp_value = value; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureVScroll(_cpp_value);
} /* void Ogre::TextureUnitState::setTextureVScroll */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureVScroll()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextureUnitState::getTextureVScroll
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextureUnitState__1getTextureVScroll_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTextureVScroll() ; 
   return _cpp_result;
} /* Real Ogre::TextureUnitState::getTextureVScroll */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureUScale()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureUScale
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureUScale_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat value
)
{
   // parameter conversions 
  float _cpp_value = value; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureUScale(_cpp_value);
} /* void Ogre::TextureUnitState::setTextureUScale */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureUScale()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextureUnitState::getTextureUScale
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextureUnitState__1getTextureUScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTextureUScale() ; 
   return _cpp_result;
} /* Real Ogre::TextureUnitState::getTextureUScale */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureVScale()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureVScale
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureVScale_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat value
)
{
   // parameter conversions 
  float _cpp_value = value; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureVScale(_cpp_value);
} /* void Ogre::TextureUnitState::setTextureVScale */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureVScale()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextureUnitState::getTextureVScale
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextureUnitState__1getTextureVScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTextureVScale() ; 
   return _cpp_result;
} /* Real Ogre::TextureUnitState::getTextureVScale */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureScale()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureScale
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureScale_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat uScale, 
  jfloat vScale
)
{
   // parameter conversions 
  float _cpp_uScale = uScale;
  float _cpp_vScale = vScale; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureScale(_cpp_uScale, _cpp_vScale);
} /* void Ogre::TextureUnitState::setTextureScale */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureRotate()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureRotate
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureRotate_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_angle = reinterpret_cast< const Ogre::Radian* >(angle); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureRotate(*_cpp_angle);
} /* void Ogre::TextureUnitState::setTextureRotate */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureRotate()
 * Type:       non-virtual method
 * Definition: const Radian& Ogre::TextureUnitState::getTextureRotate
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getTextureRotate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->getTextureRotate() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Radian& Ogre::TextureUnitState::getTextureRotate */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureAddressingMode()
 * Type:       non-virtual method
 * Definition: const UVWAddressingMode& Ogre::TextureUnitState::getTextureAddressingMode
 * Signature:  ()Ogre_TextureUnitState_UVWAddressingMode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getTextureAddressingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState::UVWAddressingMode* _cpp_result = & _cpp_this->getTextureAddressingMode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const UVWAddressingMode& Ogre::TextureUnitState::getTextureAddressingMode */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureAddressingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureAddressingMode
 * Signature:  (Ogre_TextureUnitState_TextureAddressingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureAddressingMode_1_1TextureAddressingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint tam
)
{
   // parameter conversions 
  Ogre::TextureUnitState::TextureAddressingMode _cpp_tam = (Ogre::TextureUnitState::TextureAddressingMode)tam; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureAddressingMode(_cpp_tam);
} /* void Ogre::TextureUnitState::setTextureAddressingMode */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureAddressingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureAddressingMode
 * Signature:  (Ogre_TextureUnitState_TextureAddressingModeOgre_TextureUnitState_TextureAddressingModeOgre_TextureUnitState_TextureAddressingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureAddressingMode_1_1TextureAddressingModevTextureAddressingModevTextureAddressingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint u, 
  jint v, 
  jint w
)
{
   // parameter conversions 
  Ogre::TextureUnitState::TextureAddressingMode _cpp_u = (Ogre::TextureUnitState::TextureAddressingMode)u;
  Ogre::TextureUnitState::TextureAddressingMode _cpp_v = (Ogre::TextureUnitState::TextureAddressingMode)v;
  Ogre::TextureUnitState::TextureAddressingMode _cpp_w = (Ogre::TextureUnitState::TextureAddressingMode)w; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureAddressingMode(_cpp_u, _cpp_v, _cpp_w);
} /* void Ogre::TextureUnitState::setTextureAddressingMode */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureAddressingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureAddressingMode
 * Signature:  (Ogre_TextureUnitState_UVWAddressingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureAddressingMode_1_1UVWAddressingModeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong uvw
)
{
   // parameter conversions 
  const Ogre::TextureUnitState::UVWAddressingMode* _cpp_uvw = reinterpret_cast< const Ogre::TextureUnitState::UVWAddressingMode* >(uvw); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureAddressingMode(*_cpp_uvw);
} /* void Ogre::TextureUnitState::setTextureAddressingMode */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureBorderColour()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureBorderColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureBorderColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_colour = reinterpret_cast< const Ogre::ColourValue* >(colour); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureBorderColour(*_cpp_colour);
} /* void Ogre::TextureUnitState::setTextureBorderColour */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureBorderColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::TextureUnitState::getTextureBorderColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getTextureBorderColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->getTextureBorderColour() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue& Ogre::TextureUnitState::getTextureBorderColour */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setColourOperationEx()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setColourOperationEx
 * Signature:  (Ogre_LayerBlendOperationExOgre_LayerBlendSourceOgre_LayerBlendSourceOgre_ColourValueOgre_ColourValuefloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setColourOperationEx_1_1LayerBlendOperationExvLayerBlendSourcevLayerBlendSourcevColourValueRColourValueRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint op, 
  jint source1, 
  jint source2, 
  jlong arg1, 
  jlong arg2, 
  jfloat manualBlend
)
{
   // parameter conversions 
  Ogre::LayerBlendOperationEx _cpp_op = (Ogre::LayerBlendOperationEx)op;
  Ogre::LayerBlendSource _cpp_source1 = (Ogre::LayerBlendSource)source1;
  Ogre::LayerBlendSource _cpp_source2 = (Ogre::LayerBlendSource)source2;
  const Ogre::ColourValue* _cpp_arg1 = reinterpret_cast< const Ogre::ColourValue* >(arg1);
  const Ogre::ColourValue* _cpp_arg2 = reinterpret_cast< const Ogre::ColourValue* >(arg2);
  float _cpp_manualBlend = manualBlend; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourOperationEx(_cpp_op, _cpp_source1, _cpp_source2, *_cpp_arg1, *_cpp_arg2, _cpp_manualBlend);
} /* void Ogre::TextureUnitState::setColourOperationEx */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setColourOperation()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setColourOperation
 * Signature:  (Ogre_LayerBlendOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setColourOperation_1_1LayerBlendOperationV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint op
)
{
   // parameter conversions 
  const Ogre::LayerBlendOperation _cpp_op = (Ogre::LayerBlendOperation)op; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourOperation(_cpp_op);
} /* void Ogre::TextureUnitState::setColourOperation */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setColourOpMultipassFallback()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setColourOpMultipassFallback
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setColourOpMultipassFallback_1_1SceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
)
{
   // parameter conversions 
  const Ogre::SceneBlendFactor _cpp_sourceFactor = (Ogre::SceneBlendFactor)sourceFactor;
  const Ogre::SceneBlendFactor _cpp_destFactor = (Ogre::SceneBlendFactor)destFactor; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setColourOpMultipassFallback(_cpp_sourceFactor, _cpp_destFactor);
} /* void Ogre::TextureUnitState::setColourOpMultipassFallback */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getColourBlendMode()
 * Type:       non-virtual method
 * Definition: const LayerBlendModeEx& Ogre::TextureUnitState::getColourBlendMode
 * Signature:  ()Ogre_LayerBlendModeEx
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getColourBlendMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LayerBlendModeEx* _cpp_result = & _cpp_this->getColourBlendMode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LayerBlendModeEx& Ogre::TextureUnitState::getColourBlendMode */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getAlphaBlendMode()
 * Type:       non-virtual method
 * Definition: const LayerBlendModeEx& Ogre::TextureUnitState::getAlphaBlendMode
 * Signature:  ()Ogre_LayerBlendModeEx
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getAlphaBlendMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LayerBlendModeEx* _cpp_result = & _cpp_this->getAlphaBlendMode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LayerBlendModeEx& Ogre::TextureUnitState::getAlphaBlendMode */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getColourBlendFallbackSrc()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::TextureUnitState::getColourBlendFallbackSrc
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getColourBlendFallbackSrc_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneBlendFactor _cpp_result = _cpp_this->getColourBlendFallbackSrc() ; 
   return _cpp_result;
} /* SceneBlendFactor Ogre::TextureUnitState::getColourBlendFallbackSrc */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getColourBlendFallbackDest()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::TextureUnitState::getColourBlendFallbackDest
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getColourBlendFallbackDest_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneBlendFactor _cpp_result = _cpp_this->getColourBlendFallbackDest() ; 
   return _cpp_result;
} /* SceneBlendFactor Ogre::TextureUnitState::getColourBlendFallbackDest */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setAlphaOperation()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setAlphaOperation
 * Signature:  (Ogre_LayerBlendOperationExOgre_LayerBlendSourceOgre_LayerBlendSourcefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setAlphaOperation_1_1LayerBlendOperationExvLayerBlendSourcevLayerBlendSourcevRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint op, 
  jint source1, 
  jint source2, 
  jfloat arg1, 
  jfloat arg2, 
  jfloat manualBlend
)
{
   // parameter conversions 
  Ogre::LayerBlendOperationEx _cpp_op = (Ogre::LayerBlendOperationEx)op;
  Ogre::LayerBlendSource _cpp_source1 = (Ogre::LayerBlendSource)source1;
  Ogre::LayerBlendSource _cpp_source2 = (Ogre::LayerBlendSource)source2;
  float _cpp_arg1 = arg1;
  float _cpp_arg2 = arg2;
  float _cpp_manualBlend = manualBlend; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAlphaOperation(_cpp_op, _cpp_source1, _cpp_source2, _cpp_arg1, _cpp_arg2, _cpp_manualBlend);
} /* void Ogre::TextureUnitState::setAlphaOperation */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     addEffect()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::addEffect
 * Signature:  (Ogre_TextureUnitState_TextureEffect)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1addEffect_1_1TextureEffectr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong effect
)
{
   // parameter conversions 
  Ogre::TextureUnitState::TextureEffect* _cpp_effect = reinterpret_cast< Ogre::TextureUnitState::TextureEffect* >(effect); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addEffect(*_cpp_effect);
} /* void Ogre::TextureUnitState::addEffect */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setEnvironmentMap()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setEnvironmentMap
 * Signature:  (ZOgre_TextureUnitState_EnvMapType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setEnvironmentMap_1_1bvEnvMapTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jint envMapType
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  Ogre::TextureUnitState::EnvMapType _cpp_envMapType = (Ogre::TextureUnitState::EnvMapType)envMapType; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEnvironmentMap(_cpp_enable, _cpp_envMapType);
} /* void Ogre::TextureUnitState::setEnvironmentMap */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setScrollAnimation()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setScrollAnimation
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setScrollAnimation_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat uSpeed, 
  jfloat vSpeed
)
{
   // parameter conversions 
  float _cpp_uSpeed = uSpeed;
  float _cpp_vSpeed = vSpeed; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setScrollAnimation(_cpp_uSpeed, _cpp_vSpeed);
} /* void Ogre::TextureUnitState::setScrollAnimation */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setRotateAnimation()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setRotateAnimation
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setRotateAnimation_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat speed
)
{
   // parameter conversions 
  float _cpp_speed = speed; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRotateAnimation(_cpp_speed);
} /* void Ogre::TextureUnitState::setRotateAnimation */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTransformAnimation()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTransformAnimation
 * Signature:  (Ogre_TextureUnitState_TextureTransformTypeOgre_WaveformTypefloatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTransformAnimation_1_1TextureTransformTypeVWaveformTypeVRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ttype, 
  jint waveType, 
  jfloat base, 
  jfloat frequency, 
  jfloat phase, 
  jfloat amplitude
)
{
   // parameter conversions 
  const Ogre::TextureUnitState::TextureTransformType _cpp_ttype = (Ogre::TextureUnitState::TextureTransformType)ttype;
  const Ogre::WaveformType _cpp_waveType = (Ogre::WaveformType)waveType;
  float _cpp_base = base;
  float _cpp_frequency = frequency;
  float _cpp_phase = phase;
  float _cpp_amplitude = amplitude; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTransformAnimation(_cpp_ttype, _cpp_waveType, _cpp_base, _cpp_frequency, _cpp_phase, _cpp_amplitude);
} /* void Ogre::TextureUnitState::setTransformAnimation */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setProjectiveTexturing()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setProjectiveTexturing
 * Signature:  (ZOgre_Frustum)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setProjectiveTexturing_1_1bvFrustumP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jlong projectionSettings
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false;
  const Ogre::Frustum* _cpp_projectionSettings = reinterpret_cast< const Ogre::Frustum* >(projectionSettings); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setProjectiveTexturing(_cpp_enabled, _cpp_projectionSettings);
} /* void Ogre::TextureUnitState::setProjectiveTexturing */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     removeAllEffects()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::removeAllEffects
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1removeAllEffects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAllEffects();
} /* void Ogre::TextureUnitState::removeAllEffects */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     removeEffect()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::removeEffect
 * Signature:  (Ogre_TextureUnitState_TextureEffectType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1removeEffect_1_1TextureEffectTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint type
)
{
   // parameter conversions 
  const Ogre::TextureUnitState::TextureEffectType _cpp_type = (Ogre::TextureUnitState::TextureEffectType)type; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeEffect(_cpp_type);
} /* void Ogre::TextureUnitState::removeEffect */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     isBlank()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::isBlank
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1isBlank_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isBlank() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::isBlank */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setBlank()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setBlank
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setBlank (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setBlank();
} /* void Ogre::TextureUnitState::setBlank */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     isTextureLoadFailing()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::isTextureLoadFailing
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1isTextureLoadFailing_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isTextureLoadFailing() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::isTextureLoadFailing */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     retryTextureLoad()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::retryTextureLoad
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1retryTextureLoad (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->retryTextureLoad();
} /* void Ogre::TextureUnitState::retryTextureLoad */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getEffects()
 * Type:       non-virtual method
 * Definition: const EffectMap& Ogre::TextureUnitState::getEffects
 * Signature:  ()Ogre_TextureUnitState_EffectMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getEffects_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TextureUnitState::EffectMap* _cpp_result = & _cpp_this->getEffects() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const EffectMap& Ogre::TextureUnitState::getEffects */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getAnimationDuration()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextureUnitState::getAnimationDuration
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextureUnitState__1getAnimationDuration_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getAnimationDuration() ; 
   return _cpp_result;
} /* Real Ogre::TextureUnitState::getAnimationDuration */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureFiltering
 * Signature:  (Ogre_TextureFilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureFiltering_1_1TextureFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint filterType
)
{
   // parameter conversions 
  Ogre::TextureFilterOptions _cpp_filterType = (Ogre::TextureFilterOptions)filterType; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureFiltering(_cpp_filterType);
} /* void Ogre::TextureUnitState::setTextureFiltering */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureFiltering
 * Signature:  (Ogre_FilterTypeOgre_FilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureFiltering_1_1FilterTypevFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ftype, 
  jint opts
)
{
   // parameter conversions 
  Ogre::FilterType _cpp_ftype = (Ogre::FilterType)ftype;
  Ogre::FilterOptions _cpp_opts = (Ogre::FilterOptions)opts; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureFiltering(_cpp_ftype, _cpp_opts);
} /* void Ogre::TextureUnitState::setTextureFiltering */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureFiltering
 * Signature:  (Ogre_FilterOptionsOgre_FilterOptionsOgre_FilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureFiltering_1_1FilterOptionsvFilterOptionsvFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint minFilter, 
  jint magFilter, 
  jint mipFilter
)
{
   // parameter conversions 
  Ogre::FilterOptions _cpp_minFilter = (Ogre::FilterOptions)minFilter;
  Ogre::FilterOptions _cpp_magFilter = (Ogre::FilterOptions)magFilter;
  Ogre::FilterOptions _cpp_mipFilter = (Ogre::FilterOptions)mipFilter; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureFiltering(_cpp_minFilter, _cpp_magFilter, _cpp_mipFilter);
} /* void Ogre::TextureUnitState::setTextureFiltering */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureFiltering()
 * Type:       non-virtual method
 * Definition: FilterOptions Ogre::TextureUnitState::getTextureFiltering
 * Signature:  (Ogre_FilterType)Ogre_FilterOptions
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureUnitState__1getTextureFiltering_1_1FilterTypev_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ftpye
)
{
   // parameter conversions 
  Ogre::FilterType _cpp_ftpye = (Ogre::FilterType)ftpye; 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FilterOptions _cpp_result = _cpp_this->getTextureFiltering(_cpp_ftpye) ; 
   return _cpp_result;
} /* FilterOptions Ogre::TextureUnitState::getTextureFiltering */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureAnisotropy()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureAnisotropy
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureAnisotropy_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong maxAniso
)
{
   // parameter conversions 
  unsigned int _cpp_maxAniso = maxAniso; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureAnisotropy(_cpp_maxAniso);
} /* void Ogre::TextureUnitState::setTextureAnisotropy */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureAnisotropy()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::TextureUnitState::getTextureAnisotropy
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getTextureAnisotropy_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTextureAnisotropy() ; 
   return _cpp_result;
} /* unsigned int Ogre::TextureUnitState::getTextureAnisotropy */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureMipmapBias()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureMipmapBias
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureMipmapBias_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat bias
)
{
   // parameter conversions 
  float _cpp_bias = bias; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureMipmapBias(_cpp_bias);
} /* void Ogre::TextureUnitState::setTextureMipmapBias */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureMipmapBias()
 * Type:       non-virtual method
 * Definition: float Ogre::TextureUnitState::getTextureMipmapBias
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextureUnitState__1getTextureMipmapBias_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getTextureMipmapBias() ; 
   return _cpp_result;
} /* float Ogre::TextureUnitState::getTextureMipmapBias */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: Pass* Ogre::TextureUnitState::getParent
 * Signature:  ()Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Pass* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Pass* Ogre::TextureUnitState::getParent */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _prepare()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_prepare();
} /* void Ogre::TextureUnitState::_prepare */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _unprepare()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_unprepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1unprepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_unprepare();
} /* void Ogre::TextureUnitState::_unprepare */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _load()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_load
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1load (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_load();
} /* void Ogre::TextureUnitState::_load */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _unload()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_unload();
} /* void Ogre::TextureUnitState::_unload */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     hasViewRelativeTextureCoordinateGeneration()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::hasViewRelativeTextureCoordinateGeneration
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1hasViewRelativeTextureCoordinateGeneration_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasViewRelativeTextureCoordinateGeneration() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::hasViewRelativeTextureCoordinateGeneration */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     isLoaded()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isLoaded() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::isLoaded */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _notifyNeedsRecompile()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_notifyNeedsRecompile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1notifyNeedsRecompile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyNeedsRecompile();
} /* void Ogre::TextureUnitState::_notifyNeedsRecompile */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setName(_cpp_name);
} /* void Ogre::TextureUnitState::setName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::TextureUnitState::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextureUnitState__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::TextureUnitState::getName */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     setTextureNameAlias()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::setTextureNameAlias
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1setTextureNameAlias_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureNameAlias(_cpp_name);
} /* void Ogre::TextureUnitState::setTextureNameAlias */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     getTextureNameAlias()
 * Type:       non-virtual method
 * Definition: const String& Ogre::TextureUnitState::getTextureNameAlias
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextureUnitState__1getTextureNameAlias_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getTextureNameAlias() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::TextureUnitState::getTextureNameAlias */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     applyTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::TextureUnitState::applyTextureAliases
 * Signature:  (Ogre_AliasTextureNamePairListZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureUnitState__1applyTextureAliases_1_1AliasTextureNamePairListRbV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aliasList, 
  jboolean apply
)
{
   // parameter conversions 
  const Ogre::AliasTextureNamePairList* _cpp_aliasList = reinterpret_cast< const Ogre::AliasTextureNamePairList* >(aliasList);
  const bool _cpp_apply = apply ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->applyTextureAliases(*_cpp_aliasList, _cpp_apply) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::TextureUnitState::applyTextureAliases */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _notifyParent()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_notifyParent
 * Signature:  (Ogre_Pass)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1notifyParent_1_1Passp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent
)
{
   // parameter conversions 
  Ogre::Pass* _cpp_parent = reinterpret_cast< Ogre::Pass* >(parent); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyParent(_cpp_parent);
} /* void Ogre::TextureUnitState::_notifyParent */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _getTexturePtr()
 * Type:       non-virtual method
 * Definition: const TexturePtr& Ogre::TextureUnitState::_getTexturePtr
 * Signature:  ()Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1_1getTexturePtr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = & _cpp_this->_getTexturePtr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const TexturePtr& Ogre::TextureUnitState::_getTexturePtr */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _getTexturePtr()
 * Type:       non-virtual method
 * Definition: const TexturePtr& Ogre::TextureUnitState::_getTexturePtr
 * Signature:  (I)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1_1getTexturePtr_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint frame
)
{
   // parameter conversions 
  size_t _cpp_frame = frame; 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = & _cpp_this->_getTexturePtr(_cpp_frame) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const TexturePtr& Ogre::TextureUnitState::_getTexturePtr */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _setTexturePtr()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_setTexturePtr
 * Signature:  (Ogre_TexturePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1setTexturePtr_1_1TexturePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong texptr
)
{
   // parameter conversions 
  const Ogre::TexturePtr* _cpp_texptr = reinterpret_cast< const Ogre::TexturePtr* >(texptr); 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTexturePtr(*_cpp_texptr);
} /* void Ogre::TextureUnitState::_setTexturePtr */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _setTexturePtr()
 * Type:       non-virtual method
 * Definition: void Ogre::TextureUnitState::_setTexturePtr
 * Signature:  (Ogre_TexturePtrI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1setTexturePtr_1_1TexturePtrRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong texptr, 
  jint frame
)
{
   // parameter conversions 
  const Ogre::TexturePtr* _cpp_texptr = reinterpret_cast< const Ogre::TexturePtr* >(texptr);
  size_t _cpp_frame = frame; 
   
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_setTexturePtr(*_cpp_texptr, _cpp_frame);
} /* void Ogre::TextureUnitState::_setTexturePtr */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     _getAnimController()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::TextureUnitState::_getAnimController
 * Signature:  ()Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureUnitState__1_1getAnimController_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureUnitState* _cpp_this = reinterpret_cast<const Ogre::TextureUnitState*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Controller< float >* _cpp_result = _cpp_this->_getAnimController() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Controller<Real>* Ogre::TextureUnitState::_getAnimController */


/*
 * Class:      org.ogre4j.TextureUnitState
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::TextureUnitState::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureUnitState__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::TextureUnitState 
   // cast pointer to C++ object 
   Ogre::TextureUnitState* _cpp_this = reinterpret_cast<Ogre::TextureUnitState*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::TextureUnitState::__delete */
