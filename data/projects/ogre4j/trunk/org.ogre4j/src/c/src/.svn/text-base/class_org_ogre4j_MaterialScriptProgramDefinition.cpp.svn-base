///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_MaterialScriptProgramDefinition.h"

// import header files of original library
#include <OgreMaterialSerializer.h>



/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     MaterialScriptProgramDefinition()
 * Type:       constructor
 * Definition: Ogre::MaterialScriptProgramDefinition::MaterialScriptProgramDefinition
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1_1createMaterialScriptProgramDefinition (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::MaterialScriptProgramDefinition 
   
   // parameter conversions 
   
   // create new instance of class Ogre::MaterialScriptProgramDefinition 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = new Ogre::MaterialScriptProgramDefinition(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::MaterialScriptProgramDefinition::MaterialScriptProgramDefinition */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::MaterialScriptProgramDefinition::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::MaterialScriptProgramDefinition 
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::MaterialScriptProgramDefinition::__delete */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getname()
 * Type:       getter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::name
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getname (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->name; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::MaterialScriptProgramDefinition::name */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setname()
 * Type:       setter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::name
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setname (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->name = _cpp__jni_value_;
} /* String Ogre::MaterialScriptProgramDefinition::name */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getprogType()
 * Type:       getter for public attribute
 * Definition: GpuProgramType Ogre::MaterialScriptProgramDefinition::progType
 * Signature:  ()Ogre_GpuProgramType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getprogType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuProgramType _cpp_result = _cpp_this->progType; 
   return _cpp_result;
} /* GpuProgramType Ogre::MaterialScriptProgramDefinition::progType */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setprogType()
 * Type:       setter for public attribute
 * Definition: GpuProgramType Ogre::MaterialScriptProgramDefinition::progType
 * Signature:  (Ogre_GpuProgramType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setprogType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::GpuProgramType _cpp__jni_value_ = (Ogre::GpuProgramType)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->progType = _cpp__jni_value_;
} /* GpuProgramType Ogre::MaterialScriptProgramDefinition::progType */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getlanguage()
 * Type:       getter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::language
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getlanguage (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->language; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::MaterialScriptProgramDefinition::language */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setlanguage()
 * Type:       setter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::language
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setlanguage (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->language = _cpp__jni_value_;
} /* String Ogre::MaterialScriptProgramDefinition::language */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getsource()
 * Type:       getter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::source
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getsource (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->source; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::MaterialScriptProgramDefinition::source */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setsource()
 * Type:       setter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::source
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setsource (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->source = _cpp__jni_value_;
} /* String Ogre::MaterialScriptProgramDefinition::source */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getsyntax()
 * Type:       getter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::syntax
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getsyntax (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->syntax; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::MaterialScriptProgramDefinition::syntax */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setsyntax()
 * Type:       setter for public attribute
 * Definition: String Ogre::MaterialScriptProgramDefinition::syntax
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setsyntax (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->syntax = _cpp__jni_value_;
} /* String Ogre::MaterialScriptProgramDefinition::syntax */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getsupportsSkeletalAnimation()
 * Type:       getter for public attribute
 * Definition: bool Ogre::MaterialScriptProgramDefinition::supportsSkeletalAnimation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getsupportsSkeletalAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->supportsSkeletalAnimation; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MaterialScriptProgramDefinition::supportsSkeletalAnimation */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setsupportsSkeletalAnimation()
 * Type:       setter for public attribute
 * Definition: bool Ogre::MaterialScriptProgramDefinition::supportsSkeletalAnimation
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setsupportsSkeletalAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->supportsSkeletalAnimation = _cpp__jni_value_;
} /* bool Ogre::MaterialScriptProgramDefinition::supportsSkeletalAnimation */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getsupportsMorphAnimation()
 * Type:       getter for public attribute
 * Definition: bool Ogre::MaterialScriptProgramDefinition::supportsMorphAnimation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getsupportsMorphAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->supportsMorphAnimation; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MaterialScriptProgramDefinition::supportsMorphAnimation */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setsupportsMorphAnimation()
 * Type:       setter for public attribute
 * Definition: bool Ogre::MaterialScriptProgramDefinition::supportsMorphAnimation
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setsupportsMorphAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->supportsMorphAnimation = _cpp__jni_value_;
} /* bool Ogre::MaterialScriptProgramDefinition::supportsMorphAnimation */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getsupportsPoseAnimation()
 * Type:       getter for public attribute
 * Definition: ushort Ogre::MaterialScriptProgramDefinition::supportsPoseAnimation
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getsupportsPoseAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->supportsPoseAnimation; 
   return _cpp_result;
} /* ushort Ogre::MaterialScriptProgramDefinition::supportsPoseAnimation */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setsupportsPoseAnimation()
 * Type:       setter for public attribute
 * Definition: ushort Ogre::MaterialScriptProgramDefinition::supportsPoseAnimation
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setsupportsPoseAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  unsigned short _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->supportsPoseAnimation = _cpp__jni_value_;
} /* ushort Ogre::MaterialScriptProgramDefinition::supportsPoseAnimation */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getusesVertexTextureFetch()
 * Type:       getter for public attribute
 * Definition: bool Ogre::MaterialScriptProgramDefinition::usesVertexTextureFetch
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getusesVertexTextureFetch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->usesVertexTextureFetch; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MaterialScriptProgramDefinition::usesVertexTextureFetch */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setusesVertexTextureFetch()
 * Type:       setter for public attribute
 * Definition: bool Ogre::MaterialScriptProgramDefinition::usesVertexTextureFetch
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setusesVertexTextureFetch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->usesVertexTextureFetch = _cpp__jni_value_;
} /* bool Ogre::MaterialScriptProgramDefinition::usesVertexTextureFetch */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     getcustomParameters()
 * Type:       getter for public attribute
 * Definition: std::vector<std::pair<String, String> > Ogre::MaterialScriptProgramDefinition::customParameters
 * Signature:  ()std_vector__std_pair__String__String____
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1getcustomParameters (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this = reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   const std::vector< std::pair< std::string, std::string > >* _cpp_result = new std::vector< std::pair< std::string, std::string > >( _cpp_this->customParameters); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* std::vector<std::pair<String, String> > Ogre::MaterialScriptProgramDefinition::customParameters */


/*
 * Class:      org.ogre4j.MaterialScriptProgramDefinition
 * Method:     setcustomParameters()
 * Type:       setter for public attribute
 * Definition: std::vector<std::pair<String, String> > Ogre::MaterialScriptProgramDefinition::customParameters
 * Signature:  (std_vector__std_pair__String__String____)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_MaterialScriptProgramDefinition__1setcustomParameters (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  std::vector< std::pair< std::string, std::string > >* _cpp__jni_value_ = reinterpret_cast< std::vector< std::pair< std::string, std::string > >* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::MaterialScriptProgramDefinition* _cpp_this =reinterpret_cast<Ogre::MaterialScriptProgramDefinition*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->customParameters = *_cpp__jni_value_;
} /* std::vector<std::pair<String, String> > Ogre::MaterialScriptProgramDefinition::customParameters */
