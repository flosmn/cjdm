///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_StaticFaceGroup.h"

// import header files of original library
#include <OgreStaticFaceGroup.h>



/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     StaticFaceGroup()
 * Type:       constructor
 * Definition: Ogre::StaticFaceGroup::StaticFaceGroup
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticFaceGroup__1_1createStaticFaceGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::StaticFaceGroup 
   
   // parameter conversions 
   
   // create new instance of class Ogre::StaticFaceGroup 
   Ogre::StaticFaceGroup* _cpp_this = new Ogre::StaticFaceGroup(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::StaticFaceGroup::StaticFaceGroup */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::StaticFaceGroup::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::StaticFaceGroup 
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::StaticFaceGroup::__delete */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getfType()
 * Type:       getter for public attribute
 * Definition: FaceGroupType Ogre::StaticFaceGroup::fType
 * Signature:  ()Ogre_FaceGroupType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_StaticFaceGroup__1getfType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FaceGroupType _cpp_result = _cpp_this->fType; 
   return _cpp_result;
} /* FaceGroupType Ogre::StaticFaceGroup::fType */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setfType()
 * Type:       setter for public attribute
 * Definition: FaceGroupType Ogre::StaticFaceGroup::fType
 * Signature:  (Ogre_FaceGroupType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setfType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::FaceGroupType _cpp__jni_value_ = (Ogre::FaceGroupType)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->fType = _cpp__jni_value_;
} /* FaceGroupType Ogre::StaticFaceGroup::fType */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getisSky()
 * Type:       getter for public attribute
 * Definition: bool Ogre::StaticFaceGroup::isSky
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticFaceGroup__1getisSky (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isSky; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::StaticFaceGroup::isSky */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setisSky()
 * Type:       setter for public attribute
 * Definition: bool Ogre::StaticFaceGroup::isSky
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setisSky (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->isSky = _cpp__jni_value_;
} /* bool Ogre::StaticFaceGroup::isSky */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getvertexStart()
 * Type:       getter for public attribute
 * Definition: int Ogre::StaticFaceGroup::vertexStart
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_StaticFaceGroup__1getvertexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->vertexStart; 
   return _cpp_result;
} /* int Ogre::StaticFaceGroup::vertexStart */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setvertexStart()
 * Type:       setter for public attribute
 * Definition: int Ogre::StaticFaceGroup::vertexStart
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setvertexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->vertexStart = _cpp__jni_value_;
} /* int Ogre::StaticFaceGroup::vertexStart */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getnumVertices()
 * Type:       getter for public attribute
 * Definition: int Ogre::StaticFaceGroup::numVertices
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_StaticFaceGroup__1getnumVertices (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->numVertices; 
   return _cpp_result;
} /* int Ogre::StaticFaceGroup::numVertices */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setnumVertices()
 * Type:       setter for public attribute
 * Definition: int Ogre::StaticFaceGroup::numVertices
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setnumVertices (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->numVertices = _cpp__jni_value_;
} /* int Ogre::StaticFaceGroup::numVertices */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getelementStart()
 * Type:       getter for public attribute
 * Definition: int Ogre::StaticFaceGroup::elementStart
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_StaticFaceGroup__1getelementStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->elementStart; 
   return _cpp_result;
} /* int Ogre::StaticFaceGroup::elementStart */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setelementStart()
 * Type:       setter for public attribute
 * Definition: int Ogre::StaticFaceGroup::elementStart
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setelementStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->elementStart = _cpp__jni_value_;
} /* int Ogre::StaticFaceGroup::elementStart */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getnumElements()
 * Type:       getter for public attribute
 * Definition: int Ogre::StaticFaceGroup::numElements
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_StaticFaceGroup__1getnumElements (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->numElements; 
   return _cpp_result;
} /* int Ogre::StaticFaceGroup::numElements */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setnumElements()
 * Type:       setter for public attribute
 * Definition: int Ogre::StaticFaceGroup::numElements
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setnumElements (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->numElements = _cpp__jni_value_;
} /* int Ogre::StaticFaceGroup::numElements */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getmaterialHandle()
 * Type:       getter for public attribute
 * Definition: int Ogre::StaticFaceGroup::materialHandle
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_StaticFaceGroup__1getmaterialHandle (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->materialHandle; 
   return _cpp_result;
} /* int Ogre::StaticFaceGroup::materialHandle */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setmaterialHandle()
 * Type:       setter for public attribute
 * Definition: int Ogre::StaticFaceGroup::materialHandle
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setmaterialHandle (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  int _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->materialHandle = _cpp__jni_value_;
} /* int Ogre::StaticFaceGroup::materialHandle */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getplane()
 * Type:       getter for public attribute
 * Definition: Plane Ogre::StaticFaceGroup::plane
 * Signature:  ()Ogre_Plane
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticFaceGroup__1getplane (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane* _cpp_result = new Ogre::Plane( _cpp_this->plane); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Plane Ogre::StaticFaceGroup::plane */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setplane()
 * Type:       setter for public attribute
 * Definition: Plane Ogre::StaticFaceGroup::plane
 * Signature:  (Ogre_Plane)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setplane (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Plane* _cpp__jni_value_ = reinterpret_cast< Ogre::Plane* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->plane = *_cpp__jni_value_;
} /* Plane Ogre::StaticFaceGroup::plane */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     getpatchSurf()
 * Type:       getter for public attribute
 * Definition: PatchSurface* Ogre::StaticFaceGroup::patchSurf
 * Signature:  ()Ogre_PatchSurface
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticFaceGroup__1getpatchSurf (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this = reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PatchSurface* _cpp_result = _cpp_this->patchSurf; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* PatchSurface* Ogre::StaticFaceGroup::patchSurf */


/*
 * Class:      org.ogre4j.StaticFaceGroup
 * Method:     setpatchSurf()
 * Type:       setter for public attribute
 * Definition: PatchSurface* Ogre::StaticFaceGroup::patchSurf
 * Signature:  (Ogre_PatchSurface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticFaceGroup__1setpatchSurf (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::PatchSurface* _cpp__jni_value_ = reinterpret_cast< Ogre::PatchSurface* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::StaticFaceGroup* _cpp_this =reinterpret_cast<Ogre::StaticFaceGroup*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->patchSurf = _cpp__jni_value_;
} /* PatchSurface* Ogre::StaticFaceGroup::patchSurf */
