///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_SceneQuery_00024WorldFragment.h"

// import header files of original library
#include <OgreSceneQuery.h>



/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     WorldFragment()
 * Type:       constructor
 * Definition: Ogre::SceneQuery::WorldFragment::WorldFragment
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1_1createWorldFragment (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::SceneQuery::WorldFragment 
   
   // parameter conversions 
   
   // create new instance of class Ogre::SceneQuery::WorldFragment 
   Ogre::SceneQuery::WorldFragment* _cpp_this = new Ogre::SceneQuery::WorldFragment(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::SceneQuery::WorldFragment::WorldFragment */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SceneQuery::WorldFragment::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::SceneQuery::WorldFragment 
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this = reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::SceneQuery::WorldFragment::__delete */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     getfragmentType()
 * Type:       getter for public attribute
 * Definition: WorldFragmentType Ogre::SceneQuery::WorldFragment::fragmentType
 * Signature:  ()Ogre_SceneQuery_WorldFragmentType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1getfragmentType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this = reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneQuery::WorldFragmentType _cpp_result = _cpp_this->fragmentType; 
   return _cpp_result;
} /* WorldFragmentType Ogre::SceneQuery::WorldFragment::fragmentType */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     setfragmentType()
 * Type:       setter for public attribute
 * Definition: WorldFragmentType Ogre::SceneQuery::WorldFragment::fragmentType
 * Signature:  (Ogre_SceneQuery_WorldFragmentType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1setfragmentType (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::SceneQuery::WorldFragmentType _cpp__jni_value_ = (Ogre::SceneQuery::WorldFragmentType)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this =reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->fragmentType = _cpp__jni_value_;
} /* WorldFragmentType Ogre::SceneQuery::WorldFragment::fragmentType */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     getsingleIntersection()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::SceneQuery::WorldFragment::singleIntersection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1getsingleIntersection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this = reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->singleIntersection); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::SceneQuery::WorldFragment::singleIntersection */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     setsingleIntersection()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::SceneQuery::WorldFragment::singleIntersection
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1setsingleIntersection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp__jni_value_ = reinterpret_cast< Ogre::Vector3* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this =reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->singleIntersection = *_cpp__jni_value_;
} /* Vector3 Ogre::SceneQuery::WorldFragment::singleIntersection */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     getplanes()
 * Type:       getter for public attribute
 * Definition: std::list<Plane>* Ogre::SceneQuery::WorldFragment::planes
 * Signature:  ()std_list__Plane__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1getplanes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this = reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   const std::list< Ogre::Plane >* _cpp_result = _cpp_this->planes; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* std::list<Plane>* Ogre::SceneQuery::WorldFragment::planes */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     setplanes()
 * Type:       setter for public attribute
 * Definition: std::list<Plane>* Ogre::SceneQuery::WorldFragment::planes
 * Signature:  (std_list__Plane__)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1setplanes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  std::list< Ogre::Plane >* _cpp__jni_value_ = reinterpret_cast< std::list< Ogre::Plane >* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this =reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->planes = _cpp__jni_value_;
} /* std::list<Plane>* Ogre::SceneQuery::WorldFragment::planes */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     getgeometry()
 * Type:       getter for public attribute
 * Definition: void* Ogre::SceneQuery::WorldFragment::geometry
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1getgeometry (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this = reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   void* _cpp_result = _cpp_this->geometry; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* void* Ogre::SceneQuery::WorldFragment::geometry */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     setgeometry()
 * Type:       setter for public attribute
 * Definition: void* Ogre::SceneQuery::WorldFragment::geometry
 * Signature:  (V)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1setgeometry (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  void* _cpp__jni_value_ = reinterpret_cast<void*>(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this =reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->geometry = _cpp__jni_value_;
} /* void* Ogre::SceneQuery::WorldFragment::geometry */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     getrenderOp()
 * Type:       getter for public attribute
 * Definition: RenderOperation* Ogre::SceneQuery::WorldFragment::renderOp
 * Signature:  ()Ogre_RenderOperation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1getrenderOp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this = reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderOperation* _cpp_result = _cpp_this->renderOp; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderOperation* Ogre::SceneQuery::WorldFragment::renderOp */


/*
 * Class:      org.ogre4j.SceneQuery.00024WorldFragment
 * Method:     setrenderOp()
 * Type:       setter for public attribute
 * Definition: RenderOperation* Ogre::SceneQuery::WorldFragment::renderOp
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneQuery_00024WorldFragment__1setrenderOp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp__jni_value_ = reinterpret_cast< Ogre::RenderOperation* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::SceneQuery::WorldFragment* _cpp_this =reinterpret_cast<Ogre::SceneQuery::WorldFragment*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->renderOp = _cpp__jni_value_;
} /* RenderOperation* Ogre::SceneQuery::WorldFragment::renderOp */
