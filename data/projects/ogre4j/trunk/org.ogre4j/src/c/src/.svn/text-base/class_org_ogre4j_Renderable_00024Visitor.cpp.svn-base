///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Renderable_00024Visitor.h"

// import header files of original library
#include <OgreRenderable.h>



/*
 * Class:      org.ogre4j.Renderable.00024Visitor
 * Method:     visit()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::Renderable::Visitor::visit
 * Signature:  (Ogre_Renderableunsigned_shortZOgre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Renderable_00024Visitor__1visit_1_1RenderablepushortvbvAnyp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rend, 
  jint lodIndex, 
  jboolean isDebug, 
  jlong pAny
)
{
   // parameter conversions 
  Ogre::Renderable* _cpp_rend = reinterpret_cast< Ogre::Renderable* >(rend);
  unsigned short _cpp_lodIndex = lodIndex;
  bool _cpp_isDebug = isDebug ? true : false;
  Ogre::Any* _cpp_pAny = reinterpret_cast< Ogre::Any* >(pAny); 
   
   // cast pointer to C++ object 
   Ogre::Renderable::Visitor* _cpp_this = reinterpret_cast<Ogre::Renderable::Visitor*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visit(_cpp_rend, _cpp_lodIndex, _cpp_isDebug, _cpp_pAny);
} /* virtual void Ogre::Renderable::Visitor::visit */


/*
 * Class:      org.ogre4j.Renderable.00024Visitor
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Renderable::Visitor::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Renderable_00024Visitor__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Renderable::Visitor 
   // cast pointer to C++ object 
   Ogre::Renderable::Visitor* _cpp_this = reinterpret_cast<Ogre::Renderable::Visitor*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Renderable::Visitor::__delete */
