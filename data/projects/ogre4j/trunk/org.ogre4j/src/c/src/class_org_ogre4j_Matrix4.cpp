///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Matrix4.h"

// import header files of original library
#include <OgreMatrix4.h>



/*
 * Class:      org.ogre4j.Matrix4
 * Method:     Matrix4()
 * Type:       constructor
 * Definition: Ogre::Matrix4::Matrix4
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1_1createMatrix4 (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Matrix4 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Matrix4 
   Ogre::Matrix4* _cpp_this = new Ogre::Matrix4(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Matrix4::Matrix4 */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     Matrix4()
 * Type:       constructor
 * Definition: Ogre::Matrix4::Matrix4
 * Signature:  (floatfloatfloatfloatfloatfloatfloatfloatfloatfloatfloatfloatfloatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1_1createMatrix4_1_1RealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat m00, 
  jfloat m01, 
  jfloat m02, 
  jfloat m03, 
  jfloat m10, 
  jfloat m11, 
  jfloat m12, 
  jfloat m13, 
  jfloat m20, 
  jfloat m21, 
  jfloat m22, 
  jfloat m23, 
  jfloat m30, 
  jfloat m31, 
  jfloat m32, 
  jfloat m33
)
{
   // constructor of class Ogre::Matrix4 
   
   // parameter conversions 
  float _cpp_m00 = m00;
  float _cpp_m01 = m01;
  float _cpp_m02 = m02;
  float _cpp_m03 = m03;
  float _cpp_m10 = m10;
  float _cpp_m11 = m11;
  float _cpp_m12 = m12;
  float _cpp_m13 = m13;
  float _cpp_m20 = m20;
  float _cpp_m21 = m21;
  float _cpp_m22 = m22;
  float _cpp_m23 = m23;
  float _cpp_m30 = m30;
  float _cpp_m31 = m31;
  float _cpp_m32 = m32;
  float _cpp_m33 = m33; 
   
   // create new instance of class Ogre::Matrix4 
   Ogre::Matrix4* _cpp_this = new Ogre::Matrix4(_cpp_m00, _cpp_m01, _cpp_m02, _cpp_m03, _cpp_m10, _cpp_m11, _cpp_m12, _cpp_m13, _cpp_m20, _cpp_m21, _cpp_m22, _cpp_m23, _cpp_m30, _cpp_m31, _cpp_m32, _cpp_m33); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Matrix4::Matrix4 */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     Matrix4()
 * Type:       constructor
 * Definition: Ogre::Matrix4::Matrix4
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1_1createMatrix4_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong m3x3
)
{
   // constructor of class Ogre::Matrix4 
   
   // parameter conversions 
  const Ogre::Matrix3* _cpp_m3x3 = reinterpret_cast< const Ogre::Matrix3* >(m3x3); 
   
   // create new instance of class Ogre::Matrix4 
   Ogre::Matrix4* _cpp_this = new Ogre::Matrix4(*_cpp_m3x3); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Matrix4::Matrix4 */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     Matrix4()
 * Type:       constructor
 * Definition: Ogre::Matrix4::Matrix4
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1_1createMatrix4_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rot
)
{
   // constructor of class Ogre::Matrix4 
   
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rot = reinterpret_cast< const Ogre::Quaternion* >(rot); 
   
   // create new instance of class Ogre::Matrix4 
   Ogre::Matrix4* _cpp_this = new Ogre::Matrix4(*_cpp_rot); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Matrix4::Matrix4 */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Matrix4::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorIndex_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iRow
)
{
   // parameter conversions 
  size_t _cpp_iRow = iRow; 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   float* _cpp_result = _cpp_this->operator[](_cpp_iRow) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Real* Ogre::Matrix4::operator[] */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator[]_const()
 * Type:       non-virtual method
 * Definition: const Real* const Ogre::Matrix4::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorIndex_1const_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iRow
)
{
   // parameter conversions 
  size_t _cpp_iRow = iRow; 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const float* _cpp_result = _cpp_this->operator[](_cpp_iRow) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Real* const Ogre::Matrix4::operator[] */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     concatenate()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::concatenate
 * Signature:  (Ogre_Matrix4)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1concatenate_1_1Matrix4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m2
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m2 = reinterpret_cast< const Ogre::Matrix4* >(m2); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->concatenate(*_cpp_m2) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::concatenate */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::operator *
 * Signature:  (Ogre_Matrix4)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorMultiplication_1_1Matrix4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m2
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m2 = reinterpret_cast< const Ogre::Matrix4* >(m2); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->operator *(*_cpp_m2) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::operator * */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Matrix4::operator *
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorMultiplication_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator *(*_cpp_v) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Matrix4::operator * */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Matrix4::operator *
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorMultiplication_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_v = reinterpret_cast< const Ogre::Vector4* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->operator *(*_cpp_v) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Matrix4::operator * */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Plane Ogre::Matrix4::operator *
 * Signature:  (Ogre_Plane)Ogre_Plane
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorMultiplication_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_p = reinterpret_cast< const Ogre::Plane* >(p); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane* _cpp_result = new Ogre::Plane( _cpp_this->operator *(*_cpp_p) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Plane Ogre::Matrix4::operator * */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::operator+
 * Signature:  (Ogre_Matrix4)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorAddition_1_1Matrix4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m2
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m2 = reinterpret_cast< const Ogre::Matrix4* >(m2); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->operator+(*_cpp_m2) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::operator+ */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::operator-
 * Signature:  (Ogre_Matrix4)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorSubtraction_1_1Matrix4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m2
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m2 = reinterpret_cast< const Ogre::Matrix4* >(m2); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->operator-(*_cpp_m2) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::operator- */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix4::operator==
 * Signature:  (Ogre_Matrix4)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix4__1operatorEqual_1_1Matrix4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m2
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m2 = reinterpret_cast< const Ogre::Matrix4* >(m2); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_m2) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix4::operator== */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix4::operator!=
 * Signature:  (Ogre_Matrix4)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix4__1operatorNotEqual_1_1Matrix4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m2
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m2 = reinterpret_cast< const Ogre::Matrix4* >(m2); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_m2) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix4::operator!= */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::operator=
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1operatorAssignment_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mat3
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_mat3 = reinterpret_cast< const Ogre::Matrix4* >(mat3); 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->operator=(*_cpp_mat3);
} /* void Ogre::Matrix4::operator= */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     transpose()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::transpose
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1transpose_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->transpose() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::transpose */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     setTrans()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::setTrans
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1setTrans_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTrans(*_cpp_v);
} /* void Ogre::Matrix4::setTrans */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getTrans()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Matrix4::getTrans
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getTrans_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->getTrans() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Matrix4::getTrans */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     makeTrans()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::makeTrans
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1makeTrans_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->makeTrans(*_cpp_v);
} /* void Ogre::Matrix4::makeTrans */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     makeTrans()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::makeTrans
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1makeTrans_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat tx, 
  jfloat ty, 
  jfloat tz
)
{
   // parameter conversions 
  float _cpp_tx = tx;
  float _cpp_ty = ty;
  float _cpp_tz = tz; 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->makeTrans(_cpp_tx, _cpp_ty, _cpp_tz);
} /* void Ogre::Matrix4::makeTrans */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     setScale()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::setScale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1setScale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setScale(*_cpp_v);
} /* void Ogre::Matrix4::setScale */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     extract3x3Matrix()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::extract3x3Matrix
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1extract3x3Matrix_1_1Matrix3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m3x3
)
{
   // parameter conversions 
  Ogre::Matrix3* _cpp_m3x3 = reinterpret_cast< Ogre::Matrix3* >(m3x3); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extract3x3Matrix(*_cpp_m3x3);
} /* void Ogre::Matrix4::extract3x3Matrix */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     hasScale()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix4::hasScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix4__1hasScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasScale() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix4::hasScale */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     hasNegativeScale()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix4::hasNegativeScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix4__1hasNegativeScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasNegativeScale() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix4::hasNegativeScale */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     extractQuaternion()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Matrix4::extractQuaternion
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1extractQuaternion_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->extractQuaternion() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Matrix4::extractQuaternion */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::operator *
 * Signature:  (float)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat scalar
)
{
   // parameter conversions 
  float _cpp_scalar = scalar; 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->operator *(_cpp_scalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::operator * */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     adjoint()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::adjoint
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1adjoint_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->adjoint() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::adjoint */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     determinant()
 * Type:       non-virtual method
 * Definition: Real Ogre::Matrix4::determinant
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Matrix4__1determinant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->determinant() ; 
   return _cpp_result;
} /* Real Ogre::Matrix4::determinant */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     inverse()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::inverse
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1inverse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->inverse() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::inverse */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     makeTransform()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::makeTransform
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1makeTransform_1_1Vector3RVector3RQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position, 
  jlong scale, 
  jlong orientation
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_position = reinterpret_cast< const Ogre::Vector3* >(position);
  const Ogre::Vector3* _cpp_scale = reinterpret_cast< const Ogre::Vector3* >(scale);
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation); 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->makeTransform(*_cpp_position, *_cpp_scale, *_cpp_orientation);
} /* void Ogre::Matrix4::makeTransform */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     makeInverseTransform()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix4::makeInverseTransform
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1makeInverseTransform_1_1Vector3RVector3RQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position, 
  jlong scale, 
  jlong orientation
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_position = reinterpret_cast< const Ogre::Vector3* >(position);
  const Ogre::Vector3* _cpp_scale = reinterpret_cast< const Ogre::Vector3* >(scale);
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation); 
   
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->makeInverseTransform(*_cpp_position, *_cpp_scale, *_cpp_orientation);
} /* void Ogre::Matrix4::makeInverseTransform */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     isAffine()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix4::isAffine
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix4__1isAffine_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAffine() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Matrix4::isAffine */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     inverseAffine()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::inverseAffine
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1inverseAffine_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->inverseAffine() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::inverseAffine */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     concatenateAffine()
 * Type:       non-virtual method
 * Definition: Matrix4 Ogre::Matrix4::concatenateAffine
 * Signature:  (Ogre_Matrix4)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1concatenateAffine_1_1Matrix4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m2
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_m2 = reinterpret_cast< const Ogre::Matrix4* >(m2); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( _cpp_this->concatenateAffine(*_cpp_m2) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Matrix4 Ogre::Matrix4::concatenateAffine */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     transformAffine()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Matrix4::transformAffine
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1transformAffine_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->transformAffine(*_cpp_v) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Matrix4::transformAffine */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     transformAffine()
 * Type:       non-virtual method
 * Definition: Vector4 Ogre::Matrix4::transformAffine
 * Signature:  (Ogre_Vector4)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1transformAffine_1_1Vector4R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_v = reinterpret_cast< const Ogre::Vector4* >(v); 
   
   // cast pointer to C++ object 
   const Ogre::Matrix4* _cpp_this = reinterpret_cast<const Ogre::Matrix4*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = new Ogre::Vector4( _cpp_this->transformAffine(*_cpp_v) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector4 Ogre::Matrix4::transformAffine */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getTrans()
 * Type:       static method
 * Definition: static Matrix4 Ogre::Matrix4::getTrans
 * Signature:  (Ogre_Vector3)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getTrans_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong v
)
{
   // static method of class Ogre::Matrix4 with return value 
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( Ogre::Matrix4::getTrans(*_cpp_v)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Matrix4 Ogre::Matrix4::getTrans */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getTrans()
 * Type:       static method
 * Definition: static Matrix4 Ogre::Matrix4::getTrans
 * Signature:  (floatfloatfloat)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getTrans_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat t_x, 
  jfloat t_y, 
  jfloat t_z
)
{
   // static method of class Ogre::Matrix4 with return value 
   // parameter conversions 
  float _cpp_t_x = t_x;
  float _cpp_t_y = t_y;
  float _cpp_t_z = t_z; 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( Ogre::Matrix4::getTrans(_cpp_t_x, _cpp_t_y, _cpp_t_z)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Matrix4 Ogre::Matrix4::getTrans */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getScale()
 * Type:       static method
 * Definition: static Matrix4 Ogre::Matrix4::getScale
 * Signature:  (Ogre_Vector3)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getScale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong v
)
{
   // static method of class Ogre::Matrix4 with return value 
   // parameter conversions 
  const Ogre::Vector3* _cpp_v = reinterpret_cast< const Ogre::Vector3* >(v); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( Ogre::Matrix4::getScale(*_cpp_v)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Matrix4 Ogre::Matrix4::getScale */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getScale()
 * Type:       static method
 * Definition: static Matrix4 Ogre::Matrix4::getScale
 * Signature:  (floatfloatfloat)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getScale_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat s_x, 
  jfloat s_y, 
  jfloat s_z
)
{
   // static method of class Ogre::Matrix4 with return value 
   // parameter conversions 
  float _cpp_s_x = s_x;
  float _cpp_s_y = s_y;
  float _cpp_s_z = s_z; 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = new Ogre::Matrix4( Ogre::Matrix4::getScale(_cpp_s_x, _cpp_s_y, _cpp_s_z)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Matrix4 Ogre::Matrix4::getScale */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Matrix4::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix4__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Matrix4 
   // cast pointer to C++ object 
   Ogre::Matrix4* _cpp_this = reinterpret_cast<Ogre::Matrix4*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Matrix4::__delete */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Matrix4 Ogre::Matrix4::ZERO
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & Ogre::Matrix4::ZERO ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix4 Ogre::Matrix4::ZERO */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getIDENTITY()
 * Type:       getter for public attribute
 * Definition: const Matrix4 Ogre::Matrix4::IDENTITY
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getIDENTITY (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & Ogre::Matrix4::IDENTITY ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix4 Ogre::Matrix4::IDENTITY */


/*
 * Class:      org.ogre4j.Matrix4
 * Method:     getCLIPSPACE2DTOIMAGESPACE()
 * Type:       getter for public attribute
 * Definition: const Matrix4 Ogre::Matrix4::CLIPSPACE2DTOIMAGESPACE
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix4__1getCLIPSPACE2DTOIMAGESPACE (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & Ogre::Matrix4::CLIPSPACE2DTOIMAGESPACE ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Matrix4 Ogre::Matrix4::CLIPSPACE2DTOIMAGESPACE */
