///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_VertexData.h"

// import header files of original library
#include <OgreVertexIndexData.h>



/*
 * Class:      org.ogre4j.VertexData
 * Method:     VertexData()
 * Type:       constructor
 * Definition: Ogre::VertexData::VertexData
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1_1createVertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::VertexData 
   
   // parameter conversions 
   
   // create new instance of class Ogre::VertexData 
   Ogre::VertexData* _cpp_this = new Ogre::VertexData(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::VertexData::VertexData */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::VertexData::clone
 * Signature:  (Z)Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1clone_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean copyData
)
{
   // parameter conversions 
  bool _cpp_copyData = copyData ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::VertexData* _cpp_this = reinterpret_cast<const Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->clone(_cpp_copyData) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexData* Ogre::VertexData::clone */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     prepareForShadowVolume()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::prepareForShadowVolume
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1prepareForShadowVolume (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->prepareForShadowVolume();
} /* void Ogre::VertexData::prepareForShadowVolume */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     reorganiseBuffers()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::reorganiseBuffers
 * Signature:  (Ogre_VertexDeclarationOgre_BufferUsageList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1reorganiseBuffers_1_1VertexDeclarationpBufferUsageListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newDeclaration, 
  jlong bufferUsage
)
{
   // parameter conversions 
  Ogre::VertexDeclaration* _cpp_newDeclaration = reinterpret_cast< Ogre::VertexDeclaration* >(newDeclaration);
  const Ogre::BufferUsageList* _cpp_bufferUsage = reinterpret_cast< const Ogre::BufferUsageList* >(bufferUsage); 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reorganiseBuffers(_cpp_newDeclaration, *_cpp_bufferUsage);
} /* void Ogre::VertexData::reorganiseBuffers */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     reorganiseBuffers()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::reorganiseBuffers
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1reorganiseBuffers_1_1VertexDeclarationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newDeclaration
)
{
   // parameter conversions 
  Ogre::VertexDeclaration* _cpp_newDeclaration = reinterpret_cast< Ogre::VertexDeclaration* >(newDeclaration); 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reorganiseBuffers(_cpp_newDeclaration);
} /* void Ogre::VertexData::reorganiseBuffers */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     closeGapsInBindings()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::closeGapsInBindings
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1closeGapsInBindings (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->closeGapsInBindings();
} /* void Ogre::VertexData::closeGapsInBindings */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     removeUnusedBuffers()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::removeUnusedBuffers
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1removeUnusedBuffers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeUnusedBuffers();
} /* void Ogre::VertexData::removeUnusedBuffers */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     convertPackedColour()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::convertPackedColour
 * Signature:  (Ogre_VertexElementTypeOgre_VertexElementType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1convertPackedColour_1_1VertexElementTypevVertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint srcType, 
  jint destType
)
{
   // parameter conversions 
  Ogre::VertexElementType _cpp_srcType = (Ogre::VertexElementType)srcType;
  Ogre::VertexElementType _cpp_destType = (Ogre::VertexElementType)destType; 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->convertPackedColour(_cpp_srcType, _cpp_destType);
} /* void Ogre::VertexData::convertPackedColour */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     allocateHardwareAnimationElements()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::allocateHardwareAnimationElements
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1allocateHardwareAnimationElements_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
)
{
   // parameter conversions 
  unsigned short _cpp_count = count; 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->allocateHardwareAnimationElements(_cpp_count);
} /* void Ogre::VertexData::allocateHardwareAnimationElements */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::VertexData::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::VertexData 
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::VertexData::__delete */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexDeclaration()
 * Type:       getter for public attribute
 * Definition: VertexDeclaration* Ogre::VertexData::vertexDeclaration
 * Signature:  ()Ogre_VertexDeclaration
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1getvertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexDeclaration* _cpp_result = _cpp_this->vertexDeclaration; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexDeclaration* Ogre::VertexData::vertexDeclaration */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexDeclaration()
 * Type:       setter for public attribute
 * Definition: VertexDeclaration* Ogre::VertexData::vertexDeclaration
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::VertexDeclaration* _cpp__jni_value_ = reinterpret_cast< Ogre::VertexDeclaration* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this =reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->vertexDeclaration = _cpp__jni_value_;
} /* VertexDeclaration* Ogre::VertexData::vertexDeclaration */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexBufferBinding()
 * Type:       getter for public attribute
 * Definition: VertexBufferBinding* Ogre::VertexData::vertexBufferBinding
 * Signature:  ()Ogre_VertexBufferBinding
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1getvertexBufferBinding (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexBufferBinding* _cpp_result = _cpp_this->vertexBufferBinding; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* VertexBufferBinding* Ogre::VertexData::vertexBufferBinding */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexBufferBinding()
 * Type:       setter for public attribute
 * Definition: VertexBufferBinding* Ogre::VertexData::vertexBufferBinding
 * Signature:  (Ogre_VertexBufferBinding)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexBufferBinding (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::VertexBufferBinding* _cpp__jni_value_ = reinterpret_cast< Ogre::VertexBufferBinding* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this =reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->vertexBufferBinding = _cpp__jni_value_;
} /* VertexBufferBinding* Ogre::VertexData::vertexBufferBinding */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexStart()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::VertexData::vertexStart
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexData__1getvertexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->vertexStart; 
   return _cpp_result;
} /* size_t Ogre::VertexData::vertexStart */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexStart()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::VertexData::vertexStart
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this =reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->vertexStart = _cpp__jni_value_;
} /* size_t Ogre::VertexData::vertexStart */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexCount()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::VertexData::vertexCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexData__1getvertexCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->vertexCount; 
   return _cpp_result;
} /* size_t Ogre::VertexData::vertexCount */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexCount()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::VertexData::vertexCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this =reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->vertexCount = _cpp__jni_value_;
} /* size_t Ogre::VertexData::vertexCount */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     gethwAnimationDataList()
 * Type:       getter for public attribute
 * Definition: HardwareAnimationDataList Ogre::VertexData::hwAnimationDataList
 * Signature:  ()Ogre_VertexData_HardwareAnimationDataList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1gethwAnimationDataList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData::HardwareAnimationDataList* _cpp_result = new Ogre::VertexData::HardwareAnimationDataList( _cpp_this->hwAnimationDataList); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* HardwareAnimationDataList Ogre::VertexData::hwAnimationDataList */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     sethwAnimationDataList()
 * Type:       setter for public attribute
 * Definition: HardwareAnimationDataList Ogre::VertexData::hwAnimationDataList
 * Signature:  (Ogre_VertexData_HardwareAnimationDataList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1sethwAnimationDataList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::VertexData::HardwareAnimationDataList* _cpp__jni_value_ = reinterpret_cast< Ogre::VertexData::HardwareAnimationDataList* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this =reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->hwAnimationDataList = *_cpp__jni_value_;
} /* HardwareAnimationDataList Ogre::VertexData::hwAnimationDataList */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     gethwAnimDataItemsUsed()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::VertexData::hwAnimDataItemsUsed
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexData__1gethwAnimDataItemsUsed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->hwAnimDataItemsUsed; 
   return _cpp_result;
} /* size_t Ogre::VertexData::hwAnimDataItemsUsed */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     sethwAnimDataItemsUsed()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::VertexData::hwAnimDataItemsUsed
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1sethwAnimDataItemsUsed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this =reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->hwAnimDataItemsUsed = _cpp__jni_value_;
} /* size_t Ogre::VertexData::hwAnimDataItemsUsed */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     gethardwareShadowVolWBuffer()
 * Type:       getter for public attribute
 * Definition: HardwareVertexBufferSharedPtr Ogre::VertexData::hardwareShadowVolWBuffer
 * Signature:  ()Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1gethardwareShadowVolWBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this = reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareVertexBufferSharedPtr* _cpp_result = new Ogre::HardwareVertexBufferSharedPtr( _cpp_this->hardwareShadowVolWBuffer); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* HardwareVertexBufferSharedPtr Ogre::VertexData::hardwareShadowVolWBuffer */


/*
 * Class:      org.ogre4j.VertexData
 * Method:     sethardwareShadowVolWBuffer()
 * Type:       setter for public attribute
 * Definition: HardwareVertexBufferSharedPtr Ogre::VertexData::hardwareShadowVolWBuffer
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1sethardwareShadowVolWBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::HardwareVertexBufferSharedPtr* _cpp__jni_value_ = reinterpret_cast< Ogre::HardwareVertexBufferSharedPtr* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::VertexData* _cpp_this =reinterpret_cast<Ogre::VertexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->hardwareShadowVolWBuffer = *_cpp__jni_value_;
} /* HardwareVertexBufferSharedPtr Ogre::VertexData::hardwareShadowVolWBuffer */
