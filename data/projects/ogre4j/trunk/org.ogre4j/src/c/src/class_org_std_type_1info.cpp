///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_std_type_1info.h"

// import header files of original library
#include <typeinfo>



/*
 * Class:      org.std.type.1info
 * Method:     before()
 * Type:       non-virtual method
 * Definition: bool std::type_info::before
 * Signature:  (std_type_info)Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_type_1info__1before_1_1type_1infoR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const std::type_info* _cpp_rhs = reinterpret_cast< const std::type_info* >(rhs); 
   
   // cast pointer to C++ object 
   const std::type_info* _cpp_this = reinterpret_cast<const std::type_info*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->before(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool std::type_info::before */


/*
 * Class:      org.std.type.1info
 * Method:     name()
 * Type:       non-virtual method
 * Definition: const char * std::type_info::name
 * Signature:  ()C
 */

JNIEXPORT jstring JNICALL Java_org_std_type_1info__1name_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const std::type_info* _cpp_this = reinterpret_cast<const std::type_info*>(_jni_pointer_); 
   
   // call library method 
   const char* _cpp_result = _cpp_this->name() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const char * std::type_info::name */


/*
 * Class:      org.std.type.1info
 * Method:     __delete()
 * Type:       destructor
 * Definition: std::type_info::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_std_type_1info__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class std::type_info 
   // cast pointer to C++ object 
   std::type_info* _cpp_this = reinterpret_cast<std::type_info*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* std::type_info::__delete */
