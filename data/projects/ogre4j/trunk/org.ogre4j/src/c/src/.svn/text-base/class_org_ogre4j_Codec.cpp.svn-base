///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Codec.h"

// import header files of original library
#include <OgreCodec.h>



/*
 * Class:      org.ogre4j.Codec
 * Method:     code()
 * Type:       pure virtual method
 * Definition: virtual DataStreamPtr Ogre::Codec::code
 * Signature:  (Ogre_MemoryDataStreamPtrOgre_Codec_CodecDataPtr)Ogre_DataStreamPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Codec__1code_1_1MemoryDataStreamPtrrCodecDataPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong input, 
  jlong pData
)
{
   // parameter conversions 
  Ogre::MemoryDataStreamPtr* _cpp_input = reinterpret_cast< Ogre::MemoryDataStreamPtr* >(input);
  Ogre::Codec::CodecDataPtr* _cpp_pData = reinterpret_cast< Ogre::Codec::CodecDataPtr* >(pData); 
   
   // cast pointer to C++ object 
   const Ogre::Codec* _cpp_this = reinterpret_cast<const Ogre::Codec*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::DataStreamPtr* _cpp_result = new Ogre::DataStreamPtr( _cpp_this->code(*_cpp_input, *_cpp_pData) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual DataStreamPtr Ogre::Codec::code */


/*
 * Class:      org.ogre4j.Codec
 * Method:     codeToFile()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::Codec::codeToFile
 * Signature:  (Ogre_MemoryDataStreamPtrstd_stringOgre_Codec_CodecDataPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Codec__1codeToFile_1_1MemoryDataStreamPtrrStringRCodecDataPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong input, 
  jstring outFileName, 
  jlong pData
)
{
   // parameter conversions 
  Ogre::MemoryDataStreamPtr* _cpp_input = reinterpret_cast< Ogre::MemoryDataStreamPtr* >(input);
  std::string _cpp_outFileName = ""; org::xbig::jni::to_stdstring(_jni_env_, outFileName, _cpp_outFileName); // calls c-tor only. Not operator= .;
  Ogre::Codec::CodecDataPtr* _cpp_pData = reinterpret_cast< Ogre::Codec::CodecDataPtr* >(pData); 
   
   // cast pointer to C++ object 
   const Ogre::Codec* _cpp_this = reinterpret_cast<const Ogre::Codec*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->codeToFile(*_cpp_input, _cpp_outFileName, *_cpp_pData);
} /* virtual void Ogre::Codec::codeToFile */


/*
 * Class:      org.ogre4j.Codec
 * Method:     decode()
 * Type:       pure virtual method
 * Definition: virtual DecodeResult Ogre::Codec::decode
 * Signature:  (Ogre_DataStreamPtr)Ogre_Codec_DecodeResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Codec__1decode_1_1DataStreamPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong input
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_input = reinterpret_cast< Ogre::DataStreamPtr* >(input); 
   
   // cast pointer to C++ object 
   const Ogre::Codec* _cpp_this = reinterpret_cast<const Ogre::Codec*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Codec::DecodeResult* _cpp_result = new Ogre::Codec::DecodeResult( _cpp_this->decode(*_cpp_input) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual DecodeResult Ogre::Codec::decode */


/*
 * Class:      org.ogre4j.Codec
 * Method:     getType()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::Codec::getType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Codec__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Codec* _cpp_this = reinterpret_cast<const Ogre::Codec*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::Codec::getType */


/*
 * Class:      org.ogre4j.Codec
 * Method:     getDataType()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::Codec::getDataType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Codec__1getDataType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Codec* _cpp_this = reinterpret_cast<const Ogre::Codec*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getDataType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::Codec::getDataType */


/*
 * Class:      org.ogre4j.Codec
 * Method:     magicNumberMatch()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Codec::magicNumberMatch
 * Signature:  (CI)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Codec__1magicNumberMatch_1_1cPiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring magicNumberPtr, 
  jint maxbytes
)
{
   // parameter conversions 
   std::string _cpp_magicNumberPtr_TMP; org::xbig::jni::to_stdstring(_jni_env_, magicNumberPtr, _cpp_magicNumberPtr_TMP); const char* _cpp_magicNumberPtr = _cpp_magicNumberPtr_TMP.c_str();
  size_t _cpp_maxbytes = maxbytes; 
   
   // cast pointer to C++ object 
   const Ogre::Codec* _cpp_this = reinterpret_cast<const Ogre::Codec*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->magicNumberMatch(_cpp_magicNumberPtr, _cpp_maxbytes) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Codec::magicNumberMatch */


/*
 * Class:      org.ogre4j.Codec
 * Method:     magicNumberToFileExt()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::Codec::magicNumberToFileExt
 * Signature:  (CI)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Codec__1magicNumberToFileExt_1_1cPiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring magicNumberPtr, 
  jint maxbytes
)
{
   // parameter conversions 
   std::string _cpp_magicNumberPtr_TMP; org::xbig::jni::to_stdstring(_jni_env_, magicNumberPtr, _cpp_magicNumberPtr_TMP); const char* _cpp_magicNumberPtr = _cpp_magicNumberPtr_TMP.c_str();
  size_t _cpp_maxbytes = maxbytes; 
   
   // cast pointer to C++ object 
   const Ogre::Codec* _cpp_this = reinterpret_cast<const Ogre::Codec*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->magicNumberToFileExt(_cpp_magicNumberPtr, _cpp_maxbytes) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::Codec::magicNumberToFileExt */


/*
 * Class:      org.ogre4j.Codec
 * Method:     registerCodec()
 * Type:       static method
 * Definition: static void Ogre::Codec::registerCodec
 * Signature:  (Ogre_Codec)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Codec__1registerCodec_1_1Codecp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong pCodec
)
{
   // static method of class Ogre::Codec without return value 
   // parameter conversions 
  Ogre::Codec* _cpp_pCodec = reinterpret_cast< Ogre::Codec* >(pCodec); 
   
   // call library method 
   Ogre::Codec::registerCodec(_cpp_pCodec);
} /* static void Ogre::Codec::registerCodec */


/*
 * Class:      org.ogre4j.Codec
 * Method:     unRegisterCodec()
 * Type:       static method
 * Definition: static void Ogre::Codec::unRegisterCodec
 * Signature:  (Ogre_Codec)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Codec__1unRegisterCodec_1_1Codecp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong pCodec
)
{
   // static method of class Ogre::Codec without return value 
   // parameter conversions 
  Ogre::Codec* _cpp_pCodec = reinterpret_cast< Ogre::Codec* >(pCodec); 
   
   // call library method 
   Ogre::Codec::unRegisterCodec(_cpp_pCodec);
} /* static void Ogre::Codec::unRegisterCodec */


/*
 * Class:      org.ogre4j.Codec
 * Method:     getCodecIterator()
 * Type:       static method
 * Definition: static CodecIterator Ogre::Codec::getCodecIterator
 * Signature:  ()Ogre_Codec_CodecIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Codec__1getCodecIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Codec with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Codec::CodecIterator* _cpp_result = new Ogre::Codec::CodecIterator( Ogre::Codec::getCodecIterator()); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static CodecIterator Ogre::Codec::getCodecIterator */


/*
 * Class:      org.ogre4j.Codec
 * Method:     getExtensions()
 * Type:       static method
 * Definition: static StringVector Ogre::Codec::getExtensions
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Codec__1getExtensions (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Codec with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = new Ogre::StringVector( Ogre::Codec::getExtensions()); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static StringVector Ogre::Codec::getExtensions */


/*
 * Class:      org.ogre4j.Codec
 * Method:     getCodec()
 * Type:       static method
 * Definition: static Codec* Ogre::Codec::getCodec
 * Signature:  (std_string)Ogre_Codec
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Codec__1getCodec_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring extension
)
{
   // static method of class Ogre::Codec with return value 
   // parameter conversions 
  std::string _cpp_extension = ""; org::xbig::jni::to_stdstring(_jni_env_, extension, _cpp_extension); // calls c-tor only. Not operator= .; 
   
   // call library method 
   const Ogre::Codec* _cpp_result = Ogre::Codec::getCodec(_cpp_extension); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Codec* Ogre::Codec::getCodec */


/*
 * Class:      org.ogre4j.Codec
 * Method:     getCodec()
 * Type:       static method
 * Definition: static Codec* Ogre::Codec::getCodec
 * Signature:  (CI)Ogre_Codec
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Codec__1getCodec_1_1cpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong magicNumberPtr, 
  jint maxbytes
)
{
   // static method of class Ogre::Codec with return value 
   // parameter conversions 
  char* _cpp_magicNumberPtr = reinterpret_cast<char*>(magicNumberPtr);
  size_t _cpp_maxbytes = maxbytes; 
   
   // call library method 
   const Ogre::Codec* _cpp_result = Ogre::Codec::getCodec(_cpp_magicNumberPtr, _cpp_maxbytes); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Codec* Ogre::Codec::getCodec */


/*
 * Class:      org.ogre4j.Codec
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Codec::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Codec__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Codec 
   // cast pointer to C++ object 
   Ogre::Codec* _cpp_this = reinterpret_cast<Ogre::Codec*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Codec::__delete */
