///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ExternalTextureSource.h"

// import header files of original library
#include <OgreExternalTextureSource.h>



/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     setInputName()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSource::setInputName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1setInputName_1_1Stringv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sIN
)
{
   // parameter conversions 
  std::string _cpp_sIN = ""; org::xbig::jni::to_stdstring(_jni_env_, sIN, _cpp_sIN); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setInputName(_cpp_sIN);
} /* void Ogre::ExternalTextureSource::setInputName */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getInputName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ExternalTextureSource::getInputName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ExternalTextureSource__1getInputName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getInputName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ExternalTextureSource::getInputName */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     setFPS()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSource::setFPS
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1setFPS_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iFPS
)
{
   // parameter conversions 
  int _cpp_iFPS = iFPS; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFPS(_cpp_iFPS);
} /* void Ogre::ExternalTextureSource::setFPS */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getFPS()
 * Type:       non-virtual method
 * Definition: const int Ogre::ExternalTextureSource::getFPS
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ExternalTextureSource__1getFPS_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getFPS() ; 
   return _cpp_result;
} /* const int Ogre::ExternalTextureSource::getFPS */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     setPlayMode()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSource::setPlayMode
 * Signature:  (Ogre_eTexturePlayMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1setPlayMode_1_1eTexturePlayModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint eMode
)
{
   // parameter conversions 
  Ogre::eTexturePlayMode _cpp_eMode = (Ogre::eTexturePlayMode)eMode; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPlayMode(_cpp_eMode);
} /* void Ogre::ExternalTextureSource::setPlayMode */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getPlayMode()
 * Type:       non-virtual method
 * Definition: eTexturePlayMode Ogre::ExternalTextureSource::getPlayMode
 * Signature:  ()Ogre_eTexturePlayMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_ExternalTextureSource__1getPlayMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::eTexturePlayMode _cpp_result = _cpp_this->getPlayMode() ; 
   return _cpp_result;
} /* eTexturePlayMode Ogre::ExternalTextureSource::getPlayMode */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     setTextureTecPassStateLevel()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSource::setTextureTecPassStateLevel
 * Signature:  (III)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1setTextureTecPassStateLevel_1_1iviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint t, 
  jint p, 
  jint s
)
{
   // parameter conversions 
  int _cpp_t = t;
  int _cpp_p = p;
  int _cpp_s = s; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTextureTecPassStateLevel(_cpp_t, _cpp_p, _cpp_s);
} /* void Ogre::ExternalTextureSource::setTextureTecPassStateLevel */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getTextureTecPassStateLevel()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSource::getTextureTecPassStateLevel
 * Signature:  (III)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1getTextureTecPassStateLevel_1_1iririr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong t, 
  jlong p, 
  jlong s
)
{
   // parameter conversions 
  int* _cpp_t = reinterpret_cast<int*>(t);
  int* _cpp_p = reinterpret_cast<int*>(p);
  int* _cpp_s = reinterpret_cast<int*>(s); 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getTextureTecPassStateLevel(*_cpp_t, *_cpp_p, *_cpp_s);
} /* void Ogre::ExternalTextureSource::getTextureTecPassStateLevel */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     addBaseParams()
 * Type:       non-virtual method
 * Definition: void Ogre::ExternalTextureSource::addBaseParams
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1addBaseParams (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addBaseParams();
} /* void Ogre::ExternalTextureSource::addBaseParams */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getPlugInStringName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ExternalTextureSource::getPlugInStringName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ExternalTextureSource__1getPlugInStringName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getPlugInStringName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ExternalTextureSource::getPlugInStringName */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getDictionaryStringName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ExternalTextureSource::getDictionaryStringName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ExternalTextureSource__1getDictionaryStringName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getDictionaryStringName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ExternalTextureSource::getDictionaryStringName */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     initialise()
 * Type:       pure virtual method
 * Definition: virtual bool Ogre::ExternalTextureSource::initialise
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ExternalTextureSource__1initialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->initialise() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ExternalTextureSource::initialise */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     shutDown()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ExternalTextureSource::shutDown
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1shutDown (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shutDown();
} /* virtual void Ogre::ExternalTextureSource::shutDown */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     createDefinedTexture()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ExternalTextureSource::createDefinedTexture
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1createDefinedTexture_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sMaterialName, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_sMaterialName = ""; org::xbig::jni::to_stdstring(_jni_env_, sMaterialName, _cpp_sMaterialName); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->createDefinedTexture(_cpp_sMaterialName, _cpp_groupName);
} /* virtual void Ogre::ExternalTextureSource::createDefinedTexture */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     destroyAdvancedTexture()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ExternalTextureSource::destroyAdvancedTexture
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1destroyAdvancedTexture_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sTextureName, 
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_sTextureName = ""; org::xbig::jni::to_stdstring(_jni_env_, sTextureName, _cpp_sTextureName); // calls c-tor only. Not operator= .;
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroyAdvancedTexture(_cpp_sTextureName, _cpp_groupName);
} /* virtual void Ogre::ExternalTextureSource::destroyAdvancedTexture */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSource__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSource__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParamDictionary* _cpp_result = _cpp_this->getParamDictionary() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParamDictionary* Ogre::StringInterface::getParamDictionary */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ExternalTextureSource__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ParameterList* _cpp_result = & _cpp_this->getParameters() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ParameterList& Ogre::StringInterface::getParameters */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ExternalTextureSource__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_value = ""; org::xbig::jni::to_stdstring(_jni_env_, value, _cpp_value); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->setParameter(_cpp_name, _cpp_value) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StringInterface::setParameter */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
)
{
   // parameter conversions 
  const Ogre::NameValuePairList* _cpp_paramList = reinterpret_cast< const Ogre::NameValuePairList* >(paramList); 
   
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setParameterList(*_cpp_paramList);
} /* virtual void Ogre::StringInterface::setParameterList */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ExternalTextureSource__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->getParameter(_cpp_name) ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual String Ogre::StringInterface::getParameter */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
)
{
   // parameter conversions 
  Ogre::StringInterface* _cpp_dest = reinterpret_cast< Ogre::StringInterface* >(dest); 
   
   // cast pointer to C++ object 
   const Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<const Ogre::ExternalTextureSource*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->copyParametersTo(_cpp_dest);
} /* virtual void Ogre::StringInterface::copyParametersTo */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ExternalTextureSource without return value 
   // parameter conversions 
   
   // call library method 
   Ogre::ExternalTextureSource::cleanupDictionary();
} /* static void Ogre::StringInterface::cleanupDictionary */


/*
 * Class:      org.ogre4j.ExternalTextureSource
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ExternalTextureSource::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ExternalTextureSource__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ExternalTextureSource 
   // cast pointer to C++ object 
   Ogre::ExternalTextureSource* _cpp_this = reinterpret_cast<Ogre::ExternalTextureSource*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ExternalTextureSource::__delete */
