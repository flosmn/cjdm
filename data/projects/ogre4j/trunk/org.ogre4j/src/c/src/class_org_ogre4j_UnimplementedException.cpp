///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_UnimplementedException.h"

// import header files of original library
#include <OgreException.h>



/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     UnimplementedException()
 * Type:       constructor
 * Definition: Ogre::UnimplementedException::UnimplementedException
 * Signature:  (Istd_stringstd_stringCJ)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnimplementedException__1_1createUnimplementedException_1_1ivStringRStringRcPlv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint number, 
  jstring description, 
  jstring source, 
  jstring file, 
  jlong line
)
{
   // constructor of class Ogre::UnimplementedException 
   
   // parameter conversions 
  int _cpp_number = number;
  std::string _cpp_description = ""; org::xbig::jni::to_stdstring(_jni_env_, description, _cpp_description); // calls c-tor only. Not operator= .;
  std::string _cpp_source = ""; org::xbig::jni::to_stdstring(_jni_env_, source, _cpp_source); // calls c-tor only. Not operator= .;
   std::string _cpp_file_TMP; org::xbig::jni::to_stdstring(_jni_env_, file, _cpp_file_TMP); const char* _cpp_file = _cpp_file_TMP.c_str();
  long _cpp_line = line; 
   
   // create new instance of class Ogre::UnimplementedException 
   Ogre::UnimplementedException* _cpp_this = new Ogre::UnimplementedException(_cpp_number, _cpp_description, _cpp_source, _cpp_file, _cpp_line); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::UnimplementedException::UnimplementedException */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: void Ogre::Exception::operator=
 * Signature:  (Ogre_Exception)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnimplementedException__1operatorAssignment_1_1ExceptionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::UnimplementedException* _cpp_rhs = reinterpret_cast< const Ogre::UnimplementedException* >(rhs); 
   
   // cast pointer to C++ object 
   Ogre::UnimplementedException* _cpp_this = reinterpret_cast<Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->operator=(*_cpp_rhs);
} /* void Ogre::Exception::operator= */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     getFullDescription()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Exception::getFullDescription
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnimplementedException__1getFullDescription_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnimplementedException* _cpp_this = reinterpret_cast<const Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getFullDescription() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Exception::getFullDescription */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     getNumber()
 * Type:       virtual method
 * Definition: virtual int Ogre::Exception::getNumber
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_UnimplementedException__1getNumber_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnimplementedException* _cpp_this = reinterpret_cast<const Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   const int _cpp_result = _cpp_this->getNumber() ; 
   return _cpp_result;
} /* virtual int Ogre::Exception::getNumber */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     getSource()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Exception::getSource
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnimplementedException__1getSource_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnimplementedException* _cpp_this = reinterpret_cast<const Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getSource() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Exception::getSource */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     getFile()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Exception::getFile
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnimplementedException__1getFile_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnimplementedException* _cpp_this = reinterpret_cast<const Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getFile() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Exception::getFile */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     getLine()
 * Type:       virtual method
 * Definition: virtual long Ogre::Exception::getLine
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_UnimplementedException__1getLine_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnimplementedException* _cpp_this = reinterpret_cast<const Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   const long _cpp_result = _cpp_this->getLine() ; 
   return _cpp_result;
} /* virtual long Ogre::Exception::getLine */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     getDescription()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Exception::getDescription
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnimplementedException__1getDescription_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnimplementedException* _cpp_this = reinterpret_cast<const Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getDescription() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::Exception::getDescription */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     what()
 * Type:       non-virtual method
 * Definition: const char* Ogre::Exception::what
 * Signature:  ()C
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_UnimplementedException__1what_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::UnimplementedException* _cpp_this = reinterpret_cast<const Ogre::UnimplementedException*>(_jni_pointer_); 
   
   // call library method 
   const char* _cpp_result = _cpp_this->what() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const char* Ogre::Exception::what */


/*
 * Class:      org.ogre4j.UnimplementedException
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::UnimplementedException::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_UnimplementedException__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::UnimplementedException 
   // cast pointer to C++ object 
   Ogre::UnimplementedException* _cpp_this = reinterpret_cast<Ogre::UnimplementedException*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::UnimplementedException::__delete */
