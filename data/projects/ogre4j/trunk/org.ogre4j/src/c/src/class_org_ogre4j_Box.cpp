///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Box.h"

// import header files of original library
#include <OgreCommon.h>



/*
 * Class:      org.ogre4j.Box
 * Method:     Box()
 * Type:       constructor
 * Definition: Ogre::Box::Box
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Box__1_1createBox (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Box 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Box 
   Ogre::Box* _cpp_this = new Ogre::Box(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Box::Box */


/*
 * Class:      org.ogre4j.Box
 * Method:     Box()
 * Type:       constructor
 * Definition: Ogre::Box::Box
 * Signature:  (IIII)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Box__1_1createBox_1_1iviviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint l, 
  jint t, 
  jint r, 
  jint b
)
{
   // constructor of class Ogre::Box 
   
   // parameter conversions 
  size_t _cpp_l = l;
  size_t _cpp_t = t;
  size_t _cpp_r = r;
  size_t _cpp_b = b; 
   
   // create new instance of class Ogre::Box 
   Ogre::Box* _cpp_this = new Ogre::Box(_cpp_l, _cpp_t, _cpp_r, _cpp_b); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Box::Box */


/*
 * Class:      org.ogre4j.Box
 * Method:     Box()
 * Type:       constructor
 * Definition: Ogre::Box::Box
 * Signature:  (IIIIII)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Box__1_1createBox_1_1iviviviviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint l, 
  jint t, 
  jint ff, 
  jint r, 
  jint b, 
  jint bb
)
{
   // constructor of class Ogre::Box 
   
   // parameter conversions 
  size_t _cpp_l = l;
  size_t _cpp_t = t;
  size_t _cpp_ff = ff;
  size_t _cpp_r = r;
  size_t _cpp_b = b;
  size_t _cpp_bb = bb; 
   
   // create new instance of class Ogre::Box 
   Ogre::Box* _cpp_this = new Ogre::Box(_cpp_l, _cpp_t, _cpp_ff, _cpp_r, _cpp_b, _cpp_bb); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Box::Box */


/*
 * Class:      org.ogre4j.Box
 * Method:     contains()
 * Type:       non-virtual method
 * Definition: bool Ogre::Box::contains
 * Signature:  (Ogre_Box)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Box__1contains_1_1BoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong def
)
{
   // parameter conversions 
  const Ogre::Box* _cpp_def = reinterpret_cast< const Ogre::Box* >(def); 
   
   // cast pointer to C++ object 
   const Ogre::Box* _cpp_this = reinterpret_cast<const Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->contains(*_cpp_def) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Box::contains */


/*
 * Class:      org.ogre4j.Box
 * Method:     getWidth()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Box::getWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Box* _cpp_this = reinterpret_cast<const Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getWidth() ; 
   return _cpp_result;
} /* size_t Ogre::Box::getWidth */


/*
 * Class:      org.ogre4j.Box
 * Method:     getHeight()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Box::getHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Box* _cpp_this = reinterpret_cast<const Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getHeight() ; 
   return _cpp_result;
} /* size_t Ogre::Box::getHeight */


/*
 * Class:      org.ogre4j.Box
 * Method:     getDepth()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Box::getDepth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Box* _cpp_this = reinterpret_cast<const Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getDepth() ; 
   return _cpp_result;
} /* size_t Ogre::Box::getDepth */


/*
 * Class:      org.ogre4j.Box
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Box::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Box__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Box 
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this = reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Box::__delete */


/*
 * Class:      org.ogre4j.Box
 * Method:     getleft()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::Box::left
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getleft (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this = reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->left; 
   return _cpp_result;
} /* size_t Ogre::Box::left */


/*
 * Class:      org.ogre4j.Box
 * Method:     setleft()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::Box::left
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Box__1setleft (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this =reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->left = _cpp__jni_value_;
} /* size_t Ogre::Box::left */


/*
 * Class:      org.ogre4j.Box
 * Method:     gettop()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::Box::top
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1gettop (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this = reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->top; 
   return _cpp_result;
} /* size_t Ogre::Box::top */


/*
 * Class:      org.ogre4j.Box
 * Method:     settop()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::Box::top
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Box__1settop (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this =reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->top = _cpp__jni_value_;
} /* size_t Ogre::Box::top */


/*
 * Class:      org.ogre4j.Box
 * Method:     getright()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::Box::right
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getright (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this = reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->right; 
   return _cpp_result;
} /* size_t Ogre::Box::right */


/*
 * Class:      org.ogre4j.Box
 * Method:     setright()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::Box::right
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Box__1setright (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this =reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->right = _cpp__jni_value_;
} /* size_t Ogre::Box::right */


/*
 * Class:      org.ogre4j.Box
 * Method:     getbottom()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::Box::bottom
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getbottom (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this = reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->bottom; 
   return _cpp_result;
} /* size_t Ogre::Box::bottom */


/*
 * Class:      org.ogre4j.Box
 * Method:     setbottom()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::Box::bottom
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Box__1setbottom (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this =reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->bottom = _cpp__jni_value_;
} /* size_t Ogre::Box::bottom */


/*
 * Class:      org.ogre4j.Box
 * Method:     getfront()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::Box::front
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getfront (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this = reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->front; 
   return _cpp_result;
} /* size_t Ogre::Box::front */


/*
 * Class:      org.ogre4j.Box
 * Method:     setfront()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::Box::front
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Box__1setfront (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this =reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->front = _cpp__jni_value_;
} /* size_t Ogre::Box::front */


/*
 * Class:      org.ogre4j.Box
 * Method:     getback()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::Box::back
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Box__1getback (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this = reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->back; 
   return _cpp_result;
} /* size_t Ogre::Box::back */


/*
 * Class:      org.ogre4j.Box
 * Method:     setback()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::Box::back
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Box__1setback (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Box* _cpp_this =reinterpret_cast<Ogre::Box*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->back = _cpp__jni_value_;
} /* size_t Ogre::Box::back */
