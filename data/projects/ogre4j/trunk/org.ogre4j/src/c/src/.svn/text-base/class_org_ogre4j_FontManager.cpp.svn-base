///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_FontManager.h"

// import header files of original library
#include <OgreFontManager.h>



/*
 * Class:      org.ogre4j.FontManager
 * Method:     FontManager()
 * Type:       constructor
 * Definition: Ogre::FontManager::FontManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1_1createFontManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::FontManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::FontManager 
   Ogre::FontManager* _cpp_this = new Ogre::FontManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::FontManager::FontManager */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     parseScript()
 * Type:       virtual method
 * Definition: void Ogre::FontManager::parseScript
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1parseScript_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring groupName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parseScript(*_cpp_stream, _cpp_groupName);
} /* void Ogre::FontManager::parseScript */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static FontManager& Ogre::FontManager::getSingleton
 * Signature:  ()Ogre_FontManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::FontManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::FontManager* _cpp_result = & Ogre::FontManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static FontManager& Ogre::FontManager::getSingleton */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static FontManager* Ogre::FontManager::getSingletonPtr
 * Signature:  ()Ogre_FontManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::FontManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::FontManager* _cpp_result = Ogre::FontManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static FontManager* Ogre::FontManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     create()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::create
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1create_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong createParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_createParams = reinterpret_cast< const Ogre::NameValuePairList* >(createParams); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->create(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_createParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::create */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     createOrRetrieve()
 * Type:       virtual method
 * Definition: virtual ResourceCreateOrRetrieveResult Ogre::ResourceManager::createOrRetrieve
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourceManager_ResourceCreateOrRetrieveResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1createOrRetrieve_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong createParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_createParams = reinterpret_cast< const Ogre::NameValuePairList* >(createParams); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_result = new Ogre::ResourceManager::ResourceCreateOrRetrieveResult( _cpp_this->createOrRetrieve(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_createParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceCreateOrRetrieveResult Ogre::ResourceManager::createOrRetrieve */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     setMemoryBudget()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::setMemoryBudget
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1setMemoryBudget_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bytes
)
{
   // parameter conversions 
  size_t _cpp_bytes = bytes; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMemoryBudget(_cpp_bytes);
} /* virtual void Ogre::ResourceManager::setMemoryBudget */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getMemoryBudget()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::ResourceManager::getMemoryBudget
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_FontManager__1getMemoryBudget_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FontManager* _cpp_this = reinterpret_cast<const Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getMemoryBudget() ; 
   return _cpp_result;
} /* virtual size_t Ogre::ResourceManager::getMemoryBudget */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getMemoryUsage()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::ResourceManager::getMemoryUsage
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_FontManager__1getMemoryUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FontManager* _cpp_this = reinterpret_cast<const Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getMemoryUsage() ; 
   return _cpp_result;
} /* virtual size_t Ogre::ResourceManager::getMemoryUsage */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unload
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1unload_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::unload(_cpp_name);
} /* virtual void Ogre::ResourceManager::unload */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unload
 * Signature:  (unsigned_long)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1unload_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::unload(_cpp_handle);
} /* virtual void Ogre::ResourceManager::unload */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     unloadAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unloadAll
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1unloadAll_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadAll(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::unloadAll */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     reloadAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::reloadAll
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1reloadAll_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reloadAll(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::reloadAll */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     unloadUnreferencedResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unloadUnreferencedResources
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1unloadUnreferencedResources_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadUnreferencedResources(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::unloadUnreferencedResources */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     reloadUnreferencedResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::reloadUnreferencedResources
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1reloadUnreferencedResources_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reloadUnreferencedResources(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::reloadUnreferencedResources */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1remove_1_1ResourcePtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  Ogre::ResourcePtr* _cpp_r = reinterpret_cast< Ogre::ResourcePtr* >(r); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(*_cpp_r);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1remove_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(_cpp_name);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (unsigned_long)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1remove_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(_cpp_handle);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     removeAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::removeAll
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1removeAll (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAll();
} /* virtual void Ogre::ResourceManager::removeAll */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getByName()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::getByName
 * Signature:  (std_string)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1getByName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->getByName(_cpp_name) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::getByName */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getByHandle()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::getByHandle
 * Signature:  (unsigned_long)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1getByHandle_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->getByHandle(_cpp_handle) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::getByHandle */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     resourceExists()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::resourceExists
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_FontManager__1resourceExists_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Ogre::ResourceManager::resourceExists(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::resourceExists */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     resourceExists()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::resourceExists
 * Signature:  (unsigned_long)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_FontManager__1resourceExists_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Ogre::ResourceManager::resourceExists(_cpp_handle) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::resourceExists */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     _notifyResourceTouched()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceTouched
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1_1notifyResourceTouched_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceTouched(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceTouched */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     _notifyResourceLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceLoaded
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1_1notifyResourceLoaded_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceLoaded(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceLoaded */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     _notifyResourceUnloaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceUnloaded
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1_1notifyResourceUnloaded_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceUnloaded(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceUnloaded */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::prepare
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1prepare_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_loadParams = reinterpret_cast< const Ogre::NameValuePairList* >(loadParams); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->prepare(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_loadParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::prepare */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::load
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1load_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_loadParams = reinterpret_cast< const Ogre::NameValuePairList* >(loadParams); 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->load(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_loadParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::load */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getScriptPatterns()
 * Type:       virtual method
 * Definition: virtual const StringVector& Ogre::ResourceManager::getScriptPatterns
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1getScriptPatterns_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FontManager* _cpp_this = reinterpret_cast<const Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getScriptPatterns() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const StringVector& Ogre::ResourceManager::getScriptPatterns */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getLoadingOrder()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ResourceManager::getLoadingOrder
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_FontManager__1getLoadingOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FontManager* _cpp_this = reinterpret_cast<const Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLoadingOrder() ; 
   return _cpp_result;
} /* virtual Real Ogre::ResourceManager::getLoadingOrder */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getResourceType()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ResourceManager::getResourceType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_FontManager__1getResourceType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FontManager* _cpp_this = reinterpret_cast<const Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getResourceType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ResourceManager::getResourceType */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     setVerbose()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::setVerbose
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1setVerbose_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean v
)
{
   // parameter conversions 
  bool _cpp_v = v ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVerbose(_cpp_v);
} /* virtual void Ogre::ResourceManager::setVerbose */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getVerbose()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::getVerbose
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_FontManager__1getVerbose (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVerbose() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::getVerbose */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     getResourceIterator()
 * Type:       non-virtual method
 * Definition: ResourceMapIterator Ogre::ResourceManager::getResourceIterator
 * Signature:  ()Ogre_ResourceManager_ResourceMapIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FontManager__1getResourceIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceMapIterator* _cpp_result = new Ogre::ResourceManager::ResourceMapIterator( _cpp_this->getResourceIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceMapIterator Ogre::ResourceManager::getResourceIterator */


/*
 * Class:      org.ogre4j.FontManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::FontManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FontManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::FontManager 
   // cast pointer to C++ object 
   Ogre::FontManager* _cpp_this = reinterpret_cast<Ogre::FontManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::FontManager::__delete */
