///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_RenderQueueInvocationSequence.h"

// import header files of original library
#include <OgreRenderQueueInvocation.h>



/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     RenderQueueInvocationSequence()
 * Type:       constructor
 * Definition: Ogre::RenderQueueInvocationSequence::RenderQueueInvocationSequence
 * Signature:  (std_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1_1createRenderQueueInvocationSequence_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name
)
{
   // constructor of class Ogre::RenderQueueInvocationSequence 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::RenderQueueInvocationSequence 
   Ogre::RenderQueueInvocationSequence* _cpp_this = new Ogre::RenderQueueInvocationSequence(_cpp_name); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::RenderQueueInvocationSequence::RenderQueueInvocationSequence */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::RenderQueueInvocationSequence::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<const Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::RenderQueueInvocationSequence::getName */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     add()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocation* Ogre::RenderQueueInvocationSequence::add
 * Signature:  (unsigned_charstd_string)Ogre_RenderQueueInvocation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1add_1_1uint8vStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort renderQueueGroupID, 
  jstring invocationName
)
{
   // parameter conversions 
  unsigned char _cpp_renderQueueGroupID = renderQueueGroupID;
  std::string _cpp_invocationName = ""; org::xbig::jni::to_stdstring(_jni_env_, invocationName, _cpp_invocationName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueueInvocation* _cpp_result = _cpp_this->add(_cpp_renderQueueGroupID, _cpp_invocationName) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderQueueInvocation* Ogre::RenderQueueInvocationSequence::add */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     add()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueueInvocationSequence::add
 * Signature:  (Ogre_RenderQueueInvocation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1add_1_1RenderQueueInvocationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong i
)
{
   // parameter conversions 
  Ogre::RenderQueueInvocation* _cpp_i = reinterpret_cast< Ogre::RenderQueueInvocation* >(i); 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->add(_cpp_i);
} /* void Ogre::RenderQueueInvocationSequence::add */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     size()
 * Type:       non-virtual method
 * Definition: size_t Ogre::RenderQueueInvocationSequence::size
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1size_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<const Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->size() ; 
   return _cpp_result;
} /* size_t Ogre::RenderQueueInvocationSequence::size */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueueInvocationSequence::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void Ogre::RenderQueueInvocationSequence::clear */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     get()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocation* Ogre::RenderQueueInvocationSequence::get
 * Signature:  (I)Ogre_RenderQueueInvocation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1get_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueueInvocation* _cpp_result = _cpp_this->get(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderQueueInvocation* Ogre::RenderQueueInvocationSequence::get */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     remove()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderQueueInvocationSequence::remove
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1remove_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->remove(_cpp_index);
} /* void Ogre::RenderQueueInvocationSequence::remove */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     iterator()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocationIterator Ogre::RenderQueueInvocationSequence::iterator
 * Signature:  ()Ogre_RenderQueueInvocationIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1iterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::RenderQueueInvocationIterator* _cpp_result = new Ogre::RenderQueueInvocationIterator( _cpp_this->iterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RenderQueueInvocationIterator Ogre::RenderQueueInvocationSequence::iterator */


/*
 * Class:      org.ogre4j.RenderQueueInvocationSequence
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderQueueInvocationSequence::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderQueueInvocationSequence__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::RenderQueueInvocationSequence 
   // cast pointer to C++ object 
   Ogre::RenderQueueInvocationSequence* _cpp_this = reinterpret_cast<Ogre::RenderQueueInvocationSequence*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::RenderQueueInvocationSequence::__delete */
