///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_TextureManager.h"

// import header files of original library
#include <OgreTextureManager.h>



/*
 * Class:      org.ogre4j.TextureManager
 * Method:     createOrRetrieve()
 * Type:       virtual method
 * Definition: virtual ResourceCreateOrRetrieveResult Ogre::TextureManager::createOrRetrieve
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairListOgre_TextureTypeIfloatZOgre_PixelFormatZ)Ogre_ResourceManager_ResourceCreateOrRetrieveResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1createOrRetrieve_1_1StringRStringRbvManualResourceLoaderpNameValuePairListPTextureTypevivRealvbvPixelFormatvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong createParams, 
  jint texType, 
  jint numMipmaps, 
  jfloat gamma, 
  jboolean isAlpha, 
  jint desiredFormat, 
  jboolean hwGammaCorrection
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_createParams = reinterpret_cast< const Ogre::NameValuePairList* >(createParams);
  Ogre::TextureType _cpp_texType = (Ogre::TextureType)texType;
  int _cpp_numMipmaps = numMipmaps;
  float _cpp_gamma = gamma;
  bool _cpp_isAlpha = isAlpha ? true : false;
  Ogre::PixelFormat _cpp_desiredFormat = (Ogre::PixelFormat)desiredFormat;
  bool _cpp_hwGammaCorrection = hwGammaCorrection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_result = new Ogre::ResourceManager::ResourceCreateOrRetrieveResult( _cpp_this->createOrRetrieve(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_createParams, _cpp_texType, _cpp_numMipmaps, _cpp_gamma, _cpp_isAlpha, _cpp_desiredFormat, _cpp_hwGammaCorrection) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceCreateOrRetrieveResult Ogre::TextureManager::createOrRetrieve */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual TexturePtr Ogre::TextureManager::prepare
 * Signature:  (std_stringstd_stringOgre_TextureTypeIfloatZOgre_PixelFormatZ)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1prepare_1_1StringRStringRTextureTypevivRealvbvPixelFormatvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jint texType, 
  jint numMipmaps, 
  jfloat gamma, 
  jboolean isAlpha, 
  jint desiredFormat, 
  jboolean hwGammaCorrection
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  Ogre::TextureType _cpp_texType = (Ogre::TextureType)texType;
  int _cpp_numMipmaps = numMipmaps;
  float _cpp_gamma = gamma;
  bool _cpp_isAlpha = isAlpha ? true : false;
  Ogre::PixelFormat _cpp_desiredFormat = (Ogre::PixelFormat)desiredFormat;
  bool _cpp_hwGammaCorrection = hwGammaCorrection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = new Ogre::TexturePtr( _cpp_this->prepare(_cpp_name, _cpp_group, _cpp_texType, _cpp_numMipmaps, _cpp_gamma, _cpp_isAlpha, _cpp_desiredFormat, _cpp_hwGammaCorrection) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual TexturePtr Ogre::TextureManager::prepare */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual TexturePtr Ogre::TextureManager::load
 * Signature:  (std_stringstd_stringOgre_TextureTypeIfloatZOgre_PixelFormatZ)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1load_1_1StringRStringRTextureTypevivRealvbvPixelFormatvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jint texType, 
  jint numMipmaps, 
  jfloat gamma, 
  jboolean isAlpha, 
  jint desiredFormat, 
  jboolean hwGammaCorrection
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  Ogre::TextureType _cpp_texType = (Ogre::TextureType)texType;
  int _cpp_numMipmaps = numMipmaps;
  float _cpp_gamma = gamma;
  bool _cpp_isAlpha = isAlpha ? true : false;
  Ogre::PixelFormat _cpp_desiredFormat = (Ogre::PixelFormat)desiredFormat;
  bool _cpp_hwGammaCorrection = hwGammaCorrection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = new Ogre::TexturePtr( _cpp_this->load(_cpp_name, _cpp_group, _cpp_texType, _cpp_numMipmaps, _cpp_gamma, _cpp_isAlpha, _cpp_desiredFormat, _cpp_hwGammaCorrection) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual TexturePtr Ogre::TextureManager::load */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     loadImage()
 * Type:       virtual method
 * Definition: virtual TexturePtr Ogre::TextureManager::loadImage
 * Signature:  (std_stringstd_stringOgre_ImageOgre_TextureTypeIfloatZOgre_PixelFormatZ)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1loadImage_1_1StringRStringRImageRTextureTypevivRealvbvPixelFormatvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jlong img, 
  jint texType, 
  jint iNumMipmaps, 
  jfloat gamma, 
  jboolean isAlpha, 
  jint desiredFormat, 
  jboolean hwGammaCorrection
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  const Ogre::Image* _cpp_img = reinterpret_cast< const Ogre::Image* >(img);
  Ogre::TextureType _cpp_texType = (Ogre::TextureType)texType;
  int _cpp_iNumMipmaps = iNumMipmaps;
  float _cpp_gamma = gamma;
  bool _cpp_isAlpha = isAlpha ? true : false;
  Ogre::PixelFormat _cpp_desiredFormat = (Ogre::PixelFormat)desiredFormat;
  bool _cpp_hwGammaCorrection = hwGammaCorrection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = new Ogre::TexturePtr( _cpp_this->loadImage(_cpp_name, _cpp_group, *_cpp_img, _cpp_texType, _cpp_iNumMipmaps, _cpp_gamma, _cpp_isAlpha, _cpp_desiredFormat, _cpp_hwGammaCorrection) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual TexturePtr Ogre::TextureManager::loadImage */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     loadRawData()
 * Type:       virtual method
 * Definition: virtual TexturePtr Ogre::TextureManager::loadRawData
 * Signature:  (std_stringstd_stringOgre_DataStreamPtrunsigned_shortunsigned_shortOgre_PixelFormatOgre_TextureTypeIfloatZ)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1loadRawData_1_1StringRStringRDataStreamPtrrushortvushortvPixelFormatvTextureTypevivRealvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jlong stream, 
  jint uWidth, 
  jint uHeight, 
  jint format, 
  jint texType, 
  jint iNumMipmaps, 
  jfloat gamma, 
  jboolean hwGammaCorrection
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  unsigned short _cpp_uWidth = uWidth;
  unsigned short _cpp_uHeight = uHeight;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format;
  Ogre::TextureType _cpp_texType = (Ogre::TextureType)texType;
  int _cpp_iNumMipmaps = iNumMipmaps;
  float _cpp_gamma = gamma;
  bool _cpp_hwGammaCorrection = hwGammaCorrection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = new Ogre::TexturePtr( _cpp_this->loadRawData(_cpp_name, _cpp_group, *_cpp_stream, _cpp_uWidth, _cpp_uHeight, _cpp_format, _cpp_texType, _cpp_iNumMipmaps, _cpp_gamma, _cpp_hwGammaCorrection) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual TexturePtr Ogre::TextureManager::loadRawData */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     createManual()
 * Type:       virtual method
 * Definition: virtual TexturePtr Ogre::TextureManager::createManual
 * Signature:  (std_stringstd_stringOgre_TextureTypeunsigned_intunsigned_intunsigned_intIOgre_PixelFormatIOgre_ManualResourceLoaderZunsigned_int)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1createManual_1_1StringRStringRTextureTypevuintvuintvuintvivPixelFormatvivManualResourceLoaderpbvuintv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jint texType, 
  jlong width, 
  jlong height, 
  jlong depth, 
  jint num_mips, 
  jint format, 
  jint usage, 
  jlong loader, 
  jboolean hwGammaCorrection, 
  jlong fsaa
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  Ogre::TextureType _cpp_texType = (Ogre::TextureType)texType;
  unsigned int _cpp_width = width;
  unsigned int _cpp_height = height;
  unsigned int _cpp_depth = depth;
  int _cpp_num_mips = num_mips;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format;
  int _cpp_usage = usage;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  bool _cpp_hwGammaCorrection = hwGammaCorrection ? true : false;
  unsigned int _cpp_fsaa = fsaa; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = new Ogre::TexturePtr( _cpp_this->createManual(_cpp_name, _cpp_group, _cpp_texType, _cpp_width, _cpp_height, _cpp_depth, _cpp_num_mips, _cpp_format, _cpp_usage, _cpp_loader, _cpp_hwGammaCorrection, _cpp_fsaa) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual TexturePtr Ogre::TextureManager::createManual */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     createManual()
 * Type:       non-virtual method
 * Definition: TexturePtr Ogre::TextureManager::createManual
 * Signature:  (std_stringstd_stringOgre_TextureTypeunsigned_intunsigned_intIOgre_PixelFormatIOgre_ManualResourceLoaderZunsigned_int)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1createManual_1_1StringRStringRTextureTypevuintvuintvivPixelFormatvivManualResourceLoaderpbvuintv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jint texType, 
  jlong width, 
  jlong height, 
  jint num_mips, 
  jint format, 
  jint usage, 
  jlong loader, 
  jboolean hwGammaCorrection, 
  jlong fsaa
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  Ogre::TextureType _cpp_texType = (Ogre::TextureType)texType;
  unsigned int _cpp_width = width;
  unsigned int _cpp_height = height;
  int _cpp_num_mips = num_mips;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format;
  int _cpp_usage = usage;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  bool _cpp_hwGammaCorrection = hwGammaCorrection ? true : false;
  unsigned int _cpp_fsaa = fsaa; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::TexturePtr* _cpp_result = new Ogre::TexturePtr( _cpp_this->createManual(_cpp_name, _cpp_group, _cpp_texType, _cpp_width, _cpp_height, _cpp_num_mips, _cpp_format, _cpp_usage, _cpp_loader, _cpp_hwGammaCorrection, _cpp_fsaa) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* TexturePtr Ogre::TextureManager::createManual */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     setPreferredIntegerBitDepth()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextureManager::setPreferredIntegerBitDepth
 * Signature:  (unsigned_shortZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1setPreferredIntegerBitDepth_1_1ushortvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bits, 
  jboolean reloadTextures
)
{
   // parameter conversions 
  unsigned short _cpp_bits = bits;
  bool _cpp_reloadTextures = reloadTextures ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPreferredIntegerBitDepth(_cpp_bits, _cpp_reloadTextures);
} /* virtual void Ogre::TextureManager::setPreferredIntegerBitDepth */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getPreferredIntegerBitDepth()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::TextureManager::getPreferredIntegerBitDepth
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureManager__1getPreferredIntegerBitDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureManager* _cpp_this = reinterpret_cast<const Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getPreferredIntegerBitDepth() ; 
   return _cpp_result;
} /* virtual ushort Ogre::TextureManager::getPreferredIntegerBitDepth */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     setPreferredFloatBitDepth()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextureManager::setPreferredFloatBitDepth
 * Signature:  (unsigned_shortZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1setPreferredFloatBitDepth_1_1ushortvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bits, 
  jboolean reloadTextures
)
{
   // parameter conversions 
  unsigned short _cpp_bits = bits;
  bool _cpp_reloadTextures = reloadTextures ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPreferredFloatBitDepth(_cpp_bits, _cpp_reloadTextures);
} /* virtual void Ogre::TextureManager::setPreferredFloatBitDepth */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getPreferredFloatBitDepth()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::TextureManager::getPreferredFloatBitDepth
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureManager__1getPreferredFloatBitDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureManager* _cpp_this = reinterpret_cast<const Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getPreferredFloatBitDepth() ; 
   return _cpp_result;
} /* virtual ushort Ogre::TextureManager::getPreferredFloatBitDepth */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     setPreferredBitDepths()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextureManager::setPreferredBitDepths
 * Signature:  (unsigned_shortunsigned_shortZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1setPreferredBitDepths_1_1ushortvushortvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint integerBits, 
  jint floatBits, 
  jboolean reloadTextures
)
{
   // parameter conversions 
  unsigned short _cpp_integerBits = integerBits;
  unsigned short _cpp_floatBits = floatBits;
  bool _cpp_reloadTextures = reloadTextures ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPreferredBitDepths(_cpp_integerBits, _cpp_floatBits, _cpp_reloadTextures);
} /* virtual void Ogre::TextureManager::setPreferredBitDepths */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     isFormatSupported()
 * Type:       virtual method
 * Definition: virtual bool Ogre::TextureManager::isFormatSupported
 * Signature:  (Ogre_TextureTypeOgre_PixelFormatI)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureManager__1isFormatSupported_1_1TextureTypevPixelFormatviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ttype, 
  jint format, 
  jint usage
)
{
   // parameter conversions 
  Ogre::TextureType _cpp_ttype = (Ogre::TextureType)ttype;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format;
  int _cpp_usage = usage; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isFormatSupported(_cpp_ttype, _cpp_format, _cpp_usage) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::TextureManager::isFormatSupported */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     isEquivalentFormatSupported()
 * Type:       virtual method
 * Definition: virtual bool Ogre::TextureManager::isEquivalentFormatSupported
 * Signature:  (Ogre_TextureTypeOgre_PixelFormatI)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureManager__1isEquivalentFormatSupported_1_1TextureTypevPixelFormatviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ttype, 
  jint format, 
  jint usage
)
{
   // parameter conversions 
  Ogre::TextureType _cpp_ttype = (Ogre::TextureType)ttype;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format;
  int _cpp_usage = usage; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isEquivalentFormatSupported(_cpp_ttype, _cpp_format, _cpp_usage) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::TextureManager::isEquivalentFormatSupported */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getNativeFormat()
 * Type:       pure virtual method
 * Definition: virtual PixelFormat Ogre::TextureManager::getNativeFormat
 * Signature:  (Ogre_TextureTypeOgre_PixelFormatI)Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureManager__1getNativeFormat_1_1TextureTypevPixelFormatviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ttype, 
  jint format, 
  jint usage
)
{
   // parameter conversions 
  Ogre::TextureType _cpp_ttype = (Ogre::TextureType)ttype;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format;
  int _cpp_usage = usage; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::PixelFormat _cpp_result = _cpp_this->getNativeFormat(_cpp_ttype, _cpp_format, _cpp_usage) ; 
   return _cpp_result;
} /* virtual PixelFormat Ogre::TextureManager::getNativeFormat */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     isHardwareFilteringSupported()
 * Type:       pure virtual method
 * Definition: virtual bool Ogre::TextureManager::isHardwareFilteringSupported
 * Signature:  (Ogre_TextureTypeOgre_PixelFormatIZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureManager__1isHardwareFilteringSupported_1_1TextureTypevPixelFormatvivbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ttype, 
  jint format, 
  jint usage, 
  jboolean preciseFormatOnly
)
{
   // parameter conversions 
  Ogre::TextureType _cpp_ttype = (Ogre::TextureType)ttype;
  Ogre::PixelFormat _cpp_format = (Ogre::PixelFormat)format;
  int _cpp_usage = usage;
  bool _cpp_preciseFormatOnly = preciseFormatOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isHardwareFilteringSupported(_cpp_ttype, _cpp_format, _cpp_usage, _cpp_preciseFormatOnly) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::TextureManager::isHardwareFilteringSupported */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     setDefaultNumMipmaps()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextureManager::setDefaultNumMipmaps
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1setDefaultNumMipmaps_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint num
)
{
   // parameter conversions 
  size_t _cpp_num = num; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDefaultNumMipmaps(_cpp_num);
} /* virtual void Ogre::TextureManager::setDefaultNumMipmaps */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getDefaultNumMipmaps()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::TextureManager::getDefaultNumMipmaps
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureManager__1getDefaultNumMipmaps (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getDefaultNumMipmaps() ; 
   return _cpp_result;
} /* virtual size_t Ogre::TextureManager::getDefaultNumMipmaps */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static TextureManager& Ogre::TextureManager::getSingleton
 * Signature:  ()Ogre_TextureManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::TextureManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::TextureManager* _cpp_result = & Ogre::TextureManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static TextureManager& Ogre::TextureManager::getSingleton */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static TextureManager* Ogre::TextureManager::getSingletonPtr
 * Signature:  ()Ogre_TextureManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::TextureManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::TextureManager* _cpp_result = Ogre::TextureManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static TextureManager* Ogre::TextureManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     create()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::create
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1create_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong createParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_createParams = reinterpret_cast< const Ogre::NameValuePairList* >(createParams); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->create(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_createParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::create */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     createOrRetrieve()
 * Type:       virtual method
 * Definition: virtual ResourceCreateOrRetrieveResult Ogre::ResourceManager::createOrRetrieve
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourceManager_ResourceCreateOrRetrieveResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1createOrRetrieve_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong createParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_createParams = reinterpret_cast< const Ogre::NameValuePairList* >(createParams); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceCreateOrRetrieveResult* _cpp_result = new Ogre::ResourceManager::ResourceCreateOrRetrieveResult( _cpp_this->Ogre::ResourceManager::createOrRetrieve(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_createParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourceCreateOrRetrieveResult Ogre::ResourceManager::createOrRetrieve */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     setMemoryBudget()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::setMemoryBudget
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1setMemoryBudget_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint bytes
)
{
   // parameter conversions 
  size_t _cpp_bytes = bytes; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setMemoryBudget(_cpp_bytes);
} /* virtual void Ogre::ResourceManager::setMemoryBudget */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getMemoryBudget()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::ResourceManager::getMemoryBudget
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureManager__1getMemoryBudget_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureManager* _cpp_this = reinterpret_cast<const Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getMemoryBudget() ; 
   return _cpp_result;
} /* virtual size_t Ogre::ResourceManager::getMemoryBudget */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getMemoryUsage()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::ResourceManager::getMemoryUsage
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextureManager__1getMemoryUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureManager* _cpp_this = reinterpret_cast<const Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getMemoryUsage() ; 
   return _cpp_result;
} /* virtual size_t Ogre::ResourceManager::getMemoryUsage */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unload
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1unload_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::unload(_cpp_name);
} /* virtual void Ogre::ResourceManager::unload */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unload
 * Signature:  (unsigned_long)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1unload_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::unload(_cpp_handle);
} /* virtual void Ogre::ResourceManager::unload */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     unloadAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unloadAll
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1unloadAll_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadAll(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::unloadAll */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     reloadAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::reloadAll
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1reloadAll_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reloadAll(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::reloadAll */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     unloadUnreferencedResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::unloadUnreferencedResources
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1unloadUnreferencedResources_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unloadUnreferencedResources(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::unloadUnreferencedResources */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     reloadUnreferencedResources()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::reloadUnreferencedResources
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1reloadUnreferencedResources_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reloadableOnly
)
{
   // parameter conversions 
  bool _cpp_reloadableOnly = reloadableOnly ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reloadUnreferencedResources(_cpp_reloadableOnly);
} /* virtual void Ogre::ResourceManager::reloadUnreferencedResources */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1remove_1_1ResourcePtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong r
)
{
   // parameter conversions 
  Ogre::ResourcePtr* _cpp_r = reinterpret_cast< Ogre::ResourcePtr* >(r); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(*_cpp_r);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1remove_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(_cpp_name);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     remove()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::remove
 * Signature:  (unsigned_long)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1remove_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::ResourceManager::remove(_cpp_handle);
} /* virtual void Ogre::ResourceManager::remove */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     removeAll()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::removeAll
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1removeAll (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeAll();
} /* virtual void Ogre::ResourceManager::removeAll */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getByName()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::getByName
 * Signature:  (std_string)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1getByName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->getByName(_cpp_name) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::getByName */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getByHandle()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::getByHandle
 * Signature:  (unsigned_long)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1getByHandle_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->getByHandle(_cpp_handle) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::getByHandle */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     resourceExists()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::resourceExists
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureManager__1resourceExists_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Ogre::ResourceManager::resourceExists(_cpp_name) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::resourceExists */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     resourceExists()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::resourceExists
 * Signature:  (unsigned_long)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureManager__1resourceExists_1_1ResourceHandlev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong handle
)
{
   // parameter conversions 
  unsigned long _cpp_handle = handle; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Ogre::ResourceManager::resourceExists(_cpp_handle) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::resourceExists */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     _notifyResourceTouched()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceTouched
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1_1notifyResourceTouched_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceTouched(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceTouched */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     _notifyResourceLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceLoaded
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1_1notifyResourceLoaded_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceLoaded(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceLoaded */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     _notifyResourceUnloaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::_notifyResourceUnloaded
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1_1notifyResourceUnloaded_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
)
{
   // parameter conversions 
  Ogre::Resource* _cpp_res = reinterpret_cast< Ogre::Resource* >(res); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyResourceUnloaded(_cpp_res);
} /* virtual void Ogre::ResourceManager::_notifyResourceUnloaded */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::prepare
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1prepare_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_loadParams = reinterpret_cast< const Ogre::NameValuePairList* >(loadParams); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->Ogre::ResourceManager::prepare(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_loadParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::prepare */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual ResourcePtr Ogre::ResourceManager::load
 * Signature:  (std_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairList)Ogre_ResourcePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1load_1_1StringRStringRbvManualResourceLoaderpNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams
)
{
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_group = ""; org::xbig::jni::to_stdstring(_jni_env_, group, _cpp_group); // calls c-tor only. Not operator= .;
  bool _cpp_isManual = isManual ? true : false;
  Ogre::ManualResourceLoader* _cpp_loader = reinterpret_cast< Ogre::ManualResourceLoader* >(loader);
  const Ogre::NameValuePairList* _cpp_loadParams = reinterpret_cast< const Ogre::NameValuePairList* >(loadParams); 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourcePtr* _cpp_result = new Ogre::ResourcePtr( _cpp_this->Ogre::ResourceManager::load(_cpp_name, _cpp_group, _cpp_isManual, _cpp_loader, _cpp_loadParams) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual ResourcePtr Ogre::ResourceManager::load */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getScriptPatterns()
 * Type:       virtual method
 * Definition: virtual const StringVector& Ogre::ResourceManager::getScriptPatterns
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1getScriptPatterns_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureManager* _cpp_this = reinterpret_cast<const Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getScriptPatterns() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const StringVector& Ogre::ResourceManager::getScriptPatterns */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     parseScript()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::parseScript
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1parseScript_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring groupName
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream);
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->parseScript(*_cpp_stream, _cpp_groupName);
} /* virtual void Ogre::ResourceManager::parseScript */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getLoadingOrder()
 * Type:       virtual method
 * Definition: virtual Real Ogre::ResourceManager::getLoadingOrder
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextureManager__1getLoadingOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureManager* _cpp_this = reinterpret_cast<const Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getLoadingOrder() ; 
   return _cpp_result;
} /* virtual Real Ogre::ResourceManager::getLoadingOrder */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getResourceType()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ResourceManager::getResourceType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextureManager__1getResourceType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::TextureManager* _cpp_this = reinterpret_cast<const Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getResourceType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::ResourceManager::getResourceType */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     setVerbose()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceManager::setVerbose
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1setVerbose_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean v
)
{
   // parameter conversions 
  bool _cpp_v = v ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVerbose(_cpp_v);
} /* virtual void Ogre::ResourceManager::setVerbose */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getVerbose()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceManager::getVerbose
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextureManager__1getVerbose (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVerbose() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::ResourceManager::getVerbose */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     getResourceIterator()
 * Type:       non-virtual method
 * Definition: ResourceMapIterator Ogre::ResourceManager::getResourceIterator
 * Signature:  ()Ogre_ResourceManager_ResourceMapIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextureManager__1getResourceIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ResourceManager::ResourceMapIterator* _cpp_result = new Ogre::ResourceManager::ResourceMapIterator( _cpp_this->getResourceIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ResourceMapIterator Ogre::ResourceManager::getResourceIterator */


/*
 * Class:      org.ogre4j.TextureManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::TextureManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextureManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::TextureManager 
   // cast pointer to C++ object 
   Ogre::TextureManager* _cpp_this = reinterpret_cast<Ogre::TextureManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::TextureManager::__delete */
