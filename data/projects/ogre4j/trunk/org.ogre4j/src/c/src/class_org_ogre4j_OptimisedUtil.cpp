///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_OptimisedUtil.h"

// import header files of original library
#include <OgreOptimisedUtil.h>



/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     softwareVertexSkinning()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::softwareVertexSkinning
 * Signature:  (FFFFFCOgre_Matrix4IIIIIIII)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1softwareVertexSkinning_1_1FPFpFPFpFPBPMatrix4Piviviviviviviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong srcPosPtr, 
  jlong destPosPtr, 
  jlong srcNormPtr, 
  jlong destNormPtr, 
  jlong blendWeightPtr, 
  jlong blendIndexPtr, 
  jlong blendMatrices, 
  jint srcPosStride, 
  jint destPosStride, 
  jint srcNormStride, 
  jint destNormStride, 
  jint blendWeightStride, 
  jint blendIndexStride, 
  jint numWeightsPerVertex, 
  jint numVertices
)
{
   // parameter conversions 
  const float* _cpp_srcPosPtr = reinterpret_cast<float*>(srcPosPtr);
  float* _cpp_destPosPtr = reinterpret_cast<float*>(destPosPtr);
  const float* _cpp_srcNormPtr = reinterpret_cast<float*>(srcNormPtr);
  float* _cpp_destNormPtr = reinterpret_cast<float*>(destNormPtr);
  const float* _cpp_blendWeightPtr = reinterpret_cast<float*>(blendWeightPtr);
  const unsigned char* _cpp_blendIndexPtr = reinterpret_cast<unsigned char*>(blendIndexPtr);
  const Ogre::Matrix4** _cpp_blendMatrices = reinterpret_cast< const Ogre::Matrix4** >(blendMatrices);
  size_t _cpp_srcPosStride = srcPosStride;
  size_t _cpp_destPosStride = destPosStride;
  size_t _cpp_srcNormStride = srcNormStride;
  size_t _cpp_destNormStride = destNormStride;
  size_t _cpp_blendWeightStride = blendWeightStride;
  size_t _cpp_blendIndexStride = blendIndexStride;
  size_t _cpp_numWeightsPerVertex = numWeightsPerVertex;
  size_t _cpp_numVertices = numVertices; 
   
   // cast pointer to C++ object 
   Ogre::OptimisedUtil* _cpp_this = reinterpret_cast<Ogre::OptimisedUtil*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->softwareVertexSkinning(_cpp_srcPosPtr, _cpp_destPosPtr, _cpp_srcNormPtr, _cpp_destNormPtr, _cpp_blendWeightPtr, _cpp_blendIndexPtr, _cpp_blendMatrices, _cpp_srcPosStride, _cpp_destPosStride, _cpp_srcNormStride, _cpp_destNormStride, _cpp_blendWeightStride, _cpp_blendIndexStride, _cpp_numWeightsPerVertex, _cpp_numVertices);
} /* virtual void Ogre::OptimisedUtil::softwareVertexSkinning */


/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     softwareVertexMorph()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::softwareVertexMorph
 * Signature:  (floatFFFI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1softwareVertexMorph_1_1RealvFPFPFpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat t, 
  jlong srcPos1, 
  jlong srcPos2, 
  jlong dstPos, 
  jint numVertices
)
{
   // parameter conversions 
  float _cpp_t = t;
  const float* _cpp_srcPos1 = reinterpret_cast<float*>(srcPos1);
  const float* _cpp_srcPos2 = reinterpret_cast<float*>(srcPos2);
  float* _cpp_dstPos = reinterpret_cast<float*>(dstPos);
  size_t _cpp_numVertices = numVertices; 
   
   // cast pointer to C++ object 
   Ogre::OptimisedUtil* _cpp_this = reinterpret_cast<Ogre::OptimisedUtil*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->softwareVertexMorph(_cpp_t, _cpp_srcPos1, _cpp_srcPos2, _cpp_dstPos, _cpp_numVertices);
} /* virtual void Ogre::OptimisedUtil::softwareVertexMorph */


/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     concatenateAffineMatrices()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::concatenateAffineMatrices
 * Signature:  (Ogre_Matrix4Ogre_Matrix4Ogre_Matrix4I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1concatenateAffineMatrices_1_1Matrix4RMatrix4PMatrix4piv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong baseMatrix, 
  jlong srcMatrices, 
  jlong dstMatrices, 
  jint numMatrices
)
{
   // parameter conversions 
  const Ogre::Matrix4* _cpp_baseMatrix = reinterpret_cast< const Ogre::Matrix4* >(baseMatrix);
  const Ogre::Matrix4* _cpp_srcMatrices = reinterpret_cast< const Ogre::Matrix4* >(srcMatrices);
  Ogre::Matrix4* _cpp_dstMatrices = reinterpret_cast< Ogre::Matrix4* >(dstMatrices);
  size_t _cpp_numMatrices = numMatrices; 
   
   // cast pointer to C++ object 
   Ogre::OptimisedUtil* _cpp_this = reinterpret_cast<Ogre::OptimisedUtil*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->concatenateAffineMatrices(*_cpp_baseMatrix, _cpp_srcMatrices, _cpp_dstMatrices, _cpp_numMatrices);
} /* virtual void Ogre::OptimisedUtil::concatenateAffineMatrices */


/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     calculateFaceNormals()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::calculateFaceNormals
 * Signature:  (FOgre_EdgeData_TriangleOgre_Vector4I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1calculateFaceNormals_1_1FPEdgeData_1TrianglePVector4piv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong positions, 
  jlong triangles, 
  jlong faceNormals, 
  jint numTriangles
)
{
   // parameter conversions 
  const float* _cpp_positions = reinterpret_cast<float*>(positions);
  const Ogre::EdgeData::Triangle* _cpp_triangles = reinterpret_cast< const Ogre::EdgeData::Triangle* >(triangles);
  Ogre::Vector4* _cpp_faceNormals = reinterpret_cast< Ogre::Vector4* >(faceNormals);
  size_t _cpp_numTriangles = numTriangles; 
   
   // cast pointer to C++ object 
   Ogre::OptimisedUtil* _cpp_this = reinterpret_cast<Ogre::OptimisedUtil*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->calculateFaceNormals(_cpp_positions, _cpp_triangles, _cpp_faceNormals, _cpp_numTriangles);
} /* virtual void Ogre::OptimisedUtil::calculateFaceNormals */


/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     calculateLightFacing()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::calculateLightFacing
 * Signature:  (Ogre_Vector4Ogre_Vector4CI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1calculateLightFacing_1_1Vector4RVector4Pcpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lightPos, 
  jlong faceNormals, 
  jlong lightFacings, 
  jint numFaces
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  const Ogre::Vector4* _cpp_faceNormals = reinterpret_cast< const Ogre::Vector4* >(faceNormals);
  char* _cpp_lightFacings = reinterpret_cast<char*>(lightFacings);
  size_t _cpp_numFaces = numFaces; 
   
   // cast pointer to C++ object 
   Ogre::OptimisedUtil* _cpp_this = reinterpret_cast<Ogre::OptimisedUtil*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->calculateLightFacing(*_cpp_lightPos, _cpp_faceNormals, _cpp_lightFacings, _cpp_numFaces);
} /* virtual void Ogre::OptimisedUtil::calculateLightFacing */


/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     extrudeVertices()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::extrudeVertices
 * Signature:  (Ogre_Vector4floatFFI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1extrudeVertices_1_1Vector4RRealvFPFpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lightPos, 
  jfloat extrudeDist, 
  jlong srcPositions, 
  jlong destPositions, 
  jint numVertices
)
{
   // parameter conversions 
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist;
  const float* _cpp_srcPositions = reinterpret_cast<float*>(srcPositions);
  float* _cpp_destPositions = reinterpret_cast<float*>(destPositions);
  size_t _cpp_numVertices = numVertices; 
   
   // cast pointer to C++ object 
   Ogre::OptimisedUtil* _cpp_this = reinterpret_cast<Ogre::OptimisedUtil*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->extrudeVertices(*_cpp_lightPos, _cpp_extrudeDist, _cpp_srcPositions, _cpp_destPositions, _cpp_numVertices);
} /* virtual void Ogre::OptimisedUtil::extrudeVertices */


/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     getImplementation()
 * Type:       static method
 * Definition: static OptimisedUtil* Ogre::OptimisedUtil::getImplementation
 * Signature:  ()Ogre_OptimisedUtil
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OptimisedUtil__1getImplementation (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::OptimisedUtil with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::OptimisedUtil* _cpp_result = Ogre::OptimisedUtil::getImplementation(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static OptimisedUtil* Ogre::OptimisedUtil::getImplementation */


/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::OptimisedUtil::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::OptimisedUtil 
   // cast pointer to C++ object 
   Ogre::OptimisedUtil* _cpp_this = reinterpret_cast<Ogre::OptimisedUtil*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::OptimisedUtil::__delete */
