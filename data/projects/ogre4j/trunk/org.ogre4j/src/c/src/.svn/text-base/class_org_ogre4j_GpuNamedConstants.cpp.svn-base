///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_GpuNamedConstants.h"

// import header files of original library
#include <OgreGpuProgram.h>



/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     generateConstantDefinitionArrayEntries()
 * Type:       non-virtual method
 * Definition: void Ogre::GpuNamedConstants::generateConstantDefinitionArrayEntries
 * Signature:  (std_stringOgre_GpuConstantDefinition)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1generateConstantDefinitionArrayEntries_1_1StringRGpuConstantDefinitionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring paramName, 
  jlong baseDef
)
{
   // parameter conversions 
  std::string _cpp_paramName = ""; org::xbig::jni::to_stdstring(_jni_env_, paramName, _cpp_paramName); // calls c-tor only. Not operator= .;
  const Ogre::GpuConstantDefinition* _cpp_baseDef = reinterpret_cast< const Ogre::GpuConstantDefinition* >(baseDef); 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this = reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->generateConstantDefinitionArrayEntries(_cpp_paramName, *_cpp_baseDef);
} /* void Ogre::GpuNamedConstants::generateConstantDefinitionArrayEntries */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     save()
 * Type:       non-virtual method
 * Definition: void Ogre::GpuNamedConstants::save
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1save_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::GpuNamedConstants* _cpp_this = reinterpret_cast<const Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->save(_cpp_filename);
} /* void Ogre::GpuNamedConstants::save */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     load()
 * Type:       non-virtual method
 * Definition: void Ogre::GpuNamedConstants::load
 * Signature:  (Ogre_DataStreamPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1load_1_1DataStreamPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream
)
{
   // parameter conversions 
  Ogre::DataStreamPtr* _cpp_stream = reinterpret_cast< Ogre::DataStreamPtr* >(stream); 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this = reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->load(*_cpp_stream);
} /* void Ogre::GpuNamedConstants::load */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     getGenerateAllConstantDefinitionArrayEntries()
 * Type:       static method
 * Definition: static bool Ogre::GpuNamedConstants::getGenerateAllConstantDefinitionArrayEntries
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuNamedConstants__1getGenerateAllConstantDefinitionArrayEntries (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::GpuNamedConstants with return value 
   // parameter conversions 
   
   // call library method 
   const bool _cpp_result = Ogre::GpuNamedConstants::getGenerateAllConstantDefinitionArrayEntries(); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::GpuNamedConstants::getGenerateAllConstantDefinitionArrayEntries */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     setGenerateAllConstantDefinitionArrayEntries()
 * Type:       static method
 * Definition: static void Ogre::GpuNamedConstants::setGenerateAllConstantDefinitionArrayEntries
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1setGenerateAllConstantDefinitionArrayEntries_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jboolean generateAll
)
{
   // static method of class Ogre::GpuNamedConstants without return value 
   // parameter conversions 
  bool _cpp_generateAll = generateAll ? true : false; 
   
   // call library method 
   Ogre::GpuNamedConstants::setGenerateAllConstantDefinitionArrayEntries(_cpp_generateAll);
} /* static void Ogre::GpuNamedConstants::setGenerateAllConstantDefinitionArrayEntries */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     GpuNamedConstants()
 * Type:       constructor
 * Definition: Ogre::GpuNamedConstants::GpuNamedConstants
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuNamedConstants__1_1createGpuNamedConstants (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::GpuNamedConstants 
   
   // parameter conversions 
   
   // create new instance of class Ogre::GpuNamedConstants 
   Ogre::GpuNamedConstants* _cpp_this = new Ogre::GpuNamedConstants(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::GpuNamedConstants::GpuNamedConstants */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::GpuNamedConstants::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::GpuNamedConstants 
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this = reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::GpuNamedConstants::__delete */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     getfloatBufferSize()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::GpuNamedConstants::floatBufferSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuNamedConstants__1getfloatBufferSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this = reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->floatBufferSize; 
   return _cpp_result;
} /* size_t Ogre::GpuNamedConstants::floatBufferSize */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     setfloatBufferSize()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::GpuNamedConstants::floatBufferSize
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1setfloatBufferSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this =reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->floatBufferSize = _cpp__jni_value_;
} /* size_t Ogre::GpuNamedConstants::floatBufferSize */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     getintBufferSize()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::GpuNamedConstants::intBufferSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuNamedConstants__1getintBufferSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this = reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->intBufferSize; 
   return _cpp_result;
} /* size_t Ogre::GpuNamedConstants::intBufferSize */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     setintBufferSize()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::GpuNamedConstants::intBufferSize
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1setintBufferSize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this =reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->intBufferSize = _cpp__jni_value_;
} /* size_t Ogre::GpuNamedConstants::intBufferSize */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     getmap()
 * Type:       getter for public attribute
 * Definition: GpuConstantDefinitionMap Ogre::GpuNamedConstants::map
 * Signature:  ()Ogre_GpuConstantDefinitionMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuNamedConstants__1getmap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this = reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::GpuConstantDefinitionMap* _cpp_result = new Ogre::GpuConstantDefinitionMap( _cpp_this->map); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* GpuConstantDefinitionMap Ogre::GpuNamedConstants::map */


/*
 * Class:      org.ogre4j.GpuNamedConstants
 * Method:     setmap()
 * Type:       setter for public attribute
 * Definition: GpuConstantDefinitionMap Ogre::GpuNamedConstants::map
 * Signature:  (Ogre_GpuConstantDefinitionMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuNamedConstants__1setmap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::GpuConstantDefinitionMap* _cpp__jni_value_ = reinterpret_cast< Ogre::GpuConstantDefinitionMap* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::GpuNamedConstants* _cpp_this =reinterpret_cast<Ogre::GpuNamedConstants*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->map = *_cpp__jni_value_;
} /* GpuConstantDefinitionMap Ogre::GpuNamedConstants::map */
