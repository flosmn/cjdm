///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_SceneManager_00024Listener.h"

// import header files of original library
#include <OgreSceneManager.h>



/*
 * Class:      org.ogre4j.SceneManager.00024Listener
 * Method:     preFindVisibleObjects()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::SceneManager::Listener::preFindVisibleObjects
 * Signature:  (Ogre_SceneManagerOgre_SceneManager_IlluminationRenderStageOgre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager_00024Listener__1preFindVisibleObjects_1_1SceneManagerpIlluminationRenderStagevViewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source, 
  jint irs, 
  jlong v
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_source = reinterpret_cast< Ogre::SceneManager* >(source);
  Ogre::SceneManager::IlluminationRenderStage _cpp_irs = (Ogre::SceneManager::IlluminationRenderStage)irs;
  Ogre::Viewport* _cpp_v = reinterpret_cast< Ogre::Viewport* >(v); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager::Listener* _cpp_this = reinterpret_cast<Ogre::SceneManager::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->preFindVisibleObjects(_cpp_source, _cpp_irs, _cpp_v);
} /* virtual void Ogre::SceneManager::Listener::preFindVisibleObjects */


/*
 * Class:      org.ogre4j.SceneManager.00024Listener
 * Method:     postFindVisibleObjects()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::SceneManager::Listener::postFindVisibleObjects
 * Signature:  (Ogre_SceneManagerOgre_SceneManager_IlluminationRenderStageOgre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager_00024Listener__1postFindVisibleObjects_1_1SceneManagerpIlluminationRenderStagevViewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source, 
  jint irs, 
  jlong v
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_source = reinterpret_cast< Ogre::SceneManager* >(source);
  Ogre::SceneManager::IlluminationRenderStage _cpp_irs = (Ogre::SceneManager::IlluminationRenderStage)irs;
  Ogre::Viewport* _cpp_v = reinterpret_cast< Ogre::Viewport* >(v); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager::Listener* _cpp_this = reinterpret_cast<Ogre::SceneManager::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postFindVisibleObjects(_cpp_source, _cpp_irs, _cpp_v);
} /* virtual void Ogre::SceneManager::Listener::postFindVisibleObjects */


/*
 * Class:      org.ogre4j.SceneManager.00024Listener
 * Method:     shadowTexturesUpdated()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::SceneManager::Listener::shadowTexturesUpdated
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager_00024Listener__1shadowTexturesUpdated_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numberOfShadowTextures
)
{
   // parameter conversions 
  size_t _cpp_numberOfShadowTextures = numberOfShadowTextures; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager::Listener* _cpp_this = reinterpret_cast<Ogre::SceneManager::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shadowTexturesUpdated(_cpp_numberOfShadowTextures);
} /* virtual void Ogre::SceneManager::Listener::shadowTexturesUpdated */


/*
 * Class:      org.ogre4j.SceneManager.00024Listener
 * Method:     shadowTextureCasterPreViewProj()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::SceneManager::Listener::shadowTextureCasterPreViewProj
 * Signature:  (Ogre_LightOgre_CameraI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager_00024Listener__1shadowTextureCasterPreViewProj_1_1LightpCamerapiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jlong camera, 
  jint iteration
)
{
   // parameter conversions 
  Ogre::Light* _cpp_light = reinterpret_cast< Ogre::Light* >(light);
  Ogre::Camera* _cpp_camera = reinterpret_cast< Ogre::Camera* >(camera);
  size_t _cpp_iteration = iteration; 
   
   // cast pointer to C++ object 
   Ogre::SceneManager::Listener* _cpp_this = reinterpret_cast<Ogre::SceneManager::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shadowTextureCasterPreViewProj(_cpp_light, _cpp_camera, _cpp_iteration);
} /* virtual void Ogre::SceneManager::Listener::shadowTextureCasterPreViewProj */


/*
 * Class:      org.ogre4j.SceneManager.00024Listener
 * Method:     shadowTextureReceiverPreViewProj()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::SceneManager::Listener::shadowTextureReceiverPreViewProj
 * Signature:  (Ogre_LightOgre_Frustum)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager_00024Listener__1shadowTextureReceiverPreViewProj_1_1LightpFrustump (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jlong frustum
)
{
   // parameter conversions 
  Ogre::Light* _cpp_light = reinterpret_cast< Ogre::Light* >(light);
  Ogre::Frustum* _cpp_frustum = reinterpret_cast< Ogre::Frustum* >(frustum); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager::Listener* _cpp_this = reinterpret_cast<Ogre::SceneManager::Listener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->shadowTextureReceiverPreViewProj(_cpp_light, _cpp_frustum);
} /* virtual void Ogre::SceneManager::Listener::shadowTextureReceiverPreViewProj */


/*
 * Class:      org.ogre4j.SceneManager.00024Listener
 * Method:     sortLightsAffectingFrustum()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::Listener::sortLightsAffectingFrustum
 * Signature:  (Ogre_LightList)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager_00024Listener__1sortLightsAffectingFrustum_1_1LightListr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lightList
)
{
   // parameter conversions 
  Ogre::LightList* _cpp_lightList = reinterpret_cast< Ogre::LightList* >(lightList); 
   
   // cast pointer to C++ object 
   Ogre::SceneManager::Listener* _cpp_this = reinterpret_cast<Ogre::SceneManager::Listener*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->sortLightsAffectingFrustum(*_cpp_lightList) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::SceneManager::Listener::sortLightsAffectingFrustum */


/*
 * Class:      org.ogre4j.SceneManager.00024Listener
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SceneManager::Listener::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager_00024Listener__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::SceneManager::Listener 
   // cast pointer to C++ object 
   Ogre::SceneManager::Listener* _cpp_this = reinterpret_cast<Ogre::SceneManager::Listener*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::SceneManager::Listener::__delete */
