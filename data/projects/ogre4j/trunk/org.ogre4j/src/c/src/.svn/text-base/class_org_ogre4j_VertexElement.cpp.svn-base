///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_VertexElement.h"

// import header files of original library
#include <OgreHardwareVertexBuffer.h>



/*
 * Class:      org.ogre4j.VertexElement
 * Method:     VertexElement()
 * Type:       constructor
 * Definition: Ogre::VertexElement::VertexElement
 * Signature:  (SIOgre_VertexElementTypeOgre_VertexElementSemanticS)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexElement__1_1createVertexElement_1_1HvivVertexElementTypevVertexElementSemanticvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint source, 
  jint offset, 
  jint theType, 
  jint semantic, 
  jint index
)
{
   // constructor of class Ogre::VertexElement 
   
   // parameter conversions 
  unsigned short _cpp_source = source;
  size_t _cpp_offset = offset;
  Ogre::VertexElementType _cpp_theType = (Ogre::VertexElementType)theType;
  Ogre::VertexElementSemantic _cpp_semantic = (Ogre::VertexElementSemantic)semantic;
  unsigned short _cpp_index = index; 
   
   // create new instance of class Ogre::VertexElement 
   Ogre::VertexElement* _cpp_this = new Ogre::VertexElement(_cpp_source, _cpp_offset, _cpp_theType, _cpp_semantic, _cpp_index); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::VertexElement::VertexElement */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getSource()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::VertexElement::getSource
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getSource_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getSource() ; 
   return _cpp_result;
} /* unsigned short Ogre::VertexElement::getSource */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getOffset()
 * Type:       non-virtual method
 * Definition: size_t Ogre::VertexElement::getOffset
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getOffset_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getOffset() ; 
   return _cpp_result;
} /* size_t Ogre::VertexElement::getOffset */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getType()
 * Type:       non-virtual method
 * Definition: VertexElementType Ogre::VertexElement::getType
 * Signature:  ()Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexElementType _cpp_result = _cpp_this->getType() ; 
   return _cpp_result;
} /* VertexElementType Ogre::VertexElement::getType */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getSemantic()
 * Type:       non-virtual method
 * Definition: VertexElementSemantic Ogre::VertexElement::getSemantic
 * Signature:  ()Ogre_VertexElementSemantic
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getSemantic_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexElementSemantic _cpp_result = _cpp_this->getSemantic() ; 
   return _cpp_result;
} /* VertexElementSemantic Ogre::VertexElement::getSemantic */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::VertexElement::getIndex
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getIndex_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getIndex() ; 
   return _cpp_result;
} /* unsigned short Ogre::VertexElement::getIndex */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getSize()
 * Type:       non-virtual method
 * Definition: size_t Ogre::VertexElement::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->getSize() ; 
   return _cpp_result;
} /* size_t Ogre::VertexElement::getSize */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::VertexElement::operator==
 * Signature:  (Ogre_VertexElement)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_VertexElement__1operatorEqual_1_1VertexElementR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::VertexElement* _cpp_rhs = reinterpret_cast< const Ogre::VertexElement* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::VertexElement::operator== */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpvp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
)
{
   // parameter conversions 
  void* _cpp_pBase = reinterpret_cast<void*>(pBase);
  void** _cpp_pElem = reinterpret_cast<void**>(pElem); 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->baseVertexPointerToElement(_cpp_pBase, _cpp_pElem);
} /* void Ogre::VertexElement::baseVertexPointerToElement */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpFp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
)
{
   // parameter conversions 
  void* _cpp_pBase = reinterpret_cast<void*>(pBase);
  float** _cpp_pElem = reinterpret_cast<float**>(pElem); 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->baseVertexPointerToElement(_cpp_pBase, _cpp_pElem);
} /* void Ogre::VertexElement::baseVertexPointerToElement */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (Vunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpRGBAp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
)
{
   // parameter conversions 
  void* _cpp_pBase = reinterpret_cast<void*>(pBase);
  unsigned int** _cpp_pElem = reinterpret_cast<unsigned int**>(pElem); 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->baseVertexPointerToElement(_cpp_pBase, _cpp_pElem);
} /* void Ogre::VertexElement::baseVertexPointerToElement */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VC)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpBp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
)
{
   // parameter conversions 
  void* _cpp_pBase = reinterpret_cast<void*>(pBase);
  unsigned char** _cpp_pElem = (unsigned char**)(pElem); 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->baseVertexPointerToElement(_cpp_pBase, _cpp_pElem);
} /* void Ogre::VertexElement::baseVertexPointerToElement */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpHp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
)
{
   // parameter conversions 
  void* _cpp_pBase = reinterpret_cast<void*>(pBase);
  unsigned short** _cpp_pElem = reinterpret_cast<unsigned short**>(pElem); 
   
   // cast pointer to C++ object 
   const Ogre::VertexElement* _cpp_this = reinterpret_cast<const Ogre::VertexElement*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->baseVertexPointerToElement(_cpp_pBase, _cpp_pElem);
} /* void Ogre::VertexElement::baseVertexPointerToElement */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getTypeSize()
 * Type:       static method
 * Definition: static size_t Ogre::VertexElement::getTypeSize
 * Signature:  (Ogre_VertexElementType)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getTypeSize_1_1VertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint etype
)
{
   // static method of class Ogre::VertexElement with return value 
   // parameter conversions 
  Ogre::VertexElementType _cpp_etype = (Ogre::VertexElementType)etype; 
   
   // call library method 
   const size_t _cpp_result = Ogre::VertexElement::getTypeSize(_cpp_etype); 
   return _cpp_result;
} /* static size_t Ogre::VertexElement::getTypeSize */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getTypeCount()
 * Type:       static method
 * Definition: static unsigned short Ogre::VertexElement::getTypeCount
 * Signature:  (Ogre_VertexElementType)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getTypeCount_1_1VertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint etype
)
{
   // static method of class Ogre::VertexElement with return value 
   // parameter conversions 
  Ogre::VertexElementType _cpp_etype = (Ogre::VertexElementType)etype; 
   
   // call library method 
   const unsigned short _cpp_result = Ogre::VertexElement::getTypeCount(_cpp_etype); 
   return _cpp_result;
} /* static unsigned short Ogre::VertexElement::getTypeCount */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     multiplyTypeCount()
 * Type:       static method
 * Definition: static VertexElementType Ogre::VertexElement::multiplyTypeCount
 * Signature:  (Ogre_VertexElementTypeS)Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1multiplyTypeCount_1_1VertexElementTypevHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint baseType, 
  jint count
)
{
   // static method of class Ogre::VertexElement with return value 
   // parameter conversions 
  Ogre::VertexElementType _cpp_baseType = (Ogre::VertexElementType)baseType;
  unsigned short _cpp_count = count; 
   
   // call library method 
   const Ogre::VertexElementType _cpp_result = Ogre::VertexElement::multiplyTypeCount(_cpp_baseType, _cpp_count); 
   return _cpp_result;
} /* static VertexElementType Ogre::VertexElement::multiplyTypeCount */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getBaseType()
 * Type:       static method
 * Definition: static VertexElementType Ogre::VertexElement::getBaseType
 * Signature:  (Ogre_VertexElementType)Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getBaseType_1_1VertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint multiType
)
{
   // static method of class Ogre::VertexElement with return value 
   // parameter conversions 
  Ogre::VertexElementType _cpp_multiType = (Ogre::VertexElementType)multiType; 
   
   // call library method 
   const Ogre::VertexElementType _cpp_result = Ogre::VertexElement::getBaseType(_cpp_multiType); 
   return _cpp_result;
} /* static VertexElementType Ogre::VertexElement::getBaseType */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     convertColourValue()
 * Type:       static method
 * Definition: static void Ogre::VertexElement::convertColourValue
 * Signature:  (Ogre_VertexElementTypeOgre_VertexElementTypeunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1convertColourValue_1_1VertexElementTypevVertexElementTypevuint32p (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint srcType, 
  jint dstType, 
  jlong ptr
)
{
   // static method of class Ogre::VertexElement without return value 
   // parameter conversions 
  Ogre::VertexElementType _cpp_srcType = (Ogre::VertexElementType)srcType;
  Ogre::VertexElementType _cpp_dstType = (Ogre::VertexElementType)dstType;
  unsigned int* _cpp_ptr = reinterpret_cast<unsigned int*>(ptr); 
   
   // call library method 
   Ogre::VertexElement::convertColourValue(_cpp_srcType, _cpp_dstType, _cpp_ptr);
} /* static void Ogre::VertexElement::convertColourValue */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     convertColourValue()
 * Type:       static method
 * Definition: static uint32 Ogre::VertexElement::convertColourValue
 * Signature:  (Ogre_ColourValueOgre_VertexElementType)unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexElement__1convertColourValue_1_1ColourValueRVertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong src, 
  jint dst
)
{
   // static method of class Ogre::VertexElement with return value 
   // parameter conversions 
  const Ogre::ColourValue* _cpp_src = reinterpret_cast< const Ogre::ColourValue* >(src);
  Ogre::VertexElementType _cpp_dst = (Ogre::VertexElementType)dst; 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::VertexElement::convertColourValue(*_cpp_src, _cpp_dst); 
   return _cpp_result;
} /* static uint32 Ogre::VertexElement::convertColourValue */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getBestColourVertexElementType()
 * Type:       static method
 * Definition: static VertexElementType Ogre::VertexElement::getBestColourVertexElementType
 * Signature:  ()Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getBestColourVertexElementType (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::VertexElement with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::VertexElementType _cpp_result = Ogre::VertexElement::getBestColourVertexElementType(); 
   return _cpp_result;
} /* static VertexElementType Ogre::VertexElement::getBestColourVertexElementType */


/*
 * Class:      org.ogre4j.VertexElement
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::VertexElement::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::VertexElement 
   // cast pointer to C++ object 
   Ogre::VertexElement* _cpp_this = reinterpret_cast<Ogre::VertexElement*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::VertexElement::__delete */
