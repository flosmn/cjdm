///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_FileSystemArchive.h"

// import header files of original library
#include <OgreFileSystem.h>



/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     FileSystemArchive()
 * Type:       constructor
 * Definition: Ogre::FileSystemArchive::FileSystemArchive
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileSystemArchive__1_1createFileSystemArchive_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name, 
  jstring archType
)
{
   // constructor of class Ogre::FileSystemArchive 
   
   // parameter conversions 
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .;
  std::string _cpp_archType = ""; org::xbig::jni::to_stdstring(_jni_env_, archType, _cpp_archType); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::FileSystemArchive 
   Ogre::FileSystemArchive* _cpp_this = new Ogre::FileSystemArchive(_cpp_name, _cpp_archType); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::FileSystemArchive::FileSystemArchive */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     isCaseSensitive()
 * Type:       virtual method
 * Definition: bool Ogre::FileSystemArchive::isCaseSensitive
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_FileSystemArchive__1isCaseSensitive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<const Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCaseSensitive() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::FileSystemArchive::isCaseSensitive */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     load()
 * Type:       virtual method
 * Definition: void Ogre::FileSystemArchive::load
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileSystemArchive__1load (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->load();
} /* void Ogre::FileSystemArchive::load */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     unload()
 * Type:       virtual method
 * Definition: void Ogre::FileSystemArchive::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileSystemArchive__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unload();
} /* void Ogre::FileSystemArchive::unload */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     open()
 * Type:       virtual method
 * Definition: DataStreamPtr Ogre::FileSystemArchive::open
 * Signature:  (std_string)Ogre_DataStreamPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileSystemArchive__1open_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<const Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::DataStreamPtr* _cpp_result = new Ogre::DataStreamPtr( _cpp_this->open(_cpp_filename) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* DataStreamPtr Ogre::FileSystemArchive::open */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     list()
 * Type:       virtual method
 * Definition: StringVectorPtr Ogre::FileSystemArchive::list
 * Signature:  (ZZ)Ogre_StringVectorPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileSystemArchive__1list_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean recursive, 
  jboolean dirs
)
{
   // parameter conversions 
  bool _cpp_recursive = recursive ? true : false;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVectorPtr* _cpp_result = new Ogre::StringVectorPtr( _cpp_this->list(_cpp_recursive, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* StringVectorPtr Ogre::FileSystemArchive::list */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     listFileInfo()
 * Type:       virtual method
 * Definition: FileInfoListPtr Ogre::FileSystemArchive::listFileInfo
 * Signature:  (ZZ)Ogre_FileInfoListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileSystemArchive__1listFileInfo_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean recursive, 
  jboolean dirs
)
{
   // parameter conversions 
  bool _cpp_recursive = recursive ? true : false;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FileInfoListPtr* _cpp_result = new Ogre::FileInfoListPtr( _cpp_this->listFileInfo(_cpp_recursive, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* FileInfoListPtr Ogre::FileSystemArchive::listFileInfo */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     find()
 * Type:       virtual method
 * Definition: StringVectorPtr Ogre::FileSystemArchive::find
 * Signature:  (std_stringZZ)Ogre_StringVectorPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileSystemArchive__1find_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pattern, 
  jboolean recursive, 
  jboolean dirs
)
{
   // parameter conversions 
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  bool _cpp_recursive = recursive ? true : false;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVectorPtr* _cpp_result = new Ogre::StringVectorPtr( _cpp_this->find(_cpp_pattern, _cpp_recursive, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* StringVectorPtr Ogre::FileSystemArchive::find */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     findFileInfo()
 * Type:       virtual method
 * Definition: FileInfoListPtr Ogre::FileSystemArchive::findFileInfo
 * Signature:  (std_stringZZ)Ogre_FileInfoListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileSystemArchive__1findFileInfo_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pattern, 
  jboolean recursive, 
  jboolean dirs
)
{
   // parameter conversions 
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  bool _cpp_recursive = recursive ? true : false;
  bool _cpp_dirs = dirs ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::FileInfoListPtr* _cpp_result = new Ogre::FileInfoListPtr( _cpp_this->findFileInfo(_cpp_pattern, _cpp_recursive, _cpp_dirs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* FileInfoListPtr Ogre::FileSystemArchive::findFileInfo */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     exists()
 * Type:       virtual method
 * Definition: bool Ogre::FileSystemArchive::exists
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_FileSystemArchive__1exists_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->exists(_cpp_filename) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::FileSystemArchive::exists */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     getModifiedTime()
 * Type:       virtual method
 * Definition: time_t Ogre::FileSystemArchive::getModifiedTime
 * Signature:  (std_string)J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_FileSystemArchive__1getModifiedTime_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   const time_t _cpp_result = _cpp_this->getModifiedTime(_cpp_filename) ; 
   return _cpp_result;
} /* time_t Ogre::FileSystemArchive::getModifiedTime */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     setIgnoreHidden()
 * Type:       static method
 * Definition: static void Ogre::FileSystemArchive::setIgnoreHidden
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileSystemArchive__1setIgnoreHidden_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jboolean ignore
)
{
   // static method of class Ogre::FileSystemArchive without return value 
   // parameter conversions 
  bool _cpp_ignore = ignore ? true : false; 
   
   // call library method 
   Ogre::FileSystemArchive::setIgnoreHidden(_cpp_ignore);
} /* static void Ogre::FileSystemArchive::setIgnoreHidden */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     getIgnoreHidden()
 * Type:       static method
 * Definition: static bool Ogre::FileSystemArchive::getIgnoreHidden
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_FileSystemArchive__1getIgnoreHidden (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::FileSystemArchive with return value 
   // parameter conversions 
   
   // call library method 
   const bool _cpp_result = Ogre::FileSystemArchive::getIgnoreHidden(); 
   return _cpp_result ? 1 : 0;
} /* static bool Ogre::FileSystemArchive::getIgnoreHidden */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Archive::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_FileSystemArchive__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<const Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Archive::getName */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     getType()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Archive::getType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_FileSystemArchive__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<const Ogre::FileSystemArchive*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Archive::getType */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::FileSystemArchive::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileSystemArchive__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::FileSystemArchive 
   // cast pointer to C++ object 
   Ogre::FileSystemArchive* _cpp_this = reinterpret_cast<Ogre::FileSystemArchive*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::FileSystemArchive::__delete */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     getms_IgnoreHidden()
 * Type:       getter for public attribute
 * Definition: bool Ogre::FileSystemArchive::ms_IgnoreHidden
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_FileSystemArchive__1getms_1IgnoreHidden (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const bool _cpp_result = Ogre::FileSystemArchive::ms_IgnoreHidden ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::FileSystemArchive::ms_IgnoreHidden */


/*
 * Class:      org.ogre4j.FileSystemArchive
 * Method:     setms_IgnoreHidden()
 * Type:       setter for public attribute
 * Definition: bool Ogre::FileSystemArchive::ms_IgnoreHidden
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_FileSystemArchive__1setms_1IgnoreHidden (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // call library method 
   Ogre::FileSystemArchive::ms_IgnoreHidden = _cpp__jni_value_;
} /* bool Ogre::FileSystemArchive::ms_IgnoreHidden */
