///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ProgressiveMesh.h"

// import header files of original library
#include <OgreProgressiveMesh.h>



/*
 * Class:      org.ogre4j.ProgressiveMesh
 * Method:     ProgressiveMesh()
 * Type:       constructor
 * Definition: Ogre::ProgressiveMesh::ProgressiveMesh
 * Signature:  (Ogre_VertexDataOgre_IndexData)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ProgressiveMesh__1_1createProgressiveMesh_1_1VertexDataPIndexDataP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexData, 
  jlong indexData
)
{
   // constructor of class Ogre::ProgressiveMesh 
   
   // parameter conversions 
  const Ogre::VertexData* _cpp_vertexData = reinterpret_cast< const Ogre::VertexData* >(vertexData);
  const Ogre::IndexData* _cpp_indexData = reinterpret_cast< const Ogre::IndexData* >(indexData); 
   
   // create new instance of class Ogre::ProgressiveMesh 
   Ogre::ProgressiveMesh* _cpp_this = new Ogre::ProgressiveMesh(_cpp_vertexData, _cpp_indexData); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ProgressiveMesh::ProgressiveMesh */


/*
 * Class:      org.ogre4j.ProgressiveMesh
 * Method:     addExtraVertexPositionBuffer()
 * Type:       virtual method
 * Definition: virtual void Ogre::ProgressiveMesh::addExtraVertexPositionBuffer
 * Signature:  (Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ProgressiveMesh__1addExtraVertexPositionBuffer_1_1VertexDataP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vertexData
)
{
   // parameter conversions 
  const Ogre::VertexData* _cpp_vertexData = reinterpret_cast< const Ogre::VertexData* >(vertexData); 
   
   // cast pointer to C++ object 
   Ogre::ProgressiveMesh* _cpp_this = reinterpret_cast<Ogre::ProgressiveMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addExtraVertexPositionBuffer(_cpp_vertexData);
} /* virtual void Ogre::ProgressiveMesh::addExtraVertexPositionBuffer */


/*
 * Class:      org.ogre4j.ProgressiveMesh
 * Method:     build()
 * Type:       virtual method
 * Definition: virtual void Ogre::ProgressiveMesh::build
 * Signature:  (unsigned_shortOgre_ProgressiveMesh_LODFaceListOgre_ProgressiveMesh_VertexReductionQuotafloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ProgressiveMesh__1build_1_1ushortvLODFaceListpVertexReductionQuotavRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numLevels, 
  jlong outList, 
  jint quota, 
  jfloat reductionValue
)
{
   // parameter conversions 
  unsigned short _cpp_numLevels = numLevels;
  Ogre::ProgressiveMesh::LODFaceList* _cpp_outList = reinterpret_cast< Ogre::ProgressiveMesh::LODFaceList* >(outList);
  Ogre::ProgressiveMesh::VertexReductionQuota _cpp_quota = (Ogre::ProgressiveMesh::VertexReductionQuota)quota;
  float _cpp_reductionValue = reductionValue; 
   
   // cast pointer to C++ object 
   Ogre::ProgressiveMesh* _cpp_this = reinterpret_cast<Ogre::ProgressiveMesh*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->build(_cpp_numLevels, _cpp_outList, _cpp_quota, _cpp_reductionValue);
} /* virtual void Ogre::ProgressiveMesh::build */


/*
 * Class:      org.ogre4j.ProgressiveMesh
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ProgressiveMesh::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ProgressiveMesh__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ProgressiveMesh 
   // cast pointer to C++ object 
   Ogre::ProgressiveMesh* _cpp_this = reinterpret_cast<Ogre::ProgressiveMesh*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ProgressiveMesh::__delete */
