///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_StaticGeometry_00024GeometryBucket.h"

// import header files of original library
#include <OgreStaticGeometry.h>



/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     GeometryBucket()
 * Type:       constructor
 * Definition: Ogre::StaticGeometry::GeometryBucket::GeometryBucket
 * Signature:  (Ogre_StaticGeometry_MaterialBucketstd_stringOgre_VertexDataOgre_IndexData)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1_1createGeometryBucket_1_1MaterialBucketpStringRVertexDataPIndexDataP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jstring formatString, 
  jlong vData, 
  jlong iData
)
{
   // constructor of class Ogre::StaticGeometry::GeometryBucket 
   
   // parameter conversions 
  Ogre::StaticGeometry::MaterialBucket* _cpp_parent = reinterpret_cast< Ogre::StaticGeometry::MaterialBucket* >(parent);
  std::string _cpp_formatString = ""; org::xbig::jni::to_stdstring(_jni_env_, formatString, _cpp_formatString); // calls c-tor only. Not operator= .;
  const Ogre::VertexData* _cpp_vData = reinterpret_cast< const Ogre::VertexData* >(vData);
  const Ogre::IndexData* _cpp_iData = reinterpret_cast< const Ogre::IndexData* >(iData); 
   
   // create new instance of class Ogre::StaticGeometry::GeometryBucket 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = new Ogre::StaticGeometry::GeometryBucket(_cpp_parent, _cpp_formatString, _cpp_vData, _cpp_iData); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::StaticGeometry::GeometryBucket::GeometryBucket */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: MaterialBucket* Ogre::StaticGeometry::GeometryBucket::getParent
 * Signature:  ()Ogre_StaticGeometry_MaterialBucket
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StaticGeometry::MaterialBucket* _cpp_result = _cpp_this->getParent() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* MaterialBucket* Ogre::StaticGeometry::GeometryBucket::getParent */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getVertexData()
 * Type:       non-virtual method
 * Definition: const VertexData* Ogre::StaticGeometry::GeometryBucket::getVertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getVertexData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::VertexData* _cpp_result = _cpp_this->getVertexData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const VertexData* Ogre::StaticGeometry::GeometryBucket::getVertexData */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getIndexData()
 * Type:       non-virtual method
 * Definition: const IndexData* Ogre::StaticGeometry::GeometryBucket::getIndexData
 * Signature:  ()Ogre_IndexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getIndexData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IndexData* _cpp_result = _cpp_this->getIndexData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const IndexData* Ogre::StaticGeometry::GeometryBucket::getIndexData */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: const MaterialPtr& Ogre::StaticGeometry::GeometryBucket::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = & _cpp_this->getMaterial() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MaterialPtr& Ogre::StaticGeometry::GeometryBucket::getMaterial */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: Technique* Ogre::StaticGeometry::GeometryBucket::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Technique* Ogre::StaticGeometry::GeometryBucket::getTechnique */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: void Ogre::StaticGeometry::GeometryBucket::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_op = reinterpret_cast< Ogre::RenderOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getRenderOperation(*_cpp_op);
} /* void Ogre::StaticGeometry::GeometryBucket::getRenderOperation */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: void Ogre::StaticGeometry::GeometryBucket::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_xform = reinterpret_cast< Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getWorldTransforms(_cpp_xform);
} /* void Ogre::StaticGeometry::GeometryBucket::getWorldTransforms */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::StaticGeometry::GeometryBucket::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredViewDepth(_cpp_cam) ; 
   return _cpp_result;
} /* Real Ogre::StaticGeometry::GeometryBucket::getSquaredViewDepth */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::StaticGeometry::GeometryBucket::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->getLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LightList& Ogre::StaticGeometry::GeometryBucket::getLights */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: bool Ogre::StaticGeometry::GeometryBucket::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastsShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::StaticGeometry::GeometryBucket::getCastsShadows */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     assign()
 * Type:       non-virtual method
 * Definition: bool Ogre::StaticGeometry::GeometryBucket::assign
 * Signature:  (Ogre_StaticGeometry_QueuedGeometry)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1assign_1_1QueuedGeometryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong qsm
)
{
   // parameter conversions 
  Ogre::StaticGeometry::QueuedGeometry* _cpp_qsm = reinterpret_cast< Ogre::StaticGeometry::QueuedGeometry* >(qsm); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->assign(_cpp_qsm) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::StaticGeometry::GeometryBucket::assign */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     build()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::GeometryBucket::build
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1build_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean stencilShadows
)
{
   // parameter conversions 
  bool _cpp_stencilShadows = stencilShadows ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->build(_cpp_stencilShadows);
} /* void Ogre::StaticGeometry::GeometryBucket::build */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     dump()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::GeometryBucket::dump
 * Signature:  (std_ofstream)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1dump_1_1std_1ofstreamr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong of
)
{
   // parameter conversions 
  std::ofstream* _cpp_of = reinterpret_cast< std::ofstream* >(of); 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->dump(*_cpp_of);
} /* void Ogre::StaticGeometry::GeometryBucket::dump */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->preRender(_cpp_sm, _cpp_rsys) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::preRender */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postRender(_cpp_sm, _cpp_rsys);
} /* virtual void Ogre::Renderable::postRender */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumWorldTransforms() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Renderable::getNumWorldTransforms */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
)
{
   // parameter conversions 
  bool _cpp_useIdentityProjection = useIdentityProjection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityProjection(_cpp_useIdentityProjection);
} /* void Ogre::Renderable::setUseIdentityProjection */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityProjection() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityProjection */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
)
{
   // parameter conversions 
  bool _cpp_useIdentityView = useIdentityView ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityView(_cpp_useIdentityView);
} /* void Ogre::Renderable::setUseIdentityView */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityView() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityView */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  size_t _cpp_index = index;
  const Ogre::Vector4* _cpp_value = reinterpret_cast< const Ogre::Vector4* >(value); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomParameter(_cpp_index, *_cpp_value);
} /* void Ogre::Renderable::setCustomParameter */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCustomParameter(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4& Ogre::Renderable::getCustomParameter */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
)
{
   // parameter conversions 
  const Ogre::GpuProgramParameters::AutoConstantEntry* _cpp_constantEntry = reinterpret_cast< const Ogre::GpuProgramParameters::AutoConstantEntry* >(constantEntry);
  Ogre::GpuProgramParameters* _cpp_params = reinterpret_cast< Ogre::GpuProgramParameters* >(params); 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateCustomGpuParameter(*_cpp_constantEntry, _cpp_params);
} /* virtual void Ogre::Renderable::_updateCustomGpuParameter */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
)
{
   // parameter conversions 
  bool _cpp_override = override ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_override);
} /* virtual void Ogre::Renderable::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPolygonModeOverrideable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserAny(*_cpp_anything);
} /* virtual void Ogre::Renderable::setUserAny */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::Renderable::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::Renderable::getUserAny */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable::RenderSystemData* _cpp_result = _cpp_this->getRenderSystemData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderSystemData* Ogre::Renderable::getRenderSystemData */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  Ogre::Renderable::RenderSystemData* _cpp_val = reinterpret_cast< Ogre::Renderable::RenderSystemData* >(val); 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderSystemData(_cpp_val);
} /* virtual void Ogre::Renderable::setRenderSystemData */


/*
 * Class:      org.ogre4j.StaticGeometry.00024GeometryBucket
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::StaticGeometry::GeometryBucket::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry_00024GeometryBucket__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::StaticGeometry::GeometryBucket 
   // cast pointer to C++ object 
   Ogre::StaticGeometry::GeometryBucket* _cpp_this = reinterpret_cast<Ogre::StaticGeometry::GeometryBucket*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::StaticGeometry::GeometryBucket::__delete */
