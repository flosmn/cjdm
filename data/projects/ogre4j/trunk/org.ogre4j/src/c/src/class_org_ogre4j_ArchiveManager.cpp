///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ArchiveManager.h"

// import header files of original library
#include <OgreArchiveManager.h>



/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     ArchiveManager()
 * Type:       constructor
 * Definition: Ogre::ArchiveManager::ArchiveManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1_1createArchiveManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::ArchiveManager 
   
   // parameter conversions 
   
   // create new instance of class Ogre::ArchiveManager 
   Ogre::ArchiveManager* _cpp_this = new Ogre::ArchiveManager(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ArchiveManager::ArchiveManager */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     load()
 * Type:       non-virtual method
 * Definition: Archive* Ogre::ArchiveManager::load
 * Signature:  (std_stringstd_string)Ogre_Archive
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1load_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename, 
  jstring archiveType
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .;
  std::string _cpp_archiveType = ""; org::xbig::jni::to_stdstring(_jni_env_, archiveType, _cpp_archiveType); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ArchiveManager* _cpp_this = reinterpret_cast<Ogre::ArchiveManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Archive* _cpp_result = _cpp_this->load(_cpp_filename, _cpp_archiveType) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Archive* Ogre::ArchiveManager::load */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     unload()
 * Type:       non-virtual method
 * Definition: void Ogre::ArchiveManager::unload
 * Signature:  (Ogre_Archive)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1unload_1_1Archivep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong arch
)
{
   // parameter conversions 
  Ogre::Archive* _cpp_arch = reinterpret_cast< Ogre::Archive* >(arch); 
   
   // cast pointer to C++ object 
   Ogre::ArchiveManager* _cpp_this = reinterpret_cast<Ogre::ArchiveManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unload(_cpp_arch);
} /* void Ogre::ArchiveManager::unload */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     unload()
 * Type:       non-virtual method
 * Definition: void Ogre::ArchiveManager::unload
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1unload_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ArchiveManager* _cpp_this = reinterpret_cast<Ogre::ArchiveManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->unload(_cpp_filename);
} /* void Ogre::ArchiveManager::unload */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     getArchiveIterator()
 * Type:       non-virtual method
 * Definition: ArchiveMapIterator Ogre::ArchiveManager::getArchiveIterator
 * Signature:  ()Ogre_ArchiveManager_ArchiveMapIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1getArchiveIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ArchiveManager* _cpp_this = reinterpret_cast<Ogre::ArchiveManager*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ArchiveManager::ArchiveMapIterator* _cpp_result = new Ogre::ArchiveManager::ArchiveMapIterator( _cpp_this->getArchiveIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ArchiveMapIterator Ogre::ArchiveManager::getArchiveIterator */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     addArchiveFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::ArchiveManager::addArchiveFactory
 * Signature:  (Ogre_ArchiveFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1addArchiveFactory_1_1ArchiveFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong factory
)
{
   // parameter conversions 
  Ogre::ArchiveFactory* _cpp_factory = reinterpret_cast< Ogre::ArchiveFactory* >(factory); 
   
   // cast pointer to C++ object 
   Ogre::ArchiveManager* _cpp_this = reinterpret_cast<Ogre::ArchiveManager*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addArchiveFactory(_cpp_factory);
} /* void Ogre::ArchiveManager::addArchiveFactory */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static ArchiveManager& Ogre::ArchiveManager::getSingleton
 * Signature:  ()Ogre_ArchiveManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ArchiveManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ArchiveManager* _cpp_result = & Ogre::ArchiveManager::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ArchiveManager& Ogre::ArchiveManager::getSingleton */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static ArchiveManager* Ogre::ArchiveManager::getSingletonPtr
 * Signature:  ()Ogre_ArchiveManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::ArchiveManager with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::ArchiveManager* _cpp_result = Ogre::ArchiveManager::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static ArchiveManager* Ogre::ArchiveManager::getSingletonPtr */


/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ArchiveManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ArchiveManager 
   // cast pointer to C++ object 
   Ogre::ArchiveManager* _cpp_this = reinterpret_cast<Ogre::ArchiveManager*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ArchiveManager::__delete */
