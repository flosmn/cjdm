///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Frustum.h"

// import header files of original library
#include <OgreFrustum.h>



/*
 * Class:      org.ogre4j.Frustum
 * Method:     Frustum()
 * Type:       constructor
 * Definition: Ogre::Frustum::Frustum
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1_1createFrustum (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Frustum 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Frustum 
   Ogre::Frustum* _cpp_this = new Ogre::Frustum(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Frustum::Frustum */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setFOVy()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setFOVy
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setFOVy_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fovy
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_fovy = reinterpret_cast< const Ogre::Radian* >(fovy); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFOVy(*_cpp_fovy);
} /* virtual void Ogre::Frustum::setFOVy */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getFOVy()
 * Type:       virtual method
 * Definition: virtual const Radian& Ogre::Frustum::getFOVy
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getFOVy_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = & _cpp_this->getFOVy() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Radian& Ogre::Frustum::getFOVy */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setNearClipDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setNearClipDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setNearClipDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat nearDist
)
{
   // parameter conversions 
  float _cpp_nearDist = nearDist; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setNearClipDistance(_cpp_nearDist);
} /* virtual void Ogre::Frustum::setNearClipDistance */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getNearClipDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::Frustum::getNearClipDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getNearClipDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getNearClipDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::Frustum::getNearClipDistance */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setFarClipDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setFarClipDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setFarClipDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat farDist
)
{
   // parameter conversions 
  float _cpp_farDist = farDist; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFarClipDistance(_cpp_farDist);
} /* virtual void Ogre::Frustum::setFarClipDistance */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getFarClipDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::Frustum::getFarClipDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getFarClipDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFarClipDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::Frustum::getFarClipDistance */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setAspectRatio()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setAspectRatio
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setAspectRatio_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat ratio
)
{
   // parameter conversions 
  float _cpp_ratio = ratio; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAspectRatio(_cpp_ratio);
} /* virtual void Ogre::Frustum::setAspectRatio */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getAspectRatio()
 * Type:       virtual method
 * Definition: virtual Real Ogre::Frustum::getAspectRatio
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getAspectRatio_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getAspectRatio() ; 
   return _cpp_result;
} /* virtual Real Ogre::Frustum::getAspectRatio */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setFrustumOffset()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setFrustumOffset
 * Signature:  (Ogre_Vector2)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setFrustumOffset_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong offset
)
{
   // parameter conversions 
  const Ogre::Vector2* _cpp_offset = reinterpret_cast< const Ogre::Vector2* >(offset); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFrustumOffset(*_cpp_offset);
} /* virtual void Ogre::Frustum::setFrustumOffset */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setFrustumOffset()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setFrustumOffset
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setFrustumOffset_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat horizontal, 
  jfloat vertical
)
{
   // parameter conversions 
  float _cpp_horizontal = horizontal;
  float _cpp_vertical = vertical; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFrustumOffset(_cpp_horizontal, _cpp_vertical);
} /* virtual void Ogre::Frustum::setFrustumOffset */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getFrustumOffset()
 * Type:       virtual method
 * Definition: virtual const Vector2& Ogre::Frustum::getFrustumOffset
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getFrustumOffset_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector2* _cpp_result = & _cpp_this->getFrustumOffset() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector2& Ogre::Frustum::getFrustumOffset */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setFocalLength()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setFocalLength
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setFocalLength_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat focalLength
)
{
   // parameter conversions 
  float _cpp_focalLength = focalLength; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFocalLength(_cpp_focalLength);
} /* virtual void Ogre::Frustum::setFocalLength */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getFocalLength()
 * Type:       virtual method
 * Definition: virtual Real Ogre::Frustum::getFocalLength
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getFocalLength_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getFocalLength() ; 
   return _cpp_result;
} /* virtual Real Ogre::Frustum::getFocalLength */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setFrustumExtents()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setFrustumExtents
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setFrustumExtents_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat right, 
  jfloat top, 
  jfloat bottom
)
{
   // parameter conversions 
  float _cpp_left = left;
  float _cpp_right = right;
  float _cpp_top = top;
  float _cpp_bottom = bottom; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setFrustumExtents(_cpp_left, _cpp_right, _cpp_top, _cpp_bottom);
} /* virtual void Ogre::Frustum::setFrustumExtents */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     resetFrustumExtents()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::resetFrustumExtents
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1resetFrustumExtents (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetFrustumExtents();
} /* virtual void Ogre::Frustum::resetFrustumExtents */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getFrustumExtents()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::getFrustumExtents
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1getFrustumExtents_1_1RealrRealrRealrRealr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong outleft, 
  jlong outright, 
  jlong outtop, 
  jlong outbottom
)
{
   // parameter conversions 
  float* _cpp_outleft = reinterpret_cast<float*>(outleft);
  float* _cpp_outright = reinterpret_cast<float*>(outright);
  float* _cpp_outtop = reinterpret_cast<float*>(outtop);
  float* _cpp_outbottom = reinterpret_cast<float*>(outbottom); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getFrustumExtents(*_cpp_outleft, *_cpp_outright, *_cpp_outtop, *_cpp_outbottom);
} /* virtual void Ogre::Frustum::getFrustumExtents */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getProjectionMatrixRS()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::Frustum::getProjectionMatrixRS
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getProjectionMatrixRS_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getProjectionMatrixRS() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::Frustum::getProjectionMatrixRS */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getProjectionMatrixWithRSDepth()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::Frustum::getProjectionMatrixWithRSDepth
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getProjectionMatrixWithRSDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getProjectionMatrixWithRSDepth() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::Frustum::getProjectionMatrixWithRSDepth */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getProjectionMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::Frustum::getProjectionMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getProjectionMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getProjectionMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::Frustum::getProjectionMatrix */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getViewMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::Frustum::getViewMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getViewMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getViewMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::Frustum::getViewMatrix */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     calcViewMatrixRelative()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::calcViewMatrixRelative
 * Signature:  (Ogre_Vector3Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1calcViewMatrixRelative_1_1Vector3RMatrix4r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong relPos, 
  jlong matToUpdate
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_relPos = reinterpret_cast< const Ogre::Vector3* >(relPos);
  Ogre::Matrix4* _cpp_matToUpdate = reinterpret_cast< Ogre::Matrix4* >(matToUpdate); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->calcViewMatrixRelative(*_cpp_relPos, *_cpp_matToUpdate);
} /* virtual void Ogre::Frustum::calcViewMatrixRelative */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setCustomViewMatrix()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setCustomViewMatrix
 * Signature:  (ZOgre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setCustomViewMatrix_1_1bvMatrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jlong viewMatrix
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  const Ogre::Matrix4* _cpp_viewMatrix = reinterpret_cast< const Ogre::Matrix4* >(viewMatrix); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomViewMatrix(_cpp_enable, *_cpp_viewMatrix);
} /* virtual void Ogre::Frustum::setCustomViewMatrix */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isCustomViewMatrixEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::isCustomViewMatrixEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isCustomViewMatrixEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCustomViewMatrixEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::isCustomViewMatrixEnabled */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setCustomProjectionMatrix()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setCustomProjectionMatrix
 * Signature:  (ZOgre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setCustomProjectionMatrix_1_1bvMatrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jlong projectionMatrix
)
{
   // parameter conversions 
  bool _cpp_enable = enable ? true : false;
  const Ogre::Matrix4* _cpp_projectionMatrix = reinterpret_cast< const Ogre::Matrix4* >(projectionMatrix); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomProjectionMatrix(_cpp_enable, *_cpp_projectionMatrix);
} /* virtual void Ogre::Frustum::setCustomProjectionMatrix */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isCustomProjectionMatrixEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::isCustomProjectionMatrixEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isCustomProjectionMatrixEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCustomProjectionMatrixEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::isCustomProjectionMatrixEnabled */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getFrustumPlanes()
 * Type:       virtual method
 * Definition: virtual const Plane* Ogre::Frustum::getFrustumPlanes
 * Signature:  ()Ogre_Plane
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getFrustumPlanes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane* _cpp_result = _cpp_this->getFrustumPlanes() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Plane* Ogre::Frustum::getFrustumPlanes */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getFrustumPlane()
 * Type:       virtual method
 * Definition: virtual const Plane& Ogre::Frustum::getFrustumPlane
 * Signature:  (S)Ogre_Plane
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getFrustumPlane_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint plane
)
{
   // parameter conversions 
  unsigned short _cpp_plane = plane; 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane* _cpp_result = & _cpp_this->getFrustumPlane(_cpp_plane) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Plane& Ogre::Frustum::getFrustumPlane */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::isVisible
 * Signature:  (Ogre_AxisAlignedBoxOgre_FrustumPlane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isVisible_1_1AxisAlignedBoxRFrustumPlanep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bound, 
  jlong culledBy
)
{
   // parameter conversions 
  const Ogre::AxisAlignedBox* _cpp_bound = reinterpret_cast< const Ogre::AxisAlignedBox* >(bound);
  Ogre::FrustumPlane* _cpp_culledBy = reinterpret_cast< Ogre::FrustumPlane* >(culledBy); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible(*_cpp_bound, _cpp_culledBy) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::isVisible */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::isVisible
 * Signature:  (Ogre_SphereOgre_FrustumPlane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isVisible_1_1SphereRFrustumPlanep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bound, 
  jlong culledBy
)
{
   // parameter conversions 
  const Ogre::Sphere* _cpp_bound = reinterpret_cast< const Ogre::Sphere* >(bound);
  Ogre::FrustumPlane* _cpp_culledBy = reinterpret_cast< Ogre::FrustumPlane* >(culledBy); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible(*_cpp_bound, _cpp_culledBy) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::isVisible */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::isVisible
 * Signature:  (Ogre_Vector3Ogre_FrustumPlane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isVisible_1_1Vector3RFrustumPlanep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vert, 
  jlong culledBy
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_vert = reinterpret_cast< const Ogre::Vector3* >(vert);
  Ogre::FrustumPlane* _cpp_culledBy = reinterpret_cast< Ogre::FrustumPlane* >(culledBy); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible(*_cpp_vert, _cpp_culledBy) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::isVisible */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getTypeFlags()
 * Type:       virtual method
 * Definition: uint32 Ogre::Frustum::getTypeFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getTypeFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getTypeFlags() ; 
   return _cpp_result;
} /* uint32 Ogre::Frustum::getTypeFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getBoundingBox()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::Frustum::getBoundingBox
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getBoundingBox_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getBoundingBox() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::Frustum::getBoundingBox */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getBoundingRadius()
 * Type:       virtual method
 * Definition: Real Ogre::Frustum::getBoundingRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getBoundingRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getBoundingRadius() ; 
   return _cpp_result;
} /* Real Ogre::Frustum::getBoundingRadius */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: void Ogre::Frustum::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
)
{
   // parameter conversions 
  Ogre::RenderQueue* _cpp_queue = reinterpret_cast< Ogre::RenderQueue* >(queue); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateRenderQueue(_cpp_queue);
} /* void Ogre::Frustum::_updateRenderQueue */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getMovableType()
 * Type:       virtual method
 * Definition: const String& Ogre::Frustum::getMovableType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Frustum__1getMovableType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getMovableType() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::Frustum::getMovableType */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _notifyCurrentCamera()
 * Type:       virtual method
 * Definition: void Ogre::Frustum::_notifyCurrentCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1notifyCurrentCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  Ogre::Camera* _cpp_cam = reinterpret_cast< Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCurrentCamera(_cpp_cam);
} /* void Ogre::Frustum::_notifyCurrentCamera */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: const MaterialPtr& Ogre::Frustum::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MaterialPtr* _cpp_result = & _cpp_this->getMaterial() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const MaterialPtr& Ogre::Frustum::getMaterial */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: void Ogre::Frustum::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
)
{
   // parameter conversions 
  Ogre::RenderOperation* _cpp_op = reinterpret_cast< Ogre::RenderOperation* >(op); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getRenderOperation(*_cpp_op);
} /* void Ogre::Frustum::getRenderOperation */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: void Ogre::Frustum::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
)
{
   // parameter conversions 
  Ogre::Matrix4* _cpp_xform = reinterpret_cast< Ogre::Matrix4* >(xform); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getWorldTransforms(_cpp_xform);
} /* void Ogre::Frustum::getWorldTransforms */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::Frustum::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredViewDepth(_cpp_cam) ; 
   return _cpp_result;
} /* Real Ogre::Frustum::getSquaredViewDepth */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::Frustum::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->getLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const LightList& Ogre::Frustum::getLights */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getWorldSpaceCorners()
 * Type:       virtual method
 * Definition: virtual const Vector3* Ogre::Frustum::getWorldSpaceCorners
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getWorldSpaceCorners_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = _cpp_this->getWorldSpaceCorners() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3* Ogre::Frustum::getWorldSpaceCorners */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setProjectionType()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setProjectionType
 * Signature:  (Ogre_ProjectionType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setProjectionType_1_1ProjectionTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint pt
)
{
   // parameter conversions 
  Ogre::ProjectionType _cpp_pt = (Ogre::ProjectionType)pt; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setProjectionType(_cpp_pt);
} /* virtual void Ogre::Frustum::setProjectionType */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getProjectionType()
 * Type:       virtual method
 * Definition: virtual ProjectionType Ogre::Frustum::getProjectionType
 * Signature:  ()Ogre_ProjectionType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Frustum__1getProjectionType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ProjectionType _cpp_result = _cpp_this->getProjectionType() ; 
   return _cpp_result;
} /* virtual ProjectionType Ogre::Frustum::getProjectionType */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setOrthoWindow()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setOrthoWindow
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setOrthoWindow_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat w, 
  jfloat h
)
{
   // parameter conversions 
  float _cpp_w = w;
  float _cpp_h = h; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setOrthoWindow(_cpp_w, _cpp_h);
} /* virtual void Ogre::Frustum::setOrthoWindow */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setOrthoWindowHeight()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setOrthoWindowHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setOrthoWindowHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat h
)
{
   // parameter conversions 
  float _cpp_h = h; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setOrthoWindowHeight(_cpp_h);
} /* virtual void Ogre::Frustum::setOrthoWindowHeight */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setOrthoWindowWidth()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::setOrthoWindowWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setOrthoWindowWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat w
)
{
   // parameter conversions 
  float _cpp_w = w; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setOrthoWindowWidth(_cpp_w);
} /* virtual void Ogre::Frustum::setOrthoWindowWidth */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getOrthoWindowHeight()
 * Type:       virtual method
 * Definition: virtual Real Ogre::Frustum::getOrthoWindowHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getOrthoWindowHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getOrthoWindowHeight() ; 
   return _cpp_result;
} /* virtual Real Ogre::Frustum::getOrthoWindowHeight */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getOrthoWindowWidth()
 * Type:       virtual method
 * Definition: virtual Real Ogre::Frustum::getOrthoWindowWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getOrthoWindowWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getOrthoWindowWidth() ; 
   return _cpp_result;
} /* virtual Real Ogre::Frustum::getOrthoWindowWidth */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     enableReflection()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::enableReflection
 * Signature:  (Ogre_Plane)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1enableReflection_1_1PlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_p = reinterpret_cast< const Ogre::Plane* >(p); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->enableReflection(*_cpp_p);
} /* virtual void Ogre::Frustum::enableReflection */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     enableReflection()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::enableReflection
 * Signature:  (Ogre_MovablePlane)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1enableReflection_1_1MovablePlaneP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  const Ogre::MovablePlane* _cpp_p = reinterpret_cast< const Ogre::MovablePlane* >(p); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->enableReflection(_cpp_p);
} /* virtual void Ogre::Frustum::enableReflection */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     disableReflection()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::disableReflection
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1disableReflection (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->disableReflection();
} /* virtual void Ogre::Frustum::disableReflection */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isReflected()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::isReflected
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isReflected_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isReflected() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::isReflected */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getReflectionMatrix()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::Frustum::getReflectionMatrix
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getReflectionMatrix_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->getReflectionMatrix() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::Frustum::getReflectionMatrix */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getReflectionPlane()
 * Type:       virtual method
 * Definition: virtual const Plane& Ogre::Frustum::getReflectionPlane
 * Signature:  ()Ogre_Plane
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getReflectionPlane_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Plane* _cpp_result = & _cpp_this->getReflectionPlane() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Plane& Ogre::Frustum::getReflectionPlane */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     projectSphere()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::projectSphere
 * Signature:  (Ogre_Spherefloatfloatfloatfloat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1projectSphere_1_1SphereRRealpRealpRealpRealp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sphere, 
  jlong left, 
  jlong top, 
  jlong right, 
  jlong bottom
)
{
   // parameter conversions 
  const Ogre::Sphere* _cpp_sphere = reinterpret_cast< const Ogre::Sphere* >(sphere);
  float* _cpp_left = reinterpret_cast<float*>(left);
  float* _cpp_top = reinterpret_cast<float*>(top);
  float* _cpp_right = reinterpret_cast<float*>(right);
  float* _cpp_bottom = reinterpret_cast<float*>(bottom); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->projectSphere(*_cpp_sphere, _cpp_left, _cpp_top, _cpp_right, _cpp_bottom) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::projectSphere */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     enableCustomNearClipPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::enableCustomNearClipPlane
 * Signature:  (Ogre_MovablePlane)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1enableCustomNearClipPlane_1_1MovablePlaneP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong plane
)
{
   // parameter conversions 
  const Ogre::MovablePlane* _cpp_plane = reinterpret_cast< const Ogre::MovablePlane* >(plane); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->enableCustomNearClipPlane(_cpp_plane);
} /* virtual void Ogre::Frustum::enableCustomNearClipPlane */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     enableCustomNearClipPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::enableCustomNearClipPlane
 * Signature:  (Ogre_Plane)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1enableCustomNearClipPlane_1_1PlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong plane
)
{
   // parameter conversions 
  const Ogre::Plane* _cpp_plane = reinterpret_cast< const Ogre::Plane* >(plane); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->enableCustomNearClipPlane(*_cpp_plane);
} /* virtual void Ogre::Frustum::enableCustomNearClipPlane */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     disableCustomNearClipPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::Frustum::disableCustomNearClipPlane
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1disableCustomNearClipPlane (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->disableCustomNearClipPlane();
} /* virtual void Ogre::Frustum::disableCustomNearClipPlane */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isCustomNearClipPlaneEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Frustum::isCustomNearClipPlaneEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isCustomNearClipPlaneEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isCustomNearClipPlaneEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Frustum::isCustomNearClipPlaneEnabled */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     visitRenderables()
 * Type:       virtual method
 * Definition: void Ogre::Frustum::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::Frustum::visitRenderables */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getPositionForViewUpdate()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Frustum::getPositionForViewUpdate
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getPositionForViewUpdate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getPositionForViewUpdate() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::Frustum::getPositionForViewUpdate */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getOrientationForViewUpdate()
 * Type:       virtual method
 * Definition: virtual const Quaternion& Ogre::Frustum::getOrientationForViewUpdate
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getOrientationForViewUpdate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->getOrientationForViewUpdate() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Quaternion& Ogre::Frustum::getOrientationForViewUpdate */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _notifyCreator()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyCreator
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1notifyCreator_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
)
{
   // parameter conversions 
  Ogre::MovableObjectFactory* _cpp_fact = reinterpret_cast< Ogre::MovableObjectFactory* >(fact); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyCreator(_cpp_fact);
} /* virtual void Ogre::MovableObject::_notifyCreator */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _getCreator()
 * Type:       virtual method
 * Definition: virtual MovableObjectFactory* Ogre::MovableObject::_getCreator
 * Signature:  ()Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1_1getCreator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObjectFactory* _cpp_result = _cpp_this->_getCreator() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual MovableObjectFactory* Ogre::MovableObject::_getCreator */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _notifyManager()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1notifyManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong man
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_man = reinterpret_cast< Ogre::SceneManager* >(man); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyManager(_cpp_man);
} /* virtual void Ogre::MovableObject::_notifyManager */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _getManager()
 * Type:       virtual method
 * Definition: virtual SceneManager* Ogre::MovableObject::_getManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1_1getManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneManager* _cpp_result = _cpp_this->_getManager() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneManager* Ogre::MovableObject::_getManager */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::MovableObject::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Frustum__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* virtual const String& Ogre::MovableObject::getName */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getParentNode()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::MovableObject::getParentNode
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getParentNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Node* _cpp_result = _cpp_this->getParentNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Node* Ogre::MovableObject::getParentNode */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getParentSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::MovableObject::getParentSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getParentSceneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::SceneNode* _cpp_result = _cpp_this->getParentSceneNode() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual SceneNode* Ogre::MovableObject::getParentSceneNode */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _notifyAttached()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyAttached
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1notifyAttached_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jboolean isTagPoint
)
{
   // parameter conversions 
  Ogre::Node* _cpp_parent = reinterpret_cast< Ogre::Node* >(parent);
  bool _cpp_isTagPoint = isTagPoint ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyAttached(_cpp_parent, _cpp_isTagPoint);
} /* virtual void Ogre::MovableObject::_notifyAttached */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isAttached()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isAttached
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isAttached_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isAttached() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isAttached */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     detatchFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::detatchFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1detatchFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->detatchFromParent();
} /* virtual void Ogre::MovableObject::detatchFromParent */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isInScene()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isInScene
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isInScene_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isInScene() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isInScene */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _notifyMoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::_notifyMoved
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1notifyMoved (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_notifyMoved();
} /* virtual void Ogre::MovableObject::_notifyMoved */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getWorldBoundingBox()
 * Type:       virtual method
 * Definition: virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox
 * Signature:  (Z)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getWorldBoundingBox_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getWorldBoundingBox(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const AxisAlignedBox& Ogre::MovableObject::getWorldBoundingBox */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getWorldBoundingSphere()
 * Type:       virtual method
 * Definition: virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere
 * Signature:  (Z)Ogre_Sphere
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getWorldBoundingSphere_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive
)
{
   // parameter conversions 
  bool _cpp_derive = derive ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Sphere* _cpp_result = & _cpp_this->getWorldBoundingSphere(_cpp_derive) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Sphere& Ogre::MovableObject::getWorldBoundingSphere */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* virtual void Ogre::MovableObject::setVisible */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::getVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1getVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::getVisible */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->Ogre::MovableObject::isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isVisible */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::MovableObject::setRenderingDistance */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::MovableObject::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::MovableObject::getRenderingDistance */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setUserObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserObject
 * Signature:  (Ogre_UserDefinedObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setUserObject_1_1UserDefinedObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
)
{
   // parameter conversions 
  Ogre::UserDefinedObject* _cpp_obj = reinterpret_cast< Ogre::UserDefinedObject* >(obj); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUserObject(_cpp_obj);
} /* virtual void Ogre::MovableObject::setUserObject */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getUserObject()
 * Type:       virtual method
 * Definition: virtual UserDefinedObject* Ogre::MovableObject::getUserObject
 * Signature:  ()Ogre_UserDefinedObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getUserObject (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::UserDefinedObject* _cpp_result = _cpp_this->getUserObject() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual UserDefinedObject* Ogre::MovableObject::getUserObject */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
)
{
   // parameter conversions 
  const Ogre::Any* _cpp_anything = reinterpret_cast< const Ogre::Any* >(anything); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->Ogre::MovableObject::setUserAny(*_cpp_anything);
} /* virtual void Ogre::MovableObject::setUserAny */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::MovableObject::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Any* _cpp_result = & _cpp_this->Ogre::MovableObject::getUserAny() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Any& Ogre::MovableObject::getUserAny */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* virtual void Ogre::MovableObject::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::MovableObject::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_Frustum__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::MovableObject::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _getParentNodeFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1_1getParentNodeFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Matrix4* _cpp_result = & _cpp_this->_getParentNodeFullTransform() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Matrix4& Ogre::MovableObject::_getParentNodeFullTransform */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setQueryFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     addQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1addQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addQueryFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     removeQueryFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeQueryFlags
 * Signature:  (J)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1removeQueryFlags_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeQueryFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeQueryFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getQueryFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getQueryFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getQueryFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getQueryFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::setVisibilityFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     addVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::addVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1addVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::addVisibilityFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     removeVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::removeVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1removeVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong flags
)
{
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removeVisibilityFlags(_cpp_flags);
} /* virtual void Ogre::MovableObject::removeVisibilityFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getVisibilityFlags()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::MovableObject::getVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getVisibilityFlags_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getVisibilityFlags() ; 
   return _cpp_result;
} /* virtual uint32 Ogre::MovableObject::getVisibilityFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setListener
 * Signature:  (Ogre_MovableObject_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
)
{
   // parameter conversions 
  Ogre::MovableObject::Listener* _cpp_listener = reinterpret_cast< Ogre::MovableObject::Listener* >(listener); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setListener(_cpp_listener);
} /* virtual void Ogre::MovableObject::setListener */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::MovableObject::getListener
 * Signature:  ()Ogre_MovableObject_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::MovableObject::Listener* _cpp_result = _cpp_this->getListener() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Listener* Ogre::MovableObject::getListener */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     queryLights()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::MovableObject::queryLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1queryLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = & _cpp_this->queryLights() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const LightList& Ogre::MovableObject::queryLights */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _getLightList()
 * Type:       virtual method
 * Definition: virtual LightList* Ogre::MovableObject::_getLightList
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1_1getLightList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::LightList* _cpp_result = _cpp_this->_getLightList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual LightList* Ogre::MovableObject::_getLightList */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getEdgeList()
 * Type:       virtual method
 * Definition: EdgeData* Ogre::MovableObject::getEdgeList
 * Signature:  ()Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::EdgeData* _cpp_result = _cpp_this->getEdgeList() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* EdgeData* Ogre::MovableObject::getEdgeList */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     hasEdgeList()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::hasEdgeList
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1hasEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->hasEdgeList() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::hasEdgeList */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getShadowVolumeRenderableIterator()
 * Type:       virtual method
 * Definition: ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator
 * Signature:  (Ogre_ShadowTechniqueOgre_LightOgre_HardwareIndexBufferSharedPtrZfloatJ)Ogre_ShadowCaster_ShadowRenderableListIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getShadowVolumeRenderableIterator_1_1ShadowTechniquevLightPHardwareIndexBufferSharedPtrpbvRealvLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowTechnique, 
  jlong light, 
  jlong indexBuffer, 
  jboolean extrudeVertices, 
  jfloat extrusionDist, 
  jlong flags
)
{
   // parameter conversions 
  Ogre::ShadowTechnique _cpp_shadowTechnique = (Ogre::ShadowTechnique)shadowTechnique;
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  Ogre::HardwareIndexBufferSharedPtr* _cpp_indexBuffer = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(indexBuffer);
  bool _cpp_extrudeVertices = extrudeVertices ? true : false;
  float _cpp_extrusionDist = extrusionDist;
  unsigned long _cpp_flags = flags; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ShadowCaster::ShadowRenderableListIterator* _cpp_result = new Ogre::ShadowCaster::ShadowRenderableListIterator( _cpp_this->getShadowVolumeRenderableIterator(_cpp_shadowTechnique, _cpp_light, _cpp_indexBuffer, _cpp_extrudeVertices, _cpp_extrusionDist, _cpp_flags) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ShadowRenderableListIterator Ogre::MovableObject::getShadowVolumeRenderableIterator */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getLightCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getLightCapBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getLightCapBounds() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getLightCapBounds */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getDarkCapBounds()
 * Type:       virtual method
 * Definition: const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds
 * Signature:  (Ogre_Lightfloat)Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getDarkCapBounds_1_1LightRRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jfloat dirLightExtrusionDist
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_light = reinterpret_cast< const Ogre::Light* >(light);
  float _cpp_dirLightExtrusionDist = dirLightExtrusionDist; 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AxisAlignedBox* _cpp_result = & _cpp_this->getDarkCapBounds(*_cpp_light, _cpp_dirLightExtrusionDist) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const AxisAlignedBox& Ogre::MovableObject::getDarkCapBounds */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setCastShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::MovableObject::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_enabled);
} /* void Ogre::MovableObject::setCastShadows */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: bool Ogre::MovableObject::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1getCastShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::MovableObject::getCastShadows */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getPointExtrusionDistance()
 * Type:       virtual method
 * Definition: Real Ogre::MovableObject::getPointExtrusionDistance
 * Signature:  (Ogre_Light)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getPointExtrusionDistance_1_1LightP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
)
{
   // parameter conversions 
  const Ogre::Light* _cpp_l = reinterpret_cast< const Ogre::Light* >(l); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getPointExtrusionDistance(_cpp_l) ; 
   return _cpp_result;
} /* Real Ogre::MovableObject::getPointExtrusionDistance */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::MovableObject::setDebugDisplayEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setDebugDisplayEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setDebugDisplayEnabled(_cpp_enabled);
} /* virtual void Ogre::MovableObject::setDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     isDebugDisplayEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::MovableObject::isDebugDisplayEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1isDebugDisplayEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isDebugDisplayEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::MovableObject::isDebugDisplayEnabled */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setDefaultQueryFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultQueryFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setDefaultQueryFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::Frustum without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::Frustum::setDefaultQueryFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultQueryFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getDefaultQueryFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultQueryFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getDefaultQueryFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Frustum with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::Frustum::getDefaultQueryFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultQueryFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static void Ogre::MovableObject::setDefaultVisibilityFlags
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setDefaultVisibilityFlags_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong flags
)
{
   // static method of class Ogre::Frustum without return value 
   // parameter conversions 
  unsigned int _cpp_flags = flags; 
   
   // call library method 
   Ogre::Frustum::setDefaultVisibilityFlags(_cpp_flags);
} /* static void Ogre::MovableObject::setDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getDefaultVisibilityFlags()
 * Type:       static method
 * Definition: static uint32 Ogre::MovableObject::getDefaultVisibilityFlags
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getDefaultVisibilityFlags (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Frustum with return value 
   // parameter conversions 
   
   // call library method 
   const unsigned int _cpp_result = Ogre::Frustum::getDefaultVisibilityFlags(); 
   return _cpp_result;
} /* static uint32 Ogre::MovableObject::getDefaultVisibilityFlags */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     extrudeVertices()
 * Type:       static method
 * Definition: static void Ogre::ShadowCaster::extrudeVertices
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrIOgre_Vector4float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1extrudeVertices_1_1HardwareVertexBufferSharedPtrRivVector4RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vertexBuffer, 
  jint originalVertexCount, 
  jlong lightPos, 
  jfloat extrudeDist
)
{
   // static method of class Ogre::Frustum without return value 
   // parameter conversions 
  const Ogre::HardwareVertexBufferSharedPtr* _cpp_vertexBuffer = reinterpret_cast< const Ogre::HardwareVertexBufferSharedPtr* >(vertexBuffer);
  size_t _cpp_originalVertexCount = originalVertexCount;
  const Ogre::Vector4* _cpp_lightPos = reinterpret_cast< const Ogre::Vector4* >(lightPos);
  float _cpp_extrudeDist = extrudeDist; 
   
   // call library method 
   Ogre::Frustum::extrudeVertices(*_cpp_vertexBuffer, _cpp_originalVertexCount, *_cpp_lightPos, _cpp_extrudeDist);
} /* static void Ogre::ShadowCaster::extrudeVertices */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getAnimableValueNames()
 * Type:       non-virtual method
 * Definition: const StringVector& Ogre::AnimableObject::getAnimableValueNames
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getAnimableValueNames_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StringVector* _cpp_result = & _cpp_this->getAnimableValueNames() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const StringVector& Ogre::AnimableObject::getAnimableValueNames */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     createAnimableValue()
 * Type:       virtual method
 * Definition: virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue
 * Signature:  (std_string)Ogre_AnimableValuePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1createAnimableValue_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring valueName
)
{
   // parameter conversions 
  std::string _cpp_valueName = ""; org::xbig::jni::to_stdstring(_jni_env_, valueName, _cpp_valueName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::AnimableValuePtr* _cpp_result = new Ogre::AnimableValuePtr( _cpp_this->createAnimableValue(_cpp_valueName) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual AnimableValuePtr Ogre::AnimableObject::createAnimableValue */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: virtual Technique* Ogre::Renderable::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique* _cpp_result = _cpp_this->getTechnique() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual Technique* Ogre::Renderable::getTechnique */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->preRender(_cpp_sm, _cpp_rsys) ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::preRender */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
)
{
   // parameter conversions 
  Ogre::SceneManager* _cpp_sm = reinterpret_cast< Ogre::SceneManager* >(sm);
  Ogre::RenderSystem* _cpp_rsys = reinterpret_cast< Ogre::RenderSystem* >(rsys); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->postRender(_cpp_sm, _cpp_rsys);
} /* virtual void Ogre::Renderable::postRender */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Frustum__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const unsigned short _cpp_result = _cpp_this->getNumWorldTransforms() ; 
   return _cpp_result;
} /* virtual unsigned short Ogre::Renderable::getNumWorldTransforms */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
)
{
   // parameter conversions 
  bool _cpp_useIdentityProjection = useIdentityProjection ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityProjection(_cpp_useIdentityProjection);
} /* void Ogre::Renderable::setUseIdentityProjection */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityProjection() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityProjection */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
)
{
   // parameter conversions 
  bool _cpp_useIdentityView = useIdentityView ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUseIdentityView(_cpp_useIdentityView);
} /* void Ogre::Renderable::setUseIdentityView */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getUseIdentityView() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Renderable::getUseIdentityView */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastsShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getCastsShadows */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
)
{
   // parameter conversions 
  size_t _cpp_index = index;
  const Ogre::Vector4* _cpp_value = reinterpret_cast< const Ogre::Vector4* >(value); 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCustomParameter(_cpp_index, *_cpp_value);
} /* void Ogre::Renderable::setCustomParameter */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
)
{
   // parameter conversions 
  size_t _cpp_index = index; 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector4* _cpp_result = & _cpp_this->getCustomParameter(_cpp_index) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Vector4& Ogre::Renderable::getCustomParameter */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
)
{
   // parameter conversions 
  const Ogre::GpuProgramParameters::AutoConstantEntry* _cpp_constantEntry = reinterpret_cast< const Ogre::GpuProgramParameters::AutoConstantEntry* >(constantEntry);
  Ogre::GpuProgramParameters* _cpp_params = reinterpret_cast< Ogre::GpuProgramParameters* >(params); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->_updateCustomGpuParameter(*_cpp_constantEntry, _cpp_params);
} /* virtual void Ogre::Renderable::_updateCustomGpuParameter */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
)
{
   // parameter conversions 
  bool _cpp_override = override ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setPolygonModeOverrideable(_cpp_override);
} /* virtual void Ogre::Renderable::setPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Frustum__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getPolygonModeOverrideable() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::Renderable::getPolygonModeOverrideable */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Frustum__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Renderable::RenderSystemData* _cpp_result = _cpp_this->getRenderSystemData() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual RenderSystemData* Ogre::Renderable::getRenderSystemData */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  Ogre::Renderable::RenderSystemData* _cpp_val = reinterpret_cast< Ogre::Renderable::RenderSystemData* >(val); 
   
   // cast pointer to C++ object 
   const Ogre::Frustum* _cpp_this = reinterpret_cast<const Ogre::Frustum*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderSystemData(_cpp_val);
} /* virtual void Ogre::Renderable::setRenderSystemData */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Frustum::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Frustum__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Frustum 
   // cast pointer to C++ object 
   Ogre::Frustum* _cpp_this = reinterpret_cast<Ogre::Frustum*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Frustum::__delete */


/*
 * Class:      org.ogre4j.Frustum
 * Method:     getINFINITE_FAR_PLANE_ADJUST()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Frustum::INFINITE_FAR_PLANE_ADJUST
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Frustum__1getINFINITE_1FAR_1PLANE_1ADJUST (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::Frustum::INFINITE_FAR_PLANE_ADJUST ; 
   return _cpp_result;
} /* const Real Ogre::Frustum::INFINITE_FAR_PLANE_ADJUST */
