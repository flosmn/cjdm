///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_StaticGeometry.h"

// import header files of original library
#include <OgreStaticGeometry.h>



/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     StaticGeometry()
 * Type:       constructor
 * Definition: Ogre::StaticGeometry::StaticGeometry
 * Signature:  (Ogre_SceneManagerstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry__1_1createStaticGeometry_1_1SceneManagerpStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong owner, 
  jstring name
)
{
   // constructor of class Ogre::StaticGeometry 
   
   // parameter conversions 
  Ogre::SceneManager* _cpp_owner = reinterpret_cast< Ogre::SceneManager* >(owner);
  std::string _cpp_name = ""; org::xbig::jni::to_stdstring(_jni_env_, name, _cpp_name); // calls c-tor only. Not operator= .; 
   
   // create new instance of class Ogre::StaticGeometry 
   Ogre::StaticGeometry* _cpp_this = new Ogre::StaticGeometry(_cpp_owner, _cpp_name); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::StaticGeometry::StaticGeometry */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::StaticGeometry::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_StaticGeometry__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   std::string _cpp_result = _cpp_this->getName() ; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* const String& Ogre::StaticGeometry::getName */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     addEntity()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::addEntity
 * Signature:  (Ogre_EntityOgre_Vector3Ogre_QuaternionOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1addEntity_1_1EntitypVector3RQuaternionRVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ent, 
  jlong position, 
  jlong orientation, 
  jlong scale
)
{
   // parameter conversions 
  Ogre::Entity* _cpp_ent = reinterpret_cast< Ogre::Entity* >(ent);
  const Ogre::Vector3* _cpp_position = reinterpret_cast< const Ogre::Vector3* >(position);
  const Ogre::Quaternion* _cpp_orientation = reinterpret_cast< const Ogre::Quaternion* >(orientation);
  const Ogre::Vector3* _cpp_scale = reinterpret_cast< const Ogre::Vector3* >(scale); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addEntity(_cpp_ent, *_cpp_position, *_cpp_orientation, *_cpp_scale);
} /* virtual void Ogre::StaticGeometry::addEntity */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     addSceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::addSceneNode
 * Signature:  (Ogre_SceneNode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1addSceneNode_1_1SceneNodeP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong node
)
{
   // parameter conversions 
  const Ogre::SceneNode* _cpp_node = reinterpret_cast< const Ogre::SceneNode* >(node); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addSceneNode(_cpp_node);
} /* virtual void Ogre::StaticGeometry::addSceneNode */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     build()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::build
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1build (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->build();
} /* virtual void Ogre::StaticGeometry::build */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     destroy()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::destroy
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1destroy (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->destroy();
} /* virtual void Ogre::StaticGeometry::destroy */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     reset()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reset();
} /* virtual void Ogre::StaticGeometry::reset */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
)
{
   // parameter conversions 
  float _cpp_dist = dist; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderingDistance(_cpp_dist);
} /* virtual void Ogre::StaticGeometry::setRenderingDistance */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::StaticGeometry::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_StaticGeometry__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::StaticGeometry::getRenderingDistance */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getSquaredRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::StaticGeometry::getSquaredRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_StaticGeometry__1getSquaredRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->getSquaredRenderingDistance() ; 
   return _cpp_result;
} /* virtual Real Ogre::StaticGeometry::getSquaredRenderingDistance */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
)
{
   // parameter conversions 
  bool _cpp_visible = visible ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setVisible(_cpp_visible);
} /* virtual void Ogre::StaticGeometry::setVisible */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StaticGeometry::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->isVisible() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StaticGeometry::isVisible */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     setCastShadows()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean castShadows
)
{
   // parameter conversions 
  bool _cpp_castShadows = castShadows ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setCastShadows(_cpp_castShadows);
} /* virtual void Ogre::StaticGeometry::setCastShadows */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StaticGeometry::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_StaticGeometry__1getCastShadows (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getCastShadows() ; 
   return _cpp_result ? 1 : 0;
} /* virtual bool Ogre::StaticGeometry::getCastShadows */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     setRegionDimensions()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::setRegionDimensions
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1setRegionDimensions_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong size
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_size = reinterpret_cast< const Ogre::Vector3* >(size); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRegionDimensions(*_cpp_size);
} /* virtual void Ogre::StaticGeometry::setRegionDimensions */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getRegionDimensions()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::StaticGeometry::getRegionDimensions
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry__1getRegionDimensions_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getRegionDimensions() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::StaticGeometry::getRegionDimensions */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     setOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::setOrigin
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1setOrigin_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong origin
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_origin = reinterpret_cast< const Ogre::Vector3* >(origin); 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setOrigin(*_cpp_origin);
} /* virtual void Ogre::StaticGeometry::setOrigin */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::StaticGeometry::getOrigin
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = & _cpp_this->getOrigin() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* virtual const Vector3& Ogre::StaticGeometry::getOrigin */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
)
{
   // parameter conversions 
  unsigned char _cpp_queueID = queueID; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setRenderQueueGroup(_cpp_queueID);
} /* virtual void Ogre::StaticGeometry::setRenderQueueGroup */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::StaticGeometry::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_StaticGeometry__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const unsigned char _cpp_result = _cpp_this->getRenderQueueGroup() ; 
   return _cpp_result;
} /* virtual uint8 Ogre::StaticGeometry::getRenderQueueGroup */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     visitRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::StaticGeometry::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
)
{
   // parameter conversions 
  Ogre::Renderable::Visitor* _cpp_visitor = reinterpret_cast< Ogre::Renderable::Visitor* >(visitor);
  bool _cpp_debugRenderables = debugRenderables ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->visitRenderables(_cpp_visitor, _cpp_debugRenderables);
} /* void Ogre::StaticGeometry::visitRenderables */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     getRegionIterator()
 * Type:       non-virtual method
 * Definition: RegionIterator Ogre::StaticGeometry::getRegionIterator
 * Signature:  ()Ogre_StaticGeometry_RegionIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_StaticGeometry__1getRegionIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::StaticGeometry::RegionIterator* _cpp_result = new Ogre::StaticGeometry::RegionIterator( _cpp_this->getRegionIterator() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* RegionIterator Ogre::StaticGeometry::getRegionIterator */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     dump()
 * Type:       virtual method
 * Definition: virtual void Ogre::StaticGeometry::dump
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1dump_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
)
{
   // parameter conversions 
  std::string _cpp_filename = ""; org::xbig::jni::to_stdstring(_jni_env_, filename, _cpp_filename); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   const Ogre::StaticGeometry* _cpp_this = reinterpret_cast<const Ogre::StaticGeometry*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->dump(_cpp_filename);
} /* virtual void Ogre::StaticGeometry::dump */


/*
 * Class:      org.ogre4j.StaticGeometry
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::StaticGeometry::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_StaticGeometry__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::StaticGeometry 
   // cast pointer to C++ object 
   Ogre::StaticGeometry* _cpp_this = reinterpret_cast<Ogre::StaticGeometry*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::StaticGeometry::__delete */
