///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_IndexData.h"

// import header files of original library
#include <OgreVertexIndexData.h>



/*
 * Class:      org.ogre4j.IndexData
 * Method:     IndexData()
 * Type:       constructor
 * Definition: Ogre::IndexData::IndexData
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IndexData__1_1createIndexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::IndexData 
   
   // parameter conversions 
   
   // create new instance of class Ogre::IndexData 
   Ogre::IndexData* _cpp_this = new Ogre::IndexData(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::IndexData::IndexData */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: IndexData* Ogre::IndexData::clone
 * Signature:  (Z)Ogre_IndexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IndexData__1clone_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean copyData
)
{
   // parameter conversions 
  bool _cpp_copyData = copyData ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::IndexData* _cpp_this = reinterpret_cast<const Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::IndexData* _cpp_result = _cpp_this->clone(_cpp_copyData) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* IndexData* Ogre::IndexData::clone */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     optimiseVertexCacheTriList()
 * Type:       non-virtual method
 * Definition: void Ogre::IndexData::optimiseVertexCacheTriList
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IndexData__1optimiseVertexCacheTriList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this = reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->optimiseVertexCacheTriList();
} /* void Ogre::IndexData::optimiseVertexCacheTriList */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::IndexData::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IndexData__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::IndexData 
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this = reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::IndexData::__delete */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     getindexBuffer()
 * Type:       getter for public attribute
 * Definition: HardwareIndexBufferSharedPtr Ogre::IndexData::indexBuffer
 * Signature:  ()Ogre_HardwareIndexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_IndexData__1getindexBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this = reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::HardwareIndexBufferSharedPtr* _cpp_result = new Ogre::HardwareIndexBufferSharedPtr( _cpp_this->indexBuffer); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* HardwareIndexBufferSharedPtr Ogre::IndexData::indexBuffer */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     setindexBuffer()
 * Type:       setter for public attribute
 * Definition: HardwareIndexBufferSharedPtr Ogre::IndexData::indexBuffer
 * Signature:  (Ogre_HardwareIndexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IndexData__1setindexBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
)
{
   // parameter conversions 
  Ogre::HardwareIndexBufferSharedPtr* _cpp__jni_value_ = reinterpret_cast< Ogre::HardwareIndexBufferSharedPtr* >(_jni_value_); 
   
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this =reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->indexBuffer = *_cpp__jni_value_;
} /* HardwareIndexBufferSharedPtr Ogre::IndexData::indexBuffer */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     getindexStart()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::IndexData::indexStart
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_IndexData__1getindexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this = reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->indexStart; 
   return _cpp_result;
} /* size_t Ogre::IndexData::indexStart */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     setindexStart()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::IndexData::indexStart
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IndexData__1setindexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this =reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->indexStart = _cpp__jni_value_;
} /* size_t Ogre::IndexData::indexStart */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     getindexCount()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::IndexData::indexCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_IndexData__1getindexCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this = reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   const size_t _cpp_result = _cpp_this->indexCount; 
   return _cpp_result;
} /* size_t Ogre::IndexData::indexCount */


/*
 * Class:      org.ogre4j.IndexData
 * Method:     setindexCount()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::IndexData::indexCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_IndexData__1setindexCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  size_t _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::IndexData* _cpp_this =reinterpret_cast<Ogre::IndexData*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->indexCount = _cpp__jni_value_;
} /* size_t Ogre::IndexData::indexCount */
