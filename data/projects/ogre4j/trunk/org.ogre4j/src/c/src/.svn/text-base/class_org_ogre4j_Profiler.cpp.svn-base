///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Profiler.h"

// import header files of original library
#include <OgreProfiler.h>



/*
 * Class:      org.ogre4j.Profiler
 * Method:     Profiler()
 * Type:       constructor
 * Definition: Ogre::Profiler::Profiler
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1_1createProfiler (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Profiler 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Profiler 
   Ogre::Profiler* _cpp_this = new Ogre::Profiler(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Profiler::Profiler */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     setTimer()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::setTimer
 * Signature:  (Ogre_Timer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1setTimer_1_1Timerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong t
)
{
   // parameter conversions 
  Ogre::Timer* _cpp_t = reinterpret_cast< Ogre::Timer* >(t); 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setTimer(_cpp_t);
} /* void Ogre::Profiler::setTimer */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     getTimer()
 * Type:       non-virtual method
 * Definition: Timer* Ogre::Profiler::getTimer
 * Signature:  ()Ogre_Timer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getTimer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Timer* _cpp_result = _cpp_this->getTimer() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Timer* Ogre::Profiler::getTimer */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     beginProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::beginProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1beginProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
)
{
   // parameter conversions 
  std::string _cpp_profileName = ""; org::xbig::jni::to_stdstring(_jni_env_, profileName, _cpp_profileName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->beginProfile(_cpp_profileName);
} /* void Ogre::Profiler::beginProfile */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     endProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::endProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1endProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
)
{
   // parameter conversions 
  std::string _cpp_profileName = ""; org::xbig::jni::to_stdstring(_jni_env_, profileName, _cpp_profileName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->endProfile(_cpp_profileName);
} /* void Ogre::Profiler::endProfile */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     setEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
)
{
   // parameter conversions 
  bool _cpp_enabled = enabled ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setEnabled(_cpp_enabled);
} /* void Ogre::Profiler::setEnabled */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     getEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::getEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1getEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Profiler* _cpp_this = reinterpret_cast<const Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->getEnabled() ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Profiler::getEnabled */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     enableProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::enableProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1enableProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
)
{
   // parameter conversions 
  std::string _cpp_profileName = ""; org::xbig::jni::to_stdstring(_jni_env_, profileName, _cpp_profileName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->enableProfile(_cpp_profileName);
} /* void Ogre::Profiler::enableProfile */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     disableProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::disableProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1disableProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
)
{
   // parameter conversions 
  std::string _cpp_profileName = ""; org::xbig::jni::to_stdstring(_jni_env_, profileName, _cpp_profileName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->disableProfile(_cpp_profileName);
} /* void Ogre::Profiler::disableProfile */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     watchForMax()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::watchForMax
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1watchForMax_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
)
{
   // parameter conversions 
  std::string _cpp_profileName = ""; org::xbig::jni::to_stdstring(_jni_env_, profileName, _cpp_profileName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->watchForMax(_cpp_profileName) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Profiler::watchForMax */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     watchForMin()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::watchForMin
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1watchForMin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
)
{
   // parameter conversions 
  std::string _cpp_profileName = ""; org::xbig::jni::to_stdstring(_jni_env_, profileName, _cpp_profileName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->watchForMin(_cpp_profileName) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Profiler::watchForMin */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     watchForLimit()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::watchForLimit
 * Signature:  (std_stringfloatZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1watchForLimit_1_1StringRRealvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName, 
  jfloat limit, 
  jboolean greaterThan
)
{
   // parameter conversions 
  std::string _cpp_profileName = ""; org::xbig::jni::to_stdstring(_jni_env_, profileName, _cpp_profileName); // calls c-tor only. Not operator= .;
  float _cpp_limit = limit;
  bool _cpp_greaterThan = greaterThan ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->watchForLimit(_cpp_profileName, _cpp_limit, _cpp_greaterThan) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Profiler::watchForLimit */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     logResults()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::logResults
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1logResults (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->logResults();
} /* void Ogre::Profiler::logResults */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     reset()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->reset();
} /* void Ogre::Profiler::reset */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     setUpdateDisplayFrequency()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::setUpdateDisplayFrequency
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1setUpdateDisplayFrequency_1_1uintv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong freq
)
{
   // parameter conversions 
  unsigned int _cpp_freq = freq; 
   
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setUpdateDisplayFrequency(_cpp_freq);
} /* void Ogre::Profiler::setUpdateDisplayFrequency */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     getUpdateDisplayFrequency()
 * Type:       non-virtual method
 * Definition: uint Ogre::Profiler::getUpdateDisplayFrequency
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getUpdateDisplayFrequency_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Profiler* _cpp_this = reinterpret_cast<const Ogre::Profiler*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getUpdateDisplayFrequency() ; 
   return _cpp_result;
} /* uint Ogre::Profiler::getUpdateDisplayFrequency */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static Profiler& Ogre::Profiler::getSingleton
 * Signature:  ()Ogre_Profiler
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Profiler with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Profiler* _cpp_result = & Ogre::Profiler::getSingleton(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Profiler& Ogre::Profiler::getSingleton */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static Profiler* Ogre::Profiler::getSingletonPtr
 * Signature:  ()Ogre_Profiler
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // static method of class Ogre::Profiler with return value 
   // parameter conversions 
   
   // call library method 
   const Ogre::Profiler* _cpp_result = Ogre::Profiler::getSingletonPtr(); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Profiler* Ogre::Profiler::getSingletonPtr */


/*
 * Class:      org.ogre4j.Profiler
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Profiler::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Profiler 
   // cast pointer to C++ object 
   Ogre::Profiler* _cpp_this = reinterpret_cast<Ogre::Profiler*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Profiler::__delete */
