///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Quaternion.h"

// import header files of original library
#include <OgreQuaternion.h>



/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fW, 
  jfloat fX, 
  jfloat fY, 
  jfloat fZ
)
{
   // constructor of class Ogre::Quaternion 
   
   // parameter conversions 
  float _cpp_fW = fW;
  float _cpp_fX = fX;
  float _cpp_fY = fY;
  float _cpp_fZ = fZ; 
   
   // create new instance of class Ogre::Quaternion 
   Ogre::Quaternion* _cpp_this = new Ogre::Quaternion(_cpp_fW, _cpp_fX, _cpp_fY, _cpp_fZ); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Quaternion::Quaternion */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rot
)
{
   // constructor of class Ogre::Quaternion 
   
   // parameter conversions 
  const Ogre::Matrix3* _cpp_rot = reinterpret_cast< const Ogre::Matrix3* >(rot); 
   
   // create new instance of class Ogre::Quaternion 
   Ogre::Quaternion* _cpp_this = new Ogre::Quaternion(*_cpp_rot); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Quaternion::Quaternion */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_RadianOgre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1RadianRVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rfAngle, 
  jlong rkAxis
)
{
   // constructor of class Ogre::Quaternion 
   
   // parameter conversions 
  const Ogre::Radian* _cpp_rfAngle = reinterpret_cast< const Ogre::Radian* >(rfAngle);
  const Ogre::Vector3* _cpp_rkAxis = reinterpret_cast< const Ogre::Vector3* >(rkAxis); 
   
   // create new instance of class Ogre::Quaternion 
   Ogre::Quaternion* _cpp_this = new Ogre::Quaternion(*_cpp_rfAngle, *_cpp_rkAxis); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Quaternion::Quaternion */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong xaxis, 
  jlong yaxis, 
  jlong zaxis
)
{
   // constructor of class Ogre::Quaternion 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_xaxis = reinterpret_cast< const Ogre::Vector3* >(xaxis);
  const Ogre::Vector3* _cpp_yaxis = reinterpret_cast< const Ogre::Vector3* >(yaxis);
  const Ogre::Vector3* _cpp_zaxis = reinterpret_cast< const Ogre::Vector3* >(zaxis); 
   
   // create new instance of class Ogre::Quaternion 
   Ogre::Quaternion* _cpp_this = new Ogre::Quaternion(*_cpp_xaxis, *_cpp_yaxis, *_cpp_zaxis); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Quaternion::Quaternion */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Vector3P (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong akAxis
)
{
   // constructor of class Ogre::Quaternion 
   
   // parameter conversions 
  const Ogre::Vector3* _cpp_akAxis = reinterpret_cast< const Ogre::Vector3* >(akAxis); 
   
   // create new instance of class Ogre::Quaternion 
   Ogre::Quaternion* _cpp_this = new Ogre::Quaternion(_cpp_akAxis); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Quaternion::Quaternion */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Realp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong valptr
)
{
   // constructor of class Ogre::Quaternion 
   
   // parameter conversions 
  float* _cpp_valptr = reinterpret_cast<float*>(valptr); 
   
   // create new instance of class Ogre::Quaternion 
   Ogre::Quaternion* _cpp_this = new Ogre::Quaternion(_cpp_valptr); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Quaternion::Quaternion */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator[]_const()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1operatorIndex_1const_1_1iV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return _cpp_result;
} /* Real Ogre::Quaternion::operator[] */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real& Ogre::Quaternion::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorIndex_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   float& _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return reinterpret_cast<jlong>(&_cpp_result);
} /* Real& Ogre::Quaternion::operator[] */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ptr()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Quaternion::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1ptr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Real* Ogre::Quaternion::ptr */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ptr_const()
 * Type:       non-virtual method
 * Definition: const Real* Ogre::Quaternion::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1ptr_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Real* Ogre::Quaternion::ptr */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromRotationMatrix()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromRotationMatrix
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromRotationMatrix_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong kRot
)
{
   // parameter conversions 
  const Ogre::Matrix3* _cpp_kRot = reinterpret_cast< const Ogre::Matrix3* >(kRot); 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromRotationMatrix(*_cpp_kRot);
} /* void Ogre::Quaternion::FromRotationMatrix */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToRotationMatrix()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToRotationMatrix
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToRotationMatrix_1_1Matrix3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong kRot
)
{
   // parameter conversions 
  Ogre::Matrix3* _cpp_kRot = reinterpret_cast< Ogre::Matrix3* >(kRot); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ToRotationMatrix(*_cpp_kRot);
} /* void Ogre::Quaternion::ToRotationMatrix */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromAngleAxis()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromAngleAxis
 * Signature:  (Ogre_RadianOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromAngleAxis_1_1RadianRVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfAngle, 
  jlong rkAxis
)
{
   // parameter conversions 
  const Ogre::Radian* _cpp_rfAngle = reinterpret_cast< const Ogre::Radian* >(rfAngle);
  const Ogre::Vector3* _cpp_rkAxis = reinterpret_cast< const Ogre::Vector3* >(rkAxis); 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromAngleAxis(*_cpp_rfAngle, *_cpp_rkAxis);
} /* void Ogre::Quaternion::FromAngleAxis */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAngleAxis()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAngleAxis
 * Signature:  (Ogre_RadianOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAngleAxis_1_1RadianrVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfAngle, 
  jlong rkAxis
)
{
   // parameter conversions 
  Ogre::Radian* _cpp_rfAngle = reinterpret_cast< Ogre::Radian* >(rfAngle);
  Ogre::Vector3* _cpp_rkAxis = reinterpret_cast< Ogre::Vector3* >(rkAxis); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ToAngleAxis(*_cpp_rfAngle, *_cpp_rkAxis);
} /* void Ogre::Quaternion::ToAngleAxis */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAngleAxis()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAngleAxis
 * Signature:  (Ogre_DegreeOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAngleAxis_1_1DegreerVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dAngle, 
  jlong rkAxis
)
{
   // parameter conversions 
  Ogre::Degree* _cpp_dAngle = reinterpret_cast< Ogre::Degree* >(dAngle);
  Ogre::Vector3* _cpp_rkAxis = reinterpret_cast< Ogre::Vector3* >(rkAxis); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ToAngleAxis(*_cpp_dAngle, *_cpp_rkAxis);
} /* void Ogre::Quaternion::ToAngleAxis */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromAxes
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromAxes_1_1Vector3P (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong akAxis
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_akAxis = reinterpret_cast< const Ogre::Vector3* >(akAxis); 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromAxes(_cpp_akAxis);
} /* void Ogre::Quaternion::FromAxes */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromAxes
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromAxes_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xAxis, 
  jlong yAxis, 
  jlong zAxis
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_xAxis = reinterpret_cast< const Ogre::Vector3* >(xAxis);
  const Ogre::Vector3* _cpp_yAxis = reinterpret_cast< const Ogre::Vector3* >(yAxis);
  const Ogre::Vector3* _cpp_zAxis = reinterpret_cast< const Ogre::Vector3* >(zAxis); 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->FromAxes(*_cpp_xAxis, *_cpp_yAxis, *_cpp_zAxis);
} /* void Ogre::Quaternion::FromAxes */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAxes
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAxes_1_1Vector3p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong akAxis
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp_akAxis = reinterpret_cast< Ogre::Vector3* >(akAxis); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ToAxes(_cpp_akAxis);
} /* void Ogre::Quaternion::ToAxes */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAxes
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAxes_1_1Vector3rVector3rVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xAxis, 
  jlong yAxis, 
  jlong zAxis
)
{
   // parameter conversions 
  Ogre::Vector3* _cpp_xAxis = reinterpret_cast< Ogre::Vector3* >(xAxis);
  Ogre::Vector3* _cpp_yAxis = reinterpret_cast< Ogre::Vector3* >(yAxis);
  Ogre::Vector3* _cpp_zAxis = reinterpret_cast< Ogre::Vector3* >(zAxis); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->ToAxes(*_cpp_xAxis, *_cpp_yAxis, *_cpp_zAxis);
} /* void Ogre::Quaternion::ToAxes */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     xAxis()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::xAxis
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1xAxis_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->xAxis() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Quaternion::xAxis */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     yAxis()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::yAxis
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1yAxis_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->yAxis() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Quaternion::yAxis */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     zAxis()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::zAxis
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1zAxis_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->zAxis() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Quaternion::zAxis */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Quaternion& Ogre::Quaternion::operator=
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorAssignment_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ); 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & _cpp_this->operator=(*_cpp_rkQ) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion& Ogre::Quaternion::operator= */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator+
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorAddition_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->operator+(*_cpp_rkQ) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::operator+ */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator-
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorSubtraction_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->operator-(*_cpp_rkQ) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::operator- */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator *
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorMultiplication_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->operator *(*_cpp_rkQ) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::operator * */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator *
 * Signature:  (float)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->operator *(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::operator * */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator-
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->operator-() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::operator- */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Quaternion::operator==
 * Signature:  (Ogre_Quaternion)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Quaternion__1operatorEqual_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rhs = reinterpret_cast< const Ogre::Quaternion* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Quaternion::operator== */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Quaternion::operator!=
 * Signature:  (Ogre_Quaternion)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Quaternion__1operatorNotEqual_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rhs = reinterpret_cast< const Ogre::Quaternion* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Quaternion::operator!= */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Dot()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::Dot
 * Signature:  (Ogre_Quaternion)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1Dot_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->Dot(*_cpp_rkQ) ; 
   return _cpp_result;
} /* Real Ogre::Quaternion::Dot */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Norm()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::Norm
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1Norm_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->Norm() ; 
   return _cpp_result;
} /* Real Ogre::Quaternion::Norm */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     normalise()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::normalise
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1normalise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->normalise() ; 
   return _cpp_result;
} /* Real Ogre::Quaternion::normalise */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Inverse()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::Inverse
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Inverse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->Inverse() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::Inverse */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     UnitInverse()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::UnitInverse
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1UnitInverse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->UnitInverse() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::UnitInverse */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Exp()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::Exp
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Exp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->Exp() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::Exp */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Log()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::Log
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Log_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( _cpp_this->Log() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Quaternion Ogre::Quaternion::Log */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::operator *
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorMultiplication_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::Vector3* _cpp_rkVector = reinterpret_cast< const Ogre::Vector3* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Vector3* _cpp_result = new Ogre::Vector3( _cpp_this->operator *(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Vector3 Ogre::Quaternion::operator * */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getRoll()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Quaternion::getRoll
 * Signature:  (Z)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getRoll_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reprojectAxis
)
{
   // parameter conversions 
  bool _cpp_reprojectAxis = reprojectAxis ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->getRoll(_cpp_reprojectAxis) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Quaternion::getRoll */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getPitch()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Quaternion::getPitch
 * Signature:  (Z)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getPitch_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reprojectAxis
)
{
   // parameter conversions 
  bool _cpp_reprojectAxis = reprojectAxis ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->getPitch(_cpp_reprojectAxis) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Quaternion::getPitch */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getYaw()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Quaternion::getYaw
 * Signature:  (Z)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getYaw_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reprojectAxis
)
{
   // parameter conversions 
  bool _cpp_reprojectAxis = reprojectAxis ? true : false; 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Radian* _cpp_result = new Ogre::Radian( _cpp_this->getYaw(_cpp_reprojectAxis) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* Radian Ogre::Quaternion::getYaw */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     equals()
 * Type:       non-virtual method
 * Definition: bool Ogre::Quaternion::equals
 * Signature:  (Ogre_QuaternionOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Quaternion__1equals_1_1QuaternionRRadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs, 
  jlong tolerance
)
{
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rhs = reinterpret_cast< const Ogre::Quaternion* >(rhs);
  const Ogre::Radian* _cpp_tolerance = reinterpret_cast< const Ogre::Radian* >(tolerance); 
   
   // cast pointer to C++ object 
   const Ogre::Quaternion* _cpp_this = reinterpret_cast<const Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->equals(*_cpp_rhs, *_cpp_tolerance) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Quaternion::equals */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Slerp()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::Slerp
 * Signature:  (floatOgre_QuaternionOgre_QuaternionZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Slerp_1_1RealvQuaternionRQuaternionRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkQ, 
  jboolean shortestPath
)
{
   // static method of class Ogre::Quaternion with return value 
   // parameter conversions 
  float _cpp_fT = fT;
  const Ogre::Quaternion* _cpp_rkP = reinterpret_cast< const Ogre::Quaternion* >(rkP);
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ);
  bool _cpp_shortestPath = shortestPath ? true : false; 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( Ogre::Quaternion::Slerp(_cpp_fT, *_cpp_rkP, *_cpp_rkQ, _cpp_shortestPath)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Quaternion Ogre::Quaternion::Slerp */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     SlerpExtraSpins()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::SlerpExtraSpins
 * Signature:  (floatOgre_QuaternionOgre_QuaternionI)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1SlerpExtraSpins_1_1RealvQuaternionRQuaternionRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkQ, 
  jint iExtraSpins
)
{
   // static method of class Ogre::Quaternion with return value 
   // parameter conversions 
  float _cpp_fT = fT;
  const Ogre::Quaternion* _cpp_rkP = reinterpret_cast< const Ogre::Quaternion* >(rkP);
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ);
  int _cpp_iExtraSpins = iExtraSpins; 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( Ogre::Quaternion::SlerpExtraSpins(_cpp_fT, *_cpp_rkP, *_cpp_rkQ, _cpp_iExtraSpins)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Quaternion Ogre::Quaternion::SlerpExtraSpins */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Intermediate()
 * Type:       static method
 * Definition: static void Ogre::Quaternion::Intermediate
 * Signature:  (Ogre_QuaternionOgre_QuaternionOgre_QuaternionOgre_QuaternionOgre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1Intermediate_1_1QuaternionRQuaternionRQuaternionRQuaternionrQuaternionr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkQ0, 
  jlong rkQ1, 
  jlong rkQ2, 
  jlong rka, 
  jlong rkB
)
{
   // static method of class Ogre::Quaternion without return value 
   // parameter conversions 
  const Ogre::Quaternion* _cpp_rkQ0 = reinterpret_cast< const Ogre::Quaternion* >(rkQ0);
  const Ogre::Quaternion* _cpp_rkQ1 = reinterpret_cast< const Ogre::Quaternion* >(rkQ1);
  const Ogre::Quaternion* _cpp_rkQ2 = reinterpret_cast< const Ogre::Quaternion* >(rkQ2);
  Ogre::Quaternion* _cpp_rka = reinterpret_cast< Ogre::Quaternion* >(rka);
  Ogre::Quaternion* _cpp_rkB = reinterpret_cast< Ogre::Quaternion* >(rkB); 
   
   // call library method 
   Ogre::Quaternion::Intermediate(*_cpp_rkQ0, *_cpp_rkQ1, *_cpp_rkQ2, *_cpp_rka, *_cpp_rkB);
} /* static void Ogre::Quaternion::Intermediate */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Squad()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::Squad
 * Signature:  (floatOgre_QuaternionOgre_QuaternionOgre_QuaternionOgre_QuaternionZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Squad_1_1RealvQuaternionRQuaternionRQuaternionRQuaternionRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkA, 
  jlong rkB, 
  jlong rkQ, 
  jboolean shortestPath
)
{
   // static method of class Ogre::Quaternion with return value 
   // parameter conversions 
  float _cpp_fT = fT;
  const Ogre::Quaternion* _cpp_rkP = reinterpret_cast< const Ogre::Quaternion* >(rkP);
  const Ogre::Quaternion* _cpp_rkA = reinterpret_cast< const Ogre::Quaternion* >(rkA);
  const Ogre::Quaternion* _cpp_rkB = reinterpret_cast< const Ogre::Quaternion* >(rkB);
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ);
  bool _cpp_shortestPath = shortestPath ? true : false; 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( Ogre::Quaternion::Squad(_cpp_fT, *_cpp_rkP, *_cpp_rkA, *_cpp_rkB, *_cpp_rkQ, _cpp_shortestPath)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Quaternion Ogre::Quaternion::Squad */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     nlerp()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::nlerp
 * Signature:  (floatOgre_QuaternionOgre_QuaternionZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1nlerp_1_1RealvQuaternionRQuaternionRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkQ, 
  jboolean shortestPath
)
{
   // static method of class Ogre::Quaternion with return value 
   // parameter conversions 
  float _cpp_fT = fT;
  const Ogre::Quaternion* _cpp_rkP = reinterpret_cast< const Ogre::Quaternion* >(rkP);
  const Ogre::Quaternion* _cpp_rkQ = reinterpret_cast< const Ogre::Quaternion* >(rkQ);
  bool _cpp_shortestPath = shortestPath ? true : false; 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = new Ogre::Quaternion( Ogre::Quaternion::nlerp(_cpp_fT, *_cpp_rkP, *_cpp_rkQ, _cpp_shortestPath)); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* static Quaternion Ogre::Quaternion::nlerp */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Quaternion::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Quaternion 
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Quaternion::__delete */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getms_fEpsilon()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Quaternion::ms_fEpsilon
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getms_1fEpsilon (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const float _cpp_result = Ogre::Quaternion::ms_fEpsilon ; 
   return _cpp_result;
} /* const Real Ogre::Quaternion::ms_fEpsilon */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Quaternion Ogre::Quaternion::ZERO
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & Ogre::Quaternion::ZERO ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Quaternion Ogre::Quaternion::ZERO */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getIDENTITY()
 * Type:       getter for public attribute
 * Definition: const Quaternion Ogre::Quaternion::IDENTITY
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getIDENTITY (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::Quaternion* _cpp_result = & Ogre::Quaternion::IDENTITY ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const Quaternion Ogre::Quaternion::IDENTITY */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getw()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::w
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getw (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->w; 
   return _cpp_result;
} /* Real Ogre::Quaternion::w */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     setw()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::w
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1setw (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this =reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->w = _cpp__jni_value_;
} /* Real Ogre::Quaternion::w */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getx()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::x
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->x; 
   return _cpp_result;
} /* Real Ogre::Quaternion::x */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     setx()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::x
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1setx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this =reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->x = _cpp__jni_value_;
} /* Real Ogre::Quaternion::x */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     gety()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::y
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1gety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->y; 
   return _cpp_result;
} /* Real Ogre::Quaternion::y */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     sety()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::y
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1sety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this =reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->y = _cpp__jni_value_;
} /* Real Ogre::Quaternion::y */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getz()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::z
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this = reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->z; 
   return _cpp_result;
} /* Real Ogre::Quaternion::z */


/*
 * Class:      org.ogre4j.Quaternion
 * Method:     setz()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::z
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1setz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Quaternion* _cpp_this =reinterpret_cast<Ogre::Quaternion*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->z = _cpp__jni_value_;
} /* Real Ogre::Quaternion::z */
