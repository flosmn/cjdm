///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ColourValue.h"

// import header files of original library
#include <OgreColourValue.h>



/*
 * Class:      org.ogre4j.ColourValue
 * Method:     ColourValue()
 * Type:       constructor
 * Definition: Ogre::ColourValue::ColourValue
 * Signature:  (FFFF)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1_1createColourValue_1_1FvFvFvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
)
{
   // constructor of class Ogre::ColourValue 
   
   // parameter conversions 
  float _cpp_red = red;
  float _cpp_green = green;
  float _cpp_blue = blue;
  float _cpp_alpha = alpha; 
   
   // create new instance of class Ogre::ColourValue 
   Ogre::ColourValue* _cpp_this = new Ogre::ColourValue(_cpp_red, _cpp_green, _cpp_blue, _cpp_alpha); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::ColourValue::ColourValue */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::ColourValue::operator==
 * Signature:  (Ogre_ColourValue)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ColourValue__1operatorEqual_1_1ColourValueR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rhs = reinterpret_cast< const Ogre::ColourValue* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator==(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ColourValue::operator== */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::ColourValue::operator!=
 * Signature:  (Ogre_ColourValue)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ColourValue__1operatorNotEqual_1_1ColourValueR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rhs = reinterpret_cast< const Ogre::ColourValue* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->operator!=(*_cpp_rhs) ; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::ColourValue::operator!= */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getAsRGBA()
 * Type:       non-virtual method
 * Definition: RGBA Ogre::ColourValue::getAsRGBA
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getAsRGBA_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getAsRGBA() ; 
   return _cpp_result;
} /* RGBA Ogre::ColourValue::getAsRGBA */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getAsARGB()
 * Type:       non-virtual method
 * Definition: ARGB Ogre::ColourValue::getAsARGB
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getAsARGB_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getAsARGB() ; 
   return _cpp_result;
} /* ARGB Ogre::ColourValue::getAsARGB */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getAsBGRA()
 * Type:       non-virtual method
 * Definition: BGRA Ogre::ColourValue::getAsBGRA
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getAsBGRA_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getAsBGRA() ; 
   return _cpp_result;
} /* BGRA Ogre::ColourValue::getAsBGRA */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getAsABGR()
 * Type:       non-virtual method
 * Definition: ABGR Ogre::ColourValue::getAsABGR
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getAsABGR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const unsigned int _cpp_result = _cpp_this->getAsABGR() ; 
   return _cpp_result;
} /* ABGR Ogre::ColourValue::getAsABGR */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setAsRGBA()
 * Type:       non-virtual method
 * Definition: void Ogre::ColourValue::setAsRGBA
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setAsRGBA_1_1RGBAV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  const unsigned int _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAsRGBA(_cpp_val);
} /* void Ogre::ColourValue::setAsRGBA */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setAsARGB()
 * Type:       non-virtual method
 * Definition: void Ogre::ColourValue::setAsARGB
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setAsARGB_1_1ARGBV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  const unsigned int _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAsARGB(_cpp_val);
} /* void Ogre::ColourValue::setAsARGB */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setAsBGRA()
 * Type:       non-virtual method
 * Definition: void Ogre::ColourValue::setAsBGRA
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setAsBGRA_1_1BGRAV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  const unsigned int _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAsBGRA(_cpp_val);
} /* void Ogre::ColourValue::setAsBGRA */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setAsABGR()
 * Type:       non-virtual method
 * Definition: void Ogre::ColourValue::setAsABGR
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setAsABGR_1_1ABGRV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
)
{
   // parameter conversions 
  const unsigned int _cpp_val = val; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setAsABGR(_cpp_val);
} /* void Ogre::ColourValue::setAsABGR */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     saturate()
 * Type:       non-virtual method
 * Definition: void Ogre::ColourValue::saturate
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1saturate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->saturate();
} /* void Ogre::ColourValue::saturate */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     saturateCopy()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::ColourValue::saturateCopy
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1saturateCopy_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->saturateCopy() ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::ColourValue::saturateCopy */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator[]_const()
 * Type:       non-virtual method
 * Definition: float Ogre::ColourValue::operator[]
 * Signature:  (I)F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ColourValue__1operatorIndex_1const_1_1iV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return _cpp_result;
} /* float Ogre::ColourValue::operator[] */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: float& Ogre::ColourValue::operator[]
 * Signature:  (I)F
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorIndex_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
)
{
   // parameter conversions 
  const size_t _cpp_i = i; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   float& _cpp_result = _cpp_this->operator[](_cpp_i) ; 
   return reinterpret_cast<jlong>(&_cpp_result);
} /* float& Ogre::ColourValue::operator[] */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     ptr()
 * Type:       non-virtual method
 * Definition: float* Ogre::ColourValue::ptr
 * Signature:  ()F
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1ptr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* float* Ogre::ColourValue::ptr */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     ptr_const()
 * Type:       non-virtual method
 * Definition: const float* Ogre::ColourValue::ptr
 * Signature:  ()F
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1ptr_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const float* _cpp_result = _cpp_this->ptr() ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const float* Ogre::ColourValue::ptr */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::ColourValue::operator+
 * Signature:  (Ogre_ColourValue)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorAddition_1_1ColourValueR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rkVector = reinterpret_cast< const Ogre::ColourValue* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->operator+(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::ColourValue::operator+ */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::ColourValue::operator-
 * Signature:  (Ogre_ColourValue)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorSubtraction_1_1ColourValueR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rkVector = reinterpret_cast< const Ogre::ColourValue* >(rkVector); 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->operator-(*_cpp_rkVector) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::ColourValue::operator- */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::ColourValue::operator *
 * Signature:  (F)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorMultiplication_1_1FV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->operator *(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::ColourValue::operator * */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::ColourValue::operator *
 * Signature:  (Ogre_ColourValue)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorMultiplication_1_1ColourValueR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rhs = reinterpret_cast< const Ogre::ColourValue* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->operator *(*_cpp_rhs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::ColourValue::operator * */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::ColourValue::operator/
 * Signature:  (Ogre_ColourValue)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorDivision_1_1ColourValueR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rhs = reinterpret_cast< const Ogre::ColourValue* >(rhs); 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->operator/(*_cpp_rhs) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::ColourValue::operator/ */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::ColourValue::operator/
 * Signature:  (F)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorDivision_1_1FV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = new Ogre::ColourValue( _cpp_this->operator/(_cpp_fScalar) ); 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue Ogre::ColourValue::operator/ */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: ColourValue& Ogre::ColourValue::operator+=
 * Signature:  (Ogre_ColourValue)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorIncrementAndAssign_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rkVector = reinterpret_cast< const Ogre::ColourValue* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->operator+=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue& Ogre::ColourValue::operator+= */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: ColourValue& Ogre::ColourValue::operator-=
 * Signature:  (Ogre_ColourValue)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorDecrementAndAssign_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
)
{
   // parameter conversions 
  const Ogre::ColourValue* _cpp_rkVector = reinterpret_cast< const Ogre::ColourValue* >(rkVector); 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->operator-=(*_cpp_rkVector) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue& Ogre::ColourValue::operator-= */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: ColourValue& Ogre::ColourValue::operator *=
 * Signature:  (F)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorMultiplyAndAssign_1_1FV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->operator *=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue& Ogre::ColourValue::operator *= */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: ColourValue& Ogre::ColourValue::operator/=
 * Signature:  (F)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1operatorDivideAndAssign_1_1FV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
)
{
   // parameter conversions 
  const float _cpp_fScalar = fScalar; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & _cpp_this->operator/=(_cpp_fScalar) ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* ColourValue& Ogre::ColourValue::operator/= */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setHSB()
 * Type:       non-virtual method
 * Definition: void Ogre::ColourValue::setHSB
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setHSB_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat hue, 
  jfloat saturation, 
  jfloat brightness
)
{
   // parameter conversions 
  float _cpp_hue = hue;
  float _cpp_saturation = saturation;
  float _cpp_brightness = brightness; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->setHSB(_cpp_hue, _cpp_saturation, _cpp_brightness);
} /* void Ogre::ColourValue::setHSB */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getHSB()
 * Type:       non-virtual method
 * Definition: void Ogre::ColourValue::getHSB
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1getHSB_1_1RealpRealpRealp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong hue, 
  jlong saturation, 
  jlong brightness
)
{
   // parameter conversions 
  float* _cpp_hue = reinterpret_cast<float*>(hue);
  float* _cpp_saturation = reinterpret_cast<float*>(saturation);
  float* _cpp_brightness = reinterpret_cast<float*>(brightness); 
   
   // cast pointer to C++ object 
   const Ogre::ColourValue* _cpp_this = reinterpret_cast<const Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->getHSB(_cpp_hue, _cpp_saturation, _cpp_brightness);
} /* void Ogre::ColourValue::getHSB */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ColourValue::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ColourValue 
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ColourValue::__delete */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const ColourValue Ogre::ColourValue::ZERO
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & Ogre::ColourValue::ZERO ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue Ogre::ColourValue::ZERO */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getBlack()
 * Type:       getter for public attribute
 * Definition: const ColourValue Ogre::ColourValue::Black
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getBlack (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & Ogre::ColourValue::Black ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue Ogre::ColourValue::Black */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getWhite()
 * Type:       getter for public attribute
 * Definition: const ColourValue Ogre::ColourValue::White
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getWhite (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & Ogre::ColourValue::White ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue Ogre::ColourValue::White */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getRed()
 * Type:       getter for public attribute
 * Definition: const ColourValue Ogre::ColourValue::Red
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getRed (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & Ogre::ColourValue::Red ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue Ogre::ColourValue::Red */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getGreen()
 * Type:       getter for public attribute
 * Definition: const ColourValue Ogre::ColourValue::Green
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getGreen (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & Ogre::ColourValue::Green ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue Ogre::ColourValue::Green */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getBlue()
 * Type:       getter for public attribute
 * Definition: const ColourValue Ogre::ColourValue::Blue
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ColourValue__1getBlue (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // parameter conversions 
   
   // call library method 
   const Ogre::ColourValue* _cpp_result = & Ogre::ColourValue::Blue ; 
   return reinterpret_cast<jlong>(_cpp_result);
} /* const ColourValue Ogre::ColourValue::Blue */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getr()
 * Type:       getter for public attribute
 * Definition: float Ogre::ColourValue::r
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ColourValue__1getr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->r; 
   return _cpp_result;
} /* float Ogre::ColourValue::r */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setr()
 * Type:       setter for public attribute
 * Definition: float Ogre::ColourValue::r
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this =reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->r = _cpp__jni_value_;
} /* float Ogre::ColourValue::r */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getg()
 * Type:       getter for public attribute
 * Definition: float Ogre::ColourValue::g
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ColourValue__1getg (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->g; 
   return _cpp_result;
} /* float Ogre::ColourValue::g */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setg()
 * Type:       setter for public attribute
 * Definition: float Ogre::ColourValue::g
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setg (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this =reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->g = _cpp__jni_value_;
} /* float Ogre::ColourValue::g */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     getb()
 * Type:       getter for public attribute
 * Definition: float Ogre::ColourValue::b
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ColourValue__1getb (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->b; 
   return _cpp_result;
} /* float Ogre::ColourValue::b */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     setb()
 * Type:       setter for public attribute
 * Definition: float Ogre::ColourValue::b
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1setb (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this =reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->b = _cpp__jni_value_;
} /* float Ogre::ColourValue::b */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     geta()
 * Type:       getter for public attribute
 * Definition: float Ogre::ColourValue::a
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ColourValue__1geta (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this = reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   const float _cpp_result = _cpp_this->a; 
   return _cpp_result;
} /* float Ogre::ColourValue::a */


/*
 * Class:      org.ogre4j.ColourValue
 * Method:     seta()
 * Type:       setter for public attribute
 * Definition: float Ogre::ColourValue::a
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ColourValue__1seta (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
)
{
   // parameter conversions 
  float _cpp__jni_value_ = _jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::ColourValue* _cpp_this =reinterpret_cast<Ogre::ColourValue*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->a = _cpp__jni_value_;
} /* float Ogre::ColourValue::a */
