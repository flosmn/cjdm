///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_ResourceGroupListener.h"

// import header files of original library
#include <OgreResourceGroupManager.h>



/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceGroupScriptingStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceGroupScriptingStarted
 * Signature:  (std_stringI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceGroupScriptingStarted_1_1StringRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName, 
  jint scriptCount
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  size_t _cpp_scriptCount = scriptCount; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceGroupScriptingStarted(_cpp_groupName, _cpp_scriptCount);
} /* virtual void Ogre::ResourceGroupListener::resourceGroupScriptingStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     scriptParseStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::scriptParseStarted
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1scriptParseStarted_1_1StringRbr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring scriptName, 
  jlong skipThisScript
)
{
   // parameter conversions 
  std::string _cpp_scriptName = ""; org::xbig::jni::to_stdstring(_jni_env_, scriptName, _cpp_scriptName); // calls c-tor only. Not operator= .;
  bool* _cpp_skipThisScript = reinterpret_cast<bool*>(skipThisScript); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->scriptParseStarted(_cpp_scriptName, *_cpp_skipThisScript);
} /* virtual void Ogre::ResourceGroupListener::scriptParseStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     scriptParseEnded()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::scriptParseEnded
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1scriptParseEnded_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring scriptName, 
  jboolean skipped
)
{
   // parameter conversions 
  std::string _cpp_scriptName = ""; org::xbig::jni::to_stdstring(_jni_env_, scriptName, _cpp_scriptName); // calls c-tor only. Not operator= .;
  bool _cpp_skipped = skipped ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->scriptParseEnded(_cpp_scriptName, _cpp_skipped);
} /* virtual void Ogre::ResourceGroupListener::scriptParseEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceGroupScriptingEnded()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceGroupScriptingEnded
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceGroupScriptingEnded_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceGroupScriptingEnded(_cpp_groupName);
} /* virtual void Ogre::ResourceGroupListener::resourceGroupScriptingEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceGroupPrepareStarted()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceGroupPrepareStarted
 * Signature:  (std_stringI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceGroupPrepareStarted_1_1StringRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName, 
  jint resourceCount
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  size_t _cpp_resourceCount = resourceCount; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceGroupPrepareStarted(_cpp_groupName, _cpp_resourceCount);
} /* virtual void Ogre::ResourceGroupListener::resourceGroupPrepareStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourcePrepareStarted()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourcePrepareStarted
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourcePrepareStarted_1_1ResourcePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong resource
)
{
   // parameter conversions 
  const Ogre::ResourcePtr* _cpp_resource = reinterpret_cast< const Ogre::ResourcePtr* >(resource); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourcePrepareStarted(*_cpp_resource);
} /* virtual void Ogre::ResourceGroupListener::resourcePrepareStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourcePrepareEnded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourcePrepareEnded
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourcePrepareEnded (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourcePrepareEnded();
} /* virtual void Ogre::ResourceGroupListener::resourcePrepareEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     worldGeometryPrepareStageStarted()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::worldGeometryPrepareStageStarted
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1worldGeometryPrepareStageStarted_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring description
)
{
   // parameter conversions 
  std::string _cpp_description = ""; org::xbig::jni::to_stdstring(_jni_env_, description, _cpp_description); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->worldGeometryPrepareStageStarted(_cpp_description);
} /* virtual void Ogre::ResourceGroupListener::worldGeometryPrepareStageStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     worldGeometryPrepareStageEnded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::worldGeometryPrepareStageEnded
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1worldGeometryPrepareStageEnded (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->worldGeometryPrepareStageEnded();
} /* virtual void Ogre::ResourceGroupListener::worldGeometryPrepareStageEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceGroupPrepareEnded()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceGroupPrepareEnded
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceGroupPrepareEnded_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceGroupPrepareEnded(_cpp_groupName);
} /* virtual void Ogre::ResourceGroupListener::resourceGroupPrepareEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceGroupLoadStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceGroupLoadStarted
 * Signature:  (std_stringI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceGroupLoadStarted_1_1StringRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName, 
  jint resourceCount
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .;
  size_t _cpp_resourceCount = resourceCount; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceGroupLoadStarted(_cpp_groupName, _cpp_resourceCount);
} /* virtual void Ogre::ResourceGroupListener::resourceGroupLoadStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceLoadStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceLoadStarted
 * Signature:  (Ogre_ResourcePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceLoadStarted_1_1ResourcePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong resource
)
{
   // parameter conversions 
  const Ogre::ResourcePtr* _cpp_resource = reinterpret_cast< const Ogre::ResourcePtr* >(resource); 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceLoadStarted(*_cpp_resource);
} /* virtual void Ogre::ResourceGroupListener::resourceLoadStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceLoadEnded()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceLoadEnded
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceLoadEnded (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceLoadEnded();
} /* virtual void Ogre::ResourceGroupListener::resourceLoadEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     worldGeometryStageStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::worldGeometryStageStarted
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1worldGeometryStageStarted_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring description
)
{
   // parameter conversions 
  std::string _cpp_description = ""; org::xbig::jni::to_stdstring(_jni_env_, description, _cpp_description); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->worldGeometryStageStarted(_cpp_description);
} /* virtual void Ogre::ResourceGroupListener::worldGeometryStageStarted */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     worldGeometryStageEnded()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::worldGeometryStageEnded
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1worldGeometryStageEnded (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->worldGeometryStageEnded();
} /* virtual void Ogre::ResourceGroupListener::worldGeometryStageEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     resourceGroupLoadEnded()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::ResourceGroupListener::resourceGroupLoadEnded
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1resourceGroupLoadEnded_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring groupName
)
{
   // parameter conversions 
  std::string _cpp_groupName = ""; org::xbig::jni::to_stdstring(_jni_env_, groupName, _cpp_groupName); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resourceGroupLoadEnded(_cpp_groupName);
} /* virtual void Ogre::ResourceGroupListener::resourceGroupLoadEnded */


/*
 * Class:      org.ogre4j.ResourceGroupListener
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ResourceGroupListener::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceGroupListener__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::ResourceGroupListener 
   // cast pointer to C++ object 
   Ogre::ResourceGroupListener* _cpp_this = reinterpret_cast<Ogre::ResourceGroupListener*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::ResourceGroupListener::__delete */
