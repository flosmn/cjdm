///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_QueuedRenderableCollection.h"

// import header files of original library
#include <OgreRenderQueueSortingGrouping.h>



/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     QueuedRenderableCollection()
 * Type:       constructor
 * Definition: Ogre::QueuedRenderableCollection::QueuedRenderableCollection
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_QueuedRenderableCollection__1_1createQueuedRenderableCollection (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::QueuedRenderableCollection 
   
   // parameter conversions 
   
   // create new instance of class Ogre::QueuedRenderableCollection 
   Ogre::QueuedRenderableCollection* _cpp_this = new Ogre::QueuedRenderableCollection(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::QueuedRenderableCollection::QueuedRenderableCollection */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::QueuedRenderableCollection::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->clear();
} /* void Ogre::QueuedRenderableCollection::clear */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     removePassGroup()
 * Type:       non-virtual method
 * Definition: void Ogre::QueuedRenderableCollection::removePassGroup
 * Signature:  (Ogre_Pass)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1removePassGroup_1_1Passp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
)
{
   // parameter conversions 
  Ogre::Pass* _cpp_p = reinterpret_cast< Ogre::Pass* >(p); 
   
   // cast pointer to C++ object 
   Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->removePassGroup(_cpp_p);
} /* void Ogre::QueuedRenderableCollection::removePassGroup */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     resetOrganisationModes()
 * Type:       non-virtual method
 * Definition: void Ogre::QueuedRenderableCollection::resetOrganisationModes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1resetOrganisationModes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->resetOrganisationModes();
} /* void Ogre::QueuedRenderableCollection::resetOrganisationModes */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     addOrganisationMode()
 * Type:       non-virtual method
 * Definition: void Ogre::QueuedRenderableCollection::addOrganisationMode
 * Signature:  (Ogre_QueuedRenderableCollection_OrganisationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1addOrganisationMode_1_1OrganisationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint om
)
{
   // parameter conversions 
  Ogre::QueuedRenderableCollection::OrganisationMode _cpp_om = (Ogre::QueuedRenderableCollection::OrganisationMode)om; 
   
   // cast pointer to C++ object 
   Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addOrganisationMode(_cpp_om);
} /* void Ogre::QueuedRenderableCollection::addOrganisationMode */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     addRenderable()
 * Type:       non-virtual method
 * Definition: void Ogre::QueuedRenderableCollection::addRenderable
 * Signature:  (Ogre_PassOgre_Renderable)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1addRenderable_1_1PasspRenderablep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass, 
  jlong rend
)
{
   // parameter conversions 
  Ogre::Pass* _cpp_pass = reinterpret_cast< Ogre::Pass* >(pass);
  Ogre::Renderable* _cpp_rend = reinterpret_cast< Ogre::Renderable* >(rend); 
   
   // cast pointer to C++ object 
   Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->addRenderable(_cpp_pass, _cpp_rend);
} /* void Ogre::QueuedRenderableCollection::addRenderable */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     sort()
 * Type:       non-virtual method
 * Definition: void Ogre::QueuedRenderableCollection::sort
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1sort_1_1CameraP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
)
{
   // parameter conversions 
  const Ogre::Camera* _cpp_cam = reinterpret_cast< const Ogre::Camera* >(cam); 
   
   // cast pointer to C++ object 
   Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->sort(_cpp_cam);
} /* void Ogre::QueuedRenderableCollection::sort */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     acceptVisitor()
 * Type:       non-virtual method
 * Definition: void Ogre::QueuedRenderableCollection::acceptVisitor
 * Signature:  (Ogre_QueuedRenderableVisitorOgre_QueuedRenderableCollection_OrganisationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1acceptVisitor_1_1QueuedRenderableVisitorpOrganisationModev_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jint om
)
{
   // parameter conversions 
  Ogre::QueuedRenderableVisitor* _cpp_visitor = reinterpret_cast< Ogre::QueuedRenderableVisitor* >(visitor);
  Ogre::QueuedRenderableCollection::OrganisationMode _cpp_om = (Ogre::QueuedRenderableCollection::OrganisationMode)om; 
   
   // cast pointer to C++ object 
   const Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<const Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->acceptVisitor(_cpp_visitor, _cpp_om);
} /* void Ogre::QueuedRenderableCollection::acceptVisitor */


/*
 * Class:      org.ogre4j.QueuedRenderableCollection
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::QueuedRenderableCollection::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_QueuedRenderableCollection__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::QueuedRenderableCollection 
   // cast pointer to C++ object 
   Ogre::QueuedRenderableCollection* _cpp_this = reinterpret_cast<Ogre::QueuedRenderableCollection*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::QueuedRenderableCollection::__delete */
