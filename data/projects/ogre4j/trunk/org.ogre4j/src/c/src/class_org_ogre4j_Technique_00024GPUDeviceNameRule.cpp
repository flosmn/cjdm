///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


// includes from config
#include <Ogre4JStableHeaders.h>

// use base library for cpp2j
#include "jni_base_all.h"

// import declaration of all functions
#include "class_org_ogre4j_Technique_00024GPUDeviceNameRule.h"

// import header files of original library
#include <OgreTechnique.h>



/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     GPUDeviceNameRule()
 * Type:       constructor
 * Definition: Ogre::Technique::GPUDeviceNameRule::GPUDeviceNameRule
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1_1createGPUDeviceNameRule (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
)
{
   // constructor of class Ogre::Technique::GPUDeviceNameRule 
   
   // parameter conversions 
   
   // create new instance of class Ogre::Technique::GPUDeviceNameRule 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this = new Ogre::Technique::GPUDeviceNameRule(); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Technique::GPUDeviceNameRule::GPUDeviceNameRule */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     GPUDeviceNameRule()
 * Type:       constructor
 * Definition: Ogre::Technique::GPUDeviceNameRule::GPUDeviceNameRule
 * Signature:  (std_stringOgre_Technique_IncludeOrExcludeZ)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1_1createGPUDeviceNameRule_1_1StringRIncludeOrExcludevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring pattern, 
  jint ie, 
  jboolean caseSen
)
{
   // constructor of class Ogre::Technique::GPUDeviceNameRule 
   
   // parameter conversions 
  std::string _cpp_pattern = ""; org::xbig::jni::to_stdstring(_jni_env_, pattern, _cpp_pattern); // calls c-tor only. Not operator= .;
  Ogre::Technique::IncludeOrExclude _cpp_ie = (Ogre::Technique::IncludeOrExclude)ie;
  bool _cpp_caseSen = caseSen ? true : false; 
   
   // create new instance of class Ogre::Technique::GPUDeviceNameRule 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this = new Ogre::Technique::GPUDeviceNameRule(_cpp_pattern, _cpp_ie, _cpp_caseSen); 
   
   // return casted pointer 
   jlong _jni_pointer_ = reinterpret_cast<jlong>(_cpp_this); 
   return _jni_pointer_;
} /* Ogre::Technique::GPUDeviceNameRule::GPUDeviceNameRule */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Technique::GPUDeviceNameRule::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // destructor of class Ogre::Technique::GPUDeviceNameRule 
   // cast pointer to C++ object 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this = reinterpret_cast<Ogre::Technique::GPUDeviceNameRule*>(_jni_pointer_); 
   // delete object if it exists 
   if(_cpp_this != NULL) delete _cpp_this;
} /* Ogre::Technique::GPUDeviceNameRule::__delete */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     getdevicePattern()
 * Type:       getter for public attribute
 * Definition: String Ogre::Technique::GPUDeviceNameRule::devicePattern
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1getdevicePattern (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this = reinterpret_cast<Ogre::Technique::GPUDeviceNameRule*>(_jni_pointer_); 
   
   // call library method 
   const std::string _cpp_result = _cpp_this->devicePattern; 
   return org::xbig::jni::to_jstring(_jni_env_, _cpp_result);
} /* String Ogre::Technique::GPUDeviceNameRule::devicePattern */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     setdevicePattern()
 * Type:       setter for public attribute
 * Definition: String Ogre::Technique::GPUDeviceNameRule::devicePattern
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1setdevicePattern (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring _jni_value_
)
{
   // parameter conversions 
  std::string _cpp__jni_value_ = ""; org::xbig::jni::to_stdstring(_jni_env_, _jni_value_, _cpp__jni_value_); // calls c-tor only. Not operator= .; 
   
   // cast pointer to C++ object 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this =reinterpret_cast<Ogre::Technique::GPUDeviceNameRule*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->devicePattern = _cpp__jni_value_;
} /* String Ogre::Technique::GPUDeviceNameRule::devicePattern */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     getincludeOrExclude()
 * Type:       getter for public attribute
 * Definition: IncludeOrExclude Ogre::Technique::GPUDeviceNameRule::includeOrExclude
 * Signature:  ()Ogre_Technique_IncludeOrExclude
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1getincludeOrExclude (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this = reinterpret_cast<Ogre::Technique::GPUDeviceNameRule*>(_jni_pointer_); 
   
   // call library method 
   const Ogre::Technique::IncludeOrExclude _cpp_result = _cpp_this->includeOrExclude; 
   return _cpp_result;
} /* IncludeOrExclude Ogre::Technique::GPUDeviceNameRule::includeOrExclude */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     setincludeOrExclude()
 * Type:       setter for public attribute
 * Definition: IncludeOrExclude Ogre::Technique::GPUDeviceNameRule::includeOrExclude
 * Signature:  (Ogre_Technique_IncludeOrExclude)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1setincludeOrExclude (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
)
{
   // parameter conversions 
  Ogre::Technique::IncludeOrExclude _cpp__jni_value_ = (Ogre::Technique::IncludeOrExclude)_jni_value_; 
   
   // cast pointer to C++ object 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this =reinterpret_cast<Ogre::Technique::GPUDeviceNameRule*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->includeOrExclude = _cpp__jni_value_;
} /* IncludeOrExclude Ogre::Technique::GPUDeviceNameRule::includeOrExclude */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     getcaseSensitive()
 * Type:       getter for public attribute
 * Definition: bool Ogre::Technique::GPUDeviceNameRule::caseSensitive
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1getcaseSensitive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
)
{
   // parameter conversions 
   
   // cast pointer to C++ object 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this = reinterpret_cast<Ogre::Technique::GPUDeviceNameRule*>(_jni_pointer_); 
   
   // call library method 
   const bool _cpp_result = _cpp_this->caseSensitive; 
   return _cpp_result ? 1 : 0;
} /* bool Ogre::Technique::GPUDeviceNameRule::caseSensitive */


/*
 * Class:      org.ogre4j.Technique.00024GPUDeviceNameRule
 * Method:     setcaseSensitive()
 * Type:       setter for public attribute
 * Definition: bool Ogre::Technique::GPUDeviceNameRule::caseSensitive
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique_00024GPUDeviceNameRule__1setcaseSensitive (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
)
{
   // parameter conversions 
  bool _cpp__jni_value_ = _jni_value_ ? true : false; 
   
   // cast pointer to C++ object 
   Ogre::Technique::GPUDeviceNameRule* _cpp_this =reinterpret_cast<Ogre::Technique::GPUDeviceNameRule*>(_jni_pointer_); 
   
   // call library method 
   _cpp_this->caseSensitive = _cpp__jni_value_;
} /* bool Ogre::Technique::GPUDeviceNameRule::caseSensitive */
