///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_LogManager__
#define __Included_org_ogre4j_LogManager__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.LogManager
 * Method:     LogManager()
 * Type:       constructor
 * Definition: Ogre::LogManager::LogManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1_1createLogManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     createLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::createLog
 * Signature:  (std_stringZZZ)Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1createLog_1_1StringRbvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean defaultLog, 
  jboolean debuggerOutput, 
  jboolean suppressFileOutput
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     getLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::getLog
 * Signature:  (std_string)Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getLog_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     getDefaultLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::getDefaultLog
 * Signature:  ()Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getDefaultLog (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     destroyLog()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::destroyLog
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1destroyLog_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     destroyLog()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::destroyLog
 * Signature:  (Ogre_Log)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1destroyLog_1_1Logp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong log
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     setDefaultLog()
 * Type:       non-virtual method
 * Definition: Log* Ogre::LogManager::setDefaultLog
 * Signature:  (Ogre_Log)Ogre_Log
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1setDefaultLog_1_1Logp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newLog
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     logMessage()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::logMessage
 * Signature:  (std_stringOgre_LogMessageLevelZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1logMessage_1_1StringRLogMessageLevelvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring message, 
  jint lml, 
  jboolean maskDebug
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     logMessage()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::logMessage
 * Signature:  (Ogre_LogMessageLevelstd_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1logMessage_1_1LogMessageLevelvStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint lml, 
  jstring message, 
  jboolean maskDebug
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     stream()
 * Type:       non-virtual method
 * Definition: Log::Stream Ogre::LogManager::stream
 * Signature:  (Ogre_LogMessageLevelZ)Ogre_Log_Stream
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1stream_1_1LogMessageLevelvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint lml, 
  jboolean maskDebug
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     setLogDetail()
 * Type:       non-virtual method
 * Definition: void Ogre::LogManager::setLogDetail
 * Signature:  (Ogre_LoggingLevel)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1setLogDetail_1_1LoggingLevelv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint ll
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static LogManager& Ogre::LogManager::getSingleton
 * Signature:  ()Ogre_LogManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static LogManager* Ogre::LogManager::getSingletonPtr
 * Signature:  ()Ogre_LogManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_LogManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.LogManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::LogManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_LogManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_LogManager__*/
