///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Plane__
#define __Included_org_ogre4j_Plane__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Plane)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1PlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Vector3float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1Vector3RRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkNormal, 
  jfloat fConstant
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat a, 
  jfloat b, 
  jfloat c, 
  jfloat d
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1Vector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkNormal, 
  jlong rkPoint
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     Plane()
 * Type:       constructor
 * Definition: Ogre::Plane::Plane
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1_1createPlane_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkPoint0, 
  jlong rkPoint1, 
  jlong rkPoint2
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     getSide()
 * Type:       non-virtual method
 * Definition: Side Ogre::Plane::getSide
 * Signature:  (Ogre_Vector3)Ogre_Plane_Side
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Plane__1getSide_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkPoint
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     getSide()
 * Type:       non-virtual method
 * Definition: Side Ogre::Plane::getSide
 * Signature:  (Ogre_AxisAlignedBox)Ogre_Plane_Side
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Plane__1getSide_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkBox
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     getSide()
 * Type:       non-virtual method
 * Definition: Side Ogre::Plane::getSide
 * Signature:  (Ogre_Vector3Ogre_Vector3)Ogre_Plane_Side
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Plane__1getSide_1_1Vector3RVector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong centre, 
  jlong halfSize
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     getDistance()
 * Type:       non-virtual method
 * Definition: Real Ogre::Plane::getDistance
 * Signature:  (Ogre_Vector3)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Plane__1getDistance_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkPoint
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     redefine()
 * Type:       non-virtual method
 * Definition: void Ogre::Plane::redefine
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1redefine_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkPoint0, 
  jlong rkPoint1, 
  jlong rkPoint2
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     redefine()
 * Type:       non-virtual method
 * Definition: void Ogre::Plane::redefine
 * Signature:  (Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1redefine_1_1Vector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkNormal, 
  jlong rkPoint
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     projectVector()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Plane::projectVector
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1projectVector_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong v
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     normalise()
 * Type:       non-virtual method
 * Definition: Real Ogre::Plane::normalise
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Plane__1normalise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Plane::operator==
 * Signature:  (Ogre_Plane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Plane__1operatorEqual_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Plane::operator!=
 * Signature:  (Ogre_Plane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Plane__1operatorNotEqual_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Plane::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     getnormal()
 * Type:       getter for public attribute
 * Definition: Vector3 Ogre::Plane::normal
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Plane__1getnormal (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     setnormal()
 * Type:       setter for public attribute
 * Definition: Vector3 Ogre::Plane::normal
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1setnormal (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     getd()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Plane::d
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Plane__1getd (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Plane
 * Method:     setd()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Plane::d
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Plane__1setd (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Plane__*/
