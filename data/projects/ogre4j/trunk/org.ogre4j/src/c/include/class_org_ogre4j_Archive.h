///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Archive__
#define __Included_org_ogre4j_Archive__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Archive
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Archive::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Archive__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     isCaseSensitive()
 * Type:       pure virtual method
 * Definition: virtual bool Ogre::Archive::isCaseSensitive
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Archive__1isCaseSensitive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     load()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::Archive::load
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Archive__1load (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     unload()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::Archive::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Archive__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     open()
 * Type:       pure virtual method
 * Definition: virtual DataStreamPtr Ogre::Archive::open
 * Signature:  (std_string)Ogre_DataStreamPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Archive__1open_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     list()
 * Type:       pure virtual method
 * Definition: virtual StringVectorPtr Ogre::Archive::list
 * Signature:  (ZZ)Ogre_StringVectorPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Archive__1list_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean recursive, 
  jboolean dirs
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     listFileInfo()
 * Type:       pure virtual method
 * Definition: virtual FileInfoListPtr Ogre::Archive::listFileInfo
 * Signature:  (ZZ)Ogre_FileInfoListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Archive__1listFileInfo_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean recursive, 
  jboolean dirs
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     find()
 * Type:       pure virtual method
 * Definition: virtual StringVectorPtr Ogre::Archive::find
 * Signature:  (std_stringZZ)Ogre_StringVectorPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Archive__1find_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pattern, 
  jboolean recursive, 
  jboolean dirs
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     exists()
 * Type:       pure virtual method
 * Definition: virtual bool Ogre::Archive::exists
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Archive__1exists_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     getModifiedTime()
 * Type:       pure virtual method
 * Definition: virtual time_t Ogre::Archive::getModifiedTime
 * Signature:  (std_string)J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Archive__1getModifiedTime_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     findFileInfo()
 * Type:       pure virtual method
 * Definition: virtual FileInfoListPtr Ogre::Archive::findFileInfo
 * Signature:  (std_stringZZ)Ogre_FileInfoListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Archive__1findFileInfo_1_1StringRbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pattern, 
  jboolean recursive, 
  jboolean dirs
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     getType()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Archive::getType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Archive__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Archive
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Archive::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Archive__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Archive__*/
