///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_CompositionTargetPass__
#define __Included_org_ogre4j_CompositionTargetPass__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     CompositionTargetPass()
 * Type:       constructor
 * Definition: Ogre::CompositionTargetPass::CompositionTargetPass
 * Signature:  (Ogre_CompositionTechnique)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1_1createCompositionTargetPass_1_1CompositionTechniquep (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setInputMode()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setInputMode
 * Signature:  (Ogre_CompositionTargetPass_InputMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setInputMode_1_1InputModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getInputMode()
 * Type:       non-virtual method
 * Definition: InputMode Ogre::CompositionTargetPass::getInputMode
 * Signature:  ()Ogre_CompositionTargetPass_InputMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionTargetPass__1getInputMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setOutputName()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setOutputName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setOutputName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring out
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getOutputName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::CompositionTargetPass::getOutputName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_CompositionTargetPass__1getOutputName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setOnlyInitial()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setOnlyInitial
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setOnlyInitial_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean value
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getOnlyInitial()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionTargetPass::getOnlyInitial
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionTargetPass__1getOnlyInitial (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setVisibilityMask()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setVisibilityMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setVisibilityMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mask
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getVisibilityMask()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::CompositionTargetPass::getVisibilityMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getVisibilityMask (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setMaterialScheme()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setMaterialScheme
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setMaterialScheme_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring schemeName
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getMaterialScheme()
 * Type:       non-virtual method
 * Definition: const String& Ogre::CompositionTargetPass::getMaterialScheme
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_CompositionTargetPass__1getMaterialScheme_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setShadowsEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setShadowsEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setShadowsEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getShadowsEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionTargetPass::getShadowsEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionTargetPass__1getShadowsEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     setLodBias()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::setLodBias
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1setLodBias_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat bias
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getLodBias()
 * Type:       non-virtual method
 * Definition: float Ogre::CompositionTargetPass::getLodBias
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_CompositionTargetPass__1getLodBias (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     createPass()
 * Type:       non-virtual method
 * Definition: CompositionPass* Ogre::CompositionTargetPass::createPass
 * Signature:  ()Ogre_CompositionPass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1createPass (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     removePass()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::removePass
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1removePass_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint idx
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getPass()
 * Type:       non-virtual method
 * Definition: CompositionPass* Ogre::CompositionTargetPass::getPass
 * Signature:  (I)Ogre_CompositionPass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getPass_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint idx
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getNumPasses()
 * Type:       non-virtual method
 * Definition: size_t Ogre::CompositionTargetPass::getNumPasses
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionTargetPass__1getNumPasses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     removeAllPasses()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionTargetPass::removeAllPasses
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1removeAllPasses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getPassIterator()
 * Type:       non-virtual method
 * Definition: PassIterator Ogre::CompositionTargetPass::getPassIterator
 * Signature:  ()Ogre_CompositionTargetPass_PassIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getPassIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: CompositionTechnique* Ogre::CompositionTargetPass::getParent
 * Signature:  ()Ogre_CompositionTechnique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionTargetPass__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     _isSupported()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionTargetPass::_isSupported
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionTargetPass__1_1isSupported (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionTargetPass
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::CompositionTargetPass::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionTargetPass__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_CompositionTargetPass__*/
