///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_ControllerManager__
#define __Included_org_ogre4j_ControllerManager__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     ControllerManager()
 * Type:       constructor
 * Definition: Ogre::ControllerManager::ControllerManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1_1createControllerManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createController()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createController
 * Signature:  (Ogre_ControllerValueRealPtrOgre_ControllerValueRealPtrOgre_ControllerFunctionRealPtr)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createController_1_1ControllerValueRealPtrRControllerValueRealPtrRControllerFunctionRealPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong src, 
  jlong dest, 
  jlong func
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createFrameTimePassthroughController()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createFrameTimePassthroughController
 * Signature:  (Ogre_ControllerValueRealPtr)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createFrameTimePassthroughController_1_1ControllerValueRealPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     clearControllers()
 * Type:       non-virtual method
 * Definition: void Ogre::ControllerManager::clearControllers
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ControllerManager__1clearControllers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     updateAllControllers()
 * Type:       non-virtual method
 * Definition: void Ogre::ControllerManager::updateAllControllers
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ControllerManager__1updateAllControllers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     getFrameTimeSource()
 * Type:       non-virtual method
 * Definition: const ControllerValueRealPtr& Ogre::ControllerManager::getFrameTimeSource
 * Signature:  ()Ogre_ControllerValueRealPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1getFrameTimeSource_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     getPassthroughControllerFunction()
 * Type:       non-virtual method
 * Definition: const ControllerFunctionRealPtr& Ogre::ControllerManager::getPassthroughControllerFunction
 * Signature:  ()Ogre_ControllerFunctionRealPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1getPassthroughControllerFunction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createTextureAnimator()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createTextureAnimator
 * Signature:  (Ogre_TextureUnitStatefloat)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createTextureAnimator_1_1TextureUnitStatepRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong layer, 
  jfloat sequenceTime
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createTextureUVScroller()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createTextureUVScroller
 * Signature:  (Ogre_TextureUnitStatefloat)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createTextureUVScroller_1_1TextureUnitStatepRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong layer, 
  jfloat speed
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createTextureUScroller()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createTextureUScroller
 * Signature:  (Ogre_TextureUnitStatefloat)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createTextureUScroller_1_1TextureUnitStatepRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong layer, 
  jfloat uSpeed
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createTextureVScroller()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createTextureVScroller
 * Signature:  (Ogre_TextureUnitStatefloat)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createTextureVScroller_1_1TextureUnitStatepRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong layer, 
  jfloat vSpeed
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createTextureRotater()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createTextureRotater
 * Signature:  (Ogre_TextureUnitStatefloat)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createTextureRotater_1_1TextureUnitStatepRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong layer, 
  jfloat speed
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createTextureWaveTransformer()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createTextureWaveTransformer
 * Signature:  (Ogre_TextureUnitStateOgre_TextureUnitState_TextureTransformTypeOgre_WaveformTypefloatfloatfloatfloat)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createTextureWaveTransformer_1_1TextureUnitStatepTextureUnitState_1TextureTransformTypevWaveformTypevRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong layer, 
  jint ttype, 
  jint waveType, 
  jfloat base, 
  jfloat frequency, 
  jfloat phase, 
  jfloat amplitude
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     createGpuProgramTimerParam()
 * Type:       non-virtual method
 * Definition: Controller<Real>* Ogre::ControllerManager::createGpuProgramTimerParam
 * Signature:  (Ogre_GpuProgramParametersIfloat)Controller__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1createGpuProgramTimerParam_1_1GpuProgramParameterspivRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params, 
  jint paramIndex, 
  jfloat timeFactor
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     destroyController()
 * Type:       non-virtual method
 * Definition: void Ogre::ControllerManager::destroyController
 * Signature:  (Controller__Real__)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ControllerManager__1destroyController_1_1Controller_1_1Real_1_1p (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong controller
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     getTimeFactor()
 * Type:       non-virtual method
 * Definition: Real Ogre::ControllerManager::getTimeFactor
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ControllerManager__1getTimeFactor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     setTimeFactor()
 * Type:       non-virtual method
 * Definition: void Ogre::ControllerManager::setTimeFactor
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ControllerManager__1setTimeFactor_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat tf
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     getFrameDelay()
 * Type:       non-virtual method
 * Definition: Real Ogre::ControllerManager::getFrameDelay
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ControllerManager__1getFrameDelay_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     setFrameDelay()
 * Type:       non-virtual method
 * Definition: void Ogre::ControllerManager::setFrameDelay
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ControllerManager__1setFrameDelay_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fd
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     getElapsedTime()
 * Type:       non-virtual method
 * Definition: Real Ogre::ControllerManager::getElapsedTime
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_ControllerManager__1getElapsedTime_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     setElapsedTime()
 * Type:       non-virtual method
 * Definition: void Ogre::ControllerManager::setElapsedTime
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ControllerManager__1setElapsedTime_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat elapsedTime
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static ControllerManager& Ogre::ControllerManager::getSingleton
 * Signature:  ()Ogre_ControllerManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static ControllerManager* Ogre::ControllerManager::getSingletonPtr
 * Signature:  ()Ogre_ControllerManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ControllerManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ControllerManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ControllerManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ControllerManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_ControllerManager__*/
