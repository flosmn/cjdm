///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Viewport__
#define __Included_org_ogre4j_Viewport__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Viewport
 * Method:     Viewport()
 * Type:       constructor
 * Definition: Ogre::Viewport::Viewport
 * Signature:  (Ogre_CameraOgre_RenderTargetfloatfloatfloatfloatI)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1_1createViewport_1_1CamerapRenderTargetpRealvRealvRealvRealviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong camera, 
  jlong target, 
  jfloat left, 
  jfloat top, 
  jfloat width, 
  jfloat height, 
  jint ZOrder
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     _updateDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::_updateDimensions
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1_1updateDimensions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     update()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::update
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1update (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getTarget()
 * Type:       non-virtual method
 * Definition: RenderTarget* Ogre::Viewport::getTarget
 * Signature:  ()Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1getTarget_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getCamera()
 * Type:       non-virtual method
 * Definition: Camera* Ogre::Viewport::getCamera
 * Signature:  ()Ogre_Camera
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1getCamera_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setCamera()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getZOrder()
 * Type:       non-virtual method
 * Definition: int Ogre::Viewport::getZOrder
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Viewport__1getZOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getLeft()
 * Type:       non-virtual method
 * Definition: Real Ogre::Viewport::getLeft
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Viewport__1getLeft_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getTop()
 * Type:       non-virtual method
 * Definition: Real Ogre::Viewport::getTop
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Viewport__1getTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::Viewport::getWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Viewport__1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::Viewport::getHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Viewport__1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getActualLeft()
 * Type:       non-virtual method
 * Definition: int Ogre::Viewport::getActualLeft
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Viewport__1getActualLeft_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getActualTop()
 * Type:       non-virtual method
 * Definition: int Ogre::Viewport::getActualTop
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Viewport__1getActualTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getActualWidth()
 * Type:       non-virtual method
 * Definition: int Ogre::Viewport::getActualWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Viewport__1getActualWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getActualHeight()
 * Type:       non-virtual method
 * Definition: int Ogre::Viewport::getActualHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Viewport__1getActualHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setDimensions
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setDimensions_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat top, 
  jfloat width, 
  jfloat height
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setBackgroundColour()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setBackgroundColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setBackgroundColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getBackgroundColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Viewport::getBackgroundColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1getBackgroundColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setClearEveryFrame()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setClearEveryFrame
 * Signature:  (ZI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setClearEveryFrame_1_1bvIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean clear, 
  jlong buffers
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getClearEveryFrame()
 * Type:       non-virtual method
 * Definition: bool Ogre::Viewport::getClearEveryFrame
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Viewport__1getClearEveryFrame_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getClearBuffers()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::Viewport::getClearBuffers
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1getClearBuffers_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setMaterialScheme()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setMaterialScheme
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setMaterialScheme_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring schemeName
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getMaterialScheme()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Viewport::getMaterialScheme
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Viewport__1getMaterialScheme_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getActualDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::getActualDimensions
 * Signature:  (IIII)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1getActualDimensions_1_1iriririr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong left, 
  jlong top, 
  jlong width, 
  jlong height
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     _isUpdated()
 * Type:       non-virtual method
 * Definition: bool Ogre::Viewport::_isUpdated
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Viewport__1_1isUpdated_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     _clearUpdatedFlag()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::_clearUpdatedFlag
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1_1clearUpdatedFlag (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     _getNumRenderedFaces()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::Viewport::_getNumRenderedFaces
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1_1getNumRenderedFaces_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     _getNumRenderedBatches()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::Viewport::_getNumRenderedBatches
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1_1getNumRenderedBatches_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setOverlaysEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setOverlaysEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setOverlaysEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getOverlaysEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Viewport::getOverlaysEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Viewport__1getOverlaysEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setSkiesEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setSkiesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setSkiesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getSkiesEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Viewport::getSkiesEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Viewport__1getSkiesEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setShadowsEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setShadowsEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setShadowsEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getShadowsEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Viewport::getShadowsEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Viewport__1getShadowsEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setVisibilityMask()
 * Type:       non-virtual method
 * Definition: void Ogre::Viewport::setVisibilityMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setVisibilityMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mask
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getVisibilityMask()
 * Type:       non-virtual method
 * Definition: uint Ogre::Viewport::getVisibilityMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1getVisibilityMask_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     setRenderQueueInvocationSequenceName()
 * Type:       virtual method
 * Definition: virtual void Ogre::Viewport::setRenderQueueInvocationSequenceName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1setRenderQueueInvocationSequenceName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring sequenceName
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     getRenderQueueInvocationSequenceName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Viewport::getRenderQueueInvocationSequenceName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Viewport__1getRenderQueueInvocationSequenceName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     _getRenderQueueInvocationSequence()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocationSequence* Ogre::Viewport::_getRenderQueueInvocationSequence
 * Signature:  ()Ogre_RenderQueueInvocationSequence
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Viewport__1_1getRenderQueueInvocationSequence (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Viewport
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Viewport::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Viewport__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Viewport__*/
