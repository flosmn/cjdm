///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_ArchiveManager__
#define __Included_org_ogre4j_ArchiveManager__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     ArchiveManager()
 * Type:       constructor
 * Definition: Ogre::ArchiveManager::ArchiveManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1_1createArchiveManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     load()
 * Type:       non-virtual method
 * Definition: Archive* Ogre::ArchiveManager::load
 * Signature:  (std_stringstd_string)Ogre_Archive
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1load_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename, 
  jstring archiveType
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     unload()
 * Type:       non-virtual method
 * Definition: void Ogre::ArchiveManager::unload
 * Signature:  (Ogre_Archive)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1unload_1_1Archivep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong arch
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     unload()
 * Type:       non-virtual method
 * Definition: void Ogre::ArchiveManager::unload
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1unload_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     getArchiveIterator()
 * Type:       non-virtual method
 * Definition: ArchiveMapIterator Ogre::ArchiveManager::getArchiveIterator
 * Signature:  ()Ogre_ArchiveManager_ArchiveMapIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1getArchiveIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     addArchiveFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::ArchiveManager::addArchiveFactory
 * Signature:  (Ogre_ArchiveFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1addArchiveFactory_1_1ArchiveFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong factory
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static ArchiveManager& Ogre::ArchiveManager::getSingleton
 * Signature:  ()Ogre_ArchiveManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static ArchiveManager* Ogre::ArchiveManager::getSingletonPtr
 * Signature:  ()Ogre_ArchiveManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ArchiveManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ArchiveManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ArchiveManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ArchiveManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_ArchiveManager__*/
