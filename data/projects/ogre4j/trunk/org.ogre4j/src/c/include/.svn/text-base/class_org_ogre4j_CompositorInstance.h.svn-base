///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_CompositorInstance__
#define __Included_org_ogre4j_CompositorInstance__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     CompositorInstance()
 * Type:       constructor
 * Definition: Ogre::CompositorInstance::CompositorInstance
 * Signature:  (Ogre_CompositorOgre_CompositionTechniqueOgre_CompositorChain)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1_1createCompositorInstance_1_1CompositorpCompositionTechniquepCompositorChainp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong filter, 
  jlong technique, 
  jlong chain
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     setEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean value
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositorInstance::getEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositorInstance__1getEnabled (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getTextureInstanceName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::CompositorInstance::getTextureInstanceName
 * Signature:  (std_stringI)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_CompositorInstance__1getTextureInstanceName_1_1StringRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint mrtIndex
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getRenderTarget()
 * Type:       non-virtual method
 * Definition: RenderTarget* Ogre::CompositorInstance::getRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _compileTargetOperations()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorInstance::_compileTargetOperations
 * Signature:  (Ogre_CompositorInstance_CompiledState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1compileTargetOperations_1_1CompiledStater (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiledState
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _compileOutputOperation()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorInstance::_compileOutputOperation
 * Signature:  (Ogre_CompositorInstance_TargetOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1compileOutputOperation_1_1TargetOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong finalState
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getCompositor()
 * Type:       non-virtual method
 * Definition: Compositor* Ogre::CompositorInstance::getCompositor
 * Signature:  ()Ogre_Compositor
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getCompositor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getTechnique()
 * Type:       non-virtual method
 * Definition: CompositionTechnique* Ogre::CompositorInstance::getTechnique
 * Signature:  ()Ogre_CompositionTechnique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getTechnique (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     getChain()
 * Type:       non-virtual method
 * Definition: CompositorChain* Ogre::CompositorInstance::getChain
 * Signature:  ()Ogre_CompositorChain
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorInstance__1getChain (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     addListener()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::addListener
 * Signature:  (Ogre_CompositorInstance_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     removeListener()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::removeListener
 * Signature:  (Ogre_CompositorInstance_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _fireNotifyMaterialSetup()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::_fireNotifyMaterialSetup
 * Signature:  (unsigned_intOgre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1fireNotifyMaterialSetup_1_1uint32vMaterialPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass_id, 
  jlong mat
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     _fireNotifyMaterialRender()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorInstance::_fireNotifyMaterialRender
 * Signature:  (unsigned_intOgre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1fireNotifyMaterialRender_1_1uint32vMaterialPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass_id, 
  jlong mat
);

/*
 * Class:      org.ogre4j.CompositorInstance
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::CompositorInstance::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorInstance__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_CompositorInstance__*/
