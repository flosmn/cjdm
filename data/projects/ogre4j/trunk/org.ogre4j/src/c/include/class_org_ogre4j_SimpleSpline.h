///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_SimpleSpline__
#define __Included_org_ogre4j_SimpleSpline__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     SimpleSpline()
 * Type:       constructor
 * Definition: Ogre::SimpleSpline::SimpleSpline
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1_1createSimpleSpline (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     addPoint()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::addPoint
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1addPoint_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     getPoint()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::SimpleSpline::getPoint
 * Signature:  (S)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1getPoint_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     getNumPoints()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::SimpleSpline::getNumPoints
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SimpleSpline__1getNumPoints_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     updatePoint()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::updatePoint
 * Signature:  (SOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1updatePoint_1_1HvVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     interpolate()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::SimpleSpline::interpolate
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1interpolate_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat t
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     interpolate()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::SimpleSpline::interpolate
 * Signature:  (Ifloat)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SimpleSpline__1interpolate_1_1IvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fromIndex, 
  jfloat t
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     setAutoCalculate()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::setAutoCalculate
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1setAutoCalculate_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoCalc
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     recalcTangents()
 * Type:       non-virtual method
 * Definition: void Ogre::SimpleSpline::recalcTangents
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1recalcTangents (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SimpleSpline
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SimpleSpline::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SimpleSpline__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_SimpleSpline__*/
