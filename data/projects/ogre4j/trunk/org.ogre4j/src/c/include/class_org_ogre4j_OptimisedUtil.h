///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_OptimisedUtil__
#define __Included_org_ogre4j_OptimisedUtil__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     softwareVertexSkinning()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::softwareVertexSkinning
 * Signature:  (FFFFFCOgre_Matrix4IIIIIIII)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1softwareVertexSkinning_1_1FPFpFPFpFPBPMatrix4Piviviviviviviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong srcPosPtr, 
  jlong destPosPtr, 
  jlong srcNormPtr, 
  jlong destNormPtr, 
  jlong blendWeightPtr, 
  jlong blendIndexPtr, 
  jlong blendMatrices, 
  jint srcPosStride, 
  jint destPosStride, 
  jint srcNormStride, 
  jint destNormStride, 
  jint blendWeightStride, 
  jint blendIndexStride, 
  jint numWeightsPerVertex, 
  jint numVertices
);

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     softwareVertexMorph()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::softwareVertexMorph
 * Signature:  (floatFFFI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1softwareVertexMorph_1_1RealvFPFPFpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat t, 
  jlong srcPos1, 
  jlong srcPos2, 
  jlong dstPos, 
  jint numVertices
);

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     concatenateAffineMatrices()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::concatenateAffineMatrices
 * Signature:  (Ogre_Matrix4Ogre_Matrix4Ogre_Matrix4I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1concatenateAffineMatrices_1_1Matrix4RMatrix4PMatrix4piv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong baseMatrix, 
  jlong srcMatrices, 
  jlong dstMatrices, 
  jint numMatrices
);

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     calculateFaceNormals()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::calculateFaceNormals
 * Signature:  (FOgre_EdgeData_TriangleOgre_Vector4I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1calculateFaceNormals_1_1FPEdgeData_1TrianglePVector4piv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong positions, 
  jlong triangles, 
  jlong faceNormals, 
  jint numTriangles
);

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     calculateLightFacing()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::calculateLightFacing
 * Signature:  (Ogre_Vector4Ogre_Vector4CI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1calculateLightFacing_1_1Vector4RVector4Pcpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lightPos, 
  jlong faceNormals, 
  jlong lightFacings, 
  jint numFaces
);

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     extrudeVertices()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::OptimisedUtil::extrudeVertices
 * Signature:  (Ogre_Vector4floatFFI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1extrudeVertices_1_1Vector4RRealvFPFpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lightPos, 
  jfloat extrudeDist, 
  jlong srcPositions, 
  jlong destPositions, 
  jint numVertices
);

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     getImplementation()
 * Type:       static method
 * Definition: static OptimisedUtil* Ogre::OptimisedUtil::getImplementation
 * Signature:  ()Ogre_OptimisedUtil
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OptimisedUtil__1getImplementation (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.OptimisedUtil
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::OptimisedUtil::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OptimisedUtil__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_OptimisedUtil__*/
