///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Image__
#define __Included_org_ogre4j_Image__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Image
 * Method:     Image()
 * Type:       constructor
 * Definition: Ogre::Image::Image
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1_1createImage (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     Image()
 * Type:       constructor
 * Definition: Ogre::Image::Image
 * Signature:  (Ogre_Image)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1_1createImage_1_1ImageR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong img
);

/*
 * Class:      org.ogre4j.Image
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::operator=
 * Signature:  (Ogre_Image)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1operatorAssignment_1_1ImageR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong img
);

/*
 * Class:      org.ogre4j.Image
 * Method:     flipAroundY()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::flipAroundY
 * Signature:  ()Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1flipAroundY (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     flipAroundX()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::flipAroundX
 * Signature:  ()Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1flipAroundX (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     loadDynamicImage()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadDynamicImage
 * Signature:  (unsigned_charIIIOgre_PixelFormatZII)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadDynamicImage_1_1ucharpivivivPixelFormatvbviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pData, 
  jint uWidth, 
  jint uHeight, 
  jint depth, 
  jint eFormat, 
  jboolean autoDelete, 
  jint numFaces, 
  jint numMipMaps
);

/*
 * Class:      org.ogre4j.Image
 * Method:     loadDynamicImage()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadDynamicImage
 * Signature:  (unsigned_charIIOgre_PixelFormat)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadDynamicImage_1_1ucharpivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pData, 
  jint uWidth, 
  jint uHeight, 
  jint eFormat
);

/*
 * Class:      org.ogre4j.Image
 * Method:     loadRawData()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadRawData
 * Signature:  (Ogre_DataStreamPtrIIIOgre_PixelFormatII)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadRawData_1_1DataStreamPtrrivivivPixelFormatviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jint uWidth, 
  jint uHeight, 
  jint uDepth, 
  jint eFormat, 
  jint numFaces, 
  jint numMipMaps
);

/*
 * Class:      org.ogre4j.Image
 * Method:     loadRawData()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::loadRawData
 * Signature:  (Ogre_DataStreamPtrIIOgre_PixelFormat)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1loadRawData_1_1DataStreamPtrrivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jint uWidth, 
  jint uHeight, 
  jint eFormat
);

/*
 * Class:      org.ogre4j.Image
 * Method:     load()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::load
 * Signature:  (std_stringstd_string)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1load_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strFileName, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.Image
 * Method:     load()
 * Type:       non-virtual method
 * Definition: Image& Ogre::Image::load
 * Signature:  (Ogre_DataStreamPtrstd_string)Ogre_Image
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1load_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring type
);

/*
 * Class:      org.ogre4j.Image
 * Method:     save()
 * Type:       non-virtual method
 * Definition: void Ogre::Image::save
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1save_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.Image
 * Method:     encode()
 * Type:       non-virtual method
 * Definition: DataStreamPtr Ogre::Image::encode
 * Signature:  (std_string)Ogre_DataStreamPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1encode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring formatextension
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getData()
 * Type:       non-virtual method
 * Definition: uchar* Ogre::Image::getData
 * Signature:  ()unsigned_char
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getData_const()
 * Type:       non-virtual method
 * Definition: const uchar* Ogre::Image::getData
 * Signature:  ()unsigned_char
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getData_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getSize()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getNumMipmaps()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getNumMipmaps
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getNumMipmaps_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     hasFlag()
 * Type:       non-virtual method
 * Definition: bool Ogre::Image::hasFlag
 * Signature:  (Ogre_ImageFlags)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Image__1hasFlag_1_1ImageFlagsV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint imgFlag
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getWidth()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getHeight()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getDepth()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getDepth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getDepth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getNumFaces()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getNumFaces
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getNumFaces_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getRowSpan()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Image::getRowSpan
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getRowSpan_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getFormat()
 * Type:       non-virtual method
 * Definition: PixelFormat Ogre::Image::getFormat
 * Signature:  ()Ogre_PixelFormat
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1getFormat_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getBPP()
 * Type:       non-virtual method
 * Definition: uchar Ogre::Image::getBPP
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_Image__1getBPP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getHasAlpha()
 * Type:       non-virtual method
 * Definition: bool Ogre::Image::getHasAlpha
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Image__1getHasAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getColourAt()
 * Type:       non-virtual method
 * Definition: ColourValue Ogre::Image::getColourAt
 * Signature:  (III)Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getColourAt_1_1iviviv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint x, 
  jint y, 
  jint z
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getPixelBox()
 * Type:       non-virtual method
 * Definition: PixelBox Ogre::Image::getPixelBox
 * Signature:  (II)Ogre_PixelBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Image__1getPixelBox_1_1iviv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint face, 
  jint mipmap
);

/*
 * Class:      org.ogre4j.Image
 * Method:     resize()
 * Type:       non-virtual method
 * Definition: void Ogre::Image::resize
 * Signature:  (unsigned_shortunsigned_shortOgre_Image_Filter)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1resize_1_1ushortvushortvFilterv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint width, 
  jint height, 
  jint filter
);

/*
 * Class:      org.ogre4j.Image
 * Method:     applyGamma()
 * Type:       static method
 * Definition: static void Ogre::Image::applyGamma
 * Signature:  (unsigned_charfloatIunsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1applyGamma_1_1ucharpRealvivucharv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong buffer, 
  jfloat gamma, 
  jint size, 
  jshort bpp
);

/*
 * Class:      org.ogre4j.Image
 * Method:     scale()
 * Type:       static method
 * Definition: static void Ogre::Image::scale
 * Signature:  (Ogre_PixelBoxOgre_PixelBoxOgre_Image_Filter)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1scale_1_1PixelBoxRPixelBoxRFilterv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong src, 
  jlong dst, 
  jint filter
);

/*
 * Class:      org.ogre4j.Image
 * Method:     calculateSize()
 * Type:       static method
 * Definition: static size_t Ogre::Image::calculateSize
 * Signature:  (IIIIIOgre_PixelFormat)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Image__1calculateSize_1_1ivivivivivPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint mipmaps, 
  jint faces, 
  jint width, 
  jint height, 
  jint depth, 
  jint format
);

/*
 * Class:      org.ogre4j.Image
 * Method:     getFileExtFromMagic()
 * Type:       static method
 * Definition: static String Ogre::Image::getFileExtFromMagic
 * Signature:  (Ogre_DataStreamPtr)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Image__1getFileExtFromMagic_1_1DataStreamPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong stream
);

/*
 * Class:      org.ogre4j.Image
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Image::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Image__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Image__*/
