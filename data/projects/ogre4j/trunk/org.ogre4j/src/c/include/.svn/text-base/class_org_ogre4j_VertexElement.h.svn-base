///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_VertexElement__
#define __Included_org_ogre4j_VertexElement__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     VertexElement()
 * Type:       constructor
 * Definition: Ogre::VertexElement::VertexElement
 * Signature:  (SIOgre_VertexElementTypeOgre_VertexElementSemanticS)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexElement__1_1createVertexElement_1_1HvivVertexElementTypevVertexElementSemanticvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint source, 
  jint offset, 
  jint theType, 
  jint semantic, 
  jint index
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getSource()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::VertexElement::getSource
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getSource_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getOffset()
 * Type:       non-virtual method
 * Definition: size_t Ogre::VertexElement::getOffset
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getOffset_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getType()
 * Type:       non-virtual method
 * Definition: VertexElementType Ogre::VertexElement::getType
 * Signature:  ()Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getSemantic()
 * Type:       non-virtual method
 * Definition: VertexElementSemantic Ogre::VertexElement::getSemantic
 * Signature:  ()Ogre_VertexElementSemantic
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getSemantic_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::VertexElement::getIndex
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getIndex_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getSize()
 * Type:       non-virtual method
 * Definition: size_t Ogre::VertexElement::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::VertexElement::operator==
 * Signature:  (Ogre_VertexElement)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_VertexElement__1operatorEqual_1_1VertexElementR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VV)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpvp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpFp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (Vunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpRGBAp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VC)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpBp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     baseVertexPointerToElement()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexElement::baseVertexPointerToElement
 * Signature:  (VS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1baseVertexPointerToElement_1_1vpHp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pBase, 
  jlong pElem
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getTypeSize()
 * Type:       static method
 * Definition: static size_t Ogre::VertexElement::getTypeSize
 * Signature:  (Ogre_VertexElementType)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getTypeSize_1_1VertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint etype
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getTypeCount()
 * Type:       static method
 * Definition: static unsigned short Ogre::VertexElement::getTypeCount
 * Signature:  (Ogre_VertexElementType)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getTypeCount_1_1VertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint etype
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     multiplyTypeCount()
 * Type:       static method
 * Definition: static VertexElementType Ogre::VertexElement::multiplyTypeCount
 * Signature:  (Ogre_VertexElementTypeS)Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1multiplyTypeCount_1_1VertexElementTypevHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint baseType, 
  jint count
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getBaseType()
 * Type:       static method
 * Definition: static VertexElementType Ogre::VertexElement::getBaseType
 * Signature:  (Ogre_VertexElementType)Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getBaseType_1_1VertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint multiType
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     convertColourValue()
 * Type:       static method
 * Definition: static void Ogre::VertexElement::convertColourValue
 * Signature:  (Ogre_VertexElementTypeOgre_VertexElementTypeunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1convertColourValue_1_1VertexElementTypevVertexElementTypevuint32p (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint srcType, 
  jint dstType, 
  jlong ptr
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     convertColourValue()
 * Type:       static method
 * Definition: static uint32 Ogre::VertexElement::convertColourValue
 * Signature:  (Ogre_ColourValueOgre_VertexElementType)unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexElement__1convertColourValue_1_1ColourValueRVertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong src, 
  jint dst
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     getBestColourVertexElementType()
 * Type:       static method
 * Definition: static VertexElementType Ogre::VertexElement::getBestColourVertexElementType
 * Signature:  ()Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexElement__1getBestColourVertexElementType (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.VertexElement
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::VertexElement::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexElement__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_VertexElement__*/
