///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_ResourceBackgroundQueue__
#define __Included_org_ogre4j_ResourceBackgroundQueue__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     ResourceBackgroundQueue()
 * Type:       constructor
 * Definition: Ogre::ResourceBackgroundQueue::ResourceBackgroundQueue
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1_1createResourceBackgroundQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     setStartBackgroundThread()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceBackgroundQueue::setStartBackgroundThread
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1setStartBackgroundThread_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean startThread
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     getStartBackgroundThread()
 * Type:       non-virtual method
 * Definition: bool Ogre::ResourceBackgroundQueue::getStartBackgroundThread
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1getStartBackgroundThread (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     initialise()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceBackgroundQueue::initialise
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1initialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     shutdown()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceBackgroundQueue::shutdown
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1shutdown (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     initialiseResourceGroup()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::initialiseResourceGroup
 * Signature:  (std_stringOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1initialiseResourceGroup_1_1StringRListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     initialiseAllResourceGroups()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::initialiseAllResourceGroups
 * Signature:  (Ogre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1initialiseAllResourceGroups_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     prepareResourceGroup()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::prepareResourceGroup
 * Signature:  (std_stringOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1prepareResourceGroup_1_1StringRListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     loadResourceGroup()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::loadResourceGroup
 * Signature:  (std_stringOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1loadResourceGroup_1_1StringRListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::unload
 * Signature:  (std_stringstd_stringOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1unload_1_1StringRStringRListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resType, 
  jstring name, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::unload
 * Signature:  (std_stringunsigned_longOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1unload_1_1StringRResourceHandlevListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resType, 
  jlong handle, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     unloadResourceGroup()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::unloadResourceGroup
 * Signature:  (std_stringOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1unloadResourceGroup_1_1StringRListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::prepare
 * Signature:  (std_stringstd_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairListOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1prepare_1_1StringRStringRStringRbvManualResourceLoaderpNameValuePairListPListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resType, 
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual BackgroundProcessTicket Ogre::ResourceBackgroundQueue::load
 * Signature:  (std_stringstd_stringstd_stringZOgre_ManualResourceLoaderOgre_NameValuePairListOgre_ResourceBackgroundQueue_Listener)unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1load_1_1StringRStringRStringRbvManualResourceLoaderpNameValuePairListPListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring resType, 
  jstring name, 
  jstring group, 
  jboolean isManual, 
  jlong loader, 
  jlong loadParams, 
  jlong listener
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     isProcessComplete()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ResourceBackgroundQueue::isProcessComplete
 * Signature:  (unsigned_long)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1isProcessComplete_1_1BackgroundProcessTicketv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ticket
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     _doNextQueuedBackgroundProcess()
 * Type:       non-virtual method
 * Definition: bool Ogre::ResourceBackgroundQueue::_doNextQueuedBackgroundProcess
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1_1doNextQueuedBackgroundProcess (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     _initThread()
 * Type:       non-virtual method
 * Definition: void Ogre::ResourceBackgroundQueue::_initThread
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1_1initThread (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     _queueFireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceBackgroundQueue::_queueFireBackgroundPreparingComplete
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1_1queueFireBackgroundPreparingComplete_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     _queueFireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceBackgroundQueue::_queueFireBackgroundLoadingComplete
 * Signature:  (Ogre_Resource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1_1queueFireBackgroundLoadingComplete_1_1Resourcep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong res
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     _fireOnFrameCallbacks()
 * Type:       virtual method
 * Definition: virtual void Ogre::ResourceBackgroundQueue::_fireOnFrameCallbacks
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1_1fireOnFrameCallbacks (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static ResourceBackgroundQueue& Ogre::ResourceBackgroundQueue::getSingleton
 * Signature:  ()Ogre_ResourceBackgroundQueue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static ResourceBackgroundQueue* Ogre::ResourceBackgroundQueue::getSingletonPtr
 * Signature:  ()Ogre_ResourceBackgroundQueue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ResourceBackgroundQueue
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ResourceBackgroundQueue::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ResourceBackgroundQueue__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_ResourceBackgroundQueue__*/
