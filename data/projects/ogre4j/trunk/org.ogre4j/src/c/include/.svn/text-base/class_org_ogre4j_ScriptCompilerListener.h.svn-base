///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_ScriptCompilerListener__
#define __Included_org_ogre4j_ScriptCompilerListener__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     ScriptCompilerListener()
 * Type:       constructor
 * Definition: Ogre::ScriptCompilerListener::ScriptCompilerListener
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerListener__1_1createScriptCompilerListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     importFile()
 * Type:       virtual method
 * Definition: virtual ConcreteNodeListPtr Ogre::ScriptCompilerListener::importFile
 * Signature:  (Ogre_ScriptCompilerstd_string)Ogre_ConcreteNodeListPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerListener__1importFile_1_1ScriptCompilerpStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jstring name
);

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     preConversion()
 * Type:       virtual method
 * Definition: virtual void Ogre::ScriptCompilerListener::preConversion
 * Signature:  (Ogre_ScriptCompilerOgre_ConcreteNodeListPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerListener__1preConversion_1_1ScriptCompilerpConcreteNodeListPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jlong nodes
);

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     postConversion()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ScriptCompilerListener::postConversion
 * Signature:  (Ogre_ScriptCompilerOgre_AbstractNodeListPtr)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompilerListener__1postConversion_1_1ScriptCompilerpAbstractNodeListPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jlong a2
);

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     handleError()
 * Type:       virtual method
 * Definition: virtual void Ogre::ScriptCompilerListener::handleError
 * Signature:  (Ogre_ScriptCompilerunsigned_intstd_stringIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerListener__1handleError_1_1ScriptCompilerpuint32vStringRivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jlong code, 
  jstring file, 
  jint line, 
  jstring msg
);

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     handleEvent()
 * Type:       virtual method
 * Definition: virtual bool Ogre::ScriptCompilerListener::handleEvent
 * Signature:  (Ogre_ScriptCompilerstd_stringstd_vector__Ogre_Any__Ogre_Any)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompilerListener__1handleEvent_1_1ScriptCompilerpStringRstd_1vector_1_1Ogre_1Any_1_1rOgre_1Anyp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jstring name, 
  jlong args, 
  jlong retval
);

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     createObject()
 * Type:       virtual method
 * Definition: virtual Ogre::Any Ogre::ScriptCompilerListener::createObject
 * Signature:  (Ogre_ScriptCompilerstd_stringstd_vector__Ogre_Any__)Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompilerListener__1createObject_1_1ScriptCompilerpStringRstd_1vector_1_1Ogre_1Any_1_1r (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong compiler, 
  jstring type, 
  jlong args
);

/*
 * Class:      org.ogre4j.ScriptCompilerListener
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ScriptCompilerListener::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompilerListener__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_ScriptCompilerListener__*/
