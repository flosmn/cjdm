///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Node__
#define __Included_org_ogre4j_Node__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Node
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Node::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Node__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getParent()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::getParent
 * Signature:  ()Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getOrientation()
 * Type:       virtual method
 * Definition: virtual const Quaternion& Ogre::Node::getOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setOrientation
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setOrientation_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setOrientation
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setOrientation_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat w, 
  jfloat x, 
  jfloat y, 
  jfloat z
);

/*
 * Class:      org.ogre4j.Node
 * Method:     resetOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::resetOrientation
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1resetOrientation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setPosition()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setPosition_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pos
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setPosition()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setPosition
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setPosition_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setScale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setScale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong scale
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setScale
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setScale_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getScale()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getScale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setInheritOrientation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setInheritOrientation
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setInheritOrientation_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean inherit
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getInheritOrientation()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Node::getInheritOrientation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Node__1getInheritOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setInheritScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setInheritScale
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setInheritScale_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean inherit
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getInheritScale()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Node::getInheritScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Node__1getInheritScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     scale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::scale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1scale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong scale
);

/*
 * Class:      org.ogre4j.Node
 * Method:     scale()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::scale
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1scale_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z
);

/*
 * Class:      org.ogre4j.Node
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (Ogre_Vector3Ogre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1translate_1_1Vector3RTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (floatfloatfloatOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1translate_1_1RealvRealvRealvTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y, 
  jfloat z, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1translate_1_1Matrix3RVector3RTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axes, 
  jlong move, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     translate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::translate
 * Signature:  (Ogre_Matrix3floatfloatfloatOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1translate_1_1Matrix3RRealvRealvRealvTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axes, 
  jfloat x, 
  jfloat y, 
  jfloat z, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     roll()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::roll
 * Signature:  (Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1roll_1_1RadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     pitch()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::pitch
 * Signature:  (Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1pitch_1_1RadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     yaw()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::yaw
 * Signature:  (Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1yaw_1_1RadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     rotate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::rotate
 * Signature:  (Ogre_Vector3Ogre_RadianOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1rotate_1_1Vector3RRadianRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axis, 
  jlong angle, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     rotate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::rotate
 * Signature:  (Ogre_QuaternionOgre_Node_TransformSpace)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1rotate_1_1QuaternionRTransformSpacev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q, 
  jint relativeTo
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getLocalAxes()
 * Type:       virtual method
 * Definition: virtual Matrix3 Ogre::Node::getLocalAxes
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getLocalAxes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     createChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::createChild
 * Signature:  (Ogre_Vector3Ogre_Quaternion)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1createChild_1_1Vector3RQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong translate, 
  jlong rotate
);

/*
 * Class:      org.ogre4j.Node
 * Method:     createChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::createChild
 * Signature:  (std_stringOgre_Vector3Ogre_Quaternion)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1createChild_1_1StringRVector3RQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong translate, 
  jlong rotate
);

/*
 * Class:      org.ogre4j.Node
 * Method:     addChild()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::addChild
 * Signature:  (Ogre_Node)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1addChild_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child
);

/*
 * Class:      org.ogre4j.Node
 * Method:     numChildren()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Node::numChildren
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Node__1numChildren_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::getChild
 * Signature:  (S)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getChild_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::getChild
 * Signature:  (std_string)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getChild_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getChildIterator()
 * Type:       virtual method
 * Definition: virtual ChildNodeIterator Ogre::Node::getChildIterator
 * Signature:  ()Ogre_Node_ChildNodeIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getChildIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getChildIterator_const()
 * Type:       virtual method
 * Definition: virtual ConstChildNodeIterator Ogre::Node::getChildIterator
 * Signature:  ()Ogre_Node_ConstChildNodeIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getChildIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     removeChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::removeChild
 * Signature:  (S)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1removeChild_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Node
 * Method:     removeChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::removeChild
 * Signature:  (Ogre_Node)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1removeChild_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child
);

/*
 * Class:      org.ogre4j.Node
 * Method:     removeChild()
 * Type:       virtual method
 * Definition: virtual Node* Ogre::Node::removeChild
 * Signature:  (std_string)Ogre_Node
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1removeChild_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Node
 * Method:     removeAllChildren()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::removeAllChildren
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1removeAllChildren (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     _getDerivedOrientation()
 * Type:       virtual method
 * Definition: virtual const Quaternion& Ogre::Node::_getDerivedOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1_1getDerivedOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     _getDerivedPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::_getDerivedPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1_1getDerivedPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     _getDerivedScale()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::_getDerivedScale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1_1getDerivedScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     _getFullTransform()
 * Type:       virtual method
 * Definition: virtual const Matrix4& Ogre::Node::_getFullTransform
 * Signature:  ()Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1_1getFullTransform_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     _update()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::_update
 * Signature:  (ZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1_1update_1_1bvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean updateChildren, 
  jboolean parentHasChanged
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setListener
 * Signature:  (Ogre_Node_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getListener()
 * Type:       virtual method
 * Definition: virtual Listener* Ogre::Node::getListener
 * Signature:  ()Ogre_Node_Listener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getListener_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: const MaterialPtr& Ogre::Node::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: void Ogre::Node::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: void Ogre::Node::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setInitialState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::setInitialState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setInitialState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     resetToInitialState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::resetToInitialState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1resetToInitialState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getInitialPosition()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getInitialPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getInitialPosition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getInitialOrientation()
 * Type:       virtual method
 * Definition: virtual const Quaternion& Ogre::Node::getInitialOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getInitialOrientation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getInitialScale()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::Node::getInitialScale
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getInitialScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::Node::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Node__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.Node
 * Method:     needUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::needUpdate
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1needUpdate_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean forceParentUpdate
);

/*
 * Class:      org.ogre4j.Node
 * Method:     requestUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::requestUpdate
 * Signature:  (Ogre_NodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1requestUpdate_1_1Nodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child, 
  jboolean forceParentUpdate
);

/*
 * Class:      org.ogre4j.Node
 * Method:     cancelUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::Node::cancelUpdate
 * Signature:  (Ogre_Node)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1cancelUpdate_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong child
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::Node::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     queueNeedUpdate()
 * Type:       static method
 * Definition: static void Ogre::Node::queueNeedUpdate
 * Signature:  (Ogre_Node)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1queueNeedUpdate_1_1Nodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong n
);

/*
 * Class:      org.ogre4j.Node
 * Method:     processQueuedUpdates()
 * Type:       static method
 * Definition: static void Ogre::Node::processQueuedUpdates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1processQueuedUpdates (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: virtual Technique* Ogre::Renderable::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Node__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
);

/*
 * Class:      org.ogre4j.Node
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Node__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Node__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Node__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Node__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Node
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Node__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::Renderable::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Node__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Node
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
);

/*
 * Class:      org.ogre4j.Node
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Node::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Node__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Node__*/
