///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_InstancedGeometry__
#define __Included_org_ogre4j_InstancedGeometry__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     InstancedGeometry()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::InstancedGeometry
 * Signature:  (Ogre_SceneManagerstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1_1createInstancedGeometry_1_1SceneManagerpStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong owner, 
  jstring name
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::InstancedGeometry::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_InstancedGeometry__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     addEntity()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::addEntity
 * Signature:  (Ogre_EntityOgre_Vector3Ogre_QuaternionOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1addEntity_1_1EntitypVector3RQuaternionRVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ent, 
  jlong position, 
  jlong orientation, 
  jlong scale
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     addSceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::addSceneNode
 * Signature:  (Ogre_SceneNode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1addSceneNode_1_1SceneNodeP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong node
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     build()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::build
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1build (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     addBatchInstance()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::addBatchInstance
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1addBatchInstance (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     destroy()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::destroy
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1destroy (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     reset()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     setRenderingDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::setRenderingDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1setRenderingDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::InstancedGeometry::getRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry__1getRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getSquaredRenderingDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::InstancedGeometry::getSquaredRenderingDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_InstancedGeometry__1getSquaredRenderingDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     setVisible()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::setVisible
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1setVisible_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean visible
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     isVisible()
 * Type:       virtual method
 * Definition: virtual bool Ogre::InstancedGeometry::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     setCastShadows()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::setCastShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1setCastShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean castShadows
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getCastShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::InstancedGeometry::getCastShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_InstancedGeometry__1getCastShadows (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     setBatchInstanceDimensions()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::setBatchInstanceDimensions
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1setBatchInstanceDimensions_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong size
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getBatchInstanceDimensions()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::InstancedGeometry::getBatchInstanceDimensions
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getBatchInstanceDimensions_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     setOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::setOrigin
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1setOrigin_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong origin
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const Vector3& Ogre::InstancedGeometry::getOrigin
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     setRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::setRenderQueueGroup
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1setRenderQueueGroup_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort queueID
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getRenderQueueGroup()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::InstancedGeometry::getRenderQueueGroup
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_InstancedGeometry__1getRenderQueueGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getBatchInstanceIterator()
 * Type:       non-virtual method
 * Definition: BatchInstanceIterator Ogre::InstancedGeometry::getBatchInstanceIterator
 * Signature:  ()Ogre_InstancedGeometry_BatchInstanceIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getBatchInstanceIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getRenderOperationVector()
 * Type:       non-virtual method
 * Definition: RenderOperationVector& Ogre::InstancedGeometry::getRenderOperationVector
 * Signature:  ()Ogre_InstancedGeometry_RenderOperationVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getRenderOperationVector (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     visitRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     dump()
 * Type:       virtual method
 * Definition: virtual void Ogre::InstancedGeometry::dump
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1dump_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getBaseSkeletonInstance()
 * Type:       non-virtual method
 * Definition: SkeletonInstance* Ogre::InstancedGeometry::getBaseSkeletonInstance
 * Signature:  ()Ogre_SkeletonInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getBaseSkeletonInstance (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getBaseSkeleton()
 * Type:       non-virtual method
 * Definition: SkeletonPtr Ogre::InstancedGeometry::getBaseSkeleton
 * Signature:  ()Ogre_SkeletonPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getBaseSkeleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getBaseAnimationState()
 * Type:       non-virtual method
 * Definition: AnimationStateSet* Ogre::InstancedGeometry::getBaseAnimationState
 * Signature:  ()Ogre_AnimationStateSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getBaseAnimationState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     getObjectCount()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::InstancedGeometry::getObjectCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry__1getObjectCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::InstancedGeometry::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_InstancedGeometry__*/
