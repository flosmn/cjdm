///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_HardwareBufferManager__
#define __Included_org_ogre4j_HardwareBufferManager__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createVertexBuffer()
 * Type:       pure virtual method
 * Definition: virtual HardwareVertexBufferSharedPtr Ogre::HardwareBufferManager::createVertexBuffer
 * Signature:  (IIOgre_HardwareBuffer_UsageZ)Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createVertexBuffer_1_1ivivHardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertexSize, 
  jint numVerts, 
  jint usage, 
  jboolean useShadowBuffer
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createIndexBuffer()
 * Type:       pure virtual method
 * Definition: virtual HardwareIndexBufferSharedPtr Ogre::HardwareBufferManager::createIndexBuffer
 * Signature:  (Ogre_HardwareIndexBuffer_IndexTypeIOgre_HardwareBuffer_UsageZ)Ogre_HardwareIndexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createIndexBuffer_1_1HardwareIndexBuffer_1IndexTypevivHardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint itype, 
  jint numIndexes, 
  jint usage, 
  jboolean useShadowBuffer
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createRenderToVertexBuffer()
 * Type:       pure virtual method
 * Definition: virtual RenderToVertexBufferSharedPtr Ogre::HardwareBufferManager::createRenderToVertexBuffer
 * Signature:  ()Ogre_RenderToVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createRenderToVertexBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createVertexDeclaration()
 * Type:       virtual method
 * Definition: virtual VertexDeclaration* Ogre::HardwareBufferManager::createVertexDeclaration
 * Signature:  ()Ogre_VertexDeclaration
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createVertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     destroyVertexDeclaration()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::destroyVertexDeclaration
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1destroyVertexDeclaration_1_1VertexDeclarationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong decl
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     createVertexBufferBinding()
 * Type:       virtual method
 * Definition: virtual VertexBufferBinding* Ogre::HardwareBufferManager::createVertexBufferBinding
 * Signature:  ()Ogre_VertexBufferBinding
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1createVertexBufferBinding (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     destroyVertexBufferBinding()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::destroyVertexBufferBinding
 * Signature:  (Ogre_VertexBufferBinding)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1destroyVertexBufferBinding_1_1VertexBufferBindingp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong binding
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     registerVertexBufferSourceAndCopy()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::registerVertexBufferSourceAndCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrOgre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1registerVertexBufferSourceAndCopy_1_1HardwareVertexBufferSharedPtrRHardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer, 
  jlong copy
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     allocateVertexBufferCopy()
 * Type:       virtual method
 * Definition: virtual HardwareVertexBufferSharedPtr Ogre::HardwareBufferManager::allocateVertexBufferCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtrOgre_HardwareBufferManager_BufferLicenseTypeOgre_HardwareBufferLicenseeZ)Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1allocateVertexBufferCopy_1_1HardwareVertexBufferSharedPtrRBufferLicenseTypevHardwareBufferLicenseepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer, 
  jint licenseType, 
  jlong licensee, 
  jboolean copyData
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     releaseVertexBufferCopy()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::releaseVertexBufferCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1releaseVertexBufferCopy_1_1HardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bufferCopy
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     touchVertexBufferCopy()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::touchVertexBufferCopy
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1touchVertexBufferCopy_1_1HardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bufferCopy
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _freeUnusedBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_freeUnusedBufferCopies
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1freeUnusedBufferCopies (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _releaseBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_releaseBufferCopies
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1releaseBufferCopies_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean forceFreeUnused
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _forceReleaseBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_forceReleaseBufferCopies
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1forceReleaseBufferCopies_1_1HardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _forceReleaseBufferCopies()
 * Type:       virtual method
 * Definition: virtual void Ogre::HardwareBufferManager::_forceReleaseBufferCopies
 * Signature:  (Ogre_HardwareVertexBuffer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1forceReleaseBufferCopies_1_1HardwareVertexBufferp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sourceBuffer
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _notifyVertexBufferDestroyed()
 * Type:       non-virtual method
 * Definition: void Ogre::HardwareBufferManager::_notifyVertexBufferDestroyed
 * Signature:  (Ogre_HardwareVertexBuffer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1notifyVertexBufferDestroyed_1_1HardwareVertexBufferp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong buf
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     _notifyIndexBufferDestroyed()
 * Type:       non-virtual method
 * Definition: void Ogre::HardwareBufferManager::_notifyIndexBufferDestroyed
 * Signature:  (Ogre_HardwareIndexBuffer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1notifyIndexBufferDestroyed_1_1HardwareIndexBufferp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong buf
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static HardwareBufferManager& Ogre::HardwareBufferManager::getSingleton
 * Signature:  ()Ogre_HardwareBufferManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static HardwareBufferManager* Ogre::HardwareBufferManager::getSingletonPtr
 * Signature:  ()Ogre_HardwareBufferManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_HardwareBufferManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.HardwareBufferManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::HardwareBufferManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_HardwareBufferManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_HardwareBufferManager__*/
