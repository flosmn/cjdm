///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Technique__
#define __Included_org_ogre4j_Technique__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Technique
 * Method:     Technique()
 * Type:       constructor
 * Definition: Ogre::Technique::Technique
 * Signature:  (Ogre_Material)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1_1createTechnique_1_1Materialp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     Technique()
 * Type:       constructor
 * Definition: Ogre::Technique::Technique
 * Signature:  (Ogre_MaterialOgre_Technique)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1_1createTechnique_1_1MaterialpTechniqueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jlong oth
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     isSupported()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::isSupported
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1isSupported_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _compile()
 * Type:       non-virtual method
 * Definition: String Ogre::Technique::_compile
 * Signature:  (Z)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Technique__1_1compile_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoManageTextureUnits
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     checkGPURules()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::checkGPURules
 * Signature:  (std_ostringstream)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1checkGPURules_1_1StringUtil_1StrStreamTyper (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong errors
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     checkHardwareSupport()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::checkHardwareSupport
 * Signature:  (Zstd_ostringstream)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1checkHardwareSupport_1_1bvStringUtil_1StrStreamTyper (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoManageTextureUnits, 
  jlong compileErrors
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _compileIlluminationPasses()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::_compileIlluminationPasses
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1_1compileIlluminationPasses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     createPass()
 * Type:       non-virtual method
 * Definition: Pass* Ogre::Technique::createPass
 * Signature:  ()Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1createPass (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getPass()
 * Type:       non-virtual method
 * Definition: Pass* Ogre::Technique::getPass
 * Signature:  (S)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getPass_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getPass()
 * Type:       non-virtual method
 * Definition: Pass* Ogre::Technique::getPass
 * Signature:  (std_string)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getPass_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getNumPasses()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Technique::getNumPasses
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Technique__1getNumPasses_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     removePass()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::removePass
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1removePass_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     removeAllPasses()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::removeAllPasses
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1removeAllPasses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     movePass()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::movePass
 * Signature:  (SS)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1movePass_1_1HVHV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceIndex, 
  jint destinationIndex
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getPassIterator()
 * Type:       non-virtual method
 * Definition: const PassIterator Ogre::Technique::getPassIterator
 * Signature:  ()Ogre_Technique_PassIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getPassIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getIlluminationPassIterator()
 * Type:       non-virtual method
 * Definition: const IlluminationPassIterator Ogre::Technique::getIlluminationPassIterator
 * Signature:  ()Ogre_Technique_IlluminationPassIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getIlluminationPassIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: Material* Ogre::Technique::getParent
 * Signature:  ()Ogre_Material
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Technique& Ogre::Technique::operator=
 * Signature:  (Ogre_Technique)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1operatorAssignment_1_1TechniqueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getResourceGroup()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Technique::getResourceGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Technique__1getResourceGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     isTransparent()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::isTransparent
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1isTransparent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     isTransparentSortingEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::isTransparentSortingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1isTransparentSortingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _prepare()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::_prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1_1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _unprepare()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::_unprepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1_1unprepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _load()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::_load
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1_1load (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _unload()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::_unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1_1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     isLoaded()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _notifyNeedsRecompile()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::_notifyNeedsRecompile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1_1notifyNeedsRecompile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getShadowCasterMaterial()
 * Type:       non-virtual method
 * Definition: Ogre::MaterialPtr Ogre::Technique::getShadowCasterMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getShadowCasterMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setShadowCasterMaterial()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setShadowCasterMaterial
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setShadowCasterMaterial_1_1Ogre_1MaterialPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setShadowCasterMaterial()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setShadowCasterMaterial
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setShadowCasterMaterial_1_1Ogre_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getShadowReceiverMaterial()
 * Type:       non-virtual method
 * Definition: Ogre::MaterialPtr Ogre::Technique::getShadowReceiverMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getShadowReceiverMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setShadowReceiverMaterial()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setShadowReceiverMaterial
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setShadowReceiverMaterial_1_1Ogre_1MaterialPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setShadowReceiverMaterial()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setShadowReceiverMaterial
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setShadowReceiverMaterial_1_1Ogre_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setPointSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setPointSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setPointSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat ps
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setAmbient
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setAmbient_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setAmbient
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setAmbient_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setDiffuse
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setDiffuse_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setDiffuse
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setDiffuse_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong diffuse
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSpecular
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSpecular_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSpecular
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSpecular_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong specular
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setShininess()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setShininess
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setShininess_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat val
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSelfIllumination
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSelfIllumination_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSelfIllumination
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSelfIllumination_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong selfIllum
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setDepthCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setDepthCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setDepthWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setDepthWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setDepthFunction()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setDepthFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setDepthFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setColourWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setColourWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setColourWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setCullingMode
 * Signature:  (Ogre_CullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setCullingMode_1_1CullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setManualCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setManualCullingMode
 * Signature:  (Ogre_ManualCullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setManualCullingMode_1_1ManualCullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setLightingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setLightingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setLightingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setShadingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setShadingMode
 * Signature:  (Ogre_ShadeOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setShadingMode_1_1ShadeOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setFog()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setFog
 * Signature:  (ZOgre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setFog_1_1bvFogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean overrideScene, 
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setDepthBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setDepthBias
 * Signature:  (FF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setDepthBias_1_1FvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat constantBias, 
  jfloat slopeScaleBias
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setTextureFiltering
 * Signature:  (Ogre_TextureFilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setTextureFiltering_1_1TextureFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint filterType
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setTextureAnisotropy()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setTextureAnisotropy
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setTextureAnisotropy_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong maxAniso
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSceneBlending
 * Signature:  (Ogre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSceneBlending_1_1SceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendTypeOgre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSeparateSceneBlending_1_1SceneBlendTypeVSceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt, 
  jint sbta
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSceneBlending_1_1SceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSeparateSceneBlending_1_1SceneBlendFactorVSceneBlendFactorVSceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor, 
  jint sourceFactorAlpha, 
  jint destFactorAlpha
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setLodIndex()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setLodIndex
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setLodIndex_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getLodIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Technique::getLodIndex
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Technique__1getLodIndex_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setSchemeName()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setSchemeName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setSchemeName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring schemeName
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getSchemeName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Technique::getSchemeName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Technique__1getSchemeName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     _getSchemeIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Technique::_getSchemeIndex
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Technique__1_1getSchemeIndex_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     isDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::isDepthWriteEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1isDepthWriteEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     isDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::isDepthCheckEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1isDepthCheckEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     hasColourWriteDisabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::hasColourWriteDisabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1hasColourWriteDisabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     setName()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::setName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1setName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Technique::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Technique__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     applyTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::Technique::applyTextureAliases
 * Signature:  (Ogre_AliasTextureNamePairListZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Technique__1applyTextureAliases_1_1AliasTextureNamePairListRbV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aliasList, 
  jboolean apply
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     addGPUVendorRule()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::addGPUVendorRule
 * Signature:  (Ogre_GPUVendorOgre_Technique_IncludeOrExclude)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1addGPUVendorRule_1_1GPUVendorvIncludeOrExcludev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vendor, 
  jint includeOrExclude
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     addGPUVendorRule()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::addGPUVendorRule
 * Signature:  (Ogre_Technique_GPUVendorRule)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1addGPUVendorRule_1_1GPUVendorRuleR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rule
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     removeGPUVendorRule()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::removeGPUVendorRule
 * Signature:  (Ogre_GPUVendor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1removeGPUVendorRule_1_1GPUVendorv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vendor
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getGPUVendorRuleIterator()
 * Type:       non-virtual method
 * Definition: GPUVendorRuleIterator Ogre::Technique::getGPUVendorRuleIterator
 * Signature:  ()Ogre_Technique_GPUVendorRuleIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getGPUVendorRuleIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     addGPUDeviceNameRule()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::addGPUDeviceNameRule
 * Signature:  (std_stringOgre_Technique_IncludeOrExcludeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1addGPUDeviceNameRule_1_1StringRIncludeOrExcludevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring devicePattern, 
  jint includeOrExclude, 
  jboolean caseSensitive
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     addGPUDeviceNameRule()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::addGPUDeviceNameRule
 * Signature:  (Ogre_Technique_GPUDeviceNameRule)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1addGPUDeviceNameRule_1_1GPUDeviceNameRuleR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rule
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     removeGPUDeviceNameRule()
 * Type:       non-virtual method
 * Definition: void Ogre::Technique::removeGPUDeviceNameRule
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1removeGPUDeviceNameRule_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring devicePattern
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     getGPUDeviceNameRuleIterator()
 * Type:       non-virtual method
 * Definition: GPUDeviceNameRuleIterator Ogre::Technique::getGPUDeviceNameRuleIterator
 * Signature:  ()Ogre_Technique_GPUDeviceNameRuleIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Technique__1getGPUDeviceNameRuleIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Technique
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Technique::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Technique__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Technique__*/
