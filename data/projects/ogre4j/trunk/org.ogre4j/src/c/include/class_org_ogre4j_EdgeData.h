///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_EdgeData__
#define __Included_org_ogre4j_EdgeData__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     updateTriangleLightFacing()
 * Type:       non-virtual method
 * Definition: void Ogre::EdgeData::updateTriangleLightFacing
 * Signature:  (Ogre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1updateTriangleLightFacing_1_1Vector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lightPos
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     updateFaceNormals()
 * Type:       non-virtual method
 * Definition: void Ogre::EdgeData::updateFaceNormals
 * Signature:  (IOgre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1updateFaceNormals_1_1ivHardwareVertexBufferSharedPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertexSet, 
  jlong positionBuffer
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     log()
 * Type:       non-virtual method
 * Definition: void Ogre::EdgeData::log
 * Signature:  (Ogre_Log)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1log_1_1Logp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong log
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     EdgeData()
 * Type:       constructor
 * Definition: Ogre::EdgeData::EdgeData
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1_1createEdgeData (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::EdgeData::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     gettriangles()
 * Type:       getter for public attribute
 * Definition: TriangleList Ogre::EdgeData::triangles
 * Signature:  ()Ogre_EdgeData_TriangleList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1gettriangles (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     settriangles()
 * Type:       setter for public attribute
 * Definition: TriangleList Ogre::EdgeData::triangles
 * Signature:  (Ogre_EdgeData_TriangleList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1settriangles (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     gettriangleFaceNormals()
 * Type:       getter for public attribute
 * Definition: TriangleFaceNormalList Ogre::EdgeData::triangleFaceNormals
 * Signature:  ()Ogre_EdgeData_TriangleFaceNormalList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1gettriangleFaceNormals (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     settriangleFaceNormals()
 * Type:       setter for public attribute
 * Definition: TriangleFaceNormalList Ogre::EdgeData::triangleFaceNormals
 * Signature:  (Ogre_EdgeData_TriangleFaceNormalList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1settriangleFaceNormals (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     gettriangleLightFacings()
 * Type:       getter for public attribute
 * Definition: TriangleLightFacingList Ogre::EdgeData::triangleLightFacings
 * Signature:  ()Ogre_EdgeData_TriangleLightFacingList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1gettriangleLightFacings (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     settriangleLightFacings()
 * Type:       setter for public attribute
 * Definition: TriangleLightFacingList Ogre::EdgeData::triangleLightFacings
 * Signature:  (Ogre_EdgeData_TriangleLightFacingList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1settriangleLightFacings (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     getedgeGroups()
 * Type:       getter for public attribute
 * Definition: EdgeGroupList Ogre::EdgeData::edgeGroups
 * Signature:  ()Ogre_EdgeData_EdgeGroupList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_EdgeData__1getedgeGroups (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     setedgeGroups()
 * Type:       setter for public attribute
 * Definition: EdgeGroupList Ogre::EdgeData::edgeGroups
 * Signature:  (Ogre_EdgeData_EdgeGroupList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1setedgeGroups (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     getisClosed()
 * Type:       getter for public attribute
 * Definition: bool Ogre::EdgeData::isClosed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_EdgeData__1getisClosed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.EdgeData
 * Method:     setisClosed()
 * Type:       setter for public attribute
 * Definition: bool Ogre::EdgeData::isClosed
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_EdgeData__1setisClosed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean _jni_value_
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_EdgeData__*/
