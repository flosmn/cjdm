///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_VertexData__
#define __Included_org_ogre4j_VertexData__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.VertexData
 * Method:     VertexData()
 * Type:       constructor
 * Definition: Ogre::VertexData::VertexData
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1_1createVertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::VertexData::clone
 * Signature:  (Z)Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1clone_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean copyData
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     prepareForShadowVolume()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::prepareForShadowVolume
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1prepareForShadowVolume (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     reorganiseBuffers()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::reorganiseBuffers
 * Signature:  (Ogre_VertexDeclarationOgre_BufferUsageList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1reorganiseBuffers_1_1VertexDeclarationpBufferUsageListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newDeclaration, 
  jlong bufferUsage
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     reorganiseBuffers()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::reorganiseBuffers
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1reorganiseBuffers_1_1VertexDeclarationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newDeclaration
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     closeGapsInBindings()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::closeGapsInBindings
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1closeGapsInBindings (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     removeUnusedBuffers()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::removeUnusedBuffers
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1removeUnusedBuffers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     convertPackedColour()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::convertPackedColour
 * Signature:  (Ogre_VertexElementTypeOgre_VertexElementType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1convertPackedColour_1_1VertexElementTypevVertexElementTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint srcType, 
  jint destType
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     allocateHardwareAnimationElements()
 * Type:       non-virtual method
 * Definition: void Ogre::VertexData::allocateHardwareAnimationElements
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1allocateHardwareAnimationElements_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::VertexData::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexDeclaration()
 * Type:       getter for public attribute
 * Definition: VertexDeclaration* Ogre::VertexData::vertexDeclaration
 * Signature:  ()Ogre_VertexDeclaration
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1getvertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexDeclaration()
 * Type:       setter for public attribute
 * Definition: VertexDeclaration* Ogre::VertexData::vertexDeclaration
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexBufferBinding()
 * Type:       getter for public attribute
 * Definition: VertexBufferBinding* Ogre::VertexData::vertexBufferBinding
 * Signature:  ()Ogre_VertexBufferBinding
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1getvertexBufferBinding (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexBufferBinding()
 * Type:       setter for public attribute
 * Definition: VertexBufferBinding* Ogre::VertexData::vertexBufferBinding
 * Signature:  (Ogre_VertexBufferBinding)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexBufferBinding (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexStart()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::VertexData::vertexStart
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexData__1getvertexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexStart()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::VertexData::vertexStart
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexStart (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     getvertexCount()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::VertexData::vertexCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexData__1getvertexCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     setvertexCount()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::VertexData::vertexCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1setvertexCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     gethwAnimationDataList()
 * Type:       getter for public attribute
 * Definition: HardwareAnimationDataList Ogre::VertexData::hwAnimationDataList
 * Signature:  ()Ogre_VertexData_HardwareAnimationDataList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1gethwAnimationDataList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     sethwAnimationDataList()
 * Type:       setter for public attribute
 * Definition: HardwareAnimationDataList Ogre::VertexData::hwAnimationDataList
 * Signature:  (Ogre_VertexData_HardwareAnimationDataList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1sethwAnimationDataList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     gethwAnimDataItemsUsed()
 * Type:       getter for public attribute
 * Definition: size_t Ogre::VertexData::hwAnimDataItemsUsed
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_VertexData__1gethwAnimDataItemsUsed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     sethwAnimDataItemsUsed()
 * Type:       setter for public attribute
 * Definition: size_t Ogre::VertexData::hwAnimDataItemsUsed
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1sethwAnimDataItemsUsed (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     gethardwareShadowVolWBuffer()
 * Type:       getter for public attribute
 * Definition: HardwareVertexBufferSharedPtr Ogre::VertexData::hardwareShadowVolWBuffer
 * Signature:  ()Ogre_HardwareVertexBufferSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_VertexData__1gethardwareShadowVolWBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.VertexData
 * Method:     sethardwareShadowVolWBuffer()
 * Type:       setter for public attribute
 * Definition: HardwareVertexBufferSharedPtr Ogre::VertexData::hardwareShadowVolWBuffer
 * Signature:  (Ogre_HardwareVertexBufferSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_VertexData__1sethardwareShadowVolWBuffer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_VertexData__*/
