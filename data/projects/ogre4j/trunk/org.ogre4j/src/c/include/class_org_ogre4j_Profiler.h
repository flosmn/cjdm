///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Profiler__
#define __Included_org_ogre4j_Profiler__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Profiler
 * Method:     Profiler()
 * Type:       constructor
 * Definition: Ogre::Profiler::Profiler
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1_1createProfiler (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     setTimer()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::setTimer
 * Signature:  (Ogre_Timer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1setTimer_1_1Timerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong t
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     getTimer()
 * Type:       non-virtual method
 * Definition: Timer* Ogre::Profiler::getTimer
 * Signature:  ()Ogre_Timer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getTimer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     beginProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::beginProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1beginProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     endProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::endProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1endProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     setEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     getEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::getEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1getEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     enableProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::enableProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1enableProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     disableProfile()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::disableProfile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1disableProfile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     watchForMax()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::watchForMax
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1watchForMax_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     watchForMin()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::watchForMin
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1watchForMin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     watchForLimit()
 * Type:       non-virtual method
 * Definition: bool Ogre::Profiler::watchForLimit
 * Signature:  (std_stringfloatZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Profiler__1watchForLimit_1_1StringRRealvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring profileName, 
  jfloat limit, 
  jboolean greaterThan
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     logResults()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::logResults
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1logResults (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     reset()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     setUpdateDisplayFrequency()
 * Type:       non-virtual method
 * Definition: void Ogre::Profiler::setUpdateDisplayFrequency
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1setUpdateDisplayFrequency_1_1uintv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong freq
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     getUpdateDisplayFrequency()
 * Type:       non-virtual method
 * Definition: uint Ogre::Profiler::getUpdateDisplayFrequency
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getUpdateDisplayFrequency_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static Profiler& Ogre::Profiler::getSingleton
 * Signature:  ()Ogre_Profiler
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static Profiler* Ogre::Profiler::getSingletonPtr
 * Signature:  ()Ogre_Profiler
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Profiler__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Profiler
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Profiler::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Profiler__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Profiler__*/
