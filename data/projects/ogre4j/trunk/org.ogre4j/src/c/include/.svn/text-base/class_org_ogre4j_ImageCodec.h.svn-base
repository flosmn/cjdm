///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_ImageCodec__
#define __Included_org_ogre4j_ImageCodec__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     getDataType()
 * Type:       virtual method
 * Definition: String Ogre::ImageCodec::getDataType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ImageCodec__1getDataType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     code()
 * Type:       pure virtual method
 * Definition: virtual DataStreamPtr Ogre::Codec::code
 * Signature:  (Ogre_MemoryDataStreamPtrOgre_Codec_CodecDataPtr)Ogre_DataStreamPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec__1code_1_1MemoryDataStreamPtrrCodecDataPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong input, 
  jlong pData
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     codeToFile()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::Codec::codeToFile
 * Signature:  (Ogre_MemoryDataStreamPtrstd_stringOgre_Codec_CodecDataPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec__1codeToFile_1_1MemoryDataStreamPtrrStringRCodecDataPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong input, 
  jstring outFileName, 
  jlong pData
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     decode()
 * Type:       pure virtual method
 * Definition: virtual DecodeResult Ogre::Codec::decode
 * Signature:  (Ogre_DataStreamPtr)Ogre_Codec_DecodeResult
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec__1decode_1_1DataStreamPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong input
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     getType()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::Codec::getType
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ImageCodec__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     magicNumberMatch()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Codec::magicNumberMatch
 * Signature:  (CI)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ImageCodec__1magicNumberMatch_1_1cPiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring magicNumberPtr, 
  jint maxbytes
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     magicNumberToFileExt()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::Codec::magicNumberToFileExt
 * Signature:  (CI)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ImageCodec__1magicNumberToFileExt_1_1cPiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring magicNumberPtr, 
  jint maxbytes
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     registerCodec()
 * Type:       static method
 * Definition: static void Ogre::Codec::registerCodec
 * Signature:  (Ogre_Codec)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec__1registerCodec_1_1Codecp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong pCodec
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     unRegisterCodec()
 * Type:       static method
 * Definition: static void Ogre::Codec::unRegisterCodec
 * Signature:  (Ogre_Codec)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec__1unRegisterCodec_1_1Codecp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong pCodec
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     getCodecIterator()
 * Type:       static method
 * Definition: static CodecIterator Ogre::Codec::getCodecIterator
 * Signature:  ()Ogre_Codec_CodecIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec__1getCodecIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     getExtensions()
 * Type:       static method
 * Definition: static StringVector Ogre::Codec::getExtensions
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec__1getExtensions (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     getCodec()
 * Type:       static method
 * Definition: static Codec* Ogre::Codec::getCodec
 * Signature:  (std_string)Ogre_Codec
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec__1getCodec_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring extension
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     getCodec()
 * Type:       static method
 * Definition: static Codec* Ogre::Codec::getCodec
 * Signature:  (CI)Ogre_Codec
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ImageCodec__1getCodec_1_1cpiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong magicNumberPtr, 
  jint maxbytes
);

/*
 * Class:      org.ogre4j.ImageCodec
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ImageCodec::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ImageCodec__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_ImageCodec__*/
