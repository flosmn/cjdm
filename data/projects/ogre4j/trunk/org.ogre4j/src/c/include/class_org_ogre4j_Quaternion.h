///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Quaternion__
#define __Included_org_ogre4j_Quaternion__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fW, 
  jfloat fX, 
  jfloat fY, 
  jfloat fZ
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rot
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_RadianOgre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1RadianRVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rfAngle, 
  jlong rkAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong xaxis, 
  jlong yaxis, 
  jlong zaxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Vector3P (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong akAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Quaternion()
 * Type:       constructor
 * Definition: Ogre::Quaternion::Quaternion
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1_1createQuaternion_1_1Realp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong valptr
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator[]_const()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1operatorIndex_1const_1_1iV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real& Ogre::Quaternion::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorIndex_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ptr()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Quaternion::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1ptr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ptr_const()
 * Type:       non-virtual method
 * Definition: const Real* Ogre::Quaternion::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1ptr_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromRotationMatrix()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromRotationMatrix
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromRotationMatrix_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong kRot
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToRotationMatrix()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToRotationMatrix
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToRotationMatrix_1_1Matrix3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong kRot
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromAngleAxis()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromAngleAxis
 * Signature:  (Ogre_RadianOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromAngleAxis_1_1RadianRVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfAngle, 
  jlong rkAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAngleAxis()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAngleAxis
 * Signature:  (Ogre_RadianOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAngleAxis_1_1RadianrVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfAngle, 
  jlong rkAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAngleAxis()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAngleAxis
 * Signature:  (Ogre_DegreeOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAngleAxis_1_1DegreerVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dAngle, 
  jlong rkAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromAxes
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromAxes_1_1Vector3P (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong akAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     FromAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::FromAxes
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1FromAxes_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xAxis, 
  jlong yAxis, 
  jlong zAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAxes
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAxes_1_1Vector3p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong akAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     ToAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Quaternion::ToAxes
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1ToAxes_1_1Vector3rVector3rVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xAxis, 
  jlong yAxis, 
  jlong zAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     xAxis()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::xAxis
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1xAxis_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     yAxis()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::yAxis
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1yAxis_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     zAxis()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::zAxis
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1zAxis_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Quaternion& Ogre::Quaternion::operator=
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorAssignment_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator+
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorAddition_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator-
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorSubtraction_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator *
 * Signature:  (Ogre_Quaternion)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorMultiplication_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator *
 * Signature:  (float)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::operator-
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Quaternion::operator==
 * Signature:  (Ogre_Quaternion)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Quaternion__1operatorEqual_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Quaternion::operator!=
 * Signature:  (Ogre_Quaternion)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Quaternion__1operatorNotEqual_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Dot()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::Dot
 * Signature:  (Ogre_Quaternion)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1Dot_1_1QuaternionR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Norm()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::Norm
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1Norm_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     normalise()
 * Type:       non-virtual method
 * Definition: Real Ogre::Quaternion::normalise
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1normalise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Inverse()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::Inverse
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Inverse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     UnitInverse()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::UnitInverse
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1UnitInverse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Exp()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::Exp
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Exp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Log()
 * Type:       non-virtual method
 * Definition: Quaternion Ogre::Quaternion::Log
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Log_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Quaternion::operator *
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1operatorMultiplication_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getRoll()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Quaternion::getRoll
 * Signature:  (Z)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getRoll_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reprojectAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getPitch()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Quaternion::getPitch
 * Signature:  (Z)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getPitch_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reprojectAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getYaw()
 * Type:       non-virtual method
 * Definition: Radian Ogre::Quaternion::getYaw
 * Signature:  (Z)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getYaw_1_1bv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean reprojectAxis
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     equals()
 * Type:       non-virtual method
 * Definition: bool Ogre::Quaternion::equals
 * Signature:  (Ogre_QuaternionOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Quaternion__1equals_1_1QuaternionRRadianR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs, 
  jlong tolerance
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Slerp()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::Slerp
 * Signature:  (floatOgre_QuaternionOgre_QuaternionZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Slerp_1_1RealvQuaternionRQuaternionRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkQ, 
  jboolean shortestPath
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     SlerpExtraSpins()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::SlerpExtraSpins
 * Signature:  (floatOgre_QuaternionOgre_QuaternionI)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1SlerpExtraSpins_1_1RealvQuaternionRQuaternionRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkQ, 
  jint iExtraSpins
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Intermediate()
 * Type:       static method
 * Definition: static void Ogre::Quaternion::Intermediate
 * Signature:  (Ogre_QuaternionOgre_QuaternionOgre_QuaternionOgre_QuaternionOgre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1Intermediate_1_1QuaternionRQuaternionRQuaternionRQuaternionrQuaternionr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkQ0, 
  jlong rkQ1, 
  jlong rkQ2, 
  jlong rka, 
  jlong rkB
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     Squad()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::Squad
 * Signature:  (floatOgre_QuaternionOgre_QuaternionOgre_QuaternionOgre_QuaternionZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1Squad_1_1RealvQuaternionRQuaternionRQuaternionRQuaternionRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkA, 
  jlong rkB, 
  jlong rkQ, 
  jboolean shortestPath
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     nlerp()
 * Type:       static method
 * Definition: static Quaternion Ogre::Quaternion::nlerp
 * Signature:  (floatOgre_QuaternionOgre_QuaternionZ)Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1nlerp_1_1RealvQuaternionRQuaternionRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fT, 
  jlong rkP, 
  jlong rkQ, 
  jboolean shortestPath
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Quaternion::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getms_fEpsilon()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Quaternion::ms_fEpsilon
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getms_1fEpsilon (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Quaternion Ogre::Quaternion::ZERO
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getIDENTITY()
 * Type:       getter for public attribute
 * Definition: const Quaternion Ogre::Quaternion::IDENTITY
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Quaternion__1getIDENTITY (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getw()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::w
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getw (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     setw()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::w
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1setw (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getx()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::x
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     setx()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::x
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1setx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     gety()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::y
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1gety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     sety()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::y
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1sety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     getz()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Quaternion::z
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Quaternion__1getz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Quaternion
 * Method:     setz()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Quaternion::z
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Quaternion__1setz (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Quaternion__*/
