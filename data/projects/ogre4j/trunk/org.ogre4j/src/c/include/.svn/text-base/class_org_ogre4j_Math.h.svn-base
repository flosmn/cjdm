///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Math__
#define __Included_org_ogre4j_Math__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Math
 * Method:     Math()
 * Type:       constructor
 * Definition: Ogre::Math::Math
 * Signature:  (I)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1_1createMath_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong trigTableSize
);

/*
 * Class:      org.ogre4j.Math
 * Method:     IAbs()
 * Type:       static method
 * Definition: static int Ogre::Math::IAbs
 * Signature:  (I)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Math__1IAbs_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint iValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     ICeil()
 * Type:       static method
 * Definition: static int Ogre::Math::ICeil
 * Signature:  (F)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Math__1ICeil_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     IFloor()
 * Type:       static method
 * Definition: static int Ogre::Math::IFloor
 * Signature:  (F)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Math__1IFloor_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     ISign()
 * Type:       static method
 * Definition: static int Ogre::Math::ISign
 * Signature:  (I)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Math__1ISign_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint iValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Abs()
 * Type:       static method
 * Definition: static Real Ogre::Math::Abs
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Abs_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Abs()
 * Type:       static method
 * Definition: static Degree Ogre::Math::Abs
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1Abs_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong dValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Abs()
 * Type:       static method
 * Definition: static Radian Ogre::Math::Abs
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1Abs_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     ACos()
 * Type:       static method
 * Definition: static Radian Ogre::Math::ACos
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1ACos_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     ASin()
 * Type:       static method
 * Definition: static Radian Ogre::Math::ASin
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1ASin_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     ATan()
 * Type:       static method
 * Definition: static Radian Ogre::Math::ATan
 * Signature:  (float)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1ATan_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     ATan2()
 * Type:       static method
 * Definition: static Radian Ogre::Math::ATan2
 * Signature:  (floatfloat)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1ATan2_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fY, 
  jfloat fX
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Ceil()
 * Type:       static method
 * Definition: static Real Ogre::Math::Ceil
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Ceil_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Cos()
 * Type:       static method
 * Definition: static Real Ogre::Math::Cos
 * Signature:  (Ogre_RadianZ)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Cos_1_1RadianRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong fValue, 
  jboolean useTables
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Cos()
 * Type:       static method
 * Definition: static Real Ogre::Math::Cos
 * Signature:  (floatZ)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Cos_1_1Realvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue, 
  jboolean useTables
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Exp()
 * Type:       static method
 * Definition: static Real Ogre::Math::Exp
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Exp_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Floor()
 * Type:       static method
 * Definition: static Real Ogre::Math::Floor
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Floor_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Log()
 * Type:       static method
 * Definition: static Real Ogre::Math::Log
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Log_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Pow()
 * Type:       static method
 * Definition: static Real Ogre::Math::Pow
 * Signature:  (floatfloat)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Pow_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fBase, 
  jfloat fExponent
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sign()
 * Type:       static method
 * Definition: static Real Ogre::Math::Sign
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Sign_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sign()
 * Type:       static method
 * Definition: static Radian Ogre::Math::Sign
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1Sign_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sign()
 * Type:       static method
 * Definition: static Degree Ogre::Math::Sign
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1Sign_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong dValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sin()
 * Type:       static method
 * Definition: static Real Ogre::Math::Sin
 * Signature:  (Ogre_RadianZ)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Sin_1_1RadianRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong fValue, 
  jboolean useTables
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sin()
 * Type:       static method
 * Definition: static Real Ogre::Math::Sin
 * Signature:  (floatZ)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Sin_1_1Realvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue, 
  jboolean useTables
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sqr()
 * Type:       static method
 * Definition: static Real Ogre::Math::Sqr
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Sqr_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sqrt()
 * Type:       static method
 * Definition: static Real Ogre::Math::Sqrt
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Sqrt_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sqrt()
 * Type:       static method
 * Definition: static Radian Ogre::Math::Sqrt
 * Signature:  (Ogre_Radian)Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1Sqrt_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Sqrt()
 * Type:       static method
 * Definition: static Degree Ogre::Math::Sqrt
 * Signature:  (Ogre_Degree)Ogre_Degree
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1Sqrt_1_1DegreeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     InvSqrt()
 * Type:       static method
 * Definition: static Real Ogre::Math::InvSqrt
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1InvSqrt_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue
);

/*
 * Class:      org.ogre4j.Math
 * Method:     UnitRandom()
 * Type:       static method
 * Definition: static Real Ogre::Math::UnitRandom
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1UnitRandom (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     RangeRandom()
 * Type:       static method
 * Definition: static Real Ogre::Math::RangeRandom
 * Signature:  (floatfloat)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1RangeRandom_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fLow, 
  jfloat fHigh
);

/*
 * Class:      org.ogre4j.Math
 * Method:     SymmetricRandom()
 * Type:       static method
 * Definition: static Real Ogre::Math::SymmetricRandom
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1SymmetricRandom (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Tan()
 * Type:       static method
 * Definition: static Real Ogre::Math::Tan
 * Signature:  (Ogre_RadianZ)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Tan_1_1RadianRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong fValue, 
  jboolean useTables
);

/*
 * Class:      org.ogre4j.Math
 * Method:     Tan()
 * Type:       static method
 * Definition: static Real Ogre::Math::Tan
 * Signature:  (floatZ)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1Tan_1_1Realvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fValue, 
  jboolean useTables
);

/*
 * Class:      org.ogre4j.Math
 * Method:     DegreesToRadians()
 * Type:       static method
 * Definition: static Real Ogre::Math::DegreesToRadians
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1DegreesToRadians_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat degrees
);

/*
 * Class:      org.ogre4j.Math
 * Method:     RadiansToDegrees()
 * Type:       static method
 * Definition: static Real Ogre::Math::RadiansToDegrees
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1RadiansToDegrees_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat radians
);

/*
 * Class:      org.ogre4j.Math
 * Method:     setAngleUnit()
 * Type:       static method
 * Definition: static void Ogre::Math::setAngleUnit
 * Signature:  (Ogre_Math_AngleUnit)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Math__1setAngleUnit_1_1AngleUnitv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint unit
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getAngleUnit()
 * Type:       static method
 * Definition: static AngleUnit Ogre::Math::getAngleUnit
 * Signature:  ()Ogre_Math_AngleUnit
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Math__1getAngleUnit (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     AngleUnitsToRadians()
 * Type:       static method
 * Definition: static Real Ogre::Math::AngleUnitsToRadians
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1AngleUnitsToRadians_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat units
);

/*
 * Class:      org.ogre4j.Math
 * Method:     RadiansToAngleUnits()
 * Type:       static method
 * Definition: static Real Ogre::Math::RadiansToAngleUnits
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1RadiansToAngleUnits_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat radians
);

/*
 * Class:      org.ogre4j.Math
 * Method:     AngleUnitsToDegrees()
 * Type:       static method
 * Definition: static Real Ogre::Math::AngleUnitsToDegrees
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1AngleUnitsToDegrees_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat units
);

/*
 * Class:      org.ogre4j.Math
 * Method:     DegreesToAngleUnits()
 * Type:       static method
 * Definition: static Real Ogre::Math::DegreesToAngleUnits
 * Signature:  (float)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1DegreesToAngleUnits_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat degrees
);

/*
 * Class:      org.ogre4j.Math
 * Method:     pointInTri2D()
 * Type:       static method
 * Definition: static bool Ogre::Math::pointInTri2D
 * Signature:  (Ogre_Vector2Ogre_Vector2Ogre_Vector2Ogre_Vector2)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Math__1pointInTri2D_1_1Vector2RVector2RVector2RVector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong p, 
  jlong a, 
  jlong b, 
  jlong c
);

/*
 * Class:      org.ogre4j.Math
 * Method:     pointInTri3D()
 * Type:       static method
 * Definition: static bool Ogre::Math::pointInTri3D
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3Ogre_Vector3Ogre_Vector3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Math__1pointInTri3D_1_1Vector3RVector3RVector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong p, 
  jlong a, 
  jlong b, 
  jlong c, 
  jlong normal
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static std::pair<bool, Real> Ogre::Math::intersects
 * Signature:  (Ogre_RayOgre_Plane)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRPlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong plane
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static std::pair<bool, Real> Ogre::Math::intersects
 * Signature:  (Ogre_RayOgre_SphereZ)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRSphereRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong sphere, 
  jboolean discardInside
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static std::pair<bool, Real> Ogre::Math::intersects
 * Signature:  (Ogre_RayOgre_AxisAlignedBox)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRAxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong box
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static bool Ogre::Math::intersects
 * Signature:  (Ogre_RayOgre_AxisAlignedBoxfloatfloat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRAxisAlignedBoxRRealpRealp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong box, 
  jlong d1, 
  jlong d2
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static std::pair<bool, Real> Ogre::Math::intersects
 * Signature:  (Ogre_RayOgre_Vector3Ogre_Vector3Ogre_Vector3Ogre_Vector3ZZ)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRVector3RVector3RVector3RVector3Rbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong a, 
  jlong b, 
  jlong c, 
  jlong normal, 
  jboolean positiveSide, 
  jboolean negativeSide
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static std::pair<bool, Real> Ogre::Math::intersects
 * Signature:  (Ogre_RayOgre_Vector3Ogre_Vector3Ogre_Vector3ZZ)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRVector3RVector3RVector3Rbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong a, 
  jlong b, 
  jlong c, 
  jboolean positiveSide, 
  jboolean negativeSide
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static bool Ogre::Math::intersects
 * Signature:  (Ogre_SphereOgre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Math__1intersects_1_1SphereRAxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong sphere, 
  jlong box
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static bool Ogre::Math::intersects
 * Signature:  (Ogre_PlaneOgre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Math__1intersects_1_1PlaneRAxisAlignedBoxR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong plane, 
  jlong box
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static std::pair<bool, Real> Ogre::Math::intersects
 * Signature:  (Ogre_Raystd_vector__Plane__Z)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRstd_1vector_1_1Plane_1_1rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong planeList, 
  jboolean normalIsOutside
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static std::pair<bool, Real> Ogre::Math::intersects
 * Signature:  (Ogre_Raystd_list__Plane__Z)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1intersects_1_1RayRstd_1list_1_1Plane_1_1rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong ray, 
  jlong planeList, 
  jboolean normalIsOutside
);

/*
 * Class:      org.ogre4j.Math
 * Method:     intersects()
 * Type:       static method
 * Definition: static bool Ogre::Math::intersects
 * Signature:  (Ogre_SphereOgre_Plane)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Math__1intersects_1_1SphereRPlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong sphere, 
  jlong plane
);

/*
 * Class:      org.ogre4j.Math
 * Method:     RealEqual()
 * Type:       static method
 * Definition: static bool Ogre::Math::RealEqual
 * Signature:  (floatfloatfloat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Math__1RealEqual_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat a, 
  jfloat b, 
  jfloat tolerance
);

/*
 * Class:      org.ogre4j.Math
 * Method:     calculateTangentSpaceVector()
 * Type:       static method
 * Definition: static Vector3 Ogre::Math::calculateTangentSpaceVector
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3floatfloatfloatfloatfloatfloat)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1calculateTangentSpaceVector_1_1Vector3RVector3RVector3RRealvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong position1, 
  jlong position2, 
  jlong position3, 
  jfloat u1, 
  jfloat v1, 
  jfloat u2, 
  jfloat v2, 
  jfloat u3, 
  jfloat v3
);

/*
 * Class:      org.ogre4j.Math
 * Method:     buildReflectionMatrix()
 * Type:       static method
 * Definition: static Matrix4 Ogre::Math::buildReflectionMatrix
 * Signature:  (Ogre_Plane)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1buildReflectionMatrix_1_1PlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong p
);

/*
 * Class:      org.ogre4j.Math
 * Method:     calculateFaceNormal()
 * Type:       static method
 * Definition: static Vector4 Ogre::Math::calculateFaceNormal
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1calculateFaceNormal_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong v1, 
  jlong v2, 
  jlong v3
);

/*
 * Class:      org.ogre4j.Math
 * Method:     calculateBasicFaceNormal()
 * Type:       static method
 * Definition: static Vector3 Ogre::Math::calculateBasicFaceNormal
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1calculateBasicFaceNormal_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong v1, 
  jlong v2, 
  jlong v3
);

/*
 * Class:      org.ogre4j.Math
 * Method:     calculateFaceNormalWithoutNormalize()
 * Type:       static method
 * Definition: static Vector4 Ogre::Math::calculateFaceNormalWithoutNormalize
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1calculateFaceNormalWithoutNormalize_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong v1, 
  jlong v2, 
  jlong v3
);

/*
 * Class:      org.ogre4j.Math
 * Method:     calculateBasicFaceNormalWithoutNormalize()
 * Type:       static method
 * Definition: static Vector3 Ogre::Math::calculateBasicFaceNormalWithoutNormalize
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1calculateBasicFaceNormalWithoutNormalize_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong v1, 
  jlong v2, 
  jlong v3
);

/*
 * Class:      org.ogre4j.Math
 * Method:     gaussianDistribution()
 * Type:       static method
 * Definition: static Real Ogre::Math::gaussianDistribution
 * Signature:  (floatfloatfloat)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1gaussianDistribution_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat x, 
  jfloat offset, 
  jfloat scale
);

/*
 * Class:      org.ogre4j.Math
 * Method:     makeViewMatrix()
 * Type:       static method
 * Definition: static Matrix4 Ogre::Math::makeViewMatrix
 * Signature:  (Ogre_Vector3Ogre_QuaternionOgre_Matrix4)Ogre_Matrix4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Math__1makeViewMatrix_1_1Vector3RQuaternionRMatrix4P (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong position, 
  jlong orientation, 
  jlong reflectMatrix
);

/*
 * Class:      org.ogre4j.Math
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Math::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Math__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getPOS_INFINITY()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Math::POS_INFINITY
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1getPOS_1INFINITY (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getNEG_INFINITY()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Math::NEG_INFINITY
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1getNEG_1INFINITY (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getPI()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Math::PI
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1getPI (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getTWO_PI()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Math::TWO_PI
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1getTWO_1PI (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getHALF_PI()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Math::HALF_PI
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1getHALF_1PI (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getfDeg2Rad()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Math::fDeg2Rad
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1getfDeg2Rad (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Math
 * Method:     getfRad2Deg()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Math::fRad2Deg
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Math__1getfRad2Deg (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Math__*/
