///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_OverlayManager__
#define __Included_org_ogre4j_OverlayManager__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     OverlayManager()
 * Type:       constructor
 * Definition: Ogre::OverlayManager::OverlayManager
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1_1createOverlayManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getScriptPatterns()
 * Type:       virtual method
 * Definition: const StringVector& Ogre::OverlayManager::getScriptPatterns
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getScriptPatterns_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     parseScript()
 * Type:       virtual method
 * Definition: void Ogre::OverlayManager::parseScript
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1parseScript_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getLoadingOrder()
 * Type:       virtual method
 * Definition: Real Ogre::OverlayManager::getLoadingOrder
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_OverlayManager__1getLoadingOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     create()
 * Type:       non-virtual method
 * Definition: Overlay* Ogre::OverlayManager::create
 * Signature:  (std_string)Ogre_Overlay
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1create_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getByName()
 * Type:       non-virtual method
 * Definition: Overlay* Ogre::OverlayManager::getByName
 * Signature:  (std_string)Ogre_Overlay
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getByName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroy()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroy
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroy_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroy()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroy
 * Signature:  (Ogre_Overlay)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroy_1_1Overlayp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong overlay
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyAll()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyAll
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyAll (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getOverlayIterator()
 * Type:       non-virtual method
 * Definition: OverlayMapIterator Ogre::OverlayManager::getOverlayIterator
 * Signature:  ()Ogre_OverlayManager_OverlayMapIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getOverlayIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     _queueOverlaysForRendering()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::_queueOverlaysForRendering
 * Signature:  (Ogre_CameraOgre_RenderQueueOgre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1_1queueOverlaysForRendering_1_1CamerapRenderQueuepViewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam, 
  jlong pQueue, 
  jlong vp
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     hasViewportChanged()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayManager::hasViewportChanged
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_OverlayManager__1hasViewportChanged_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getViewportHeight()
 * Type:       non-virtual method
 * Definition: int Ogre::OverlayManager::getViewportHeight
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_OverlayManager__1getViewportHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getViewportWidth()
 * Type:       non-virtual method
 * Definition: int Ogre::OverlayManager::getViewportWidth
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_OverlayManager__1getViewportWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getViewportAspectRatio()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayManager::getViewportAspectRatio
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_OverlayManager__1getViewportAspectRatio_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     createOverlayElement()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::createOverlayElement
 * Signature:  (std_stringstd_stringZ)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1createOverlayElement_1_1StringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName, 
  jstring instanceName, 
  jboolean isTemplate
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getOverlayElement()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::getOverlayElement
 * Signature:  (std_stringZ)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getOverlayElement_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean isTemplate
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyOverlayElement()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyOverlayElement
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyOverlayElement_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName, 
  jboolean isTemplate
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyOverlayElement()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyOverlayElement
 * Signature:  (Ogre_OverlayElementZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyOverlayElement_1_1OverlayElementpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pInstance, 
  jboolean isTemplate
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     destroyAllOverlayElements()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::destroyAllOverlayElements
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1destroyAllOverlayElements_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean isTemplate
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     addOverlayElementFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayManager::addOverlayElementFactory
 * Signature:  (Ogre_OverlayElementFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1addOverlayElementFactory_1_1OverlayElementFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong elemFactory
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     createOverlayElementFromTemplate()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::createOverlayElementFromTemplate
 * Signature:  (std_stringstd_stringstd_stringZ)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1createOverlayElementFromTemplate_1_1StringRStringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring templateName, 
  jstring typeName, 
  jstring instanceName, 
  jboolean isTemplate
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     cloneOverlayElementFromTemplate()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::cloneOverlayElementFromTemplate
 * Signature:  (std_stringstd_string)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1cloneOverlayElementFromTemplate_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring templateName, 
  jstring instanceName
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     createOverlayElementFromFactory()
 * Type:       non-virtual method
 * Definition: OverlayElement* Ogre::OverlayManager::createOverlayElementFromFactory
 * Signature:  (std_stringstd_string)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1createOverlayElementFromFactory_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName, 
  jstring instanceName
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getTemplateIterator()
 * Type:       non-virtual method
 * Definition: TemplateIterator Ogre::OverlayManager::getTemplateIterator
 * Signature:  ()Ogre_OverlayManager_TemplateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getTemplateIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     isTemplate()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayManager::isTemplate
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_OverlayManager__1isTemplate_1_1Stringv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strName
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static OverlayManager& Ogre::OverlayManager::getSingleton
 * Signature:  ()Ogre_OverlayManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static OverlayManager* Ogre::OverlayManager::getSingletonPtr
 * Signature:  ()Ogre_OverlayManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_OverlayManager__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.OverlayManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::OverlayManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_OverlayManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_OverlayManager__*/
