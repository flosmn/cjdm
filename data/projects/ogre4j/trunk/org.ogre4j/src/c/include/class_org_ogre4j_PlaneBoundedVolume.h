///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_PlaneBoundedVolume__
#define __Included_org_ogre4j_PlaneBoundedVolume__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     PlaneBoundedVolume()
 * Type:       constructor
 * Definition: Ogre::PlaneBoundedVolume::PlaneBoundedVolume
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PlaneBoundedVolume__1_1createPlaneBoundedVolume (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     PlaneBoundedVolume()
 * Type:       constructor
 * Definition: Ogre::PlaneBoundedVolume::PlaneBoundedVolume
 * Signature:  (Ogre_Plane_Side)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PlaneBoundedVolume__1_1createPlaneBoundedVolume_1_1Plane_1Sidev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint theOutside
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::PlaneBoundedVolume::intersects
 * Signature:  (Ogre_AxisAlignedBox)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PlaneBoundedVolume__1intersects_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: bool Ogre::PlaneBoundedVolume::intersects
 * Signature:  (Ogre_Sphere)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PlaneBoundedVolume__1intersects_1_1SphereR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sphere
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: std::pair<bool, Real> Ogre::PlaneBoundedVolume::intersects
 * Signature:  (Ogre_Ray)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PlaneBoundedVolume__1intersects_1_1RayR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ray
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::PlaneBoundedVolume::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PlaneBoundedVolume__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     getplanes()
 * Type:       getter for public attribute
 * Definition: PlaneList Ogre::PlaneBoundedVolume::planes
 * Signature:  ()Ogre_PlaneBoundedVolume_PlaneList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PlaneBoundedVolume__1getplanes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     setplanes()
 * Type:       setter for public attribute
 * Definition: PlaneList Ogre::PlaneBoundedVolume::planes
 * Signature:  (Ogre_PlaneBoundedVolume_PlaneList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PlaneBoundedVolume__1setplanes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     getoutside()
 * Type:       getter for public attribute
 * Definition: Plane::Side Ogre::PlaneBoundedVolume::outside
 * Signature:  ()Ogre_Plane_Side
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PlaneBoundedVolume__1getoutside (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PlaneBoundedVolume
 * Method:     setoutside()
 * Type:       setter for public attribute
 * Definition: Plane::Side Ogre::PlaneBoundedVolume::outside
 * Signature:  (Ogre_Plane_Side)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PlaneBoundedVolume__1setoutside (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint _jni_value_
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_PlaneBoundedVolume__*/
