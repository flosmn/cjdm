///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_std_ofstream__
#define __Included_org_std_ofstream__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.std.ofstream
 * Method:     ofstream()
 * Type:       constructor
 * Definition: std::ofstream::ofstream
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_std_ofstream__1_1createofstream (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     ofstream()
 * Type:       constructor
 * Definition: std::ofstream::ofstream
 * Signature:  (C)V
 */

JNIEXPORT jlong JNICALL Java_org_std_ofstream__1_1createofstream_1_1cP (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring filename
);

/*
 * Class:      org.std.ofstream
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void std::ofstream::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_std_ofstream__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     eof()
 * Type:       non-virtual method
 * Definition: bool std::ofstream::eof
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_ofstream__1eof (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     fail()
 * Type:       non-virtual method
 * Definition: bool std::ofstream::fail
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_ofstream__1fail (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     fill()
 * Type:       non-virtual method
 * Definition: char std::ofstream::fill
 * Signature:  ()C
 */

JNIEXPORT jchar JNICALL Java_org_std_ofstream__1fill (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     fill()
 * Type:       non-virtual method
 * Definition: char std::ofstream::fill
 * Signature:  (C)C
 */

JNIEXPORT jchar JNICALL Java_org_std_ofstream__1fill_1_1cv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jchar ch
);

/*
 * Class:      org.std.ofstream
 * Method:     flush()
 * Type:       non-virtual method
 * Definition: ostream & std::ofstream::flush
 * Signature:  ()std_ostream
 */

JNIEXPORT jlong JNICALL Java_org_std_ofstream__1flush (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     good()
 * Type:       non-virtual method
 * Definition: bool std::ofstream::good
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_ofstream__1good (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     put()
 * Type:       non-virtual method
 * Definition: ostream & std::ofstream::put
 * Signature:  (C)std_ostream
 */

JNIEXPORT jlong JNICALL Java_org_std_ofstream__1put_1_1cv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jchar ch
);

/*
 * Class:      org.std.ofstream
 * Method:     sync_with_stdio()
 * Type:       static method
 * Definition: bool std::ofstream::sync_with_stdio
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_ofstream__1sync_1with_1stdio (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     sync_with_stdio()
 * Type:       static method
 * Definition: bool std::ofstream::sync_with_stdio
 * Signature:  (Z)Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_ofstream__1sync_1with_1stdio_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jboolean sync
);

/*
 * Class:      org.std.ofstream
 * Method:     width()
 * Type:       non-virtual method
 * Definition: int std::ofstream::width
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_std_ofstream__1width (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     width()
 * Type:       non-virtual method
 * Definition: int std::ofstream::width
 * Signature:  (I)I
 */

JNIEXPORT jint JNICALL Java_org_std_ofstream__1width_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint w
);

/*
 * Class:      org.std.ofstream
 * Method:     is_open()
 * Type:       non-virtual method
 * Definition: int std::ofstream::is_open
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_std_ofstream__1is_1open (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     close()
 * Type:       non-virtual method
 * Definition: int std::ofstream::close
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_std_ofstream__1close (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.std.ofstream
 * Method:     open()
 * Type:       non-virtual method
 * Definition: int std::ofstream::open
 * Signature:  (C)V
 */

JNIEXPORT void JNICALL Java_org_std_ofstream__1open_1_1cP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.std.ofstream
 * Method:     __delete()
 * Type:       destructor
 * Definition: std::ofstream::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_std_ofstream__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_std_ofstream__*/
