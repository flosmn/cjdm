///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Material__
#define __Included_org_ogre4j_Material__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Material
 * Method:     Material()
 * Type:       constructor
 * Definition: Ogre::Material::Material
 * Signature:  (Ogre_ResourceManagerstd_stringunsigned_longstd_stringZOgre_ManualResourceLoader)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1_1createMaterial_1_1ResourceManagerpStringRResourceHandlevStringRbvManualResourceLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong creator, 
  jstring name, 
  jlong handle, 
  jstring group, 
  jboolean isManual, 
  jlong loader
);

/*
 * Class:      org.ogre4j.Material
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Material& Ogre::Material::operator=
 * Signature:  (Ogre_Material)Ogre_Material
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1operatorAssignment_1_1MaterialR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Material
 * Method:     isTransparent()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::isTransparent
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isTransparent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setReceiveShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setReceiveShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setReceiveShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getReceiveShadows()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::getReceiveShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1getReceiveShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setTransparencyCastsShadows()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setTransparencyCastsShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setTransparencyCastsShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getTransparencyCastsShadows()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::getTransparencyCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1getTransparencyCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     createTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::createTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1createTechnique (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getTechnique
 * Signature:  (S)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getTechnique_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getTechnique
 * Signature:  (std_string)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getTechnique_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getNumTechniques()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumTechniques
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumTechniques_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     removeTechnique()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::removeTechnique
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1removeTechnique_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Material
 * Method:     removeAllTechniques()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::removeAllTechniques
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1removeAllTechniques (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getTechniqueIterator()
 * Type:       non-virtual method
 * Definition: TechniqueIterator Ogre::Material::getTechniqueIterator
 * Signature:  ()Ogre_Material_TechniqueIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getTechniqueIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getSupportedTechniqueIterator()
 * Type:       non-virtual method
 * Definition: TechniqueIterator Ogre::Material::getSupportedTechniqueIterator
 * Signature:  ()Ogre_Material_TechniqueIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getSupportedTechniqueIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getSupportedTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getSupportedTechnique
 * Signature:  (S)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getSupportedTechnique_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getNumSupportedTechniques()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumSupportedTechniques
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumSupportedTechniques_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getUnsupportedTechniquesExplanation()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Material::getUnsupportedTechniquesExplanation
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getUnsupportedTechniquesExplanation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getNumLodLevels()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumLodLevels
 * Signature:  (S)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumLodLevels_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint schemeIndex
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getNumLodLevels()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getNumLodLevels
 * Signature:  (std_string)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getNumLodLevels_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring schemeName
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getBestTechnique()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Material::getBestTechnique
 * Signature:  (SOgre_Renderable)Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getBestTechnique_1_1HvRenderableP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint lodIndex, 
  jlong rend
);

/*
 * Class:      org.ogre4j.Material
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: MaterialPtr Ogre::Material::clone
 * Signature:  (std_stringZstd_string)Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1clone_1_1StringRbvStringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newName, 
  jboolean changeGroup, 
  jstring newGroup
);

/*
 * Class:      org.ogre4j.Material
 * Method:     copyDetailsTo()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::copyDetailsTo
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1copyDetailsTo_1_1MaterialPtrr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mat
);

/*
 * Class:      org.ogre4j.Material
 * Method:     compile()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::compile
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1compile_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoManageTextureUnits
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setPointSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setPointSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setPointSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat ps
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setAmbient
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setAmbient_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setAmbient
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setAmbient_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDiffuse
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDiffuse_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDiffuse
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDiffuse_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong diffuse
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSpecular
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSpecular_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSpecular
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSpecular_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong specular
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setShininess()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setShininess
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setShininess_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat val
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSelfIllumination
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSelfIllumination_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSelfIllumination
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSelfIllumination_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong selfIllum
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthFunction()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setColourWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setColourWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setColourWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setCullingMode
 * Signature:  (Ogre_CullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setCullingMode_1_1CullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setManualCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setManualCullingMode
 * Signature:  (Ogre_ManualCullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setManualCullingMode_1_1ManualCullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setLightingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setLightingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setLightingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setShadingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setShadingMode
 * Signature:  (Ogre_ShadeOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setShadingMode_1_1ShadeOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setFog()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setFog
 * Signature:  (ZOgre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setFog_1_1bvFogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean overrideScene, 
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setDepthBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setDepthBias
 * Signature:  (FF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setDepthBias_1_1FvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat constantBias, 
  jfloat slopeScaleBias
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setTextureFiltering
 * Signature:  (Ogre_TextureFilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setTextureFiltering_1_1TextureFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint filterType
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setTextureAnisotropy()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setTextureAnisotropy
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setTextureAnisotropy_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint maxAniso
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSceneBlending
 * Signature:  (Ogre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSceneBlending_1_1SceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendTypeOgre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSeparateSceneBlending_1_1SceneBlendTypeVSceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt, 
  jint sbta
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSceneBlending_1_1SceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setSeparateSceneBlending_1_1SceneBlendFactorVSceneBlendFactorVSceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor, 
  jint sourceFactorAlpha, 
  jint destFactorAlpha
);

/*
 * Class:      org.ogre4j.Material
 * Method:     _notifyNeedsRecompile()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::_notifyNeedsRecompile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1notifyNeedsRecompile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setLodLevels()
 * Type:       non-virtual method
 * Definition: void Ogre::Material::setLodLevels
 * Signature:  (Ogre_Material_LodDistanceList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setLodLevels_1_1LodDistanceListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodDistances
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getLodDistanceIterator()
 * Type:       non-virtual method
 * Definition: LodDistanceIterator Ogre::Material::getLodDistanceIterator
 * Signature:  ()Ogre_Material_LodDistanceIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getLodDistanceIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getLodIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getLodIndex
 * Signature:  (float)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getLodIndex_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat d
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getLodIndexSquaredDepth()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Material::getLodIndexSquaredDepth
 * Signature:  (float)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getLodIndexSquaredDepth_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat squaredDepth
);

/*
 * Class:      org.ogre4j.Material
 * Method:     touch()
 * Type:       virtual method
 * Definition: void Ogre::Material::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     applyTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::applyTextureAliases
 * Signature:  (Ogre_AliasTextureNamePairListZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1applyTextureAliases_1_1AliasTextureNamePairListRbV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aliasList, 
  jboolean apply
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getCompilationRequired()
 * Type:       non-virtual method
 * Definition: bool Ogre::Material::getCompilationRequired
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1getCompilationRequired_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
);

/*
 * Class:      org.ogre4j.Material
 * Method:     reload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: virtual LoadingState Ogre::Resource::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
);

/*
 * Class:      org.ogre4j.Material
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.Material
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Material__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Material__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Material__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
);

/*
 * Class:      org.ogre4j.Material
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
);

/*
 * Class:      org.ogre4j.Material
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Material__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Material
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
);

/*
 * Class:      org.ogre4j.Material
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Material
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Material::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Material__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Material__*/
