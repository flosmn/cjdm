///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Root__
#define __Included_org_ogre4j_Root__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Root
 * Method:     Root()
 * Type:       constructor
 * Definition: Ogre::Root::Root
 * Signature:  (std_stringstd_stringstd_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1_1createRoot_1_1StringRStringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring pluginFileName, 
  jstring configFileName, 
  jstring logFileName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     saveConfig()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::saveConfig
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1saveConfig (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     restoreConfig()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::restoreConfig
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1restoreConfig (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     showConfigDialog()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::showConfigDialog
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1showConfigDialog (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     addRenderSystem()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addRenderSystem
 * Signature:  (Ogre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addRenderSystem_1_1RenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newRend
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getAvailableRenderers()
 * Type:       non-virtual method
 * Definition: RenderSystemList* Ogre::Root::getAvailableRenderers
 * Signature:  ()Ogre_RenderSystemList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getAvailableRenderers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderSystemByName()
 * Type:       non-virtual method
 * Definition: RenderSystem* Ogre::Root::getRenderSystemByName
 * Signature:  (std_string)Ogre_RenderSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderSystemByName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Root
 * Method:     setRenderSystem()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::setRenderSystem
 * Signature:  (Ogre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1setRenderSystem_1_1RenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong system
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderSystem()
 * Type:       non-virtual method
 * Definition: RenderSystem* Ogre::Root::getRenderSystem
 * Signature:  ()Ogre_RenderSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderSystem (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     initialise()
 * Type:       non-virtual method
 * Definition: RenderWindow* Ogre::Root::initialise
 * Signature:  (Zstd_stringstd_string)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1initialise_1_1bvStringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoCreateWindow, 
  jstring windowTitle, 
  jstring customCapabilitiesConfig
);

/*
 * Class:      org.ogre4j.Root
 * Method:     isInitialised()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::isInitialised
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1isInitialised_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     useCustomRenderSystemCapabilities()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::useCustomRenderSystemCapabilities
 * Signature:  (Ogre_RenderSystemCapabilities)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1useCustomRenderSystemCapabilities_1_1RenderSystemCapabilitiesp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong capabilities
);

/*
 * Class:      org.ogre4j.Root
 * Method:     addSceneManagerFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addSceneManagerFactory
 * Signature:  (Ogre_SceneManagerFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addSceneManagerFactory_1_1SceneManagerFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
);

/*
 * Class:      org.ogre4j.Root
 * Method:     removeSceneManagerFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeSceneManagerFactory
 * Signature:  (Ogre_SceneManagerFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeSceneManagerFactory_1_1SceneManagerFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManagerMetaData()
 * Type:       non-virtual method
 * Definition: const SceneManagerMetaData* Ogre::Root::getSceneManagerMetaData
 * Signature:  (std_string)Ogre_SceneManagerMetaData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManagerMetaData_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManagerMetaDataIterator()
 * Type:       non-virtual method
 * Definition: SceneManagerEnumerator::MetaDataIterator Ogre::Root::getSceneManagerMetaDataIterator
 * Signature:  ()Ogre_SceneManagerEnumerator_MetaDataIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManagerMetaDataIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     createSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::createSceneManager
 * Signature:  (std_stringstd_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createSceneManager_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName, 
  jstring instanceName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     createSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::createSceneManager
 * Signature:  (unsigned_shortstd_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createSceneManager_1_1SceneTypeMaskvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint typeMask, 
  jstring instanceName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     destroySceneManager()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::destroySceneManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1destroySceneManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::getSceneManager
 * Signature:  (std_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManager_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getSceneManagerIterator()
 * Type:       non-virtual method
 * Definition: SceneManagerEnumerator::SceneManagerIterator Ogre::Root::getSceneManagerIterator
 * Signature:  ()Ogre_SceneManagerEnumerator_SceneManagerIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSceneManagerIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getTextureManager()
 * Type:       non-virtual method
 * Definition: TextureManager* Ogre::Root::getTextureManager
 * Signature:  ()Ogre_TextureManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getTextureManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getMeshManager()
 * Type:       non-virtual method
 * Definition: MeshManager* Ogre::Root::getMeshManager
 * Signature:  ()Ogre_MeshManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getMeshManager (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getErrorDescription()
 * Type:       non-virtual method
 * Definition: String Ogre::Root::getErrorDescription
 * Signature:  (J)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Root__1getErrorDescription_1_1lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong errorNumber
);

/*
 * Class:      org.ogre4j.Root
 * Method:     addFrameListener()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addFrameListener
 * Signature:  (Ogre_FrameListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addFrameListener_1_1FrameListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newListener
);

/*
 * Class:      org.ogre4j.Root
 * Method:     removeFrameListener()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeFrameListener
 * Signature:  (Ogre_FrameListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeFrameListener_1_1FrameListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong oldListener
);

/*
 * Class:      org.ogre4j.Root
 * Method:     queueEndRendering()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::queueEndRendering
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1queueEndRendering (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     startRendering()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::startRendering
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1startRendering (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     renderOneFrame()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::renderOneFrame
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1renderOneFrame (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     shutdown()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::shutdown
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1shutdown (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     addResourceLocation()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addResourceLocation
 * Signature:  (std_stringstd_stringstd_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addResourceLocation_1_1StringRStringRStringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring locType, 
  jstring groupName, 
  jboolean recursive
);

/*
 * Class:      org.ogre4j.Root
 * Method:     removeResourceLocation()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeResourceLocation
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeResourceLocation_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     convertColourValue()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::convertColourValue
 * Signature:  (Ogre_ColourValueunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1convertColourValue_1_1ColourValueRuint32p (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour, 
  jlong pDest
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getAutoCreatedWindow()
 * Type:       non-virtual method
 * Definition: RenderWindow* Ogre::Root::getAutoCreatedWindow
 * Signature:  ()Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getAutoCreatedWindow (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     createRenderWindow()
 * Type:       non-virtual method
 * Definition: RenderWindow* Ogre::Root::createRenderWindow
 * Signature:  (std_stringIIZOgre_NameValuePairList)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createRenderWindow_1_1StringRIvIvbvNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong width, 
  jlong height, 
  jboolean fullScreen, 
  jlong miscParams
);

/*
 * Class:      org.ogre4j.Root
 * Method:     detachRenderTarget()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::detachRenderTarget
 * Signature:  (Ogre_RenderTarget)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1detachRenderTarget_1_1RenderTargetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pWin
);

/*
 * Class:      org.ogre4j.Root
 * Method:     detachRenderTarget()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::detachRenderTarget
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1detachRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderTarget()
 * Type:       non-virtual method
 * Definition: RenderTarget* Ogre::Root::getRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Root
 * Method:     loadPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::loadPlugin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1loadPlugin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pluginName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     unloadPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::unloadPlugin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1unloadPlugin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring pluginName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     installPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::installPlugin
 * Signature:  (Ogre_Plugin)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1installPlugin_1_1Pluginp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong plugin
);

/*
 * Class:      org.ogre4j.Root
 * Method:     uninstallPlugin()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::uninstallPlugin
 * Signature:  (Ogre_Plugin)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1uninstallPlugin_1_1Pluginp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong plugin
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getInstalledPlugins()
 * Type:       non-virtual method
 * Definition: const PluginInstanceList& Ogre::Root::getInstalledPlugins
 * Signature:  ()Ogre_Root_PluginInstanceList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getInstalledPlugins_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getTimer()
 * Type:       non-virtual method
 * Definition: Timer* Ogre::Root::getTimer
 * Signature:  ()Ogre_Timer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getTimer (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameStarted()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameStarted
 * Signature:  (Ogre_FrameEvent)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameStarted_1_1FrameEventr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameRenderingQueued()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameRenderingQueued
 * Signature:  (Ogre_FrameEvent)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameRenderingQueued_1_1FrameEventr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameEnded()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameEnded
 * Signature:  (Ogre_FrameEvent)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameEnded_1_1FrameEventr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameStarted()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameStarted
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameStarted (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameRenderingQueued()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameRenderingQueued
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameRenderingQueued (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _fireFrameEnded()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_fireFrameEnded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1fireFrameEnded (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getNextFrameNumber()
 * Type:       non-virtual method
 * Definition: unsigned long Ogre::Root::getNextFrameNumber
 * Signature:  ()J
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getNextFrameNumber_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _getCurrentSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::Root::_getCurrentSceneManager
 * Signature:  ()Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1_1getCurrentSceneManager_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _setCurrentSceneManager()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::_setCurrentSceneManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1_1setCurrentSceneManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _updateAllRenderTargets()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::_updateAllRenderTargets
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1_1updateAllRenderTargets (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     createRenderQueueInvocationSequence()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocationSequence* Ogre::Root::createRenderQueueInvocationSequence
 * Signature:  (std_string)Ogre_RenderQueueInvocationSequence
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1createRenderQueueInvocationSequence_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getRenderQueueInvocationSequence()
 * Type:       non-virtual method
 * Definition: RenderQueueInvocationSequence* Ogre::Root::getRenderQueueInvocationSequence
 * Signature:  (std_string)Ogre_RenderQueueInvocationSequence
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getRenderQueueInvocationSequence_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Root
 * Method:     destroyRenderQueueInvocationSequence()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::destroyRenderQueueInvocationSequence
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1destroyRenderQueueInvocationSequence_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Root
 * Method:     destroyAllRenderQueueInvocationSequences()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::destroyAllRenderQueueInvocationSequences
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1destroyAllRenderQueueInvocationSequences (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     clearEventTimes()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::clearEventTimes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1clearEventTimes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     setFrameSmoothingPeriod()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::setFrameSmoothingPeriod
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1setFrameSmoothingPeriod_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat period
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getFrameSmoothingPeriod()
 * Type:       non-virtual method
 * Definition: Real Ogre::Root::getFrameSmoothingPeriod
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Root__1getFrameSmoothingPeriod_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     addMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::addMovableObjectFactory
 * Signature:  (Ogre_MovableObjectFactoryZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1addMovableObjectFactory_1_1MovableObjectFactorypbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact, 
  jboolean overrideExisting
);

/*
 * Class:      org.ogre4j.Root
 * Method:     removeMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::Root::removeMovableObjectFactory
 * Signature:  (Ogre_MovableObjectFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1removeMovableObjectFactory_1_1MovableObjectFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
);

/*
 * Class:      org.ogre4j.Root
 * Method:     hasMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: bool Ogre::Root::hasMovableObjectFactory
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Root__1hasMovableObjectFactory_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getMovableObjectFactory()
 * Type:       non-virtual method
 * Definition: MovableObjectFactory* Ogre::Root::getMovableObjectFactory
 * Signature:  (std_string)Ogre_MovableObjectFactory
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getMovableObjectFactory_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
);

/*
 * Class:      org.ogre4j.Root
 * Method:     _allocateNextMovableObjectTypeFlag()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::Root::_allocateNextMovableObjectTypeFlag
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1_1allocateNextMovableObjectTypeFlag (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getMovableObjectFactoryIterator()
 * Type:       non-virtual method
 * Definition: MovableObjectFactoryIterator Ogre::Root::getMovableObjectFactoryIterator
 * Signature:  ()Ogre_Root_MovableObjectFactoryIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getMovableObjectFactoryIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static Root& Ogre::Root::getSingleton
 * Signature:  ()Ogre_Root
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static Root* Ogre::Root::getSingletonPtr
 * Signature:  ()Ogre_Root
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Root__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Root
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Root::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Root__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Root__*/
