///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_SceneManager__
#define __Included_org_ogre4j_SceneManager__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::SceneManager::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_SceneManager__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getTypeName()
 * Type:       pure virtual method
 * Definition: virtual const String& Ogre::SceneManager::getTypeName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_SceneManager__1getTypeName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createCamera()
 * Type:       virtual method
 * Definition: virtual Camera* Ogre::SceneManager::createCamera
 * Signature:  (std_string)Ogre_Camera
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createCamera_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCamera()
 * Type:       virtual method
 * Definition: virtual Camera* Ogre::SceneManager::getCamera
 * Signature:  (std_string)Ogre_Camera
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getCamera_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasCamera()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasCamera
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasCamera_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyCamera
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyCamera_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyCamera
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyCamera_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllCameras()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllCameras
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllCameras (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createLight()
 * Type:       virtual method
 * Definition: virtual Light* Ogre::SceneManager::createLight
 * Signature:  (std_string)Ogre_Light
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createLight_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLight()
 * Type:       virtual method
 * Definition: virtual Light* Ogre::SceneManager::getLight
 * Signature:  (std_string)Ogre_Light
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLight_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasLight()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasLight
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasLight_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLightClippingPlanes()
 * Type:       virtual method
 * Definition: virtual const PlaneList& Ogre::SceneManager::getLightClippingPlanes
 * Signature:  (Ogre_Light)Ogre_PlaneList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLightClippingPlanes_1_1Lightp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLightScissorRect()
 * Type:       virtual method
 * Definition: virtual const RealRect& Ogre::SceneManager::getLightScissorRect
 * Signature:  (Ogre_LightOgre_Camera)Ogre_RealRect
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLightScissorRect_1_1LightpCameraP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l, 
  jlong cam
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyLight()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyLight
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyLight_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyLight()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyLight
 * Signature:  (Ogre_Light)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyLight_1_1Lightp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllLights()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllLights
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllLights (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _notifyLightsDirty()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_notifyLightsDirty
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1notifyLightsDirty (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _getLightsDirtyCounter()
 * Type:       non-virtual method
 * Definition: ulong Ogre::SceneManager::_getLightsDirtyCounter
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1getLightsDirtyCounter_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _getLightsAffectingFrustum()
 * Type:       virtual method
 * Definition: virtual const LightList& Ogre::SceneManager::_getLightsAffectingFrustum
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1getLightsAffectingFrustum_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _populateLightList()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_populateLightList
 * Signature:  (Ogre_Vector3floatOgre_LightList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1populateLightList_1_1Vector3RRealvLightListr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position, 
  jfloat radius, 
  jlong destList
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::createSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createSceneNode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::createSceneNode
 * Signature:  (std_string)Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createSceneNode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroySceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroySceneNode
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroySceneNode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroySceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroySceneNode
 * Signature:  (Ogre_SceneNode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroySceneNode_1_1SceneNodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sn
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getRootSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getRootSceneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getRootSceneNode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSceneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSceneNode
 * Signature:  (std_string)Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSceneNode_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasSceneNode()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasSceneNode
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasSceneNode_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createEntity()
 * Type:       virtual method
 * Definition: virtual Entity* Ogre::SceneManager::createEntity
 * Signature:  (std_stringstd_string)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createEntity_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring entityName, 
  jstring meshName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createEntity()
 * Type:       virtual method
 * Definition: virtual Entity* Ogre::SceneManager::createEntity
 * Signature:  (std_stringOgre_SceneManager_PrefabType)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createEntity_1_1StringRPrefabTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring entityName, 
  jint ptype
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getEntity()
 * Type:       virtual method
 * Definition: virtual Entity* Ogre::SceneManager::getEntity
 * Signature:  (std_string)Ogre_Entity
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getEntity_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasEntity()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasEntity
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasEntity_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyEntity()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyEntity
 * Signature:  (Ogre_Entity)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyEntity_1_1Entityp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ent
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyEntity()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyEntity
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyEntity_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllEntities()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllEntities
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllEntities (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createManualObject()
 * Type:       virtual method
 * Definition: virtual ManualObject* Ogre::SceneManager::createManualObject
 * Signature:  (std_string)Ogre_ManualObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createManualObject_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getManualObject()
 * Type:       virtual method
 * Definition: virtual ManualObject* Ogre::SceneManager::getManualObject
 * Signature:  (std_string)Ogre_ManualObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getManualObject_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasManualObject()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasManualObject
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasManualObject_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyManualObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyManualObject
 * Signature:  (Ogre_ManualObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyManualObject_1_1ManualObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyManualObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyManualObject
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyManualObject_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllManualObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllManualObjects
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllManualObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createBillboardChain()
 * Type:       virtual method
 * Definition: virtual BillboardChain* Ogre::SceneManager::createBillboardChain
 * Signature:  (std_string)Ogre_BillboardChain
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createBillboardChain_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getBillboardChain()
 * Type:       virtual method
 * Definition: virtual BillboardChain* Ogre::SceneManager::getBillboardChain
 * Signature:  (std_string)Ogre_BillboardChain
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getBillboardChain_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasBillboardChain()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasBillboardChain
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasBillboardChain_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardChain()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardChain
 * Signature:  (Ogre_BillboardChain)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardChain_1_1BillboardChainp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardChain()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardChain
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardChain_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllBillboardChains()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllBillboardChains
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllBillboardChains (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createRibbonTrail()
 * Type:       virtual method
 * Definition: virtual RibbonTrail* Ogre::SceneManager::createRibbonTrail
 * Signature:  (std_string)Ogre_RibbonTrail
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createRibbonTrail_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getRibbonTrail()
 * Type:       virtual method
 * Definition: virtual RibbonTrail* Ogre::SceneManager::getRibbonTrail
 * Signature:  (std_string)Ogre_RibbonTrail
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getRibbonTrail_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasRibbonTrail()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasRibbonTrail
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasRibbonTrail_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyRibbonTrail()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyRibbonTrail
 * Signature:  (Ogre_RibbonTrail)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyRibbonTrail_1_1RibbonTrailp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyRibbonTrail()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyRibbonTrail
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyRibbonTrail_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllRibbonTrails()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllRibbonTrails
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllRibbonTrails (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createParticleSystem()
 * Type:       virtual method
 * Definition: virtual ParticleSystem* Ogre::SceneManager::createParticleSystem
 * Signature:  (std_stringstd_string)Ogre_ParticleSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createParticleSystem_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring templateName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createParticleSystem()
 * Type:       virtual method
 * Definition: virtual ParticleSystem* Ogre::SceneManager::createParticleSystem
 * Signature:  (std_stringIstd_string)Ogre_ParticleSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createParticleSystem_1_1StringRivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint quota, 
  jstring resourceGroup
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getParticleSystem()
 * Type:       virtual method
 * Definition: virtual ParticleSystem* Ogre::SceneManager::getParticleSystem
 * Signature:  (std_string)Ogre_ParticleSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getParticleSystem_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasParticleSystem()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasParticleSystem
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasParticleSystem_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyParticleSystem()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyParticleSystem
 * Signature:  (Ogre_ParticleSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyParticleSystem_1_1ParticleSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong obj
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyParticleSystem()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyParticleSystem
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyParticleSystem_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllParticleSystems()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllParticleSystems
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllParticleSystems (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     clearScene()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::clearScene
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1clearScene (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setAmbientLight()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManager::setAmbientLight
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setAmbientLight_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAmbientLight()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::SceneManager::getAmbientLight
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAmbientLight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     prepareWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::prepareWorldGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1prepareWorldGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     prepareWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::prepareWorldGeometry
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1prepareWorldGeometry_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setWorldGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWorldGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWorldGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setWorldGeometry
 * Signature:  (Ogre_DataStreamPtrstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWorldGeometry_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     estimateWorldGeometry()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::SceneManager::estimateWorldGeometry
 * Signature:  (std_string)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1estimateWorldGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     estimateWorldGeometry()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::SceneManager::estimateWorldGeometry
 * Signature:  (Ogre_DataStreamPtrstd_string)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1estimateWorldGeometry_1_1DataStreamPtrrStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong stream, 
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSuggestedViewpoint()
 * Type:       virtual method
 * Definition: virtual ViewPoint Ogre::SceneManager::getSuggestedViewpoint
 * Signature:  (Z)Ogre_ViewPoint
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSuggestedViewpoint_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean random
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setOption()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::setOption
 * Signature:  (std_stringV)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1setOption_1_1StringRvP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey, 
  jlong pValue
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getOption()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getOption
 * Signature:  (std_stringV)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getOption_1_1StringRvp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey, 
  jlong pDestValue
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasOption()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasOption
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasOption_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getOptionValues()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getOptionValues
 * Signature:  (std_stringOgre_StringVector)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getOptionValues_1_1StringRStringVectorr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring strKey, 
  jlong refValueList
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getOptionKeys()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getOptionKeys
 * Signature:  (Ogre_StringVector)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getOptionKeys_1_1StringVectorr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong refKeys
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _updateSceneGraph()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_updateSceneGraph
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1updateSceneGraph_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _findVisibleObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_findVisibleObjects
 * Signature:  (Ogre_CameraOgre_VisibleObjectsBoundsInfoZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1findVisibleObjects_1_1CamerapVisibleObjectsBoundsInfopbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam, 
  jlong visibleBounds, 
  jboolean onlyShadowCasters
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _applySceneAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_applySceneAnimations
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1applySceneAnimations (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _renderVisibleObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_renderVisibleObjects
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1renderVisibleObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _renderScene()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_renderScene
 * Signature:  (Ogre_CameraOgre_ViewportZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1renderScene_1_1CamerapViewportpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong camera, 
  jlong vp, 
  jboolean includeOverlays
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _queueSkiesForRendering()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_queueSkiesForRendering
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1queueSkiesForRendering_1_1Camerap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setDestinationRenderSystem()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setDestinationRenderSystem
 * Signature:  (Ogre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setDestinationRenderSystem_1_1RenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sys
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSkyPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSkyPlane
 * Signature:  (ZOgre_Planestd_stringfloatfloatZfloatIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSkyPlane_1_1bvPlaneRStringRRealvRealvbvRealvivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jlong plane, 
  jstring materialName, 
  jfloat scale, 
  jfloat tiling, 
  jboolean drawFirst, 
  jfloat bow, 
  jint xsegments, 
  jint ysegments, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setSkyPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setSkyPlane
 * Signature:  (ZOgre_Planestd_stringfloatfloatunsigned_charfloatIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setSkyPlane_1_1bvPlaneRStringRRealvRealvuint8vRealvivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jlong plane, 
  jstring materialName, 
  jfloat scale, 
  jfloat tiling, 
  jshort renderQueue, 
  jfloat bow, 
  jint xsegments, 
  jint ysegments, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isSkyPlaneEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isSkyPlaneEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isSkyPlaneEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyPlaneNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSkyPlaneNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyPlaneNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyPlaneGenParameters()
 * Type:       virtual method
 * Definition: virtual const SkyPlaneGenParameters& Ogre::SceneManager::getSkyPlaneGenParameters
 * Signature:  ()Ogre_SceneManager_SkyPlaneGenParameters
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyPlaneGenParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSkyBox()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSkyBox
 * Signature:  (Zstd_stringfloatZOgre_Quaternionstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSkyBox_1_1bvStringRRealvbvQuaternionRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat distance, 
  jboolean drawFirst, 
  jlong orientation, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setSkyBox()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setSkyBox
 * Signature:  (Zstd_stringfloatunsigned_charOgre_Quaternionstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setSkyBox_1_1bvStringRRealvuint8vQuaternionRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat distance, 
  jshort renderQueue, 
  jlong orientation, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isSkyBoxEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isSkyBoxEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isSkyBoxEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyBoxNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSkyBoxNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyBoxNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyBoxGenParameters()
 * Type:       virtual method
 * Definition: virtual const SkyBoxGenParameters& Ogre::SceneManager::getSkyBoxGenParameters
 * Signature:  ()Ogre_SceneManager_SkyBoxGenParameters
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyBoxGenParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSkyDome()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSkyDome
 * Signature:  (Zstd_stringfloatfloatfloatZOgre_QuaternionIIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSkyDome_1_1bvStringRRealvRealvRealvbvQuaternionRivivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat curvature, 
  jfloat tiling, 
  jfloat distance, 
  jboolean drawFirst, 
  jlong orientation, 
  jint xsegments, 
  jint ysegments, 
  jint ysegments_keep, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setSkyDome()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_setSkyDome
 * Signature:  (Zstd_stringfloatfloatfloatunsigned_charOgre_QuaternionIIIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1setSkyDome_1_1bvStringRRealvRealvRealvuint8vQuaternionRivivivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable, 
  jstring materialName, 
  jfloat curvature, 
  jfloat tiling, 
  jfloat distance, 
  jshort renderQueue, 
  jlong orientation, 
  jint xsegments, 
  jint ysegments, 
  jint ysegments_keep, 
  jstring groupName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isSkyDomeEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isSkyDomeEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isSkyDomeEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyDomeNode()
 * Type:       virtual method
 * Definition: virtual SceneNode* Ogre::SceneManager::getSkyDomeNode
 * Signature:  ()Ogre_SceneNode
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyDomeNode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSkyDomeGenParameters()
 * Type:       virtual method
 * Definition: virtual const SkyDomeGenParameters& Ogre::SceneManager::getSkyDomeGenParameters
 * Signature:  ()Ogre_SceneManager_SkyDomeGenParameters
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSkyDomeGenParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFog()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManager::setFog
 * Signature:  (Ogre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFog_1_1FogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogMode()
 * Type:       virtual method
 * Definition: virtual FogMode Ogre::SceneManager::getFogMode
 * Signature:  ()Ogre_FogMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getFogMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::SceneManager::getFogColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getFogColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogStart()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getFogStart
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getFogStart_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogEnd()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getFogEnd
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getFogEnd_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFogDensity()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getFogDensity
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getFogDensity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createBillboardSet()
 * Type:       virtual method
 * Definition: virtual BillboardSet* Ogre::SceneManager::createBillboardSet
 * Signature:  (std_stringI)Ogre_BillboardSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createBillboardSet_1_1StringRIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong poolSize
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getBillboardSet()
 * Type:       virtual method
 * Definition: virtual BillboardSet* Ogre::SceneManager::getBillboardSet
 * Signature:  (std_string)Ogre_BillboardSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getBillboardSet_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasBillboardSet()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasBillboardSet
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasBillboardSet_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardSet()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardSet
 * Signature:  (Ogre_BillboardSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardSet_1_1BillboardSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong set
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyBillboardSet()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyBillboardSet
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyBillboardSet_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllBillboardSets()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllBillboardSets
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllBillboardSets (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setDisplaySceneNodes()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setDisplaySceneNodes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setDisplaySceneNodes_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean display
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getDisplaySceneNodes()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getDisplaySceneNodes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getDisplaySceneNodes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::SceneManager::createAnimation
 * Signature:  (std_stringfloat)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createAnimation_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jfloat length
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::SceneManager::getAnimation
 * Signature:  (std_string)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimation_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasAnimation()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasAnimation
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasAnimation_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAnimation()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAnimation
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllAnimations
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllAnimations (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createAnimationState()
 * Type:       virtual method
 * Definition: virtual AnimationState* Ogre::SceneManager::createAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createAnimationState_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring animName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimationState()
 * Type:       virtual method
 * Definition: virtual AnimationState* Ogre::SceneManager::getAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring animName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasAnimationState()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasAnimationState
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAnimationState()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAnimationState
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAnimationState_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllAnimationStates()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllAnimationStates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllAnimationStates (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     manualRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::manualRender
 * Signature:  (Ogre_RenderOperationOgre_PassOgre_ViewportOgre_Matrix4Ogre_Matrix4Ogre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1manualRender_1_1RenderOperationpPasspViewportpMatrix4RMatrix4RMatrix4Rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rend, 
  jlong pass, 
  jlong vp, 
  jlong worldMatrix, 
  jlong viewMatrix, 
  jlong projMatrix, 
  jboolean doBeginEndFrame
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getRenderQueue()
 * Type:       virtual method
 * Definition: virtual RenderQueue* Ogre::SceneManager::getRenderQueue
 * Signature:  ()Ogre_RenderQueue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getRenderQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     addRenderQueueListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::addRenderQueueListener
 * Signature:  (Ogre_RenderQueueListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1addRenderQueueListener_1_1RenderQueueListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newListener
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     removeRenderQueueListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::removeRenderQueueListener
 * Signature:  (Ogre_RenderQueueListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1removeRenderQueueListener_1_1RenderQueueListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong delListener
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     addSpecialCaseRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::addSpecialCaseRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1addSpecialCaseRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     removeSpecialCaseRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::removeSpecialCaseRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1removeSpecialCaseRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     clearSpecialCaseRenderQueues()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::clearSpecialCaseRenderQueues
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1clearSpecialCaseRenderQueues (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSpecialCaseRenderQueueMode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setSpecialCaseRenderQueueMode
 * Signature:  (Ogre_SceneManager_SpecialCaseRenderQueueMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSpecialCaseRenderQueueMode_1_1SpecialCaseRenderQueueModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSpecialCaseRenderQueueMode()
 * Type:       virtual method
 * Definition: virtual SpecialCaseRenderQueueMode Ogre::SceneManager::getSpecialCaseRenderQueueMode
 * Signature:  ()Ogre_SceneManager_SpecialCaseRenderQueueMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getSpecialCaseRenderQueueMode (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isRenderQueueToBeProcessed()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isRenderQueueToBeProcessed
 * Signature:  (unsigned_char)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isRenderQueueToBeProcessed_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWorldGeometryRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setWorldGeometryRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWorldGeometryRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort qid
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getWorldGeometryRenderQueue()
 * Type:       virtual method
 * Definition: virtual uint8 Ogre::SceneManager::getWorldGeometryRenderQueue
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_SceneManager__1getWorldGeometryRenderQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     showBoundingBoxes()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::showBoundingBoxes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1showBoundingBoxes_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bShow
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShowBoundingBoxes()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShowBoundingBoxes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShowBoundingBoxes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _notifyAutotrackingSceneNode()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_notifyAutotrackingSceneNode
 * Signature:  (Ogre_SceneNodeZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1notifyAutotrackingSceneNode_1_1SceneNodepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong node, 
  jboolean autoTrack
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createAABBQuery()
 * Type:       virtual method
 * Definition: virtual AxisAlignedBoxSceneQuery* Ogre::SceneManager::createAABBQuery
 * Signature:  (Ogre_AxisAlignedBoxJ)Ogre_AxisAlignedBoxSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createAABBQuery_1_1AxisAlignedBoxRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box, 
  jlong mask
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createSphereQuery()
 * Type:       virtual method
 * Definition: virtual SphereSceneQuery* Ogre::SceneManager::createSphereQuery
 * Signature:  (Ogre_SphereJ)Ogre_SphereSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createSphereQuery_1_1SphereRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sphere, 
  jlong mask
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createPlaneBoundedVolumeQuery()
 * Type:       virtual method
 * Definition: virtual PlaneBoundedVolumeListSceneQuery* Ogre::SceneManager::createPlaneBoundedVolumeQuery
 * Signature:  (Ogre_PlaneBoundedVolumeListJ)Ogre_PlaneBoundedVolumeListSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createPlaneBoundedVolumeQuery_1_1PlaneBoundedVolumeListRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong volumes, 
  jlong mask
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createRayQuery()
 * Type:       virtual method
 * Definition: virtual RaySceneQuery* Ogre::SceneManager::createRayQuery
 * Signature:  (Ogre_RayJ)Ogre_RaySceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createRayQuery_1_1RayRLv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ray, 
  jlong mask
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createIntersectionQuery()
 * Type:       virtual method
 * Definition: virtual IntersectionSceneQuery* Ogre::SceneManager::createIntersectionQuery
 * Signature:  (J)Ogre_IntersectionSceneQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createIntersectionQuery_1_1Lv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mask
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyQuery()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyQuery
 * Signature:  (Ogre_SceneQuery)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyQuery_1_1SceneQueryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong query
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCameraIterator()
 * Type:       non-virtual method
 * Definition: CameraIterator Ogre::SceneManager::getCameraIterator
 * Signature:  ()Ogre_SceneManager_CameraIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getCameraIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimationIterator()
 * Type:       non-virtual method
 * Definition: AnimationIterator Ogre::SceneManager::getAnimationIterator
 * Signature:  ()Ogre_SceneManager_AnimationIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimationIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getAnimationStateIterator()
 * Type:       non-virtual method
 * Definition: AnimationStateIterator Ogre::SceneManager::getAnimationStateIterator
 * Signature:  ()Ogre_AnimationStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getAnimationStateIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTechnique()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTechnique
 * Signature:  (Ogre_ShadowTechnique)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTechnique_1_1ShadowTechniquev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint technique
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTechnique()
 * Type:       virtual method
 * Definition: virtual ShadowTechnique Ogre::SceneManager::getShadowTechnique
 * Signature:  ()Ogre_ShadowTechnique
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShowDebugShadows()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShowDebugShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShowDebugShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean debug
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShowDebugShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShowDebugShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShowDebugShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowColour()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowColour()
 * Type:       virtual method
 * Definition: virtual const ColourValue& Ogre::SceneManager::getShadowColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowDirectionalLightExtrusionDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowDirectionalLightExtrusionDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowDirectionalLightExtrusionDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat dist
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowDirectionalLightExtrusionDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowDirectionalLightExtrusionDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowDirectionalLightExtrusionDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowFarDistance()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowFarDistance
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowFarDistance_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat distance
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowFarDistance()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowFarDistance
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowFarDistance_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowFarDistanceSquared()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowFarDistanceSquared
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowFarDistanceSquared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowIndexBufferSize()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowIndexBufferSize
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowIndexBufferSize_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint size
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowIndexBufferSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::SceneManager::getShadowIndexBufferSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowIndexBufferSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureSize()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureSize
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureSize_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint size
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureConfig()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureConfig
 * Signature:  (ISSOgre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureConfig_1_1ivHvHvPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowIndex, 
  jint width, 
  jint height, 
  jint format
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureConfig()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureConfig
 * Signature:  (IOgre_ShadowTextureConfig)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureConfig_1_1ivShadowTextureConfigR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowIndex, 
  jlong config
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureConfigIterator()
 * Type:       non-virtual method
 * Definition: ConstShadowTextureConfigIterator Ogre::SceneManager::getShadowTextureConfigIterator
 * Signature:  ()Ogre_ConstShadowTextureConfigIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureConfigIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTexturePixelFormat()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTexturePixelFormat
 * Signature:  (Ogre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTexturePixelFormat_1_1PixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint fmt
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureCount_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::SceneManager::getShadowTextureCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureCountPerLightType()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManager::setShadowTextureCountPerLightType
 * Signature:  (Ogre_Light_LightTypesI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureCountPerLightType_1_1Light_1LightTypesviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint type, 
  jint count
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureCountPerLightType()
 * Type:       non-virtual method
 * Definition: size_t Ogre::SceneManager::getShadowTextureCountPerLightType
 * Signature:  (Ogre_Light_LightTypes)I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureCountPerLightType_1_1Light_1LightTypesv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint type
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureSettings()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureSettings
 * Signature:  (SSOgre_PixelFormat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureSettings_1_1HvHvPixelFormatv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint size, 
  jint count, 
  jint fmt
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTexture()
 * Type:       virtual method
 * Definition: virtual const TexturePtr& Ogre::SceneManager::getShadowTexture
 * Signature:  (I)Ogre_TexturePtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowTexture_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint shadowIndex
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowDirLightTextureOffset()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowDirLightTextureOffset
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowDirLightTextureOffset_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat offset
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowDirLightTextureOffset()
 * Type:       virtual method
 * Definition: virtual Real Ogre::SceneManager::getShadowDirLightTextureOffset
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_SceneManager__1getShadowDirLightTextureOffset_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureFadeStart()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureFadeStart
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureFadeStart_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fadeStart
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureFadeEnd()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureFadeEnd
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureFadeEnd_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fadeEnd
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureSelfShadow()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureSelfShadow
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureSelfShadow_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean selfShadow
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowTextureSelfShadow()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShadowTextureSelfShadow
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShadowTextureSelfShadow_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureCasterMaterial()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureCasterMaterial
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureCasterMaterial_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowTextureReceiverMaterial()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowTextureReceiverMaterial
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowTextureReceiverMaterial_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowCasterRenderBackFaces()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowCasterRenderBackFaces
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowCasterRenderBackFaces_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bf
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowCasterRenderBackFaces()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShadowCasterRenderBackFaces
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShadowCasterRenderBackFaces_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowCameraSetup()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowCameraSetup
 * Signature:  (Ogre_ShadowCameraSetupPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowCameraSetup_1_1ShadowCameraSetupPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong shadowSetup
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowCameraSetup()
 * Type:       virtual method
 * Definition: virtual const ShadowCameraSetupPtr& Ogre::SceneManager::getShadowCameraSetup
 * Signature:  ()Ogre_ShadowCameraSetupPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowCameraSetup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowUseInfiniteFarPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowUseInfiniteFarPlane
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowUseInfiniteFarPlane_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enable
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueStencilBased()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueStencilBased
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueStencilBased_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueTextureBased()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueTextureBased
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueTextureBased_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueModulative()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueModulative
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueModulative_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueAdditive()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueAdditive
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueAdditive_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueIntegrated()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueIntegrated
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueIntegrated_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     isShadowTechniqueInUse()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::isShadowTechniqueInUse
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1isShadowTechniqueInUse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setShadowUseLightClipPlanes()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setShadowUseLightClipPlanes
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setShadowUseLightClipPlanes_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowUseLightClipPlanes()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getShadowUseLightClipPlanes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getShadowUseLightClipPlanes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::addListener
 * Signature:  (Ogre_SceneManager_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::removeListener
 * Signature:  (Ogre_SceneManager_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createStaticGeometry()
 * Type:       virtual method
 * Definition: virtual StaticGeometry* Ogre::SceneManager::createStaticGeometry
 * Signature:  (std_string)Ogre_StaticGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createStaticGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getStaticGeometry()
 * Type:       virtual method
 * Definition: virtual StaticGeometry* Ogre::SceneManager::getStaticGeometry
 * Signature:  (std_string)Ogre_StaticGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getStaticGeometry_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasStaticGeometry()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasStaticGeometry
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasStaticGeometry_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyStaticGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyStaticGeometry
 * Signature:  (Ogre_StaticGeometry)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyStaticGeometry_1_1StaticGeometryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong geom
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyStaticGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyStaticGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyStaticGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllStaticGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllStaticGeometry
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllStaticGeometry (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual InstancedGeometry* Ogre::SceneManager::createInstancedGeometry
 * Signature:  (std_string)Ogre_InstancedGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createInstancedGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual InstancedGeometry* Ogre::SceneManager::getInstancedGeometry
 * Signature:  (std_string)Ogre_InstancedGeometry
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getInstancedGeometry_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyInstancedGeometry
 * Signature:  (Ogre_InstancedGeometry)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyInstancedGeometry_1_1InstancedGeometryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong geom
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyInstancedGeometry
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyInstancedGeometry_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllInstancedGeometry()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllInstancedGeometry
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllInstancedGeometry (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     createMovableObject()
 * Type:       virtual method
 * Definition: virtual MovableObject* Ogre::SceneManager::createMovableObject
 * Signature:  (std_stringstd_stringOgre_NameValuePairList)Ogre_MovableObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1createMovableObject_1_1StringRStringRNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName, 
  jlong params
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyMovableObject
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyMovableObject_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyMovableObject
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyMovableObject_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllMovableObjectsByType()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllMovableObjectsByType
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllMovableObjectsByType_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     destroyAllMovableObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::destroyAllMovableObjects
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1destroyAllMovableObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getMovableObject()
 * Type:       virtual method
 * Definition: virtual MovableObject* Ogre::SceneManager::getMovableObject
 * Signature:  (std_stringstd_string)Ogre_MovableObject
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getMovableObject_1_1StringRStringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     hasMovableObject()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::hasMovableObject
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1hasMovableObject_1_1StringRStringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getMovableObjectIterator()
 * Type:       virtual method
 * Definition: virtual MovableObjectIterator Ogre::SceneManager::getMovableObjectIterator
 * Signature:  (std_string)Ogre_SceneManager_MovableObjectIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getMovableObjectIterator_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     injectMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::injectMovableObject
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1injectMovableObject_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     extractMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::extractMovableObject
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1extractMovableObject_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     extractMovableObject()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::extractMovableObject
 * Signature:  (Ogre_MovableObject)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1extractMovableObject_1_1MovableObjectp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     extractAllMovableObjectsByType()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::extractAllMovableObjectsByType
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1extractAllMovableObjectsByType_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setVisibilityMask()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setVisibilityMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setVisibilityMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vmask
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getVisibilityMask()
 * Type:       virtual method
 * Definition: virtual uint32 Ogre::SceneManager::getVisibilityMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getVisibilityMask (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _getCombinedVisibilityMask()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::SceneManager::_getCombinedVisibilityMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1getCombinedVisibilityMask_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFindVisibleObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setFindVisibleObjects
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFindVisibleObjects_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean find
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFindVisibleObjects()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getFindVisibleObjects
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getFindVisibleObjects (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setNormaliseNormalsOnScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setNormaliseNormalsOnScale
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setNormaliseNormalsOnScale_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean n
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getNormaliseNormalsOnScale()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getNormaliseNormalsOnScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getNormaliseNormalsOnScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFlipCullingOnNegativeScale()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setFlipCullingOnNegativeScale
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFlipCullingOnNegativeScale_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean n
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFlipCullingOnNegativeScale()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getFlipCullingOnNegativeScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getFlipCullingOnNegativeScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _injectRenderWithPass()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_injectRenderWithPass
 * Signature:  (Ogre_PassOgre_RenderableZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1injectRenderWithPass_1_1PasspRenderablepbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass, 
  jlong rend, 
  jboolean shadowDerivation
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _suppressRenderStateChanges()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_suppressRenderStateChanges
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1suppressRenderStateChanges_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean suppress
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _areRenderStateChangesSuppressed()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::_areRenderStateChangesSuppressed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1_1areRenderStateChangesSuppressed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _setPass()
 * Type:       virtual method
 * Definition: virtual const Pass* Ogre::SceneManager::_setPass
 * Signature:  (Ogre_PassZZ)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1_1setPass_1_1PassPbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pass, 
  jboolean evenIfSuppressed, 
  jboolean shadowDerivation
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _suppressShadows()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_suppressShadows
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1suppressShadows_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean suppress
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _areShadowsSuppressed()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::_areShadowsSuppressed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1_1areShadowsSuppressed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     _renderQueueGroupObjects()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::_renderQueueGroupObjects
 * Signature:  (Ogre_RenderQueueGroupOgre_QueuedRenderableCollection_OrganisationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1renderQueueGroupObjects_1_1RenderQueueGrouppQueuedRenderableCollection_1OrganisationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong group, 
  jint om
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setQueuedRenderableVisitor()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManager::setQueuedRenderableVisitor
 * Signature:  (Ogre_SceneManager_SceneMgrQueuedRenderableVisitor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setQueuedRenderableVisitor_1_1SceneMgrQueuedRenderableVisitorp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getQueuedRenderableVisitor()
 * Type:       non-virtual method
 * Definition: SceneMgrQueuedRenderableVisitor* Ogre::SceneManager::getQueuedRenderableVisitor
 * Signature:  ()Ogre_SceneManager_SceneMgrQueuedRenderableVisitor
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getQueuedRenderableVisitor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getDestinationRenderSystem()
 * Type:       non-virtual method
 * Definition: RenderSystem* Ogre::SceneManager::getDestinationRenderSystem
 * Signature:  ()Ogre_RenderSystem
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getDestinationRenderSystem (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCurrentViewport()
 * Type:       non-virtual method
 * Definition: Viewport* Ogre::SceneManager::getCurrentViewport
 * Signature:  ()Ogre_Viewport
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getCurrentViewport_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getVisibleObjectsBoundsInfo()
 * Type:       non-virtual method
 * Definition: const VisibleObjectsBoundsInfo& Ogre::SceneManager::getVisibleObjectsBoundsInfo
 * Signature:  (Ogre_Camera)Ogre_VisibleObjectsBoundsInfo
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getVisibleObjectsBoundsInfo_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getShadowCasterBoundsInfo()
 * Type:       non-virtual method
 * Definition: const VisibleObjectsBoundsInfo& Ogre::SceneManager::getShadowCasterBoundsInfo
 * Signature:  (Ogre_LightI)Ogre_VisibleObjectsBoundsInfo
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getShadowCasterBoundsInfo_1_1LightPiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong light, 
  jint iteration
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setCameraRelativeRendering()
 * Type:       virtual method
 * Definition: virtual void Ogre::SceneManager::setCameraRelativeRendering
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setCameraRelativeRendering_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean rel
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getCameraRelativeRendering()
 * Type:       virtual method
 * Definition: virtual bool Ogre::SceneManager::getCameraRelativeRendering
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_SceneManager__1getCameraRelativeRendering_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SceneManager::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getWORLD_GEOMETRY_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getWORLD_1GEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setWORLD_GEOMETRY_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setWORLD_1GEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getENTITY_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::ENTITY_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getENTITY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setENTITY_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::ENTITY_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setENTITY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFX_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::FX_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getFX_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFX_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::FX_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFX_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getSTATICGEOMETRY_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getSTATICGEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setSTATICGEOMETRY_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setSTATICGEOMETRY_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getLIGHT_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::LIGHT_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getLIGHT_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setLIGHT_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::LIGHT_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setLIGHT_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getFRUSTUM_TYPE_MASK()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::FRUSTUM_TYPE_MASK
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getFRUSTUM_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setFRUSTUM_TYPE_MASK()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::FRUSTUM_TYPE_MASK
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setFRUSTUM_1TYPE_1MASK (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     getUSER_TYPE_MASK_LIMIT()
 * Type:       getter for public attribute
 * Definition: uint32 Ogre::SceneManager::USER_TYPE_MASK_LIMIT
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManager__1getUSER_1TYPE_1MASK_1LIMIT (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManager
 * Method:     setUSER_TYPE_MASK_LIMIT()
 * Type:       setter for public attribute
 * Definition: uint32 Ogre::SceneManager::USER_TYPE_MASK_LIMIT
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManager__1setUSER_1TYPE_1MASK_1LIMIT (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong _jni_value_
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_SceneManager__*/
