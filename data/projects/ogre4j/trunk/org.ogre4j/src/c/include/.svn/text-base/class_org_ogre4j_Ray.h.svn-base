///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Ray__
#define __Included_org_ogre4j_Ray__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Ray
 * Method:     Ray()
 * Type:       constructor
 * Definition: Ogre::Ray::Ray
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1_1createRay (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     Ray()
 * Type:       constructor
 * Definition: Ogre::Ray::Ray
 * Signature:  (Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1_1createRay_1_1Vector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong origin, 
  jlong direction
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     setOrigin()
 * Type:       non-virtual method
 * Definition: void Ogre::Ray::setOrigin
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Ray__1setOrigin_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong origin
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     getOrigin()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Ray::getOrigin
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     setDirection()
 * Type:       non-virtual method
 * Definition: void Ogre::Ray::setDirection
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Ray__1setDirection_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dir
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     getDirection()
 * Type:       non-virtual method
 * Definition: const Vector3& Ogre::Ray::getDirection
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1getDirection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     getPoint()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Ray::getPoint
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1getPoint_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat t
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Ray::operator *
 * Signature:  (float)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat t
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: std::pair<bool, Real> Ogre::Ray::intersects
 * Signature:  (Ogre_Plane)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1intersects_1_1PlaneR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: std::pair<bool, Real> Ogre::Ray::intersects
 * Signature:  (Ogre_PlaneBoundedVolume)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1intersects_1_1PlaneBoundedVolumeR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: std::pair<bool, Real> Ogre::Ray::intersects
 * Signature:  (Ogre_Sphere)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1intersects_1_1SphereR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong s
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     intersects()
 * Type:       non-virtual method
 * Definition: std::pair<bool, Real> Ogre::Ray::intersects
 * Signature:  (Ogre_AxisAlignedBox)std_pair__bool__Real__
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Ray__1intersects_1_1AxisAlignedBoxR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong box
);

/*
 * Class:      org.ogre4j.Ray
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Ray::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Ray__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Ray__*/
