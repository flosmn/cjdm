///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Matrix3__
#define __Included_org_ogre4j_Matrix3__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Matrix3()
 * Type:       constructor
 * Definition: Ogre::Matrix3::Matrix3
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3 (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Matrix3()
 * Type:       constructor
 * Definition: Ogre::Matrix3::Matrix3
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat arr
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Matrix3()
 * Type:       constructor
 * Definition: Ogre::Matrix3::Matrix3
 * Signature:  (Ogre_Matrix3)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkMatrix
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Matrix3()
 * Type:       constructor
 * Definition: Ogre::Matrix3::Matrix3
 * Signature:  (floatfloatfloatfloatfloatfloatfloatfloatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1_1createMatrix3_1_1RealvRealvRealvRealvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fEntry00, 
  jfloat fEntry01, 
  jfloat fEntry02, 
  jfloat fEntry10, 
  jfloat fEntry11, 
  jfloat fEntry12, 
  jfloat fEntry20, 
  jfloat fEntry21, 
  jfloat fEntry22
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Matrix3::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorIndex_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iRow
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     GetColumn()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Matrix3::GetColumn
 * Signature:  (I)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1GetColumn_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iCol
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SetColumn()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::SetColumn
 * Signature:  (IOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1SetColumn_1_1ivVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint iCol, 
  jlong vec
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromAxes()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromAxes
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromAxes_1_1Vector3RVector3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xAxis, 
  jlong yAxis, 
  jlong zAxis
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Matrix3& Ogre::Matrix3::operator=
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorAssignment_1_1Matrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::operator==
 * Signature:  (Ogre_Matrix3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1operatorEqual_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::operator!=
 * Signature:  (Ogre_Matrix3)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1operatorNotEqual_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator+
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorAddition_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator-
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorSubtraction_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator *
 * Signature:  (Ogre_Matrix3)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorMultiplication_1_1Matrix3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkMatrix
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator-
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector3 Ogre::Matrix3::operator *
 * Signature:  (Ogre_Vector3)Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorMultiplication_1_1Vector3R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::operator *
 * Signature:  (float)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1operatorMultiplication_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Transpose()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::Transpose
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1Transpose_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Inverse()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::Inverse
 * Signature:  (Ogre_Matrix3float)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1Inverse_1_1Matrix3rRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkInverse, 
  jfloat fTolerance
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Inverse()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::Matrix3::Inverse
 * Signature:  (float)Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1Inverse_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fTolerance
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Determinant()
 * Type:       non-virtual method
 * Definition: Real Ogre::Matrix3::Determinant
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Matrix3__1Determinant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SingularValueDecomposition()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::SingularValueDecomposition
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1SingularValueDecomposition_1_1Matrix3rVector3rMatrix3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkL, 
  jlong rkS, 
  jlong rkR
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SingularValueComposition()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::SingularValueComposition
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1SingularValueComposition_1_1Matrix3RVector3RMatrix3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkL, 
  jlong rkS, 
  jlong rkR
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     Orthonormalize()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::Orthonormalize
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1Orthonormalize (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     QDUDecomposition()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::QDUDecomposition
 * Signature:  (Ogre_Matrix3Ogre_Vector3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1QDUDecomposition_1_1Matrix3rVector3rVector3r_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkQ, 
  jlong rkD, 
  jlong rkU
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     SpectralNorm()
 * Type:       non-virtual method
 * Definition: Real Ogre::Matrix3::SpectralNorm
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Matrix3__1SpectralNorm_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToAxisAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::ToAxisAngle
 * Signature:  (Ogre_Vector3Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1ToAxisAngle_1_1Vector3rRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkAxis, 
  jlong rfAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToAxisAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::ToAxisAngle
 * Signature:  (Ogre_Vector3Ogre_Degree)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1ToAxisAngle_1_1Vector3rDegreer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkAxis, 
  jlong rfAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromAxisAngle()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromAxisAngle
 * Signature:  (Ogre_Vector3Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromAxisAngle_1_1Vector3RRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkAxis, 
  jlong fRadians
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesXYZ()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesXYZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesXYZ_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesXZY()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesXZY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesXZY_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesYXZ()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesYXZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesYXZ_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesYZX()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesYZX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesYZX_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesZXY()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesZXY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesZXY_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     ToEulerAnglesZYX()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::ToEulerAnglesZYX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1ToEulerAnglesZYX_1_1RadianrRadianrRadianr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rfYAngle, 
  jlong rfPAngle, 
  jlong rfRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesXYZ()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesXYZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesXYZ_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesXZY()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesXZY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesXZY_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesYXZ()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesYXZ
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesYXZ_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesYZX()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesYZX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesYZX_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesZXY()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesZXY
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesZXY_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     FromEulerAnglesZYX()
 * Type:       non-virtual method
 * Definition: void Ogre::Matrix3::FromEulerAnglesZYX
 * Signature:  (Ogre_RadianOgre_RadianOgre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1FromEulerAnglesZYX_1_1RadianRRadianRRadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fYAngle, 
  jlong fPAngle, 
  jlong fRAngle
);;

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     hasScale()
 * Type:       non-virtual method
 * Definition: bool Ogre::Matrix3::hasScale
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Matrix3__1hasScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     TensorProduct()
 * Type:       static method
 * Definition: static void Ogre::Matrix3::TensorProduct
 * Signature:  (Ogre_Vector3Ogre_Vector3Ogre_Matrix3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1TensorProduct_1_1Vector3RVector3RMatrix3r (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong rkU, 
  jlong rkV, 
  jlong rkProduct
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Matrix3::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Matrix3__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     getEPSILON()
 * Type:       getter for public attribute
 * Definition: const Real Ogre::Matrix3::EPSILON
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Matrix3__1getEPSILON (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Matrix3 Ogre::Matrix3::ZERO
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Matrix3
 * Method:     getIDENTITY()
 * Type:       getter for public attribute
 * Definition: const Matrix3 Ogre::Matrix3::IDENTITY
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Matrix3__1getIDENTITY (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Matrix3__*/
