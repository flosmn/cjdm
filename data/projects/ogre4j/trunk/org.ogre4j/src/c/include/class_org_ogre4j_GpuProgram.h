///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_GpuProgram__
#define __Included_org_ogre4j_GpuProgram__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setSourceFile()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSourceFile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setSourceFile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring filename
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setSource()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSource
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setSource_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring source
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getSyntaxCode()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getSyntaxCode
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getSyntaxCode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setSyntaxCode()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSyntaxCode
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setSyntaxCode_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring syntax
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getSourceFile()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getSourceFile
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getSourceFile_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getSource()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getSource
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getSource_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setType()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setType
 * Signature:  (Ogre_GpuProgramType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setType_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint t
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getType()
 * Type:       virtual method
 * Definition: virtual GpuProgramType Ogre::GpuProgram::getType
 * Signature:  ()Ogre_GpuProgramType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuProgram__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     _getBindingDelegate()
 * Type:       virtual method
 * Definition: virtual GpuProgram* Ogre::GpuProgram::_getBindingDelegate
 * Signature:  ()Ogre_GpuProgram
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1_1getBindingDelegate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isSupported()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::isSupported
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isSupported_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     createParameters()
 * Type:       virtual method
 * Definition: virtual GpuProgramParametersSharedPtr Ogre::GpuProgram::createParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1createParameters (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setSkeletalAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSkeletalAnimationIncluded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setSkeletalAnimationIncluded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean included
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isSkeletalAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::isSkeletalAnimationIncluded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isSkeletalAnimationIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setMorphAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setMorphAnimationIncluded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setMorphAnimationIncluded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean included
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setPoseAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setPoseAnimationIncluded
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setPoseAnimationIncluded_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint poseCount
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isMorphAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::isMorphAnimationIncluded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isMorphAnimationIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isPoseAnimationIncluded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::isPoseAnimationIncluded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isPoseAnimationIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getNumberOfPosesIncluded()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::GpuProgram::getNumberOfPosesIncluded
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuProgram__1getNumberOfPosesIncluded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setVertexTextureFetchRequired()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setVertexTextureFetchRequired
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setVertexTextureFetchRequired_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean r
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isVertexTextureFetchRequired()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::isVertexTextureFetchRequired
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isVertexTextureFetchRequired_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setAdjacencyInfoRequired()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setAdjacencyInfoRequired
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setAdjacencyInfoRequired_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean r
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isAdjacencyInfoRequired()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::isAdjacencyInfoRequired
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isAdjacencyInfoRequired_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getDefaultParameters()
 * Type:       virtual method
 * Definition: virtual GpuProgramParametersSharedPtr Ogre::GpuProgram::getDefaultParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getDefaultParameters (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     hasDefaultParameters()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::hasDefaultParameters
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1hasDefaultParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setSurfaceAndPassLightStates()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setSurfaceAndPassLightStates
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setSurfaceAndPassLightStates_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean state
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getPassSurfaceAndLightStates()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::getPassSurfaceAndLightStates
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1getPassSurfaceAndLightStates_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getLanguage()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getLanguage
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getLanguage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     hasCompileError()
 * Type:       virtual method
 * Definition: virtual bool Ogre::GpuProgram::hasCompileError
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1hasCompileError_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     resetCompileError()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::resetCompileError
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1resetCompileError (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setManualNamedConstants()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setManualNamedConstants
 * Signature:  (Ogre_GpuNamedConstants)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setManualNamedConstants_1_1GpuNamedConstantsR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong namedConstants
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getNamedConstants()
 * Type:       virtual method
 * Definition: virtual const GpuNamedConstants& Ogre::GpuProgram::getNamedConstants
 * Signature:  ()Ogre_GpuNamedConstants
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getNamedConstants_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setManualNamedConstantsFile()
 * Type:       virtual method
 * Definition: virtual void Ogre::GpuProgram::setManualNamedConstantsFile
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setManualNamedConstantsFile_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring paramDefFile
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getManualNamedConstantsFile()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::GpuProgram::getManualNamedConstantsFile
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getManualNamedConstantsFile_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getConstantDefinitions()
 * Type:       virtual method
 * Definition: virtual const GpuNamedConstants& Ogre::GpuProgram::getConstantDefinitions
 * Signature:  ()Ogre_GpuNamedConstants
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getConstantDefinitions_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     reload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuProgram__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     touch()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: virtual LoadingState Ogre::Resource::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuProgram__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_GpuProgram__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_GpuProgram__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_GpuProgram__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_GpuProgram__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.GpuProgram
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::GpuProgram::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_GpuProgram__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_GpuProgram__*/
