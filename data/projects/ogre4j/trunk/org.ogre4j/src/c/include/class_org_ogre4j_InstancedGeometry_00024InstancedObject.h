///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_InstancedGeometry_00024InstancedObject__
#define __Included_org_ogre4j_InstancedGeometry_00024InstancedObject__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     InstancedObject()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::InstancedObject::InstancedObject
 * Signature:  (I)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1_1createInstancedObject_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint index
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     InstancedObject()
 * Type:       constructor
 * Definition: Ogre::InstancedGeometry::InstancedObject::InstancedObject
 * Signature:  (IOgre_SkeletonInstanceOgre_AnimationStateSet)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1_1createInstancedObject_1_1ivSkeletonInstancepAnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint index, 
  jlong skeleton, 
  jlong animations
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setPosition
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setPosition_1_1Vector3v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong position
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getPosition()
 * Type:       non-virtual method
 * Definition: Vector3& Ogre::InstancedGeometry::InstancedObject::getPosition
 * Signature:  ()Ogre_Vector3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getPosition (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     yaw()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::yaw
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1yaw_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     pitch()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::pitch
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1pitch_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     roll()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::roll
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1roll_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     rotate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::rotate
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1rotate_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setScale()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setScale
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setScale_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong scale
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setOrientation()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setOrientation
 * Signature:  (Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setOrientation_1_1QuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong q
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     setPositionAndOrientation()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::setPositionAndOrientation
 * Signature:  (Ogre_Vector3Ogre_Quaternion)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1setPositionAndOrientation_1_1Vector3vQuaternionR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p, 
  jlong q
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getOrientation()
 * Type:       non-virtual method
 * Definition: Quaternion& Ogre::InstancedGeometry::InstancedObject::getOrientation
 * Signature:  ()Ogre_Quaternion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getOrientation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     addBucketToList()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::addBucketToList
 * Signature:  (Ogre_InstancedGeometry_GeometryBucket)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1addBucketToList_1_1GeometryBucketp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bucket
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     needUpdate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::needUpdate
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1needUpdate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getGeometryBucketList()
 * Type:       non-virtual method
 * Definition: GeometryBucketList& Ogre::InstancedGeometry::InstancedObject::getGeometryBucketList
 * Signature:  ()Ogre_InstancedGeometry_InstancedObject_GeometryBucketList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getGeometryBucketList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     translate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::translate
 * Signature:  (Ogre_Matrix3Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1translate_1_1Matrix3RVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong axes, 
  jlong move
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     translate()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::translate
 * Signature:  (Ogre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1translate_1_1Vector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong d
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getLocalAxes()
 * Type:       non-virtual method
 * Definition: Matrix3 Ogre::InstancedGeometry::InstancedObject::getLocalAxes
 * Signature:  ()Ogre_Matrix3
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getLocalAxes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     updateAnimation()
 * Type:       non-virtual method
 * Definition: void Ogre::InstancedGeometry::InstancedObject::updateAnimation
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1updateAnimation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getAnimationState()
 * Type:       non-virtual method
 * Definition: AnimationState* Ogre::InstancedGeometry::InstancedObject::getAnimationState
 * Signature:  (std_string)Ogre_AnimationState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getAnimationState_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     getSkeletonInstance()
 * Type:       non-virtual method
 * Definition: SkeletonInstance* Ogre::InstancedGeometry::InstancedObject::getSkeletonInstance
 * Signature:  ()Ogre_SkeletonInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1getSkeletonInstance (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.InstancedGeometry.00024InstancedObject
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::InstancedGeometry::InstancedObject::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_InstancedGeometry_00024InstancedObject__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_InstancedGeometry_00024InstancedObject__*/
