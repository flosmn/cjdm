///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_PSSMShadowCameraSetup__
#define __Included_org_ogre4j_PSSMShadowCameraSetup__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     PSSMShadowCameraSetup()
 * Type:       constructor
 * Definition: Ogre::PSSMShadowCameraSetup::PSSMShadowCameraSetup
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1_1createPSSMShadowCameraSetup (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     calculateSplitPoints()
 * Type:       non-virtual method
 * Definition: void Ogre::PSSMShadowCameraSetup::calculateSplitPoints
 * Signature:  (Ifloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1calculateSplitPoints_1_1ivRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint splitCount, 
  jfloat nearDist, 
  jfloat farDist, 
  jfloat lambda
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     setSplitPoints()
 * Type:       non-virtual method
 * Definition: void Ogre::PSSMShadowCameraSetup::setSplitPoints
 * Signature:  (Ogre_PSSMShadowCameraSetup_SplitPointList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1setSplitPoints_1_1SplitPointListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong newSplitPoints
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     setOptimalAdjustFactor()
 * Type:       non-virtual method
 * Definition: void Ogre::PSSMShadowCameraSetup::setOptimalAdjustFactor
 * Signature:  (Ifloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1setOptimalAdjustFactor_1_1ivRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint splitIndex, 
  jfloat factor
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     setSplitPadding()
 * Type:       non-virtual method
 * Definition: void Ogre::PSSMShadowCameraSetup::setSplitPadding
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1setSplitPadding_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat pad
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getSplitPadding()
 * Type:       non-virtual method
 * Definition: Real Ogre::PSSMShadowCameraSetup::getSplitPadding
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getSplitPadding_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getSplitCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::PSSMShadowCameraSetup::getSplitCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getSplitCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getShadowCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::PSSMShadowCameraSetup::getShadowCamera
 * Signature:  (Ogre_SceneManagerOgre_CameraOgre_ViewportOgre_LightOgre_CameraI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getShadowCamera_1_1Ogre_1SceneManagerPOgre_1CameraPOgre_1ViewportPOgre_1LightPOgre_1Camerapiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong cam, 
  jlong vp, 
  jlong light, 
  jlong texCam, 
  jint iteration
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getSplitPoints()
 * Type:       non-virtual method
 * Definition: const SplitPointList& Ogre::PSSMShadowCameraSetup::getSplitPoints
 * Signature:  ()Ogre_PSSMShadowCameraSetup_SplitPointList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getSplitPoints_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getOptimalAdjustFactor()
 * Type:       non-virtual method
 * Definition: Real Ogre::PSSMShadowCameraSetup::getOptimalAdjustFactor
 * Signature:  (I)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getOptimalAdjustFactor_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint splitIndex
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getOptimalAdjustFactor()
 * Type:       virtual method
 * Definition: Real Ogre::PSSMShadowCameraSetup::getOptimalAdjustFactor
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getOptimalAdjustFactor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getShadowCamera()
 * Type:       virtual method
 * Definition: virtual void Ogre::LiSPSMShadowCameraSetup::getShadowCamera
 * Signature:  (Ogre_SceneManagerOgre_CameraOgre_ViewportOgre_LightOgre_CameraI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getShadowCamera_1_1SceneManagerPCameraPViewportPLightPCamerapiv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong cam, 
  jlong vp, 
  jlong light, 
  jlong texCam, 
  jint iteration
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     setOptimalAdjustFactor()
 * Type:       virtual method
 * Definition: virtual void Ogre::LiSPSMShadowCameraSetup::setOptimalAdjustFactor
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1setOptimalAdjustFactor_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat n
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     setUseSimpleOptimalAdjust()
 * Type:       virtual method
 * Definition: virtual void Ogre::LiSPSMShadowCameraSetup::setUseSimpleOptimalAdjust
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1setUseSimpleOptimalAdjust_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean s
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getUseSimpleOptimalAdjust()
 * Type:       virtual method
 * Definition: virtual bool Ogre::LiSPSMShadowCameraSetup::getUseSimpleOptimalAdjust
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getUseSimpleOptimalAdjust_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     setUseAggressiveFocusRegion()
 * Type:       non-virtual method
 * Definition: void Ogre::FocusedShadowCameraSetup::setUseAggressiveFocusRegion
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1setUseAggressiveFocusRegion_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean aggressive
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     getUseAggressiveFocusRegion()
 * Type:       non-virtual method
 * Definition: bool Ogre::FocusedShadowCameraSetup::getUseAggressiveFocusRegion
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1getUseAggressiveFocusRegion_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.PSSMShadowCameraSetup
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::PSSMShadowCameraSetup::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_PSSMShadowCameraSetup__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_PSSMShadowCameraSetup__*/
