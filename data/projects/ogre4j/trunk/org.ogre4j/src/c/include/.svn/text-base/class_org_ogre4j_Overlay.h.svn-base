///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Overlay__
#define __Included_org_ogre4j_Overlay__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Overlay
 * Method:     Overlay()
 * Type:       constructor
 * Definition: Ogre::Overlay::Overlay
 * Signature:  (std_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Overlay__1_1createOverlay_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getChild()
 * Type:       non-virtual method
 * Definition: OverlayContainer* Ogre::Overlay::getChild
 * Signature:  (std_string)Ogre_OverlayContainer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Overlay__1getChild_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Overlay::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Overlay__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     setZOrder()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::setZOrder
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1setZOrder_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint zorder
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getZOrder()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Overlay::getZOrder
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Overlay__1getZOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     isVisible()
 * Type:       non-virtual method
 * Definition: bool Ogre::Overlay::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Overlay__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     isInitialised()
 * Type:       non-virtual method
 * Definition: bool Ogre::Overlay::isInitialised
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Overlay__1isInitialised_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     show()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::show
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1show (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     hide()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::hide
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1hide (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     add2D()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::add2D
 * Signature:  (Ogre_OverlayContainer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1add2D_1_1OverlayContainerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cont
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     remove2D()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::remove2D
 * Signature:  (Ogre_OverlayContainer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1remove2D_1_1OverlayContainerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cont
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     add3D()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::add3D
 * Signature:  (Ogre_SceneNode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1add3D_1_1SceneNodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong node
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     remove3D()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::remove3D
 * Signature:  (Ogre_SceneNode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1remove3D_1_1SceneNodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong node
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     clear()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::clear
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1clear (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     setScroll()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::setScroll
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1setScroll_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getScrollX()
 * Type:       non-virtual method
 * Definition: Real Ogre::Overlay::getScrollX
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Overlay__1getScrollX_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getScrollY()
 * Type:       non-virtual method
 * Definition: Real Ogre::Overlay::getScrollY
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Overlay__1getScrollY_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     scroll()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::scroll
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1scroll_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat xoff, 
  jfloat yoff
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     setRotate()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::setRotate
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1setRotate_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getRotate()
 * Type:       non-virtual method
 * Definition: const Radian& Ogre::Overlay::getRotate
 * Signature:  ()Ogre_Radian
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Overlay__1getRotate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     rotate()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::rotate
 * Signature:  (Ogre_Radian)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1rotate_1_1RadianR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong angle
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     setScale()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::setScale
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1setScale_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getScaleX()
 * Type:       non-virtual method
 * Definition: Real Ogre::Overlay::getScaleX
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Overlay__1getScaleX_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getScaleY()
 * Type:       non-virtual method
 * Definition: Real Ogre::Overlay::getScaleY
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Overlay__1getScaleY_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     _getWorldTransforms()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::_getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1_1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     _findVisibleObjects()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::_findVisibleObjects
 * Signature:  (Ogre_CameraOgre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1_1findVisibleObjects_1_1CamerapRenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam, 
  jlong queue
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     findElementAt()
 * Type:       virtual method
 * Definition: virtual OverlayElement* Ogre::Overlay::findElementAt
 * Signature:  (floatfloat)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Overlay__1findElementAt_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     get2DElementsIterator()
 * Type:       non-virtual method
 * Definition: Overlay2DElementsIterator Ogre::Overlay::get2DElementsIterator
 * Signature:  ()Ogre_Overlay_Overlay2DElementsIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Overlay__1get2DElementsIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     getOrigin()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Overlay::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Overlay__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     _notifyOrigin()
 * Type:       non-virtual method
 * Definition: void Ogre::Overlay::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
);

/*
 * Class:      org.ogre4j.Overlay
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Overlay::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Overlay__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Overlay__*/
