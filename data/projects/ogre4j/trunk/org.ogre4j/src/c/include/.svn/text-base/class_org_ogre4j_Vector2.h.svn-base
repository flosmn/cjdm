///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Vector2__
#define __Included_org_ogre4j_Vector2__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Vector2
 * Method:     Vector2()
 * Type:       constructor
 * Definition: Ogre::Vector2::Vector2
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1_1createVector2 (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     Vector2()
 * Type:       constructor
 * Definition: Ogre::Vector2::Vector2
 * Signature:  (floatfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1_1createVector2_1_1RealVRealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat fX, 
  jfloat fY
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     Vector2()
 * Type:       constructor
 * Definition: Ogre::Vector2::Vector2
 * Signature:  (I)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1_1createVector2_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint afCoordinate
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     Vector2()
 * Type:       constructor
 * Definition: Ogre::Vector2::Vector2
 * Signature:  (float)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1_1createVector2_1_1Realp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong r
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator[]_const()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector2::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1operatorIndex_1const_1_1iV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator[]()
 * Type:       non-virtual method
 * Definition: Real& Ogre::Vector2::operator[]
 * Signature:  (I)float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorIndex_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint i
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     ptr()
 * Type:       non-virtual method
 * Definition: Real* Ogre::Vector2::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1ptr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     ptr_const()
 * Type:       non-virtual method
 * Definition: const Real* Ogre::Vector2::ptr
 * Signature:  ()float
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1ptr_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator=
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorAssignment_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator=
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorAssignment_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator==()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector2::operator==
 * Signature:  (Ogre_Vector2)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector2__1operatorEqual_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator!=()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector2::operator!=
 * Signature:  (Ogre_Vector2)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector2__1operatorNotEqual_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::operator+
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorAddition_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::operator-
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorSubtraction_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::operator *
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorMultiplication_1_1RealV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator *()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::operator *
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorMultiplication_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::operator/
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorDivision_1_1RealV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator/()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::operator/
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorDivision_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator+()
 * Type:       non-virtual method
 * Definition: const Vector2& Ogre::Vector2::operator+
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorAddition_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator-()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::operator-
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorSubtraction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator+=
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorIncrementAndAssign_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator+=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator+=
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorIncrementAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScaler
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator-=
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorDecrementAndAssign_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator-=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator-=
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorDecrementAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScaler
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator *=
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorMultiplyAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator *=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator *=
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorMultiplyAndAssign_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator/=
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorDivideAndAssign_1_1RealV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fScalar
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator/=()
 * Type:       non-virtual method
 * Definition: Vector2& Ogre::Vector2::operator/=
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1operatorDivideAndAssign_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     length()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector2::length
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1length_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     squaredLength()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector2::squaredLength
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1squaredLength_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     dotProduct()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector2::dotProduct
 * Signature:  (Ogre_Vector2)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1dotProduct_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     normalise()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector2::normalise
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1normalise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     midPoint()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::midPoint
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1midPoint_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vec
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator<()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector2::operator<
 * Signature:  (Ogre_Vector2)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector2__1operatorLessThan_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     operator>()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector2::operator>
 * Signature:  (Ogre_Vector2)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector2__1operatorGreaterThan_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rhs
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     makeFloor()
 * Type:       non-virtual method
 * Definition: void Ogre::Vector2::makeFloor
 * Signature:  (Ogre_Vector2)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector2__1makeFloor_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cmp
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     makeCeil()
 * Type:       non-virtual method
 * Definition: void Ogre::Vector2::makeCeil
 * Signature:  (Ogre_Vector2)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector2__1makeCeil_1_1Vector2R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cmp
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     perpendicular()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::perpendicular
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1perpendicular_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     crossProduct()
 * Type:       non-virtual method
 * Definition: Real Ogre::Vector2::crossProduct
 * Signature:  (Ogre_Vector2)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1crossProduct_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rkVector
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     randomDeviant()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::randomDeviant
 * Signature:  (float)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1randomDeviant_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat angle
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     isZeroLength()
 * Type:       non-virtual method
 * Definition: bool Ogre::Vector2::isZeroLength
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Vector2__1isZeroLength_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     normalisedCopy()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::normalisedCopy
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1normalisedCopy_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     reflect()
 * Type:       non-virtual method
 * Definition: Vector2 Ogre::Vector2::reflect
 * Signature:  (Ogre_Vector2)Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1reflect_1_1Vector2R_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong normal
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Vector2::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector2__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     getx()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector2::x
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1getx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     setx()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector2::x
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector2__1setx (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     gety()
 * Type:       getter for public attribute
 * Definition: Real Ogre::Vector2::y
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Vector2__1gety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     sety()
 * Type:       setter for public attribute
 * Definition: Real Ogre::Vector2::y
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Vector2__1sety (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _jni_value_
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     getZERO()
 * Type:       getter for public attribute
 * Definition: const Vector2 Ogre::Vector2::ZERO
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1getZERO (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     getUNIT_X()
 * Type:       getter for public attribute
 * Definition: const Vector2 Ogre::Vector2::UNIT_X
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1getUNIT_1X (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     getUNIT_Y()
 * Type:       getter for public attribute
 * Definition: const Vector2 Ogre::Vector2::UNIT_Y
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1getUNIT_1Y (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     getNEGATIVE_UNIT_X()
 * Type:       getter for public attribute
 * Definition: const Vector2 Ogre::Vector2::NEGATIVE_UNIT_X
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1getNEGATIVE_1UNIT_1X (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     getNEGATIVE_UNIT_Y()
 * Type:       getter for public attribute
 * Definition: const Vector2 Ogre::Vector2::NEGATIVE_UNIT_Y
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1getNEGATIVE_1UNIT_1Y (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Vector2
 * Method:     getUNIT_SCALE()
 * Type:       getter for public attribute
 * Definition: const Vector2 Ogre::Vector2::UNIT_SCALE
 * Signature:  ()Ogre_Vector2
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Vector2__1getUNIT_1SCALE (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Vector2__*/
