///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_TextAreaOverlayElement__
#define __Included_org_ogre4j_TextAreaOverlayElement__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     TextAreaOverlayElement()
 * Type:       constructor
 * Definition: Ogre::TextAreaOverlayElement::TextAreaOverlayElement
 * Signature:  (std_string)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1createTextAreaOverlayElement_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     initialise()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextAreaOverlayElement::initialise
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1initialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCaption()
 * Type:       virtual method
 * Definition: virtual void Ogre::TextAreaOverlayElement::setCaption
 * Signature:  (Ogre_UTFString)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCaption_1_1DisplayStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong text
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCharHeight()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setCharHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCharHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCharHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextAreaOverlayElement::getCharHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCharHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setSpaceWidth()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setSpaceWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setSpaceWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getSpaceWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::TextAreaOverlayElement::getSpaceWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getSpaceWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setFontName()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setFontName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setFontName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring font
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getFontName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::TextAreaOverlayElement::getFontName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getFontName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getTypeName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::TextAreaOverlayElement::getTypeName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getTypeName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getRenderOperation()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setMaterialName()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring matName
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setColour()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setColour_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong col
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getColour()
 * Type:       virtual method
 * Definition: const ColourValue& Ogre::TextAreaOverlayElement::getColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setColourBottom()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setColourBottom
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setColourBottom_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong col
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getColourBottom()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::TextAreaOverlayElement::getColourBottom
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getColourBottom_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setColourTop()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setColourTop
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setColourTop_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong col
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getColourTop()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::TextAreaOverlayElement::getColourTop
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getColourTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setAlignment()
 * Type:       non-virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setAlignment
 * Signature:  (Ogre_TextAreaOverlayElement_Alignment)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setAlignment_1_1Alignmentv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint a
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getAlignment()
 * Type:       non-virtual method
 * Definition: Alignment Ogre::TextAreaOverlayElement::getAlignment
 * Signature:  ()Ogre_TextAreaOverlayElement_Alignment
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getAlignment_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setMetricsMode()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::setMetricsMode
 * Signature:  (Ogre_GuiMetricsMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setMetricsMode_1_1GuiMetricsModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gmm
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _update()
 * Type:       virtual method
 * Definition: void Ogre::TextAreaOverlayElement::_update
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1update (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::OverlayElement::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     show()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::show
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1show (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     hide()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::hide
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1hide (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isVisible()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayElement::isVisible
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isVisible_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::OverlayElement::isEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setEnabled()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean b
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setPosition
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setPosition_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat top
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setWidth()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setHeight()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setLeft()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setLeft
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setLeft_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getLeft()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getLeft
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getLeft_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setTop()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::setTop
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setTop_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat Top
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getTop()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::getTop
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getLeft()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getLeft
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getLeft_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getTop()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getTop
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getTop_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getWidth()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getWidth_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getHeight()
 * Type:       non-virtual method
 * Definition: Real Ogre::OverlayElement::_getHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getHeight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setLeft()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setLeft
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setLeft_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setTop()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setTop
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setTop_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat top
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setWidth()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setWidth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setWidth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setHeight()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setHeight
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setHeight_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat height
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setPosition()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setPosition
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setPosition_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat top
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setDimensions()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setDimensions
 * Signature:  (floatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setDimensions_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat width, 
  jfloat height
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getMaterialName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::OverlayElement::getMaterialName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getMaterialName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getMaterial()
 * Type:       virtual method
 * Definition: const MaterialPtr& Ogre::OverlayElement::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getWorldTransforms()
 * Type:       virtual method
 * Definition: void Ogre::OverlayElement::getWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getWorldTransforms_1_1Matrix4p_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _positionsOutOfDate()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_positionsOutOfDate
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1positionsOutOfDate (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _updateFromParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_updateFromParent
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1updateFromParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyParent()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_notifyParent
 * Signature:  (Ogre_OverlayContainerOgre_Overlay)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyParent_1_1OverlayContainerpOverlayp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent, 
  jlong overlay
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getDerivedLeft()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getDerivedLeft
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getDerivedLeft (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getDerivedTop()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getDerivedTop
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getDerivedTop (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getRelativeWidth()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getRelativeWidth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getRelativeWidth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getRelativeHeight()
 * Type:       virtual method
 * Definition: virtual Real Ogre::OverlayElement::_getRelativeHeight
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getRelativeHeight (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _getClippingRegion()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_getClippingRegion
 * Signature:  (Ogre_Rectangle)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1getClippingRegion_1_1Rectangler (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong clippingRegion
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyZOrder()
 * Type:       virtual method
 * Definition: virtual ushort Ogre::OverlayElement::_notifyZOrder
 * Signature:  (unsigned_short)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyZOrder_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint newZOrder
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyWorldTransforms()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_notifyWorldTransforms
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyWorldTransforms_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong xform
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _notifyViewport()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_notifyViewport
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1notifyViewport (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _updateRenderQueue()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::_updateRenderQueue
 * Signature:  (Ogre_RenderQueue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1updateRenderQueue_1_1RenderQueuep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong queue
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     visitRenderables()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::visitRenderables
 * Signature:  (Ogre_Renderable_VisitorZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1visitRenderables_1_1Renderable_1Visitorpbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong visitor, 
  jboolean debugRenderables
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCaption()
 * Type:       virtual method
 * Definition: virtual const DisplayString& Ogre::OverlayElement::getCaption
 * Signature:  ()Ogre_UTFString
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCaption_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getMetricsMode()
 * Type:       virtual method
 * Definition: virtual GuiMetricsMode Ogre::OverlayElement::getMetricsMode
 * Signature:  ()Ogre_GuiMetricsMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getMetricsMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setHorizontalAlignment()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setHorizontalAlignment
 * Signature:  (Ogre_GuiHorizontalAlignment)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setHorizontalAlignment_1_1GuiHorizontalAlignmentv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gha
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getHorizontalAlignment()
 * Type:       virtual method
 * Definition: virtual GuiHorizontalAlignment Ogre::OverlayElement::getHorizontalAlignment
 * Signature:  ()Ogre_GuiHorizontalAlignment
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getHorizontalAlignment_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setVerticalAlignment()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setVerticalAlignment
 * Signature:  (Ogre_GuiVerticalAlignment)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setVerticalAlignment_1_1GuiVerticalAlignmentv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gva
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getVerticalAlignment()
 * Type:       virtual method
 * Definition: virtual GuiVerticalAlignment Ogre::OverlayElement::getVerticalAlignment
 * Signature:  ()Ogre_GuiVerticalAlignment
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getVerticalAlignment_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     contains()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::contains
 * Signature:  (floatfloat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1contains_1_1RealvRealv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     findElementAt()
 * Type:       virtual method
 * Definition: virtual OverlayElement* Ogre::OverlayElement::findElementAt
 * Signature:  (floatfloat)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1findElementAt_1_1RealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat x, 
  jfloat y
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isContainer()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::isContainer
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isContainer_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isKeyEnabled()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::isKeyEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isKeyEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     isCloneable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::OverlayElement::isCloneable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1isCloneable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCloneable()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::setCloneable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCloneable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean c
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: OverlayContainer* Ogre::OverlayElement::getParent
 * Signature:  ()Ogre_OverlayContainer
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _setParent()
 * Type:       non-virtual method
 * Definition: void Ogre::OverlayElement::_setParent
 * Signature:  (Ogre_OverlayContainer)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1setParent_1_1OverlayContainerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong parent
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getZOrder()
 * Type:       non-virtual method
 * Definition: ushort Ogre::OverlayElement::getZOrder
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getZOrder_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getSquaredViewDepth()
 * Type:       virtual method
 * Definition: Real Ogre::OverlayElement::getSquaredViewDepth
 * Signature:  (Ogre_Camera)float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getSquaredViewDepth_1_1CameraP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getLights()
 * Type:       virtual method
 * Definition: const LightList& Ogre::OverlayElement::getLights
 * Signature:  ()Ogre_LightList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     copyFromTemplate()
 * Type:       virtual method
 * Definition: virtual void Ogre::OverlayElement::copyFromTemplate
 * Signature:  (Ogre_OverlayElement)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1copyFromTemplate_1_1OverlayElementp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong templateOverlay
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     clone()
 * Type:       virtual method
 * Definition: virtual OverlayElement* Ogre::OverlayElement::clone
 * Signature:  (std_string)Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1clone_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getSourceTemplate()
 * Type:       non-virtual method
 * Definition: const OverlayElement* Ogre::OverlayElement::getSourceTemplate
 * Signature:  ()Ogre_OverlayElement
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getSourceTemplate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getTechnique()
 * Type:       virtual method
 * Definition: virtual Technique* Ogre::Renderable::getTechnique
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getTechnique_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     preRender()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::preRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1preRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     postRender()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::postRender
 * Signature:  (Ogre_SceneManagerOgre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1postRender_1_1SceneManagerpRenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm, 
  jlong rsys
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getNumWorldTransforms()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Renderable::getNumWorldTransforms
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getNumWorldTransforms_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityProjection
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setUseIdentityProjection_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityProjection
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getUseIdentityProjection()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityProjection
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getUseIdentityProjection_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setUseIdentityView()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setUseIdentityView
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setUseIdentityView_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean useIdentityView
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getUseIdentityView()
 * Type:       non-virtual method
 * Definition: bool Ogre::Renderable::getUseIdentityView
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getUseIdentityView_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCastsShadows()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getCastsShadows
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCastsShadows_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setCustomParameter()
 * Type:       non-virtual method
 * Definition: void Ogre::Renderable::setCustomParameter
 * Signature:  (IOgre_Vector4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setCustomParameter_1_1ivVector4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jlong value
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getCustomParameter()
 * Type:       non-virtual method
 * Definition: const Vector4& Ogre::Renderable::getCustomParameter
 * Signature:  (I)Ogre_Vector4
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getCustomParameter_1_1iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     _updateCustomGpuParameter()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::_updateCustomGpuParameter
 * Signature:  (Ogre_GpuProgramParameters_AutoConstantEntryOgre_GpuProgramParameters)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1updateCustomGpuParameter_1_1GpuProgramParameters_1AutoConstantEntryRGpuProgramParametersp_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong constantEntry, 
  jlong params
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Renderable::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setUserAny()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setUserAny
 * Signature:  (Ogre_Any)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setUserAny_1_1AnyR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong anything
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getUserAny()
 * Type:       virtual method
 * Definition: virtual const Any& Ogre::Renderable::getUserAny
 * Signature:  ()Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getUserAny_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     getRenderSystemData()
 * Type:       virtual method
 * Definition: virtual RenderSystemData* Ogre::Renderable::getRenderSystemData
 * Signature:  ()Ogre_Renderable_RenderSystemData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_TextAreaOverlayElement__1getRenderSystemData_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     setRenderSystemData()
 * Type:       virtual method
 * Definition: virtual void Ogre::Renderable::setRenderSystemData
 * Signature:  (Ogre_Renderable_RenderSystemData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1setRenderSystemData_1_1RenderSystemDatap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
);

/*
 * Class:      org.ogre4j.TextAreaOverlayElement
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::TextAreaOverlayElement::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_TextAreaOverlayElement__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_TextAreaOverlayElement__*/
