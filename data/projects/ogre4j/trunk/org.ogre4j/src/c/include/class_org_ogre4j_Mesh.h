///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Mesh__
#define __Included_org_ogre4j_Mesh__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Mesh
 * Method:     Mesh()
 * Type:       constructor
 * Definition: Ogre::Mesh::Mesh
 * Signature:  (Ogre_ResourceManagerstd_stringunsigned_longstd_stringZOgre_ManualResourceLoader)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1_1createMesh_1_1ResourceManagerpStringRResourceHandlevStringRbvManualResourceLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong creator, 
  jstring name, 
  jlong handle, 
  jstring group, 
  jboolean isManual, 
  jlong loader
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     createSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::createSubMesh
 * Signature:  ()Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1createSubMesh (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     createSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::createSubMesh
 * Signature:  (std_string)Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1createSubMesh_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     nameSubMesh()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::nameSubMesh
 * Signature:  (std_stringunsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1nameSubMesh_1_1StringRushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint index
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _getSubMeshIndex()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::_getSubMeshIndex
 * Signature:  (std_string)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1_1getSubMeshIndex_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getNumSubMeshes()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Mesh::getNumSubMeshes
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getNumSubMeshes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::getSubMesh
 * Signature:  (S)Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getSubMesh_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSubMesh()
 * Type:       non-virtual method
 * Definition: SubMesh* Ogre::Mesh::getSubMesh
 * Signature:  (std_string)Ogre_SubMesh
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getSubMesh_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSubMeshIterator()
 * Type:       non-virtual method
 * Definition: SubMeshIterator Ogre::Mesh::getSubMeshIterator
 * Signature:  ()Ogre_Mesh_SubMeshIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getSubMeshIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: MeshPtr Ogre::Mesh::clone
 * Signature:  (std_stringstd_string)Ogre_MeshPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1clone_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newName, 
  jstring newGroup
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getBounds()
 * Type:       non-virtual method
 * Definition: const AxisAlignedBox& Ogre::Mesh::getBounds
 * Signature:  ()Ogre_AxisAlignedBox
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getBounds_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getBoundingSphereRadius()
 * Type:       non-virtual method
 * Definition: Real Ogre::Mesh::getBoundingSphereRadius
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Mesh__1getBoundingSphereRadius_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _setBounds()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setBounds
 * Signature:  (Ogre_AxisAlignedBoxZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1setBounds_1_1AxisAlignedBoxRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bounds, 
  jboolean pad
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _setBoundingSphereRadius()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setBoundingSphereRadius
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1setBoundingSphereRadius_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat radius
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setSkeletonName()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setSkeletonName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setSkeletonName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring skelName
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     hasSkeleton()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::hasSkeleton
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1hasSkeleton_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     hasVertexAnimation()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::hasVertexAnimation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1hasVertexAnimation_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSkeleton()
 * Type:       non-virtual method
 * Definition: const SkeletonPtr& Ogre::Mesh::getSkeleton
 * Signature:  ()Ogre_SkeletonPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getSkeleton_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSkeletonName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Mesh::getSkeletonName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Mesh__1getSkeletonName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _initAnimationState()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_initAnimationState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1initAnimationState_1_1AnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animSet
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _refreshAnimationState()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_refreshAnimationState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1refreshAnimationState_1_1AnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animSet
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     addBoneAssignment()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::addBoneAssignment
 * Signature:  (Ogre_VertexBoneAssignment_s)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1addBoneAssignment_1_1VertexBoneAssignmentR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vertBoneAssign
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     clearBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::clearBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1clearBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _notifySkeleton()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_notifySkeleton
 * Signature:  (Ogre_SkeletonPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1notifySkeleton_1_1SkeletonPtrr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pSkel
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getBoneAssignmentIterator()
 * Type:       non-virtual method
 * Definition: BoneAssignmentIterator Ogre::Mesh::getBoneAssignmentIterator
 * Signature:  ()Ogre_Mesh_BoneAssignmentIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getBoneAssignmentIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getBoneAssignments()
 * Type:       non-virtual method
 * Definition: const VertexBoneAssignmentList& Ogre::Mesh::getBoneAssignments
 * Signature:  ()Ogre_Mesh_VertexBoneAssignmentList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getBoneAssignments_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     generateLodLevels()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::generateLodLevels
 * Signature:  (Ogre_Mesh_LodDistanceListOgre_ProgressiveMesh_VertexReductionQuotafloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1generateLodLevels_1_1LodDistanceListRProgressiveMesh_1VertexReductionQuotavRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodDistances, 
  jint reductionMethod, 
  jfloat reductionValue
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getNumLodLevels()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::getNumLodLevels
 * Signature:  ()unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getNumLodLevels_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getLodLevel()
 * Type:       non-virtual method
 * Definition: const MeshLodUsage& Ogre::Mesh::getLodLevel
 * Signature:  (unsigned_short)Ogre_MeshLodUsage
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getLodLevel_1_1ushortv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     createManualLodLevel()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::createManualLodLevel
 * Signature:  (floatstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1createManualLodLevel_1_1RealvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat fromDepth, 
  jstring meshName
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     updateManualLodLevel()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::updateManualLodLevel
 * Signature:  (unsigned_shortstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1updateManualLodLevel_1_1ushortvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index, 
  jstring meshName
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getLodIndex()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::getLodIndex
 * Signature:  (float)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getLodIndex_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat depth
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getLodIndexSquaredDepth()
 * Type:       non-virtual method
 * Definition: ushort Ogre::Mesh::getLodIndexSquaredDepth
 * Signature:  (float)unsigned_short
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getLodIndexSquaredDepth_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat squaredDepth
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isLodManual()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isLodManual
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isLodManual_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _setLodInfo()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setLodInfo
 * Signature:  (SZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1setLodInfo_1_1Hvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numLevels, 
  jboolean isManual
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _setLodUsage()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setLodUsage
 * Signature:  (SOgre_MeshLodUsage)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1setLodUsage_1_1HvMeshLodUsager (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint level, 
  jlong usage
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _setSubMeshLodFaceList()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_setSubMeshLodFaceList
 * Signature:  (SSOgre_IndexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1setSubMeshLodFaceList_1_1HvHvIndexDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint subIdx, 
  jint level, 
  jlong facedata
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     removeLodLevels()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removeLodLevels
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1removeLodLevels (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setVertexBufferPolicy()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setVertexBufferPolicy
 * Signature:  (Ogre_HardwareBuffer_UsageZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setVertexBufferPolicy_1_1HardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint usage, 
  jboolean shadowBuffer
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setIndexBufferPolicy()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setIndexBufferPolicy
 * Signature:  (Ogre_HardwareBuffer_UsageZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setIndexBufferPolicy_1_1HardwareBuffer_1Usagevbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint usage, 
  jboolean shadowBuffer
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getVertexBufferUsage()
 * Type:       non-virtual method
 * Definition: HardwareBuffer::Usage Ogre::Mesh::getVertexBufferUsage
 * Signature:  ()Ogre_HardwareBuffer_Usage
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getVertexBufferUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getIndexBufferUsage()
 * Type:       non-virtual method
 * Definition: HardwareBuffer::Usage Ogre::Mesh::getIndexBufferUsage
 * Signature:  ()Ogre_HardwareBuffer_Usage
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getIndexBufferUsage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isVertexBufferShadowed()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isVertexBufferShadowed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isVertexBufferShadowed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isIndexBufferShadowed()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isIndexBufferShadowed
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isIndexBufferShadowed_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _rationaliseBoneAssignments()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Mesh::_rationaliseBoneAssignments
 * Signature:  (IOgre_Mesh_VertexBoneAssignmentList)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1_1rationaliseBoneAssignments_1_1ivVertexBoneAssignmentListr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint vertexCount, 
  jlong assignments
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _compileBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_compileBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1compileBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _updateCompiledBoneAssignments()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_updateCompiledBoneAssignments
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1updateCompiledBoneAssignments (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     buildTangentVectors()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::buildTangentVectors
 * Signature:  (Ogre_VertexElementSemanticSSZZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1buildTangentVectors_1_1VertexElementSemanticvHvHvbvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint targetSemantic, 
  jint sourceTexCoordSet, 
  jint index, 
  jboolean splitMirrored, 
  jboolean splitRotated, 
  jboolean storeParityInW
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     suggestTangentVectorBuildParams()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::suggestTangentVectorBuildParams
 * Signature:  (Ogre_VertexElementSemanticSS)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1suggestTangentVectorBuildParams_1_1VertexElementSemanticvHrHr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint targetSemantic, 
  jlong outSourceCoordSet, 
  jlong outIndex
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     buildEdgeList()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::buildEdgeList
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1buildEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     freeEdgeList()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::freeEdgeList
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1freeEdgeList (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     prepareForShadowVolume()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::prepareForShadowVolume
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1prepareForShadowVolume (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getEdgeList()
 * Type:       non-virtual method
 * Definition: EdgeData* Ogre::Mesh::getEdgeList
 * Signature:  (I)Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getEdgeList_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodIndex
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getEdgeList_const()
 * Type:       non-virtual method
 * Definition: const EdgeData* Ogre::Mesh::getEdgeList
 * Signature:  (I)Ogre_EdgeData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getEdgeList_1const_1_1Iv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lodIndex
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isPreparedForShadowVolumes()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isPreparedForShadowVolumes
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isPreparedForShadowVolumes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isEdgeListBuilt()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::isEdgeListBuilt
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isEdgeListBuilt_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSubMeshNameMap()
 * Type:       non-virtual method
 * Definition: const SubMeshNameMap& Ogre::Mesh::getSubMeshNameMap
 * Signature:  ()Ogre_Mesh_SubMeshNameMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getSubMeshNameMap_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setAutoBuildEdgeLists()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::setAutoBuildEdgeLists
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setAutoBuildEdgeLists_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autobuild
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getAutoBuildEdgeLists()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::getAutoBuildEdgeLists
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1getAutoBuildEdgeLists_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSharedVertexDataAnimationType()
 * Type:       virtual method
 * Definition: virtual VertexAnimationType Ogre::Mesh::getSharedVertexDataAnimationType
 * Signature:  ()Ogre_VertexAnimationType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getSharedVertexDataAnimationType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     createAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::createAnimation
 * Signature:  (std_stringfloat)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1createAnimation_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jfloat length
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::getAnimation
 * Signature:  (std_string)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getAnimation_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _getAnimationImpl()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::_getAnimationImpl
 * Signature:  (std_string)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1_1getAnimationImpl_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     hasAnimation()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Mesh::hasAnimation
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1hasAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     removeAnimation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Mesh::removeAnimation
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1removeAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getNumAnimations()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Mesh::getNumAnimations
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getNumAnimations_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Mesh::getAnimation
 * Signature:  (S)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getAnimation_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     removeAllAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::Mesh::removeAllAnimations
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1removeAllAnimations (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getVertexDataByTrackHandle()
 * Type:       non-virtual method
 * Definition: VertexData* Ogre::Mesh::getVertexDataByTrackHandle
 * Signature:  (S)Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getVertexDataByTrackHandle_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     updateMaterialForAllSubMeshes()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::updateMaterialForAllSubMeshes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1updateMaterialForAllSubMeshes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _determineAnimationTypes()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::_determineAnimationTypes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1determineAnimationTypes_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _getAnimationTypesDirty()
 * Type:       non-virtual method
 * Definition: bool Ogre::Mesh::_getAnimationTypesDirty
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1_1getAnimationTypesDirty_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     createPose()
 * Type:       non-virtual method
 * Definition: Pose* Ogre::Mesh::createPose
 * Signature:  (unsigned_shortstd_string)Ogre_Pose
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1createPose_1_1ushortvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint target, 
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getPoseCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Mesh::getPoseCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getPoseCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getPose()
 * Type:       non-virtual method
 * Definition: Pose* Ogre::Mesh::getPose
 * Signature:  (unsigned_short)Ogre_Pose
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getPose_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getPose()
 * Type:       non-virtual method
 * Definition: Pose* Ogre::Mesh::getPose
 * Signature:  (std_string)Ogre_Pose
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getPose_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     removePose()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removePose
 * Signature:  (unsigned_short)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1removePose_1_1ushortv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     removePose()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removePose
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1removePose_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     removeAllPoses()
 * Type:       non-virtual method
 * Definition: void Ogre::Mesh::removeAllPoses
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1removeAllPoses (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getPoseIterator()
 * Type:       non-virtual method
 * Definition: PoseIterator Ogre::Mesh::getPoseIterator
 * Signature:  ()Ogre_Mesh_PoseIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getPoseIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getPoseIterator_const()
 * Type:       non-virtual method
 * Definition: ConstPoseIterator Ogre::Mesh::getPoseIterator
 * Signature:  ()Ogre_Mesh_ConstPoseIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getPoseIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getPoseList()
 * Type:       non-virtual method
 * Definition: const PoseList& Ogre::Mesh::getPoseList
 * Signature:  ()Ogre_PoseList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getPoseList_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     prepareMatricesForVertexBlend()
 * Type:       static method
 * Definition: static void Ogre::Mesh::prepareMatricesForVertexBlend
 * Signature:  (Ogre_Matrix4Ogre_Matrix4Ogre_Mesh_IndexMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1prepareMatricesForVertexBlend_1_1Matrix4PMatrix4PIndexMapR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong blendMatrices, 
  jlong boneMatrices, 
  jlong indexMap
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     softwareVertexBlend()
 * Type:       static method
 * Definition: static void Ogre::Mesh::softwareVertexBlend
 * Signature:  (Ogre_VertexDataOgre_VertexDataOgre_Matrix4IZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1softwareVertexBlend_1_1VertexDataPVertexDataPMatrix4Pivbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong sourceVertexData, 
  jlong targetVertexData, 
  jlong blendMatrices, 
  jint numMatrices, 
  jboolean blendNormals
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     softwareVertexMorph()
 * Type:       static method
 * Definition: static void Ogre::Mesh::softwareVertexMorph
 * Signature:  (floatOgre_HardwareVertexBufferSharedPtrOgre_HardwareVertexBufferSharedPtrOgre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1softwareVertexMorph_1_1RealvHardwareVertexBufferSharedPtrRHardwareVertexBufferSharedPtrRVertexDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat t, 
  jlong b1, 
  jlong b2, 
  jlong targetVertexData
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     softwareVertexPoseBlend()
 * Type:       static method
 * Definition: static void Ogre::Mesh::softwareVertexPoseBlend
 * Signature:  (floatstd_map__size_t__Vector3__Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1softwareVertexPoseBlend_1_1Realvstd_1map_1_1size_1t_1_1Vector3_1_1rVertexDatap (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jfloat weight, 
  jlong vertexOffsetMap, 
  jlong targetVertexData
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     reload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     touch()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Mesh__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: virtual LoadingState Ogre::Resource::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Mesh__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Mesh__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Mesh__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Mesh__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Mesh__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Mesh::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getsharedVertexData()
 * Type:       getter for public attribute
 * Definition: VertexData* Ogre::Mesh::sharedVertexData
 * Signature:  ()Ogre_VertexData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getsharedVertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setsharedVertexData()
 * Type:       setter for public attribute
 * Definition: VertexData* Ogre::Mesh::sharedVertexData
 * Signature:  (Ogre_VertexData)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setsharedVertexData (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     getsharedBlendIndexToBoneIndexMap()
 * Type:       getter for public attribute
 * Definition: IndexMap Ogre::Mesh::sharedBlendIndexToBoneIndexMap
 * Signature:  ()Ogre_Mesh_IndexMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Mesh__1getsharedBlendIndexToBoneIndexMap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Mesh
 * Method:     setsharedBlendIndexToBoneIndexMap()
 * Type:       setter for public attribute
 * Definition: IndexMap Ogre::Mesh::sharedBlendIndexToBoneIndexMap
 * Signature:  (Ogre_Mesh_IndexMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Mesh__1setsharedBlendIndexToBoneIndexMap (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong _jni_value_
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Mesh__*/
