///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_RenderToVertexBuffer__
#define __Included_org_ogre4j_RenderToVertexBuffer__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     getVertexDeclaration()
 * Type:       non-virtual method
 * Definition: VertexDeclaration* Ogre::RenderToVertexBuffer::getVertexDeclaration
 * Signature:  ()Ogre_VertexDeclaration
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderToVertexBuffer__1getVertexDeclaration (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     getMaxVertexCount()
 * Type:       non-virtual method
 * Definition: unsigned int Ogre::RenderToVertexBuffer::getMaxVertexCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderToVertexBuffer__1getMaxVertexCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     setMaxVertexCount()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderToVertexBuffer::setMaxVertexCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1setMaxVertexCount_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong maxVertexCount
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     getOperationType()
 * Type:       non-virtual method
 * Definition: RenderOperation::OperationType Ogre::RenderToVertexBuffer::getOperationType
 * Signature:  ()Ogre_RenderOperation_OperationType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderToVertexBuffer__1getOperationType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     setOperationType()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderToVertexBuffer::setOperationType
 * Signature:  (Ogre_RenderOperation_OperationType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1setOperationType_1_1RenderOperation_1OperationTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint operationType
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     setResetsEveryUpdate()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderToVertexBuffer::setResetsEveryUpdate
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1setResetsEveryUpdate_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean resetsEveryUpdate
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     getResetsEveryUpdate()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderToVertexBuffer::getResetsEveryUpdate
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderToVertexBuffer__1getResetsEveryUpdate_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     getRenderOperation()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderToVertexBuffer::getRenderOperation
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1getRenderOperation_1_1RenderOperationr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     update()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderToVertexBuffer::update
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1update_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sceneMgr
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     reset()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderToVertexBuffer::reset
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1reset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     setSourceRenderable()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderToVertexBuffer::setSourceRenderable
 * Signature:  (Ogre_Renderable)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1setSourceRenderable_1_1Renderablep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     getSourceRenderable()
 * Type:       non-virtual method
 * Definition: const Renderable* Ogre::RenderToVertexBuffer::getSourceRenderable
 * Signature:  ()Ogre_Renderable
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderToVertexBuffer__1getSourceRenderable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     getRenderToBufferMaterial()
 * Type:       non-virtual method
 * Definition: const MaterialPtr& Ogre::RenderToVertexBuffer::getRenderToBufferMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderToVertexBuffer__1getRenderToBufferMaterial (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     setRenderToBufferMaterialName()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderToVertexBuffer::setRenderToBufferMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1setRenderToBufferMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring materialName
);

/*
 * Class:      org.ogre4j.RenderToVertexBuffer
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderToVertexBuffer::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderToVertexBuffer__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_RenderToVertexBuffer__*/
