///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_SceneManagerEnumerator__
#define __Included_org_ogre4j_SceneManagerEnumerator__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     SceneManagerEnumerator()
 * Type:       constructor
 * Definition: Ogre::SceneManagerEnumerator::SceneManagerEnumerator
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1_1createSceneManagerEnumerator (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     addFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManagerEnumerator::addFactory
 * Signature:  (Ogre_SceneManagerFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManagerEnumerator__1addFactory_1_1SceneManagerFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     removeFactory()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManagerEnumerator::removeFactory
 * Signature:  (Ogre_SceneManagerFactory)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManagerEnumerator__1removeFactory_1_1SceneManagerFactoryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fact
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     getMetaData()
 * Type:       non-virtual method
 * Definition: const SceneManagerMetaData* Ogre::SceneManagerEnumerator::getMetaData
 * Signature:  (std_string)Ogre_SceneManagerMetaData
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1getMetaData_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     getMetaDataIterator()
 * Type:       non-virtual method
 * Definition: MetaDataIterator Ogre::SceneManagerEnumerator::getMetaDataIterator
 * Signature:  ()Ogre_SceneManagerEnumerator_MetaDataIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1getMetaDataIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     createSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::SceneManagerEnumerator::createSceneManager
 * Signature:  (std_stringstd_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1createSceneManager_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring typeName, 
  jstring instanceName
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     createSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::SceneManagerEnumerator::createSceneManager
 * Signature:  (unsigned_shortstd_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1createSceneManager_1_1SceneTypeMaskvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint typeMask, 
  jstring instanceName
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     destroySceneManager()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManagerEnumerator::destroySceneManager
 * Signature:  (Ogre_SceneManager)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManagerEnumerator__1destroySceneManager_1_1SceneManagerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong sm
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     getSceneManager()
 * Type:       non-virtual method
 * Definition: SceneManager* Ogre::SceneManagerEnumerator::getSceneManager
 * Signature:  (std_string)Ogre_SceneManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1getSceneManager_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring instanceName
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     getSceneManagerIterator()
 * Type:       non-virtual method
 * Definition: SceneManagerIterator Ogre::SceneManagerEnumerator::getSceneManagerIterator
 * Signature:  ()Ogre_SceneManagerEnumerator_SceneManagerIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1getSceneManagerIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     setRenderSystem()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManagerEnumerator::setRenderSystem
 * Signature:  (Ogre_RenderSystem)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManagerEnumerator__1setRenderSystem_1_1RenderSystemp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong rs
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     shutdownAll()
 * Type:       non-virtual method
 * Definition: void Ogre::SceneManagerEnumerator::shutdownAll
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManagerEnumerator__1shutdownAll (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     getSingleton()
 * Type:       static method
 * Definition: static SceneManagerEnumerator& Ogre::SceneManagerEnumerator::getSingleton
 * Signature:  ()Ogre_SceneManagerEnumerator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1getSingleton (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     getSingletonPtr()
 * Type:       static method
 * Definition: static SceneManagerEnumerator* Ogre::SceneManagerEnumerator::getSingletonPtr
 * Signature:  ()Ogre_SceneManagerEnumerator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_SceneManagerEnumerator__1getSingletonPtr (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.SceneManagerEnumerator
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::SceneManagerEnumerator::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_SceneManagerEnumerator__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_SceneManagerEnumerator__*/
