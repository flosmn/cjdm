///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Skeleton__
#define __Included_org_ogre4j_Skeleton__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     Skeleton()
 * Type:       constructor
 * Definition: Ogre::Skeleton::Skeleton
 * Signature:  (Ogre_ResourceManagerstd_stringunsigned_longstd_stringZOgre_ManualResourceLoader)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1_1createSkeleton_1_1ResourceManagerpStringRResourceHandlevStringRbvManualResourceLoaderp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong creator, 
  jstring name, 
  jlong handle, 
  jstring group, 
  jboolean isManual, 
  jlong loader
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     createBone()
 * Type:       virtual method
 * Definition: virtual Bone* Ogre::Skeleton::createBone
 * Signature:  ()Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1createBone (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     createBone()
 * Type:       virtual method
 * Definition: virtual Bone* Ogre::Skeleton::createBone
 * Signature:  (S)Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1createBone_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     createBone()
 * Type:       virtual method
 * Definition: virtual Bone* Ogre::Skeleton::createBone
 * Signature:  (std_string)Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1createBone_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     createBone()
 * Type:       virtual method
 * Definition: virtual Bone* Ogre::Skeleton::createBone
 * Signature:  (std_stringS)Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1createBone_1_1StringRHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jint handle
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getNumBones()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Skeleton::getNumBones
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Skeleton__1getNumBones_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getRootBone()
 * Type:       virtual method
 * Definition: virtual Bone* Ogre::Skeleton::getRootBone
 * Signature:  ()Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getRootBone_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getRootBoneIterator()
 * Type:       virtual method
 * Definition: virtual BoneIterator Ogre::Skeleton::getRootBoneIterator
 * Signature:  ()Ogre_Skeleton_BoneIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getRootBoneIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getBoneIterator()
 * Type:       virtual method
 * Definition: virtual BoneIterator Ogre::Skeleton::getBoneIterator
 * Signature:  ()Ogre_Skeleton_BoneIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getBoneIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getBone()
 * Type:       virtual method
 * Definition: virtual Bone* Ogre::Skeleton::getBone
 * Signature:  (S)Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getBone_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getBone()
 * Type:       virtual method
 * Definition: virtual Bone* Ogre::Skeleton::getBone
 * Signature:  (std_string)Ogre_Bone
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getBone_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     hasBone()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Skeleton::hasBone
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1hasBone_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     setBindingPose()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::setBindingPose
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1setBindingPose (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     reset()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::reset
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1reset_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean resetManualBones
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     createAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Skeleton::createAnimation
 * Signature:  (std_stringfloat)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1createAnimation_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jfloat length
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Skeleton::getAnimation
 * Signature:  (std_stringOgre_LinkedSkeletonAnimationSource)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getAnimation_1_1StringRLinkedSkeletonAnimationSourceP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong linker
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _getAnimationImpl()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Skeleton::_getAnimationImpl
 * Signature:  (std_stringOgre_LinkedSkeletonAnimationSource)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1_1getAnimationImpl_1_1StringRLinkedSkeletonAnimationSourceP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong linker
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     hasAnimation()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Skeleton::hasAnimation
 * Signature:  (std_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1hasAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     removeAnimation()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::removeAnimation
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1removeAnimation_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     setAnimationState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::setAnimationState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1setAnimationState_1_1AnimationStateSetR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animSet
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _initAnimationState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_initAnimationState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1initAnimationState_1_1AnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animSet
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _refreshAnimationState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_refreshAnimationState
 * Signature:  (Ogre_AnimationStateSet)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1refreshAnimationState_1_1AnimationStateSetp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong animSet
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _getBoneMatrices()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_getBoneMatrices
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1getBoneMatrices_1_1Matrix4p (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong pMatrices
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getNumAnimations()
 * Type:       virtual method
 * Definition: virtual unsigned short Ogre::Skeleton::getNumAnimations
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Skeleton__1getNumAnimations_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getAnimation()
 * Type:       virtual method
 * Definition: virtual Animation* Ogre::Skeleton::getAnimation
 * Signature:  (S)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getAnimation_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getBlendMode()
 * Type:       virtual method
 * Definition: virtual SkeletonAnimationBlendMode Ogre::Skeleton::getBlendMode
 * Signature:  ()Ogre_SkeletonAnimationBlendMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Skeleton__1getBlendMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     setBlendMode()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::setBlendMode
 * Signature:  (Ogre_SkeletonAnimationBlendMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1setBlendMode_1_1SkeletonAnimationBlendModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint state
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _updateTransforms()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_updateTransforms
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1updateTransforms (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     optimiseAllAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::optimiseAllAnimations
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1optimiseAllAnimations_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean preservingIdentityNodeTracks
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     addLinkedSkeletonAnimationSource()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::addLinkedSkeletonAnimationSource
 * Signature:  (std_stringfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1addLinkedSkeletonAnimationSource_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring skelName, 
  jfloat scale
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     removeAllLinkedSkeletonAnimationSources()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::removeAllLinkedSkeletonAnimationSources
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1removeAllLinkedSkeletonAnimationSources (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getLinkedSkeletonAnimationSourceIterator()
 * Type:       virtual method
 * Definition: virtual LinkedSkeletonAnimSourceIterator Ogre::Skeleton::getLinkedSkeletonAnimationSourceIterator
 * Signature:  ()Ogre_Skeleton_LinkedSkeletonAnimSourceIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getLinkedSkeletonAnimationSourceIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _notifyManualBonesDirty()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_notifyManualBonesDirty
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1notifyManualBonesDirty (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _notifyManualBoneStateChange()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_notifyManualBoneStateChange
 * Signature:  (Ogre_Bone)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1notifyManualBoneStateChange_1_1Bonep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong bone
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getManualBonesDirty()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Skeleton::getManualBonesDirty
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1getManualBonesDirty_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     hasManualBones()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Skeleton::hasManualBones
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1hasManualBones_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _mergeSkeletonAnimations()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_mergeSkeletonAnimations
 * Signature:  (Ogre_SkeletonOgre_Skeleton_BoneHandleMapOgre_StringVector)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1mergeSkeletonAnimations_1_1SkeletonPBoneHandleMapRStringVectorR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source, 
  jlong boneHandleMap, 
  jlong animations
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _buildMapBoneByHandle()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_buildMapBoneByHandle
 * Signature:  (Ogre_SkeletonOgre_Skeleton_BoneHandleMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1buildMapBoneByHandle_1_1SkeletonPBoneHandleMapr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source, 
  jlong boneHandleMap
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _buildMapBoneByName()
 * Type:       virtual method
 * Definition: virtual void Ogre::Skeleton::_buildMapBoneByName
 * Signature:  (Ogre_SkeletonOgre_Skeleton_BoneHandleMap)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1buildMapBoneByName_1_1SkeletonPBoneHandleMapr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source, 
  jlong boneHandleMap
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     prepare()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     load()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::load
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1load_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean backgroundThread
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     reload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::reload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1reload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     isReloadable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isReloadable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1isReloadable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     isManuallyLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isManuallyLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1isManuallyLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     unload()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getSize()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getSize
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Skeleton__1getSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     touch()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::touch
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1touch (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getName()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Skeleton__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getHandle()
 * Type:       virtual method
 * Definition: virtual ResourceHandle Ogre::Resource::getHandle
 * Signature:  ()unsigned_long
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getHandle_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     isPrepared()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isPrepared
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1isPrepared_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     isLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     isLoading()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isLoading
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1isLoading_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getLoadingState()
 * Type:       virtual method
 * Definition: virtual LoadingState Ogre::Resource::getLoadingState
 * Signature:  ()Ogre_Resource_LoadingState
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Skeleton__1getLoadingState_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     isBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Resource::isBackgroundLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1isBackgroundLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     setBackgroundLoaded()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::setBackgroundLoaded
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1setBackgroundLoaded_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean bl
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     escalateLoading()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::escalateLoading
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1escalateLoading (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::addListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::removeListener
 * Signature:  (Ogre_Resource_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lis
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getGroup()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Skeleton__1getGroup (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     changeGroupOwnership()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::changeGroupOwnership
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1changeGroupOwnership_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newGroup
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getCreator()
 * Type:       virtual method
 * Definition: virtual ResourceManager* Ogre::Resource::getCreator
 * Signature:  ()Ogre_ResourceManager
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getCreator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getOrigin()
 * Type:       virtual method
 * Definition: virtual const String& Ogre::Resource::getOrigin
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Skeleton__1getOrigin_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _notifyOrigin()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_notifyOrigin
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1notifyOrigin_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring origin
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getStateCount()
 * Type:       virtual method
 * Definition: virtual size_t Ogre::Resource::getStateCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Skeleton__1getStateCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _dirtyState()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_dirtyState
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1dirtyState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _fireBackgroundLoadingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundLoadingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1fireBackgroundLoadingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     _fireBackgroundPreparingComplete()
 * Type:       virtual method
 * Definition: virtual void Ogre::Resource::_fireBackgroundPreparingComplete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1fireBackgroundPreparingComplete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getParamDictionary()
 * Type:       non-virtual method
 * Definition: ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getParamDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getParamDictionary_const()
 * Type:       non-virtual method
 * Definition: const ParamDictionary* Ogre::StringInterface::getParamDictionary
 * Signature:  ()Ogre_ParamDictionary
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getParamDictionary_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getParameters()
 * Type:       non-virtual method
 * Definition: const ParameterList& Ogre::StringInterface::getParameters
 * Signature:  ()Ogre_ParameterList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Skeleton__1getParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     setParameter()
 * Type:       virtual method
 * Definition: virtual bool Ogre::StringInterface::setParameter
 * Signature:  (std_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Skeleton__1setParameter_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     setParameterList()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::setParameterList
 * Signature:  (Ogre_NameValuePairList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1setParameterList_1_1NameValuePairListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong paramList
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     getParameter()
 * Type:       virtual method
 * Definition: virtual String Ogre::StringInterface::getParameter
 * Signature:  (std_string)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Skeleton__1getParameter_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     copyParametersTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::StringInterface::copyParametersTo
 * Signature:  (Ogre_StringInterface)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1copyParametersTo_1_1StringInterfacep_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong dest
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     cleanupDictionary()
 * Type:       static method
 * Definition: static void Ogre::StringInterface::cleanupDictionary
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1cleanupDictionary (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Skeleton
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Skeleton::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Skeleton__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Skeleton__*/
