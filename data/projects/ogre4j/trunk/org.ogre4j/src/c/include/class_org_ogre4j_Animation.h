///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Animation__
#define __Included_org_ogre4j_Animation__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Animation
 * Method:     Animation()
 * Type:       constructor
 * Definition: Ogre::Animation::Animation
 * Signature:  (std_stringfloat)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1_1createAnimation_1_1StringRRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jstring name, 
  jfloat length
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Animation::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Animation__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getLength()
 * Type:       non-virtual method
 * Definition: Real Ogre::Animation::getLength
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Animation__1getLength_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     setLength()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::setLength
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1setLength_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat len
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     createNodeTrack()
 * Type:       non-virtual method
 * Definition: NodeAnimationTrack* Ogre::Animation::createNodeTrack
 * Signature:  (S)Ogre_NodeAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1createNodeTrack_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     createNumericTrack()
 * Type:       non-virtual method
 * Definition: NumericAnimationTrack* Ogre::Animation::createNumericTrack
 * Signature:  (S)Ogre_NumericAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1createNumericTrack_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     createVertexTrack()
 * Type:       non-virtual method
 * Definition: VertexAnimationTrack* Ogre::Animation::createVertexTrack
 * Signature:  (SOgre_VertexAnimationType)Ogre_VertexAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1createVertexTrack_1_1HvVertexAnimationTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle, 
  jint animType
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     createNodeTrack()
 * Type:       non-virtual method
 * Definition: NodeAnimationTrack* Ogre::Animation::createNodeTrack
 * Signature:  (SOgre_Node)Ogre_NodeAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1createNodeTrack_1_1HvNodep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle, 
  jlong node
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     createNumericTrack()
 * Type:       non-virtual method
 * Definition: NumericAnimationTrack* Ogre::Animation::createNumericTrack
 * Signature:  (SOgre_AnimableValuePtr)Ogre_NumericAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1createNumericTrack_1_1HvAnimableValuePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle, 
  jlong anim
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     createVertexTrack()
 * Type:       non-virtual method
 * Definition: VertexAnimationTrack* Ogre::Animation::createVertexTrack
 * Signature:  (SOgre_VertexDataOgre_VertexAnimationType)Ogre_VertexAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1createVertexTrack_1_1HvVertexDatapVertexAnimationTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle, 
  jlong data, 
  jint animType
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getNumNodeTracks()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Animation::getNumNodeTracks
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Animation__1getNumNodeTracks_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getNodeTrack()
 * Type:       non-virtual method
 * Definition: NodeAnimationTrack* Ogre::Animation::getNodeTrack
 * Signature:  (S)Ogre_NodeAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1getNodeTrack_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     hasNodeTrack()
 * Type:       non-virtual method
 * Definition: bool Ogre::Animation::hasNodeTrack
 * Signature:  (S)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Animation__1hasNodeTrack_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getNumNumericTracks()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Animation::getNumNumericTracks
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Animation__1getNumNumericTracks_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getNumericTrack()
 * Type:       non-virtual method
 * Definition: NumericAnimationTrack* Ogre::Animation::getNumericTrack
 * Signature:  (S)Ogre_NumericAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1getNumericTrack_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     hasNumericTrack()
 * Type:       non-virtual method
 * Definition: bool Ogre::Animation::hasNumericTrack
 * Signature:  (S)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Animation__1hasNumericTrack_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getNumVertexTracks()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Animation::getNumVertexTracks
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Animation__1getNumVertexTracks_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getVertexTrack()
 * Type:       non-virtual method
 * Definition: VertexAnimationTrack* Ogre::Animation::getVertexTrack
 * Signature:  (S)Ogre_VertexAnimationTrack
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1getVertexTrack_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     hasVertexTrack()
 * Type:       non-virtual method
 * Definition: bool Ogre::Animation::hasVertexTrack
 * Signature:  (S)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Animation__1hasVertexTrack_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     destroyNodeTrack()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::destroyNodeTrack
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1destroyNodeTrack_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     destroyNumericTrack()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::destroyNumericTrack
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1destroyNumericTrack_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     destroyVertexTrack()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::destroyVertexTrack
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1destroyVertexTrack_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint handle
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     destroyAllTracks()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::destroyAllTracks
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1destroyAllTracks (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     destroyAllNodeTracks()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::destroyAllNodeTracks
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1destroyAllNodeTracks (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     destroyAllNumericTracks()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::destroyAllNumericTracks
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1destroyAllNumericTracks (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     destroyAllVertexTracks()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::destroyAllVertexTracks
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1destroyAllVertexTracks (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     apply()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::apply
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1apply_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat timePos, 
  jfloat weight, 
  jfloat scale
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     apply()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::apply
 * Signature:  (Ogre_Skeletonfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1apply_1_1SkeletonpRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong skeleton, 
  jfloat timePos, 
  jfloat weight, 
  jfloat scale
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     apply()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::apply
 * Signature:  (Ogre_SkeletonfloatFOgre_AnimationState_BoneBlendMaskfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1apply_1_1SkeletonpRealvFvAnimationState_1BoneBlendMaskPRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong skeleton, 
  jfloat timePos, 
  jfloat weight, 
  jlong blendMask, 
  jfloat scale
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     apply()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::apply
 * Signature:  (Ogre_EntityfloatfloatZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1apply_1_1EntitypRealvRealvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong entity, 
  jfloat timePos, 
  jfloat weight, 
  jboolean software, 
  jboolean hardware
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     setInterpolationMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::setInterpolationMode
 * Signature:  (Ogre_Animation_InterpolationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1setInterpolationMode_1_1InterpolationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint im
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getInterpolationMode()
 * Type:       non-virtual method
 * Definition: InterpolationMode Ogre::Animation::getInterpolationMode
 * Signature:  ()Ogre_Animation_InterpolationMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Animation__1getInterpolationMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     setRotationInterpolationMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::setRotationInterpolationMode
 * Signature:  (Ogre_Animation_RotationInterpolationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1setRotationInterpolationMode_1_1RotationInterpolationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint im
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getRotationInterpolationMode()
 * Type:       non-virtual method
 * Definition: RotationInterpolationMode Ogre::Animation::getRotationInterpolationMode
 * Signature:  ()Ogre_Animation_RotationInterpolationMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Animation__1getRotationInterpolationMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     _getNodeTrackList()
 * Type:       non-virtual method
 * Definition: const NodeTrackList& Ogre::Animation::_getNodeTrackList
 * Signature:  ()Ogre_Animation_NodeTrackList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1_1getNodeTrackList_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getNodeTrackIterator()
 * Type:       non-virtual method
 * Definition: NodeTrackIterator Ogre::Animation::getNodeTrackIterator
 * Signature:  ()Ogre_Animation_NodeTrackIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1getNodeTrackIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     _getNumericTrackList()
 * Type:       non-virtual method
 * Definition: const NumericTrackList& Ogre::Animation::_getNumericTrackList
 * Signature:  ()Ogre_Animation_NumericTrackList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1_1getNumericTrackList_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getNumericTrackIterator()
 * Type:       non-virtual method
 * Definition: NumericTrackIterator Ogre::Animation::getNumericTrackIterator
 * Signature:  ()Ogre_Animation_NumericTrackIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1getNumericTrackIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     _getVertexTrackList()
 * Type:       non-virtual method
 * Definition: const VertexTrackList& Ogre::Animation::_getVertexTrackList
 * Signature:  ()Ogre_Animation_VertexTrackList
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1_1getVertexTrackList_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getVertexTrackIterator()
 * Type:       non-virtual method
 * Definition: VertexTrackIterator Ogre::Animation::getVertexTrackIterator
 * Signature:  ()Ogre_Animation_VertexTrackIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1getVertexTrackIterator_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     optimise()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::optimise
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1optimise_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean discardIdentityNodeTracks
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     _collectIdentityNodeTracks()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::_collectIdentityNodeTracks
 * Signature:  (Ogre_Animation_TrackHandleList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1_1collectIdentityNodeTracks_1_1TrackHandleListr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong tracks
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     _destroyNodeTracks()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::_destroyNodeTracks
 * Signature:  (Ogre_Animation_TrackHandleList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1_1destroyNodeTracks_1_1TrackHandleListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong tracks
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     clone()
 * Type:       non-virtual method
 * Definition: Animation* Ogre::Animation::clone
 * Signature:  (std_string)Ogre_Animation
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1clone_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring newName
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     _keyFrameListChanged()
 * Type:       non-virtual method
 * Definition: void Ogre::Animation::_keyFrameListChanged
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1_1keyFrameListChanged (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     _getTimeIndex()
 * Type:       non-virtual method
 * Definition: TimeIndex Ogre::Animation::_getTimeIndex
 * Signature:  (float)Ogre_TimeIndex
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Animation__1_1getTimeIndex_1_1Realv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat timePos
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     setDefaultInterpolationMode()
 * Type:       static method
 * Definition: static void Ogre::Animation::setDefaultInterpolationMode
 * Signature:  (Ogre_Animation_InterpolationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1setDefaultInterpolationMode_1_1InterpolationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint im
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getDefaultInterpolationMode()
 * Type:       static method
 * Definition: static InterpolationMode Ogre::Animation::getDefaultInterpolationMode
 * Signature:  ()Ogre_Animation_InterpolationMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Animation__1getDefaultInterpolationMode (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     setDefaultRotationInterpolationMode()
 * Type:       static method
 * Definition: static void Ogre::Animation::setDefaultRotationInterpolationMode
 * Signature:  (Ogre_Animation_RotationInterpolationMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1setDefaultRotationInterpolationMode_1_1RotationInterpolationModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint im
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     getDefaultRotationInterpolationMode()
 * Type:       static method
 * Definition: static RotationInterpolationMode Ogre::Animation::getDefaultRotationInterpolationMode
 * Signature:  ()Ogre_Animation_RotationInterpolationMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Animation__1getDefaultRotationInterpolationMode (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Animation
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Animation::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Animation__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Animation__*/
