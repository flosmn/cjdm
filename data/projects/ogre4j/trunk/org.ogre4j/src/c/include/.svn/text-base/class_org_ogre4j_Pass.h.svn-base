///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_Pass__
#define __Included_org_ogre4j_Pass__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.Pass
 * Method:     Pass()
 * Type:       constructor
 * Definition: Ogre::Pass::Pass
 * Signature:  (Ogre_TechniqueS)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1_1createPass_1_1TechniquepHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jint index
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     Pass()
 * Type:       constructor
 * Definition: Ogre::Pass::Pass
 * Signature:  (Ogre_TechniqueSOgre_Pass)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1_1createPass_1_1TechniquepHvPassR (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent, 
  jint index, 
  jlong oth
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     operator=()
 * Type:       non-virtual method
 * Definition: Pass& Ogre::Pass::operator=
 * Signature:  (Ogre_Pass)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1operatorAssignment_1_1PassR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong oth
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     isProgrammable()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isProgrammable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isProgrammable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     hasVertexProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasVertexProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     hasFragmentProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasFragmentProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     hasGeometryProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasGeometryProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasGeometryProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     hasShadowCasterVertexProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasShadowCasterVertexProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasShadowCasterVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     hasShadowReceiverVertexProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasShadowReceiverVertexProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasShadowReceiverVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     hasShadowReceiverFragmentProgram()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasShadowReceiverFragmentProgram
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasShadowReceiverFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getIndex
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getIndex_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setName()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAmbient
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAmbient_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setAmbient()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAmbient
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAmbient_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDiffuse
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDiffuse_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setDiffuse()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDiffuse
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDiffuse_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong diffuse
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSpecular
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSpecular_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue, 
  jfloat alpha
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSpecular()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSpecular
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSpecular_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong specular
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShininess()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShininess
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShininess_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat val
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSelfIllumination
 * Signature:  (floatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSelfIllumination_1_1RealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat red, 
  jfloat green, 
  jfloat blue
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSelfIllumination()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSelfIllumination
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSelfIllumination_1_1ColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong selfIllum
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setVertexColourTracking()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setVertexColourTracking
 * Signature:  (int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setVertexColourTracking_1_1TrackVertexColourTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint tracking
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointSize()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointSize
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat ps
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointSpritesEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointSpritesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointSpritesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointSpritesEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getPointSpritesEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getPointSpritesEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointAttenuation()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointAttenuation
 * Signature:  (Zfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointAttenuation_1_1bvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jfloat constant, 
  jfloat linear, 
  jfloat quadratic
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     isPointAttenuationEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isPointAttenuationEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isPointAttenuationEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointAttenuationConstant()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointAttenuationConstant
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointAttenuationConstant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointAttenuationLinear()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointAttenuationLinear
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointAttenuationLinear_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointAttenuationQuadratic()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointAttenuationQuadratic
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointAttenuationQuadratic_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointMinSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointMinSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointMinSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _min
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointMinSize()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointMinSize
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointMinSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPointMaxSize()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPointMaxSize
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPointMaxSize_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat _max
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPointMaxSize()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getPointMaxSize
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getPointMaxSize_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getAmbient()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getAmbient
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getAmbient_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDiffuse()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getDiffuse
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getDiffuse_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getSpecular()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getSpecular
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getSpecular_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getSelfIllumination()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getSelfIllumination
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getSelfIllumination_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShininess()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getShininess
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getShininess_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexColourTracking()
 * Type:       non-virtual method
 * Definition: TrackVertexColourType Ogre::Pass::getVertexColourTracking
 * Signature:  ()int
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getVertexColourTracking_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     createTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::createTextureUnitState
 * Signature:  ()Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1createTextureUnitState (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     createTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::createTextureUnitState
 * Signature:  (std_stringS)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1createTextureUnitState_1_1StringRHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring textureName, 
  jint texCoordSet
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     addTextureUnitState()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::addTextureUnitState
 * Signature:  (Ogre_TextureUnitState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1addTextureUnitState_1_1TextureUnitStatep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong state
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (S)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState()
 * Type:       non-virtual method
 * Definition: TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (std_string)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState_const()
 * Type:       non-virtual method
 * Definition: const TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (S)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1const_1_1Hv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitState_const()
 * Type:       non-virtual method
 * Definition: const TextureUnitState* Ogre::Pass::getTextureUnitState
 * Signature:  (std_string)Ogre_TextureUnitState
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitState_1const_1_1StringR_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitStateIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getTextureUnitStateIndex
 * Signature:  (Ogre_TextureUnitState)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getTextureUnitStateIndex_1_1TextureUnitStateP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong state
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitStateIterator()
 * Type:       non-virtual method
 * Definition: TextureUnitStateIterator Ogre::Pass::getTextureUnitStateIterator
 * Signature:  ()Ogre_Pass_TextureUnitStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitStateIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTextureUnitStateIterator_const()
 * Type:       non-virtual method
 * Definition: ConstTextureUnitStateIterator Ogre::Pass::getTextureUnitStateIterator
 * Signature:  ()Ogre_Pass_ConstTextureUnitStateIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getTextureUnitStateIterator_1const_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     removeTextureUnitState()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::removeTextureUnitState
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1removeTextureUnitState_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     removeAllTextureUnitStates()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::removeAllTextureUnitStates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1removeAllTextureUnitStates (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getNumTextureUnitStates()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getNumTextureUnitStates
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getNumTextureUnitStates_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSceneBlending
 * Signature:  (Ogre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSceneBlending_1_1SceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendTypeOgre_SceneBlendType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSeparateSceneBlending_1_1SceneBlendTypeVSceneBlendTypeV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sbt, 
  jint sbta
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSceneBlending_1_1SceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setSeparateSceneBlending_1_1SceneBlendFactorVSceneBlendFactorVSceneBlendFactorVSceneBlendFactorV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor, 
  jint sourceFactorAlpha, 
  jint destFactorAlpha
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     hasSeparateSceneBlending()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::hasSeparateSceneBlending
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1hasSeparateSceneBlending_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getSourceBlendFactor()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getSourceBlendFactor
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getSourceBlendFactor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDestBlendFactor()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getDestBlendFactor
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getDestBlendFactor_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getSourceBlendFactorAlpha()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getSourceBlendFactorAlpha
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getSourceBlendFactorAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDestBlendFactorAlpha()
 * Type:       non-virtual method
 * Definition: SceneBlendFactor Ogre::Pass::getDestBlendFactorAlpha
 * Signature:  ()Ogre_SceneBlendFactor
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getDestBlendFactorAlpha_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     isTransparent()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isTransparent
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isTransparent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthCheckEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getDepthCheckEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getDepthCheckEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthWriteEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getDepthWriteEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getDepthWriteEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthFunction()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthFunction()
 * Type:       non-virtual method
 * Definition: CompareFunction Ogre::Pass::getDepthFunction
 * Signature:  ()Ogre_CompareFunction
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getDepthFunction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setColourWriteEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setColourWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setColourWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getColourWriteEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getColourWriteEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getColourWriteEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setCullingMode
 * Signature:  (Ogre_CullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setCullingMode_1_1CullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getCullingMode()
 * Type:       non-virtual method
 * Definition: CullingMode Ogre::Pass::getCullingMode
 * Signature:  ()Ogre_CullingMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getCullingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setManualCullingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setManualCullingMode
 * Signature:  (Ogre_ManualCullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setManualCullingMode_1_1ManualCullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getManualCullingMode()
 * Type:       non-virtual method
 * Definition: ManualCullingMode Ogre::Pass::getManualCullingMode
 * Signature:  ()Ogre_ManualCullingMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getManualCullingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightingEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getLightingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getLightingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setMaxSimultaneousLights()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setMaxSimultaneousLights
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setMaxSimultaneousLights_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint maxLights
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getMaxSimultaneousLights()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getMaxSimultaneousLights
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getMaxSimultaneousLights_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setStartLight()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setStartLight
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setStartLight_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint startLight
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getStartLight()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getStartLight
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getStartLight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadingMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadingMode
 * Signature:  (Ogre_ShadeOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadingMode_1_1ShadeOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadingMode()
 * Type:       non-virtual method
 * Definition: ShadeOptions Ogre::Pass::getShadingMode
 * Signature:  ()Ogre_ShadeOptions
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getShadingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPolygonMode()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPolygonMode
 * Signature:  (Ogre_PolygonMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPolygonMode_1_1PolygonModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPolygonMode()
 * Type:       non-virtual method
 * Definition: PolygonMode Ogre::Pass::getPolygonMode
 * Signature:  ()Ogre_PolygonMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getPolygonMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual void Ogre::Pass::setPolygonModeOverrideable
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPolygonModeOverrideable_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean override
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPolygonModeOverrideable()
 * Type:       virtual method
 * Definition: virtual bool Ogre::Pass::getPolygonModeOverrideable
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getPolygonModeOverrideable_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setFog()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setFog
 * Signature:  (ZOgre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setFog_1_1bvFogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean overrideScene, 
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogOverride()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getFogOverride
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getFogOverride_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogMode()
 * Type:       non-virtual method
 * Definition: FogMode Ogre::Pass::getFogMode
 * Signature:  ()Ogre_FogMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getFogMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::Pass::getFogColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getFogColour_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogStart()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getFogStart
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getFogStart_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogEnd()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getFogEnd
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getFogEnd_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFogDensity()
 * Type:       non-virtual method
 * Definition: Real Ogre::Pass::getFogDensity
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getFogDensity_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setDepthBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setDepthBias
 * Signature:  (FF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setDepthBias_1_1FvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat constantBias, 
  jfloat slopeScaleBias
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthBiasConstant()
 * Type:       non-virtual method
 * Definition: float Ogre::Pass::getDepthBiasConstant
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getDepthBiasConstant_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDepthBiasSlopeScale()
 * Type:       non-virtual method
 * Definition: float Ogre::Pass::getDepthBiasSlopeScale
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getDepthBiasSlopeScale_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setIterationDepthBias()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setIterationDepthBias
 * Signature:  (F)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setIterationDepthBias_1_1Fv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat biasPerIteration
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getIterationDepthBias()
 * Type:       non-virtual method
 * Definition: float Ogre::Pass::getIterationDepthBias
 * Signature:  ()F
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_Pass__1getIterationDepthBias_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaRejectSettings()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaRejectSettings
 * Signature:  (Ogre_CompareFunctionCZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaRejectSettings_1_1CompareFunctionvBvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func, 
  jshort value, 
  jboolean alphaToCoverageEnabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaRejectFunction()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaRejectFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaRejectFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaRejectValue()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaRejectValue
 * Signature:  (C)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaRejectValue_1_1Bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort val
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getAlphaRejectFunction()
 * Type:       non-virtual method
 * Definition: CompareFunction Ogre::Pass::getAlphaRejectFunction
 * Signature:  ()Ogre_CompareFunction
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getAlphaRejectFunction_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getAlphaRejectValue()
 * Type:       non-virtual method
 * Definition: unsigned char Ogre::Pass::getAlphaRejectValue
 * Signature:  ()C
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_Pass__1getAlphaRejectValue_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setAlphaToCoverageEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setAlphaToCoverageEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setAlphaToCoverageEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     isAlphaToCoverageEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isAlphaToCoverageEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isAlphaToCoverageEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setTransparentSortingEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setTransparentSortingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setTransparentSortingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getTransparentSortingEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getTransparentSortingEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getTransparentSortingEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setIteratePerLight()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setIteratePerLight
 * Signature:  (ZZOgre_Light_LightTypes)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setIteratePerLight_1_1bvbvLight_1LightTypesv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jboolean onlyForOneLightType, 
  jint lightType
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getIteratePerLight()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getIteratePerLight
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getIteratePerLight_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getRunOnlyForOneLightType()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getRunOnlyForOneLightType
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getRunOnlyForOneLightType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getOnlyLightType()
 * Type:       non-virtual method
 * Definition: Light::LightTypes Ogre::Pass::getOnlyLightType
 * Signature:  ()Ogre_Light_LightTypes
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getOnlyLightType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightCountPerIteration()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightCountPerIteration
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightCountPerIteration_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint c
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightCountPerIteration()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::getLightCountPerIteration
 * Signature:  ()S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getLightCountPerIteration_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: Technique* Ogre::Pass::getParent
 * Signature:  ()Ogre_Technique
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getParent_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getResourceGroup()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getResourceGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getResourceGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setVertexProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setVertexProgram
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setVertexProgram_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean resetParams
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setVertexProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setVertexProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getVertexProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getVertexProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getVertexProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getVertexProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getVertexProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getVertexProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowCasterVertexProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowCasterVertexProgram
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowCasterVertexProgram_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowCasterVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowCasterVertexProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowCasterVertexProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowCasterVertexProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getShadowCasterVertexProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getShadowCasterVertexProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowCasterVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getShadowCasterVertexProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowCasterVertexProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowCasterVertexProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getShadowCasterVertexProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowCasterVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverVertexProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverVertexProgram
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverVertexProgram_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverVertexProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverVertexProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverFragmentProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverFragmentProgram
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverFragmentProgram_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setShadowReceiverFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setShadowReceiverFragmentProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setShadowReceiverFragmentProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverVertexProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getShadowReceiverVertexProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getShadowReceiverVertexProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverVertexProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getShadowReceiverVertexProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverVertexProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverVertexProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getShadowReceiverVertexProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverVertexProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverFragmentProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getShadowReceiverFragmentProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getShadowReceiverFragmentProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getShadowReceiverFragmentProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverFragmentProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getShadowReceiverFragmentProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getShadowReceiverFragmentProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getShadowReceiverFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setFragmentProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setFragmentProgram
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setFragmentProgram_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean resetParams
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setFragmentProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setFragmentProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFragmentProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getFragmentProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getFragmentProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFragmentProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getFragmentProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getFragmentProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getFragmentProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getFragmentProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getFragmentProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setGeometryProgram()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setGeometryProgram
 * Signature:  (std_stringZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setGeometryProgram_1_1StringRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jboolean resetParams
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setGeometryProgramParameters()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setGeometryProgramParameters
 * Signature:  (Ogre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setGeometryProgramParameters_1_1GpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong params
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getGeometryProgramName()
 * Type:       non-virtual method
 * Definition: const String& Ogre::Pass::getGeometryProgramName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_Pass__1getGeometryProgramName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getGeometryProgramParameters()
 * Type:       non-virtual method
 * Definition: GpuProgramParametersSharedPtr Ogre::Pass::getGeometryProgramParameters
 * Signature:  ()Ogre_GpuProgramParametersSharedPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getGeometryProgramParameters_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getGeometryProgram()
 * Type:       non-virtual method
 * Definition: const GpuProgramPtr& Ogre::Pass::getGeometryProgram
 * Signature:  ()Ogre_GpuProgramPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getGeometryProgram_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _split()
 * Type:       non-virtual method
 * Definition: Pass* Ogre::Pass::_split
 * Signature:  (S)Ogre_Pass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1_1split_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint numUnits
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _notifyIndex()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_notifyIndex
 * Signature:  (S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1notifyIndex_1_1Hv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _prepare()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_prepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1prepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _unprepare()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_unprepare
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1unprepare (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _load()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_load
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1load (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _unload()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_unload
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1unload (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     isLoaded()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isLoaded
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isLoaded_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getHash()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::Pass::getHash
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getHash_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _dirtyHash()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_dirtyHash
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1dirtyHash (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _recalculateHash()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_recalculateHash
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1recalculateHash (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _notifyNeedsRecompile()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_notifyNeedsRecompile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1notifyNeedsRecompile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _updateAutoParamsNoLights()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_updateAutoParamsNoLights
 * Signature:  (Ogre_AutoParamDataSource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1updateAutoParamsNoLights_1_1AutoParamDataSourceP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _updateAutoParamsLightsOnly()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::_updateAutoParamsLightsOnly
 * Signature:  (Ogre_AutoParamDataSource)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1updateAutoParamsLightsOnly_1_1AutoParamDataSourceP_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong source
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     _getTextureUnitWithContentTypeIndex()
 * Type:       non-virtual method
 * Definition: unsigned short Ogre::Pass::_getTextureUnitWithContentTypeIndex
 * Signature:  (Ogre_TextureUnitState_ContentTypeS)S
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1_1getTextureUnitWithContentTypeIndex_1_1TextureUnitState_1ContentTypevHv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint contentType, 
  jint index
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setTextureFiltering()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setTextureFiltering
 * Signature:  (Ogre_TextureFilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setTextureFiltering_1_1TextureFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint filterType
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setTextureAnisotropy()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setTextureAnisotropy
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setTextureAnisotropy_1_1Iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong maxAniso
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setNormaliseNormals()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setNormaliseNormals
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setNormaliseNormals_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean normalise
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getNormaliseNormals()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getNormaliseNormals
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getNormaliseNormals_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     queueForDeletion()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::queueForDeletion
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1queueForDeletion (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     isAmbientOnly()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::isAmbientOnly
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1isAmbientOnly_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setPassIterationCount()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setPassIterationCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setPassIterationCount_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPassIterationCount()
 * Type:       non-virtual method
 * Definition: size_t Ogre::Pass::getPassIterationCount
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getPassIterationCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     applyTextureAliases()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::applyTextureAliases
 * Signature:  (Ogre_AliasTextureNamePairListZ)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1applyTextureAliases_1_1AliasTextureNamePairListRbV_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong aliasList, 
  jboolean apply
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightScissoringEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightScissoringEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightScissoringEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightScissoringEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getLightScissoringEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getLightScissoringEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setLightClipPlanesEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setLightClipPlanesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setLightClipPlanesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getLightClipPlanesEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::Pass::getLightClipPlanesEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_Pass__1getLightClipPlanesEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setIlluminationStage()
 * Type:       non-virtual method
 * Definition: void Ogre::Pass::setIlluminationStage
 * Signature:  (Ogre_IlluminationStage)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setIlluminationStage_1_1IlluminationStagev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint is
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getIlluminationStage()
 * Type:       non-virtual method
 * Definition: IlluminationStage Ogre::Pass::getIlluminationStage
 * Signature:  ()Ogre_IlluminationStage
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_Pass__1getIlluminationStage_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getDirtyHashList()
 * Type:       static method
 * Definition: static const PassSet& Ogre::Pass::getDirtyHashList
 * Signature:  ()Ogre_Pass_PassSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getDirtyHashList (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getPassGraveyard()
 * Type:       static method
 * Definition: static const PassSet& Ogre::Pass::getPassGraveyard
 * Signature:  ()Ogre_Pass_PassSet
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getPassGraveyard (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     clearDirtyHashList()
 * Type:       static method
 * Definition: static void Ogre::Pass::clearDirtyHashList
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1clearDirtyHashList (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     processPendingPassUpdates()
 * Type:       static method
 * Definition: static void Ogre::Pass::processPendingPassUpdates
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1processPendingPassUpdates (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setHashFunction()
 * Type:       static method
 * Definition: static void Ogre::Pass::setHashFunction
 * Signature:  (Ogre_Pass_BuiltinHashFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setHashFunction_1_1BuiltinHashFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jint builtin
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     setHashFunction()
 * Type:       static method
 * Definition: static void Ogre::Pass::setHashFunction
 * Signature:  (Ogre_Pass_HashFunc)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1setHashFunction_1_1HashFuncp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong hashFunc
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     getHashFunction()
 * Type:       static method
 * Definition: static HashFunc* Ogre::Pass::getHashFunction
 * Signature:  ()Ogre_Pass_HashFunc
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_Pass__1getHashFunction (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.Pass
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::Pass::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_Pass__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_Pass__*/
