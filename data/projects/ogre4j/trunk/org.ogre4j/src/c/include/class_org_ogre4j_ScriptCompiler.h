///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_ScriptCompiler__
#define __Included_org_ogre4j_ScriptCompiler__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     ScriptCompiler()
 * Type:       constructor
 * Definition: Ogre::ScriptCompiler::ScriptCompiler
 * Signature:  ()V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompiler__1_1createScriptCompiler (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     compile()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::compile
 * Signature:  (std_stringstd_stringstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1compile_1_1StringRStringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring str, 
  jstring source, 
  jstring group
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     compile()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::compile
 * Signature:  (Ogre_ConcreteNodeListPtrstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1compile_1_1ConcreteNodeListPtrRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong nodes, 
  jstring group
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     _compile()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::_compile
 * Signature:  (Ogre_AbstractNodeListPtrstd_string)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1_1compile_1_1AbstractNodeListPtrvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong nodes, 
  jstring group
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     addError()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::addError
 * Signature:  (unsigned_intstd_stringIstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1addError_1_1uint32vStringRivStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong code, 
  jstring file, 
  jint line, 
  jstring msg
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     setListener()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::setListener
 * Signature:  (Ogre_ScriptCompilerListener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1setListener_1_1ScriptCompilerListenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong listener
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     getListener()
 * Type:       non-virtual method
 * Definition: ScriptCompilerListener* Ogre::ScriptCompiler::getListener
 * Signature:  ()Ogre_ScriptCompilerListener
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompiler__1getListener (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     getResourceGroup()
 * Type:       non-virtual method
 * Definition: const String& Ogre::ScriptCompiler::getResourceGroup
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ScriptCompiler__1getResourceGroup_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     addNameExclusion()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::addNameExclusion
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1addNameExclusion_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring type
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     removeNameExclusion()
 * Type:       non-virtual method
 * Definition: void Ogre::ScriptCompiler::removeNameExclusion
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1removeNameExclusion_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring type
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     _fireEvent()
 * Type:       non-virtual method
 * Definition: bool Ogre::ScriptCompiler::_fireEvent
 * Signature:  (std_stringstd_vector__Any__Ogre_Any)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_ScriptCompiler__1_1fireEvent_1_1StringRstd_1vector_1_1Any_1_1rAnyp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong args, 
  jlong retval
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     _fireCreateObject()
 * Type:       non-virtual method
 * Definition: Any Ogre::ScriptCompiler::_fireCreateObject
 * Signature:  (std_stringstd_vector__Any__)Ogre_Any
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_ScriptCompiler__1_1fireCreateObject_1_1StringRstd_1vector_1_1Any_1_1r (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring type, 
  jlong args
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     formatErrorCode()
 * Type:       static method
 * Definition: static String Ogre::ScriptCompiler::formatErrorCode
 * Signature:  (unsigned_int)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_ScriptCompiler__1formatErrorCode_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong code
);

/*
 * Class:      org.ogre4j.ScriptCompiler
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::ScriptCompiler::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_ScriptCompiler__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_ScriptCompiler__*/
