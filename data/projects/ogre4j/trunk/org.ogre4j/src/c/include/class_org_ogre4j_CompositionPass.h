///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_CompositionPass__
#define __Included_org_ogre4j_CompositionPass__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     CompositionPass()
 * Type:       constructor
 * Definition: Ogre::CompositionPass::CompositionPass
 * Signature:  (Ogre_CompositionTargetPass)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1_1createCompositionPass_1_1CompositionTargetPassp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong parent
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setType()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setType
 * Signature:  (Ogre_CompositionPass_PassType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setType_1_1PassTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint type
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getType()
 * Type:       non-virtual method
 * Definition: PassType Ogre::CompositionPass::getType
 * Signature:  ()Ogre_CompositionPass_PassType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionPass__1getType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setIdentifier()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setIdentifier
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setIdentifier_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong id
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getIdentifier()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::CompositionPass::getIdentifier
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getIdentifier_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setMaterial()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setMaterial
 * Signature:  (Ogre_MaterialPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setMaterial_1_1MaterialPtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong mat
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setMaterialName()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setMaterialName
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setMaterialName_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getMaterial()
 * Type:       non-virtual method
 * Definition: const MaterialPtr& Ogre::CompositionPass::getMaterial
 * Signature:  ()Ogre_MaterialPtr
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getMaterial_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setFirstRenderQueue()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setFirstRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setFirstRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort id
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getFirstRenderQueue()
 * Type:       non-virtual method
 * Definition: uint8 Ogre::CompositionPass::getFirstRenderQueue
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_CompositionPass__1getFirstRenderQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setLastRenderQueue()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setLastRenderQueue
 * Signature:  (unsigned_char)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setLastRenderQueue_1_1uint8v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jshort id
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getLastRenderQueue()
 * Type:       non-virtual method
 * Definition: uint8 Ogre::CompositionPass::getLastRenderQueue
 * Signature:  ()unsigned_char
 */

JNIEXPORT jshort JNICALL Java_org_ogre4j_CompositionPass__1getLastRenderQueue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setClearBuffers()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setClearBuffers
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setClearBuffers_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getClearBuffers()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::CompositionPass::getClearBuffers
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getClearBuffers (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setClearColour()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setClearColour
 * Signature:  (Ogre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setClearColour_1_1ColourValuev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong val
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getClearColour()
 * Type:       non-virtual method
 * Definition: const ColourValue& Ogre::CompositionPass::getClearColour
 * Signature:  ()Ogre_ColourValue
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getClearColour (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setClearDepth()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setClearDepth
 * Signature:  (float)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setClearDepth_1_1Realv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat depth
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getClearDepth()
 * Type:       non-virtual method
 * Definition: Real Ogre::CompositionPass::getClearDepth
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_CompositionPass__1getClearDepth (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setClearStencil()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setClearStencil
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setClearStencil_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getClearStencil()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::CompositionPass::getClearStencil
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getClearStencil (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilCheck()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilCheck
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilCheck_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilCheck()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionPass::getStencilCheck
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionPass__1getStencilCheck (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilFunc()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilFunc
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilFunc_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilFunc()
 * Type:       non-virtual method
 * Definition: CompareFunction Ogre::CompositionPass::getStencilFunc
 * Signature:  ()Ogre_CompareFunction
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionPass__1getStencilFunc (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilRefValue()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilRefValue
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilRefValue_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilRefValue()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::CompositionPass::getStencilRefValue
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getStencilRefValue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilMask()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilMask
 * Signature:  (unsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilMask_1_1uint32v (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilMask()
 * Type:       non-virtual method
 * Definition: uint32 Ogre::CompositionPass::getStencilMask
 * Signature:  ()unsigned_int
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getStencilMask (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilFailOp()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilFailOp
 * Signature:  (Ogre_StencilOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilFailOp_1_1StencilOperationv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilFailOp()
 * Type:       non-virtual method
 * Definition: StencilOperation Ogre::CompositionPass::getStencilFailOp
 * Signature:  ()Ogre_StencilOperation
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionPass__1getStencilFailOp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilDepthFailOp()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilDepthFailOp
 * Signature:  (Ogre_StencilOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilDepthFailOp_1_1StencilOperationv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilDepthFailOp()
 * Type:       non-virtual method
 * Definition: StencilOperation Ogre::CompositionPass::getStencilDepthFailOp
 * Signature:  ()Ogre_StencilOperation
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionPass__1getStencilDepthFailOp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilPassOp()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilPassOp
 * Signature:  (Ogre_StencilOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilPassOp_1_1StencilOperationv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilPassOp()
 * Type:       non-virtual method
 * Definition: StencilOperation Ogre::CompositionPass::getStencilPassOp
 * Signature:  ()Ogre_StencilOperation
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionPass__1getStencilPassOp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setStencilTwoSidedOperation()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setStencilTwoSidedOperation
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setStencilTwoSidedOperation_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean value
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getStencilTwoSidedOperation()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionPass::getStencilTwoSidedOperation
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionPass__1getStencilTwoSidedOperation (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setInput()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setInput
 * Signature:  (Istd_stringI)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setInput_1_1ivStringRiv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint id, 
  jstring input, 
  jint mrtIndex
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getInput()
 * Type:       non-virtual method
 * Definition: const InputTex& Ogre::CompositionPass::getInput
 * Signature:  (I)Ogre_CompositionPass_InputTex
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getInput_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint id
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getNumInputs()
 * Type:       non-virtual method
 * Definition: size_t Ogre::CompositionPass::getNumInputs
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositionPass__1getNumInputs (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     clearAllInputs()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::clearAllInputs
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1clearAllInputs (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getParent()
 * Type:       non-virtual method
 * Definition: CompositionTargetPass* Ogre::CompositionPass::getParent
 * Signature:  ()Ogre_CompositionTargetPass
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositionPass__1getParent (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     _isSupported()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionPass::_isSupported
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionPass__1_1isSupported (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     setQuadCorners()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositionPass::setQuadCorners
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1setQuadCorners_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat top, 
  jfloat right, 
  jfloat bottom
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     getQuadCorners()
 * Type:       non-virtual method
 * Definition: bool Ogre::CompositionPass::getQuadCorners
 * Signature:  (floatfloatfloatfloat)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_CompositionPass__1getQuadCorners_1_1RealrRealrRealrRealr_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong left, 
  jlong top, 
  jlong right, 
  jlong bottom
);

/*
 * Class:      org.ogre4j.CompositionPass
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::CompositionPass::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositionPass__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_CompositionPass__*/
