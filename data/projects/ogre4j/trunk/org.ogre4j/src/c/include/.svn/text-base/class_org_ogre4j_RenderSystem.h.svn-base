///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_RenderSystem__
#define __Included_org_ogre4j_RenderSystem__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getName()
 * Type:       pure virtual method
 * Definition: virtual const String& Ogre::RenderSystem::getName
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystem__1getName_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getConfigOptions()
 * Type:       pure virtual method
 * Definition: virtual ConfigOptionMap& Ogre::RenderSystem::getConfigOptions
 * Signature:  ()Ogre_ConfigOptionMap
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getConfigOptions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setConfigOption()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setConfigOption
 * Signature:  (std_stringstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setConfigOption_1_1StringRStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jstring value
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     createHardwareOcclusionQuery()
 * Type:       pure virtual method
 * Definition: virtual HardwareOcclusionQuery* Ogre::RenderSystem::createHardwareOcclusionQuery
 * Signature:  ()Ogre_HardwareOcclusionQuery
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1createHardwareOcclusionQuery (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyHardwareOcclusionQuery()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyHardwareOcclusionQuery
 * Signature:  (Ogre_HardwareOcclusionQuery)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyHardwareOcclusionQuery_1_1HardwareOcclusionQueryp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong hq
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     validateConfigOptions()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::RenderSystem::validateConfigOptions
 * Signature:  ()std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystem__1validateConfigOptions (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _initialise()
 * Type:       virtual method
 * Definition: virtual RenderWindow* Ogre::RenderSystem::_initialise
 * Signature:  (Zstd_string)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1initialise_1_1bvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean autoCreateWindow, 
  jstring windowTitle
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     createRenderSystemCapabilities()
 * Type:       pure virtual method
 * Definition: virtual RenderSystemCapabilities* Ogre::RenderSystem::createRenderSystemCapabilities
 * Signature:  ()Ogre_RenderSystemCapabilities
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1createRenderSystemCapabilities_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     useCustomRenderSystemCapabilities()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::useCustomRenderSystemCapabilities
 * Signature:  (Ogre_RenderSystemCapabilities)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1useCustomRenderSystemCapabilities_1_1RenderSystemCapabilitiesp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong capabilities
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     reinitialise()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::reinitialise
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1reinitialise (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     shutdown()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::shutdown
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1shutdown (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setAmbientLight()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setAmbientLight
 * Signature:  (FFF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setAmbientLight_1_1FvFvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat r, 
  jfloat g, 
  jfloat b
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setShadingType()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setShadingType
 * Signature:  (Ogre_ShadeOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setShadingType_1_1ShadeOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint so
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setLightingEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setLightingEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setLightingEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setWBufferEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystem::setWBufferEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setWBufferEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getWBufferEnabled()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystem::getWBufferEnabled
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystem__1getWBufferEnabled_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _createRenderWindow()
 * Type:       pure virtual method
 * Definition: virtual RenderWindow* Ogre::RenderSystem::_createRenderWindow
 * Signature:  (std_stringIIZOgre_NameValuePairList)Ogre_RenderWindow
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1createRenderWindow_1_1StringRIvIvbvNameValuePairListP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name, 
  jlong width, 
  jlong height, 
  jboolean fullScreen, 
  jlong miscParams
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     createMultiRenderTarget()
 * Type:       pure virtual method
 * Definition: virtual MultiRenderTarget* Ogre::RenderSystem::createMultiRenderTarget
 * Signature:  (std_string)Ogre_MultiRenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1createMultiRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyRenderWindow()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyRenderWindow
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyRenderWindow_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyRenderTexture()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyRenderTexture
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyRenderTexture_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     destroyRenderTarget()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::destroyRenderTarget
 * Signature:  (std_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1destroyRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     attachRenderTarget()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::attachRenderTarget
 * Signature:  (Ogre_RenderTarget)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1attachRenderTarget_1_1RenderTargetr (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong target
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getRenderTarget()
 * Type:       virtual method
 * Definition: virtual RenderTarget* Ogre::RenderSystem::getRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     detachRenderTarget()
 * Type:       virtual method
 * Definition: virtual RenderTarget* Ogre::RenderSystem::detachRenderTarget
 * Signature:  (std_string)Ogre_RenderTarget
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1detachRenderTarget_1_1StringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jstring name
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getRenderTargetIterator()
 * Type:       virtual method
 * Definition: virtual RenderTargetIterator Ogre::RenderSystem::getRenderTargetIterator
 * Signature:  ()Ogre_RenderSystem_RenderTargetIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getRenderTargetIterator (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getErrorDescription()
 * Type:       pure virtual method
 * Definition: virtual String Ogre::RenderSystem::getErrorDescription
 * Signature:  (J)std_string
 */

JNIEXPORT jstring JNICALL Java_org_ogre4j_RenderSystem__1getErrorDescription_1_1lv_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong errorNumber
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setWaitForVerticalBlank()
 * Type:       non-virtual method
 * Definition: void Ogre::RenderSystem::setWaitForVerticalBlank
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setWaitForVerticalBlank_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getWaitForVerticalBlank()
 * Type:       non-virtual method
 * Definition: bool Ogre::RenderSystem::getWaitForVerticalBlank
 * Signature:  ()Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystem__1getWaitForVerticalBlank_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _useLights()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_useLights
 * Signature:  (Ogre_LightListS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1useLights_1_1LightListRHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong lights, 
  jint limit
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setWorldMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setWorldMatrix
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setWorldMatrix_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setWorldMatrices()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setWorldMatrices
 * Signature:  (Ogre_Matrix4S)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setWorldMatrices_1_1Matrix4PHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m, 
  jint count
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setViewMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setViewMatrix
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setViewMatrix_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setProjectionMatrix
 * Signature:  (Ogre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setProjectionMatrix_1_1Matrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong m
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureUnitSettings()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureUnitSettings
 * Signature:  (IOgre_TextureUnitState)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureUnitSettings_1_1ivTextureUnitStater (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint texUnit, 
  jlong tl
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _disableTextureUnit()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_disableTextureUnit
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1disableTextureUnit_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint texUnit
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _disableTextureUnitsFrom()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_disableTextureUnitsFrom
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1disableTextureUnitsFrom_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint texUnit
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setSurfaceParams()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setSurfaceParams
 * Signature:  (Ogre_ColourValueOgre_ColourValueOgre_ColourValueOgre_ColourValuefloatint)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setSurfaceParams_1_1ColourValueRColourValueRColourValueRColourValueRRealvTrackVertexColourTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong ambient, 
  jlong diffuse, 
  jlong specular, 
  jlong emissive, 
  jfloat shininess, 
  jint tracking
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setPointSpritesEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setPointSpritesEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setPointSpritesEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setPointParameters()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setPointParameters
 * Signature:  (floatZfloatfloatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setPointParameters_1_1RealvbvRealvRealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat size, 
  jboolean attenuationEnabled, 
  jfloat constant, 
  jfloat linear, 
  jfloat quadratic, 
  jfloat minSize, 
  jfloat maxSize
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTexture()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTexture
 * Signature:  (IZOgre_TexturePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTexture_1_1ivbvTexturePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jboolean enabled, 
  jlong texPtr
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTexture()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTexture
 * Signature:  (IZstd_string)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTexture_1_1ivbvStringR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jboolean enabled, 
  jstring texname
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setVertexTexture()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setVertexTexture
 * Signature:  (IOgre_TexturePtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setVertexTexture_1_1ivTexturePtrR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong tex
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureCoordSet()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureCoordSet
 * Signature:  (II)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureCoordSet_1_1iviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint index
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureCoordCalculation()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureCoordCalculation
 * Signature:  (IOgre_TexCoordCalcMethodOgre_Frustum)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureCoordCalculation_1_1ivTexCoordCalcMethodvFrustumP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint m, 
  jlong frustum
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureBlendMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureBlendMode
 * Signature:  (IOgre_LayerBlendModeEx)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureBlendMode_1_1ivLayerBlendModeExR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong bm
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureUnitFiltering()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureUnitFiltering
 * Signature:  (IOgre_FilterOptionsOgre_FilterOptionsOgre_FilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureUnitFiltering_1_1ivFilterOptionsvFilterOptionsvFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint minFilter, 
  jint magFilter, 
  jint mipFilter
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureUnitFiltering()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureUnitFiltering
 * Signature:  (IOgre_FilterTypeOgre_FilterOptions)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureUnitFiltering_1_1ivFilterTypevFilterOptionsv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jint ftype, 
  jint filter
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureLayerAnisotropy()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureLayerAnisotropy
 * Signature:  (II)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureLayerAnisotropy_1_1ivIv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong maxAnisotropy
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureAddressingMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureAddressingMode
 * Signature:  (IOgre_TextureUnitState_UVWAddressingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureAddressingMode_1_1ivTextureUnitState_1UVWAddressingModeR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong uvw
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureBorderColour()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureBorderColour
 * Signature:  (IOgre_ColourValue)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureBorderColour_1_1ivColourValueR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong colour
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureMipmapBias()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureMipmapBias
 * Signature:  (IF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureMipmapBias_1_1ivFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jfloat bias
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureMatrix
 * Signature:  (IOgre_Matrix4)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureMatrix_1_1ivMatrix4R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint unit, 
  jlong xform
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setSceneBlending()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setSceneBlending_1_1SceneBlendFactorvSceneBlendFactorv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setSeparateSceneBlending()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setSeparateSceneBlending
 * Signature:  (Ogre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactorOgre_SceneBlendFactor)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setSeparateSceneBlending_1_1SceneBlendFactorvSceneBlendFactorvSceneBlendFactorvSceneBlendFactorv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint sourceFactor, 
  jint destFactor, 
  jint sourceFactorAlpha, 
  jint destFactorAlpha
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setAlphaRejectSettings()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setAlphaRejectSettings
 * Signature:  (Ogre_CompareFunctionCZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setAlphaRejectSettings_1_1CompareFunctionvBvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func, 
  jshort value, 
  jboolean alphaToCoverage
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setTextureProjectionRelativeTo()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_setTextureProjectionRelativeTo
 * Signature:  (ZOgre_Vector3)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setTextureProjectionRelativeTo_1_1bvVector3R (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jlong pos
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _beginFrame()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_beginFrame
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1beginFrame (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _endFrame()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_endFrame
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1endFrame (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setViewport()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setViewport
 * Signature:  (Ogre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setViewport_1_1Viewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vp
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getViewport()
 * Type:       virtual method
 * Definition: virtual Viewport* Ogre::RenderSystem::_getViewport
 * Signature:  ()Ogre_Viewport
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getViewport (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setCullingMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setCullingMode
 * Signature:  (Ogre_CullingMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setCullingMode_1_1CullingModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getCullingMode()
 * Type:       virtual method
 * Definition: virtual CullingMode Ogre::RenderSystem::_getCullingMode
 * Signature:  ()Ogre_CullingMode
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystem__1_1getCullingMode_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferParams()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferParams
 * Signature:  (ZZOgre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferParams_1_1bvbvCompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean depthTest, 
  jboolean depthWrite, 
  jint depthFunction
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferCheckEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferWriteEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferWriteEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferWriteEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBufferFunction()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBufferFunction
 * Signature:  (Ogre_CompareFunction)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBufferFunction_1_1CompareFunctionv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setColourBufferWriteEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setColourBufferWriteEnabled
 * Signature:  (ZZZZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setColourBufferWriteEnabled_1_1bvbvbvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean red, 
  jboolean green, 
  jboolean blue, 
  jboolean alpha
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setDepthBias()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setDepthBias
 * Signature:  (FF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setDepthBias_1_1FvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat constantBias, 
  jfloat slopeScaleBias
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setFog()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setFog
 * Signature:  (Ogre_FogModeOgre_ColourValuefloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setFog_1_1FogModevColourValueRRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint mode, 
  jlong colour, 
  jfloat expDensity, 
  jfloat linearStart, 
  jfloat linearEnd
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _beginGeometryCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_beginGeometryCount
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1beginGeometryCount (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getFaceCount()
 * Type:       virtual method
 * Definition: virtual unsigned int Ogre::RenderSystem::_getFaceCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getFaceCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getBatchCount()
 * Type:       virtual method
 * Definition: virtual unsigned int Ogre::RenderSystem::_getBatchCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getBatchCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _getVertexCount()
 * Type:       virtual method
 * Definition: virtual unsigned int Ogre::RenderSystem::_getVertexCount
 * Signature:  ()I
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1_1getVertexCount_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     convertColourValue()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::convertColourValue
 * Signature:  (Ogre_ColourValueunsigned_int)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1convertColourValue_1_1ColourValueRuint32p (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong colour, 
  jlong pDest
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getColourVertexElementType()
 * Type:       pure virtual method
 * Definition: virtual VertexElementType Ogre::RenderSystem::getColourVertexElementType
 * Signature:  ()Ogre_VertexElementType
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_RenderSystem__1getColourVertexElementType_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _convertProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_convertProjectionMatrix
 * Signature:  (Ogre_Matrix4Ogre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1convertProjectionMatrix_1_1Matrix4RMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong matrix, 
  jlong dest, 
  jboolean forGpuProgram
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _makeProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_makeProjectionMatrix
 * Signature:  (Ogre_RadianfloatfloatfloatOgre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1makeProjectionMatrix_1_1RadianRRealvRealvRealvMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fovy, 
  jfloat aspect, 
  jfloat nearPlane, 
  jfloat farPlane, 
  jlong dest, 
  jboolean forGpuProgram
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _makeProjectionMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_makeProjectionMatrix
 * Signature:  (floatfloatfloatfloatfloatfloatOgre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1makeProjectionMatrix_1_1RealvRealvRealvRealvRealvRealvMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat left, 
  jfloat right, 
  jfloat bottom, 
  jfloat top, 
  jfloat nearPlane, 
  jfloat farPlane, 
  jlong dest, 
  jboolean forGpuProgram
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _makeOrthoMatrix()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_makeOrthoMatrix
 * Signature:  (Ogre_RadianfloatfloatfloatOgre_Matrix4Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1makeOrthoMatrix_1_1RadianRRealvRealvRealvMatrix4rbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong fovy, 
  jfloat aspect, 
  jfloat nearPlane, 
  jfloat farPlane, 
  jlong dest, 
  jboolean forGpuProgram
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _applyObliqueDepthProjection()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_applyObliqueDepthProjection
 * Signature:  (Ogre_Matrix4Ogre_PlaneZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1applyObliqueDepthProjection_1_1Matrix4rPlaneRbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong matrix, 
  jlong plane, 
  jboolean forGpuProgram
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _setPolygonMode()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::_setPolygonMode
 * Signature:  (Ogre_PolygonMode)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1setPolygonMode_1_1PolygonModev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint level
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setStencilCheckEnabled()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setStencilCheckEnabled
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setStencilCheckEnabled_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setStencilBufferParams()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setStencilBufferParams
 * Signature:  (Ogre_CompareFunctionunsigned_intunsigned_intOgre_StencilOperationOgre_StencilOperationOgre_StencilOperationZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setStencilBufferParams_1_1CompareFunctionvuint32vuint32vStencilOperationvStencilOperationvStencilOperationvbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint func, 
  jlong refValue, 
  jlong mask, 
  jint stencilFailOp, 
  jint depthFailOp, 
  jint passOp, 
  jboolean twoSidedOperation
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setVertexDeclaration()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setVertexDeclaration
 * Signature:  (Ogre_VertexDeclaration)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setVertexDeclaration_1_1VertexDeclarationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong decl
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setVertexBufferBinding()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setVertexBufferBinding
 * Signature:  (Ogre_VertexBufferBinding)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setVertexBufferBinding_1_1VertexBufferBindingp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong binding
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setNormaliseNormals()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setNormaliseNormals
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setNormaliseNormals_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean normalise
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _render()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_render
 * Signature:  (Ogre_RenderOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1render_1_1RenderOperationR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getCapabilities()
 * Type:       non-virtual method
 * Definition: const RenderSystemCapabilities* Ogre::RenderSystem::getCapabilities
 * Signature:  ()Ogre_RenderSystemCapabilities
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getCapabilities_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getDriverVersion()
 * Type:       virtual method
 * Definition: virtual const DriverVersion& Ogre::RenderSystem::getDriverVersion
 * Signature:  ()Ogre_DriverVersion
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getDriverVersion_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     bindGpuProgram()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::bindGpuProgram
 * Signature:  (Ogre_GpuProgram)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1bindGpuProgram_1_1GpuProgramp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong prg
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     bindGpuProgramParameters()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::bindGpuProgramParameters
 * Signature:  (Ogre_GpuProgramTypeOgre_GpuProgramParametersSharedPtr)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1bindGpuProgramParameters_1_1GpuProgramTypevGpuProgramParametersSharedPtrv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype, 
  jlong params
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     bindGpuProgramPassIterationParameters()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::bindGpuProgramPassIterationParameters
 * Signature:  (Ogre_GpuProgramType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1bindGpuProgramPassIterationParameters_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     unbindGpuProgram()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::unbindGpuProgram
 * Signature:  (Ogre_GpuProgramType)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1unbindGpuProgram_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     isGpuProgramBound()
 * Type:       virtual method
 * Definition: virtual bool Ogre::RenderSystem::isGpuProgramBound
 * Signature:  (Ogre_GpuProgramType)Z
 */

JNIEXPORT jboolean JNICALL Java_org_ogre4j_RenderSystem__1isGpuProgramBound_1_1GpuProgramTypev (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint gptype
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setClipPlanes()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setClipPlanes
 * Signature:  (Ogre_PlaneList)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setClipPlanes_1_1PlaneListR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong clipPlanes
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     addClipPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::addClipPlane
 * Signature:  (Ogre_Plane)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1addClipPlane_1_1PlaneR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong p
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     addClipPlane()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::addClipPlane
 * Signature:  (floatfloatfloatfloat)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1addClipPlane_1_1RealvRealvRealvRealv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jfloat A, 
  jfloat B, 
  jfloat C, 
  jfloat D
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     resetClipPlanes()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::resetClipPlanes
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1resetClipPlanes (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _initRenderTargets()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_initRenderTargets
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1initRenderTargets (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _notifyCameraRemoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_notifyCameraRemoved
 * Signature:  (Ogre_Camera)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1notifyCameraRemoved_1_1CameraP (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong cam
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _updateAllRenderTargets()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_updateAllRenderTargets
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1updateAllRenderTargets_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean swapBuffers
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     _swapAllRenderTargetBuffers()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::_swapAllRenderTargetBuffers
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1swapAllRenderTargetBuffers_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean waitForVsync
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setInvertVertexWinding()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setInvertVertexWinding
 * Signature:  (Z)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setInvertVertexWinding_1_1bv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean invert
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setScissorTest()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::setScissorTest
 * Signature:  (ZIIII)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setScissorTest_1_1bviviviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean enabled, 
  jint left, 
  jint top, 
  jint right, 
  jint bottom
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     clearFrameBuffer()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::clearFrameBuffer
 * Signature:  (IOgre_ColourValuefloatS)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1clearFrameBuffer_1_1IvColourValueRRealvHv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong buffers, 
  jlong colour, 
  jfloat depth, 
  jint stencil
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getHorizontalTexelOffset()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getHorizontalTexelOffset
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getHorizontalTexelOffset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getVerticalTexelOffset()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getVerticalTexelOffset
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getVerticalTexelOffset (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getMinimumDepthInputValue()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getMinimumDepthInputValue
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getMinimumDepthInputValue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getMaximumDepthInputValue()
 * Type:       pure virtual method
 * Definition: virtual Real Ogre::RenderSystem::getMaximumDepthInputValue
 * Signature:  ()float
 */

JNIEXPORT jfloat JNICALL Java_org_ogre4j_RenderSystem__1getMaximumDepthInputValue (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setCurrentPassIterationCount()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setCurrentPassIterationCount
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setCurrentPassIterationCount_1_1iV (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint count
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     setDeriveDepthBias()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::setDeriveDepthBias
 * Signature:  (ZFFF)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1setDeriveDepthBias_1_1bvFvFvFv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jboolean derive, 
  jfloat baseValue, 
  jfloat multiplier, 
  jfloat slopeScale
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     addListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::addListener
 * Signature:  (Ogre_RenderSystem_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1addListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     removeListener()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderSystem::removeListener
 * Signature:  (Ogre_RenderSystem_Listener)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1removeListener_1_1Listenerp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong l
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     getRenderSystemEvents()
 * Type:       virtual method
 * Definition: virtual const StringVector& Ogre::RenderSystem::getRenderSystemEvents
 * Signature:  ()Ogre_StringVector
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_RenderSystem__1getRenderSystemEvents_1const (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     preExtraThreadsStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::preExtraThreadsStarted
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1preExtraThreadsStarted (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     postExtraThreadsStarted()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::postExtraThreadsStarted
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1postExtraThreadsStarted (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     registerThread()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::registerThread
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1registerThread (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     unregisterThread()
 * Type:       pure virtual method
 * Definition: virtual void Ogre::RenderSystem::unregisterThread
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1unregisterThread (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.RenderSystem
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::RenderSystem::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_RenderSystem__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_RenderSystem__*/
