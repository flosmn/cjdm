///////////////////////////////////////////////////////////////////////////////
/// This source file is generated by XBiG (The XSLT Bindings Generator)
/// For the latest info, see http://sourceforge.net/projects/xbig/
///
/// Copyright (c) 2004-2008 NetAllied Systems GmbH, Ravensburg. All rights reserved.
/// Also see acknowledgements in Readme.html
///
/// This program is free software; you can redistribute it and/or modify it under
/// the terms of the GNU Lesser General Public License as published by the Free Software
/// Foundation; either version 2 of the License, or (at your option) any later
/// version.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
/// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place - Suite 330, Boston, MA 02111-1307, USA, or go to
/// http://www.gnu.org/copyleft/lesser.txt.
///
/// Machine generated file
///////////////////////////////////////////////////////////////////////////////



#ifdef WIN32
	// disable warnings
	#pragma warning (disable : 4267) // conversion from 'size_t' to 'jint'
#else

#endif


#ifndef __Included_org_ogre4j_CompositorChain__
#define __Included_org_ogre4j_CompositorChain__


#include "jni_base.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     CompositorChain()
 * Type:       constructor
 * Definition: Ogre::CompositorChain::CompositorChain
 * Signature:  (Ogre_Viewport)V
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1_1createCompositorChain_1_1Viewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_,  /* class pointer */
  jlong vp
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     addCompositor()
 * Type:       non-virtual method
 * Definition: CompositorInstance* Ogre::CompositorChain::addCompositor
 * Signature:  (Ogre_CompositorPtrII)Ogre_CompositorInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1addCompositor_1_1CompositorPtrviviv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong filter, 
  jint addPosition, 
  jint technique
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     removeCompositor()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::removeCompositor
 * Signature:  (I)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1removeCompositor_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint position
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getNumCompositors()
 * Type:       non-virtual method
 * Definition: size_t Ogre::CompositorChain::getNumCompositors
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositorChain__1getNumCompositors (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     removeAllCompositors()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::removeAllCompositors
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1removeAllCompositors (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getCompositor()
 * Type:       non-virtual method
 * Definition: CompositorInstance* Ogre::CompositorChain::getCompositor
 * Signature:  (I)Ogre_CompositorInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1getCompositor_1_1iv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint index
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _getOriginalSceneCompositor()
 * Type:       non-virtual method
 * Definition: CompositorInstance* Ogre::CompositorChain::_getOriginalSceneCompositor
 * Signature:  ()Ogre_CompositorInstance
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1_1getOriginalSceneCompositor (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getCompositors()
 * Type:       non-virtual method
 * Definition: InstanceIterator Ogre::CompositorChain::getCompositors
 * Signature:  ()Ogre_CompositorChain_InstanceIterator
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1getCompositors (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     setCompositorEnabled()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::setCompositorEnabled
 * Signature:  (IZ)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1setCompositorEnabled_1_1ivbv (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jint position, 
  jboolean state
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     preRenderTargetUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::preRenderTargetUpdate
 * Signature:  (Ogre_RenderTargetEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1preRenderTargetUpdate_1_1RenderTargetEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     preViewportUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::preViewportUpdate
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1preViewportUpdate_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     postViewportUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::postViewportUpdate
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1postViewportUpdate_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     viewportRemoved()
 * Type:       virtual method
 * Definition: virtual void Ogre::CompositorChain::viewportRemoved
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1viewportRemoved_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _markDirty()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_markDirty
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1markDirty (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getViewport()
 * Type:       non-virtual method
 * Definition: Viewport* Ogre::CompositorChain::getViewport
 * Signature:  ()Ogre_Viewport
 */

JNIEXPORT jlong JNICALL Java_org_ogre4j_CompositorChain__1getViewport (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _notifyViewport()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_notifyViewport
 * Signature:  (Ogre_Viewport)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1notifyViewport_1_1Viewportp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong vp
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _removeInstance()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_removeInstance
 * Signature:  (Ogre_CompositorInstance)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1removeInstance_1_1CompositorInstancep (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong i
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _queuedOperation()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_queuedOperation
 * Signature:  (Ogre_CompositorInstance_RenderSystemOperation)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1queuedOperation_1_1CompositorInstance_1RenderSystemOperationp (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong op
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     _compile()
 * Type:       non-virtual method
 * Definition: void Ogre::CompositorChain::_compile
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1compile (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     postRenderTargetUpdate()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderTargetListener::postRenderTargetUpdate
 * Signature:  (Ogre_RenderTargetEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1postRenderTargetUpdate_1_1RenderTargetEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     viewportAdded()
 * Type:       virtual method
 * Definition: virtual void Ogre::RenderTargetListener::viewportAdded
 * Signature:  (Ogre_RenderTargetViewportEvent)V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1viewportAdded_1_1RenderTargetViewportEventR (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_, /* C++ pointer */
  jlong evt
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     __delete()
 * Type:       destructor
 * Definition: Ogre::CompositorChain::__delete
 * Signature:  ()V
 */

JNIEXPORT void JNICALL Java_org_ogre4j_CompositorChain__1_1delete (
  JNIEnv* _jni_env_, /* interface pointer */
  jobject _jni_this_, /* Java object */
  jlong _jni_pointer_ /* C++ pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getLAST()
 * Type:       getter for public attribute
 * Definition: const size_t Ogre::CompositorChain::LAST
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositorChain__1getLAST (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

/*
 * Class:      org.ogre4j.CompositorChain
 * Method:     getBEST()
 * Type:       getter for public attribute
 * Definition: const size_t Ogre::CompositorChain::BEST
 * Signature:  ()I
 */

JNIEXPORT jint JNICALL Java_org_ogre4j_CompositorChain__1getBEST (
  JNIEnv* _jni_env_, /* interface pointer */
  jclass _jni_class_  /* class pointer */
);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /*__Included_org_ogre4j_CompositorChain__*/
