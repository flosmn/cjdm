
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 11 11:14:12 NZDT 2009
//----------------------------------------------------

package weka.filters.unsupervised.instance.subsetbyexpression;

import weka.core.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 11 11:14:12 NZDT 2009
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\006\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\010\000\002\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\050\005\016\007\033\014\026\015\012\016" +
    "\020\017\021\020\004\021\006\022\034\023\014\024\015" +
    "\025\011\026\017\027\013\030\031\036\010\042\024\043" +
    "\022\044\007\001\002\000\004\005\142\001\002\000\024" +
    "\010\045\011\043\012\046\013\044\031\110\032\106\033" +
    "\107\034\104\035\105\001\002\000\004\005\137\001\002" +
    "\000\030\006\uffee\010\uffee\011\uffee\012\uffee\013\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\041\135\001\002" +
    "\000\050\005\016\007\033\014\026\015\012\016\020\017" +
    "\021\020\004\021\006\022\034\023\014\024\015\025\011" +
    "\026\017\027\013\030\031\036\010\042\024\043\022\044" +
    "\007\001\002\000\004\005\127\001\002\000\004\005\124" +
    "\001\002\000\060\002\ufffc\005\ufffc\006\ufffc\007\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\042\ufffc\043\ufffc\044\ufffc\001\002" +
    "\000\004\005\121\001\002\000\004\005\116\001\002\000" +
    "\050\005\016\007\033\014\026\015\012\016\020\017\021" +
    "\020\004\021\006\022\034\023\014\024\015\025\011\026" +
    "\017\027\013\030\031\036\010\042\024\043\022\044\007" +
    "\001\002\000\004\005\076\001\002\000\004\005\073\001" +
    "\002\000\004\005\070\001\002\000\060\002\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\036\ufffd\037\ufffd\040\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\001\002\000\052\002\uffff\005\uffff\007\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022" +
    "\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\036\uffff\042\uffff\043\uffff\044\uffff\001\002\000\104\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef\044\uffef" +
    "\001\002\000\104\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\001\002\000\004\005\065\001\002" +
    "\000\052\002\064\005\016\007\033\014\026\015\012\016" +
    "\020\017\021\020\004\021\006\022\034\023\014\024\015" +
    "\025\011\026\017\027\013\030\031\036\010\042\024\043" +
    "\022\044\007\001\002\000\056\002\ufffe\005\ufffe\007\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\036\ufffe\037\057\040\060\042\ufffe\043\ufffe\044\ufffe\001" +
    "\002\000\060\002\ufffb\005\ufffb\006\ufffb\007\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000" +
    "\104\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec" +
    "\044\uffec\001\002\000\004\005\054\001\002\000\004\005" +
    "\035\001\002\000\036\005\040\014\026\015\012\016\020" +
    "\017\021\020\004\021\006\022\034\023\014\024\015\025" +
    "\011\026\017\042\024\044\036\001\002\000\104\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\001" +
    "\002\000\014\006\053\010\045\011\043\012\046\013\044" +
    "\001\002\000\036\005\040\014\026\015\012\016\020\017" +
    "\021\020\004\021\006\022\034\023\014\024\015\025\011" +
    "\026\017\042\024\044\036\001\002\000\014\006\042\010" +
    "\045\011\043\012\046\013\044\001\002\000\104\002\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044\uffed\001" +
    "\002\000\036\005\040\014\026\015\012\016\020\017\021" +
    "\020\004\021\006\022\034\023\014\024\015\025\011\026" +
    "\017\042\024\044\036\001\002\000\036\005\040\014\026" +
    "\015\012\016\020\017\021\020\004\021\006\022\034\023" +
    "\014\024\015\025\011\026\017\042\024\044\036\001\002" +
    "\000\036\005\040\014\026\015\012\016\020\017\021\020" +
    "\004\021\006\022\034\023\014\024\015\025\011\026\017" +
    "\042\024\044\036\001\002\000\036\005\040\014\026\015" +
    "\012\016\020\017\021\020\004\021\006\022\034\023\014" +
    "\024\015\025\011\026\017\042\024\044\036\001\002\000" +
    "\104\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\001\002\000\104\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\046\013\044\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\001\002\000\104\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7\001" +
    "\002\000\104\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\046\013\044\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea" +
    "\043\uffea\044\uffea\001\002\000\104\002\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\001\002\000\004" +
    "\044\055\001\002\000\004\006\056\001\002\000\060\002" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\001\002\000\050\005\016\007" +
    "\033\014\026\015\012\016\020\017\021\020\004\021\006" +
    "\022\034\023\014\024\015\025\011\026\017\027\013\030" +
    "\031\036\010\042\024\043\022\044\007\001\002\000\050" +
    "\005\016\007\033\014\026\015\012\016\020\017\021\020" +
    "\004\021\006\022\034\023\014\024\015\025\011\026\017" +
    "\027\013\030\031\036\010\042\024\043\022\044\007\001" +
    "\002\000\060\002\ufff2\005\ufff2\006\ufff2\007\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\001\002\000" +
    "\060\002\ufff3\005\ufff3\006\ufff3\007\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002\000\052\002" +
    "\001\005\001\007\001\014\001\015\001\016\001\017\001" +
    "\020\001\021\001\022\001\023\001\024\001\025\001\026" +
    "\001\027\001\030\001\036\001\042\001\043\001\044\001" +
    "\001\002\000\004\002\000\001\002\000\036\005\040\014" +
    "\026\015\012\016\020\017\021\020\004\021\006\022\034" +
    "\023\014\024\015\025\011\026\017\042\024\044\036\001" +
    "\002\000\014\006\067\010\045\011\043\012\046\013\044" +
    "\001\002\000\104\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\001\002\000\036\005\040\014\026" +
    "\015\012\016\020\017\021\020\004\021\006\022\034\023" +
    "\014\024\015\025\011\026\017\042\024\044\036\001\002" +
    "\000\014\006\072\010\045\011\043\012\046\013\044\001" +
    "\002\000\104\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\001\002\000\036\005\040\014\026\015" +
    "\012\016\020\017\021\020\004\021\006\022\034\023\014" +
    "\024\015\025\011\026\017\042\024\044\036\001\002\000" +
    "\014\006\075\010\045\011\043\012\046\013\044\001\002" +
    "\000\104\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\001\002\000\036\005\040\014\026\015\012" +
    "\016\020\017\021\020\004\021\006\022\034\023\014\024" +
    "\015\025\011\026\017\042\024\044\036\001\002\000\014" +
    "\006\100\010\045\011\043\012\046\013\044\001\002\000" +
    "\104\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\001\002\000\026\006\042\010\045\011\043\012" +
    "\046\013\044\031\110\032\106\033\107\034\104\035\105" +
    "\001\002\000\010\006\103\037\057\040\060\001\002\000" +
    "\060\002\ufff5\005\ufff5\006\ufff5\007\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\042\ufff5\043\ufff5\044\ufff5\001\002\000\036\005" +
    "\040\014\026\015\012\016\020\017\021\020\004\021\006" +
    "\022\034\023\014\024\015\025\011\026\017\042\024\044" +
    "\036\001\002\000\036\005\040\014\026\015\012\016\020" +
    "\017\021\020\004\021\006\022\034\023\014\024\015\025" +
    "\011\026\017\042\024\044\036\001\002\000\036\005\040" +
    "\014\026\015\012\016\020\017\021\020\004\021\006\022" +
    "\034\023\014\024\015\025\011\026\017\042\024\044\036" +
    "\001\002\000\036\005\040\014\026\015\012\016\020\017" +
    "\021\020\004\021\006\022\034\023\014\024\015\025\011" +
    "\026\017\042\024\044\036\001\002\000\036\005\040\014" +
    "\026\015\012\016\020\017\021\020\004\021\006\022\034" +
    "\023\014\024\015\025\011\026\017\042\024\044\036\001" +
    "\002\000\070\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\045" +
    "\011\043\012\046\013\044\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\036\ufffa\037\ufffa\040\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\001\002\000\070\002\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\045\011\043\012\046\013\044\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\001\002" +
    "\000\070\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\045\011" +
    "\043\012\046\013\044\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\001\002\000\070\002\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\045\011\043\012\046\013\044\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\001\002\000" +
    "\070\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\045\011\043" +
    "\012\046\013\044\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\001\002\000\036\005\040\014\026\015\012" +
    "\016\020\017\021\020\004\021\006\022\034\023\014\024" +
    "\015\025\011\026\017\042\024\044\036\001\002\000\014" +
    "\006\120\010\045\011\043\012\046\013\044\001\002\000" +
    "\104\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde" +
    "\044\uffde\001\002\000\036\005\040\014\026\015\012\016" +
    "\020\017\021\020\004\021\006\022\034\023\014\024\015" +
    "\025\011\026\017\042\024\044\036\001\002\000\014\006" +
    "\123\010\045\011\043\012\046\013\044\001\002\000\104" +
    "\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\001\002\000\036\005\040\014\026\015\012\016\020" +
    "\017\021\020\004\021\006\022\034\023\014\024\015\025" +
    "\011\026\017\042\024\044\036\001\002\000\014\006\126" +
    "\010\045\011\043\012\046\013\044\001\002\000\104\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\001\002\000\036\005\040\014\026\015\012\016\020\017" +
    "\021\020\004\021\006\022\034\023\014\024\015\025\011" +
    "\026\017\042\024\044\036\001\002\000\014\004\131\010" +
    "\045\011\043\012\046\013\044\001\002\000\036\005\040" +
    "\014\026\015\012\016\020\017\021\020\004\021\006\022" +
    "\034\023\014\024\015\025\011\026\017\042\024\044\036" +
    "\001\002\000\014\006\133\010\045\011\043\012\046\013" +
    "\044\001\002\000\104\002\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\001\002\000\060\002\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\001\002\000\004\045\136\001\002\000" +
    "\060\002\ufff1\005\ufff1\006\ufff1\007\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\042\ufff1\043\ufff1\044\ufff1\001\002\000\036\005" +
    "\040\014\026\015\012\016\020\017\021\020\004\021\006" +
    "\022\034\023\014\024\015\025\011\026\017\042\024\044" +
    "\036\001\002\000\014\006\141\010\045\011\043\012\046" +
    "\013\044\001\002\000\104\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\001\002\000\036\005\040" +
    "\014\026\015\012\016\020\017\021\020\004\021\006\022" +
    "\034\023\014\024\015\025\011\026\017\042\024\044\036" +
    "\001\002\000\014\006\144\010\045\011\043\012\046\013" +
    "\044\001\002\000\104\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\016\002\026\003\022\004\004\005\031\006" +
    "\024\007\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\004\005" +
    "\031\006\024\007\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\100\005\031\006\024\007\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\062\004\004\005" +
    "\031\006\024\007\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\036\005\031\006\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\040\005\031\006" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\051\005\031\006\024\001\001\000\010\004\050\005" +
    "\031\006\024\001\001\000\010\004\047\005\031\006\024" +
    "\001\001\000\010\004\046\005\031\006\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\004\005\031\006\024" +
    "\007\061\001\001\000\012\004\004\005\031\006\024\007" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\065\005\031\006" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\070\005\031\006\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\073\005\031\006\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\076\005" +
    "\031\006\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\114\005\031\006\024\001\001\000\010\004\113" +
    "\005\031\006\024\001\001\000\010\004\112\005\031\006" +
    "\024\001\001\000\010\004\111\005\031\006\024\001\001" +
    "\000\010\004\110\005\031\006\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\116\005\031\006\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\121" +
    "\005\031\006\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\124\005\031\006\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\127\005\031\006" +
    "\024\001\001\000\002\001\001\000\010\004\131\005\031" +
    "\006\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\137\005\031\006\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\142\005\031\006\024\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** variable - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** attribute - attribute-type (constants from weka.core.Attribute) relation. */
  protected Hashtable<String,Integer> m_AttributeTypes = new Hashtable<String,Integer>();

  /** for storing the result of the expression. */
  protected Boolean m_Result = null;

  /**
   * Sets the variable - value relation to use.
   * 
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
  }

  /**
   * Returns the current variable - value relation in use.
   * 
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Sets the attribute - attribute-type relation to use.
   * 
   * @param value the att - att-type relation
   */
  public void setAttributeTypes(Hashtable value) {
    m_AttributeTypes = value;
  }

  /**
   * Returns the current attribute - attribute-type relation in use.
   * 
   * @return the att - att-type relation
   */
  public Hashtable getAttributeTypes() {
    return m_AttributeTypes;
  }

  /**
   * Sets the result of the evaluation.
   * 
   * @param value the result
   */
  public void setResult(Boolean value) {
    m_Result = value;
  }

  /**
   * Returns the result of the evaluation.
   * 
   * @return the result
   */
  public Boolean getResult() {
    return m_Result;
  }

  /**
   * Returns either a String object for nominal attributes or a Double for numeric
   * ones. For all other attribute types this method throws an Exception.
   * It also returns a Double object in case of a missing value (for all
   * attribute types!).
   * 
   * @param instance the instance to work on
   * @param index the index of the attribute to return
   * @return the converted value
   */
  public static Object getValue(Instance instance, int index) {
    if (instance.isMissing(index))
      return new Double(Utils.missingValue());
    else if (instance.attribute(index).isNominal())
      return new String(instance.stringValue(index));
    else if (instance.attribute(index).isNumeric())
      return new Double(instance.value(index));
    else
      throw new IllegalArgumentException(
          "Unhandled attribute type '" + instance.attribute(index).type() + "'!");
  }

  /**
   * Filters the input dataset against the provided expression.
   *
   * @param expression the expression used for filtering
   * @param input the input data
   * @return the filtered data
   * @throws Exception if parsing fails
   */
  public static Instances filter(String expression, Instances input) throws Exception {
    // setup output
    Instances output = new Instances(input, 0);
    
    // setup attribute - attribute-type relation
    Hashtable<String,Integer> attTypes = new Hashtable<String,Integer>();
    for (int i = 0; i < input.numAttributes(); i++)
       attTypes.put("ATT" + (i+1), input.attribute(i).type());
    if (input.classIndex() > -1)
      attTypes.put("CLASS", input.classAttribute().type());
    
    // filter dataset
    SymbolFactory sf = new DefaultSymbolFactory();
    HashMap symbols = new HashMap();
    ByteArrayInputStream parserInput = new ByteArrayInputStream(expression.getBytes());
    for (int i = 0; i < input.numInstances(); i++) {
      Instance instance = input.instance(i);

      // setup symbols
      for (int n = 0; n < instance.numAttributes(); n++) {
        if (n == instance.classIndex())
          symbols.put("CLASS", getValue(instance, n));
        symbols.put("ATT" + (n+1), getValue(instance, n));
      }

      // evaluate expression
      parserInput.reset();
      Parser parser = new Parser(new Scanner(parserInput,sf), sf);
      parser.setSymbols(symbols);
      parser.parse();
      if (parser.getResult())
        output.add((Instance) instance.copy());
    }

    return output;
  }

  /**
   * Runs the parser from commandline. Takes the following arguments:
   * <ol>
   *   <li>expression</li>
   *   <li>input file</li>
   *   <li>class index (first|last|num), use 0 to ignore</li>
   *   <li>output file</li>
   * </ol>
   * 
   * @param args the commandline arguments
   * @throws Exception if something goes wrong
   */
  public static void main(String args[]) throws Exception {
    // get expression
    String expression = args[0];

    // read input data
    BufferedReader reader = new BufferedReader(new FileReader(args[1]));
    Instances input = new Instances(reader);
    reader.close();
    if (args[2].equals("first"))
      input.setClassIndex(0);
    else if (args[2].equals("last"))
      input.setClassIndex(input.numAttributes() - 1);
    else
      input.setClassIndex(Integer.parseInt(args[2]) - 1);

    // process dataset
    Instances output = filter(expression, input);

    // save output file
    BufferedWriter writer = new BufferedWriter(new FileWriter(args[3]));
    writer.write(new Instances(output, 0).toString());
    writer.newLine();
    for (int i = 0; i < output.numInstances(); i++) {
      writer.write(output.instance(i).toString());
      writer.newLine();
    }
    writer.flush();
    writer.close();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcexpr ::= CEIL LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.ceil(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcexpr ::= POW LPAREN expr COMMA expr RPAREN 
            {
              Double RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double base = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exponentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exponentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double exponent = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.pow(base, exponent)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcexpr ::= FLOOR LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.floor(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcexpr ::= RINT LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.rint(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcexpr ::= TAN LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.tan(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcexpr ::= COS LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.cos(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcexpr ::= SIN LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.sin(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcexpr ::= EXP LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.exp(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcexpr ::= LOG LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.log(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcexpr ::= SQRT LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.sqrt(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcexpr ::= ABS LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.abs(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opexpr ::= expr DIVISION expr 
            {
              Double RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(l.doubleValue() / r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opexpr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(l.doubleValue() * r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opexpr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(l.doubleValue() - r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opexpr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(l.doubleValue() + r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= funcexpr 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= opexpr 
            {
              Double RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double o = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = o; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= ATTRIBUTE 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (parser.getSymbols().containsKey(a)) 
                     RESULT = (Double) parser.getSymbols().get(a); 
                   else 
                     throw new IllegalStateException("Unknown symbol '" + a + "'!"); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolexpr ::= ISMISSING LPAREN ATTRIBUTE RPAREN 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (parser.getSymbols().containsKey(a)) 
                     RESULT = (parser.getSymbols().get(a) instanceof Double) && Utils.isMissingValue((Double) parser.getSymbols().get(a));
                   else 
                     throw new IllegalStateException("Unknown symbol '" + a + "'!"); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolexpr ::= ATTRIBUTE IS STRING 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (parser.getSymbols().containsKey(a)) 
                     RESULT = (parser.getSymbols().get(a) instanceof String) && ((String) parser.getSymbols().get(a)).equals(s);
                   else 
                     throw new IllegalStateException("Unknown symbol '" + a + "'!"); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolexpr ::= boolexpr OR boolexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l || r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolexpr ::= boolexpr AND boolexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l && r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // boolexpr ::= NOT boolexpr 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = !b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // boolexpr ::= LPAREN boolexpr RPAREN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // boolexpr ::= expr EQ expr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(l.doubleValue() == r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // boolexpr ::= expr GE expr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(l.doubleValue() >= r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // boolexpr ::= expr GT expr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(l.doubleValue() > r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // boolexpr ::= expr LE expr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(l.doubleValue() <= r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // boolexpr ::= expr LT expr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(l.doubleValue() < r.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // boolexpr ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // boolexpr ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // boolexpr ::= BOOLEAN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // boolexpr_part ::= boolexpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.setResult(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // boolexpr_list ::= boolexpr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= boolexpr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // boolexpr_list ::= boolexpr_list boolexpr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

